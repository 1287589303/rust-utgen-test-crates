[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &((*_1).1: [regex_syntax::utf8::Utf8Range; 4]),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = ((*_1).2: u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:679:24: 679:49 (#0),
                    scope: scope[0],
                },
                kind: _7 = <usize as core::convert::TryFrom<u8>>::try_from(move _8) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:679:24: 679:58 (#0),
                    scope: scope[0],
                },
                kind: _6 = core::result::Result::<usize, core::convert::Infallible>::unwrap(move _7) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            _5 = core::ops::RangeTo::<usize> { end: move _6 },
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:679:21: 679:59 (#0),
                    scope: scope[0],
                },
                kind: _3 = <[regex_syntax::utf8::Utf8Range; 4] as core::ops::Index<core::ops::RangeTo<usize>>>::index(move _4, move _5) -> [return: bb3, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            _2 = &(*_3),
            _0 = &(*_2),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:680:6: 680:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:678:5: 680:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [regex_syntax::utf8::Utf8Range],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:678:25: 678:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} nfa::thompson::range_trie::NextInsert,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:678:15: 678:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:679:9: 679:59 (#0),
                },
            ),
        ),
        ty: &'{erased} [regex_syntax::utf8::Utf8Range],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:679:9: 679:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:679:9: 679:59 (#0),
                },
            ),
        ),
        ty: &'{erased} [regex_syntax::utf8::Utf8Range],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:679:21: 679:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:679:9: 679:59 (#0),
                },
            ),
        ),
        ty: &'{erased} [regex_syntax::utf8::Utf8Range; 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:679:10: 679:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:679:9: 679:59 (#0),
                },
            ),
        ),
        ty: core::ops::RangeTo<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:679:22: 679:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:679:24: 679:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:679:9: 679:59 (#0),
                },
            ),
        ),
        ty: core::result::Result<usize, core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:679:24: 679:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:679:9: 679:59 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:679:40: 679:48 (#0),
            scope: scope[0],
        },
    },
]