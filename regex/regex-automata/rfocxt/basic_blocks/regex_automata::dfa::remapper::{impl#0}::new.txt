[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:92:45: 92:56 (#0),
                    scope: scope[0],
                },
                kind: _3 = <impl Remappable as dfa::remapper::Remappable>::stride2(move _4) -> [return: bb1, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            _2 = dfa::remapper::IndexMapper { stride2: move _3 },
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:93:23: 93:36 (#0),
                    scope: scope[1],
                },
                kind: _8 = <impl Remappable as dfa::remapper::Remappable>::state_len(move _9) -> [return: bb2, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            _7 = core::ops::Range::<usize> { start: const 0_usize, end: move _8 },
            StorageDead(_8),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &_2,
            _10 = {closure@regex-automata/src/dfa/remapper.rs:93:42: 93:45} { idxmap: move _11 },
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:93:19: 93:68 (#0),
                    scope: scope[1],
                },
                kind: _6 = <core::ops::Range<usize> as core::iter::Iterator>::map::<util::primitives::StateID, {closure@regex-automata/src/dfa/remapper.rs:93:42: 93:45}>(move _7, move _10) -> [return: bb3, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:93:19: 93:78 (#0),
                    scope: scope[1],
                },
                kind: _5 = <core::iter::Map<core::ops::Range<usize>, {closure@regex-automata/src/dfa/remapper.rs:93:42: 93:45}> as core::iter::Iterator>::collect::<std::vec::Vec<util::primitives::StateID>>(move _6) -> [return: bb4, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            FakeRead(ForLet(None), _5),
            StorageLive(_12),
            _12 = move _5,
            StorageLive(_13),
            _13 = move _2,
            _0 = dfa::remapper::Remapper { map: move _12, idxmap: move _13 },
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:94:32: 94:33 (#0),
                    scope: scope[2],
                },
                kind: drop(_12) -> [return: bb5, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:95:5: 95:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_5) -> [return: bb6, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:95:6: 95:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:95:5: 95:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_5) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/remapper.rs:91:5: 95:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: dfa::remapper::Remapper,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:91:47: 91:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/dfa/remapper.rs:91:26: 91:42 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/remapper.rs:91:23: 91:24 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/remapper.rs:91:23: 91:24 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} impl Remappable/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:91:23: 91:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/remapper.rs:92:22: 92:58 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/remapper.rs:92:13: 92:19 (#0),
                    },
                ),
            ),
        ),
        ty: dfa::remapper::IndexMapper,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:92:13: 92:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:92:45: 92:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} impl Remappable/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:92:45: 92:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/remapper.rs:93:19: 93:78 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/remapper.rs:93:13: 93:16 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:93:13: 93:16 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Map<core::ops::Range<usize>, Closure(DefId(0:1145 ~ regex_automata[00dd]::dfa::remapper::{impl#0}::new::{closure#0}), [impl Remappable/#0, i16, Binder { value: extern "RustCall" fn((usize,)) -> util::primitives::StateID, bound_vars: [] }, (&'{erased} dfa::remapper::IndexMapper,)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:93:19: 93:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:93:19: 93:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:93:23: 93:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} impl Remappable/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:93:23: 93:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:1145 ~ regex_automata[00dd]::dfa::remapper::{impl#0}::new::{closure#0}),
            [
                impl Remappable/#0,
                i16,
                Binder { value: extern "RustCall" fn((usize,)) -> util::primitives::StateID, bound_vars: [] },
                (&'{erased} dfa::remapper::IndexMapper,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:93:42: 93:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::remapper::IndexMapper,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:93:42: 93:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:94:20: 94:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: dfa::remapper::IndexMapper,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/remapper.rs:94:25: 94:31 (#0),
            scope: scope[0],
        },
    },
]