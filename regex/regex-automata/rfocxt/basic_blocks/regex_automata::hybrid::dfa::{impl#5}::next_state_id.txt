[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &((*((*_1).1: &mut hybrid::dfa::Cache)).0: std::vec::Vec<hybrid::id::LazyStateID>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:2320:42: 2320:64 (#0),
                    scope: scope[0],
                },
                kind: _4 = std::vec::Vec::<hybrid::id::LazyStateID>::len(move _5) -> [return: bb1, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:2320:25: 2320:65 (#0),
                    scope: scope[0],
                },
                kind: _3 = hybrid::id::LazyStateID::new(move _4) -> [return: bb2, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            PlaceMention(_3),
            _6 = discriminant(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:2320:19: 2320:65 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [0: bb4, 1: bb5, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:2320:25: 2320:65 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:2321:13: 2321:20 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:2323:17: 2323:39 (#0),
                    scope: scope[0],
                },
                kind: _10 = hybrid::dfa::Lazy::<'_, '_>::try_clear_cache(move _11) -> [return: bb7, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            _7 = ((_3 as Ok).0: hybrid::id::LazyStateID),
            _2 = _7,
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:2321:26: 2321:27 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:2323:17: 2323:40 (#3457),
                    scope: scope[0],
                },
                kind: _9 = <core::result::Result<(), hybrid::error::CacheError> as core::ops::Try>::branch(move _10) -> [return: bb8, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            PlaceMention(_9),
            _12 = discriminant(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:2323:17: 2323:40 (#3457),
                    scope: scope[0],
                },
                kind: switchInt(move _12) -> [0: bb11, 1: bb10, otherwise: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:2323:17: 2323:40 (#3457),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:2323:39: 2323:40 (#3458),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb12, imaginary: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = ((_9 as Continue).0: ()),
            _8 = _16,
            StorageDead(_16),
            StorageDead(_9),
            StorageDead(_8),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &((*((*_1).1: &mut hybrid::dfa::Cache)).0: std::vec::Vec<hybrid::id::LazyStateID>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:2326:34: 2326:56 (#0),
                    scope: scope[0],
                },
                kind: _18 = std::vec::Vec::<hybrid::id::LazyStateID>::len(move _19) -> [return: bb14, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            _13 = move ((_9 as Break).0: core::result::Result<core::convert::Infallible, hybrid::error::CacheError>),
            StorageLive(_15),
            _15 = move _13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:2323:17: 2323:40 (#3457),
                    scope: scope[4],
                },
                kind: _0 = <core::result::Result<hybrid::id::LazyStateID, hybrid::error::CacheError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, hybrid::error::CacheError>>>::from_residual(move _15) -> [return: bb13, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:2330:6: 2330:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:2326:17: 2326:57 (#0),
                    scope: scope[0],
                },
                kind: _17 = hybrid::id::LazyStateID::new(move _18) -> [return: bb15, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:2326:17: 2326:66 (#0),
                    scope: scope[0],
                },
                kind: _2 = core::result::Result::<hybrid::id::LazyStateID, hybrid::id::LazyStateIDError>::unwrap(move _17) -> [return: bb16, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:2326:65: 2326:66 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _2),
            StorageDead(_3),
            StorageLive(_20),
            _20 = _2,
            _0 = core::result::Result::<hybrid::id::LazyStateID, hybrid::error::CacheError>::Ok(move _20),
            StorageDead(_20),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:2330:6: 2330:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:2330:6: 2330:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:2319:5: 2330:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<hybrid::id::LazyStateID, hybrid::error::CacheError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:2319:36: 2319:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut hybrid::dfa::Lazy<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:2319:22: 2319:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/hybrid/dfa.rs:2320:19: 2328:10 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/dfa.rs:2320:13: 2320:16 (#0),
                    },
                ),
            ),
        ),
        ty: hybrid::id::LazyStateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:2320:13: 2320:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<hybrid::id::LazyStateID, hybrid::id::LazyStateIDError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:2320:25: 2320:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:2320:42: 2320:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<hybrid::id::LazyStateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:2320:42: 2320:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:2321:13: 2321:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                regex-automata/src/hybrid/dfa.rs:2320:25: 2320:65 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/dfa.rs:2321:13: 2321:20 (#0),
                    },
                ),
            ),
        ),
        ty: hybrid::id::LazyStateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:2321:16: 2321:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:2323:17: 2323:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, hybrid::error::CacheError>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:2323:17: 2323:40 (#3457),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), hybrid::error::CacheError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:2323:17: 2323:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hybrid::dfa::Lazy<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:2323:17: 2323:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:2323:39: 2323:40 (#3458),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _9,
                                ),
                                regex-automata/src/hybrid/dfa.rs:2323:17: 2323:40 (#3457),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/dfa.rs:2323:39: 2323:40 (#3458),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, hybrid::error::CacheError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:2323:39: 2323:40 (#3458),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:2323:39: 2323:40 (#3458),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, hybrid::error::CacheError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:2323:39: 2323:40 (#3458),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _9,
                                ),
                                regex-automata/src/hybrid/dfa.rs:2323:17: 2323:40 (#3457),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/dfa.rs:2323:17: 2323:40 (#3457),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:2323:17: 2323:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/hybrid/dfa.rs:2326:17: 2326:66 (#0),
                },
            ),
        ),
        ty: core::result::Result<hybrid::id::LazyStateID, hybrid::id::LazyStateIDError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:2326:17: 2326:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/hybrid/dfa.rs:2326:17: 2326:66 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:2326:34: 2326:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/hybrid/dfa.rs:2326:17: 2326:66 (#0),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<hybrid::id::LazyStateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:2326:34: 2326:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: hybrid::id::LazyStateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:2329:12: 2329:15 (#0),
            scope: scope[0],
        },
    },
]