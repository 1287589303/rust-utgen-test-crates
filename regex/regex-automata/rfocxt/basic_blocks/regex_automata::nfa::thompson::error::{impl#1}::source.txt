[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/error.rs:135:15: 135:26 (#0),
                    scope: scope[0],
                },
                kind: _2 = nfa::thompson::error::BuildError::kind(move _3) -> [return: bb1, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            PlaceMention(_2),
            _4 = discriminant((*_2)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/error.rs:135:9: 135:26 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb3, 1: bb4, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::option::Option::<&dyn core::error::Error>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/error.rs:139:18: 139:22 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/error.rs:137:13: 137:44 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/error.rs:138:13: 138:46 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_5),
            _5 = &(((*_2) as Syntax).0: regex_syntax::Error),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_5),
            _6 = move _7 as &dyn core::error::Error (PointerCoercion(Unsize)),
            StorageDead(_7),
            _0 = core::option::Option::<&dyn core::error::Error>::Some(move _6),
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/error.rs:137:56: 137:57 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            _8 = &(((*_2) as Captures).0: util::captures::GroupInfoError),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &(*_8),
            _9 = move _10 as &dyn core::error::Error (PointerCoercion(Unsize)),
            StorageDead(_10),
            _0 = core::option::Option::<&dyn core::error::Error>::Some(move _9),
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/error.rs:138:58: 138:59 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/error.rs:141:6: 141:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/error.rs:134:5: 141:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} dyn [Binder { value: Trait(core::error::Error), bound_vars: [] }] + '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/error.rs:134:25: 134:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} nfa::thompson::error::BuildError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/error.rs:134:15: 134:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/error.rs:135:9: 140:10 (#0),
                },
            ),
        ),
        ty: &'{erased} nfa::thompson::error::BuildErrorKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/error.rs:135:15: 135:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/error.rs:135:9: 140:10 (#0),
                },
            ),
        ),
        ty: &'{erased} nfa::thompson::error::BuildError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/error.rs:135:15: 135:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/error.rs:137:13: 137:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                regex-automata/src/nfa/thompson/error.rs:135:15: 135:26 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/error.rs:137:13: 137:44 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} regex_syntax::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/error.rs:137:36: 137:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} dyn [Binder { value: Trait(core::error::Error), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/error.rs:137:53: 137:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/error.rs:135:9: 140:10 (#0),
                },
            ),
        ),
        ty: &'{erased} regex_syntax::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/error.rs:137:53: 137:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                regex-automata/src/nfa/thompson/error.rs:135:15: 135:26 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/error.rs:138:13: 138:46 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} util::captures::GroupInfoError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/error.rs:138:38: 138:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} dyn [Binder { value: Trait(core::error::Error), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/error.rs:138:55: 138:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/error.rs:135:9: 140:10 (#0),
                },
            ),
        ),
        ty: &'{erased} util::captures::GroupInfoError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/error.rs:138:55: 138:58 (#0),
            scope: scope[0],
        },
    },
]