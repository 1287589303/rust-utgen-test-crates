[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = _2,
            _3 = core::option::Option::<bool>::Some(move _4),
            StorageDead(_4),
            _0 = meta::regex::Config { match_kind: (_1.0: core::option::Option<util::search::MatchKind>), utf8_empty: (_1.1: core::option::Option<bool>), autopre: (_1.2: core::option::Option<bool>), pre: move (_1.3: core::option::Option<core::option::Option<util::prefilter::Prefilter>>), which_captures: (_1.4: core::option::Option<nfa::thompson::compiler::WhichCaptures>), nfa_size_limit: (_1.5: core::option::Option<core::option::Option<usize>>), onepass_size_limit: (_1.6: core::option::Option<core::option::Option<usize>>), hybrid_cache_capacity: (_1.7: core::option::Option<usize>), hybrid: (_1.8: core::option::Option<bool>), dfa: move _3, dfa_size_limit: (_1.10: core::option::Option<core::option::Option<usize>>), dfa_state_limit: (_1.11: core::option::Option<core::option::Option<usize>>), onepass: (_1.12: core::option::Option<bool>), backtrack: (_1.13: core::option::Option<bool>), byte_classes: (_1.14: core::option::Option<bool>), line_terminator: (_1.15: core::option::Option<u8>) },
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:3002:5: 3002:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:3002:6: 3002:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:3000:5: 3002:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: meta::regex::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:3000:36: 3000:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: meta::regex::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:3000:16: 3000:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/meta/regex.rs:3000:27: 3000:31 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/regex.rs:3000:22: 3000:25 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/regex.rs:3000:22: 3000:25 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:3000:22: 3000:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<bool>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:3001:23: 3001:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:3001:28: 3001:31 (#0),
            scope: scope[0],
        },
    },
]