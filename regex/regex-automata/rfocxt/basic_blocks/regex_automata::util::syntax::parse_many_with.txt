[
    BasicBlockData {
        statements: [
            StorageLive(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:122:23: 122:43 (#0),
                    scope: scope[0],
                },
                kind: _3 = regex_syntax::ParserBuilder::new() -> [return: bb1, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_2),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &mut _3,
            _6 = &mut (*_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:123:5: 123:31 (#0),
                    scope: scope[1],
                },
                kind: _4 = util::syntax::Config::apply(move _5, move _6) -> [return: bb2, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_7),
            StorageDead(_4),
            StorageLive(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9: 44:32 (#1867),
                    scope: scope[1],
                },
                kind: _8 = std::vec::Vec::<regex_syntax::hir::Hir>::new() -> [return: bb3, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:125:14: 125:29 (#0),
                    scope: scope[2],
                },
                kind: _11 = core::slice::<impl [P]>::iter(move _12) -> [return: bb4, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:125:14: 125:29 (#4973),
                    scope: scope[2],
                },
                kind: _10 = <core::slice::Iter<'_, P> as core::iter::IntoIterator>::into_iter(move _11) -> [return: bb5, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            PlaceMention(_10),
            StorageLive(_13),
            _13 = move _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:125:5: 127:6 (#4972),
                    scope: scope[3],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:125:5: 127:6 (#4972),
                    scope: scope[3],
                },
                kind: falseUnwind -> [real: bb7, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &mut _13,
            _17 = &mut (*_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:125:14: 125:29 (#4973),
                    scope: scope[3],
                },
                kind: _16 = <core::slice::Iter<'_, P> as core::iter::Iterator>::next(move _17) -> [return: bb8, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            PlaceMention(_16),
            _19 = discriminant(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:125:14: 125:29 (#4973),
                    scope: scope[3],
                },
                kind: switchInt(move _19) -> [0: bb10, 1: bb11, otherwise: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:125:14: 125:29 (#4973),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:125:5: 127:6 (#4972),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb12, imaginary: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_21),
            _21 = ((_16 as Some).0: &P),
            StorageLive(_22),
            StorageLive(_23),
            _23 = &mut _8,
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &_3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:126:19: 126:34 (#0),
                    scope: scope[4],
                },
                kind: _28 = regex_syntax::ParserBuilder::build(move _29) -> [return: bb13, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _9 = const (),
            StorageDead(_18),
            StorageDead(_16),
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_10),
            StorageDead(_9),
            StorageLive(_38),
            _38 = move _8,
            _0 = core::result::Result::<std::vec::Vec<regex_syntax::hir::Hir>, regex_syntax::Error>::Ok(move _38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:128:12: 128:13 (#0),
                    scope: scope[2],
                },
                kind: drop(_38) -> [return: bb26, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _27 = &mut _28,
            StorageDead(_29),
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            _32 = &(*_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:126:41: 126:51 (#0),
                    scope: scope[4],
                },
                kind: _31 = <P as core::convert::AsRef<str>>::as_ref(move _32) -> [return: bb14, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _30 = &(*_31),
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:126:19: 126:52 (#0),
                    scope: scope[4],
                },
                kind: _26 = regex_syntax::Parser::parse(move _27, move _30) -> [return: bb15, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:126:19: 126:53 (#4975),
                    scope: scope[4],
                },
                kind: _25 = <core::result::Result<regex_syntax::hir::Hir, regex_syntax::Error> as core::ops::Try>::branch(move _26) -> [return: bb16, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            PlaceMention(_25),
            _33 = discriminant(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:126:19: 126:53 (#4975),
                    scope: scope[4],
                },
                kind: switchInt(move _33) -> [0: bb19, 1: bb18, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:126:19: 126:53 (#4975),
                    scope: scope[4],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:126:52: 126:53 (#4976),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb20, imaginary: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_37),
            _37 = move ((_25 as Continue).0: regex_syntax::hir::Hir),
            _24 = move _37,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:126:52: 126:53 (#0),
                    scope: scope[4],
                },
                kind: drop(_37) -> [return: bb22, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_34),
            _34 = move ((_25 as Break).0: core::result::Result<core::convert::Infallible, regex_syntax::Error>),
            StorageLive(_36),
            _36 = move _34,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:126:19: 126:53 (#4975),
                    scope: scope[6],
                },
                kind: _0 = <core::result::Result<std::vec::Vec<regex_syntax::hir::Hir>, regex_syntax::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, regex_syntax::Error>>>::from_residual(move _36) -> [return: bb21, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:126:52: 126:53 (#4976),
                    scope: scope[4],
                },
                kind: drop(_34) -> [return: bb28, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:126:9: 126:54 (#0),
                    scope: scope[4],
                },
                kind: _22 = std::vec::Vec::<regex_syntax::hir::Hir>::push(move _23, move _24) -> [return: bb23, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:126:54: 126:55 (#0),
                    scope: scope[4],
                },
                kind: drop(_25) -> [return: bb24, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:126:54: 126:55 (#0),
                    scope: scope[4],
                },
                kind: drop(_28) -> [return: bb25, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_25),
            StorageDead(_22),
            _15 = const (),
            StorageDead(_21),
            StorageDead(_18),
            StorageDead(_16),
            StorageDead(_15),
            _14 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:125:5: 127:6 (#4972),
                    scope: scope[3],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:129:1: 129:2 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb27, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:129:2: 129:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb32,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_24),
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:126:54: 126:55 (#0),
                    scope: scope[4],
                },
                kind: drop(_25) -> [return: bb29, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:126:54: 126:55 (#0),
                    scope: scope[4],
                },
                kind: drop(_28) -> [return: bb30, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_25),
            StorageDead(_22),
            StorageDead(_21),
            StorageDead(_18),
            StorageDead(_16),
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_10),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:129:1: 129:2 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb31, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:129:2: 129:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb32,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:129:2: 129:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:126:53: 126:54 (#0),
                    scope: scope[4],
                },
                kind: drop(_24) -> [return: bb36, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:126:52: 126:53 (#4975),
                    scope: scope[6],
                },
                kind: drop(_36) -> [return: bb35, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:126:52: 126:53 (#4976),
                    scope: scope[4],
                },
                kind: drop(_34) -> [return: bb36, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:126:54: 126:55 (#0),
                    scope: scope[4],
                },
                kind: drop(_25) -> [return: bb38, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:126:52: 126:53 (#4975),
                    scope: scope[4],
                },
                kind: drop(_26) -> [return: bb38, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:126:54: 126:55 (#0),
                    scope: scope[4],
                },
                kind: drop(_28) -> [return: bb39, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:129:1: 129:2 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb40, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:118:1: 129:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<std::vec::Vec<regex_syntax::hir::Hir, std::alloc::Global>, regex_syntax::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:121:6: 121:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/syntax.rs:119:15: 119:19 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/syntax.rs:119:5: 119:13 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/syntax.rs:119:5: 119:13 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [P/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:119:5: 119:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/syntax.rs:120:13: 120:20 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/syntax.rs:120:5: 120:11 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/syntax.rs:120:5: 120:11 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} util::syntax::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:120:5: 120:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/syntax.rs:122:23: 122:43 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/syntax.rs:122:9: 122:20 (#0),
                    },
                ),
            ),
        ),
        ty: regex_syntax::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:122:9: 122:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:123:5: 123:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::syntax::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:123:5: 123:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:123:18: 123:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:123:18: 123:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9: 44:32 (#1867),
                            ),
                        ),
                        pat_span: regex-automata/src/util/syntax.rs:124:9: 124:17 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<regex_syntax::hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:124:9: 124:17 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:125:5: 127:6 (#4972),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::Iter<'{erased}, P/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:125:14: 125:29 (#4973),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::Iter<'{erased}, P/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:125:14: 125:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [P/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:125:14: 125:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _10,
                                ),
                                regex-automata/src/util/syntax.rs:125:14: 125:29 (#4973),
                            ),
                        ),
                        pat_span: regex-automata/src/util/syntax.rs:125:14: 125:29 (#4973),
                    },
                ),
            ),
        ),
        ty: core::slice::Iter<'{erased}, P/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:125:14: 125:29 (#4973),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:118:1: 129:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:125:14: 125:29 (#4973),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} P/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:125:14: 125:29 (#4973),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, P/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:125:14: 125:29 (#4973),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, P/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:125:14: 125:29 (#4973),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:125:5: 127:6 (#4972),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:125:5: 127:6 (#4972),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _16,
                                ),
                                regex-automata/src/util/syntax.rs:125:14: 125:29 (#4973),
                            ),
                        ),
                        pat_span: regex-automata/src/util/syntax.rs:125:9: 125:10 (#4974),
                    },
                ),
            ),
        ),
        ty: &'{erased} P/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:125:9: 125:10 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:126:9: 126:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<regex_syntax::hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:126:9: 126:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regex_syntax::hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:126:19: 126:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, regex_syntax::Error>, regex_syntax::hir::Hir>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:126:19: 126:53 (#4975),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<regex_syntax::hir::Hir, regex_syntax::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:126:19: 126:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::Parser,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:126:19: 126:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regex_syntax::Parser,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:126:19: 126:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} regex_syntax::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:126:19: 126:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:126:41: 126:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:126:41: 126:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} P/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:126:41: 126:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:126:52: 126:53 (#4976),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _25,
                                ),
                                regex-automata/src/util/syntax.rs:126:19: 126:53 (#4975),
                            ),
                        ),
                        pat_span: regex-automata/src/util/syntax.rs:126:52: 126:53 (#4976),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, regex_syntax::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:126:52: 126:53 (#4976),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:126:52: 126:53 (#4976),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, regex_syntax::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:126:52: 126:53 (#4976),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _25,
                                ),
                                regex-automata/src/util/syntax.rs:126:19: 126:53 (#4975),
                            ),
                        ),
                        pat_span: regex-automata/src/util/syntax.rs:126:19: 126:53 (#4975),
                    },
                ),
            ),
        ),
        ty: regex_syntax::hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:126:19: 126:53 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::vec::Vec<regex_syntax::hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:128:8: 128:12 (#0),
            scope: scope[0],
        },
    },
]