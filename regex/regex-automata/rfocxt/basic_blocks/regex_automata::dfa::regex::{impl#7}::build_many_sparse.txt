[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_1),
            StorageLive(_7),
            _7 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:756:18: 756:43 (#0),
                    scope: scope[0],
                },
                kind: _5 = dfa::regex::Builder::build_many::<P>(move _6, move _7) -> [return: bb1, unwind: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:756:18: 756:44 (#2716),
                    scope: scope[0],
                },
                kind: _4 = <core::result::Result<dfa::regex::Regex, dfa::dense::BuildError> as core::ops::Try>::branch(move _5) -> [return: bb2, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            PlaceMention(_4),
            _8 = discriminant(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:756:18: 756:44 (#2716),
                    scope: scope[0],
                },
                kind: switchInt(move _8) -> [0: bb5, 1: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:756:18: 756:44 (#2716),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:756:43: 756:44 (#2717),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            _12 = move ((_4 as Continue).0: dfa::regex::Regex),
            _3 = move _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:756:43: 756:44 (#0),
                    scope: scope[0],
                },
                kind: drop(_12) -> [return: bb8, unwind: bb59],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            _9 = move ((_4 as Break).0: core::result::Result<core::convert::Infallible, dfa::dense::BuildError>),
            StorageLive(_11),
            _11 = move _9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:756:18: 756:44 (#2716),
                    scope: scope[3],
                },
                kind: _0 = <core::result::Result<dfa::regex::Regex<dfa::sparse::DFA<std::vec::Vec<u8>>>, dfa::dense::BuildError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, dfa::dense::BuildError>>>::from_residual(move _11) -> [return: bb7, unwind: bb57],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:756:43: 756:44 (#2717),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb40, unwind: bb59],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            FakeRead(ForLet(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:756:44: 756:45 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb9, unwind: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &_3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:757:23: 757:35 (#0),
                    scope: scope[1],
                },
                kind: _17 = dfa::regex::Regex::forward(move _18) -> [return: bb10, unwind: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _16 = &(*_17),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:757:23: 757:47 (#0),
                    scope: scope[1],
                },
                kind: _15 = dfa::dense::DFA::<std::vec::Vec<u32>>::to_sparse(move _16) -> [return: bb11, unwind: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:757:23: 757:48 (#2718),
                    scope: scope[1],
                },
                kind: _14 = <core::result::Result<dfa::sparse::DFA<std::vec::Vec<u8>>, dfa::dense::BuildError> as core::ops::Try>::branch(move _15) -> [return: bb12, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            PlaceMention(_14),
            _19 = discriminant(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:757:23: 757:48 (#2718),
                    scope: scope[1],
                },
                kind: switchInt(move _19) -> [0: bb15, 1: bb14, otherwise: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:757:23: 757:48 (#2718),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:757:47: 757:48 (#2719),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb16, imaginary: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_23),
            _23 = move ((_14 as Continue).0: dfa::sparse::DFA<std::vec::Vec<u8>>),
            _13 = move _23,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:757:47: 757:48 (#0),
                    scope: scope[1],
                },
                kind: drop(_23) -> [return: bb18, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_20),
            _20 = move ((_14 as Break).0: core::result::Result<core::convert::Infallible, dfa::dense::BuildError>),
            StorageLive(_22),
            _22 = move _20,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:757:23: 757:48 (#2718),
                    scope: scope[8],
                },
                kind: _0 = <core::result::Result<dfa::regex::Regex<dfa::sparse::DFA<std::vec::Vec<u8>>>, dfa::dense::BuildError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, dfa::dense::BuildError>>>::from_residual(move _22) -> [return: bb17, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:757:47: 757:48 (#2719),
                    scope: scope[1],
                },
                kind: drop(_20) -> [return: bb37, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            FakeRead(ForLet(None), _13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:757:48: 757:49 (#0),
                    scope: scope[1],
                },
                kind: drop(_14) -> [return: bb19, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_14),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &_3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:758:23: 758:35 (#0),
                    scope: scope[6],
                },
                kind: _28 = dfa::regex::Regex::reverse(move _29) -> [return: bb20, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _27 = &(*_28),
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:758:23: 758:47 (#0),
                    scope: scope[6],
                },
                kind: _26 = dfa::dense::DFA::<std::vec::Vec<u32>>::to_sparse(move _27) -> [return: bb21, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:758:23: 758:48 (#2720),
                    scope: scope[6],
                },
                kind: _25 = <core::result::Result<dfa::sparse::DFA<std::vec::Vec<u8>>, dfa::dense::BuildError> as core::ops::Try>::branch(move _26) -> [return: bb22, unwind: bb50],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            PlaceMention(_25),
            _30 = discriminant(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:758:23: 758:48 (#2720),
                    scope: scope[6],
                },
                kind: switchInt(move _30) -> [0: bb25, 1: bb24, otherwise: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:758:23: 758:48 (#2720),
                    scope: scope[6],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:758:47: 758:48 (#2721),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb26, imaginary: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_34),
            _34 = move ((_25 as Continue).0: dfa::sparse::DFA<std::vec::Vec<u8>>),
            _24 = move _34,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:758:47: 758:48 (#0),
                    scope: scope[6],
                },
                kind: drop(_34) -> [return: bb28, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_31),
            _31 = move ((_25 as Break).0: core::result::Result<core::convert::Infallible, dfa::dense::BuildError>),
            StorageLive(_33),
            _33 = move _31,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:758:23: 758:48 (#2720),
                    scope: scope[13],
                },
                kind: _0 = <core::result::Result<dfa::regex::Regex<dfa::sparse::DFA<std::vec::Vec<u8>>>, dfa::dense::BuildError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, dfa::dense::BuildError>>>::from_residual(move _33) -> [return: bb27, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:758:47: 758:48 (#2721),
                    scope: scope[6],
                },
                kind: drop(_31) -> [return: bb35, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            FakeRead(ForLet(None), _24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:758:48: 758:49 (#0),
                    scope: scope[6],
                },
                kind: drop(_25) -> [return: bb29, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_25),
            StorageLive(_35),
            StorageLive(_36),
            _36 = &(*_1),
            StorageLive(_37),
            _37 = move _13,
            StorageLive(_38),
            _38 = move _24,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:759:12: 759:50 (#0),
                    scope: scope[11],
                },
                kind: _35 = dfa::regex::Builder::build_from_dfas::<dfa::sparse::DFA<std::vec::Vec<u8>>>(move _36, move _37, move _38) -> [return: bb30, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            StorageDead(_37),
            StorageDead(_36),
            _0 = core::result::Result::<dfa::regex::Regex<dfa::sparse::DFA<std::vec::Vec<u8>>>, dfa::dense::BuildError>::Ok(move _35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:759:50: 759:51 (#0),
                    scope: scope[11],
                },
                kind: drop(_35) -> [return: bb31, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:760:5: 760:6 (#0),
                    scope: scope[6],
                },
                kind: drop(_24) -> [return: bb32, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:760:5: 760:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_13) -> [return: bb33, unwind: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:760:5: 760:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb34, unwind: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:760:6: 760:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb43,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:758:48: 758:49 (#0),
                    scope: scope[6],
                },
                kind: drop(_25) -> [return: bb36, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_25),
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:760:5: 760:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_13) -> [return: bb39, unwind: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:757:48: 757:49 (#0),
                    scope: scope[1],
                },
                kind: drop(_14) -> [return: bb38, unwind: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb39,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:760:5: 760:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb42, unwind: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:756:44: 756:45 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb41, unwind: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb42,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:760:6: 760:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb43,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:760:6: 760:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:759:49: 759:50 (#0),
                    scope: scope[11],
                },
                kind: drop(_38) -> [return: bb45, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:759:49: 759:50 (#0),
                    scope: scope[11],
                },
                kind: drop(_37) -> [return: bb46, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:760:5: 760:6 (#0),
                    scope: scope[6],
                },
                kind: drop(_24) -> [return: bb51, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:758:47: 758:48 (#2720),
                    scope: scope[13],
                },
                kind: drop(_33) -> [return: bb48, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:758:47: 758:48 (#2721),
                    scope: scope[6],
                },
                kind: drop(_31) -> [return: bb49, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:758:48: 758:49 (#0),
                    scope: scope[6],
                },
                kind: drop(_25) -> [return: bb51, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:758:47: 758:48 (#2720),
                    scope: scope[6],
                },
                kind: drop(_26) -> [return: bb51, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:760:5: 760:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_13) -> [return: bb56, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:757:47: 757:48 (#2718),
                    scope: scope[8],
                },
                kind: drop(_22) -> [return: bb53, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:757:47: 757:48 (#2719),
                    scope: scope[1],
                },
                kind: drop(_20) -> [return: bb54, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:757:48: 757:49 (#0),
                    scope: scope[1],
                },
                kind: drop(_14) -> [return: bb56, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:757:47: 757:48 (#2718),
                    scope: scope[1],
                },
                kind: drop(_15) -> [return: bb56, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:760:5: 760:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb61, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:756:43: 756:44 (#2716),
                    scope: scope[3],
                },
                kind: drop(_11) -> [return: bb58, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:756:43: 756:44 (#2717),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb59, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:756:44: 756:45 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb61, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:756:43: 756:44 (#2716),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb61, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/regex.rs:752:5: 760:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<dfa::regex::Regex<dfa::sparse::DFA<std::vec::Vec<u8, std::alloc::Global>>>, dfa::dense::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:755:10: 755:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} dfa::regex::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:753:9: 753:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/dfa/regex.rs:754:19: 754:23 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/regex.rs:754:9: 754:17 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/regex.rs:754:9: 754:17 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [P/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:754:9: 754:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/regex.rs:756:18: 756:44 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/regex.rs:756:13: 756:15 (#0),
                    },
                ),
            ),
        ),
        ty: dfa::regex::Regex<dfa::dense::DFA<std::vec::Vec<u32, std::alloc::Global>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:756:13: 756:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, dfa::dense::BuildError>, dfa::regex::Regex<dfa::dense::DFA<std::vec::Vec<u32, std::alloc::Global>>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:756:18: 756:44 (#2716),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<dfa::regex::Regex<dfa::dense::DFA<std::vec::Vec<u32, std::alloc::Global>>>, dfa::dense::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:756:18: 756:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::regex::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:756:18: 756:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [P/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:756:34: 756:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:756:43: 756:44 (#2717),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                regex-automata/src/dfa/regex.rs:756:18: 756:44 (#2716),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/regex.rs:756:43: 756:44 (#2717),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, dfa::dense::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:756:43: 756:44 (#2717),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:756:43: 756:44 (#2717),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, dfa::dense::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:756:43: 756:44 (#2717),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                regex-automata/src/dfa/regex.rs:756:18: 756:44 (#2716),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/regex.rs:756:18: 756:44 (#2716),
                    },
                ),
            ),
        ),
        ty: dfa::regex::Regex<dfa::dense::DFA<std::vec::Vec<u32, std::alloc::Global>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:756:18: 756:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/regex.rs:757:23: 757:48 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/regex.rs:757:13: 757:20 (#0),
                    },
                ),
            ),
        ),
        ty: dfa::sparse::DFA<std::vec::Vec<u8, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:757:13: 757:20 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, dfa::dense::BuildError>, dfa::sparse::DFA<std::vec::Vec<u8, std::alloc::Global>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:757:23: 757:48 (#2718),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<dfa::sparse::DFA<std::vec::Vec<u8, std::alloc::Global>>, dfa::dense::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:757:23: 757:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::dense::DFA<std::vec::Vec<u32, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:757:23: 757:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::dense::DFA<std::vec::Vec<u32, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:757:23: 757:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::regex::Regex<dfa::dense::DFA<std::vec::Vec<u32, std::alloc::Global>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:757:23: 757:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:757:47: 757:48 (#2719),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _14,
                                ),
                                regex-automata/src/dfa/regex.rs:757:23: 757:48 (#2718),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/regex.rs:757:47: 757:48 (#2719),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, dfa::dense::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:757:47: 757:48 (#2719),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:757:47: 757:48 (#2719),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, dfa::dense::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:757:47: 757:48 (#2719),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _14,
                                ),
                                regex-automata/src/dfa/regex.rs:757:23: 757:48 (#2718),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/regex.rs:757:23: 757:48 (#2718),
                    },
                ),
            ),
        ),
        ty: dfa::sparse::DFA<std::vec::Vec<u8, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:757:23: 757:48 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/regex.rs:758:23: 758:48 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/regex.rs:758:13: 758:20 (#0),
                    },
                ),
            ),
        ),
        ty: dfa::sparse::DFA<std::vec::Vec<u8, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:758:13: 758:20 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, dfa::dense::BuildError>, dfa::sparse::DFA<std::vec::Vec<u8, std::alloc::Global>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:758:23: 758:48 (#2720),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<dfa::sparse::DFA<std::vec::Vec<u8, std::alloc::Global>>, dfa::dense::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:758:23: 758:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::dense::DFA<std::vec::Vec<u32, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:758:23: 758:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::dense::DFA<std::vec::Vec<u32, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:758:23: 758:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::regex::Regex<dfa::dense::DFA<std::vec::Vec<u32, std::alloc::Global>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:758:23: 758:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:758:47: 758:48 (#2721),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _25,
                                ),
                                regex-automata/src/dfa/regex.rs:758:23: 758:48 (#2720),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/regex.rs:758:47: 758:48 (#2721),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, dfa::dense::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:758:47: 758:48 (#2721),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:758:47: 758:48 (#2721),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, dfa::dense::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:758:47: 758:48 (#2721),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _25,
                                ),
                                regex-automata/src/dfa/regex.rs:758:23: 758:48 (#2720),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/regex.rs:758:23: 758:48 (#2720),
                    },
                ),
            ),
        ),
        ty: dfa::sparse::DFA<std::vec::Vec<u8, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:758:23: 758:48 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: dfa::regex::Regex<dfa::sparse::DFA<std::vec::Vec<u8, std::alloc::Global>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:759:12: 759:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/regex.rs:759:9: 759:51 (#0),
                },
            ),
        ),
        ty: &'{erased} dfa::regex::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:759:12: 759:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/regex.rs:759:9: 759:51 (#0),
                },
            ),
        ),
        ty: dfa::sparse::DFA<std::vec::Vec<u8, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:759:33: 759:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/regex.rs:759:9: 759:51 (#0),
                },
            ),
        ),
        ty: dfa::sparse::DFA<std::vec::Vec<u8, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/regex.rs:759:42: 759:49 (#0),
            scope: scope[0],
        },
    },
]