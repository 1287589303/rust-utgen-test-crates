[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &((*_1).0: std::sync::Arc<meta::regex::RegexI>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:1741:9: 1742:18 (#0),
                    scope: scope[0],
                },
                kind: _6 = <std::sync::Arc<meta::regex::RegexI> as core::ops::Deref>::deref(move _7) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            _5 = &((*_6).1: meta::regex::RegexInfo),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:1741:9: 1743:27 (#0),
                    scope: scope[0],
                },
                kind: _4 = meta::regex::RegexInfo::props_union(move _5) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &(*_4),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:1741:9: 1744:44 (#0),
                    scope: scope[0],
                },
                kind: _2 = regex_syntax::hir::Properties::static_explicit_captures_len(move _3) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageLive(_8),
            _8 = {closure@regex-automata/src/meta/regex.rs:1745:18: 1745:23},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:1741:9: 1745:46 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::option::Option::<usize>::map::<usize, {closure@regex-automata/src/meta/regex.rs:1745:18: 1745:23}>(move _2, move _8) -> [return: bb4, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_2),
            StorageDead(_6),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:1746:6: 1746:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/regex.rs:1740:5: 1746:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:1740:42: 1740:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} meta::regex::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:1740:32: 1740:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/regex.rs:1741:9: 1745:46 (#0),
                },
            ),
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:1741:9: 1744:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/regex.rs:1741:9: 1745:46 (#0),
                },
            ),
        ),
        ty: &'{erased} regex_syntax::hir::Properties,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:1741:9: 1743:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/regex.rs:1741:9: 1745:46 (#0),
                },
            ),
        ),
        ty: &'{erased} regex_syntax::hir::Properties,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:1741:9: 1743:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/regex.rs:1741:9: 1745:46 (#0),
                },
            ),
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:1741:9: 1742:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/regex.rs:1741:9: 1745:46 (#0),
                },
            ),
        ),
        ty: &'{erased} meta::regex::RegexI,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:1741:9: 1742:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/regex.rs:1741:9: 1745:46 (#0),
                },
            ),
        ),
        ty: &'{erased} std::sync::Arc<meta::regex::RegexI, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:1741:9: 1741:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/regex.rs:1741:9: 1745:46 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1823 ~ regex_automata[00dd]::meta::regex::{impl#4}::static_captures_len::{closure#0}),
            [
                i32,
                Binder { value: extern "RustCall" fn((usize,)) -> usize, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/regex.rs:1745:18: 1745:45 (#0),
            scope: scope[0],
        },
    },
]