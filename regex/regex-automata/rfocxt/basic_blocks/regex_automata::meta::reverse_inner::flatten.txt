[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:204:11: 204:21 (#0),
                    scope: scope[0],
                },
                kind: _2 = regex_syntax::hir::Hir::kind(move _3) -> [return: bb1, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            PlaceMention(_2),
            _4 = discriminant((*_2)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:204:5: 204:21 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb10, 7: bb9, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:204:11: 204:21 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:205:9: 205:23 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb11, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:206:9: 206:46 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb12, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:207:9: 207:30 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb15, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:208:9: 208:29 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb18, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:209:9: 209:35 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb21, imaginary: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:212:9: 212:55 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb25, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:213:9: 213:37 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb27, imaginary: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_30),
            _30 = &(((*_2) as Concat).0: std::vec::Vec<regex_syntax::hir::Hir>),
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            _36 = &(*_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:217:25: 217:34 (#0),
                    scope: scope[7],
                },
                kind: _35 = <std::vec::Vec<regex_syntax::hir::Hir> as core::ops::Deref>::deref(move _36) -> [return: bb33, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:205:27: 205:39 (#0),
                    scope: scope[0],
                },
                kind: _0 = regex_syntax::hir::Hir::empty() -> [return: bb38, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_5),
            _5 = &((((*_2) as Literal).0: regex_syntax::hir::Literal).0: std::boxed::Box<[u8]>),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:206:63: 206:72 (#0),
                    scope: scope[1],
                },
                kind: _6 = <std::boxed::Box<[u8]> as core::clone::Clone>::clone(move _7) -> [return: bb13, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:206:50: 206:73 (#0),
                    scope: scope[1],
                },
                kind: _0 = regex_syntax::hir::Hir::literal::<std::boxed::Box<[u8]>>(move _6) -> [return: bb14, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:206:72: 206:73 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb38,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            _8 = &(((*_2) as Class).0: regex_syntax::hir::Class),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &(*_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:207:45: 207:54 (#0),
                    scope: scope[2],
                },
                kind: _9 = <regex_syntax::hir::Class as core::clone::Clone>::clone(move _10) -> [return: bb16, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:207:34: 207:55 (#0),
                    scope: scope[2],
                },
                kind: _0 = regex_syntax::hir::Hir::class(move _9) -> [return: bb17, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:207:54: 207:55 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb38,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            _11 = &(((*_2) as Look).0: regex_syntax::hir::Look),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &(*_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:208:43: 208:52 (#0),
                    scope: scope[3],
                },
                kind: _12 = <regex_syntax::hir::Look as core::clone::Clone>::clone(move _13) -> [return: bb19, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:208:33: 208:53 (#0),
                    scope: scope[3],
                },
                kind: _0 = regex_syntax::hir::Hir::look(move _12) -> [return: bb20, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:208:52: 208:53 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb38,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            _14 = &(((*_2) as Repetition).0: regex_syntax::hir::Repetition),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &(*_14),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &((*_14).3: std::boxed::Box<regex_syntax::hir::Hir>),
            _18 = &(*(*_19)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:209:62: 209:77 (#0),
                    scope: scope[4],
                },
                kind: _17 = meta::reverse_inner::flatten(move _18) -> [return: bb22, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:209:55: 209:78 (#0),
                    scope: scope[4],
                },
                kind: _15 = regex_syntax::hir::Repetition::with(move _16, move _17) -> [return: bb23, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:209:39: 209:79 (#0),
                    scope: scope[4],
                },
                kind: _0 = regex_syntax::hir::Hir::repetition(move _15) -> [return: bb24, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_19),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:209:78: 209:79 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb38,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_20),
            _20 = &((((*_2) as Capture).0: regex_syntax::hir::Capture).2: std::boxed::Box<regex_syntax::hir::Hir>),
            StorageLive(_21),
            _21 = &(*(*_20)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:212:59: 212:71 (#0),
                    scope: scope[5],
                },
                kind: _0 = meta::reverse_inner::flatten(move _21) -> [return: bb26, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:212:70: 212:71 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb38,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            _22 = &(((*_2) as Alternation).0: std::vec::Vec<regex_syntax::hir::Hir>),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            _28 = &(*_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:214:30: 214:39 (#0),
                    scope: scope[6],
                },
                kind: _27 = <std::vec::Vec<regex_syntax::hir::Hir> as core::ops::Deref>::deref(move _28) -> [return: bb28, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _26 = &(*_27),
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:214:30: 214:39 (#0),
                    scope: scope[6],
                },
                kind: _25 = core::slice::<impl [regex_syntax::hir::Hir]>::iter(move _26) -> [return: bb29, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageLive(_29),
            _29 = {closure@regex-automata/src/meta/reverse_inner.rs:214:44: 214:47},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:214:30: 214:59 (#0),
                    scope: scope[6],
                },
                kind: _24 = <core::slice::Iter<'_, regex_syntax::hir::Hir> as core::iter::Iterator>::map::<regex_syntax::hir::Hir, {closure@regex-automata/src/meta/reverse_inner.rs:214:44: 214:47}>(move _25, move _29) -> [return: bb30, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:214:30: 214:69 (#0),
                    scope: scope[6],
                },
                kind: _23 = <core::iter::Map<core::slice::Iter<'_, regex_syntax::hir::Hir>, {closure@regex-automata/src/meta/reverse_inner.rs:214:44: 214:47}> as core::iter::Iterator>::collect::<std::vec::Vec<regex_syntax::hir::Hir>>(move _24) -> [return: bb31, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:214:13: 214:70 (#0),
                    scope: scope[6],
                },
                kind: _0 = regex_syntax::hir::Hir::alternation(move _23) -> [return: bb32, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_27),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:215:9: 215:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb38,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _34 = &(*_35),
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:217:25: 217:34 (#0),
                    scope: scope[7],
                },
                kind: _33 = core::slice::<impl [regex_syntax::hir::Hir]>::iter(move _34) -> [return: bb34, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageLive(_37),
            _37 = {closure@regex-automata/src/meta/reverse_inner.rs:217:39: 217:42},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:217:25: 217:54 (#0),
                    scope: scope[7],
                },
                kind: _32 = <core::slice::Iter<'_, regex_syntax::hir::Hir> as core::iter::Iterator>::map::<regex_syntax::hir::Hir, {closure@regex-automata/src/meta/reverse_inner.rs:217:39: 217:42}>(move _33, move _37) -> [return: bb35, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:217:25: 217:64 (#0),
                    scope: scope[7],
                },
                kind: _31 = <core::iter::Map<core::slice::Iter<'_, regex_syntax::hir::Hir>, {closure@regex-automata/src/meta/reverse_inner.rs:217:39: 217:42}> as core::iter::Iterator>::collect::<std::vec::Vec<regex_syntax::hir::Hir>>(move _32) -> [return: bb36, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:217:13: 217:65 (#0),
                    scope: scope[7],
                },
                kind: _0 = regex_syntax::hir::Hir::concat(move _31) -> [return: bb37, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_35),
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:218:9: 218:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb38,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:220:2: 220:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:217:64: 217:65 (#0),
                    scope: scope[7],
                },
                kind: drop(_31) -> [return: bb45, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:214:69: 214:70 (#0),
                    scope: scope[6],
                },
                kind: drop(_23) -> [return: bb45, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:209:78: 209:79 (#0),
                    scope: scope[4],
                },
                kind: drop(_15) -> [return: bb45, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:209:77: 209:78 (#0),
                    scope: scope[4],
                },
                kind: drop(_17) -> [return: bb45, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:207:54: 207:55 (#0),
                    scope: scope[2],
                },
                kind: drop(_9) -> [return: bb45, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:206:72: 206:73 (#0),
                    scope: scope[1],
                },
                kind: drop(_6) -> [return: bb45, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/reverse_inner.rs:203:1: 220:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regex_syntax::hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:203:26: 203:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/meta/reverse_inner.rs:203:17: 203:21 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/reverse_inner.rs:203:12: 203:15 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/reverse_inner.rs:203:12: 203:15 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} regex_syntax::hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:203:12: 203:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/reverse_inner.rs:204:5: 219:6 (#0),
                },
            ),
        ),
        ty: &'{erased} regex_syntax::hir::HirKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:204:11: 204:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/reverse_inner.rs:204:5: 219:6 (#0),
                },
            ),
        ),
        ty: &'{erased} regex_syntax::hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:204:11: 204:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:205:9: 205:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                regex-automata/src/meta/reverse_inner.rs:204:11: 204:21 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/reverse_inner.rs:206:9: 206:46 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::boxed::Box<[u8], std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:206:39: 206:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/reverse_inner.rs:204:5: 219:6 (#0),
                },
            ),
        ),
        ty: std::boxed::Box<[u8], std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:206:63: 206:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/reverse_inner.rs:204:5: 219:6 (#0),
                },
            ),
        ),
        ty: &'{erased} std::boxed::Box<[u8], std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:206:63: 206:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                regex-automata/src/meta/reverse_inner.rs:204:11: 204:21 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/reverse_inner.rs:207:9: 207:30 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} regex_syntax::hir::Class,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:207:24: 207:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/reverse_inner.rs:204:5: 219:6 (#0),
                },
            ),
        ),
        ty: regex_syntax::hir::Class,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:207:45: 207:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/reverse_inner.rs:204:5: 219:6 (#0),
                },
            ),
        ),
        ty: &'{erased} regex_syntax::hir::Class,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:207:45: 207:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                regex-automata/src/meta/reverse_inner.rs:204:11: 204:21 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/reverse_inner.rs:208:9: 208:29 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} regex_syntax::hir::Look,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:208:23: 208:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/reverse_inner.rs:204:5: 219:6 (#0),
                },
            ),
        ),
        ty: regex_syntax::hir::Look,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:208:43: 208:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/reverse_inner.rs:204:5: 219:6 (#0),
                },
            ),
        ),
        ty: &'{erased} regex_syntax::hir::Look,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:208:43: 208:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                regex-automata/src/meta/reverse_inner.rs:204:11: 204:21 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/reverse_inner.rs:209:9: 209:35 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} regex_syntax::hir::Repetition,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:209:29: 209:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/reverse_inner.rs:204:5: 219:6 (#0),
                },
            ),
        ),
        ty: regex_syntax::hir::Repetition,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:209:55: 209:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/reverse_inner.rs:204:5: 219:6 (#0),
                },
            ),
        ),
        ty: &'{erased} regex_syntax::hir::Repetition,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:209:55: 209:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/reverse_inner.rs:204:5: 219:6 (#0),
                },
            ),
        ),
        ty: regex_syntax::hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:209:62: 209:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/reverse_inner.rs:204:5: 219:6 (#0),
                },
            ),
        ),
        ty: &'{erased} regex_syntax::hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:209:70: 209:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/reverse_inner.rs:204:5: 219:6 (#0),
                },
            ),
        ),
        ty: &'{erased} std::boxed::Box<regex_syntax::hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:209:70: 209:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                regex-automata/src/meta/reverse_inner.rs:204:11: 204:21 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/reverse_inner.rs:212:9: 212:55 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::boxed::Box<regex_syntax::hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:212:41: 212:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/reverse_inner.rs:204:5: 219:6 (#0),
                },
            ),
        ),
        ty: &'{erased} regex_syntax::hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:212:67: 212:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                regex-automata/src/meta/reverse_inner.rs:204:11: 204:21 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/reverse_inner.rs:213:9: 213:37 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::vec::Vec<regex_syntax::hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:213:30: 213:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/reverse_inner.rs:214:13: 214:70 (#0),
                },
            ),
        ),
        ty: std::vec::Vec<regex_syntax::hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:214:30: 214:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/reverse_inner.rs:214:13: 214:70 (#0),
                },
            ),
        ),
        ty: core::iter::Map<core::slice::Iter<'{erased}, regex_syntax::hir::Hir>, Closure(DefId(0:1977 ~ regex_automata[00dd]::meta::reverse_inner::flatten::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'{erased} regex_syntax::hir::Hir,)) -> regex_syntax::hir::Hir, bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:214:30: 214:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/reverse_inner.rs:214:13: 214:70 (#0),
                },
            ),
        ),
        ty: core::slice::Iter<'{erased}, regex_syntax::hir::Hir>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:214:30: 214:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/reverse_inner.rs:214:13: 214:70 (#0),
                },
            ),
        ),
        ty: &'{erased} [regex_syntax::hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:214:30: 214:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/reverse_inner.rs:214:13: 214:70 (#0),
                },
            ),
        ),
        ty: &'{erased} [regex_syntax::hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:214:30: 214:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/reverse_inner.rs:214:13: 214:70 (#0),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<regex_syntax::hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:214:30: 214:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/reverse_inner.rs:214:13: 214:70 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1977 ~ regex_automata[00dd]::meta::reverse_inner::flatten::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'{erased} regex_syntax::hir::Hir,)) -> regex_syntax::hir::Hir, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:214:44: 214:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                regex-automata/src/meta/reverse_inner.rs:204:11: 204:21 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/reverse_inner.rs:216:9: 216:32 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::vec::Vec<regex_syntax::hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:216:25: 216:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/reverse_inner.rs:217:13: 217:65 (#0),
                },
            ),
        ),
        ty: std::vec::Vec<regex_syntax::hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:217:25: 217:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/reverse_inner.rs:217:13: 217:65 (#0),
                },
            ),
        ),
        ty: core::iter::Map<core::slice::Iter<'{erased}, regex_syntax::hir::Hir>, Closure(DefId(0:1978 ~ regex_automata[00dd]::meta::reverse_inner::flatten::{closure#1}), [i16, Binder { value: extern "RustCall" fn((&'{erased} regex_syntax::hir::Hir,)) -> regex_syntax::hir::Hir, bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:217:25: 217:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/reverse_inner.rs:217:13: 217:65 (#0),
                },
            ),
        ),
        ty: core::slice::Iter<'{erased}, regex_syntax::hir::Hir>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:217:25: 217:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/reverse_inner.rs:217:13: 217:65 (#0),
                },
            ),
        ),
        ty: &'{erased} [regex_syntax::hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:217:25: 217:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/reverse_inner.rs:217:13: 217:65 (#0),
                },
            ),
        ),
        ty: &'{erased} [regex_syntax::hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:217:25: 217:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/reverse_inner.rs:217:13: 217:65 (#0),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<regex_syntax::hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:217:25: 217:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/reverse_inner.rs:217:13: 217:65 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1978 ~ regex_automata[00dd]::meta::reverse_inner::flatten::{closure#1}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'{erased} regex_syntax::hir::Hir,)) -> regex_syntax::hir::Hir, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/reverse_inner.rs:217:39: 217:53 (#0),
            scope: scope[0],
        },
    },
]