[
    BasicBlockData {
        statements: [
            StorageLive(_8),
            StorageLive(_9),
            _9 = &mut (*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:101:5: 101:20 (#0),
                    scope: scope[0],
                },
                kind: _8 = util::sparse_set::SparseSets::clear(move _9) -> [return: bb1, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:106:15: 106:31 (#0),
                    scope: scope[0],
                },
                kind: _10 = nfa::thompson::nfa::NFA::is_reverse(move _11) -> [return: bb2, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            FakeRead(ForLet(None), _10),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:110:17: 110:35 (#0),
                    scope: scope[1],
                },
                kind: _12 = nfa::thompson::nfa::NFA::look_matcher(move _13) -> [return: bb3, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            FakeRead(ForLet(None), _12),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &(*_5),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &mut ((*_3).0: util::sparse_set::SparseSet),
            _16 = {closure@regex-automata/src/util/determinize/mod.rs:121:30: 121:38} { sparses: move _17 },
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:121:5: 123:7 (#0),
                    scope: scope[2],
                },
                kind: _14 = util::determinize::state::State::iter_nfa_state_ids::<{closure@regex-automata/src/util/determinize/mod.rs:121:30: 121:38}>(move _15, move _16) -> [return: bb4, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_15),
            StorageDead(_14),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &(*_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:131:9: 131:26 (#0),
                    scope: scope[2],
                },
                kind: _20 = util::determinize::state::State::look_need(move _21) -> [return: bb5, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:131:9: 131:37 (#0),
                    scope: scope[2],
                },
                kind: _19 = util::look::LookSet::is_empty(move _20) -> [return: bb6, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:131:9: 131:37 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _19) -> [0: bb8, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            _18 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:131:5: 212:6 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb116,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            _25 = &(*_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:134:29: 134:46 (#0),
                    scope: scope[2],
                },
                kind: _24 = util::determinize::state::State::look_have(move _25) -> [return: bb9, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _23 = &_24,
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:134:29: 134:54 (#0),
                    scope: scope[2],
                },
                kind: _22 = <util::look::LookSet as core::clone::Clone>::clone(move _23) -> [return: bb10, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            FakeRead(ForLet(None), _22),
            StorageDead(_24),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            _28 = _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:135:15: 135:27 (#0),
                    scope: scope[3],
                },
                kind: _27 = util::alphabet::Unit::as_u8(move _28) -> [return: bb11, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            PlaceMention(_27),
            _29 = discriminant(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:135:9: 135:27 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _29) -> [0: bb17, 1: bb13, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:135:15: 135:27 (#0),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:135:9: 135:27 (#0),
                    scope: scope[3],
                },
                kind: switchInt(((_27 as Some).0: u8)) -> [13: bb15, 10: bb16, otherwise: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:146:13: 146:20 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb34, imaginary: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:136:13: 136:24 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb18, imaginary: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:141:13: 141:24 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb26, imaginary: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_42),
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            _45 = _22,
            StorageLive(_46),
            _46 = util::look::Look::End,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:148:29: 149:39 (#0),
                    scope: scope[3],
                },
                kind: _44 = util::look::LookSet::insert(move _45, move _46) -> [return: bb35, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_30),
            _30 = _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:137:21: 137:24 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _30) -> [0: bb23, otherwise: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_31),
            StorageLive(_32),
            _32 = &(*_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:137:29: 137:49 (#0),
                    scope: scope[3],
                },
                kind: _31 = util::determinize::state::State::is_half_crlf(move _32) -> [return: bb20, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:137:29: 137:49 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _31) -> [0: bb22, otherwise: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            _26 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:137:17: 139:18 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:137:50: 139:18 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_33),
            StorageLive(_34),
            _34 = _22,
            StorageLive(_35),
            _35 = util::look::Look::EndCRLF,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:138:33: 138:64 (#0),
                    scope: scope[3],
                },
                kind: _33 = util::look::LookSet::insert(move _34, move _35) -> [return: bb24, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            StorageDead(_34),
            _22 = move _33,
            StorageDead(_33),
            _26 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:137:17: 139:18 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:139:17: 139:18 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb38,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_36),
            _36 = _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:142:20: 142:23 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _36) -> [0: bb27, otherwise: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_37),
            StorageLive(_38),
            _38 = &(*_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:142:28: 142:48 (#0),
                    scope: scope[3],
                },
                kind: _37 = util::determinize::state::State::is_half_crlf(move _38) -> [return: bb28, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:142:28: 142:48 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _37) -> [0: bb30, otherwise: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            _26 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:142:17: 144:18 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb33,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:142:49: 144:18 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_39),
            StorageLive(_40),
            _40 = _22,
            StorageLive(_41),
            _41 = util::look::Look::EndCRLF,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:143:33: 143:64 (#0),
                    scope: scope[3],
                },
                kind: _39 = util::look::LookSet::insert(move _40, move _41) -> [return: bb32, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            StorageDead(_40),
            _22 = move _39,
            StorageDead(_39),
            _26 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:142:17: 144:18 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb33,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:144:17: 144:18 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb38,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _26 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:146:24: 146:26 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb38,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
            StorageDead(_45),
            StorageLive(_47),
            _47 = util::look::Look::EndLF,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:148:29: 150:41 (#0),
                    scope: scope[3],
                },
                kind: _43 = util::look::LookSet::insert(move _44, move _47) -> [return: bb36, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            StorageDead(_44),
            StorageLive(_48),
            _48 = util::look::Look::EndCRLF,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:148:29: 151:43 (#0),
                    scope: scope[3],
                },
                kind: _42 = util::look::LookSet::insert(move _43, move _48) -> [return: bb37, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
            StorageDead(_43),
            _22 = move _42,
            StorageDead(_42),
            _26 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:147:21: 152:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb38,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_26),
            StorageLive(_49),
            StorageLive(_50),
            StorageLive(_51),
            _51 = _6,
            StorageLive(_52),
            StorageLive(_53),
            _53 = &(*_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:154:25: 154:52 (#0),
                    scope: scope[3],
                },
                kind: _52 = util::look::LookMatcher::get_line_terminator(move _53) -> [return: bb39, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_53),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:154:12: 154:53 (#0),
                    scope: scope[3],
                },
                kind: _50 = util::alphabet::Unit::is_byte(move _51, move _52) -> [return: bb40, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:154:12: 154:53 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _50) -> [0: bb43, otherwise: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            StorageDead(_51),
            StorageLive(_54),
            StorageLive(_55),
            _55 = _22,
            StorageLive(_56),
            _56 = util::look::Look::EndLF,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:155:25: 155:54 (#0),
                    scope: scope[3],
                },
                kind: _54 = util::look::LookSet::insert(move _55, move _56) -> [return: bb42, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
            StorageDead(_55),
            _22 = move _54,
            StorageDead(_54),
            _49 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:154:9: 156:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb44,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            StorageDead(_51),
            _49 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:154:9: 156:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb44,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            StorageDead(_49),
            StorageLive(_57),
            StorageLive(_58),
            StorageLive(_59),
            _59 = &(*_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:157:12: 157:32 (#0),
                    scope: scope[3],
                },
                kind: _58 = util::determinize::state::State::is_half_crlf(move _59) -> [return: bb45, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:157:12: 157:32 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _58) -> [0: bb58, otherwise: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
            StorageLive(_60),
            _60 = _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:158:18: 158:21 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _60) -> [0: bb51, otherwise: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_61),
            StorageLive(_62),
            _62 = _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:158:26: 158:45 (#0),
                    scope: scope[3],
                },
                kind: _61 = util::alphabet::Unit::is_byte(move _62, const 13_u8) -> [return: bb48, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:158:26: 158:45 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _61) -> [0: bb50, otherwise: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:160:9: 162:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb51,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:160:9: 162:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb56,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_63),
            _63 = _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:159:22: 159:25 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _63) -> [0: bb52, otherwise: bb59],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_64),
            StorageLive(_65),
            _65 = _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:159:30: 159:49 (#0),
                    scope: scope[3],
                },
                kind: _64 = util::alphabet::Unit::is_byte(move _65, const 10_u8) -> [return: bb53, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:159:30: 159:49 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _64) -> [0: bb55, otherwise: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_65),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:160:9: 162:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb59,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_65),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:160:9: 162:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb56,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_66),
            StorageLive(_67),
            _67 = _22,
            StorageLive(_68),
            _68 = util::look::Look::StartCRLF,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:161:25: 161:58 (#0),
                    scope: scope[3],
                },
                kind: _66 = util::look::LookSet::insert(move _67, move _68) -> [return: bb57, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_68),
            StorageDead(_67),
            _22 = move _66,
            StorageDead(_66),
            _57 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:157:9: 162:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb60,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb59,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _57 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:157:9: 162:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb60,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
            StorageDead(_63),
            StorageDead(_61),
            StorageDead(_60),
            StorageDead(_58),
            StorageDead(_57),
            StorageLive(_69),
            StorageLive(_70),
            StorageLive(_71),
            StorageLive(_72),
            _72 = &(*_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:163:12: 163:32 (#0),
                    scope: scope[3],
                },
                kind: _71 = util::determinize::state::State::is_from_word(move _72) -> [return: bb61, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_72),
            StorageLive(_73),
            StorageLive(_74),
            _74 = _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:163:36: 163:55 (#0),
                    scope: scope[3],
                },
                kind: _73 = util::alphabet::Unit::is_word_byte(move _74) -> [return: bb62, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_74),
            _70 = Eq(move _71, move _73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:163:12: 163:55 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _70) -> [0: bb66, otherwise: bb63],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_73),
            StorageDead(_71),
            StorageLive(_75),
            StorageLive(_76),
            StorageLive(_77),
            _77 = _22,
            StorageLive(_78),
            _78 = util::look::Look::WordAsciiNegate,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:164:25: 165:47 (#0),
                    scope: scope[3],
                },
                kind: _76 = util::look::LookSet::insert(move _77, move _78) -> [return: bb64, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_78),
            StorageDead(_77),
            StorageLive(_79),
            _79 = util::look::Look::WordUnicodeNegate,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:164:25: 166:49 (#0),
                    scope: scope[3],
                },
                kind: _75 = util::look::LookSet::insert(move _76, move _79) -> [return: bb65, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_79),
            StorageDead(_76),
            _22 = move _75,
            StorageDead(_75),
            _69 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:163:9: 170:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb69,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_73),
            StorageDead(_71),
            StorageLive(_80),
            StorageLive(_81),
            StorageLive(_82),
            _82 = _22,
            StorageLive(_83),
            _83 = util::look::Look::WordAscii,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:169:17: 169:50 (#0),
                    scope: scope[3],
                },
                kind: _81 = util::look::LookSet::insert(move _82, move _83) -> [return: bb67, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_83),
            StorageDead(_82),
            StorageLive(_84),
            _84 = util::look::Look::WordUnicode,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:169:17: 169:76 (#0),
                    scope: scope[3],
                },
                kind: _80 = util::look::LookSet::insert(move _81, move _84) -> [return: bb68, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_84),
            StorageDead(_81),
            _22 = move _80,
            StorageDead(_80),
            _69 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:163:9: 170:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb69,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_70),
            StorageDead(_69),
            StorageLive(_85),
            StorageLive(_86),
            StorageLive(_87),
            _87 = _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:171:13: 171:32 (#0),
                    scope: scope[3],
                },
                kind: _86 = util::alphabet::Unit::is_word_byte(move _87) -> [return: bb70, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:171:13: 171:32 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _86) -> [0: bb72, otherwise: bb71],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_87),
            _85 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:171:9: 175:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb75,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_87),
            StorageLive(_88),
            StorageLive(_89),
            StorageLive(_90),
            _90 = _22,
            StorageLive(_91),
            _91 = util::look::Look::WordEndHalfAscii,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:172:25: 173:48 (#0),
                    scope: scope[3],
                },
                kind: _89 = util::look::LookSet::insert(move _90, move _91) -> [return: bb73, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_91),
            StorageDead(_90),
            StorageLive(_92),
            _92 = util::look::Look::WordEndHalfUnicode,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:172:25: 174:50 (#0),
                    scope: scope[3],
                },
                kind: _88 = util::look::LookSet::insert(move _89, move _92) -> [return: bb74, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_92),
            StorageDead(_89),
            _22 = move _88,
            StorageDead(_88),
            _85 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:171:9: 175:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb75,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_86),
            StorageDead(_85),
            StorageLive(_93),
            StorageLive(_94),
            StorageLive(_95),
            _95 = &(*_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:176:12: 176:32 (#0),
                    scope: scope[3],
                },
                kind: _94 = util::determinize::state::State::is_from_word(move _95) -> [return: bb76, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:176:12: 176:32 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _94) -> [0: bb83, otherwise: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_95),
            StorageLive(_96),
            StorageLive(_97),
            _97 = _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:176:37: 176:56 (#0),
                    scope: scope[3],
                },
                kind: _96 = util::alphabet::Unit::is_word_byte(move _97) -> [return: bb78, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:176:37: 176:56 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _96) -> [0: bb80, otherwise: bb79],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_97),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:176:57: 180:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb84,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_97),
            StorageLive(_98),
            StorageLive(_99),
            StorageLive(_100),
            _100 = _22,
            StorageLive(_101),
            _101 = util::look::Look::WordEndAscii,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:177:25: 178:44 (#0),
                    scope: scope[3],
                },
                kind: _99 = util::look::LookSet::insert(move _100, move _101) -> [return: bb81, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_101),
            StorageDead(_100),
            StorageLive(_102),
            _102 = util::look::Look::WordEndUnicode,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:177:25: 179:46 (#0),
                    scope: scope[3],
                },
                kind: _98 = util::look::LookSet::insert(move _99, move _102) -> [return: bb82, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_102),
            StorageDead(_99),
            _22 = move _98,
            StorageDead(_98),
            _93 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:176:9: 184:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb95,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_95),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb84,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_103),
            StorageLive(_104),
            _104 = &(*_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:180:20: 180:40 (#0),
                    scope: scope[3],
                },
                kind: _103 = util::determinize::state::State::is_from_word(move _104) -> [return: bb85, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:180:20: 180:40 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _103) -> [0: bb87, otherwise: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_104),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:180:64: 184:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb93,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_104),
            StorageLive(_105),
            StorageLive(_106),
            _106 = _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:180:44: 180:63 (#0),
                    scope: scope[3],
                },
                kind: _105 = util::alphabet::Unit::is_word_byte(move _106) -> [return: bb88, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:180:44: 180:63 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _105) -> [0: bb92, otherwise: bb89],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_106),
            StorageLive(_107),
            StorageLive(_108),
            StorageLive(_109),
            _109 = _22,
            StorageLive(_110),
            _110 = util::look::Look::WordStartAscii,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:181:25: 182:46 (#0),
                    scope: scope[3],
                },
                kind: _108 = util::look::LookSet::insert(move _109, move _110) -> [return: bb90, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_110),
            StorageDead(_109),
            StorageLive(_111),
            _111 = util::look::Look::WordStartUnicode,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:181:25: 183:48 (#0),
                    scope: scope[3],
                },
                kind: _107 = util::look::LookSet::insert(move _108, move _111) -> [return: bb91, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_111),
            StorageDead(_108),
            _22 = move _107,
            StorageDead(_107),
            _93 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:180:16: 184:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb94,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_106),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb93,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _93 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:180:16: 184:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb94,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_105),
            StorageDead(_103),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:176:9: 184:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb95,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_96),
            StorageDead(_94),
            StorageDead(_93),
            StorageLive(_112),
            StorageLive(_113),
            StorageLive(_114),
            StorageLive(_115),
            _115 = _22,
            StorageLive(_116),
            StorageLive(_117),
            _117 = &(*_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:196:23: 196:40 (#0),
                    scope: scope[3],
                },
                kind: _116 = util::determinize::state::State::look_have(move _117) -> [return: bb96, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_117),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:195:13: 196:41 (#0),
                    scope: scope[3],
                },
                kind: _114 = util::look::LookSet::subtract(move _115, move _116) -> [return: bb97, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_116),
            StorageDead(_115),
            StorageLive(_118),
            StorageLive(_119),
            _119 = &(*_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:197:24: 197:41 (#0),
                    scope: scope[3],
                },
                kind: _118 = util::determinize::state::State::look_need(move _119) -> [return: bb98, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_119),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:195:13: 197:42 (#0),
                    scope: scope[3],
                },
                kind: _113 = util::look::LookSet::intersect(move _114, move _118) -> [return: bb99, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_118),
            StorageDead(_114),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:195:13: 198:24 (#0),
                    scope: scope[3],
                },
                kind: _112 = util::look::LookSet::is_empty(move _113) -> [return: bb100, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:195:13: 198:24 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _112) -> [0: bb102, otherwise: bb101],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_113),
            _18 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:195:9: 211:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb115,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_113),
            StorageLive(_120),
            StorageLive(_121),
            StorageLive(_122),
            StorageLive(_123),
            _123 = &((*_3).0: util::sparse_set::SparseSet),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:200:27: 200:46 (#0),
                    scope: scope[3],
                },
                kind: _122 = util::sparse_set::SparseSet::iter(move _123) -> [return: bb103, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_123),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:200:27: 200:46 (#5061),
                    scope: scope[3],
                },
                kind: _121 = <util::sparse_set::SparseSetIter<'_> as core::iter::IntoIterator>::into_iter(move _122) -> [return: bb104, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_122),
            PlaceMention(_121),
            StorageLive(_124),
            _124 = move _121,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:200:13: 208:14 (#5060),
                    scope: scope[4],
                },
                kind: goto -> bb105,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:200:13: 208:14 (#5060),
                    scope: scope[4],
                },
                kind: falseUnwind -> [real: bb106, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_126),
            StorageLive(_127),
            StorageLive(_128),
            StorageLive(_129),
            _129 = &mut _124,
            _128 = &mut (*_129),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:200:27: 200:46 (#5061),
                    scope: scope[4],
                },
                kind: _127 = <util::sparse_set::SparseSetIter<'_> as core::iter::Iterator>::next(move _128) -> [return: bb107, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_128),
            PlaceMention(_127),
            _130 = discriminant(_127),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:200:27: 200:46 (#5061),
                    scope: scope[4],
                },
                kind: switchInt(move _130) -> [0: bb109, 1: bb110, otherwise: bb108],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _127),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:200:27: 200:46 (#5061),
                    scope: scope[4],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:200:13: 208:14 (#5060),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb111, imaginary: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_132),
            _132 = ((_127 as Some).0: util::primitives::StateID),
            StorageLive(_133),
            StorageLive(_134),
            _134 = &(*_1),
            StorageLive(_135),
            _135 = _132,
            StorageLive(_136),
            _136 = _22,
            StorageLive(_137),
            _137 = &mut (*_4),
            StorageLive(_138),
            StorageLive(_139),
            _139 = &mut ((*_3).1: util::sparse_set::SparseSet),
            _138 = &mut (*_139),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:201:17: 207:18 (#0),
                    scope: scope[5],
                },
                kind: _133 = util::determinize::epsilon_closure(move _134, move _135, move _136, move _137, move _138) -> [return: bb112, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _120 = const (),
            StorageDead(_129),
            StorageDead(_127),
            StorageDead(_126),
            StorageDead(_124),
            StorageDead(_121),
            StorageDead(_120),
            StorageLive(_140),
            StorageLive(_141),
            _141 = &mut (*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:209:13: 209:27 (#0),
                    scope: scope[3],
                },
                kind: _140 = util::sparse_set::SparseSets::swap(move _141) -> [return: bb113, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_138),
            StorageDead(_137),
            StorageDead(_136),
            StorageDead(_135),
            StorageDead(_134),
            StorageDead(_139),
            StorageDead(_133),
            _126 = const (),
            StorageDead(_132),
            StorageDead(_129),
            StorageDead(_127),
            StorageDead(_126),
            _125 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:200:13: 208:14 (#5060),
                    scope: scope[4],
                },
                kind: goto -> bb105,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_141),
            StorageDead(_140),
            StorageLive(_142),
            StorageLive(_143),
            _143 = &mut ((*_3).1: util::sparse_set::SparseSet),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:210:13: 210:33 (#0),
                    scope: scope[3],
                },
                kind: _142 = util::sparse_set::SparseSet::clear(move _143) -> [return: bb114, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_143),
            StorageDead(_142),
            _18 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:195:9: 211:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb115,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_112),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:131:5: 212:6 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb116,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            StorageLive(_144),
            StorageLive(_145),
            _145 = move _7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:216:23: 216:51 (#0),
                    scope: scope[2],
                },
                kind: _144 = util::determinize::state::StateBuilderEmpty::into_matches(move _145) -> [return: bb117, unwind: bb241],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_145),
            FakeRead(ForLet(None), _144),
            StorageLive(_146),
            StorageLive(_147),
            StorageLive(_148),
            StorageLive(_149),
            StorageLive(_150),
            _150 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:220:8: 220:26 (#0),
                    scope: scope[6],
                },
                kind: _149 = nfa::thompson::nfa::NFA::look_set_any(move _150) -> [return: bb118, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _148 = &_149,
            StorageDead(_150),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:220:8: 220:49 (#0),
                    scope: scope[6],
                },
                kind: _147 = util::look::LookSet::contains_anchor_line(move _148) -> [return: bb119, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:220:8: 220:49 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _147) -> [0: bb126, otherwise: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_149),
            StorageDead(_148),
            StorageLive(_151),
            StorageLive(_152),
            _152 = _6,
            StorageLive(_153),
            StorageLive(_154),
            _154 = &(*_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:221:25: 221:52 (#0),
                    scope: scope[6],
                },
                kind: _153 = util::look::LookMatcher::get_line_terminator(move _154) -> [return: bb121, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_154),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:221:12: 221:53 (#0),
                    scope: scope[6],
                },
                kind: _151 = util::alphabet::Unit::is_byte(move _152, move _153) -> [return: bb122, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:221:12: 221:53 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _151) -> [0: bb125, otherwise: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_153),
            StorageDead(_152),
            StorageLive(_155),
            StorageLive(_156),
            _156 = &mut _144,
            StorageLive(_157),
            _157 = {closure@regex-automata/src/util/determinize/mod.rs:226:31: 226:37},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:226:9: 226:65 (#0),
                    scope: scope[6],
                },
                kind: _155 = util::determinize::state::StateBuilderMatches::set_look_have::<{closure@regex-automata/src/util/determinize/mod.rs:226:31: 226:37}>(move _156, move _157) -> [return: bb124, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_157),
            StorageDead(_156),
            StorageDead(_155),
            _146 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:220:5: 227:6 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb128,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_153),
            StorageDead(_152),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb127,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_149),
            StorageDead(_148),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb127,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _146 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:220:5: 227:6 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb128,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_151),
            StorageDead(_147),
            StorageDead(_146),
            StorageLive(_158),
            StorageLive(_159),
            StorageLive(_160),
            StorageLive(_161),
            StorageLive(_162),
            _162 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:234:8: 234:26 (#0),
                    scope: scope[6],
                },
                kind: _161 = nfa::thompson::nfa::NFA::look_set_any(move _162) -> [return: bb129, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _160 = &_161,
            StorageDead(_162),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:234:8: 234:49 (#0),
                    scope: scope[6],
                },
                kind: _159 = util::look::LookSet::contains_anchor_crlf(move _160) -> [return: bb130, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:234:8: 234:49 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _159) -> [0: bb143, otherwise: bb131],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_161),
            StorageDead(_160),
            StorageLive(_163),
            _163 = _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:235:14: 235:17 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _163) -> [0: bb136, otherwise: bb132],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_164),
            StorageLive(_165),
            _165 = _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:235:21: 235:40 (#0),
                    scope: scope[6],
                },
                kind: _164 = util::alphabet::Unit::is_byte(move _165, const 13_u8) -> [return: bb133, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:235:21: 235:40 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _164) -> [0: bb135, otherwise: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_165),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:236:5: 238:6 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb140,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_165),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb136,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_166),
            _166 = _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:235:47: 235:50 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _166) -> [0: bb137, otherwise: bb144],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_167),
            StorageLive(_168),
            _168 = _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:235:54: 235:73 (#0),
                    scope: scope[6],
                },
                kind: _167 = util::alphabet::Unit::is_byte(move _168, const 10_u8) -> [return: bb138, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:235:54: 235:73 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _167) -> [0: bb142, otherwise: bb139],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_168),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:236:5: 238:6 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb140,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_169),
            StorageLive(_170),
            _170 = &mut _144,
            StorageLive(_171),
            _171 = {closure@regex-automata/src/util/determinize/mod.rs:237:31: 237:37},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:237:9: 237:67 (#0),
                    scope: scope[6],
                },
                kind: _169 = util::determinize::state::StateBuilderMatches::set_look_have::<{closure@regex-automata/src/util/determinize/mod.rs:237:31: 237:37}>(move _170, move _171) -> [return: bb141, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_171),
            StorageDead(_170),
            StorageDead(_169),
            _158 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:234:5: 238:6 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb145,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_168),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb144,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_161),
            StorageDead(_160),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb144,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _158 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:234:5: 238:6 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb145,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_167),
            StorageDead(_166),
            StorageDead(_164),
            StorageDead(_163),
            StorageDead(_159),
            StorageDead(_158),
            StorageLive(_172),
            StorageLive(_173),
            StorageLive(_174),
            StorageLive(_175),
            _175 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:241:8: 241:26 (#0),
                    scope: scope[6],
                },
                kind: _174 = nfa::thompson::nfa::NFA::look_set_any(move _175) -> [return: bb146, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_175),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:241:8: 241:42 (#0),
                    scope: scope[6],
                },
                kind: _173 = util::look::LookSet::contains_word(move _174) -> [return: bb147, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:241:8: 241:42 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _173) -> [0: bb153, otherwise: bb148],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_174),
            StorageLive(_176),
            StorageLive(_177),
            _177 = _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:241:47: 241:66 (#0),
                    scope: scope[6],
                },
                kind: _176 = util::alphabet::Unit::is_word_byte(move _177) -> [return: bb149, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:241:47: 241:66 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _176) -> [0: bb151, otherwise: bb150],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_177),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:241:67: 246:6 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb154,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_177),
            StorageLive(_178),
            StorageLive(_179),
            _179 = &mut _144,
            StorageLive(_180),
            _180 = {closure@regex-automata/src/util/determinize/mod.rs:242:31: 242:37},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:242:9: 245:11 (#0),
                    scope: scope[6],
                },
                kind: _178 = util::determinize::state::StateBuilderMatches::set_look_have::<{closure@regex-automata/src/util/determinize/mod.rs:242:31: 242:37}>(move _179, move _180) -> [return: bb152, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_180),
            StorageDead(_179),
            StorageDead(_178),
            _172 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:241:5: 246:6 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb155,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_174),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb154,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _172 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:241:5: 246:6 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb155,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_176),
            StorageDead(_173),
            StorageDead(_172),
            StorageLive(_181),
            StorageLive(_182),
            StorageLive(_183),
            StorageLive(_184),
            _184 = &((*_3).0: util::sparse_set::SparseSet),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:247:19: 247:38 (#0),
                    scope: scope[6],
                },
                kind: _183 = util::sparse_set::SparseSet::iter(move _184) -> [return: bb156, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_184),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:247:19: 247:38 (#5067),
                    scope: scope[6],
                },
                kind: _182 = <util::sparse_set::SparseSetIter<'_> as core::iter::IntoIterator>::into_iter(move _183) -> [return: bb157, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_183),
            PlaceMention(_182),
            StorageLive(_185),
            _185 = move _182,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:247:5: 322:6 (#5066),
                    scope: scope[7],
                },
                kind: goto -> bb158,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:247:5: 322:6 (#5066),
                    scope: scope[7],
                },
                kind: falseUnwind -> [real: bb159, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_186),
            StorageLive(_187),
            StorageLive(_188),
            StorageLive(_189),
            _189 = &mut _185,
            _188 = &mut (*_189),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:247:19: 247:38 (#5067),
                    scope: scope[7],
                },
                kind: _187 = <util::sparse_set::SparseSetIter<'_> as core::iter::Iterator>::next(move _188) -> [return: bb160, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_188),
            PlaceMention(_187),
            _190 = discriminant(_187),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:247:19: 247:38 (#5067),
                    scope: scope[7],
                },
                kind: switchInt(move _190) -> [0: bb162, 1: bb163, otherwise: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _187),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:247:19: 247:38 (#5067),
                    scope: scope[7],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:247:5: 322:6 (#5066),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb164, imaginary: bb163],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_192),
            _192 = ((_187 as Some).0: util::primitives::StateID),
            StorageLive(_193),
            StorageLive(_194),
            _194 = &(*_1),
            StorageLive(_195),
            _195 = _192,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:248:16: 248:33 (#0),
                    scope: scope[8],
                },
                kind: _193 = nfa::thompson::nfa::NFA::state(move _194, move _195) -> [return: bb165, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _181 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:247:5: 322:6 (#5066),
                    scope: scope[7],
                },
                kind: goto -> bb201,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_195),
            StorageDead(_194),
            PlaceMention((*_193)),
            _196 = discriminant((*_193)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:248:9: 248:33 (#0),
                    scope: scope[8],
                },
                kind: switchInt(move _196) -> [0: bb168, 1: bb169, 2: bb170, 3: bb171, 4: bb171, 5: bb171, 6: bb171, 7: bb171, 8: bb167, otherwise: bb166],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), (*_193)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:248:15: 248:33 (#0),
                    scope: scope[8],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:254:13: 254:50 (#0),
                    scope: scope[8],
                },
                kind: falseEdge -> [real: bb173, imaginary: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:288:13: 288:53 (#0),
                    scope: scope[8],
                },
                kind: falseEdge -> [real: bb178, imaginary: bb169],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:299:13: 299:48 (#0),
                    scope: scope[8],
                },
                kind: falseEdge -> [real: bb185, imaginary: bb170],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_230),
            _230 = &(((*_193) as Dense).0: nfa::thompson::nfa::DenseTransitions),
            StorageLive(_231),
            StorageLive(_232),
            _232 = &(*_230),
            StorageLive(_233),
            _233 = _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:311:37: 311:61 (#0),
                    scope: scope[14],
                },
                kind: _231 = nfa::thompson::nfa::DenseTransitions::matches_unit(move _232, move _233) -> [return: bb193, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:249:13: 253:46 (#0),
                    scope: scope[8],
                },
                kind: falseEdge -> [real: bb172, imaginary: bb167],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _186 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:253:50: 253:52 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb200,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_197),
            _197 = (((*_193) as Match).0: util::primitives::PatternID),
            StorageLive(_198),
            StorageLive(_199),
            _199 = &mut _144,
            StorageLive(_200),
            _200 = _197,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:283:17: 283:57 (#0),
                    scope: scope[9],
                },
                kind: _198 = util::determinize::state::StateBuilderMatches::add_match_pattern_id(move _199, move _200) -> [return: bb174, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_200),
            StorageDead(_199),
            StorageDead(_198),
            StorageLive(_201),
            StorageLive(_202),
            _202 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:284:21: 284:59 (#0),
                    scope: scope[9],
                },
                kind: _201 = util::search::MatchKind::continue_past_first_match(move _202) -> [return: bb175, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:284:21: 284:59 (#0),
                    scope: scope[9],
                },
                kind: switchInt(move _201) -> [0: bb177, otherwise: bb176],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_202),
            _186 = const (),
            StorageDead(_201),
            StorageDead(_197),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:287:13: 287:14 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb200,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_202),
            _181 = const (),
            StorageDead(_201),
            StorageDead(_197),
            StorageDead(_193),
            StorageDead(_192),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb201,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_204),
            _204 = &(((*_193) as ByteRange).0: nfa::thompson::nfa::Transition),
            StorageLive(_205),
            StorageLive(_206),
            _206 = &(*_204),
            StorageLive(_207),
            _207 = _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:289:20: 289:44 (#0),
                    scope: scope[10],
                },
                kind: _205 = nfa::thompson::nfa::Transition::matches_unit(move _206, move _207) -> [return: bb179, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:289:20: 289:44 (#0),
                    scope: scope[10],
                },
                kind: switchInt(move _205) -> [0: bb183, otherwise: bb180],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_207),
            StorageDead(_206),
            StorageLive(_208),
            StorageLive(_209),
            _209 = &(*_1),
            StorageLive(_210),
            _210 = ((*_204).2: util::primitives::StateID),
            StorageLive(_211),
            StorageLive(_212),
            _212 = &_144,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:293:25: 293:44 (#0),
                    scope: scope[10],
                },
                kind: _211 = util::determinize::state::StateBuilderMatches::look_have(move _212) -> [return: bb181, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_212),
            StorageLive(_213),
            _213 = &mut (*_4),
            StorageLive(_214),
            StorageLive(_215),
            _215 = &mut ((*_3).1: util::sparse_set::SparseSet),
            _214 = &mut (*_215),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:290:21: 296:22 (#0),
                    scope: scope[10],
                },
                kind: _208 = util::determinize::epsilon_closure(move _209, move _210, move _211, move _213, move _214) -> [return: bb182, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_214),
            StorageDead(_213),
            StorageDead(_211),
            StorageDead(_210),
            StorageDead(_209),
            StorageDead(_215),
            StorageDead(_208),
            _186 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:289:17: 297:18 (#0),
                    scope: scope[10],
                },
                kind: goto -> bb184,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_207),
            StorageDead(_206),
            _186 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:289:17: 297:18 (#0),
                    scope: scope[10],
                },
                kind: goto -> bb184,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_205),
            StorageDead(_204),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:298:13: 298:14 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb200,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_216),
            _216 = &(((*_193) as Sparse).0: nfa::thompson::nfa::SparseTransitions),
            StorageLive(_217),
            StorageLive(_218),
            _218 = &(*_216),
            StorageLive(_219),
            _219 = _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:300:37: 300:62 (#0),
                    scope: scope[12],
                },
                kind: _217 = nfa::thompson::nfa::SparseTransitions::matches_unit(move _218, move _219) -> [return: bb186, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_219),
            StorageDead(_218),
            PlaceMention(_217),
            _220 = discriminant(_217),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:300:24: 300:34 (#0),
                    scope: scope[12],
                },
                kind: switchInt(move _220) -> [1: bb187, otherwise: bb191],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:300:24: 300:34 (#0),
                    scope: scope[12],
                },
                kind: falseEdge -> [real: bb188, imaginary: bb191],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_221),
            _221 = ((_217 as Some).0: util::primitives::StateID),
            StorageLive(_222),
            StorageLive(_223),
            _223 = &(*_1),
            StorageLive(_224),
            _224 = _221,
            StorageLive(_225),
            StorageLive(_226),
            _226 = &_144,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:304:25: 304:44 (#0),
                    scope: scope[12],
                },
                kind: _225 = util::determinize::state::StateBuilderMatches::look_have(move _226) -> [return: bb189, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_226),
            StorageLive(_227),
            _227 = &mut (*_4),
            StorageLive(_228),
            StorageLive(_229),
            _229 = &mut ((*_3).1: util::sparse_set::SparseSet),
            _228 = &mut (*_229),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:301:21: 307:22 (#0),
                    scope: scope[12],
                },
                kind: _222 = util::determinize::epsilon_closure(move _223, move _224, move _225, move _227, move _228) -> [return: bb190, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_228),
            StorageDead(_227),
            StorageDead(_225),
            StorageDead(_224),
            StorageDead(_223),
            StorageDead(_229),
            StorageDead(_222),
            _186 = const (),
            StorageDead(_221),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:300:17: 308:18 (#0),
                    scope: scope[11],
                },
                kind: goto -> bb192,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _186 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:300:17: 308:18 (#0),
                    scope: scope[11],
                },
                kind: goto -> bb192,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_217),
            StorageDead(_216),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:309:13: 309:14 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb200,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_233),
            StorageDead(_232),
            PlaceMention(_231),
            _234 = discriminant(_231),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:311:24: 311:34 (#0),
                    scope: scope[14],
                },
                kind: switchInt(move _234) -> [1: bb194, otherwise: bb198],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:311:24: 311:34 (#0),
                    scope: scope[14],
                },
                kind: falseEdge -> [real: bb195, imaginary: bb198],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_235),
            _235 = ((_231 as Some).0: util::primitives::StateID),
            StorageLive(_236),
            StorageLive(_237),
            _237 = &(*_1),
            StorageLive(_238),
            _238 = _235,
            StorageLive(_239),
            StorageLive(_240),
            _240 = &_144,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:315:25: 315:44 (#0),
                    scope: scope[14],
                },
                kind: _239 = util::determinize::state::StateBuilderMatches::look_have(move _240) -> [return: bb196, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_240),
            StorageLive(_241),
            _241 = &mut (*_4),
            StorageLive(_242),
            StorageLive(_243),
            _243 = &mut ((*_3).1: util::sparse_set::SparseSet),
            _242 = &mut (*_243),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:312:21: 318:22 (#0),
                    scope: scope[14],
                },
                kind: _236 = util::determinize::epsilon_closure(move _237, move _238, move _239, move _241, move _242) -> [return: bb197, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_242),
            StorageDead(_241),
            StorageDead(_239),
            StorageDead(_238),
            StorageDead(_237),
            StorageDead(_243),
            StorageDead(_236),
            _186 = const (),
            StorageDead(_235),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:311:17: 319:18 (#0),
                    scope: scope[13],
                },
                kind: goto -> bb199,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _186 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:311:17: 319:18 (#0),
                    scope: scope[13],
                },
                kind: goto -> bb199,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_231),
            StorageDead(_230),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:320:13: 320:14 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb200,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_193),
            StorageDead(_192),
            StorageDead(_189),
            StorageDead(_187),
            StorageDead(_186),
            _125 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:247:5: 322:6 (#5066),
                    scope: scope[7],
                },
                kind: goto -> bb158,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_189),
            StorageDead(_187),
            StorageDead(_186),
            StorageDead(_185),
            StorageDead(_182),
            StorageDead(_181),
            StorageLive(_244),
            StorageLive(_245),
            StorageLive(_246),
            _246 = &((*_3).1: util::sparse_set::SparseSet),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:340:9: 340:32 (#0),
                    scope: scope[6],
                },
                kind: _245 = util::sparse_set::SparseSet::is_empty(move _246) -> [return: bb202, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:340:9: 340:32 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _245) -> [0: bb204, otherwise: bb203],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_246),
            _244 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:340:5: 349:6 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb232,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_246),
            StorageLive(_247),
            StorageLive(_248),
            StorageLive(_249),
            StorageLive(_250),
            _250 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:341:12: 341:30 (#0),
                    scope: scope[6],
                },
                kind: _249 = nfa::thompson::nfa::NFA::look_set_any(move _250) -> [return: bb205, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_250),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:341:12: 341:46 (#0),
                    scope: scope[6],
                },
                kind: _248 = util::look::LookSet::contains_word(move _249) -> [return: bb206, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:341:12: 341:46 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _248) -> [0: bb212, otherwise: bb207],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_249),
            StorageLive(_251),
            StorageLive(_252),
            _252 = _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:341:50: 341:69 (#0),
                    scope: scope[6],
                },
                kind: _251 = util::alphabet::Unit::is_word_byte(move _252) -> [return: bb208, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:341:50: 341:69 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _251) -> [0: bb211, otherwise: bb209],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_252),
            StorageLive(_253),
            StorageLive(_254),
            _254 = &mut _144,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:342:13: 342:39 (#0),
                    scope: scope[6],
                },
                kind: _253 = util::determinize::state::StateBuilderMatches::set_is_from_word(move _254) -> [return: bb210, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_254),
            StorageDead(_253),
            _247 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:341:9: 343:10 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb214,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_252),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb213,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_249),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb213,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _247 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:341:9: 343:10 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb214,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_251),
            StorageDead(_248),
            StorageDead(_247),
            StorageLive(_255),
            StorageLive(_256),
            StorageLive(_257),
            StorageLive(_258),
            _258 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:344:12: 344:30 (#0),
                    scope: scope[6],
                },
                kind: _257 = nfa::thompson::nfa::NFA::look_set_any(move _258) -> [return: bb215, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _256 = &_257,
            StorageDead(_258),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:344:12: 344:53 (#0),
                    scope: scope[6],
                },
                kind: _255 = util::look::LookSet::contains_anchor_crlf(move _256) -> [return: bb216, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:344:12: 344:53 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _255) -> [0: bb229, otherwise: bb217],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_257),
            StorageDead(_256),
            StorageLive(_259),
            _259 = _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:345:18: 345:21 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _259) -> [0: bb222, otherwise: bb218],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_260),
            StorageLive(_261),
            _261 = _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:345:25: 345:44 (#0),
                    scope: scope[6],
                },
                kind: _260 = util::alphabet::Unit::is_byte(move _261, const 10_u8) -> [return: bb219, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:345:25: 345:44 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _260) -> [0: bb221, otherwise: bb220],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_261),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:346:9: 348:10 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb226,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_261),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb222,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_262),
            _262 = _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:345:51: 345:54 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _262) -> [0: bb223, otherwise: bb230],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_263),
            StorageLive(_264),
            _264 = _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:345:58: 345:77 (#0),
                    scope: scope[6],
                },
                kind: _263 = util::alphabet::Unit::is_byte(move _264, const 13_u8) -> [return: bb224, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:345:58: 345:77 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _263) -> [0: bb228, otherwise: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_264),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:346:9: 348:10 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb226,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_265),
            StorageLive(_266),
            _266 = &mut _144,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:347:13: 347:39 (#0),
                    scope: scope[6],
                },
                kind: _265 = util::determinize::state::StateBuilderMatches::set_is_half_crlf(move _266) -> [return: bb227, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_266),
            StorageDead(_265),
            _244 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:344:9: 348:10 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb231,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_264),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb230,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_257),
            StorageDead(_256),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb230,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _244 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:344:9: 348:10 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb231,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_263),
            StorageDead(_262),
            StorageDead(_260),
            StorageDead(_259),
            StorageDead(_255),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:340:5: 349:6 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb232,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_245),
            StorageDead(_244),
            StorageLive(_267),
            StorageLive(_268),
            _268 = move _144,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:350:27: 350:45 (#0),
                    scope: scope[6],
                },
                kind: _267 = util::determinize::state::StateBuilderMatches::into_nfa(move _268) -> [return: bb233, unwind: bb239],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_268),
            FakeRead(ForLet(None), _267),
            StorageLive(_269),
            StorageLive(_270),
            _270 = &(*_1),
            StorageLive(_271),
            StorageLive(_272),
            _272 = &((*_3).1: util::sparse_set::SparseSet),
            _271 = &(*_272),
            StorageLive(_273),
            StorageLive(_274),
            _274 = &mut _267,
            _273 = &mut (*_274),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:351:5: 351:57 (#0),
                    scope: scope[15],
                },
                kind: _269 = util::determinize::add_nfa_states(move _270, move _271, move _273) -> [return: bb234, unwind: bb238],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_273),
            StorageDead(_271),
            StorageDead(_270),
            StorageDead(_274),
            StorageDead(_272),
            StorageDead(_269),
            _0 = move _267,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:353:1: 353:2 (#0),
                    scope: scope[6],
                },
                kind: drop(_267) -> [return: bb235, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_267),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:353:1: 353:2 (#0),
                    scope: scope[2],
                },
                kind: drop(_144) -> [return: bb236, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_144),
            StorageDead(_12),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:353:1: 353:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb237, unwind: bb243],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:353:2: 353:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:353:1: 353:2 (#0),
                    scope: scope[6],
                },
                kind: drop(_267) -> [return: bb240, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:350:44: 350:45 (#0),
                    scope: scope[6],
                },
                kind: drop(_268) -> [return: bb240, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:353:1: 353:2 (#0),
                    scope: scope[2],
                },
                kind: drop(_144) -> [return: bb242, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:216:50: 216:51 (#0),
                    scope: scope[2],
                },
                kind: drop(_145) -> [return: bb242, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:353:1: 353:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb243, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/mod.rs:92:1: 353:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::determinize::state::StateBuilderNFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:100:6: 100:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/determinize/mod.rs:93:10: 93:24 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/determinize/mod.rs:93:5: 93:8 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:93:5: 93:8 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:93:5: 93:8 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/determinize/mod.rs:94:17: 94:26 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/determinize/mod.rs:94:5: 94:15 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:94:5: 94:15 (#0),
                    },
                ),
            ),
        ),
        ty: util::search::MatchKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:94:5: 94:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/determinize/mod.rs:95:14: 95:29 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/determinize/mod.rs:95:5: 95:12 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:95:5: 95:12 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut util::sparse_set::SparseSets,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:95:5: 95:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/determinize/mod.rs:96:12: 96:29 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/determinize/mod.rs:96:5: 96:10 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:96:5: 96:10 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:96:5: 96:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/determinize/mod.rs:97:12: 97:18 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/determinize/mod.rs:97:5: 97:10 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:97:5: 97:10 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} util::determinize::state::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:97:5: 97:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/determinize/mod.rs:98:11: 98:25 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/determinize/mod.rs:98:5: 98:9 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:98:5: 98:9 (#0),
                    },
                ),
            ),
        ),
        ty: util::alphabet::Unit,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:98:5: 98:9 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/determinize/mod.rs:99:20: 99:37 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/determinize/mod.rs:99:5: 99:18 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:99:5: 99:18 (#0),
                    },
                ),
            ),
        ),
        ty: util::determinize::state::StateBuilderEmpty,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:99:5: 99:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:101:5: 101:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::sparse_set::SparseSets,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:101:5: 101:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/determinize/mod.rs:106:15: 106:31 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:106:9: 106:12 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:106:9: 106:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:106:15: 106:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/determinize/mod.rs:110:17: 110:35 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:110:9: 110:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} util::look::LookMatcher,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:110:9: 110:14 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:110:17: 110:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:121:5: 123:7 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::determinize::state::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:121:5: 121:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:4246 ~ regex_automata[00dd]::util::determinize::next::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn((util::primitives::StateID,)), bound_vars: [] },
                (&'{erased} mut util::sparse_set::SparseSet,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:121:30: 123:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::sparse_set::SparseSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:121:30: 123:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:131:5: 212:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:131:9: 131:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:131:9: 131:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::determinize::state::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:131:9: 131:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/determinize/mod.rs:134:29: 134:54 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:134:13: 134:26 (#0),
                    },
                ),
            ),
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:134:13: 134:26 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:134:29: 134:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:134:29: 134:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::determinize::state::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:134:29: 134:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:135:9: 153:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:135:15: 135:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::alphabet::Unit,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:135:15: 135:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:136:13: 136:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:137:17: 139:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:137:21: 137:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:137:17: 139:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:137:29: 137:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:137:17: 139:18 (#0),
                },
            ),
        ),
        ty: &'{erased} util::determinize::state::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:137:29: 137:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:138:33: 138:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:138:33: 138:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::Look,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:138:50: 138:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:142:17: 144:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:142:20: 142:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:142:17: 144:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:142:28: 142:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:142:17: 144:18 (#0),
                },
            ),
        ),
        ty: &'{erased} util::determinize::state::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:142:28: 142:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:143:33: 143:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:143:33: 143:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::Look,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:143:50: 143:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:148:29: 151:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:148:29: 150:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:148:29: 149:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:148:29: 148:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::Look,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:149:29: 149:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::Look,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:150:29: 150:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::Look,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:151:29: 151:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:154:9: 156:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:154:12: 154:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::alphabet::Unit,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:154:12: 154:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:154:25: 154:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::look::LookMatcher,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:154:25: 154:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:155:25: 155:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:155:25: 155:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::Look,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:155:42: 155:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:157:9: 162:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:157:12: 157:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::determinize::state::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:157:12: 157:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:158:18: 158:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:158:26: 158:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::alphabet::Unit,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:158:26: 158:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:159:22: 159:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:159:30: 159:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::alphabet::Unit,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:159:30: 159:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:161:25: 161:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:161:25: 161:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::Look,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:161:42: 161:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:163:9: 170:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:163:12: 163:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:163:12: 163:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::determinize::state::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:163:12: 163:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:163:36: 163:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::alphabet::Unit,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:163:36: 163:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:164:25: 166:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:164:25: 165:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:164:25: 164:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::Look,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:165:25: 165:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::Look,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:166:25: 166:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:169:17: 169:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:169:17: 169:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:169:17: 169:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::Look,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:169:34: 169:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::Look,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:169:58: 169:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:171:9: 175:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:171:13: 171:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::alphabet::Unit,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:171:13: 171:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:172:25: 174:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:172:25: 173:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:172:25: 172:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::Look,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:173:25: 173:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::Look,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:174:25: 174:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:176:9: 184:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:176:12: 176:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::determinize::state::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:176:12: 176:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:176:37: 176:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::alphabet::Unit,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:176:37: 176:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:177:25: 179:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:177:25: 178:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:177:25: 177:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::Look,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:178:25: 178:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::Look,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:179:25: 179:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:180:20: 180:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::determinize::state::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:180:20: 180:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:180:44: 180:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::alphabet::Unit,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:180:44: 180:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:181:25: 183:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:181:25: 182:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:181:25: 181:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::Look,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:182:25: 182:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::Look,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:183:25: 183:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:195:9: 211:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:195:13: 198:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:195:9: 211:10 (#0),
                },
            ),
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:195:13: 197:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:195:9: 211:10 (#0),
                },
            ),
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:195:13: 196:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:195:9: 211:10 (#0),
                },
            ),
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:195:13: 195:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:195:9: 211:10 (#0),
                },
            ),
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:196:23: 196:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:195:9: 211:10 (#0),
                },
            ),
        ),
        ty: &'{erased} util::determinize::state::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:196:23: 196:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:195:9: 211:10 (#0),
                },
            ),
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:197:24: 197:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:195:9: 211:10 (#0),
                },
            ),
        ),
        ty: &'{erased} util::determinize::state::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:197:24: 197:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:200:13: 208:14 (#5060),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::sparse_set::SparseSetIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:200:27: 200:46 (#5061),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::sparse_set::SparseSetIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:200:27: 200:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::sparse_set::SparseSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:200:27: 200:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _121,
                                ),
                                regex-automata/src/util/determinize/mod.rs:200:27: 200:46 (#5061),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:200:27: 200:46 (#5061),
                    },
                ),
            ),
        ),
        ty: util::sparse_set::SparseSetIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:200:27: 200:46 (#5061),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:92:1: 353:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:200:27: 200:46 (#5061),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:200:27: 200:46 (#5061),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::sparse_set::SparseSetIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:200:27: 200:46 (#5061),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::sparse_set::SparseSetIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:200:27: 200:46 (#5061),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:200:13: 208:14 (#5060),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:200:13: 208:14 (#5060),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _127,
                                ),
                                regex-automata/src/util/determinize/mod.rs:200:27: 200:46 (#5061),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:200:17: 200:23 (#5062),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:200:17: 200:23 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:201:17: 207:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:202:21: 202:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:203:21: 203:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:204:21: 204:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:205:21: 205:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::sparse_set::SparseSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:206:21: 206:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::sparse_set::SparseSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:206:21: 206:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:209:13: 209:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::sparse_set::SparseSets,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:209:13: 209:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:210:13: 210:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::sparse_set::SparseSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:210:13: 210:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/determinize/mod.rs:216:23: 216:51 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:216:9: 216:20 (#0),
                    },
                ),
            ),
        ),
        ty: util::determinize::state::StateBuilderMatches,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:216:9: 216:20 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::determinize::state::StateBuilderEmpty,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:216:23: 216:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:220:5: 227:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:220:8: 220:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:220:8: 220:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:220:8: 220:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:220:8: 220:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:221:12: 221:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::alphabet::Unit,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:221:12: 221:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:221:25: 221:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::look::LookMatcher,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:221:25: 221:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:226:9: 226:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::determinize::state::StateBuilderMatches,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:226:9: 226:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:4247 ~ regex_automata[00dd]::util::determinize::next::{closure#1}),
            [
                i16,
                Binder { value: extern "RustCall" fn((util::look::LookSet,)) -> util::look::LookSet, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:226:31: 226:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:234:5: 238:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:234:8: 234:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:234:8: 234:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:234:8: 234:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:234:8: 234:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:235:14: 235:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:235:21: 235:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::alphabet::Unit,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:235:21: 235:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:235:47: 235:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:235:54: 235:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::alphabet::Unit,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:235:54: 235:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:237:9: 237:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::determinize::state::StateBuilderMatches,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:237:9: 237:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:4248 ~ regex_automata[00dd]::util::determinize::next::{closure#2}),
            [
                i16,
                Binder { value: extern "RustCall" fn((util::look::LookSet,)) -> util::look::LookSet, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:237:31: 237:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:241:5: 246:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:241:8: 241:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:241:8: 241:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:241:8: 241:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:241:47: 241:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::alphabet::Unit,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:241:47: 241:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:242:9: 245:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::determinize::state::StateBuilderMatches,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:242:9: 242:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:4249 ~ regex_automata[00dd]::util::determinize::next::{closure#3}),
            [
                i16,
                Binder { value: extern "RustCall" fn((util::look::LookSet,)) -> util::look::LookSet, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:242:31: 245:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:247:5: 322:6 (#5066),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::sparse_set::SparseSetIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:247:19: 247:38 (#5067),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::sparse_set::SparseSetIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:247:19: 247:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::sparse_set::SparseSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:247:19: 247:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _182,
                                ),
                                regex-automata/src/util/determinize/mod.rs:247:19: 247:38 (#5067),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:247:19: 247:38 (#5067),
                    },
                ),
            ),
        ),
        ty: util::sparse_set::SparseSetIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:247:19: 247:38 (#5067),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:247:19: 247:38 (#5067),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:247:19: 247:38 (#5067),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::sparse_set::SparseSetIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:247:19: 247:38 (#5067),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::sparse_set::SparseSetIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:247:19: 247:38 (#5067),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:247:5: 322:6 (#5066),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:247:5: 322:6 (#5066),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _187,
                                ),
                                regex-automata/src/util/determinize/mod.rs:247:19: 247:38 (#5067),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:247:9: 247:15 (#5068),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:247:9: 247:15 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:248:9: 321:10 (#0),
                },
            ),
        ),
        ty: &'{erased} nfa::thompson::nfa::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:248:16: 248:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:248:9: 321:10 (#0),
                },
            ),
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:248:16: 248:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:248:9: 321:10 (#0),
                },
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:248:26: 248:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:249:13: 249:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_193),
                                ),
                                regex-automata/src/util/determinize/mod.rs:248:15: 248:33 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:254:13: 254:50 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:254:38: 254:48 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:283:17: 283:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::determinize::state::StateBuilderMatches,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:283:17: 283:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:283:46: 283:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:284:17: 286:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:284:21: 284:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:284:17: 286:18 (#0),
                },
            ),
        ),
        ty: &'{erased} util::search::MatchKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:284:21: 284:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:284:17: 286:18 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:284:60: 286:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_193),
                                ),
                                regex-automata/src/util/determinize/mod.rs:248:15: 248:33 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:288:13: 288:53 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} nfa::thompson::nfa::Transition,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:288:42: 288:51 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:289:17: 297:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:289:20: 289:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:289:17: 297:18 (#0),
                },
            ),
        ),
        ty: &'{erased} nfa::thompson::nfa::Transition,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:289:20: 289:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:289:17: 297:18 (#0),
                },
            ),
        ),
        ty: util::alphabet::Unit,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:289:39: 289:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:290:21: 296:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:291:25: 291:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:292:25: 292:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:293:25: 293:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::determinize::state::StateBuilderMatches,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:293:25: 293:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:294:25: 294:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::sparse_set::SparseSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:295:25: 295:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::sparse_set::SparseSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:295:25: 295:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_193),
                                ),
                                regex-automata/src/util/determinize/mod.rs:248:15: 248:33 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:299:13: 299:48 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} nfa::thompson::nfa::SparseTransitions,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:299:37: 299:47 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:300:17: 308:18 (#0),
                },
            ),
        ),
        ty: core::option::Option<util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:300:37: 300:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:300:17: 308:18 (#0),
                },
            ),
        ),
        ty: &'{erased} nfa::thompson::nfa::SparseTransitions,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:300:37: 300:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:300:17: 308:18 (#0),
                },
            ),
        ),
        ty: util::alphabet::Unit,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:300:57: 300:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:300:24: 300:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _217,
                                ),
                                regex-automata/src/util/determinize/mod.rs:300:37: 300:62 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:300:24: 300:34 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:300:29: 300:33 (#0),
            scope: scope[12],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:301:21: 307:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:302:25: 302:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:303:25: 303:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:304:25: 304:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::determinize::state::StateBuilderMatches,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:304:25: 304:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:305:25: 305:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::sparse_set::SparseSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:306:25: 306:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::sparse_set::SparseSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:306:25: 306:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_193),
                                ),
                                regex-automata/src/util/determinize/mod.rs:248:15: 248:33 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:310:13: 310:46 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} nfa::thompson::nfa::DenseTransitions,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:310:36: 310:45 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:311:17: 319:18 (#0),
                },
            ),
        ),
        ty: core::option::Option<util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:311:37: 311:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:311:17: 319:18 (#0),
                },
            ),
        ),
        ty: &'{erased} nfa::thompson::nfa::DenseTransitions,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:311:37: 311:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:311:17: 319:18 (#0),
                },
            ),
        ),
        ty: util::alphabet::Unit,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:311:56: 311:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:311:24: 311:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _231,
                                ),
                                regex-automata/src/util/determinize/mod.rs:311:37: 311:61 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:311:24: 311:34 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:311:29: 311:33 (#0),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:312:21: 318:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:313:25: 313:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:314:25: 314:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:315:25: 315:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::determinize::state::StateBuilderMatches,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:315:25: 315:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:316:25: 316:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::sparse_set::SparseSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:317:25: 317:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::sparse_set::SparseSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:317:25: 317:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:340:5: 349:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:340:9: 340:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::sparse_set::SparseSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:340:9: 340:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:341:9: 343:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:341:12: 341:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:341:12: 341:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:341:12: 341:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:341:50: 341:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::alphabet::Unit,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:341:50: 341:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:342:13: 342:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::determinize::state::StateBuilderMatches,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:342:13: 342:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:344:9: 348:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:344:12: 344:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:344:9: 348:10 (#0),
                },
            ),
        ),
        ty: &'{erased} util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:344:12: 344:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:344:9: 348:10 (#0),
                },
            ),
        ),
        ty: util::look::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:344:12: 344:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:344:9: 348:10 (#0),
                },
            ),
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:344:12: 344:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:344:9: 348:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:345:18: 345:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:344:9: 348:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:345:25: 345:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:344:9: 348:10 (#0),
                },
            ),
        ),
        ty: util::alphabet::Unit,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:345:25: 345:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:344:9: 348:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:345:51: 345:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:344:9: 348:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:345:58: 345:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/mod.rs:344:9: 348:10 (#0),
                },
            ),
        ),
        ty: util::alphabet::Unit,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:345:58: 345:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:347:13: 347:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::determinize::state::StateBuilderMatches,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:347:13: 347:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/determinize/mod.rs:350:27: 350:45 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/mod.rs:350:9: 350:24 (#0),
                    },
                ),
            ),
        ),
        ty: util::determinize::state::StateBuilderNFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:350:9: 350:24 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::determinize::state::StateBuilderMatches,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:350:27: 350:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:351:5: 351:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:351:20: 351:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::sparse_set::SparseSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:351:25: 351:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::sparse_set::SparseSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:351:25: 351:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::determinize::state::StateBuilderNFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:351:40: 351:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::determinize::state::StateBuilderNFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/mod.rs:351:40: 351:56 (#0),
            scope: scope[0],
        },
    },
]