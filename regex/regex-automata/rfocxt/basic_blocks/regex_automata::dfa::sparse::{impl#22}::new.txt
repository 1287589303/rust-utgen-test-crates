[
    BasicBlockData {
        statements: [
            StorageLive(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:2522:21: 2522:56 (#0),
                    scope: scope[0],
                },
                kind: _1 = std::collections::BTreeSet::<util::primitives::StateID>::new() -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = dfa::sparse::Seen { set: move _1 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:2522:57: 2522:58 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:2523:6: 2523:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/sparse.rs:2521:5: 2523:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: dfa::sparse::Seen,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:2521:17: 2521:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::collections::BTreeSet<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/sparse.rs:2522:21: 2522:56 (#0),
            scope: scope[0],
        },
    },
]