[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            _5 = &((*_1).0: nfa::thompson::pikevm::PikeVM),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &mut ((*_2).0: core::option::Option<nfa::thompson::pikevm::Cache>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:117:13: 117:29 (#0),
                    scope: scope[0],
                },
                kind: _8 = core::option::Option::<nfa::thompson::pikevm::Cache>::as_mut(move _9) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:117:13: 117:38 (#0),
                    scope: scope[0],
                },
                kind: _7 = core::option::Option::<&mut nfa::thompson::pikevm::Cache>::unwrap(move _8) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = &mut (*_7),
            StorageDead(_8),
            StorageLive(_10),
            _10 = &(*_3),
            StorageLive(_11),
            _11 = &mut (*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:116:9: 120:10 (#0),
                    scope: scope[0],
                },
                kind: _0 = nfa::thompson::pikevm::PikeVM::which_overlapping_matches(move _5, move _6, move _10, move _11) -> [return: bb3, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:121:6: 121:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:110:5: 121:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:115:6: 115:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} meta::wrappers::PikeVMEngine,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:111:9: 111:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/meta/wrappers.rs:112:16: 112:32 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/wrappers.rs:112:9: 112:14 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/wrappers.rs:112:9: 112:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut meta::wrappers::PikeVMCache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:112:9: 112:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/meta/wrappers.rs:113:16: 113:26 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/wrappers.rs:113:9: 113:14 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/wrappers.rs:113:9: 113:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:113:9: 113:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/meta/wrappers.rs:114:17: 114:32 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/wrappers.rs:114:9: 114:15 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/wrappers.rs:114:9: 114:15 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut util::search::PatternSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:114:9: 114:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/meta/wrappers.rs:116:9: 120:10 (#0),
                },
            ),
        ),
        ty: &'{erased} nfa::thompson::pikevm::PikeVM,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:116:9: 116:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/meta/wrappers.rs:116:9: 120:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut nfa::thompson::pikevm::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:117:13: 117:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/meta/wrappers.rs:116:9: 120:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut nfa::thompson::pikevm::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:117:13: 117:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/meta/wrappers.rs:116:9: 120:10 (#0),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} mut nfa::thompson::pikevm::Cache>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:117:13: 117:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/meta/wrappers.rs:116:9: 120:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::option::Option<nfa::thompson::pikevm::Cache>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:117:13: 117:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/meta/wrappers.rs:116:9: 120:10 (#0),
                },
            ),
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:118:13: 118:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/meta/wrappers.rs:116:9: 120:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut util::search::PatternSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:119:13: 119:19 (#0),
            scope: scope[0],
        },
    },
]