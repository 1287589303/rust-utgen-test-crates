[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:237:9: 237:23 (#0),
                    scope: scope[0],
                },
                kind: _5 = hybrid::regex::Regex::forward(move _6) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = &(*_5),
            StorageDead(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &mut ((*_2).0: hybrid::dfa::Cache),
            _7 = &mut (*_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:237:9: 237:55 (#0),
                    scope: scope[0],
                },
                kind: _3 = hybrid::dfa::DFA::reset_cache(move _4, move _7) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_4),
            StorageDead(_8),
            StorageDead(_5),
            StorageDead(_3),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:238:9: 238:23 (#0),
                    scope: scope[0],
                },
                kind: _11 = hybrid::regex::Regex::reverse(move _12) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = &(*_11),
            StorageDead(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &mut ((*_2).1: hybrid::dfa::Cache),
            _13 = &mut (*_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:238:9: 238:55 (#0),
                    scope: scope[0],
                },
                kind: _9 = hybrid::dfa::DFA::reset_cache(move _10, move _13) -> [return: bb4, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_10),
            StorageDead(_14),
            StorageDead(_11),
            StorageDead(_9),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:239:6: 239:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:236:5: 239:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:236:49: 236:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} hybrid::regex::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:236:24: 236:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/hybrid/regex.rs:236:38: 236:48 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/hybrid/regex.rs:236:31: 236:36 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/regex.rs:236:31: 236:36 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut hybrid::regex::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:236:31: 236:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:237:9: 237:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hybrid::dfa::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:237:9: 237:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hybrid::dfa::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:237:9: 237:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hybrid::regex::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:237:9: 237:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hybrid::dfa::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:237:36: 237:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hybrid::dfa::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:237:36: 237:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:238:9: 238:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hybrid::dfa::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:238:9: 238:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hybrid::dfa::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:238:9: 238:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hybrid::regex::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:238:9: 238:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hybrid::dfa::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:238:36: 238:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hybrid::dfa::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:238:36: 238:54 (#0),
            scope: scope[0],
        },
    },
]