[
    BasicBlockData {
        statements: [
            ((*_1).0: usize) = const 0_usize,
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut (*((*_1).1: std::boxed::Box<[bool]>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/search.rs:1204:24: 1204:45 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::slice::<impl [bool]>::iter_mut(move _4) -> [return: bb1, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/search.rs:1204:24: 1204:45 (#5112),
                    scope: scope[0],
                },
                kind: _2 = <core::slice::IterMut<'_, bool> as core::iter::IntoIterator>::into_iter(move _3) -> [return: bb2, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            PlaceMention(_2),
            StorageLive(_5),
            _5 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/search.rs:1204:9: 1206:10 (#5111),
                    scope: scope[1],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/search.rs:1204:9: 1206:10 (#5111),
                    scope: scope[1],
                },
                kind: falseUnwind -> [real: bb4, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &mut _5,
            _9 = &mut (*_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/search.rs:1204:24: 1204:45 (#5112),
                    scope: scope[1],
                },
                kind: _8 = <core::slice::IterMut<'_, bool> as core::iter::Iterator>::next(move _9) -> [return: bb5, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            PlaceMention(_8),
            _11 = discriminant(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/search.rs:1204:24: 1204:45 (#5112),
                    scope: scope[1],
                },
                kind: switchInt(move _11) -> [0: bb7, 1: bb8, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/search.rs:1204:24: 1204:45 (#5112),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/search.rs:1204:9: 1206:10 (#5111),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb9, imaginary: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            _13 = move ((_8 as Some).0: &mut bool),
            (*_13) = const false,
            _7 = const (),
            StorageDead(_13),
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_7),
            _6 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/search.rs:1204:9: 1206:10 (#5111),
                    scope: scope[1],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_5),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/search.rs:1207:6: 1207:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/search.rs:1202:5: 1207:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/search.rs:1202:28: 1202:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut util::search::PatternSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/search.rs:1202:18: 1202:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/search.rs:1204:9: 1206:10 (#5111),
                },
            ),
        ),
        ty: core::slice::IterMut<'{erased}, bool>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/search.rs:1204:24: 1204:45 (#5112),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/search.rs:1204:9: 1206:10 (#5111),
                },
            ),
        ),
        ty: core::slice::IterMut<'{erased}, bool>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/search.rs:1204:24: 1204:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/search.rs:1204:9: 1206:10 (#5111),
                },
            ),
        ),
        ty: &'{erased} mut [bool],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/search.rs:1204:24: 1204:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                regex-automata/src/util/search.rs:1204:24: 1204:45 (#5112),
                            ),
                        ),
                        pat_span: regex-automata/src/util/search.rs:1204:24: 1204:45 (#5112),
                    },
                ),
            ),
        ),
        ty: core::slice::IterMut<'{erased}, bool>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/search.rs:1204:24: 1204:45 (#5112),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/search.rs:1202:5: 1207:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/search.rs:1204:24: 1204:45 (#5112),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} mut bool>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/search.rs:1204:24: 1204:45 (#5112),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::IterMut<'{erased}, bool>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/search.rs:1204:24: 1204:45 (#5112),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::IterMut<'{erased}, bool>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/search.rs:1204:24: 1204:45 (#5112),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/search.rs:1204:9: 1206:10 (#5111),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/search.rs:1204:9: 1206:10 (#5111),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _8,
                                ),
                                regex-automata/src/util/search.rs:1204:24: 1204:45 (#5112),
                            ),
                        ),
                        pat_span: regex-automata/src/util/search.rs:1204:13: 1204:20 (#5113),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/search.rs:1204:13: 1204:20 (#0),
            scope: scope[1],
        },
    },
]