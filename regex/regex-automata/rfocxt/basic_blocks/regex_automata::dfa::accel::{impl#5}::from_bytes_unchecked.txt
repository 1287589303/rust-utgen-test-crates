[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = const 0_usize,
            _5 = Len(_1),
            _6 = Lt(_4, _5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/accel.rs:440:25: 440:33 (#0),
                    scope: scope[0],
                },
                kind: assert(move _6, "index out of bounds: the length is {} but the index is {}", move _5, _4) -> [success: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = _1[_4],
            StorageLive(_7),
            StorageLive(_8),
            _8 = const 1_usize,
            _9 = Len(_1),
            _10 = Lt(_8, _9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/accel.rs:440:35: 440:43 (#0),
                    scope: scope[0],
                },
                kind: assert(move _10, "index out of bounds: the length is {} but the index is {}", move _9, _8) -> [success: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = _1[_8],
            StorageLive(_11),
            StorageLive(_12),
            _12 = const 2_usize,
            _13 = Len(_1),
            _14 = Lt(_12, _13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/accel.rs:440:45: 440:53 (#0),
                    scope: scope[0],
                },
                kind: assert(move _14, "index out of bounds: the length is {} but the index is {}", move _13, _12) -> [success: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _11 = _1[_12],
            StorageLive(_15),
            StorageLive(_16),
            _16 = const 3_usize,
            _17 = Len(_1),
            _18 = Lt(_16, _17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/accel.rs:440:55: 440:63 (#0),
                    scope: scope[0],
                },
                kind: assert(move _18, "index out of bounds: the length is {} but the index is {}", move _17, _16) -> [success: bb4, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _15 = _1[_16],
            _2 = [move _3, move _7, move _11, move _15, const 0_u8, const 0_u8, const 0_u8, const 0_u8],
            StorageDead(_15),
            StorageDead(_11),
            StorageDead(_7),
            StorageDead(_3),
            _0 = dfa::accel::Accel { bytes: move _2 },
            StorageDead(_2),
            StorageDead(_16),
            StorageDead(_12),
            StorageDead(_8),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/accel.rs:441:6: 441:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/accel.rs:439:5: 441:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: dfa::accel::Accel,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:439:48: 439:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/dfa/accel.rs:439:36: 439:43 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/accel.rs:439:29: 439:34 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/accel.rs:439:29: 439:34 (#0),
                    },
                ),
            ),
        ),
        ty: [u8; 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:439:29: 439:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: [u8; 8_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:440:24: 440:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/accel.rs:440:9: 440:78 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:440:25: 440:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/accel.rs:440:9: 440:78 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:440:31: 440:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:440:25: 440:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:440:25: 440:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/accel.rs:440:9: 440:78 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:440:35: 440:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/accel.rs:440:9: 440:78 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:440:41: 440:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:440:35: 440:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:440:35: 440:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/accel.rs:440:9: 440:78 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:440:45: 440:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/accel.rs:440:9: 440:78 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:440:51: 440:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:440:45: 440:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:440:45: 440:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/accel.rs:440:9: 440:78 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:440:55: 440:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/accel.rs:440:9: 440:78 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:440:61: 440:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:440:55: 440:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:440:55: 440:63 (#0),
            scope: scope[0],
        },
    },
]