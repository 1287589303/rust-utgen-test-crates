[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = const 0_usize,
            _5 = Len((*((*_1).0: &[u8]))),
            _6 = Lt(_4, _5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/state.rs:408:9: 408:18 (#0),
                    scope: scope[0],
                },
                kind: assert(move _6, "index out of bounds: the length is {} but the index is {}", move _5, _4) -> [success: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = (*((*_1).0: &[u8]))[_4],
            StorageLive(_7),
            _8 = const 1_i32 as u32 (IntToInt),
            _9 = Lt(move _8, const 8_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/state.rs:408:21: 408:29 (#0),
                    scope: scope[0],
                },
                kind: assert(move _9, "attempt to shift left by `{}`, which would overflow", const 1_i32) -> [success: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = Shl(const 1_u8, const 1_i32),
            _2 = BitAnd(move _3, move _7),
            StorageDead(_7),
            StorageDead(_3),
            _0 = Gt(move _2, const 0_u8),
            StorageDead(_2),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/state.rs:409:6: 409:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/state.rs:407:5: 409:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/state.rs:407:34: 407:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} util::determinize::state::Repr<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/state.rs:407:24: 407:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/determinize/state.rs:408:9: 408:33 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/state.rs:408:9: 408:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/determinize/state.rs:408:9: 408:33 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/state.rs:408:9: 408:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/determinize/state.rs:408:9: 408:33 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/state.rs:408:16: 408:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/state.rs:408:9: 408:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/state.rs:408:9: 408:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/determinize/state.rs:408:9: 408:33 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/state.rs:408:21: 408:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/state.rs:408:21: 408:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/state.rs:408:21: 408:29 (#0),
            scope: scope[0],
        },
    },
]