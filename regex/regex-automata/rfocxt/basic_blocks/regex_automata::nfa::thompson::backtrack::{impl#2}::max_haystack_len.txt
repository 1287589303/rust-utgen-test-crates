[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/backtrack.rs:821:28: 821:45 (#0),
                    scope: scope[0],
                },
                kind: _5 = nfa::thompson::backtrack::BoundedBacktracker::get_config(move _6) -> [return: bb1, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = &(*_5),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/backtrack.rs:821:28: 821:68 (#0),
                    scope: scope[0],
                },
                kind: _3 = nfa::thompson::backtrack::Config::get_visited_capacity(move _4) -> [return: bb2, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            _7 = MulWithOverflow(const 8_usize, _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/backtrack.rs:821:24: 821:68 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_7.1: bool), "attempt to compute `{} * {}`, which would overflow", const 8_usize, move _3) -> [success: bb3, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = move (_7.0: usize),
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageDead(_5),
            StorageLive(_8),
            StorageLive(_9),
            _9 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/backtrack.rs:822:22: 822:61 (#0),
                    scope: scope[1],
                },
                kind: _8 = nfa::thompson::backtrack::div_ceil(move _9, const nfa::thompson::backtrack::Visited::BLOCK_SIZE) -> [return: bb4, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            FakeRead(ForLet(None), _8),
            StorageLive(_10),
            StorageLive(_11),
            _11 = _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/backtrack.rs:823:29: 823:71 (#0),
                    scope: scope[2],
                },
                kind: _10 = core::num::<impl usize>::saturating_mul(move _11, const nfa::thompson::backtrack::Visited::BLOCK_SIZE) -> [return: bb5, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            FakeRead(ForLet(None), _10),
            StorageLive(_12),
            StorageLive(_13),
            _13 = _10,
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &((*_1).1: nfa::thompson::nfa::NFA),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/backtrack.rs:827:26: 827:43 (#0),
                    scope: scope[3],
                },
                kind: _16 = nfa::thompson::nfa::NFA::states(move _17) -> [return: bb6, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _15 = &(*_16),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/backtrack.rs:827:26: 827:49 (#0),
                    scope: scope[3],
                },
                kind: _14 = core::slice::<impl [nfa::thompson::nfa::State]>::len(move _15) -> [return: bb7, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            _18 = Eq(_14, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/backtrack.rs:827:9: 827:50 (#0),
                    scope: scope[3],
                },
                kind: assert(!move _18, "attempt to divide `{}` by zero", _13) -> [success: bb8, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _12 = Div(move _13, move _14),
            StorageDead(_14),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/backtrack.rs:827:9: 827:68 (#0),
                    scope: scope[3],
                },
                kind: _0 = core::num::<impl usize>::saturating_sub(move _12, const 1_usize) -> [return: bb9, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_2),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/backtrack.rs:828:6: 828:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/backtrack.rs:817:5: 828:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/backtrack.rs:817:39: 817:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} nfa::thompson::backtrack::BoundedBacktracker,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/backtrack.rs:817:29: 817:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/backtrack.rs:821:24: 821:68 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/backtrack.rs:821:13: 821:21 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/backtrack.rs:821:13: 821:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/backtrack.rs:821:28: 821:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::backtrack::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/backtrack.rs:821:28: 821:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::backtrack::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/backtrack.rs:821:28: 821:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::backtrack::BoundedBacktracker,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/backtrack.rs:821:28: 821:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/backtrack.rs:821:24: 821:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/backtrack.rs:822:22: 822:61 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/backtrack.rs:822:13: 822:19 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/backtrack.rs:822:13: 822:19 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/backtrack.rs:822:31: 822:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/backtrack.rs:823:29: 823:71 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/backtrack.rs:823:13: 823:26 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/backtrack.rs:823:13: 823:26 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/backtrack.rs:823:29: 823:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/backtrack.rs:827:9: 827:68 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/backtrack.rs:827:9: 827:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/backtrack.rs:827:9: 827:68 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/backtrack.rs:827:10: 827:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/backtrack.rs:827:9: 827:68 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/backtrack.rs:827:26: 827:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/backtrack.rs:827:9: 827:68 (#0),
                },
            ),
        ),
        ty: &'{erased} [nfa::thompson::nfa::State],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/backtrack.rs:827:26: 827:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/backtrack.rs:827:9: 827:68 (#0),
                },
            ),
        ),
        ty: &'{erased} [nfa::thompson::nfa::State],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/backtrack.rs:827:26: 827:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/backtrack.rs:827:9: 827:68 (#0),
                },
            ),
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/backtrack.rs:827:26: 827:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/backtrack.rs:827:9: 827:50 (#0),
            scope: scope[0],
        },
    },
]