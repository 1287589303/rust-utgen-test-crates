[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = &((*_1).0: meta::strategy::Core),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:1304:9: 1304:33 (#0),
                    scope: scope[0],
                },
                kind: _0 = <meta::strategy::Core as meta::strategy::Strategy>::create_cache(move _2) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:1305:6: 1305:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:1303:5: 1305:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: meta::regex::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1303:31: 1303:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} meta::strategy::ReverseSuffix,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1303:21: 1303:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/strategy.rs:1304:9: 1304:33 (#0),
                },
            ),
        ),
        ty: &'{erased} meta::strategy::Core,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:1304:9: 1304:18 (#0),
            scope: scope[0],
        },
    },
]