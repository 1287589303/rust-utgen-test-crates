[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &((*_1).4: std::collections::HashMap<util::determinize::state::State, util::primitives::StateID>),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/determinize.rs:509:50: 509:68 (#0),
                    scope: scope[1],
                },
                kind: _7 = util::determinize::state::StateBuilderNFA::as_bytes(move _8) -> [return: bb1, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = &(*_7),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/determinize.rs:509:35: 509:69 (#0),
                    scope: scope[1],
                },
                kind: _4 = std::collections::HashMap::<util::determinize::state::State, util::primitives::StateID>::get::<[u8]>(move _5, move _6) -> [return: bb2, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            PlaceMention(_4),
            _9 = discriminant(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/determinize.rs:509:16: 509:32 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _9) -> [1: bb3, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/determinize.rs:509:16: 509:32 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = (*((_4 as Some).0: &util::primitives::StateID)),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &mut (*_1),
            StorageLive(_14),
            _14 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/determinize.rs:512:13: 512:44 (#0),
                    scope: scope[1],
                },
                kind: _12 = dfa::determinize::Runner::<'_>::put_state_builder(move _13, move _14) -> [return: bb5, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_12),
            StorageLive(_15),
            StorageLive(_16),
            _16 = _10,
            _15 = (move _16, const false),
            StorageDead(_16),
            _0 = core::result::Result::<(util::primitives::StateID, bool), dfa::dense::BuildError>::Ok(move _15),
            StorageDead(_15),
            StorageDead(_10),
            StorageDead(_7),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/determinize.rs:516:5: 516:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb9, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = const (),
            StorageDead(_7),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &mut (*_1),
            StorageLive(_19),
            _19 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/determinize.rs:515:9: 515:32 (#0),
                    scope: scope[0],
                },
                kind: _17 = dfa::determinize::Runner::<'_>::add_state(move _18, move _19) -> [return: bb7, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            StorageLive(_20),
            _20 = {closure@regex-automata/src/dfa/determinize.rs:515:37: 515:42},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/determinize.rs:515:9: 515:55 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::result::Result::<util::primitives::StateID, dfa::dense::BuildError>::map::<(util::primitives::StateID, bool), {closure@regex-automata/src/dfa/determinize.rs:515:37: 515:42}>(move _17, move _20) -> [return: bb8, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/determinize.rs:516:5: 516:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb9, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/determinize.rs:516:6: 516:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/determinize.rs:515:54: 515:55 (#0),
                    scope: scope[0],
                },
                kind: drop(_17) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/determinize.rs:515:31: 515:32 (#0),
                    scope: scope[0],
                },
                kind: drop(_19) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/determinize.rs:512:43: 512:44 (#0),
                    scope: scope[1],
                },
                kind: drop(_14) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/determinize.rs:516:5: 516:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/determinize.rs:505:5: 516:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(util::primitives::StateID, bool), dfa::dense::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/determinize.rs:508:10: 508:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut dfa::determinize::Runner<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/determinize.rs:506:9: 506:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/dfa/determinize.rs:507:18: 507:33 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/determinize.rs:507:9: 507:16 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/determinize.rs:507:9: 507:16 (#0),
                    },
                ),
            ),
        ),
        ty: util::determinize::state::StateBuilderNFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/determinize.rs:507:9: 507:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/determinize.rs:509:9: 514:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/determinize.rs:509:35: 509:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::collections::HashMap<util::determinize::state::State, util::primitives::StateID, std::hash::RandomState>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/determinize.rs:509:35: 509:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/determinize.rs:509:50: 509:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/determinize.rs:509:50: 509:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::determinize::state::StateBuilderNFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/determinize.rs:509:50: 509:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/determinize.rs:509:16: 509:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                regex-automata/src/dfa/determinize.rs:509:35: 509:69 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/determinize.rs:509:16: 509:32 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/determinize.rs:509:22: 509:31 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/determinize.rs:509:70: 514:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/determinize.rs:512:13: 512:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut dfa::determinize::Runner<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/determinize.rs:512:13: 512:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::determinize::state::StateBuilderNFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/determinize.rs:512:36: 512:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (util::primitives::StateID, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/determinize.rs:513:23: 513:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/determinize.rs:513:24: 513:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/determinize.rs:515:9: 515:55 (#0),
                },
            ),
        ),
        ty: core::result::Result<util::primitives::StateID, dfa::dense::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/determinize.rs:515:9: 515:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/determinize.rs:515:9: 515:55 (#0),
                },
            ),
        ),
        ty: &'{erased} mut dfa::determinize::Runner<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/determinize.rs:515:9: 515:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/determinize.rs:515:9: 515:55 (#0),
                },
            ),
        ),
        ty: util::determinize::state::StateBuilderNFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/determinize.rs:515:24: 515:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/determinize.rs:515:9: 515:55 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1071 ~ regex_automata[00dd]::dfa::determinize::{impl#1}::maybe_add_state::{closure#0}),
            [
                '{erased},
                i32,
                Binder { value: extern "RustCall" fn((util::primitives::StateID,)) -> (util::primitives::StateID, bool), bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/determinize.rs:515:37: 515:54 (#0),
            scope: scope[0],
        },
    },
]