[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = &((*_1).0: core::slice::Iter<'_, core::option::Option<std::sync::Arc<str>>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2495:9: 2495:28 (#0),
                    scope: scope[0],
                },
                kind: _0 = <core::slice::Iter<'_, core::option::Option<std::sync::Arc<str>>> as core::iter::Iterator>::size_hint(move _2) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2496:6: 2496:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2494:5: 2496:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, core::option::Option<usize>),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2494:28: 2494:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} util::captures::GroupInfoPatternNames<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2494:18: 2494:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:2495:9: 2495:28 (#0),
                },
            ),
        ),
        ty: &'{erased} core::slice::Iter<'{erased}, core::option::Option<std::sync::Arc<str, std::alloc::Global>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2495:9: 2495:16 (#0),
            scope: scope[0],
        },
    },
]