[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &mut ((*_1).0: std::vec::Vec<nfa::thompson::nfa::State>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/nfa.rs:1448:22: 1448:38 (#4397),
                    scope: scope[0],
                },
                kind: _4 = <&mut std::vec::Vec<nfa::thompson::nfa::State> as core::iter::IntoIterator>::into_iter(move _5) -> [return: bb1, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            PlaceMention(_4),
            StorageLive(_6),
            _6 = move _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/nfa.rs:1448:9: 1450:10 (#4396),
                    scope: scope[1],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/nfa.rs:1448:9: 1450:10 (#4396),
                    scope: scope[1],
                },
                kind: falseUnwind -> [real: bb3, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &mut _6,
            _10 = &mut (*_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/nfa.rs:1448:22: 1448:38 (#4397),
                    scope: scope[1],
                },
                kind: _9 = <core::slice::IterMut<'_, nfa::thompson::nfa::State> as core::iter::Iterator>::next(move _10) -> [return: bb4, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            PlaceMention(_9),
            _12 = discriminant(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/nfa.rs:1448:22: 1448:38 (#4397),
                    scope: scope[1],
                },
                kind: switchInt(move _12) -> [0: bb6, 1: bb7, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/nfa.rs:1448:22: 1448:38 (#4397),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/nfa.rs:1448:9: 1450:10 (#4396),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb8, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            _14 = move ((_9 as Some).0: &mut nfa::thompson::nfa::State),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &mut (*_14),
            StorageLive(_17),
            _17 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/nfa.rs:1449:13: 1449:36 (#0),
                    scope: scope[2],
                },
                kind: _15 = nfa::thompson::nfa::State::remap(move _16, move _17) -> [return: bb9, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = const (),
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = &(*_2),
            StorageLive(_21),
            _21 = ((*_1).1: util::primitives::StateID),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/nfa.rs:1451:41: 1451:62 (#0),
                    scope: scope[0],
                },
                kind: _19 = <[util::primitives::StateID] as core::ops::Index<util::primitives::StateID>>::index(move _20, move _21) -> [return: bb10, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_15),
            _8 = const (),
            StorageDead(_14),
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_8),
            _7 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/nfa.rs:1448:9: 1450:10 (#4396),
                    scope: scope[1],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _18 = (*_19),
            StorageDead(_21),
            StorageDead(_20),
            ((*_1).1: util::primitives::StateID) = move _18,
            StorageDead(_18),
            StorageDead(_19),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            _24 = &(*_2),
            StorageLive(_25),
            _25 = ((*_1).2: util::primitives::StateID),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/nfa.rs:1452:43: 1452:66 (#0),
                    scope: scope[0],
                },
                kind: _23 = <[util::primitives::StateID] as core::ops::Index<util::primitives::StateID>>::index(move _24, move _25) -> [return: bb11, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _22 = (*_23),
            StorageDead(_25),
            StorageDead(_24),
            ((*_1).2: util::primitives::StateID) = move _22,
            StorageDead(_22),
            StorageDead(_23),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            _30 = &mut ((*_1).3: std::vec::Vec<util::primitives::StateID>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/nfa.rs:1453:19: 1453:48 (#0),
                    scope: scope[0],
                },
                kind: _29 = <std::vec::Vec<util::primitives::StateID> as core::ops::DerefMut>::deref_mut(move _30) -> [return: bb12, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _28 = &mut (*_29),
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/nfa.rs:1453:19: 1453:48 (#0),
                    scope: scope[0],
                },
                kind: _27 = core::slice::<impl [util::primitives::StateID]>::iter_mut(move _28) -> [return: bb13, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/nfa.rs:1453:19: 1453:48 (#4400),
                    scope: scope[0],
                },
                kind: _26 = <core::slice::IterMut<'_, util::primitives::StateID> as core::iter::IntoIterator>::into_iter(move _27) -> [return: bb14, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            PlaceMention(_26),
            StorageLive(_31),
            _31 = move _26,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/nfa.rs:1453:9: 1455:10 (#4399),
                    scope: scope[3],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/nfa.rs:1453:9: 1455:10 (#4399),
                    scope: scope[3],
                },
                kind: falseUnwind -> [real: bb16, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_32),
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            _35 = &mut _31,
            _34 = &mut (*_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/nfa.rs:1453:19: 1453:48 (#4400),
                    scope: scope[3],
                },
                kind: _33 = <core::slice::IterMut<'_, util::primitives::StateID> as core::iter::Iterator>::next(move _34) -> [return: bb17, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            PlaceMention(_33),
            _36 = discriminant(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/nfa.rs:1453:19: 1453:48 (#4400),
                    scope: scope[3],
                },
                kind: switchInt(move _36) -> [0: bb19, 1: bb20, otherwise: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/nfa.rs:1453:19: 1453:48 (#4400),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/nfa.rs:1453:9: 1455:10 (#4399),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb21, imaginary: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_38),
            _38 = move ((_33 as Some).0: &mut util::primitives::StateID),
            StorageLive(_39),
            StorageLive(_40),
            StorageLive(_41),
            _41 = &(*_2),
            StorageLive(_42),
            _42 = (*_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/nfa.rs:1454:29: 1454:34 (#0),
                    scope: scope[4],
                },
                kind: _40 = <[util::primitives::StateID] as core::ops::Index<util::primitives::StateID>>::index(move _41, move _42) -> [return: bb22, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
            StorageDead(_35),
            StorageDead(_33),
            StorageDead(_32),
            StorageDead(_31),
            StorageDead(_29),
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/nfa.rs:1456:6: 1456:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _39 = (*_40),
            StorageDead(_42),
            StorageDead(_41),
            (*_38) = move _39,
            StorageDead(_39),
            StorageDead(_40),
            _32 = const (),
            StorageDead(_38),
            StorageDead(_35),
            StorageDead(_33),
            StorageDead(_32),
            _7 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/nfa.rs:1453:9: 1455:10 (#4399),
                    scope: scope[3],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/nfa.rs:1447:5: 1456:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1447:59: 1447:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut nfa::thompson::nfa::Inner,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1447:25: 1447:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/nfa/thompson/nfa.rs:1447:48: 1447:58 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/nfa.rs:1447:36: 1447:46 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/nfa.rs:1447:36: 1447:46 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [util::primitives::StateID],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1447:36: 1447:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1448:9: 1450:10 (#4396),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::IterMut<'{erased}, nfa::thompson::nfa::State>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1448:22: 1448:38 (#4397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<nfa::thompson::nfa::State, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1448:22: 1448:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                regex-automata/src/nfa/thompson/nfa.rs:1448:22: 1448:38 (#4397),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/nfa.rs:1448:22: 1448:38 (#4397),
                    },
                ),
            ),
        ),
        ty: core::slice::IterMut<'{erased}, nfa::thompson::nfa::State>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1448:22: 1448:38 (#4397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1447:5: 1456:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1448:22: 1448:38 (#4397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} mut nfa::thompson::nfa::State>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1448:22: 1448:38 (#4397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::IterMut<'{erased}, nfa::thompson::nfa::State>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1448:22: 1448:38 (#4397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::IterMut<'{erased}, nfa::thompson::nfa::State>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1448:22: 1448:38 (#4397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1448:9: 1450:10 (#4396),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1448:9: 1450:10 (#4396),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _9,
                                ),
                                regex-automata/src/nfa/thompson/nfa.rs:1448:22: 1448:38 (#4397),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/nfa.rs:1448:13: 1448:18 (#4398),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut nfa::thompson::nfa::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1448:13: 1448:18 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1449:13: 1449:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut nfa::thompson::nfa::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1449:13: 1449:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [util::primitives::StateID],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1449:25: 1449:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1451:31: 1451:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1451:41: 1451:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [util::primitives::StateID],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1451:31: 1451:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1451:42: 1451:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1452:33: 1452:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1452:43: 1452:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [util::primitives::StateID],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1452:33: 1452:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1452:44: 1452:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/nfa.rs:1453:9: 1455:10 (#4399),
                },
            ),
        ),
        ty: core::slice::IterMut<'{erased}, util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1453:19: 1453:48 (#4400),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/nfa.rs:1453:9: 1455:10 (#4399),
                },
            ),
        ),
        ty: core::slice::IterMut<'{erased}, util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1453:19: 1453:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/nfa.rs:1453:9: 1455:10 (#4399),
                },
            ),
        ),
        ty: &'{erased} mut [util::primitives::StateID],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1453:19: 1453:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/nfa.rs:1453:9: 1455:10 (#4399),
                },
            ),
        ),
        ty: &'{erased} mut [util::primitives::StateID],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1453:19: 1453:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/nfa.rs:1453:9: 1455:10 (#4399),
                },
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1453:19: 1453:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _26,
                                ),
                                regex-automata/src/nfa/thompson/nfa.rs:1453:19: 1453:48 (#4400),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/nfa.rs:1453:19: 1453:48 (#4400),
                    },
                ),
            ),
        ),
        ty: core::slice::IterMut<'{erased}, util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1453:19: 1453:48 (#4400),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1453:19: 1453:48 (#4400),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} mut util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1453:19: 1453:48 (#4400),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::IterMut<'{erased}, util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1453:19: 1453:48 (#4400),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::IterMut<'{erased}, util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1453:19: 1453:48 (#4400),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1453:9: 1455:10 (#4399),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1453:9: 1455:10 (#4399),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _33,
                                ),
                                regex-automata/src/nfa/thompson/nfa.rs:1453:19: 1453:48 (#4400),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/nfa.rs:1453:13: 1453:15 (#4401),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1453:13: 1453:15 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1454:19: 1454:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1454:29: 1454:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [util::primitives::StateID],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1454:19: 1454:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:1454:30: 1454:33 (#0),
            scope: scope[0],
        },
    },
]