[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &_2,
            StorageLive(_6),
            StorageLive(_7),
            _7 = const nfa::thompson::range_trie::FINAL,
            _6 = &_7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:467:12: 467:27 (#0),
                    scope: scope[0],
                },
                kind: _4 = <util::primitives::StateID as core::cmp::PartialEq>::eq(move _5, move _6) -> [return: bb1, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:467:12: 467:27 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_5),
            _0 = const nfa::thompson::range_trie::FINAL,
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:498:6: 498:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb39,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_5),
            _3 = const (),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &mut ((*_1).4: std::vec::Vec<nfa::thompson::range_trie::NextDupe>),
            _10 = &mut (*_11),
            StorageLive(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9: 44:32 (#1461),
                    scope: scope[0],
                },
                kind: _12 = std::vec::Vec::<nfa::thompson::range_trie::NextDupe>::new() -> [return: bb4, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:471:25: 471:67 (#0),
                    scope: scope[0],
                },
                kind: _9 = core::mem::replace::<std::vec::Vec<nfa::thompson::range_trie::NextDupe>>(move _10, move _12) -> [return: bb5, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_10),
            FakeRead(ForLet(None), _9),
            StorageDead(_11),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &mut _9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:472:9: 472:22 (#0),
                    scope: scope[1],
                },
                kind: _13 = std::vec::Vec::<nfa::thompson::range_trie::NextDupe>::clear(move _14) -> [return: bb6, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:474:22: 474:38 (#0),
                    scope: scope[1],
                },
                kind: _15 = nfa::thompson::range_trie::RangeTrie::add_empty(move _16) -> [return: bb7, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            FakeRead(ForLet(None), _15),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &mut _9,
            StorageLive(_19),
            StorageLive(_20),
            _20 = _2,
            StorageLive(_21),
            _21 = _15,
            _19 = nfa::thompson::range_trie::NextDupe { old_id: move _20, new_id: move _21 },
            StorageDead(_21),
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:477:9: 477:48 (#0),
                    scope: scope[2],
                },
                kind: _17 = std::vec::Vec::<nfa::thompson::range_trie::NextDupe>::push(move _18, move _19) -> [return: bb8, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_17),
            StorageLive(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:478:9: 495:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:478:9: 495:10 (#0),
                    scope: scope[2],
                },
                kind: falseUnwind -> [real: bb10, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_24),
            StorageLive(_25),
            _25 = &mut _9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:478:55: 478:66 (#0),
                    scope: scope[3],
                },
                kind: _24 = std::vec::Vec::<nfa::thompson::range_trie::NextDupe>::pop(move _25) -> [return: bb11, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            PlaceMention(_24),
            _26 = discriminant(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:478:19: 478:52 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _26) -> [1: bb12, otherwise: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:478:19: 478:52 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb13, imaginary: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_27),
            _27 = (((_24 as Some).0: nfa::thompson::range_trie::NextDupe).0: util::primitives::StateID),
            StorageLive(_28),
            _28 = (((_24 as Some).0: nfa::thompson::range_trie::NextDupe).1: util::primitives::StateID),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            StorageLive(_34),
            _34 = &(*_1),
            StorageLive(_35),
            _35 = _27,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:479:25: 479:43 (#0),
                    scope: scope[3],
                },
                kind: _33 = nfa::thompson::range_trie::RangeTrie::state(move _34, move _35) -> [return: bb14, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            StorageDead(_34),
            _32 = &((*_33).0: std::vec::Vec<nfa::thompson::range_trie::Transition>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:479:25: 479:61 (#0),
                    scope: scope[3],
                },
                kind: _31 = std::vec::Vec::<nfa::thompson::range_trie::Transition>::len(move _32) -> [return: bb15, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            _30 = core::ops::Range::<usize> { start: const 0_usize, end: move _31 },
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:479:22: 479:61 (#4534),
                    scope: scope[3],
                },
                kind: _29 = <core::ops::Range<usize> as core::iter::IntoIterator>::into_iter(move _30) -> [return: bb16, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            PlaceMention(_29),
            StorageLive(_36),
            _36 = move _29,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:479:13: 494:14 (#4533),
                    scope: scope[4],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:479:13: 494:14 (#4533),
                    scope: scope[4],
                },
                kind: falseUnwind -> [real: bb18, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_37),
            StorageLive(_38),
            StorageLive(_39),
            StorageLive(_40),
            _40 = &mut _36,
            _39 = &mut (*_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:479:22: 479:61 (#4534),
                    scope: scope[4],
                },
                kind: _38 = <core::ops::Range<usize> as core::iter::Iterator>::next(move _39) -> [return: bb19, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            PlaceMention(_38),
            _41 = discriminant(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:479:22: 479:61 (#4534),
                    scope: scope[4],
                },
                kind: switchInt(move _41) -> [0: bb21, 1: bb22, otherwise: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:479:22: 479:61 (#4534),
                    scope: scope[4],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:479:13: 494:14 (#4533),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb23, imaginary: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_43),
            _43 = ((_38 as Some).0: usize),
            StorageLive(_44),
            StorageLive(_45),
            StorageLive(_46),
            StorageLive(_47),
            StorageLive(_48),
            StorageLive(_49),
            _49 = &(*_1),
            StorageLive(_50),
            _50 = _27,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:480:25: 480:43 (#0),
                    scope: scope[5],
                },
                kind: _48 = nfa::thompson::range_trie::RangeTrie::state(move _49, move _50) -> [return: bb24, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _23 = const (),
            StorageDead(_40),
            StorageDead(_38),
            StorageDead(_37),
            StorageDead(_36),
            StorageDead(_33),
            StorageDead(_29),
            StorageDead(_28),
            StorageDead(_27),
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:478:9: 495:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            StorageDead(_49),
            _47 = &((*_48).0: std::vec::Vec<nfa::thompson::range_trie::Transition>),
            StorageLive(_51),
            _51 = _43,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:480:55: 480:58 (#0),
                    scope: scope[5],
                },
                kind: _46 = <std::vec::Vec<nfa::thompson::range_trie::Transition> as core::ops::Index<usize>>::index(move _47, move _51) -> [return: bb25, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _45 = &(*_46),
            StorageDead(_51),
            StorageDead(_47),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:480:25: 480:66 (#0),
                    scope: scope[5],
                },
                kind: _44 = <nfa::thompson::range_trie::Transition as core::clone::Clone>::clone(move _45) -> [return: bb26, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            FakeRead(ForLet(None), _44),
            StorageDead(_48),
            StorageDead(_46),
            StorageLive(_52),
            StorageLive(_53),
            StorageLive(_54),
            _54 = &(_44.1: util::primitives::StateID),
            StorageLive(_55),
            StorageLive(_56),
            _56 = const nfa::thompson::range_trie::FINAL,
            _55 = &_56,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:481:20: 481:38 (#0),
                    scope: scope[6],
                },
                kind: _53 = <util::primitives::StateID as core::cmp::PartialEq>::eq(move _54, move _55) -> [return: bb27, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:481:20: 481:38 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _53) -> [0: bb30, otherwise: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
            StorageDead(_55),
            StorageDead(_54),
            StorageLive(_58),
            StorageLive(_59),
            _59 = &mut (*_1),
            StorageLive(_60),
            _60 = _28,
            StorageLive(_61),
            _61 = (_44.0: regex_syntax::utf8::Utf8Range),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:484:21: 484:64 (#0),
                    scope: scope[6],
                },
                kind: _58 = nfa::thompson::range_trie::RangeTrie::add_transition(move _59, move _60, move _61, const nfa::thompson::range_trie::FINAL) -> [return: bb29, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_61),
            StorageDead(_60),
            StorageDead(_59),
            StorageDead(_58),
            StorageDead(_53),
            StorageDead(_52),
            StorageDead(_44),
            StorageDead(_43),
            StorageDead(_40),
            StorageDead(_38),
            StorageDead(_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[4],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
            StorageDead(_55),
            StorageDead(_54),
            _52 = const (),
            StorageDead(_53),
            StorageDead(_52),
            StorageLive(_62),
            StorageLive(_63),
            _63 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:488:36: 488:52 (#0),
                    scope: scope[6],
                },
                kind: _62 = nfa::thompson::range_trie::RangeTrie::add_empty(move _63) -> [return: bb31, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
            FakeRead(ForLet(None), _62),
            StorageLive(_64),
            StorageLive(_65),
            _65 = &mut (*_1),
            StorageLive(_66),
            _66 = _28,
            StorageLive(_67),
            _67 = (_44.0: regex_syntax::utf8::Utf8Range),
            StorageLive(_68),
            _68 = _62,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:489:17: 489:67 (#0),
                    scope: scope[7],
                },
                kind: _64 = nfa::thompson::range_trie::RangeTrie::add_transition(move _65, move _66, move _67, move _68) -> [return: bb32, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_68),
            StorageDead(_67),
            StorageDead(_66),
            StorageDead(_65),
            StorageDead(_64),
            StorageLive(_69),
            StorageLive(_70),
            _70 = &mut _9,
            StorageLive(_71),
            StorageLive(_72),
            _72 = (_44.1: util::primitives::StateID),
            StorageLive(_73),
            _73 = _62,
            _71 = nfa::thompson::range_trie::NextDupe { old_id: move _72, new_id: move _73 },
            StorageDead(_73),
            StorageDead(_72),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:490:17: 493:19 (#0),
                    scope: scope[7],
                },
                kind: _69 = std::vec::Vec::<nfa::thompson::range_trie::NextDupe>::push(move _70, move _71) -> [return: bb33, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
            StorageDead(_70),
            StorageDead(_69),
            _37 = const (),
            StorageDead(_62),
            StorageDead(_44),
            StorageDead(_43),
            StorageDead(_40),
            StorageDead(_38),
            StorageDead(_37),
            _23 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:479:13: 494:14 (#4533),
                    scope: scope[4],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_75),
            _22 = const (),
            StorageDead(_75),
            StorageDead(_24),
            StorageDead(_22),
            StorageLive(_77),
            _77 = move _9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:496:9: 496:24 (#0),
                    scope: scope[2],
                },
                kind: drop(((*_1).4: std::vec::Vec<nfa::thompson::range_trie::NextDupe>)) -> [return: bb35, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).4: std::vec::Vec<nfa::thompson::range_trie::NextDupe>) = move _77,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:496:31: 496:32 (#0),
                    scope: scope[2],
                },
                kind: drop(_77) -> [return: bb37, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).4: std::vec::Vec<nfa::thompson::range_trie::NextDupe>) = move _77,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:496:31: 496:32 (#0),
                    scope: scope[2],
                },
                kind: drop(_77) -> [return: bb40, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_77),
            _0 = _15,
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:498:5: 498:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb38, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:498:6: 498:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb39,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:498:6: 498:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:498:5: 498:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb42, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:471:66: 471:67 (#0),
                    scope: scope[0],
                },
                kind: drop(_12) -> [return: bb42, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:466:5: 498:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:466:49: 466:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut nfa::thompson::range_trie::RangeTrie,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:466:18: 466:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/nfa/thompson/range_trie.rs:466:37: 466:44 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/range_trie.rs:466:29: 466:35 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/range_trie.rs:466:29: 466:35 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:466:29: 466:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:467:9: 469:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:467:12: 467:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:467:12: 467:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:467:22: 467:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:2976 ~ regex_automata[00dd]::nfa::thompson::range_trie::FINAL),
            },
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:467:22: 467:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:467:28: 469:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/range_trie.rs:471:25: 471:67 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/range_trie.rs:471:13: 471:22 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<nfa::thompson::range_trie::NextDupe, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:471:13: 471:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<nfa::thompson::range_trie::NextDupe, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:471:38: 471:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<nfa::thompson::range_trie::NextDupe, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:471:38: 471:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::Vec<nfa::thompson::range_trie::NextDupe, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9: 44:32 (#1461),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:472:9: 472:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<nfa::thompson::range_trie::NextDupe, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:472:9: 472:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/range_trie.rs:474:22: 474:38 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/range_trie.rs:474:13: 474:19 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:474:13: 474:19 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut nfa::thompson::range_trie::RangeTrie,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:474:22: 474:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:477:9: 477:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<nfa::thompson::range_trie::NextDupe, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:477:9: 477:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::thompson::range_trie::NextDupe,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:477:20: 477:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:477:31: 477:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:477:39: 477:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:478:9: 495:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:466:5: 498:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:478:9: 495:10 (#4532),
                },
            ),
        ),
        ty: core::option::Option<nfa::thompson::range_trie::NextDupe>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:478:55: 478:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:478:9: 495:10 (#4532),
                },
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<nfa::thompson::range_trie::NextDupe, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:478:55: 478:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:478:19: 478:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _24,
                                ),
                                regex-automata/src/nfa/thompson/range_trie.rs:478:55: 478:66 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/range_trie.rs:478:19: 478:52 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:478:35: 478:41 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _24,
                                ),
                                regex-automata/src/nfa/thompson/range_trie.rs:478:55: 478:66 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/range_trie.rs:478:19: 478:52 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:478:43: 478:49 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:479:13: 494:14 (#4533),
                },
            ),
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:479:22: 479:61 (#4534),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:479:13: 494:14 (#4533),
                },
            ),
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:479:22: 479:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:479:25: 479:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:479:13: 494:14 (#4533),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<nfa::thompson::range_trie::Transition, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:479:25: 479:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:479:13: 494:14 (#4533),
                },
            ),
        ),
        ty: &'{erased} nfa::thompson::range_trie::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:479:25: 479:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:479:13: 494:14 (#4533),
                },
            ),
        ),
        ty: &'{erased} nfa::thompson::range_trie::RangeTrie,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:479:25: 479:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:479:13: 494:14 (#4533),
                },
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:479:36: 479:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _29,
                                ),
                                regex-automata/src/nfa/thompson/range_trie.rs:479:22: 479:61 (#4534),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/range_trie.rs:479:22: 479:61 (#4534),
                    },
                ),
            ),
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:479:22: 479:61 (#4534),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:479:22: 479:61 (#4534),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:479:22: 479:61 (#4534),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:479:22: 479:61 (#4534),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:479:22: 479:61 (#4534),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:479:13: 494:14 (#4533),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:479:13: 494:14 (#4533),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _38,
                                ),
                                regex-automata/src/nfa/thompson/range_trie.rs:479:22: 479:61 (#4534),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/range_trie.rs:479:17: 479:18 (#4535),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:479:17: 479:18 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/range_trie.rs:480:25: 480:66 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/range_trie.rs:480:21: 480:22 (#0),
                    },
                ),
            ),
        ),
        ty: nfa::thompson::range_trie::Transition,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:480:21: 480:22 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::range_trie::Transition,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:480:25: 480:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::range_trie::Transition,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:480:55: 480:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<nfa::thompson::range_trie::Transition, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:480:25: 480:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::range_trie::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:480:25: 480:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::range_trie::RangeTrie,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:480:25: 480:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:480:36: 480:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:480:56: 480:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:481:17: 486:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:481:20: 481:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:481:20: 481:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:481:33: 481:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:2976 ~ regex_automata[00dd]::nfa::thompson::range_trie::FINAL),
            },
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:481:33: 481:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:481:39: 486:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:484:21: 484:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut nfa::thompson::range_trie::RangeTrie,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:484:21: 484:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:484:41: 484:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regex_syntax::utf8::Utf8Range,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:484:49: 484:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/range_trie.rs:488:36: 488:52 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/range_trie.rs:488:21: 488:33 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:488:21: 488:33 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut nfa::thompson::range_trie::RangeTrie,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:488:36: 488:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:489:17: 489:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut nfa::thompson::range_trie::RangeTrie,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:489:17: 489:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:489:37: 489:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regex_syntax::utf8::Utf8Range,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:489:45: 489:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:489:54: 489:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:490:17: 493:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<nfa::thompson::range_trie::NextDupe, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:490:17: 490:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::thompson::range_trie::NextDupe,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:490:28: 493:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:491:29: 491:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:492:29: 492:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:478:9: 495:10 (#4532),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:478:9: 495:10 (#4532),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:478:9: 495:10 (#4532),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:478:9: 495:10 (#4532),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::Vec<nfa::thompson::range_trie::NextDupe, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:496:27: 496:32 (#0),
            scope: scope[0],
        },
    },
]