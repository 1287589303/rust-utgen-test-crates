[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:170:19: 170:38 (#0),
                    scope: scope[0],
                },
                kind: _5 = nfa::thompson::builder::Builder::add_empty(move _6) -> [return: bb1, unwind: bb129],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:170:19: 170:39 (#4331),
                    scope: scope[0],
                },
                kind: _4 = <core::result::Result<util::primitives::StateID, nfa::thompson::error::BuildError> as core::ops::Try>::branch(move _5) -> [return: bb2, unwind: bb128],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            PlaceMention(_4),
            _7 = discriminant(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:170:19: 170:39 (#4331),
                    scope: scope[0],
                },
                kind: switchInt(move _7) -> [0: bb5, 1: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:170:19: 170:39 (#4331),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:170:38: 170:39 (#4332),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            _11 = ((_4 as Continue).0: util::primitives::StateID),
            _3 = _11,
            StorageDead(_11),
            FakeRead(ForLet(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:170:39: 170:40 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb8, unwind: bb129],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            _8 = move ((_4 as Break).0: core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>),
            StorageLive(_10),
            _10 = move _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:170:19: 170:39 (#4331),
                    scope: scope[3],
                },
                kind: _0 = <core::result::Result<nfa::thompson::compiler::ThompsonRef, nfa::thompson::error::BuildError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>>>::from_residual(move _10) -> [return: bb7, unwind: bb125],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:170:38: 170:39 (#4332),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb100, unwind: bb127],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageLive(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9: 44:32 (#1277),
                    scope: scope[1],
                },
                kind: _12 = std::vec::Vec::<nfa::thompson::literal_trie::Frame<'_>>::new() -> [return: bb9, unwind: bb129],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &((*_1).0: std::vec::Vec<nfa::thompson::literal_trie::State>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:172:44: 172:59 (#0),
                    scope: scope[6],
                },
                kind: _16 = <std::vec::Vec<nfa::thompson::literal_trie::State> as core::ops::Index<util::primitives::StateID>>::index(move _17, const util::primitives::StateID::ZERO) -> [return: bb10, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            _15 = &(*_16),
            _14 = &(*_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:172:21: 172:60 (#0),
                    scope: scope[6],
                },
                kind: _13 = nfa::thompson::literal_trie::Frame::<'_>::new(move _14) -> [return: bb11, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            FakeRead(ForLet(None), _13),
            StorageDead(_16),
            StorageDead(_15),
            StorageLive(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:173:9: 235:10 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:173:9: 235:10 (#0),
                    scope: scope[7],
                },
                kind: falseUnwind -> [real: bb13, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            _22 = &mut (_13.1: core::slice::Iter<'_, nfa::thompson::literal_trie::Transition>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:174:30: 174:50 (#0),
                    scope: scope[8],
                },
                kind: _21 = <core::slice::Iter<'_, nfa::thompson::literal_trie::Transition> as core::iter::Iterator>::next(move _22) -> [return: bb14, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            PlaceMention(_21),
            _23 = discriminant(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:174:20: 174:27 (#0),
                    scope: scope[8],
                },
                kind: switchInt(move _23) -> [1: bb15, otherwise: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:174:20: 174:27 (#0),
                    scope: scope[8],
                },
                kind: falseEdge -> [real: bb16, imaginary: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_24),
            _24 = ((_21 as Some).0: &nfa::thompson::literal_trie::Transition),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            _30 = &((*_1).0: std::vec::Vec<nfa::thompson::literal_trie::State>),
            StorageLive(_31),
            _31 = ((*_24).1: util::primitives::StateID),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:175:31: 175:39 (#0),
                    scope: scope[8],
                },
                kind: _29 = <std::vec::Vec<nfa::thompson::literal_trie::State> as core::ops::Index<util::primitives::StateID>>::index(move _30, move _31) -> [return: bb17, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _28 = &(*_29),
            StorageDead(_31),
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:175:20: 175:49 (#0),
                    scope: scope[8],
                },
                kind: _27 = nfa::thompson::literal_trie::State::is_leaf(move _28) -> [return: bb18, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:175:20: 175:49 (#0),
                    scope: scope[8],
                },
                kind: switchInt(move _27) -> [0: bb21, otherwise: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_28),
            StorageLive(_32),
            StorageLive(_33),
            _33 = &mut (_13.3: std::vec::Vec<nfa::thompson::nfa::Transition>),
            StorageLive(_34),
            StorageLive(_35),
            _35 = ((*_24).0: u8),
            StorageLive(_36),
            _36 = ((*_24).0: u8),
            StorageLive(_37),
            _37 = _3,
            _34 = nfa::thompson::nfa::Transition { start: move _35, end: move _36, next: move _37 },
            StorageDead(_37),
            StorageDead(_36),
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:176:21: 180:23 (#0),
                    scope: scope[8],
                },
                kind: _32 = std::vec::Vec::<nfa::thompson::nfa::Transition>::push(move _33, move _34) -> [return: bb20, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_33),
            StorageDead(_32),
            _26 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:175:17: 193:18 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_28),
            StorageLive(_38),
            StorageLive(_39),
            _39 = &mut (_13.3: std::vec::Vec<nfa::thompson::nfa::Transition>),
            StorageLive(_40),
            StorageLive(_41),
            _41 = ((*_24).0: u8),
            StorageLive(_42),
            _42 = ((*_24).0: u8),
            _40 = nfa::thompson::nfa::Transition { start: move _41, end: move _42, next: const util::primitives::StateID::ZERO },
            StorageDead(_42),
            StorageDead(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:182:21: 190:23 (#0),
                    scope: scope[8],
                },
                kind: _38 = std::vec::Vec::<nfa::thompson::nfa::Transition>::push(move _39, move _40) -> [return: bb22, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageDead(_39),
            StorageDead(_38),
            StorageLive(_43),
            StorageLive(_44),
            _44 = &mut _12,
            StorageLive(_45),
            _45 = move _13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:191:21: 191:34 (#0),
                    scope: scope[8],
                },
                kind: _43 = std::vec::Vec::<nfa::thompson::literal_trie::Frame<'_>>::push(move _44, move _45) -> [return: bb23, unwind: bb122],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            StorageDead(_44),
            StorageDead(_43),
            StorageLive(_46),
            StorageLive(_47),
            StorageLive(_48),
            StorageLive(_49),
            StorageLive(_50),
            _50 = &((*_1).0: std::vec::Vec<nfa::thompson::literal_trie::State>),
            StorageLive(_51),
            _51 = ((*_24).1: util::primitives::StateID),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:192:48: 192:56 (#0),
                    scope: scope[8],
                },
                kind: _49 = <std::vec::Vec<nfa::thompson::literal_trie::State> as core::ops::Index<util::primitives::StateID>>::index(move _50, move _51) -> [return: bb24, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
            StorageDead(_50),
            _48 = &(*_49),
            _47 = &(*_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:192:25: 192:57 (#0),
                    scope: scope[8],
                },
                kind: _46 = nfa::thompson::literal_trie::Frame::<'_>::new(move _47) -> [return: bb25, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:192:21: 192:22 (#0),
                    scope: scope[8],
                },
                kind: drop(_13) -> [return: bb26, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _13 = move _46,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:192:56: 192:57 (#0),
                    scope: scope[8],
                },
                kind: drop(_46) -> [return: bb28, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _13 = move _46,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:192:56: 192:57 (#0),
                    scope: scope[8],
                },
                kind: drop(_46) -> [return: bb123, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
            StorageDead(_49),
            StorageDead(_48),
            _26 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:175:17: 193:18 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_26),
            StorageDead(_24),
            StorageDead(_21),
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _20 = const (),
            StorageDead(_21),
            StorageDead(_20),
            StorageLive(_52),
            StorageLive(_53),
            StorageLive(_54),
            _54 = &(_13.3: std::vec::Vec<nfa::thompson::nfa::Transition>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:199:17: 199:36 (#0),
                    scope: scope[7],
                },
                kind: _53 = std::vec::Vec::<nfa::thompson::nfa::Transition>::is_empty(move _54) -> [return: bb31, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:199:17: 199:36 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _53) -> [0: bb33, otherwise: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            _52 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:199:13: 207:14 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb60,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            StorageLive(_55),
            StorageLive(_56),
            StorageLive(_57),
            StorageLive(_58),
            _58 = &(_13.3: std::vec::Vec<nfa::thompson::nfa::Transition>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:200:35: 200:49 (#0),
                    scope: scope[7],
                },
                kind: _57 = std::vec::Vec::<nfa::thompson::nfa::Transition>::len(move _58) -> [return: bb34, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
            _56 = Eq(move _57, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:200:35: 200:54 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _56) -> [0: bb46, otherwise: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_57),
            StorageLive(_59),
            StorageLive(_60),
            StorageLive(_61),
            _61 = &mut (*_2),
            StorageLive(_62),
            StorageLive(_63),
            StorageLive(_64),
            _64 = &mut (_13.3: std::vec::Vec<nfa::thompson::nfa::Transition>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:201:39: 201:53 (#0),
                    scope: scope[7],
                },
                kind: _63 = std::vec::Vec::<nfa::thompson::nfa::Transition>::pop(move _64) -> [return: bb36, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:201:39: 201:62 (#0),
                    scope: scope[7],
                },
                kind: _62 = core::option::Option::<nfa::thompson::nfa::Transition>::unwrap(move _63) -> [return: bb37, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:201:21: 201:63 (#0),
                    scope: scope[7],
                },
                kind: _60 = nfa::thompson::builder::Builder::add_range(move _61, move _62) -> [return: bb38, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_62),
            StorageDead(_61),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:201:21: 201:64 (#4336),
                    scope: scope[7],
                },
                kind: _59 = <core::result::Result<util::primitives::StateID, nfa::thompson::error::BuildError> as core::ops::Try>::branch(move _60) -> [return: bb39, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
            PlaceMention(_59),
            _65 = discriminant(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:201:21: 201:64 (#4336),
                    scope: scope[7],
                },
                kind: switchInt(move _65) -> [0: bb42, 1: bb41, otherwise: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:201:21: 201:64 (#4336),
                    scope: scope[7],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:201:63: 201:64 (#4337),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb43, imaginary: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_69),
            _69 = ((_59 as Continue).0: util::primitives::StateID),
            _55 = _69,
            StorageDead(_69),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:202:17: 202:18 (#0),
                    scope: scope[7],
                },
                kind: drop(_59) -> [return: bb45, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_66),
            _66 = move ((_59 as Break).0: core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>),
            StorageLive(_68),
            _68 = move _66,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:201:21: 201:64 (#4336),
                    scope: scope[11],
                },
                kind: _0 = <core::result::Result<nfa::thompson::compiler::ThompsonRef, nfa::thompson::error::BuildError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>>>::from_residual(move _68) -> [return: bb44, unwind: bb118],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_68),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:201:63: 201:64 (#4337),
                    scope: scope[7],
                },
                kind: drop(_66) -> [return: bb94, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:200:32: 205:18 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb58,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_57),
            StorageLive(_70),
            StorageLive(_71),
            StorageLive(_72),
            _72 = &mut (_13.3: std::vec::Vec<nfa::thompson::nfa::Transition>),
            _71 = &mut (*_72),
            StorageLive(_73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9: 44:32 (#1278),
                    scope: scope[7],
                },
                kind: _73 = std::vec::Vec::<nfa::thompson::nfa::Transition>::new() -> [return: bb47, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:203:34: 203:69 (#0),
                    scope: scope[7],
                },
                kind: _70 = core::mem::replace::<std::vec::Vec<nfa::thompson::nfa::Transition>>(move _71, move _73) -> [return: bb48, unwind: bb117],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_73),
            StorageDead(_71),
            FakeRead(ForLet(None), _70),
            StorageDead(_72),
            StorageLive(_74),
            StorageLive(_75),
            StorageLive(_76),
            _76 = &mut (*_2),
            StorageLive(_77),
            _77 = move _70,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:204:21: 204:47 (#0),
                    scope: scope[14],
                },
                kind: _75 = nfa::thompson::builder::Builder::add_sparse(move _76, move _77) -> [return: bb49, unwind: bb115],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_77),
            StorageDead(_76),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:204:21: 204:48 (#4338),
                    scope: scope[14],
                },
                kind: _74 = <core::result::Result<util::primitives::StateID, nfa::thompson::error::BuildError> as core::ops::Try>::branch(move _75) -> [return: bb50, unwind: bb114],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_75),
            PlaceMention(_74),
            _78 = discriminant(_74),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:204:21: 204:48 (#4338),
                    scope: scope[14],
                },
                kind: switchInt(move _78) -> [0: bb53, 1: bb52, otherwise: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _74),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:204:21: 204:48 (#4338),
                    scope: scope[14],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:204:47: 204:48 (#4339),
                    scope: scope[14],
                },
                kind: falseEdge -> [real: bb54, imaginary: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_82),
            _82 = ((_74 as Continue).0: util::primitives::StateID),
            _55 = _82,
            StorageDead(_82),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:205:17: 205:18 (#0),
                    scope: scope[7],
                },
                kind: drop(_70) -> [return: bb56, unwind: bb113],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_79),
            _79 = move ((_74 as Break).0: core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>),
            StorageLive(_81),
            _81 = move _79,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:204:21: 204:48 (#4338),
                    scope: scope[16],
                },
                kind: _0 = <core::result::Result<nfa::thompson::compiler::ThompsonRef, nfa::thompson::error::BuildError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>>>::from_residual(move _81) -> [return: bb55, unwind: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_81),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:204:47: 204:48 (#4339),
                    scope: scope[14],
                },
                kind: drop(_79) -> [return: bb91, unwind: bb112],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_70),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:205:17: 205:18 (#0),
                    scope: scope[7],
                },
                kind: drop(_74) -> [return: bb57, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_74),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:200:32: 205:18 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb58,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
            FakeRead(ForLet(None), _55),
            StorageLive(_83),
            StorageLive(_84),
            _84 = &mut (_13.2: std::vec::Vec<util::primitives::StateID>),
            StorageLive(_85),
            _85 = _55,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:206:17: 206:39 (#0),
                    scope: scope[9],
                },
                kind: _83 = std::vec::Vec::<util::primitives::StateID>::push(move _84, move _85) -> [return: bb59, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_85),
            StorageDead(_84),
            StorageDead(_83),
            _52 = const (),
            StorageDead(_55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:199:13: 207:14 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb60,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_53),
            StorageDead(_52),
            StorageLive(_86),
            StorageLive(_87),
            StorageLive(_88),
            _88 = &mut (_13.0: nfa::thompson::literal_trie::StateChunksIter<'_>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:209:34: 209:49 (#0),
                    scope: scope[19],
                },
                kind: _87 = <nfa::thompson::literal_trie::StateChunksIter<'_> as core::iter::Iterator>::next(move _88) -> [return: bb61, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_88),
            PlaceMention(_87),
            _89 = discriminant(_87),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:209:20: 209:31 (#0),
                    scope: scope[19],
                },
                kind: switchInt(move _89) -> [1: bb62, otherwise: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:209:20: 209:31 (#0),
                    scope: scope[19],
                },
                kind: falseEdge -> [real: bb63, imaginary: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_90),
            _90 = ((_87 as Some).0: &[nfa::thompson::literal_trie::Transition]),
            StorageLive(_92),
            StorageLive(_93),
            _93 = &mut (_13.2: std::vec::Vec<util::primitives::StateID>),
            StorageLive(_94),
            _94 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:213:17: 213:34 (#0),
                    scope: scope[19],
                },
                kind: _92 = std::vec::Vec::<util::primitives::StateID>::push(move _93, move _94) -> [return: bb64, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_94),
            StorageDead(_93),
            StorageDead(_92),
            StorageLive(_95),
            StorageLive(_96),
            _96 = &(*_90),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:215:33: 215:45 (#0),
                    scope: scope[19],
                },
                kind: _95 = core::slice::<impl [nfa::thompson::literal_trie::Transition]>::iter(move _96) -> [return: bb65, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_96),
            (_13.1: core::slice::Iter<'_, nfa::thompson::literal_trie::Transition>) = move _95,
            StorageDead(_95),
            StorageDead(_90),
            StorageDead(_87),
            StorageDead(_86),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _86 = const (),
            StorageDead(_87),
            StorageDead(_86),
            StorageLive(_97),
            StorageLive(_98),
            StorageLive(_99),
            StorageLive(_100),
            _100 = &mut (*_2),
            StorageLive(_101),
            _101 = move (_13.2: std::vec::Vec<util::primitives::StateID>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:222:25: 222:51 (#0),
                    scope: scope[7],
                },
                kind: _99 = nfa::thompson::builder::Builder::add_union(move _100, move _101) -> [return: bb67, unwind: bb109],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_101),
            StorageDead(_100),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:222:25: 222:52 (#4340),
                    scope: scope[7],
                },
                kind: _98 = <core::result::Result<util::primitives::StateID, nfa::thompson::error::BuildError> as core::ops::Try>::branch(move _99) -> [return: bb68, unwind: bb108],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_99),
            PlaceMention(_98),
            _102 = discriminant(_98),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:222:25: 222:52 (#4340),
                    scope: scope[7],
                },
                kind: switchInt(move _102) -> [0: bb71, 1: bb70, otherwise: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _98),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:222:25: 222:52 (#4340),
                    scope: scope[7],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:222:51: 222:52 (#4341),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb72, imaginary: bb71],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_106),
            _106 = ((_98 as Continue).0: util::primitives::StateID),
            _97 = _106,
            StorageDead(_106),
            FakeRead(ForLet(None), _97),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:222:52: 222:53 (#0),
                    scope: scope[7],
                },
                kind: drop(_98) -> [return: bb74, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_103),
            _103 = move ((_98 as Break).0: core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>),
            StorageLive(_105),
            _105 = move _103,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:222:25: 222:52 (#4340),
                    scope: scope[22],
                },
                kind: _0 = <core::result::Result<nfa::thompson::compiler::ThompsonRef, nfa::thompson::error::BuildError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>>>::from_residual(move _105) -> [return: bb73, unwind: bb105],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_105),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:222:51: 222:52 (#4341),
                    scope: scope[7],
                },
                kind: drop(_103) -> [return: bb89, unwind: bb107],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_98),
            StorageLive(_107),
            StorageLive(_108),
            _108 = &mut _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:223:19: 223:30 (#0),
                    scope: scope[20],
                },
                kind: _107 = std::vec::Vec::<nfa::thompson::literal_trie::Frame<'_>>::pop(move _108) -> [return: bb75, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_108),
            PlaceMention(_107),
            _109 = discriminant(_107),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:223:13: 223:30 (#0),
                    scope: scope[20],
                },
                kind: switchInt(move _109) -> [0: bb77, 1: bb78, otherwise: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _107),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:223:19: 223:30 (#0),
                    scope: scope[20],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:224:17: 224:21 (#0),
                    scope: scope[20],
                },
                kind: falseEdge -> [real: bb79, imaginary: bb78],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_114),
            _114 = move ((_107 as Some).0: nfa::thompson::literal_trie::Frame<'_>),
            StorageLive(_115),
            _115 = _97,
            StorageLive(_116),
            StorageLive(_117),
            StorageLive(_118),
            StorageLive(_119),
            StorageLive(_120),
            _120 = &mut (_114.3: std::vec::Vec<nfa::thompson::nfa::Transition>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:231:21: 231:45 (#0),
                    scope: scope[25],
                },
                kind: _119 = <std::vec::Vec<nfa::thompson::nfa::Transition> as core::ops::DerefMut>::deref_mut(move _120) -> [return: bb80, unwind: bb103],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_111),
            StorageLive(_112),
            _112 = _97,
            StorageLive(_113),
            _113 = _3,
            _111 = nfa::thompson::compiler::ThompsonRef { start: move _112, end: move _113 },
            StorageDead(_113),
            StorageDead(_112),
            _0 = core::result::Result::<nfa::thompson::compiler::ThompsonRef, nfa::thompson::error::BuildError>::Ok(move _111),
            StorageDead(_111),
            StorageDead(_97),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:235:9: 235:10 (#0),
                    scope: scope[7],
                },
                kind: drop(_107) -> [return: bb88, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _118 = &mut (*_119),
            StorageDead(_120),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:231:21: 231:45 (#0),
                    scope: scope[25],
                },
                kind: _117 = core::slice::<impl [nfa::thompson::nfa::Transition]>::last_mut(move _118) -> [return: bb81, unwind: bb103],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_118),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:231:21: 231:54 (#0),
                    scope: scope[25],
                },
                kind: _116 = core::option::Option::<&mut nfa::thompson::nfa::Transition>::unwrap(move _117) -> [return: bb82, unwind: bb103],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_117),
            ((*_116).2: util::primitives::StateID) = move _115,
            StorageDead(_115),
            StorageDead(_119),
            StorageDead(_116),
            StorageLive(_121),
            _121 = move _114,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:232:21: 232:22 (#0),
                    scope: scope[25],
                },
                kind: drop(_13) -> [return: bb83, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _13 = move _121,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:232:30: 232:31 (#0),
                    scope: scope[25],
                },
                kind: drop(_121) -> [return: bb85, unwind: bb103],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _13 = move _121,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:232:30: 232:31 (#0),
                    scope: scope[25],
                },
                kind: drop(_121) -> [return: bb103, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_121),
            _19 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:233:17: 233:18 (#0),
                    scope: scope[20],
                },
                kind: drop(_114) -> [return: bb86, unwind: bb104],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_114),
            StorageDead(_97),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:235:9: 235:10 (#0),
                    scope: scope[7],
                },
                kind: drop(_107) -> [return: bb87, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_107),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:173:9: 235:10 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_107),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb97,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_103),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:222:52: 222:53 (#0),
                    scope: scope[7],
                },
                kind: drop(_98) -> [return: bb90, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_98),
            StorageDead(_97),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb97,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_79),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:205:17: 205:18 (#0),
                    scope: scope[7],
                },
                kind: drop(_70) -> [return: bb92, unwind: bb113],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_70),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:205:17: 205:18 (#0),
                    scope: scope[7],
                },
                kind: drop(_74) -> [return: bb93, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_74),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb96,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_66),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:202:17: 202:18 (#0),
                    scope: scope[7],
                },
                kind: drop(_59) -> [return: bb95, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb96,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
            StorageDead(_55),
            StorageDead(_53),
            StorageDead(_52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb97,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:236:5: 236:6 (#0),
                    scope: scope[6],
                },
                kind: drop(_13) -> [return: bb98, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:236:5: 236:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_12) -> [return: bb99, unwind: bb129],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb102,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:170:39: 170:40 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb101, unwind: bb129],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb102,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:236:6: 236:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:233:17: 233:18 (#0),
                    scope: scope[20],
                },
                kind: drop(_114) -> [return: bb104, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:235:9: 235:10 (#0),
                    scope: scope[7],
                },
                kind: drop(_107) -> [return: bb123, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:222:51: 222:52 (#4340),
                    scope: scope[22],
                },
                kind: drop(_105) -> [return: bb106, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:222:51: 222:52 (#4341),
                    scope: scope[7],
                },
                kind: drop(_103) -> [return: bb107, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:222:52: 222:53 (#0),
                    scope: scope[7],
                },
                kind: drop(_98) -> [return: bb123, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:222:51: 222:52 (#4340),
                    scope: scope[7],
                },
                kind: drop(_99) -> [return: bb123, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:222:50: 222:51 (#0),
                    scope: scope[7],
                },
                kind: drop(_101) -> [return: bb123, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:204:47: 204:48 (#4338),
                    scope: scope[16],
                },
                kind: drop(_81) -> [return: bb111, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:204:47: 204:48 (#4339),
                    scope: scope[14],
                },
                kind: drop(_79) -> [return: bb112, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:205:17: 205:18 (#0),
                    scope: scope[7],
                },
                kind: drop(_70) -> [return: bb113, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:205:17: 205:18 (#0),
                    scope: scope[7],
                },
                kind: drop(_74) -> [return: bb123, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:204:47: 204:48 (#4338),
                    scope: scope[14],
                },
                kind: drop(_75) -> [return: bb116, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:204:46: 204:47 (#0),
                    scope: scope[14],
                },
                kind: drop(_77) -> [return: bb116, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:205:17: 205:18 (#0),
                    scope: scope[7],
                },
                kind: drop(_70) -> [return: bb123, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:203:68: 203:69 (#0),
                    scope: scope[7],
                },
                kind: drop(_73) -> [return: bb123, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:201:63: 201:64 (#4336),
                    scope: scope[11],
                },
                kind: drop(_68) -> [return: bb119, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:201:63: 201:64 (#4337),
                    scope: scope[7],
                },
                kind: drop(_66) -> [return: bb120, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:202:17: 202:18 (#0),
                    scope: scope[7],
                },
                kind: drop(_59) -> [return: bb123, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:201:63: 201:64 (#4336),
                    scope: scope[7],
                },
                kind: drop(_60) -> [return: bb123, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:191:33: 191:34 (#0),
                    scope: scope[8],
                },
                kind: drop(_45) -> [return: bb123, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:236:5: 236:6 (#0),
                    scope: scope[6],
                },
                kind: drop(_13) -> [return: bb124, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:236:5: 236:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_12) -> [return: bb129, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:170:38: 170:39 (#4331),
                    scope: scope[3],
                },
                kind: drop(_10) -> [return: bb126, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:170:38: 170:39 (#4332),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb127, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:170:39: 170:40 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb129, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:170:38: 170:39 (#4331),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb129, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:151:5: 236:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<nfa::thompson::compiler::ThompsonRef, nfa::thompson::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:154:10: 154:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} nfa::thompson::literal_trie::LiteralTrie,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:152:9: 152:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/nfa/thompson/literal_trie.rs:153:18: 153:30 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/literal_trie.rs:153:9: 153:16 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/literal_trie.rs:153:9: 153:16 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut nfa::thompson::builder::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:153:9: 153:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/literal_trie.rs:170:19: 170:39 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/literal_trie.rs:170:13: 170:16 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:170:13: 170:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>, util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:170:19: 170:39 (#4331),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<util::primitives::StateID, nfa::thompson::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:170:19: 170:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut nfa::thompson::builder::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:170:19: 170:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:170:38: 170:39 (#4332),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                regex-automata/src/nfa/thompson/literal_trie.rs:170:19: 170:39 (#4331),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/literal_trie.rs:170:38: 170:39 (#4332),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:170:38: 170:39 (#4332),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:170:38: 170:39 (#4332),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:170:38: 170:39 (#4332),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                regex-automata/src/nfa/thompson/literal_trie.rs:170:19: 170:39 (#4331),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/literal_trie.rs:170:19: 170:39 (#4331),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:170:19: 170:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9: 44:32 (#1277),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/literal_trie.rs:171:13: 171:22 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<nfa::thompson::literal_trie::Frame<'{erased}>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:171:13: 171:22 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/literal_trie.rs:172:21: 172:60 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/literal_trie.rs:172:13: 172:18 (#0),
                    },
                ),
            ),
        ),
        ty: nfa::thompson::literal_trie::Frame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:172:13: 172:18 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::literal_trie::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:172:32: 172:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::literal_trie::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:172:32: 172:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::literal_trie::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:172:44: 172:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<nfa::thompson::literal_trie::State, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:172:33: 172:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:173:9: 235:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:173:9: 235:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:151:5: 236:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:174:13: 195:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} nfa::thompson::literal_trie::Transition>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:174:30: 174:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, nfa::thompson::literal_trie::Transition>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:174:30: 174:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:174:20: 174:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _21,
                                ),
                                regex-automata/src/nfa/thompson/literal_trie.rs:174:30: 174:50 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/literal_trie.rs:174:20: 174:27 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} nfa::thompson::literal_trie::Transition,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:174:25: 174:26 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:174:51: 195:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:175:17: 193:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:175:20: 175:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::literal_trie::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:175:20: 175:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::literal_trie::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:175:31: 175:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<nfa::thompson::literal_trie::State, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:175:20: 175:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:175:32: 175:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:176:21: 180:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<nfa::thompson::nfa::Transition, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:176:21: 176:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::thompson::nfa::Transition,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:176:35: 180:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:177:32: 177:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:178:30: 178:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:179:31: 179:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:182:21: 190:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<nfa::thompson::nfa::Transition, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:182:21: 182:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::thompson::nfa::Transition,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:182:35: 190:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:183:32: 183:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:184:30: 184:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:191:21: 191:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<nfa::thompson::literal_trie::Frame<'{erased}>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:191:21: 191:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::thompson::literal_trie::Frame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:191:32: 191:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::thompson::literal_trie::Frame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:192:25: 192:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::literal_trie::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:192:36: 192:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::literal_trie::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:192:36: 192:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::literal_trie::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:192:48: 192:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<nfa::thompson::literal_trie::State, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:192:37: 192:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:192:49: 192:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:199:13: 207:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:199:17: 199:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<nfa::thompson::nfa::Transition, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:199:17: 199:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/literal_trie.rs:200:32: 205:18 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/literal_trie.rs:200:21: 200:29 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:200:21: 200:29 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:200:35: 200:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:200:35: 200:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<nfa::thompson::nfa::Transition, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:200:35: 200:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:201:21: 201:64 (#0),
                },
            ),
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>, util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:201:21: 201:64 (#4336),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:201:21: 201:64 (#0),
                },
            ),
        ),
        ty: core::result::Result<util::primitives::StateID, nfa::thompson::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:201:21: 201:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:201:21: 201:64 (#0),
                },
            ),
        ),
        ty: &'{erased} mut nfa::thompson::builder::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:201:21: 201:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:201:21: 201:64 (#0),
                },
            ),
        ),
        ty: nfa::thompson::nfa::Transition,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:201:39: 201:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:201:21: 201:64 (#0),
                },
            ),
        ),
        ty: core::option::Option<nfa::thompson::nfa::Transition>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:201:39: 201:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:201:21: 201:64 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<nfa::thompson::nfa::Transition, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:201:39: 201:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:201:63: 201:64 (#4337),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _59,
                                ),
                                regex-automata/src/nfa/thompson/literal_trie.rs:201:21: 201:64 (#4336),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/literal_trie.rs:201:63: 201:64 (#4337),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:201:63: 201:64 (#4337),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:201:21: 201:64 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:201:63: 201:64 (#4337),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:201:21: 201:64 (#0),
                },
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:201:63: 201:64 (#4337),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _59,
                                ),
                                regex-automata/src/nfa/thompson/literal_trie.rs:201:21: 201:64 (#4336),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/literal_trie.rs:201:21: 201:64 (#4336),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:201:21: 201:64 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/literal_trie.rs:203:34: 203:69 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/literal_trie.rs:203:25: 203:31 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<nfa::thompson::nfa::Transition, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:203:25: 203:31 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<nfa::thompson::nfa::Transition, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:203:47: 203:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<nfa::thompson::nfa::Transition, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:203:47: 203:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::Vec<nfa::thompson::nfa::Transition, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9: 44:32 (#1278),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:204:21: 204:48 (#0),
                },
            ),
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>, util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:204:21: 204:48 (#4338),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:204:21: 204:48 (#0),
                },
            ),
        ),
        ty: core::result::Result<util::primitives::StateID, nfa::thompson::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:204:21: 204:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:204:21: 204:48 (#0),
                },
            ),
        ),
        ty: &'{erased} mut nfa::thompson::builder::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:204:21: 204:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:204:21: 204:48 (#0),
                },
            ),
        ),
        ty: std::vec::Vec<nfa::thompson::nfa::Transition, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:204:40: 204:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:204:47: 204:48 (#4339),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _74,
                                ),
                                regex-automata/src/nfa/thompson/literal_trie.rs:204:21: 204:48 (#4338),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/literal_trie.rs:204:47: 204:48 (#4339),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:204:47: 204:48 (#4339),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:204:21: 204:48 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:204:47: 204:48 (#4339),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:204:21: 204:48 (#0),
                },
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:204:47: 204:48 (#4339),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _74,
                                ),
                                regex-automata/src/nfa/thompson/literal_trie.rs:204:21: 204:48 (#4338),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/literal_trie.rs:204:21: 204:48 (#4338),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:204:21: 204:48 (#0),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:206:17: 206:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:206:17: 206:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:206:30: 206:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:209:13: 217:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} [nfa::thompson::literal_trie::Transition]>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:209:34: 209:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut nfa::thompson::literal_trie::StateChunksIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:209:34: 209:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:209:20: 209:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _87,
                                ),
                                regex-automata/src/nfa/thompson/literal_trie.rs:209:34: 209:49 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/literal_trie.rs:209:20: 209:31 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [nfa::thompson::literal_trie::Transition],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:209:25: 209:30 (#0),
            scope: scope[19],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:209:50: 217:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:213:17: 213:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:213:17: 213:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:213:30: 213:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::Iter<'{erased}, nfa::thompson::literal_trie::Transition>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:215:33: 215:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [nfa::thompson::literal_trie::Transition],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:215:33: 215:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/literal_trie.rs:222:25: 222:52 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/literal_trie.rs:222:17: 222:22 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:222:17: 222:22 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>, util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:222:25: 222:52 (#4340),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<util::primitives::StateID, nfa::thompson::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:222:25: 222:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut nfa::thompson::builder::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:222:25: 222:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:222:43: 222:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:222:51: 222:52 (#4341),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _98,
                                ),
                                regex-automata/src/nfa/thompson/literal_trie.rs:222:25: 222:52 (#4340),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/literal_trie.rs:222:51: 222:52 (#4341),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:222:51: 222:52 (#4341),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:222:51: 222:52 (#4341),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, nfa::thompson::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:222:51: 222:52 (#4341),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _98,
                                ),
                                regex-automata/src/nfa/thompson/literal_trie.rs:222:25: 222:52 (#4340),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/literal_trie.rs:222:25: 222:52 (#4340),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:222:25: 222:52 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:223:13: 234:14 (#0),
                },
            ),
        ),
        ty: core::option::Option<nfa::thompson::literal_trie::Frame<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:223:19: 223:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:223:13: 234:14 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<nfa::thompson::literal_trie::Frame<'{erased}>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:223:19: 223:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:224:17: 224:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/literal_trie.rs:223:13: 234:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:224:25: 226:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: nfa::thompson::compiler::ThompsonRef,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:225:31: 225:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:225:45: 225:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:225:52: 225:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _107,
                                ),
                                regex-automata/src/nfa/thompson/literal_trie.rs:223:19: 223:30 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/literal_trie.rs:227:17: 227:33 (#0),
                    },
                ),
            ),
        ),
        ty: nfa::thompson::literal_trie::Frame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:227:22: 227:32 (#0),
            scope: scope[20],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:231:62: 231:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut nfa::thompson::nfa::Transition,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:231:21: 231:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} mut nfa::thompson::nfa::Transition>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:231:21: 231:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [nfa::thompson::nfa::Transition],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:231:21: 231:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [nfa::thompson::nfa::Transition],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:231:21: 231:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<nfa::thompson::nfa::Transition, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:231:21: 231:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::thompson::literal_trie::Frame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/literal_trie.rs:232:25: 232:31 (#0),
            scope: scope[0],
        },
    },
]