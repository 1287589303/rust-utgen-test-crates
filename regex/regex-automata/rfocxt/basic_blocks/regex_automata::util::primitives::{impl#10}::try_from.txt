[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = _1,
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = const util::primitives::SmallIndex::MAX,
            _6 = &_7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/primitives.rs:338:20: 338:44 (#0),
                    scope: scope[0],
                },
                kind: _5 = util::primitives::SmallIndex::as_u64(move _6) -> [return: bb1, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            _3 = Gt(move _4, move _5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/primitives.rs:338:12: 338:44 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_9),
            StorageLive(_10),
            _10 = _1,
            _9 = util::primitives::SmallIndexError { attempted: move _10 },
            StorageDead(_10),
            _0 = core::result::Result::<util::primitives::SmallIndex, util::primitives::SmallIndexError>::Err(move _9),
            StorageDead(_9),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/primitives.rs:342:6: 342:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_5),
            StorageDead(_4),
            _2 = const (),
            StorageDead(_3),
            StorageDead(_2),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/primitives.rs:341:38: 341:54 (#0),
                    scope: scope[0],
                },
                kind: _12 = <u64 as util::int::U64>::as_usize(move _13) -> [return: bb4, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/primitives.rs:341:12: 341:55 (#0),
                    scope: scope[0],
                },
                kind: _11 = util::primitives::SmallIndex::new_unchecked(move _12) -> [return: bb5, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            _0 = core::result::Result::<util::primitives::SmallIndex, util::primitives::SmallIndexError>::Ok(move _11),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/primitives.rs:342:6: 342:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/primitives.rs:342:6: 342:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/primitives.rs:337:5: 342:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<util::primitives::SmallIndex, util::primitives::SmallIndexError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/primitives.rs:337:32: 337:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/primitives.rs:337:24: 337:27 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/primitives.rs:337:17: 337:22 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/primitives.rs:337:17: 337:22 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/primitives.rs:337:17: 337:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/primitives.rs:338:9: 340:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/primitives.rs:338:12: 338:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/primitives.rs:338:12: 338:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/primitives.rs:338:20: 338:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::SmallIndex,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/primitives.rs:338:20: 338:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:3864 ~ regex_automata[00dd]::util::primitives::{impl#2}::MAX),
            },
        ),
        ty: util::primitives::SmallIndex,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/primitives.rs:338:20: 338:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/primitives.rs:338:45: 340:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::primitives::SmallIndexError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/primitives.rs:339:24: 339:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/primitives.rs:339:53: 339:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::primitives::SmallIndex,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/primitives.rs:341:12: 341:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/primitives.rs:341:9: 341:56 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/primitives.rs:341:38: 341:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/primitives.rs:341:9: 341:56 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/primitives.rs:341:38: 341:43 (#0),
            scope: scope[0],
        },
    },
]