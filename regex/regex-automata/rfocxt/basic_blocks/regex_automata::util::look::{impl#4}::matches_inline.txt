[
    BasicBlockData {
        statements: [
            PlaceMention(_2),
            _5 = discriminant(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:664:9: 664:19 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _5) -> [1: bb2, 2: bb3, 4: bb4, 8: bb5, 16: bb6, 32: bb7, 64: bb8, 128: bb9, 256: bb10, 512: bb11, 1024: bb12, 2048: bb13, 4096: bb14, 8192: bb15, 16384: bb16, 32768: bb17, 65536: bb18, 131072: bb19, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:664:15: 664:19 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:665:13: 665:24 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb20, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:666:13: 666:22 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb22, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:667:13: 667:26 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb24, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:668:13: 668:24 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb26, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:669:13: 669:28 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb28, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:670:13: 670:26 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb30, imaginary: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:671:13: 671:28 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb32, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:672:13: 672:34 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb34, imaginary: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:673:13: 673:30 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb36, imaginary: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:674:13: 674:36 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb39, imaginary: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:677:13: 677:33 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb42, imaginary: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:678:13: 678:31 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb44, imaginary: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:679:13: 679:35 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb46, imaginary: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:682:13: 682:33 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb49, imaginary: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:685:13: 685:37 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb52, imaginary: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:688:13: 688:35 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb54, imaginary: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:691:13: 691:39 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb56, imaginary: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_62),
            StorageLive(_63),
            _63 = &(*_1),
            StorageLive(_64),
            _64 = &(*_3),
            StorageLive(_65),
            _65 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:695:17: 695:60 (#0),
                    scope: scope[0],
                },
                kind: _62 = util::look::LookMatcher::is_word_end_half_unicode(move _63, move _64, move _65) -> [return: bb59, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            _6 = &(*_1),
            StorageLive(_7),
            _7 = &(*_3),
            StorageLive(_8),
            _8 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:665:28: 665:55 (#0),
                    scope: scope[0],
                },
                kind: _0 = util::look::LookMatcher::is_start(move _6, move _7, move _8) -> [return: bb21, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:665:54: 665:55 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb61,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            _9 = &(*_1),
            StorageLive(_10),
            _10 = &(*_3),
            StorageLive(_11),
            _11 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:666:26: 666:51 (#0),
                    scope: scope[0],
                },
                kind: _0 = util::look::LookMatcher::is_end(move _9, move _10, move _11) -> [return: bb23, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:666:50: 666:51 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb61,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            _12 = &(*_1),
            StorageLive(_13),
            _13 = &(*_3),
            StorageLive(_14),
            _14 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:667:30: 667:60 (#0),
                    scope: scope[0],
                },
                kind: _0 = util::look::LookMatcher::is_start_lf(move _12, move _13, move _14) -> [return: bb25, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:667:59: 667:60 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb61,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_15),
            _15 = &(*_1),
            StorageLive(_16),
            _16 = &(*_3),
            StorageLive(_17),
            _17 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:668:28: 668:56 (#0),
                    scope: scope[0],
                },
                kind: _0 = util::look::LookMatcher::is_end_lf(move _15, move _16, move _17) -> [return: bb27, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:668:55: 668:56 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb61,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_18),
            _18 = &(*_1),
            StorageLive(_19),
            _19 = &(*_3),
            StorageLive(_20),
            _20 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:669:32: 669:64 (#0),
                    scope: scope[0],
                },
                kind: _0 = util::look::LookMatcher::is_start_crlf(move _18, move _19, move _20) -> [return: bb29, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:669:63: 669:64 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb61,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_21),
            _21 = &(*_1),
            StorageLive(_22),
            _22 = &(*_3),
            StorageLive(_23),
            _23 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:670:30: 670:60 (#0),
                    scope: scope[0],
                },
                kind: _0 = util::look::LookMatcher::is_end_crlf(move _21, move _22, move _23) -> [return: bb31, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_22),
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:670:59: 670:60 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb61,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_24),
            _24 = &(*_1),
            StorageLive(_25),
            _25 = &(*_3),
            StorageLive(_26),
            _26 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:671:32: 671:64 (#0),
                    scope: scope[0],
                },
                kind: _0 = util::look::LookMatcher::is_word_ascii(move _24, move _25, move _26) -> [return: bb33, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_25),
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:671:63: 671:64 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb61,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_27),
            _27 = &(*_1),
            StorageLive(_28),
            _28 = &(*_3),
            StorageLive(_29),
            _29 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:672:38: 672:77 (#0),
                    scope: scope[0],
                },
                kind: _0 = util::look::LookMatcher::is_word_ascii_negate(move _27, move _28, move _29) -> [return: bb35, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_28),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:672:76: 672:77 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb61,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_30),
            StorageLive(_31),
            _31 = &(*_1),
            StorageLive(_32),
            _32 = &(*_3),
            StorageLive(_33),
            _33 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:673:34: 673:68 (#0),
                    scope: scope[0],
                },
                kind: _30 = util::look::LookMatcher::is_word_unicode(move _31, move _32, move _33) -> [return: bb37, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_32),
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:673:34: 673:77 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::result::Result::<bool, util::look::UnicodeWordBoundaryError>::unwrap(move _30) -> [return: bb38, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:673:76: 673:77 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb61,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_34),
            StorageLive(_35),
            _35 = &(*_1),
            StorageLive(_36),
            _36 = &(*_3),
            StorageLive(_37),
            _37 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:675:17: 675:58 (#0),
                    scope: scope[0],
                },
                kind: _34 = util::look::LookMatcher::is_word_unicode_negate(move _35, move _36, move _37) -> [return: bb40, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageDead(_36),
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:675:17: 675:67 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::result::Result::<bool, util::look::UnicodeWordBoundaryError>::unwrap(move _34) -> [return: bb41, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:675:66: 675:67 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb61,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_38),
            _38 = &(*_1),
            StorageLive(_39),
            _39 = &(*_3),
            StorageLive(_40),
            _40 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:677:37: 677:75 (#0),
                    scope: scope[0],
                },
                kind: _0 = util::look::LookMatcher::is_word_start_ascii(move _38, move _39, move _40) -> [return: bb43, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageDead(_39),
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:677:74: 677:75 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb61,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_41),
            _41 = &(*_1),
            StorageLive(_42),
            _42 = &(*_3),
            StorageLive(_43),
            _43 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:678:35: 678:71 (#0),
                    scope: scope[0],
                },
                kind: _0 = util::look::LookMatcher::is_word_end_ascii(move _41, move _42, move _43) -> [return: bb45, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            StorageDead(_42),
            StorageDead(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:678:70: 678:71 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb61,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_44),
            StorageLive(_45),
            _45 = &(*_1),
            StorageLive(_46),
            _46 = &(*_3),
            StorageLive(_47),
            _47 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:680:17: 680:57 (#0),
                    scope: scope[0],
                },
                kind: _44 = util::look::LookMatcher::is_word_start_unicode(move _45, move _46, move _47) -> [return: bb47, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            StorageDead(_46),
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:680:17: 680:66 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::result::Result::<bool, util::look::UnicodeWordBoundaryError>::unwrap(move _44) -> [return: bb48, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:680:65: 680:66 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb61,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_48),
            StorageLive(_49),
            _49 = &(*_1),
            StorageLive(_50),
            _50 = &(*_3),
            StorageLive(_51),
            _51 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:683:17: 683:55 (#0),
                    scope: scope[0],
                },
                kind: _48 = util::look::LookMatcher::is_word_end_unicode(move _49, move _50, move _51) -> [return: bb50, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
            StorageDead(_50),
            StorageDead(_49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:683:17: 683:64 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::result::Result::<bool, util::look::UnicodeWordBoundaryError>::unwrap(move _48) -> [return: bb51, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:683:63: 683:64 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb61,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_52),
            _52 = &(*_1),
            StorageLive(_53),
            _53 = &(*_3),
            StorageLive(_54),
            _54 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:686:17: 686:60 (#0),
                    scope: scope[0],
                },
                kind: _0 = util::look::LookMatcher::is_word_start_half_ascii(move _52, move _53, move _54) -> [return: bb53, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            StorageDead(_53),
            StorageDead(_52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:686:59: 686:60 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb61,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_55),
            _55 = &(*_1),
            StorageLive(_56),
            _56 = &(*_3),
            StorageLive(_57),
            _57 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:689:17: 689:58 (#0),
                    scope: scope[0],
                },
                kind: _0 = util::look::LookMatcher::is_word_end_half_ascii(move _55, move _56, move _57) -> [return: bb55, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_57),
            StorageDead(_56),
            StorageDead(_55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:689:57: 689:58 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb61,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_58),
            StorageLive(_59),
            _59 = &(*_1),
            StorageLive(_60),
            _60 = &(*_3),
            StorageLive(_61),
            _61 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:692:17: 692:62 (#0),
                    scope: scope[0],
                },
                kind: _58 = util::look::LookMatcher::is_word_start_half_unicode(move _59, move _60, move _61) -> [return: bb57, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_61),
            StorageDead(_60),
            StorageDead(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:692:17: 692:71 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::result::Result::<bool, util::look::UnicodeWordBoundaryError>::unwrap(move _58) -> [return: bb58, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:692:70: 692:71 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb61,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_65),
            StorageDead(_64),
            StorageDead(_63),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:695:17: 695:69 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::result::Result::<bool, util::look::UnicodeWordBoundaryError>::unwrap(move _62) -> [return: bb60, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:695:68: 695:69 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb61,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:698:6: 698:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/look.rs:658:5: 698:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:663:10: 663:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} util::look::LookMatcher,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:659:9: 659:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/look.rs:660:15: 660:19 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/look.rs:660:9: 660:13 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/look.rs:660:9: 660:13 (#0),
                    },
                ),
            ),
        ),
        ty: util::look::Look,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:660:9: 660:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/look.rs:661:19: 661:24 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/look.rs:661:9: 661:17 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/look.rs:661:9: 661:17 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:661:9: 661:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/look.rs:662:13: 662:18 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/look.rs:662:9: 662:11 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/look.rs:662:9: 662:11 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:662:9: 662:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:665:13: 665:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:664:9: 697:10 (#0),
                },
            ),
        ),
        ty: &'{erased} util::look::LookMatcher,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:665:28: 665:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:664:9: 697:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:665:42: 665:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:664:9: 697:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:665:52: 665:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:664:9: 697:10 (#0),
                },
            ),
        ),
        ty: &'{erased} util::look::LookMatcher,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:666:26: 666:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:664:9: 697:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:666:38: 666:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:664:9: 697:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:666:48: 666:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:664:9: 697:10 (#0),
                },
            ),
        ),
        ty: &'{erased} util::look::LookMatcher,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:667:30: 667:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:664:9: 697:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:667:47: 667:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:664:9: 697:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:667:57: 667:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:664:9: 697:10 (#0),
                },
            ),
        ),
        ty: &'{erased} util::look::LookMatcher,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:668:28: 668:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:664:9: 697:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:668:43: 668:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:664:9: 697:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:668:53: 668:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:664:9: 697:10 (#0),
                },
            ),
        ),
        ty: &'{erased} util::look::LookMatcher,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:669:32: 669:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:664:9: 697:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:669:51: 669:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:664:9: 697:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:669:61: 669:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:664:9: 697:10 (#0),
                },
            ),
        ),
        ty: &'{erased} util::look::LookMatcher,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:670:30: 670:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:664:9: 697:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:670:47: 670:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:664:9: 697:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:670:57: 670:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:664:9: 697:10 (#0),
                },
            ),
        ),
        ty: &'{erased} util::look::LookMatcher,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:671:32: 671:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:664:9: 697:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:671:51: 671:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:664:9: 697:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:671:61: 671:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:664:9: 697:10 (#0),
                },
            ),
        ),
        ty: &'{erased} util::look::LookMatcher,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:672:38: 672:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:664:9: 697:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:672:64: 672:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:664:9: 697:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:672:74: 672:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:664:9: 697:10 (#0),
                },
            ),
        ),
        ty: core::result::Result<bool, util::look::UnicodeWordBoundaryError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:673:34: 673:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:664:9: 697:10 (#0),
                },
            ),
        ),
        ty: &'{erased} util::look::LookMatcher,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:673:34: 673:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:664:9: 697:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:673:55: 673:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:664:9: 697:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:673:65: 673:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:675:17: 675:67 (#0),
                },
            ),
        ),
        ty: core::result::Result<bool, util::look::UnicodeWordBoundaryError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:675:17: 675:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:675:17: 675:67 (#0),
                },
            ),
        ),
        ty: &'{erased} util::look::LookMatcher,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:675:17: 675:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:675:17: 675:67 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:675:45: 675:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:675:17: 675:67 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:675:55: 675:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:664:9: 697:10 (#0),
                },
            ),
        ),
        ty: &'{erased} util::look::LookMatcher,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:677:37: 677:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:664:9: 697:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:677:62: 677:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:664:9: 697:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:677:72: 677:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:664:9: 697:10 (#0),
                },
            ),
        ),
        ty: &'{erased} util::look::LookMatcher,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:678:35: 678:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:664:9: 697:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:678:58: 678:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:664:9: 697:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:678:68: 678:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:680:17: 680:66 (#0),
                },
            ),
        ),
        ty: core::result::Result<bool, util::look::UnicodeWordBoundaryError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:680:17: 680:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:680:17: 680:66 (#0),
                },
            ),
        ),
        ty: &'{erased} util::look::LookMatcher,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:680:17: 680:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:680:17: 680:66 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:680:44: 680:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:680:17: 680:66 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:680:54: 680:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:683:17: 683:64 (#0),
                },
            ),
        ),
        ty: core::result::Result<bool, util::look::UnicodeWordBoundaryError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:683:17: 683:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:683:17: 683:64 (#0),
                },
            ),
        ),
        ty: &'{erased} util::look::LookMatcher,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:683:17: 683:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:683:17: 683:64 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:683:42: 683:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:683:17: 683:64 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:683:52: 683:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:686:17: 686:60 (#0),
                },
            ),
        ),
        ty: &'{erased} util::look::LookMatcher,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:686:17: 686:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:686:17: 686:60 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:686:47: 686:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:686:17: 686:60 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:686:57: 686:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:689:17: 689:58 (#0),
                },
            ),
        ),
        ty: &'{erased} util::look::LookMatcher,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:689:17: 689:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:689:17: 689:58 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:689:45: 689:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:689:17: 689:58 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:689:55: 689:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:692:17: 692:71 (#0),
                },
            ),
        ),
        ty: core::result::Result<bool, util::look::UnicodeWordBoundaryError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:692:17: 692:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:692:17: 692:71 (#0),
                },
            ),
        ),
        ty: &'{erased} util::look::LookMatcher,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:692:17: 692:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:692:17: 692:71 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:692:49: 692:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:692:17: 692:71 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:692:59: 692:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:695:17: 695:69 (#0),
                },
            ),
        ),
        ty: core::result::Result<bool, util::look::UnicodeWordBoundaryError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:695:17: 695:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:695:17: 695:69 (#0),
                },
            ),
        ),
        ty: &'{erased} util::look::LookMatcher,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:695:17: 695:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:695:17: 695:69 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:695:47: 695:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/look.rs:695:17: 695:69 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/look.rs:695:57: 695:59 (#0),
            scope: scope[0],
        },
    },
]