[
    BasicBlockData {
        statements: [
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1505:25: 1505:39 (#0),
                    scope: scope[0],
                },
                kind: _11 = nfa::thompson::pikevm::PikeVM::get_nfa(move _12) -> [return: bb1, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = &(*_11),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1505:25: 1505:51 (#0),
                    scope: scope[0],
                },
                kind: _9 = nfa::thompson::nfa::NFA::has_empty(move _10) -> [return: bb2, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1505:25: 1505:51 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _9) -> [0: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1505:55: 1505:69 (#0),
                    scope: scope[0],
                },
                kind: _14 = nfa::thompson::pikevm::PikeVM::get_nfa(move _15) -> [return: bb5, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            _8 = const false,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1505:25: 1505:79 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _13 = &(*_14),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1505:55: 1505:79 (#0),
                    scope: scope[0],
                },
                kind: _8 = nfa::thompson::nfa::NFA::is_utf8(move _13) -> [return: bb6, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1505:25: 1505:79 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            FakeRead(ForLet(None), _8),
            PlaceMention((*_3)),
            StorageLive(_16),
            _16 = &((*_3).0: util::sparse_set::SparseSet),
            StorageLive(_17),
            _17 = &mut ((*_3).1: nfa::thompson::pikevm::SlotTable),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = &(*_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1507:20: 1507:30 (#0),
                    scope: scope[2],
                },
                kind: _19 = util::sparse_set::SparseSet::iter(move _20) -> [return: bb8, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1507:20: 1507:30 (#4501),
                    scope: scope[2],
                },
                kind: _18 = <util::sparse_set::SparseSetIter<'_> as core::iter::IntoIterator>::into_iter(move _19) -> [return: bb9, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            PlaceMention(_18),
            StorageLive(_21),
            _21 = move _18,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1507:9: 1527:10 (#4500),
                    scope: scope[3],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1507:9: 1527:10 (#4500),
                    scope: scope[3],
                },
                kind: falseUnwind -> [real: bb11, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            _26 = &mut _21,
            _25 = &mut (*_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1507:20: 1507:30 (#4501),
                    scope: scope[3],
                },
                kind: _24 = <util::sparse_set::SparseSetIter<'_> as core::iter::Iterator>::next(move _25) -> [return: bb12, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            PlaceMention(_24),
            _27 = discriminant(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1507:20: 1507:30 (#4501),
                    scope: scope[3],
                },
                kind: switchInt(move _27) -> [0: bb14, 1: bb15, otherwise: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1507:20: 1507:30 (#4501),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1507:9: 1527:10 (#4500),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb16, imaginary: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_29),
            _29 = ((_24 as Some).0: util::primitives::StateID),
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            _32 = &(*_1),
            StorageLive(_33),
            _33 = &mut (*_2),
            StorageLive(_34),
            _34 = &mut (*_17),
            StorageLive(_35),
            _35 = &mut (*_4),
            StorageLive(_36),
            _36 = &(*_5),
            StorageLive(_37),
            _37 = _6,
            StorageLive(_38),
            _38 = _29,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1508:29: 1508:79 (#0),
                    scope: scope[4],
                },
                kind: _31 = nfa::thompson::pikevm::PikeVM::next(move _32, move _33, move _34, move _35, move _36, move _37, move _38) -> [return: bb17, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1507:9: 1527:10 (#4500),
                    scope: scope[3],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            StorageDead(_37),
            StorageDead(_36),
            StorageDead(_35),
            StorageDead(_34),
            StorageDead(_33),
            StorageDead(_32),
            PlaceMention(_31),
            _39 = discriminant(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1508:23: 1508:79 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _39) -> [0: bb19, 1: bb20, otherwise: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1508:29: 1508:79 (#0),
                    scope: scope[4],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1510:17: 1510:21 (#0),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb32, imaginary: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_41),
            _41 = ((_31 as Some).0: util::primitives::PatternID),
            _30 = _41,
            StorageDead(_41),
            FakeRead(ForLet(None), _30),
            StorageDead(_31),
            StorageLive(_42),
            StorageLive(_43),
            _43 = _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1520:16: 1520:25 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _43) -> [0: bb25, otherwise: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_44),
            StorageLive(_45),
            _45 = &(*_5),
            StorageLive(_46),
            _46 = _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1520:30: 1520:56 (#0),
                    scope: scope[5],
                },
                kind: _44 = util::search::Input::<'_>::is_char_boundary(move _45, move _46) -> [return: bb22, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1520:30: 1520:56 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _44) -> [0: bb24, otherwise: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1520:57: 1522:14 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
            StorageDead(_45),
            StorageDead(_44),
            StorageDead(_43),
            StorageDead(_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb33,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _42 = const (),
            StorageDead(_44),
            StorageDead(_43),
            StorageDead(_42),
            StorageLive(_48),
            StorageLive(_49),
            _49 = &mut (*_7),
            StorageLive(_50),
            _50 = _30,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1523:21: 1523:43 (#0),
                    scope: scope[5],
                },
                kind: _48 = util::search::PatternSet::try_insert(move _49, move _50) -> [return: bb26, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            StorageDead(_49),
            PlaceMention(_48),
            StorageDead(_48),
            StorageLive(_51),
            StorageLive(_52),
            StorageLive(_53),
            StorageLive(_54),
            _54 = &((*_1).0: nfa::thompson::pikevm::Config),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1524:17: 1524:45 (#0),
                    scope: scope[7],
                },
                kind: _53 = nfa::thompson::pikevm::Config::get_match_kind(move _54) -> [return: bb27, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _52 = &_53,
            StorageDead(_54),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1524:17: 1524:73 (#0),
                    scope: scope[7],
                },
                kind: _51 = util::search::MatchKind::continue_past_first_match(move _52) -> [return: bb28, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1524:17: 1524:73 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _51) -> [0: bb30, otherwise: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            StorageDead(_53),
            _23 = const (),
            StorageDead(_51),
            StorageDead(_30),
            StorageDead(_29),
            StorageDead(_26),
            StorageDead(_24),
            StorageDead(_23),
            _22 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1507:9: 1527:10 (#4500),
                    scope: scope[3],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            StorageDead(_53),
            _0 = const (),
            StorageDead(_51),
            StorageDead(_30),
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_24),
            StorageDead(_23),
            StorageDead(_21),
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1528:6: 1528:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[4],
                },
                kind: goto -> bb33,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_29),
            StorageDead(_26),
            StorageDead(_24),
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1495:5: 1528:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1503:6: 1503:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} nfa::thompson::pikevm::PikeVM,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1496:9: 1496:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/nfa/thompson/pikevm.rs:1497:16: 1497:39 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/pikevm.rs:1497:9: 1497:14 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/pikevm.rs:1497:9: 1497:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<nfa::thompson::pikevm::FollowEpsilon, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1497:9: 1497:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/nfa/thompson/pikevm.rs:1498:15: 1498:32 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/pikevm.rs:1498:9: 1498:13 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/pikevm.rs:1498:9: 1498:13 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut nfa::thompson::pikevm::ActiveStates,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1498:9: 1498:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/nfa/thompson/pikevm.rs:1499:15: 1499:32 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/pikevm.rs:1499:9: 1499:13 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/pikevm.rs:1499:9: 1499:13 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut nfa::thompson::pikevm::ActiveStates,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1499:9: 1499:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/nfa/thompson/pikevm.rs:1500:16: 1500:26 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/pikevm.rs:1500:9: 1500:14 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/pikevm.rs:1500:9: 1500:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1500:9: 1500:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/nfa/thompson/pikevm.rs:1501:13: 1501:18 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/pikevm.rs:1501:9: 1501:11 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/pikevm.rs:1501:9: 1501:11 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1501:9: 1501:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/nfa/thompson/pikevm.rs:1502:17: 1502:32 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/pikevm.rs:1502:9: 1502:15 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/pikevm.rs:1502:9: 1502:15 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut util::search::PatternSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1502:9: 1502:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/pikevm.rs:1505:25: 1505:79 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/pikevm.rs:1505:13: 1505:22 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1505:13: 1505:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1505:25: 1505:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1505:25: 1505:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1505:25: 1505:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::pikevm::PikeVM,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1505:25: 1505:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1505:55: 1505:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1505:55: 1505:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::pikevm::PikeVM,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1505:55: 1505:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_3),
                                ),
                                regex-automata/src/nfa/thompson/pikevm.rs:1506:60: 1506:65 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/pikevm.rs:1506:13: 1506:57 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} util::sparse_set::SparseSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1506:28: 1506:35 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_3),
                                ),
                                regex-automata/src/nfa/thompson/pikevm.rs:1506:60: 1506:65 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/pikevm.rs:1506:13: 1506:57 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut nfa::thompson::pikevm::SlotTable,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1506:37: 1506:55 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1507:9: 1527:10 (#4500),
                },
            ),
        ),
        ty: util::sparse_set::SparseSetIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1507:20: 1507:30 (#4501),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1507:9: 1527:10 (#4500),
                },
            ),
        ),
        ty: util::sparse_set::SparseSetIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1507:20: 1507:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1507:9: 1527:10 (#4500),
                },
            ),
        ),
        ty: &'{erased} util::sparse_set::SparseSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1507:20: 1507:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _18,
                                ),
                                regex-automata/src/nfa/thompson/pikevm.rs:1507:20: 1507:30 (#4501),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/pikevm.rs:1507:20: 1507:30 (#4501),
                    },
                ),
            ),
        ),
        ty: util::sparse_set::SparseSetIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1507:20: 1507:30 (#4501),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1495:5: 1528:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1507:20: 1507:30 (#4501),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1507:20: 1507:30 (#4501),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::sparse_set::SparseSetIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1507:20: 1507:30 (#4501),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::sparse_set::SparseSetIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1507:20: 1507:30 (#4501),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1507:9: 1527:10 (#4500),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1507:9: 1527:10 (#4500),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _24,
                                ),
                                regex-automata/src/nfa/thompson/pikevm.rs:1507:20: 1507:30 (#4501),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/pikevm.rs:1507:13: 1507:16 (#4502),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1507:13: 1507:16 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/pikevm.rs:1508:23: 1512:14 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/pikevm.rs:1508:17: 1508:20 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1508:17: 1508:20 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::primitives::PatternID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1508:29: 1508:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::pikevm::PikeVM,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1508:29: 1508:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<nfa::thompson::pikevm::FollowEpsilon, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1508:39: 1508:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut nfa::thompson::pikevm::SlotTable,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1508:46: 1508:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut nfa::thompson::pikevm::ActiveStates,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1508:58: 1508:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1508:64: 1508:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1508:71: 1508:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1508:75: 1508:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1510:17: 1510:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1510:25: 1510:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _31,
                                ),
                                regex-automata/src/nfa/thompson/pikevm.rs:1508:29: 1508:79 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/pikevm.rs:1511:17: 1511:26 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1511:22: 1511:25 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1520:13: 1522:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1520:16: 1520:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1520:30: 1520:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1520:30: 1520:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1520:53: 1520:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1520:57: 1522:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<bool, util::search::PatternSetInsertError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1523:21: 1523:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::search::PatternSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1523:21: 1523:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1523:39: 1523:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1524:13: 1526:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1524:17: 1524:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1524:13: 1526:14 (#0),
                },
            ),
        ),
        ty: &'{erased} util::search::MatchKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1524:17: 1524:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1524:13: 1526:14 (#0),
                },
            ),
        ),
        ty: util::search::MatchKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1524:17: 1524:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1524:13: 1526:14 (#0),
                },
            ),
        ),
        ty: &'{erased} nfa::thompson::pikevm::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1524:17: 1524:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1524:13: 1526:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1524:74: 1526:14 (#0),
            scope: scope[0],
        },
    },
]