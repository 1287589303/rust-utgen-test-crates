[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_1),
            StorageLive(_7),
            StorageLive(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/wire.rs:761:34: 761:50 (#0),
                    scope: scope[0],
                },
                kind: _8 = core::mem::size_of::<u16>() -> [return: bb1, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = core::ops::RangeTo::<usize> { end: move _8 },
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/wire.rs:761:31: 761:51 (#0),
                    scope: scope[0],
                },
                kind: _5 = <[u8] as core::ops::Index<core::ops::RangeTo<usize>>>::index(move _6, move _7) -> [return: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = &(*_5),
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/wire.rs:761:26: 761:62 (#0),
                    scope: scope[0],
                },
                kind: _3 = <&[u8] as core::convert::TryInto<[u8; 2]>>::try_into(move _4) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/wire.rs:761:26: 761:71 (#0),
                    scope: scope[0],
                },
                kind: _2 = core::result::Result::<[u8; 2], core::array::TryFromSliceError>::unwrap(move _3) -> [return: bb4, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            AscribeUserType(_2, o, UserTypeProjection { base: UserType(1), projs: [] }),
            StorageDead(_5),
            StorageLive(_9),
            _9 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/wire.rs:762:5: 762:30 (#0),
                    scope: scope[1],
                },
                kind: _0 = core::num::<impl u16>::from_ne_bytes(move _9) -> [return: bb5, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/wire.rs:763:2: 763:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/wire.rs:760:1: 763:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:760:41: 760:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/wire.rs:760:31: 760:36 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/wire.rs:760:24: 760:29 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/wire.rs:760:24: 760:29 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:760:24: 760:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/wire.rs:761:26: 761:71 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/wire.rs:761:9: 761:14 (#0),
                    },
                ),
            ),
        ),
        ty: [u8; 2_usize],
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(0),
                            projs: [],
                        },
                        regex-automata/src/util/wire.rs:761:16: 761:23 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:761:9: 761:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<[u8; 2_usize], core::array::TryFromSliceError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:761:26: 761:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:761:26: 761:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:761:31: 761:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:761:26: 761:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeTo<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:761:32: 761:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:761:34: 761:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/wire.rs:762:5: 762:30 (#0),
                },
            ),
        ),
        ty: [u8; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:762:24: 762:29 (#0),
            scope: scope[0],
        },
    },
]