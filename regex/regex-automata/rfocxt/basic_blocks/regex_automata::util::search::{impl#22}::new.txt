[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/search.rs:1796:24: 1796:52 (#0),
                    scope: scope[0],
                },
                kind: _2 = std::boxed::Box::<util::search::MatchErrorKind>::new(move _3) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            _0 = util::search::MatchError(move _2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/search.rs:1796:52: 1796:53 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/search.rs:1802:6: 1802:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/search.rs:1793:5: 1802:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::search::MatchError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/search.rs:1793:41: 1793:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/search.rs:1793:22: 1793:36 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/search.rs:1793:16: 1793:20 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/search.rs:1793:16: 1793:20 (#0),
                    },
                ),
            ),
        ),
        ty: util::search::MatchErrorKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/search.rs:1793:16: 1793:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::boxed::Box<util::search::MatchErrorKind, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/search.rs:1796:24: 1796:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/search.rs:1796:13: 1796:53 (#0),
                },
            ),
        ),
        ty: util::search::MatchErrorKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/search.rs:1796:47: 1796:51 (#0),
            scope: scope[0],
        },
    },
]