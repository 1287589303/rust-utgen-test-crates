[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:107:25: 107:59 (#0),
                    scope: scope[0],
                },
                kind: _6 = aho_corasick::Input::<'_>::new::<[u8]>(move _7) -> [return: bb1, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageLive(_8),
            _8 = aho_corasick::Anchored::Yes,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:107:25: 108:55 (#0),
                    scope: scope[0],
                },
                kind: _5 = aho_corasick::Input::<'_>::anchored(move _6, move _8) -> [return: bb2, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_6),
            StorageLive(_9),
            StorageLive(_10),
            _10 = (_3.0: usize),
            StorageLive(_11),
            _11 = (_3.1: usize),
            _9 = core::ops::Range::<usize> { start: move _10, end: move _11 },
            StorageDead(_11),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:107:25: 109:44 (#0),
                    scope: scope[0],
                },
                kind: _4 = aho_corasick::Input::<'_>::span::<core::ops::Range<usize>>(move _5, move _9) -> [return: bb3, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &((*_1).1: aho_corasick::dfa::DFA),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &_4,
            _15 = &(*_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:110:13: 111:34 (#0),
                    scope: scope[1],
                },
                kind: _13 = <aho_corasick::dfa::DFA as aho_corasick::automaton::Automaton>::try_find(move _14, move _15) -> [return: bb4, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_14),
            StorageLive(_17),
            StorageLive(_18),
            _18 = const "aho-corasick DFA should never fail",
            _17 = &(*_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:110:13: 113:62 (#0),
                    scope: scope[1],
                },
                kind: _12 = core::result::Result::<core::option::Option<aho_corasick::Match>, aho_corasick::MatchError>::expect(move _13, move _17) -> [return: bb5, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_13),
            StorageLive(_19),
            _19 = {closure@regex-automata/src/util/prefilter/teddy.rs:114:22: 114:25},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:110:13: 114:66 (#0),
                    scope: scope[1],
                },
                kind: _0 = core::option::Option::<aho_corasick::Match>::map::<util::search::Span, {closure@regex-automata/src/util/prefilter/teddy.rs:114:22: 114:25}>(move _12, move _19) -> [return: bb6, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_12),
            StorageDead(_4),
            StorageDead(_18),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:116:6: 116:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:113:61: 113:62 (#0),
                    scope: scope[1],
                },
                kind: drop(_13) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/teddy.rs:99:5: 116:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::search::Span>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:99:54: 99:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} util::prefilter::teddy::Teddy,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:99:15: 99:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/prefilter/teddy.rs:99:32: 99:37 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/prefilter/teddy.rs:99:22: 99:30 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/prefilter/teddy.rs:99:22: 99:30 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:99:22: 99:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/prefilter/teddy.rs:99:45: 99:49 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/prefilter/teddy.rs:99:39: 99:43 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/prefilter/teddy.rs:99:39: 99:43 (#0),
                    },
                ),
            ),
        ),
        ty: util::search::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:99:39: 99:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/prefilter/teddy.rs:107:25: 109:44 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/prefilter/teddy.rs:107:17: 107:22 (#0),
                    },
                ),
            ),
        ),
        ty: aho_corasick::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:107:17: 107:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: aho_corasick::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:107:25: 108:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: aho_corasick::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:107:25: 107:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:107:50: 107:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: aho_corasick::Anchored,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:108:27: 108:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:109:23: 109:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:109:23: 109:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:109:35: 109:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/prefilter/teddy.rs:110:13: 114:66 (#0),
                },
            ),
        ),
        ty: core::option::Option<aho_corasick::Match>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:110:13: 113:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/prefilter/teddy.rs:110:13: 114:66 (#0),
                },
            ),
        ),
        ty: core::result::Result<core::option::Option<aho_corasick::Match>, aho_corasick::MatchError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:110:13: 111:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/prefilter/teddy.rs:110:13: 114:66 (#0),
                },
            ),
        ),
        ty: &'{erased} aho_corasick::dfa::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:110:13: 110:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/prefilter/teddy.rs:110:13: 114:66 (#0),
                },
            ),
        ),
        ty: &'{erased} aho_corasick::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:111:27: 111:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/prefilter/teddy.rs:110:13: 114:66 (#0),
                },
            ),
        ),
        ty: &'{erased} aho_corasick::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:111:27: 111:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/prefilter/teddy.rs:110:13: 114:66 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:113:25: 113:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/prefilter/teddy.rs:110:13: 114:66 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:113:25: 113:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/prefilter/teddy.rs:110:13: 114:66 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:3790 ~ regex_automata[00dd]::util::prefilter::teddy::{impl#1}::prefix::{closure#0}),
            [
                i32,
                Binder { value: extern "RustCall" fn((aho_corasick::Match,)) -> util::search::Span, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/teddy.rs:114:22: 114:65 (#0),
            scope: scope[0],
        },
    },
]