[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &((*_1).0: hybrid::dfa::Builder),
            StorageLive(_7),
            _7 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:792:23: 792:52 (#0),
                    scope: scope[0],
                },
                kind: _5 = hybrid::dfa::Builder::build_many::<P>(move _6, move _7) -> [return: bb1, unwind: bb59],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:792:23: 792:53 (#3526),
                    scope: scope[0],
                },
                kind: _4 = <core::result::Result<hybrid::dfa::DFA, hybrid::error::BuildError> as core::ops::Try>::branch(move _5) -> [return: bb2, unwind: bb58],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            PlaceMention(_4),
            _8 = discriminant(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:792:23: 792:53 (#3526),
                    scope: scope[0],
                },
                kind: switchInt(move _8) -> [0: bb5, 1: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:792:23: 792:53 (#3526),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:792:52: 792:53 (#3527),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            _12 = move ((_4 as Continue).0: hybrid::dfa::DFA),
            _3 = move _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:792:52: 792:53 (#0),
                    scope: scope[0],
                },
                kind: drop(_12) -> [return: bb8, unwind: bb57],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            _9 = move ((_4 as Break).0: core::result::Result<core::convert::Infallible, hybrid::error::BuildError>),
            StorageLive(_11),
            _11 = move _9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:792:23: 792:53 (#3526),
                    scope: scope[3],
                },
                kind: _0 = <core::result::Result<hybrid::regex::Regex, hybrid::error::BuildError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, hybrid::error::BuildError>>>::from_residual(move _11) -> [return: bb7, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:792:52: 792:53 (#3527),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb36, unwind: bb57],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            FakeRead(ForLet(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:792:53: 792:54 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb9, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            _22 = &((*_1).0: hybrid::dfa::Builder),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:793:23: 795:21 (#0),
                    scope: scope[1],
                },
                kind: _21 = <hybrid::dfa::Builder as core::clone::Clone>::clone(move _22) -> [return: bb10, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _20 = &mut _21,
            StorageDead(_22),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:797:17: 797:30 (#0),
                    scope: scope[1],
                },
                kind: _26 = hybrid::dfa::DFA::config() -> [return: bb11, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_27),
            _27 = core::option::Option::<util::prefilter::Prefilter>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:797:17: 798:37 (#0),
                    scope: scope[1],
                },
                kind: _25 = hybrid::dfa::Config::prefilter(move _26, move _27) -> [return: bb12, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:797:17: 799:52 (#0),
                    scope: scope[1],
                },
                kind: _24 = hybrid::dfa::Config::specialize_start_states(move _25, const false) -> [return: bb13, unwind: bb50],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageLive(_28),
            _28 = util::search::MatchKind::All,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:797:17: 800:48 (#0),
                    scope: scope[1],
                },
                kind: _23 = hybrid::dfa::Config::match_kind(move _24, move _28) -> [return: bb14, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:793:23: 801:14 (#0),
                    scope: scope[1],
                },
                kind: _19 = hybrid::dfa::Builder::configure(move _20, move _23) -> [return: bb15, unwind: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _18 = &mut (*_19),
            StorageDead(_23),
            StorageDead(_20),
            StorageLive(_29),
            StorageLive(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:802:23: 802:46 (#0),
                    scope: scope[1],
                },
                kind: _30 = nfa::thompson::compiler::Config::new() -> [return: bb16, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:802:23: 802:60 (#0),
                    scope: scope[1],
                },
                kind: _29 = nfa::thompson::compiler::Config::reverse(move _30, const true) -> [return: bb17, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:793:23: 802:61 (#0),
                    scope: scope[1],
                },
                kind: _17 = hybrid::dfa::Builder::thompson(move _18, move _29) -> [return: bb18, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _16 = &(*_17),
            StorageDead(_29),
            StorageDead(_18),
            StorageLive(_31),
            _31 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:793:23: 803:34 (#0),
                    scope: scope[1],
                },
                kind: _15 = hybrid::dfa::Builder::build_many::<P>(move _16, move _31) -> [return: bb19, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:793:23: 803:35 (#3528),
                    scope: scope[1],
                },
                kind: _14 = <core::result::Result<hybrid::dfa::DFA, hybrid::error::BuildError> as core::ops::Try>::branch(move _15) -> [return: bb20, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            PlaceMention(_14),
            _32 = discriminant(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:793:23: 803:35 (#3528),
                    scope: scope[1],
                },
                kind: switchInt(move _32) -> [0: bb23, 1: bb22, otherwise: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:793:23: 803:35 (#3528),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:803:34: 803:35 (#3529),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb24, imaginary: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_36),
            _36 = move ((_14 as Continue).0: hybrid::dfa::DFA),
            _13 = move _36,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:803:34: 803:35 (#0),
                    scope: scope[1],
                },
                kind: drop(_36) -> [return: bb26, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_33),
            _33 = move ((_14 as Break).0: core::result::Result<core::convert::Infallible, hybrid::error::BuildError>),
            StorageLive(_35),
            _35 = move _33,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:793:23: 803:35 (#3528),
                    scope: scope[8],
                },
                kind: _0 = <core::result::Result<hybrid::regex::Regex, hybrid::error::BuildError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, hybrid::error::BuildError>>>::from_residual(move _35) -> [return: bb25, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:803:34: 803:35 (#3529),
                    scope: scope[1],
                },
                kind: drop(_33) -> [return: bb33, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            FakeRead(ForLet(None), _13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:803:35: 803:36 (#0),
                    scope: scope[1],
                },
                kind: drop(_14) -> [return: bb27, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:803:35: 803:36 (#0),
                    scope: scope[1],
                },
                kind: drop(_21) -> [return: bb28, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_14),
            StorageLive(_37),
            StorageLive(_38),
            _38 = &(*_1),
            StorageLive(_39),
            _39 = move _3,
            StorageLive(_40),
            _40 = move _13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:804:12: 804:50 (#0),
                    scope: scope[6],
                },
                kind: _37 = hybrid::regex::Builder::build_from_dfas(move _38, move _39, move _40) -> [return: bb29, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageDead(_39),
            StorageDead(_38),
            _0 = core::result::Result::<hybrid::regex::Regex, hybrid::error::BuildError>::Ok(move _37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:804:50: 804:51 (#0),
                    scope: scope[6],
                },
                kind: drop(_37) -> [return: bb30, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:805:5: 805:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_13) -> [return: bb31, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:805:5: 805:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb32, unwind: bb59],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:805:6: 805:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb39,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:803:35: 803:36 (#0),
                    scope: scope[1],
                },
                kind: drop(_14) -> [return: bb34, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:803:35: 803:36 (#0),
                    scope: scope[1],
                },
                kind: drop(_21) -> [return: bb35, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_14),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:805:5: 805:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb38, unwind: bb59],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:792:53: 792:54 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb37, unwind: bb59],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb38,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:805:6: 805:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb39,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:805:6: 805:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:804:49: 804:50 (#0),
                    scope: scope[6],
                },
                kind: drop(_40) -> [return: bb41, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:804:49: 804:50 (#0),
                    scope: scope[6],
                },
                kind: drop(_39) -> [return: bb43, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:803:35: 803:36 (#0),
                    scope: scope[1],
                },
                kind: drop(_21) -> [return: bb43, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:805:5: 805:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_13) -> [return: bb54, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:803:34: 803:35 (#3528),
                    scope: scope[8],
                },
                kind: drop(_35) -> [return: bb45, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:803:34: 803:35 (#3529),
                    scope: scope[1],
                },
                kind: drop(_33) -> [return: bb46, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:803:35: 803:36 (#0),
                    scope: scope[1],
                },
                kind: drop(_14) -> [return: bb53, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:803:34: 803:35 (#3528),
                    scope: scope[1],
                },
                kind: drop(_15) -> [return: bb53, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:801:13: 801:14 (#0),
                    scope: scope[1],
                },
                kind: drop(_23) -> [return: bb53, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:800:47: 800:48 (#0),
                    scope: scope[1],
                },
                kind: drop(_24) -> [return: bb53, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:799:51: 799:52 (#0),
                    scope: scope[1],
                },
                kind: drop(_25) -> [return: bb53, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:798:36: 798:37 (#0),
                    scope: scope[1],
                },
                kind: drop(_27) -> [return: bb52, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:798:36: 798:37 (#0),
                    scope: scope[1],
                },
                kind: drop(_26) -> [return: bb53, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:803:35: 803:36 (#0),
                    scope: scope[1],
                },
                kind: drop(_21) -> [return: bb54, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:805:5: 805:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb59, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:792:52: 792:53 (#3526),
                    scope: scope[3],
                },
                kind: drop(_11) -> [return: bb56, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:792:52: 792:53 (#3527),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb57, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:792:53: 792:54 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb59, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:792:52: 792:53 (#3526),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb59, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/regex.rs:788:5: 805:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<hybrid::regex::Regex, hybrid::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:791:10: 791:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} hybrid::regex::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:789:9: 789:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/hybrid/regex.rs:790:19: 790:23 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/hybrid/regex.rs:790:9: 790:17 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/regex.rs:790:9: 790:17 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [P/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:790:9: 790:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/hybrid/regex.rs:792:23: 792:53 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/regex.rs:792:13: 792:20 (#0),
                    },
                ),
            ),
        ),
        ty: hybrid::dfa::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:792:13: 792:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, hybrid::error::BuildError>, hybrid::dfa::DFA>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:792:23: 792:53 (#3526),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<hybrid::dfa::DFA, hybrid::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:792:23: 792:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hybrid::dfa::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:792:23: 792:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [P/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:792:43: 792:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:792:52: 792:53 (#3527),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                regex-automata/src/hybrid/regex.rs:792:23: 792:53 (#3526),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/regex.rs:792:52: 792:53 (#3527),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, hybrid::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:792:52: 792:53 (#3527),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:792:52: 792:53 (#3527),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, hybrid::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:792:52: 792:53 (#3527),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                regex-automata/src/hybrid/regex.rs:792:23: 792:53 (#3526),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/regex.rs:792:23: 792:53 (#3526),
                    },
                ),
            ),
        ),
        ty: hybrid::dfa::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:792:23: 792:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/hybrid/regex.rs:793:23: 803:35 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/regex.rs:793:13: 793:20 (#0),
                    },
                ),
            ),
        ),
        ty: hybrid::dfa::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:793:13: 793:20 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, hybrid::error::BuildError>, hybrid::dfa::DFA>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:793:23: 803:35 (#3528),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<hybrid::dfa::DFA, hybrid::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:793:23: 803:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hybrid::dfa::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:793:23: 802:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hybrid::dfa::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:793:23: 802:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hybrid::dfa::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:793:23: 801:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hybrid::dfa::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:793:23: 801:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hybrid::dfa::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:793:23: 795:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hybrid::dfa::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:793:23: 795:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hybrid::dfa::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:793:23: 794:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hybrid::dfa::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:797:17: 800:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hybrid::dfa::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:797:17: 799:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hybrid::dfa::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:797:17: 798:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hybrid::dfa::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:797:17: 797:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::prefilter::Prefilter>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:798:32: 798:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::search::MatchKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:800:33: 800:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::thompson::compiler::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:802:23: 802:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::thompson::compiler::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:802:23: 802:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [P/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:803:25: 803:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:803:34: 803:35 (#3529),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _14,
                                ),
                                regex-automata/src/hybrid/regex.rs:793:23: 803:35 (#3528),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/regex.rs:803:34: 803:35 (#3529),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, hybrid::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:803:34: 803:35 (#3529),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:803:34: 803:35 (#3529),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, hybrid::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:803:34: 803:35 (#3529),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _14,
                                ),
                                regex-automata/src/hybrid/regex.rs:793:23: 803:35 (#3528),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/regex.rs:793:23: 803:35 (#3528),
                    },
                ),
            ),
        ),
        ty: hybrid::dfa::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:793:23: 803:35 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: hybrid::regex::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:804:12: 804:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/hybrid/regex.rs:804:9: 804:51 (#0),
                },
            ),
        ),
        ty: &'{erased} hybrid::regex::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:804:12: 804:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/hybrid/regex.rs:804:9: 804:51 (#0),
                },
            ),
        ),
        ty: hybrid::dfa::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:804:33: 804:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/hybrid/regex.rs:804:9: 804:51 (#0),
                },
            ),
        ),
        ty: hybrid::dfa::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/regex.rs:804:42: 804:49 (#0),
            scope: scope[0],
        },
    },
]