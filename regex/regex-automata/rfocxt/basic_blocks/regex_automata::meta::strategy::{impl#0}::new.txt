[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = core::option::Option::<&str>::None,
            _6 = [move _7],
            StorageDead(_7),
            _5 = [move _6],
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:200:26: 200:58 (#0),
                    scope: scope[0],
                },
                kind: _4 = util::captures::GroupInfo::new::<[[core::option::Option<&str>; 1]; 1], [core::option::Option<&str>; 1], &str>(move _5) -> [return: bb1, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:200:26: 200:67 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::result::Result::<util::captures::GroupInfo, util::captures::GroupInfoError>::unwrap(move _4) -> [return: bb2, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = move _1,
            StorageLive(_11),
            _11 = move _3,
            _9 = meta::strategy::Pre::<P> { pre: move _10, group_info: move _11 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:201:40: 201:41 (#0),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb3, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:201:40: 201:41 (#0),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb4, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:201:9: 201:42 (#0),
                    scope: scope[1],
                },
                kind: _8 = std::sync::Arc::<meta::strategy::Pre<P>>::new(move _9) -> [return: bb5, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = move _8 as std::sync::Arc<dyn meta::strategy::Strategy> (PointerCoercion(Unsize)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:201:41: 201:42 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb6, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:202:5: 202:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb7, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            _0 = move _2 as std::sync::Arc<dyn meta::strategy::Strategy> (PointerCoercion(Unsize)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:202:5: 202:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb8, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:202:5: 202:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb9, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:202:6: 202:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:201:40: 201:41 (#0),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb11, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:201:41: 201:42 (#0),
                    scope: scope[1],
                },
                kind: drop(_9) -> [return: bb12, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:202:5: 202:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:200:66: 200:67 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:202:5: 202:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb15, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:195:5: 202:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::sync::Arc<dyn [Binder { value: Trait(meta::strategy::Strategy), bound_vars: [] }] + '{erased}, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:195:23: 195:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/meta/strategy.rs:195:17: 195:18 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:195:12: 195:15 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:195:12: 195:15 (#0),
                    },
                ),
            ),
        ),
        ty: P/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:195:12: 195:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::sync::Arc<dyn [Binder { value: Trait(meta::strategy::Strategy), bound_vars: [] }] + '{erased}, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:201:9: 201:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:200:26: 200:67 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:200:13: 200:23 (#0),
                    },
                ),
            ),
        ),
        ty: util::captures::GroupInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:200:13: 200:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<util::captures::GroupInfo, util::captures::GroupInfoError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:200:26: 200:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: [[core::option::Option<&'{erased} str>; 1_usize]; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:200:41: 200:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: [core::option::Option<&'{erased} str>; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:200:42: 200:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:200:43: 200:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/strategy.rs:201:9: 201:42 (#0),
                },
            ),
        ),
        ty: std::sync::Arc<meta::strategy::Pre<P/#0>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:201:9: 201:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/strategy.rs:201:9: 201:42 (#0),
                },
            ),
        ),
        ty: meta::strategy::Pre<P/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:201:18: 201:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: P/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:201:24: 201:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::captures::GroupInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:201:29: 201:39 (#0),
            scope: scope[0],
        },
    },
]