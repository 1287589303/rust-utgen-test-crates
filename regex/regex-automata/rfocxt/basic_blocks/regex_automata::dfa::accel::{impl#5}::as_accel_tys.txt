[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = const dfa::accel::ACCEL_CAP,
            _4 = &_5,
            StorageLive(_6),
            StorageLive(_7),
            _7 = const 8_usize,
            _6 = &_7,
            _3 = (move _4, move _6),
            StorageDead(_6),
            StorageDead(_4),
            PlaceMention(_3),
            StorageLive(_8),
            _8 = (_3.0: &usize),
            StorageLive(_9),
            _9 = (_3.1: &usize),
            StorageLive(_10),
            StorageLive(_11),
            _11 = (*_8),
            StorageLive(_12),
            _12 = (*_9),
            _10 = Eq(move _11, move _12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46 (#397),
                    scope: scope[1],
                },
                kind: switchInt(move _10) -> [0: bb2, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            _2 = const (),
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_5),
            StorageDead(_3),
            StorageDead(_2),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            _27 = &((*_1).0: [u8; 8]),
            StorageLive(_28),
            _28 = core::ops::Range::<usize> { start: const 0_usize, end: const 4_usize },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/accel.rs:500:46: 500:52 (#0),
                    scope: scope[0],
                },
                kind: _26 = <[u8; 8] as core::ops::Index<core::ops::Range<usize>>>::index(move _27, move _28) -> [return: bb3, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            StorageLive(_14),
            _14 = core::panicking::AssertKind::Eq,
            FakeRead(ForLet(None), _14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = move _14,
            StorageLive(_17),
            StorageLive(_18),
            _18 = &(*_8),
            _17 = &(*_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = &(*_9),
            _19 = &(*_20),
            StorageLive(_21),
            _21 = core::option::Option::<core::fmt::Arguments<'_>>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114 (#397),
                    scope: scope[2],
                },
                kind: _15 = core::panicking::assert_failed::<usize, usize>(move _16, move _17, move _19, move _21) -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _25 = &(*_26),
            StorageDead(_28),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/accel.rs:500:36: 500:63 (#0),
                    scope: scope[0],
                },
                kind: _24 = <&[u8] as core::convert::TryInto<[u8; 4]>>::try_into(move _25) -> [return: bb4, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/accel.rs:500:36: 500:72 (#0),
                    scope: scope[0],
                },
                kind: _23 = core::result::Result::<[u8; 4], core::array::TryFromSliceError>::unwrap(move _24) -> [return: bb5, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/accel.rs:500:13: 500:73 (#0),
                    scope: scope[0],
                },
                kind: _22 = core::num::<impl u32>::from_ne_bytes(move _23) -> [return: bb6, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            FakeRead(ForLet(None), _22),
            StorageDead(_26),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            StorageLive(_34),
            _34 = &((*_1).0: [u8; 8]),
            StorageLive(_35),
            _35 = core::ops::Range::<usize> { start: const 4_usize, end: const 8_usize },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/accel.rs:502:46: 502:52 (#0),
                    scope: scope[3],
                },
                kind: _33 = <[u8; 8] as core::ops::Index<core::ops::Range<usize>>>::index(move _34, move _35) -> [return: bb7, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _32 = &(*_33),
            StorageDead(_35),
            StorageDead(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/accel.rs:502:36: 502:63 (#0),
                    scope: scope[3],
                },
                kind: _31 = <&[u8] as core::convert::TryInto<[u8; 4]>>::try_into(move _32) -> [return: bb8, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/accel.rs:502:36: 502:72 (#0),
                    scope: scope[3],
                },
                kind: _30 = core::result::Result::<[u8; 4], core::array::TryFromSliceError>::unwrap(move _31) -> [return: bb9, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/accel.rs:502:13: 502:73 (#0),
                    scope: scope[3],
                },
                kind: _29 = core::num::<impl u32>::from_ne_bytes(move _30) -> [return: bb10, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            FakeRead(ForLet(None), _29),
            StorageDead(_33),
            StorageLive(_36),
            _36 = _22,
            StorageLive(_37),
            _37 = _29,
            _0 = [move _36, move _37],
            StorageDead(_37),
            StorageDead(_36),
            StorageDead(_29),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/accel.rs:504:6: 504:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/accel.rs:496:5: 504:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: [u32; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:496:31: 496:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} dfa::accel::Accel,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:496:21: 496:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:9: 48:10 (#397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} usize, &'{erased} usize),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32 (#397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:16: 38:22 (#397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:883 ~ regex_automata[00dd]::dfa::accel::ACCEL_CAP),
            },
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:497:20: 497:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31 (#397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:497:31: 497:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32 (#397),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:13: 39:34 (#397),
                    },
                ),
            ),
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14: 39:22 (#397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32 (#397),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:13: 39:34 (#397),
                    },
                ),
            ),
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24: 39:33 (#397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#397),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46 (#397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#397),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:22: 40:31 (#397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#397),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:35: 40:45 (#397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#397),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:47: 46:18 (#397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:32: 41:65 (#397),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29 (#397),
                    },
                ),
            ),
        ),
        ty: core::panicking::AssertKind,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29 (#397),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114 (#397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::panicking::AssertKind,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:54: 45:58 (#397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:60: 45:70 (#397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:60: 45:70 (#397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:72: 45:83 (#397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:72: 45:83 (#397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::fmt::Arguments<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:85: 45:113 (#397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/accel.rs:500:13: 500:73 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/accel.rs:499:13: 499:18 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:499:13: 499:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: [u8; 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:500:36: 500:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<[u8; 4_usize], core::array::TryFromSliceError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:500:36: 500:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:500:36: 500:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:500:46: 500:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8; 8_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:500:36: 500:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:500:47: 500:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/accel.rs:502:13: 502:73 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/accel.rs:501:13: 501:19 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:501:13: 501:19 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: [u8; 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:502:36: 502:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<[u8; 4_usize], core::array::TryFromSliceError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:502:36: 502:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:502:36: 502:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:502:46: 502:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8; 8_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:502:36: 502:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:502:47: 502:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/accel.rs:503:9: 503:24 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:503:10: 503:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/accel.rs:503:9: 503:24 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/accel.rs:503:17: 503:23 (#0),
            scope: scope[0],
        },
    },
]