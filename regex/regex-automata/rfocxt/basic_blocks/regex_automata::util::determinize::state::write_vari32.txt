[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/state.rs:736:18: 736:29 (#0),
                    scope: scope[0],
                },
                kind: _4 = <i32 as util::int::I32>::to_bits(move _5) -> [return: bb1, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            _6 = const 1_i32 as u32 (IntToInt),
            _7 = Lt(move _6, const 32_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/state.rs:736:18: 736:34 (#0),
                    scope: scope[0],
                },
                kind: assert(move _7, "attempt to shift left by `{}`, which would overflow", const 1_i32) -> [success: bb2, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = Shl(move _4, const 1_i32),
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = _2,
            _9 = Lt(move _10, const 0_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/state.rs:737:8: 737:13 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _9) -> [0: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageLive(_11),
            _11 = _3,
            _3 = Not(move _11),
            StorageDead(_11),
            _8 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/state.rs:737:5: 739:6 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            _8 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/state.rs:737:5: 739:6 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            StorageLive(_12),
            _12 = &mut (*_1),
            StorageLive(_13),
            _13 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/state.rs:740:5: 740:27 (#0),
                    scope: scope[1],
                },
                kind: _0 = util::determinize::state::write_varu32(move _12, move _13) -> [return: bb6, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/state.rs:741:2: 741:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/determinize/state.rs:735:1: 741:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/state.rs:735:44: 735:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/determinize/state.rs:735:23: 735:35 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/determinize/state.rs:735:17: 735:21 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/state.rs:735:17: 735:21 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<u8, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/state.rs:735:17: 735:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/determinize/state.rs:735:40: 735:43 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/determinize/state.rs:735:37: 735:38 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/state.rs:735:37: 735:38 (#0),
                    },
                ),
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/state.rs:735:37: 735:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/determinize/state.rs:736:18: 736:34 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/determinize/state.rs:736:9: 736:15 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/state.rs:736:9: 736:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/state.rs:736:18: 736:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/state.rs:736:18: 736:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/state.rs:736:18: 736:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/state.rs:736:18: 736:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/state.rs:737:5: 739:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/state.rs:737:8: 737:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/state.rs:737:8: 737:9 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/state.rs:738:15: 738:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/state.rs:740:5: 740:27 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<u8, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/state.rs:740:18: 740:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/determinize/state.rs:740:5: 740:27 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/determinize/state.rs:740:24: 740:26 (#0),
            scope: scope[0],
        },
    },
]