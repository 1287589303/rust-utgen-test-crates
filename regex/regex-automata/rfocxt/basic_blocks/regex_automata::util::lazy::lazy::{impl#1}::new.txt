[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/lazy.rs:152:38: 152:59 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::ptr::null_mut::<T>() -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/lazy.rs:152:23: 152:60 (#0),
                    scope: scope[0],
                },
                kind: _2 = core::sync::atomic::AtomicPtr::<T>::new(move _3) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageLive(_4),
            _4 = move _1,
            StorageLive(_5),
            _5 = core::marker::PhantomData::<std::boxed::Box<T>>,
            _0 = util::lazy::lazy::Lazy::<T, F> { data: move _2, create: move _4, owned: move _5 },
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/lazy.rs:155:13: 155:14 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/lazy.rs:156:9: 156:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb4, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/lazy.rs:156:10: 156:10 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/lazy.rs:156:9: 156:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/lazy.rs:150:9: 156:10 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::lazy::lazy::Lazy<T/#0, F/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/lazy.rs:150:47: 150:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/lazy.rs:150:41: 150:42 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/lazy.rs:150:33: 150:39 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/lazy.rs:150:33: 150:39 (#0),
                    },
                ),
            ),
        ),
        ty: F/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/lazy.rs:150:33: 150:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::sync::atomic::AtomicPtr<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/lazy.rs:152:23: 152:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/lazy.rs:151:13: 155:14 (#0),
                },
            ),
        ),
        ty: *mut T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/lazy.rs:152:38: 152:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: F/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/lazy.rs:153:17: 153:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::marker::PhantomData<std::boxed::Box<T/#0, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/lazy.rs:154:24: 154:35 (#0),
            scope: scope[0],
        },
    },
]