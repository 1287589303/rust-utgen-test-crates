[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = {closure@regex-automata/src/nfa/thompson/range_trie.rs:789:21: 789:44},
            FakeRead(ForLet(None), _3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &_3,
            _4 = {closure@regex-automata/src/nfa/thompson/range_trie.rs:793:19: 793:22} { range: move _5 },
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &_3,
            _6 = {closure@regex-automata/src/nfa/thompson/range_trie.rs:794:19: 794:22} { range: move _7 },
            StorageDead(_7),
            FakeRead(ForLet(None), _6),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &_3,
            _8 = {closure@regex-automata/src/nfa/thompson/range_trie.rs:795:20: 795:23} { range: move _9 },
            StorageDead(_9),
            FakeRead(ForLet(None), _8),
            StorageLive(_14),
            StorageLive(_15),
            _15 = (_1.0: u8),
            StorageLive(_16),
            _16 = (_1.1: u8),
            StorageLive(_17),
            _17 = (_2.0: u8),
            StorageLive(_18),
            _18 = (_2.1: u8),
            _14 = (move _15, move _16, move _17, move _18),
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_15),
            PlaceMention(_14),
            StorageLive(_10),
            _10 = (_14.0: u8),
            StorageLive(_11),
            _11 = (_14.1: u8),
            StorageLive(_12),
            _12 = (_14.2: u8),
            StorageLive(_13),
            _13 = (_14.3: u8),
            StorageDead(_14),
            StorageLive(_19),
            StorageLive(_20),
            _20 = _11,
            StorageLive(_21),
            _21 = _12,
            _19 = Lt(move _20, move _21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:12: 800:17 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _19) -> [0: bb2, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:27: 803:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb4,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_20),
            StorageLive(_22),
            StorageLive(_23),
            _23 = _13,
            StorageLive(_24),
            _24 = _10,
            _22 = Lt(move _23, move _24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:21: 800:26 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _22) -> [0: bb5, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:27: 803:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb4,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::option::Option::<nfa::thompson::range_trie::Split>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb152,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageDead(_23),
            StorageLive(_25),
            StorageLive(_26),
            _26 = _10,
            StorageLive(_27),
            _27 = _12,
            _25 = Eq(move _26, move _27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:803:19: 803:25 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _25) -> [0: bb12, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_26),
            StorageLive(_28),
            StorageLive(_29),
            _29 = _11,
            StorageLive(_30),
            _30 = _13,
            _28 = Eq(move _29, move _30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:803:29: 803:35 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _28) -> [0: bb11, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_29),
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            _33 = &_8,
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            _36 = _10,
            StorageLive(_37),
            _37 = _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:805:37: 805:42 (#0),
                    scope: scope[5],
                },
                kind: _35 = core::ops::RangeInclusive::<u8>::new(move _36, move _37) -> [return: bb8, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageDead(_36),
            _34 = (move _35,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:805:32: 805:43 (#0),
                    scope: scope[5],
                },
                kind: _32 = <{closure@regex-automata/src/nfa/thompson/range_trie.rs:795:20: 795:23} as core::ops::Fn<(core::ops::RangeInclusive<u8>,)>>::call(move _33, move _34) -> [return: bb9, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            StorageDead(_34),
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:805:18: 805:44 (#0),
                    scope: scope[5],
                },
                kind: _31 = nfa::thompson::range_trie::Split::parts1(move _32) -> [return: bb10, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            _0 = core::option::Option::<nfa::thompson::range_trie::Split>::Some(move _31),
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:803:16: 838:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb151,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_38),
            StorageLive(_39),
            _39 = _10,
            StorageLive(_40),
            _40 = _12,
            _38 = Eq(move _39, move _40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:806:19: 806:25 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _38) -> [0: bb23, otherwise: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageDead(_39),
            StorageLive(_41),
            StorageLive(_42),
            _42 = _11,
            StorageLive(_43),
            _43 = _13,
            _41 = Lt(move _42, move _43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:806:29: 806:34 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _41) -> [0: bb22, otherwise: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            StorageDead(_42),
            StorageLive(_44),
            StorageLive(_45),
            StorageLive(_46),
            _46 = &_8,
            StorageLive(_47),
            StorageLive(_48),
            StorageLive(_49),
            _49 = _10,
            StorageLive(_50),
            _50 = _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:808:37: 808:42 (#0),
                    scope: scope[5],
                },
                kind: _48 = core::ops::RangeInclusive::<u8>::new(move _49, move _50) -> [return: bb16, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            StorageDead(_49),
            _47 = (move _48,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:808:32: 808:43 (#0),
                    scope: scope[5],
                },
                kind: _45 = <{closure@regex-automata/src/nfa/thompson/range_trie.rs:795:20: 795:23} as core::ops::Fn<(core::ops::RangeInclusive<u8>,)>>::call(move _46, move _47) -> [return: bb17, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
            StorageDead(_47),
            StorageDead(_46),
            StorageLive(_51),
            StorageLive(_52),
            _52 = &_6,
            StorageLive(_53),
            StorageLive(_54),
            StorageLive(_55),
            StorageLive(_56),
            _56 = _11,
            _57 = AddWithOverflow(_56, const 1_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:808:49: 808:54 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_57.1: bool), "attempt to compute `{} + {}`, which would overflow", move _56, const 1_u8) -> [success: bb18, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _55 = move (_57.0: u8),
            StorageDead(_56),
            StorageLive(_58),
            _58 = _13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:808:49: 808:58 (#0),
                    scope: scope[5],
                },
                kind: _54 = core::ops::RangeInclusive::<u8>::new(move _55, move _58) -> [return: bb19, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
            StorageDead(_55),
            _53 = (move _54,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:808:45: 808:59 (#0),
                    scope: scope[5],
                },
                kind: _51 = <{closure@regex-automata/src/nfa/thompson/range_trie.rs:794:19: 794:22} as core::ops::Fn<(core::ops::RangeInclusive<u8>,)>>::call(move _52, move _53) -> [return: bb20, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            StorageDead(_53),
            StorageDead(_52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:808:18: 808:60 (#0),
                    scope: scope[5],
                },
                kind: _44 = nfa::thompson::range_trie::Split::parts2(move _45, move _51) -> [return: bb21, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
            StorageDead(_45),
            _0 = core::option::Option::<nfa::thompson::range_trie::Split>::Some(move _44),
            StorageDead(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:806:16: 838:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb150,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            StorageDead(_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb24,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageDead(_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb24,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_59),
            StorageLive(_60),
            _60 = _11,
            StorageLive(_61),
            _61 = _13,
            _59 = Eq(move _60, move _61),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:809:19: 809:25 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _59) -> [0: bb34, otherwise: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_61),
            StorageDead(_60),
            StorageLive(_62),
            StorageLive(_63),
            _63 = _10,
            StorageLive(_64),
            _64 = _12,
            _62 = Gt(move _63, move _64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:809:29: 809:34 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _62) -> [0: bb33, otherwise: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
            StorageDead(_63),
            StorageLive(_65),
            StorageLive(_66),
            StorageLive(_67),
            _67 = &_6,
            StorageLive(_68),
            StorageLive(_69),
            StorageLive(_70),
            _70 = _12,
            StorageLive(_71),
            StorageLive(_72),
            _72 = _10,
            _73 = SubWithOverflow(_72, const 1_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:811:40: 811:45 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_73.1: bool), "attempt to compute `{} - {}`, which would overflow", move _72, const 1_u8) -> [success: bb27, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _71 = move (_73.0: u8),
            StorageDead(_72),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:811:36: 811:45 (#0),
                    scope: scope[5],
                },
                kind: _69 = core::ops::RangeInclusive::<u8>::new(move _70, move _71) -> [return: bb28, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
            StorageDead(_70),
            _68 = (move _69,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:811:32: 811:46 (#0),
                    scope: scope[5],
                },
                kind: _66 = <{closure@regex-automata/src/nfa/thompson/range_trie.rs:794:19: 794:22} as core::ops::Fn<(core::ops::RangeInclusive<u8>,)>>::call(move _67, move _68) -> [return: bb29, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_69),
            StorageDead(_68),
            StorageDead(_67),
            StorageLive(_74),
            StorageLive(_75),
            _75 = &_8,
            StorageLive(_76),
            StorageLive(_77),
            StorageLive(_78),
            _78 = _10,
            StorageLive(_79),
            _79 = _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:811:53: 811:58 (#0),
                    scope: scope[5],
                },
                kind: _77 = core::ops::RangeInclusive::<u8>::new(move _78, move _79) -> [return: bb30, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_79),
            StorageDead(_78),
            _76 = (move _77,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:811:48: 811:59 (#0),
                    scope: scope[5],
                },
                kind: _74 = <{closure@regex-automata/src/nfa/thompson/range_trie.rs:795:20: 795:23} as core::ops::Fn<(core::ops::RangeInclusive<u8>,)>>::call(move _75, move _76) -> [return: bb31, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_77),
            StorageDead(_76),
            StorageDead(_75),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:811:18: 811:60 (#0),
                    scope: scope[5],
                },
                kind: _65 = nfa::thompson::range_trie::Split::parts2(move _66, move _74) -> [return: bb32, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_74),
            StorageDead(_66),
            _0 = core::option::Option::<nfa::thompson::range_trie::Split>::Some(move _65),
            StorageDead(_65),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:809:16: 838:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb149,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
            StorageDead(_63),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb35,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_61),
            StorageDead(_60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb35,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_80),
            StorageLive(_81),
            _81 = _12,
            StorageLive(_82),
            _82 = _10,
            _80 = Eq(move _81, move _82),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:812:19: 812:25 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _80) -> [0: bb45, otherwise: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_82),
            StorageDead(_81),
            StorageLive(_83),
            StorageLive(_84),
            _84 = _13,
            StorageLive(_85),
            _85 = _11,
            _83 = Lt(move _84, move _85),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:812:29: 812:34 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _83) -> [0: bb44, otherwise: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_85),
            StorageDead(_84),
            StorageLive(_86),
            StorageLive(_87),
            StorageLive(_88),
            _88 = &_8,
            StorageLive(_89),
            StorageLive(_90),
            StorageLive(_91),
            _91 = _12,
            StorageLive(_92),
            _92 = _13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:814:37: 814:42 (#0),
                    scope: scope[5],
                },
                kind: _90 = core::ops::RangeInclusive::<u8>::new(move _91, move _92) -> [return: bb38, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_92),
            StorageDead(_91),
            _89 = (move _90,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:814:32: 814:43 (#0),
                    scope: scope[5],
                },
                kind: _87 = <{closure@regex-automata/src/nfa/thompson/range_trie.rs:795:20: 795:23} as core::ops::Fn<(core::ops::RangeInclusive<u8>,)>>::call(move _88, move _89) -> [return: bb39, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_90),
            StorageDead(_89),
            StorageDead(_88),
            StorageLive(_93),
            StorageLive(_94),
            _94 = &_4,
            StorageLive(_95),
            StorageLive(_96),
            StorageLive(_97),
            StorageLive(_98),
            _98 = _13,
            _99 = AddWithOverflow(_98, const 1_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:814:49: 814:54 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_99.1: bool), "attempt to compute `{} + {}`, which would overflow", move _98, const 1_u8) -> [success: bb40, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _97 = move (_99.0: u8),
            StorageDead(_98),
            StorageLive(_100),
            _100 = _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:814:49: 814:58 (#0),
                    scope: scope[5],
                },
                kind: _96 = core::ops::RangeInclusive::<u8>::new(move _97, move _100) -> [return: bb41, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_100),
            StorageDead(_97),
            _95 = (move _96,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:814:45: 814:59 (#0),
                    scope: scope[5],
                },
                kind: _93 = <{closure@regex-automata/src/nfa/thompson/range_trie.rs:793:19: 793:22} as core::ops::Fn<(core::ops::RangeInclusive<u8>,)>>::call(move _94, move _95) -> [return: bb42, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_96),
            StorageDead(_95),
            StorageDead(_94),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:814:18: 814:60 (#0),
                    scope: scope[5],
                },
                kind: _86 = nfa::thompson::range_trie::Split::parts2(move _87, move _93) -> [return: bb43, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_93),
            StorageDead(_87),
            _0 = core::option::Option::<nfa::thompson::range_trie::Split>::Some(move _86),
            StorageDead(_86),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:812:16: 838:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb148,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_85),
            StorageDead(_84),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb46,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_82),
            StorageDead(_81),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb46,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_101),
            StorageLive(_102),
            _102 = _13,
            StorageLive(_103),
            _103 = _11,
            _101 = Eq(move _102, move _103),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:815:19: 815:25 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _101) -> [0: bb56, otherwise: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_103),
            StorageDead(_102),
            StorageLive(_104),
            StorageLive(_105),
            _105 = _12,
            StorageLive(_106),
            _106 = _10,
            _104 = Gt(move _105, move _106),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:815:29: 815:34 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _104) -> [0: bb55, otherwise: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_106),
            StorageDead(_105),
            StorageLive(_107),
            StorageLive(_108),
            StorageLive(_109),
            _109 = &_4,
            StorageLive(_110),
            StorageLive(_111),
            StorageLive(_112),
            _112 = _10,
            StorageLive(_113),
            StorageLive(_114),
            _114 = _12,
            _115 = SubWithOverflow(_114, const 1_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:817:40: 817:45 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_115.1: bool), "attempt to compute `{} - {}`, which would overflow", move _114, const 1_u8) -> [success: bb49, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _113 = move (_115.0: u8),
            StorageDead(_114),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:817:36: 817:45 (#0),
                    scope: scope[5],
                },
                kind: _111 = core::ops::RangeInclusive::<u8>::new(move _112, move _113) -> [return: bb50, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_113),
            StorageDead(_112),
            _110 = (move _111,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:817:32: 817:46 (#0),
                    scope: scope[5],
                },
                kind: _108 = <{closure@regex-automata/src/nfa/thompson/range_trie.rs:793:19: 793:22} as core::ops::Fn<(core::ops::RangeInclusive<u8>,)>>::call(move _109, move _110) -> [return: bb51, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_111),
            StorageDead(_110),
            StorageDead(_109),
            StorageLive(_116),
            StorageLive(_117),
            _117 = &_8,
            StorageLive(_118),
            StorageLive(_119),
            StorageLive(_120),
            _120 = _12,
            StorageLive(_121),
            _121 = _13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:817:53: 817:58 (#0),
                    scope: scope[5],
                },
                kind: _119 = core::ops::RangeInclusive::<u8>::new(move _120, move _121) -> [return: bb52, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_121),
            StorageDead(_120),
            _118 = (move _119,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:817:48: 817:59 (#0),
                    scope: scope[5],
                },
                kind: _116 = <{closure@regex-automata/src/nfa/thompson/range_trie.rs:795:20: 795:23} as core::ops::Fn<(core::ops::RangeInclusive<u8>,)>>::call(move _117, move _118) -> [return: bb53, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_119),
            StorageDead(_118),
            StorageDead(_117),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:817:18: 817:60 (#0),
                    scope: scope[5],
                },
                kind: _107 = nfa::thompson::range_trie::Split::parts2(move _108, move _116) -> [return: bb54, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_116),
            StorageDead(_108),
            _0 = core::option::Option::<nfa::thompson::range_trie::Split>::Some(move _107),
            StorageDead(_107),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:815:16: 838:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb147,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_106),
            StorageDead(_105),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb57,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_103),
            StorageDead(_102),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb57,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_122),
            StorageLive(_123),
            _123 = _10,
            StorageLive(_124),
            _124 = _12,
            _122 = Gt(move _123, move _124),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:818:19: 818:24 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _122) -> [0: bb70, otherwise: bb58],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_124),
            StorageDead(_123),
            StorageLive(_125),
            StorageLive(_126),
            _126 = _11,
            StorageLive(_127),
            _127 = _13,
            _125 = Lt(move _126, move _127),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:818:28: 818:33 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _125) -> [0: bb69, otherwise: bb59],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_127),
            StorageDead(_126),
            StorageLive(_128),
            StorageLive(_129),
            StorageLive(_130),
            _130 = &_6,
            StorageLive(_131),
            StorageLive(_132),
            StorageLive(_133),
            _133 = _12,
            StorageLive(_134),
            StorageLive(_135),
            _135 = _10,
            _136 = SubWithOverflow(_135, const 1_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:820:40: 820:45 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_136.1: bool), "attempt to compute `{} - {}`, which would overflow", move _135, const 1_u8) -> [success: bb60, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _134 = move (_136.0: u8),
            StorageDead(_135),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:820:36: 820:45 (#0),
                    scope: scope[5],
                },
                kind: _132 = core::ops::RangeInclusive::<u8>::new(move _133, move _134) -> [return: bb61, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_134),
            StorageDead(_133),
            _131 = (move _132,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:820:32: 820:46 (#0),
                    scope: scope[5],
                },
                kind: _129 = <{closure@regex-automata/src/nfa/thompson/range_trie.rs:794:19: 794:22} as core::ops::Fn<(core::ops::RangeInclusive<u8>,)>>::call(move _130, move _131) -> [return: bb62, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_132),
            StorageDead(_131),
            StorageDead(_130),
            StorageLive(_137),
            StorageLive(_138),
            _138 = &_8,
            StorageLive(_139),
            StorageLive(_140),
            StorageLive(_141),
            _141 = _10,
            StorageLive(_142),
            _142 = _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:820:53: 820:58 (#0),
                    scope: scope[5],
                },
                kind: _140 = core::ops::RangeInclusive::<u8>::new(move _141, move _142) -> [return: bb63, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_142),
            StorageDead(_141),
            _139 = (move _140,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:820:48: 820:59 (#0),
                    scope: scope[5],
                },
                kind: _137 = <{closure@regex-automata/src/nfa/thompson/range_trie.rs:795:20: 795:23} as core::ops::Fn<(core::ops::RangeInclusive<u8>,)>>::call(move _138, move _139) -> [return: bb64, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_140),
            StorageDead(_139),
            StorageDead(_138),
            StorageLive(_143),
            StorageLive(_144),
            _144 = &_6,
            StorageLive(_145),
            StorageLive(_146),
            StorageLive(_147),
            StorageLive(_148),
            _148 = _11,
            _149 = AddWithOverflow(_148, const 1_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:820:65: 820:70 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_149.1: bool), "attempt to compute `{} + {}`, which would overflow", move _148, const 1_u8) -> [success: bb65, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _147 = move (_149.0: u8),
            StorageDead(_148),
            StorageLive(_150),
            _150 = _13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:820:65: 820:74 (#0),
                    scope: scope[5],
                },
                kind: _146 = core::ops::RangeInclusive::<u8>::new(move _147, move _150) -> [return: bb66, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_150),
            StorageDead(_147),
            _145 = (move _146,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:820:61: 820:75 (#0),
                    scope: scope[5],
                },
                kind: _143 = <{closure@regex-automata/src/nfa/thompson/range_trie.rs:794:19: 794:22} as core::ops::Fn<(core::ops::RangeInclusive<u8>,)>>::call(move _144, move _145) -> [return: bb67, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_146),
            StorageDead(_145),
            StorageDead(_144),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:820:18: 820:76 (#0),
                    scope: scope[5],
                },
                kind: _128 = nfa::thompson::range_trie::Split::parts3(move _129, move _137, move _143) -> [return: bb68, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_143),
            StorageDead(_137),
            StorageDead(_129),
            _0 = core::option::Option::<nfa::thompson::range_trie::Split>::Some(move _128),
            StorageDead(_128),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:818:16: 838:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb146,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_127),
            StorageDead(_126),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb71,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_124),
            StorageDead(_123),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb71,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_151),
            StorageLive(_152),
            _152 = _12,
            StorageLive(_153),
            _153 = _10,
            _151 = Gt(move _152, move _153),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:821:19: 821:24 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _151) -> [0: bb84, otherwise: bb72],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_153),
            StorageDead(_152),
            StorageLive(_154),
            StorageLive(_155),
            _155 = _13,
            StorageLive(_156),
            _156 = _11,
            _154 = Lt(move _155, move _156),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:821:28: 821:33 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _154) -> [0: bb83, otherwise: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_156),
            StorageDead(_155),
            StorageLive(_157),
            StorageLive(_158),
            StorageLive(_159),
            _159 = &_4,
            StorageLive(_160),
            StorageLive(_161),
            StorageLive(_162),
            _162 = _10,
            StorageLive(_163),
            StorageLive(_164),
            _164 = _12,
            _165 = SubWithOverflow(_164, const 1_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:823:40: 823:45 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_165.1: bool), "attempt to compute `{} - {}`, which would overflow", move _164, const 1_u8) -> [success: bb74, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _163 = move (_165.0: u8),
            StorageDead(_164),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:823:36: 823:45 (#0),
                    scope: scope[5],
                },
                kind: _161 = core::ops::RangeInclusive::<u8>::new(move _162, move _163) -> [return: bb75, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_163),
            StorageDead(_162),
            _160 = (move _161,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:823:32: 823:46 (#0),
                    scope: scope[5],
                },
                kind: _158 = <{closure@regex-automata/src/nfa/thompson/range_trie.rs:793:19: 793:22} as core::ops::Fn<(core::ops::RangeInclusive<u8>,)>>::call(move _159, move _160) -> [return: bb76, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_161),
            StorageDead(_160),
            StorageDead(_159),
            StorageLive(_166),
            StorageLive(_167),
            _167 = &_8,
            StorageLive(_168),
            StorageLive(_169),
            StorageLive(_170),
            _170 = _12,
            StorageLive(_171),
            _171 = _13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:823:53: 823:58 (#0),
                    scope: scope[5],
                },
                kind: _169 = core::ops::RangeInclusive::<u8>::new(move _170, move _171) -> [return: bb77, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_171),
            StorageDead(_170),
            _168 = (move _169,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:823:48: 823:59 (#0),
                    scope: scope[5],
                },
                kind: _166 = <{closure@regex-automata/src/nfa/thompson/range_trie.rs:795:20: 795:23} as core::ops::Fn<(core::ops::RangeInclusive<u8>,)>>::call(move _167, move _168) -> [return: bb78, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_169),
            StorageDead(_168),
            StorageDead(_167),
            StorageLive(_172),
            StorageLive(_173),
            _173 = &_4,
            StorageLive(_174),
            StorageLive(_175),
            StorageLive(_176),
            StorageLive(_177),
            _177 = _13,
            _178 = AddWithOverflow(_177, const 1_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:823:65: 823:70 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_178.1: bool), "attempt to compute `{} + {}`, which would overflow", move _177, const 1_u8) -> [success: bb79, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _176 = move (_178.0: u8),
            StorageDead(_177),
            StorageLive(_179),
            _179 = _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:823:65: 823:74 (#0),
                    scope: scope[5],
                },
                kind: _175 = core::ops::RangeInclusive::<u8>::new(move _176, move _179) -> [return: bb80, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_179),
            StorageDead(_176),
            _174 = (move _175,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:823:61: 823:75 (#0),
                    scope: scope[5],
                },
                kind: _172 = <{closure@regex-automata/src/nfa/thompson/range_trie.rs:793:19: 793:22} as core::ops::Fn<(core::ops::RangeInclusive<u8>,)>>::call(move _173, move _174) -> [return: bb81, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_175),
            StorageDead(_174),
            StorageDead(_173),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:823:18: 823:76 (#0),
                    scope: scope[5],
                },
                kind: _157 = nfa::thompson::range_trie::Split::parts3(move _158, move _166, move _172) -> [return: bb82, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_172),
            StorageDead(_166),
            StorageDead(_158),
            _0 = core::option::Option::<nfa::thompson::range_trie::Split>::Some(move _157),
            StorageDead(_157),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:821:16: 838:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb145,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_156),
            StorageDead(_155),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb85,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_153),
            StorageDead(_152),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb85,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_180),
            StorageLive(_181),
            _181 = _11,
            StorageLive(_182),
            _182 = _12,
            _180 = Eq(move _181, move _182),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:824:19: 824:25 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _180) -> [0: bb98, otherwise: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_182),
            StorageDead(_181),
            StorageLive(_183),
            StorageLive(_184),
            _184 = _10,
            StorageLive(_185),
            _185 = _13,
            _183 = Lt(move _184, move _185),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:824:29: 824:34 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _183) -> [0: bb97, otherwise: bb87],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_185),
            StorageDead(_184),
            StorageLive(_186),
            StorageLive(_187),
            StorageLive(_188),
            _188 = &_4,
            StorageLive(_189),
            StorageLive(_190),
            StorageLive(_191),
            _191 = _10,
            StorageLive(_192),
            StorageLive(_193),
            _193 = _11,
            _194 = SubWithOverflow(_193, const 1_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:826:40: 826:45 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_194.1: bool), "attempt to compute `{} - {}`, which would overflow", move _193, const 1_u8) -> [success: bb88, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _192 = move (_194.0: u8),
            StorageDead(_193),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:826:36: 826:45 (#0),
                    scope: scope[5],
                },
                kind: _190 = core::ops::RangeInclusive::<u8>::new(move _191, move _192) -> [return: bb89, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_192),
            StorageDead(_191),
            _189 = (move _190,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:826:32: 826:46 (#0),
                    scope: scope[5],
                },
                kind: _187 = <{closure@regex-automata/src/nfa/thompson/range_trie.rs:793:19: 793:22} as core::ops::Fn<(core::ops::RangeInclusive<u8>,)>>::call(move _188, move _189) -> [return: bb90, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_190),
            StorageDead(_189),
            StorageDead(_188),
            StorageLive(_195),
            StorageLive(_196),
            _196 = &_8,
            StorageLive(_197),
            StorageLive(_198),
            StorageLive(_199),
            _199 = _11,
            StorageLive(_200),
            _200 = _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:826:53: 826:58 (#0),
                    scope: scope[5],
                },
                kind: _198 = core::ops::RangeInclusive::<u8>::new(move _199, move _200) -> [return: bb91, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_200),
            StorageDead(_199),
            _197 = (move _198,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:826:48: 826:59 (#0),
                    scope: scope[5],
                },
                kind: _195 = <{closure@regex-automata/src/nfa/thompson/range_trie.rs:795:20: 795:23} as core::ops::Fn<(core::ops::RangeInclusive<u8>,)>>::call(move _196, move _197) -> [return: bb92, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_198),
            StorageDead(_197),
            StorageDead(_196),
            StorageLive(_201),
            StorageLive(_202),
            _202 = &_6,
            StorageLive(_203),
            StorageLive(_204),
            StorageLive(_205),
            StorageLive(_206),
            _206 = _11,
            _207 = AddWithOverflow(_206, const 1_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:826:65: 826:70 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_207.1: bool), "attempt to compute `{} + {}`, which would overflow", move _206, const 1_u8) -> [success: bb93, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _205 = move (_207.0: u8),
            StorageDead(_206),
            StorageLive(_208),
            _208 = _13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:826:65: 826:74 (#0),
                    scope: scope[5],
                },
                kind: _204 = core::ops::RangeInclusive::<u8>::new(move _205, move _208) -> [return: bb94, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_208),
            StorageDead(_205),
            _203 = (move _204,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:826:61: 826:75 (#0),
                    scope: scope[5],
                },
                kind: _201 = <{closure@regex-automata/src/nfa/thompson/range_trie.rs:794:19: 794:22} as core::ops::Fn<(core::ops::RangeInclusive<u8>,)>>::call(move _202, move _203) -> [return: bb95, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_204),
            StorageDead(_203),
            StorageDead(_202),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:826:18: 826:76 (#0),
                    scope: scope[5],
                },
                kind: _186 = nfa::thompson::range_trie::Split::parts3(move _187, move _195, move _201) -> [return: bb96, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_201),
            StorageDead(_195),
            StorageDead(_187),
            _0 = core::option::Option::<nfa::thompson::range_trie::Split>::Some(move _186),
            StorageDead(_186),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:824:16: 838:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb144,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_185),
            StorageDead(_184),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb99,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_182),
            StorageDead(_181),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb99,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_209),
            StorageLive(_210),
            _210 = _13,
            StorageLive(_211),
            _211 = _10,
            _209 = Eq(move _210, move _211),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:827:19: 827:25 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _209) -> [0: bb112, otherwise: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_211),
            StorageDead(_210),
            StorageLive(_212),
            StorageLive(_213),
            _213 = _12,
            StorageLive(_214),
            _214 = _11,
            _212 = Lt(move _213, move _214),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:827:29: 827:34 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _212) -> [0: bb111, otherwise: bb101],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_214),
            StorageDead(_213),
            StorageLive(_215),
            StorageLive(_216),
            StorageLive(_217),
            _217 = &_6,
            StorageLive(_218),
            StorageLive(_219),
            StorageLive(_220),
            _220 = _12,
            StorageLive(_221),
            StorageLive(_222),
            _222 = _13,
            _223 = SubWithOverflow(_222, const 1_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:829:40: 829:45 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_223.1: bool), "attempt to compute `{} - {}`, which would overflow", move _222, const 1_u8) -> [success: bb102, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _221 = move (_223.0: u8),
            StorageDead(_222),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:829:36: 829:45 (#0),
                    scope: scope[5],
                },
                kind: _219 = core::ops::RangeInclusive::<u8>::new(move _220, move _221) -> [return: bb103, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_221),
            StorageDead(_220),
            _218 = (move _219,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:829:32: 829:46 (#0),
                    scope: scope[5],
                },
                kind: _216 = <{closure@regex-automata/src/nfa/thompson/range_trie.rs:794:19: 794:22} as core::ops::Fn<(core::ops::RangeInclusive<u8>,)>>::call(move _217, move _218) -> [return: bb104, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_219),
            StorageDead(_218),
            StorageDead(_217),
            StorageLive(_224),
            StorageLive(_225),
            _225 = &_8,
            StorageLive(_226),
            StorageLive(_227),
            StorageLive(_228),
            _228 = _13,
            StorageLive(_229),
            _229 = _13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:829:53: 829:58 (#0),
                    scope: scope[5],
                },
                kind: _227 = core::ops::RangeInclusive::<u8>::new(move _228, move _229) -> [return: bb105, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_229),
            StorageDead(_228),
            _226 = (move _227,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:829:48: 829:59 (#0),
                    scope: scope[5],
                },
                kind: _224 = <{closure@regex-automata/src/nfa/thompson/range_trie.rs:795:20: 795:23} as core::ops::Fn<(core::ops::RangeInclusive<u8>,)>>::call(move _225, move _226) -> [return: bb106, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_227),
            StorageDead(_226),
            StorageDead(_225),
            StorageLive(_230),
            StorageLive(_231),
            _231 = &_4,
            StorageLive(_232),
            StorageLive(_233),
            StorageLive(_234),
            StorageLive(_235),
            _235 = _13,
            _236 = AddWithOverflow(_235, const 1_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:829:65: 829:70 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_236.1: bool), "attempt to compute `{} + {}`, which would overflow", move _235, const 1_u8) -> [success: bb107, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _234 = move (_236.0: u8),
            StorageDead(_235),
            StorageLive(_237),
            _237 = _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:829:65: 829:74 (#0),
                    scope: scope[5],
                },
                kind: _233 = core::ops::RangeInclusive::<u8>::new(move _234, move _237) -> [return: bb108, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_237),
            StorageDead(_234),
            _232 = (move _233,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:829:61: 829:75 (#0),
                    scope: scope[5],
                },
                kind: _230 = <{closure@regex-automata/src/nfa/thompson/range_trie.rs:793:19: 793:22} as core::ops::Fn<(core::ops::RangeInclusive<u8>,)>>::call(move _231, move _232) -> [return: bb109, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_233),
            StorageDead(_232),
            StorageDead(_231),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:829:18: 829:76 (#0),
                    scope: scope[5],
                },
                kind: _215 = nfa::thompson::range_trie::Split::parts3(move _216, move _224, move _230) -> [return: bb110, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_230),
            StorageDead(_224),
            StorageDead(_216),
            _0 = core::option::Option::<nfa::thompson::range_trie::Split>::Some(move _215),
            StorageDead(_215),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:827:16: 838:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb143,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_214),
            StorageDead(_213),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb113,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_211),
            StorageDead(_210),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb113,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_238),
            StorageLive(_239),
            _239 = _11,
            StorageLive(_240),
            _240 = _12,
            _238 = Gt(move _239, move _240),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:830:19: 830:24 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _238) -> [0: bb126, otherwise: bb114],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_240),
            StorageDead(_239),
            StorageLive(_241),
            StorageLive(_242),
            _242 = _11,
            StorageLive(_243),
            _243 = _13,
            _241 = Lt(move _242, move _243),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:830:28: 830:33 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _241) -> [0: bb125, otherwise: bb115],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_243),
            StorageDead(_242),
            StorageLive(_244),
            StorageLive(_245),
            StorageLive(_246),
            _246 = &_4,
            StorageLive(_247),
            StorageLive(_248),
            StorageLive(_249),
            _249 = _10,
            StorageLive(_250),
            StorageLive(_251),
            _251 = _12,
            _252 = SubWithOverflow(_251, const 1_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:832:40: 832:45 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_252.1: bool), "attempt to compute `{} - {}`, which would overflow", move _251, const 1_u8) -> [success: bb116, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _250 = move (_252.0: u8),
            StorageDead(_251),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:832:36: 832:45 (#0),
                    scope: scope[5],
                },
                kind: _248 = core::ops::RangeInclusive::<u8>::new(move _249, move _250) -> [return: bb117, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_250),
            StorageDead(_249),
            _247 = (move _248,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:832:32: 832:46 (#0),
                    scope: scope[5],
                },
                kind: _245 = <{closure@regex-automata/src/nfa/thompson/range_trie.rs:793:19: 793:22} as core::ops::Fn<(core::ops::RangeInclusive<u8>,)>>::call(move _246, move _247) -> [return: bb118, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_248),
            StorageDead(_247),
            StorageDead(_246),
            StorageLive(_253),
            StorageLive(_254),
            _254 = &_8,
            StorageLive(_255),
            StorageLive(_256),
            StorageLive(_257),
            _257 = _12,
            StorageLive(_258),
            _258 = _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:832:53: 832:58 (#0),
                    scope: scope[5],
                },
                kind: _256 = core::ops::RangeInclusive::<u8>::new(move _257, move _258) -> [return: bb119, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_258),
            StorageDead(_257),
            _255 = (move _256,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:832:48: 832:59 (#0),
                    scope: scope[5],
                },
                kind: _253 = <{closure@regex-automata/src/nfa/thompson/range_trie.rs:795:20: 795:23} as core::ops::Fn<(core::ops::RangeInclusive<u8>,)>>::call(move _254, move _255) -> [return: bb120, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_256),
            StorageDead(_255),
            StorageDead(_254),
            StorageLive(_259),
            StorageLive(_260),
            _260 = &_6,
            StorageLive(_261),
            StorageLive(_262),
            StorageLive(_263),
            StorageLive(_264),
            _264 = _11,
            _265 = AddWithOverflow(_264, const 1_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:832:65: 832:70 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_265.1: bool), "attempt to compute `{} + {}`, which would overflow", move _264, const 1_u8) -> [success: bb121, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _263 = move (_265.0: u8),
            StorageDead(_264),
            StorageLive(_266),
            _266 = _13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:832:65: 832:74 (#0),
                    scope: scope[5],
                },
                kind: _262 = core::ops::RangeInclusive::<u8>::new(move _263, move _266) -> [return: bb122, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_266),
            StorageDead(_263),
            _261 = (move _262,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:832:61: 832:75 (#0),
                    scope: scope[5],
                },
                kind: _259 = <{closure@regex-automata/src/nfa/thompson/range_trie.rs:794:19: 794:22} as core::ops::Fn<(core::ops::RangeInclusive<u8>,)>>::call(move _260, move _261) -> [return: bb123, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_262),
            StorageDead(_261),
            StorageDead(_260),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:832:18: 832:76 (#0),
                    scope: scope[5],
                },
                kind: _244 = nfa::thompson::range_trie::Split::parts3(move _245, move _253, move _259) -> [return: bb124, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_259),
            StorageDead(_253),
            StorageDead(_245),
            _0 = core::option::Option::<nfa::thompson::range_trie::Split>::Some(move _244),
            StorageDead(_244),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:830:16: 838:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb142,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_243),
            StorageDead(_242),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb127,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_240),
            StorageDead(_239),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb127,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_267),
            StorageLive(_268),
            _268 = _13,
            StorageLive(_269),
            _269 = _10,
            _267 = Gt(move _268, move _269),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:833:19: 833:24 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _267) -> [0: bb140, otherwise: bb128],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_269),
            StorageDead(_268),
            StorageLive(_270),
            StorageLive(_271),
            _271 = _13,
            StorageLive(_272),
            _272 = _11,
            _270 = Lt(move _271, move _272),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:833:28: 833:33 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _270) -> [0: bb139, otherwise: bb129],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_272),
            StorageDead(_271),
            StorageLive(_273),
            StorageLive(_274),
            StorageLive(_275),
            _275 = &_6,
            StorageLive(_276),
            StorageLive(_277),
            StorageLive(_278),
            _278 = _12,
            StorageLive(_279),
            StorageLive(_280),
            _280 = _10,
            _281 = SubWithOverflow(_280, const 1_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:835:40: 835:45 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_281.1: bool), "attempt to compute `{} - {}`, which would overflow", move _280, const 1_u8) -> [success: bb130, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _279 = move (_281.0: u8),
            StorageDead(_280),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:835:36: 835:45 (#0),
                    scope: scope[5],
                },
                kind: _277 = core::ops::RangeInclusive::<u8>::new(move _278, move _279) -> [return: bb131, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_279),
            StorageDead(_278),
            _276 = (move _277,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:835:32: 835:46 (#0),
                    scope: scope[5],
                },
                kind: _274 = <{closure@regex-automata/src/nfa/thompson/range_trie.rs:794:19: 794:22} as core::ops::Fn<(core::ops::RangeInclusive<u8>,)>>::call(move _275, move _276) -> [return: bb132, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_277),
            StorageDead(_276),
            StorageDead(_275),
            StorageLive(_282),
            StorageLive(_283),
            _283 = &_8,
            StorageLive(_284),
            StorageLive(_285),
            StorageLive(_286),
            _286 = _10,
            StorageLive(_287),
            _287 = _13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:835:53: 835:58 (#0),
                    scope: scope[5],
                },
                kind: _285 = core::ops::RangeInclusive::<u8>::new(move _286, move _287) -> [return: bb133, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_287),
            StorageDead(_286),
            _284 = (move _285,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:835:48: 835:59 (#0),
                    scope: scope[5],
                },
                kind: _282 = <{closure@regex-automata/src/nfa/thompson/range_trie.rs:795:20: 795:23} as core::ops::Fn<(core::ops::RangeInclusive<u8>,)>>::call(move _283, move _284) -> [return: bb134, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_285),
            StorageDead(_284),
            StorageDead(_283),
            StorageLive(_288),
            StorageLive(_289),
            _289 = &_4,
            StorageLive(_290),
            StorageLive(_291),
            StorageLive(_292),
            StorageLive(_293),
            _293 = _13,
            _294 = AddWithOverflow(_293, const 1_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:835:65: 835:70 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_294.1: bool), "attempt to compute `{} + {}`, which would overflow", move _293, const 1_u8) -> [success: bb135, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _292 = move (_294.0: u8),
            StorageDead(_293),
            StorageLive(_295),
            _295 = _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:835:65: 835:74 (#0),
                    scope: scope[5],
                },
                kind: _291 = core::ops::RangeInclusive::<u8>::new(move _292, move _295) -> [return: bb136, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_295),
            StorageDead(_292),
            _290 = (move _291,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:835:61: 835:75 (#0),
                    scope: scope[5],
                },
                kind: _288 = <{closure@regex-automata/src/nfa/thompson/range_trie.rs:793:19: 793:22} as core::ops::Fn<(core::ops::RangeInclusive<u8>,)>>::call(move _289, move _290) -> [return: bb137, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_291),
            StorageDead(_290),
            StorageDead(_289),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:835:18: 835:76 (#0),
                    scope: scope[5],
                },
                kind: _273 = nfa::thompson::range_trie::Split::parts3(move _274, move _282, move _288) -> [return: bb138, unwind: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_288),
            StorageDead(_282),
            StorageDead(_274),
            _0 = core::option::Option::<nfa::thompson::range_trie::Split>::Some(move _273),
            StorageDead(_273),
            StorageDead(_270),
            StorageDead(_267),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:830:16: 838:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb142,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_272),
            StorageDead(_271),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb141,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_269),
            StorageDead(_268),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb141,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_296),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:137:9: 137:77 (#1483),
                    scope: scope[5],
                },
                kind: _296 = core::panicking::panic(const "internal error: entered unreachable code") -> bb153,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_241),
            StorageDead(_238),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:827:16: 838:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb143,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_212),
            StorageDead(_209),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:824:16: 838:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb144,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_183),
            StorageDead(_180),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:821:16: 838:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb145,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_154),
            StorageDead(_151),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:818:16: 838:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb146,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_125),
            StorageDead(_122),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:815:16: 838:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb147,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_104),
            StorageDead(_101),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:812:16: 838:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb148,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_83),
            StorageDead(_80),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:809:16: 838:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb149,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_62),
            StorageDead(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:806:16: 838:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb150,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:803:16: 838:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb151,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb152,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_19),
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:839:6: 839:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/range_trie.rs:788:5: 839:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<nfa::thompson::range_trie::Split>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:788:43: 788:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/nfa/thompson/range_trie.rs:788:15: 788:24 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/range_trie.rs:788:12: 788:13 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/range_trie.rs:788:12: 788:13 (#0),
                    },
                ),
            ),
        ),
        ty: regex_syntax::utf8::Utf8Range,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:788:12: 788:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/nfa/thompson/range_trie.rs:788:29: 788:38 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/range_trie.rs:788:26: 788:27 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/range_trie.rs:788:26: 788:27 (#0),
                    },
                ),
            ),
        ),
        ty: regex_syntax::utf8::Utf8Range,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:788:26: 788:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/range_trie.rs:789:21: 792:10 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/range_trie.rs:789:13: 789:18 (#0),
                    },
                ),
            ),
        ),
        ty: Closure(
            DefId(0:3008 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#0}),
            [
                i8,
                Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> regex_syntax::utf8::Utf8Range, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:789:13: 789:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/range_trie.rs:793:19: 793:48 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/range_trie.rs:793:13: 793:16 (#0),
                    },
                ),
            ),
        ),
        ty: Closure(
            DefId(0:3009 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#1}),
            [
                i8,
                Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> nfa::thompson::range_trie::SplitRange, bound_vars: [] },
                (&'{erased} Closure(DefId(0:3008 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#0}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> regex_syntax::utf8::Utf8Range, bound_vars: [] }, ()]),),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:793:13: 793:16 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Closure(DefId(0:3008 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#0}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> regex_syntax::utf8::Utf8Range, bound_vars: [] }, ()]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:793:19: 793:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/range_trie.rs:794:19: 794:48 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/range_trie.rs:794:13: 794:16 (#0),
                    },
                ),
            ),
        ),
        ty: Closure(
            DefId(0:3010 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#2}),
            [
                i8,
                Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> nfa::thompson::range_trie::SplitRange, bound_vars: [] },
                (&'{erased} Closure(DefId(0:3008 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#0}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> regex_syntax::utf8::Utf8Range, bound_vars: [] }, ()]),),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:794:13: 794:16 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Closure(DefId(0:3008 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#0}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> regex_syntax::utf8::Utf8Range, bound_vars: [] }, ()]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:794:19: 794:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/range_trie.rs:795:20: 795:50 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/range_trie.rs:795:13: 795:17 (#0),
                    },
                ),
            ),
        ),
        ty: Closure(
            DefId(0:3011 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#3}),
            [
                i8,
                Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> nfa::thompson::range_trie::SplitRange, bound_vars: [] },
                (&'{erased} Closure(DefId(0:3008 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#0}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> regex_syntax::utf8::Utf8Range, bound_vars: [] }, ()]),),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:795:13: 795:17 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Closure(DefId(0:3008 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#0}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> regex_syntax::utf8::Utf8Range, bound_vars: [] }, ()]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:795:20: 795:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _14,
                                ),
                                regex-automata/src/nfa/thompson/range_trie.rs:798:28: 798:60 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/range_trie.rs:798:13: 798:25 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:798:14: 798:15 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _14,
                                ),
                                regex-automata/src/nfa/thompson/range_trie.rs:798:28: 798:60 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/range_trie.rs:798:13: 798:25 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:798:17: 798:18 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _14,
                                ),
                                regex-automata/src/nfa/thompson/range_trie.rs:798:28: 798:60 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/range_trie.rs:798:13: 798:25 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:798:20: 798:21 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _14,
                                ),
                                regex-automata/src/nfa/thompson/range_trie.rs:798:28: 798:60 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/range_trie.rs:798:13: 798:25 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:798:23: 798:24 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, u8, u8, u8),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:798:28: 798:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:798:29: 798:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:798:38: 798:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:798:45: 798:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:798:54: 798:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:800:12: 800:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:800:12: 800:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:800:16: 800:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:800:21: 800:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:800:21: 800:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:800:25: 800:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:803:19: 803:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:803:19: 803:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:803:24: 803:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:803:29: 803:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:803:29: 803:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:803:34: 803:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: nfa::thompson::range_trie::Split,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:805:18: 805:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:805:13: 805:45 (#0),
                },
            ),
        ),
        ty: nfa::thompson::range_trie::SplitRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:805:32: 805:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:805:13: 805:45 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:3011 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#3}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> nfa::thompson::range_trie::SplitRange, bound_vars: [] }, (&'{erased} Closure(DefId(0:3008 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#0}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> regex_syntax::utf8::Utf8Range, bound_vars: [] }, ()]),)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:805:32: 805:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:805:13: 805:45 (#0),
                },
            ),
        ),
        ty: (core::ops::RangeInclusive<u8>,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:805:32: 805:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:805:13: 805:45 (#0),
                },
            ),
        ),
        ty: core::ops::RangeInclusive<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:805:37: 805:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:805:13: 805:45 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:805:37: 805:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:805:13: 805:45 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:805:41: 805:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:806:19: 806:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:806:19: 806:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:806:24: 806:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:806:29: 806:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:806:29: 806:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:806:33: 806:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: nfa::thompson::range_trie::Split,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:808:18: 808:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:808:13: 808:61 (#0),
                },
            ),
        ),
        ty: nfa::thompson::range_trie::SplitRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:808:32: 808:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:808:13: 808:61 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:3011 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#3}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> nfa::thompson::range_trie::SplitRange, bound_vars: [] }, (&'{erased} Closure(DefId(0:3008 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#0}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> regex_syntax::utf8::Utf8Range, bound_vars: [] }, ()]),)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:808:32: 808:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:808:13: 808:61 (#0),
                },
            ),
        ),
        ty: (core::ops::RangeInclusive<u8>,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:808:32: 808:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:808:13: 808:61 (#0),
                },
            ),
        ),
        ty: core::ops::RangeInclusive<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:808:37: 808:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:808:13: 808:61 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:808:37: 808:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:808:13: 808:61 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:808:41: 808:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:808:13: 808:61 (#0),
                },
            ),
        ),
        ty: nfa::thompson::range_trie::SplitRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:808:45: 808:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:808:13: 808:61 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:3010 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#2}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> nfa::thompson::range_trie::SplitRange, bound_vars: [] }, (&'{erased} Closure(DefId(0:3008 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#0}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> regex_syntax::utf8::Utf8Range, bound_vars: [] }, ()]),)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:808:45: 808:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:808:13: 808:61 (#0),
                },
            ),
        ),
        ty: (core::ops::RangeInclusive<u8>,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:808:45: 808:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:808:13: 808:61 (#0),
                },
            ),
        ),
        ty: core::ops::RangeInclusive<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:808:49: 808:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:808:13: 808:61 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:808:49: 808:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:808:13: 808:61 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:808:49: 808:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:808:49: 808:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:808:13: 808:61 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:808:57: 808:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:809:19: 809:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:809:19: 809:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:809:24: 809:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:809:29: 809:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:809:29: 809:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:809:33: 809:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: nfa::thompson::range_trie::Split,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:811:18: 811:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:811:13: 811:61 (#0),
                },
            ),
        ),
        ty: nfa::thompson::range_trie::SplitRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:811:32: 811:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:811:13: 811:61 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:3010 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#2}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> nfa::thompson::range_trie::SplitRange, bound_vars: [] }, (&'{erased} Closure(DefId(0:3008 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#0}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> regex_syntax::utf8::Utf8Range, bound_vars: [] }, ()]),)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:811:32: 811:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:811:13: 811:61 (#0),
                },
            ),
        ),
        ty: (core::ops::RangeInclusive<u8>,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:811:32: 811:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:811:13: 811:61 (#0),
                },
            ),
        ),
        ty: core::ops::RangeInclusive<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:811:36: 811:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:811:13: 811:61 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:811:36: 811:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:811:13: 811:61 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:811:40: 811:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:811:13: 811:61 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:811:40: 811:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:811:40: 811:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:811:13: 811:61 (#0),
                },
            ),
        ),
        ty: nfa::thompson::range_trie::SplitRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:811:48: 811:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:811:13: 811:61 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:3011 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#3}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> nfa::thompson::range_trie::SplitRange, bound_vars: [] }, (&'{erased} Closure(DefId(0:3008 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#0}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> regex_syntax::utf8::Utf8Range, bound_vars: [] }, ()]),)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:811:48: 811:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:811:13: 811:61 (#0),
                },
            ),
        ),
        ty: (core::ops::RangeInclusive<u8>,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:811:48: 811:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:811:13: 811:61 (#0),
                },
            ),
        ),
        ty: core::ops::RangeInclusive<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:811:53: 811:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:811:13: 811:61 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:811:53: 811:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:811:13: 811:61 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:811:57: 811:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:812:19: 812:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:812:19: 812:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:812:24: 812:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:812:29: 812:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:812:29: 812:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:812:33: 812:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: nfa::thompson::range_trie::Split,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:814:18: 814:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:814:13: 814:61 (#0),
                },
            ),
        ),
        ty: nfa::thompson::range_trie::SplitRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:814:32: 814:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:814:13: 814:61 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:3011 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#3}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> nfa::thompson::range_trie::SplitRange, bound_vars: [] }, (&'{erased} Closure(DefId(0:3008 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#0}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> regex_syntax::utf8::Utf8Range, bound_vars: [] }, ()]),)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:814:32: 814:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:814:13: 814:61 (#0),
                },
            ),
        ),
        ty: (core::ops::RangeInclusive<u8>,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:814:32: 814:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:814:13: 814:61 (#0),
                },
            ),
        ),
        ty: core::ops::RangeInclusive<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:814:37: 814:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:814:13: 814:61 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:814:37: 814:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:814:13: 814:61 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:814:41: 814:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:814:13: 814:61 (#0),
                },
            ),
        ),
        ty: nfa::thompson::range_trie::SplitRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:814:45: 814:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:814:13: 814:61 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:3009 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#1}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> nfa::thompson::range_trie::SplitRange, bound_vars: [] }, (&'{erased} Closure(DefId(0:3008 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#0}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> regex_syntax::utf8::Utf8Range, bound_vars: [] }, ()]),)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:814:45: 814:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:814:13: 814:61 (#0),
                },
            ),
        ),
        ty: (core::ops::RangeInclusive<u8>,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:814:45: 814:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:814:13: 814:61 (#0),
                },
            ),
        ),
        ty: core::ops::RangeInclusive<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:814:49: 814:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:814:13: 814:61 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:814:49: 814:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:814:13: 814:61 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:814:49: 814:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:814:49: 814:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:814:13: 814:61 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:814:57: 814:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:815:19: 815:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:815:19: 815:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:815:24: 815:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:815:29: 815:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:815:29: 815:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:815:33: 815:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: nfa::thompson::range_trie::Split,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:817:18: 817:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:817:13: 817:61 (#0),
                },
            ),
        ),
        ty: nfa::thompson::range_trie::SplitRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:817:32: 817:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:817:13: 817:61 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:3009 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#1}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> nfa::thompson::range_trie::SplitRange, bound_vars: [] }, (&'{erased} Closure(DefId(0:3008 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#0}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> regex_syntax::utf8::Utf8Range, bound_vars: [] }, ()]),)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:817:32: 817:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:817:13: 817:61 (#0),
                },
            ),
        ),
        ty: (core::ops::RangeInclusive<u8>,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:817:32: 817:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:817:13: 817:61 (#0),
                },
            ),
        ),
        ty: core::ops::RangeInclusive<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:817:36: 817:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:817:13: 817:61 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:817:36: 817:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:817:13: 817:61 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:817:40: 817:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:817:13: 817:61 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:817:40: 817:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:817:40: 817:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:817:13: 817:61 (#0),
                },
            ),
        ),
        ty: nfa::thompson::range_trie::SplitRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:817:48: 817:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:817:13: 817:61 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:3011 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#3}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> nfa::thompson::range_trie::SplitRange, bound_vars: [] }, (&'{erased} Closure(DefId(0:3008 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#0}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> regex_syntax::utf8::Utf8Range, bound_vars: [] }, ()]),)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:817:48: 817:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:817:13: 817:61 (#0),
                },
            ),
        ),
        ty: (core::ops::RangeInclusive<u8>,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:817:48: 817:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:817:13: 817:61 (#0),
                },
            ),
        ),
        ty: core::ops::RangeInclusive<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:817:53: 817:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:817:13: 817:61 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:817:53: 817:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:817:13: 817:61 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:817:57: 817:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:818:19: 818:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:818:19: 818:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:818:23: 818:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:818:28: 818:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:818:28: 818:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:818:32: 818:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: nfa::thompson::range_trie::Split,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:820:18: 820:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:820:13: 820:77 (#0),
                },
            ),
        ),
        ty: nfa::thompson::range_trie::SplitRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:820:32: 820:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:820:13: 820:77 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:3010 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#2}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> nfa::thompson::range_trie::SplitRange, bound_vars: [] }, (&'{erased} Closure(DefId(0:3008 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#0}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> regex_syntax::utf8::Utf8Range, bound_vars: [] }, ()]),)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:820:32: 820:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:820:13: 820:77 (#0),
                },
            ),
        ),
        ty: (core::ops::RangeInclusive<u8>,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:820:32: 820:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:820:13: 820:77 (#0),
                },
            ),
        ),
        ty: core::ops::RangeInclusive<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:820:36: 820:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:820:13: 820:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:820:36: 820:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:820:13: 820:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:820:40: 820:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:820:13: 820:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:820:40: 820:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:820:40: 820:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:820:13: 820:77 (#0),
                },
            ),
        ),
        ty: nfa::thompson::range_trie::SplitRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:820:48: 820:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:820:13: 820:77 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:3011 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#3}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> nfa::thompson::range_trie::SplitRange, bound_vars: [] }, (&'{erased} Closure(DefId(0:3008 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#0}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> regex_syntax::utf8::Utf8Range, bound_vars: [] }, ()]),)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:820:48: 820:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:820:13: 820:77 (#0),
                },
            ),
        ),
        ty: (core::ops::RangeInclusive<u8>,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:820:48: 820:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:820:13: 820:77 (#0),
                },
            ),
        ),
        ty: core::ops::RangeInclusive<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:820:53: 820:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:820:13: 820:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:820:53: 820:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:820:13: 820:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:820:57: 820:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:820:13: 820:77 (#0),
                },
            ),
        ),
        ty: nfa::thompson::range_trie::SplitRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:820:61: 820:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:820:13: 820:77 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:3010 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#2}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> nfa::thompson::range_trie::SplitRange, bound_vars: [] }, (&'{erased} Closure(DefId(0:3008 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#0}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> regex_syntax::utf8::Utf8Range, bound_vars: [] }, ()]),)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:820:61: 820:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:820:13: 820:77 (#0),
                },
            ),
        ),
        ty: (core::ops::RangeInclusive<u8>,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:820:61: 820:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:820:13: 820:77 (#0),
                },
            ),
        ),
        ty: core::ops::RangeInclusive<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:820:65: 820:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:820:13: 820:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:820:65: 820:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:820:13: 820:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:820:65: 820:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:820:65: 820:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:820:13: 820:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:820:73: 820:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:821:19: 821:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:821:19: 821:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:821:23: 821:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:821:28: 821:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:821:28: 821:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:821:32: 821:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: nfa::thompson::range_trie::Split,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:823:18: 823:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:823:13: 823:77 (#0),
                },
            ),
        ),
        ty: nfa::thompson::range_trie::SplitRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:823:32: 823:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:823:13: 823:77 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:3009 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#1}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> nfa::thompson::range_trie::SplitRange, bound_vars: [] }, (&'{erased} Closure(DefId(0:3008 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#0}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> regex_syntax::utf8::Utf8Range, bound_vars: [] }, ()]),)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:823:32: 823:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:823:13: 823:77 (#0),
                },
            ),
        ),
        ty: (core::ops::RangeInclusive<u8>,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:823:32: 823:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:823:13: 823:77 (#0),
                },
            ),
        ),
        ty: core::ops::RangeInclusive<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:823:36: 823:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:823:13: 823:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:823:36: 823:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:823:13: 823:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:823:40: 823:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:823:13: 823:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:823:40: 823:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:823:40: 823:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:823:13: 823:77 (#0),
                },
            ),
        ),
        ty: nfa::thompson::range_trie::SplitRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:823:48: 823:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:823:13: 823:77 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:3011 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#3}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> nfa::thompson::range_trie::SplitRange, bound_vars: [] }, (&'{erased} Closure(DefId(0:3008 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#0}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> regex_syntax::utf8::Utf8Range, bound_vars: [] }, ()]),)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:823:48: 823:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:823:13: 823:77 (#0),
                },
            ),
        ),
        ty: (core::ops::RangeInclusive<u8>,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:823:48: 823:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:823:13: 823:77 (#0),
                },
            ),
        ),
        ty: core::ops::RangeInclusive<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:823:53: 823:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:823:13: 823:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:823:53: 823:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:823:13: 823:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:823:57: 823:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:823:13: 823:77 (#0),
                },
            ),
        ),
        ty: nfa::thompson::range_trie::SplitRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:823:61: 823:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:823:13: 823:77 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:3009 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#1}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> nfa::thompson::range_trie::SplitRange, bound_vars: [] }, (&'{erased} Closure(DefId(0:3008 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#0}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> regex_syntax::utf8::Utf8Range, bound_vars: [] }, ()]),)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:823:61: 823:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:823:13: 823:77 (#0),
                },
            ),
        ),
        ty: (core::ops::RangeInclusive<u8>,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:823:61: 823:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:823:13: 823:77 (#0),
                },
            ),
        ),
        ty: core::ops::RangeInclusive<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:823:65: 823:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:823:13: 823:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:823:65: 823:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:823:13: 823:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:823:65: 823:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:823:65: 823:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:823:13: 823:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:823:73: 823:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:824:19: 824:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:824:19: 824:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:824:24: 824:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:824:29: 824:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:824:29: 824:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:824:33: 824:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: nfa::thompson::range_trie::Split,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:826:18: 826:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:826:13: 826:77 (#0),
                },
            ),
        ),
        ty: nfa::thompson::range_trie::SplitRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:826:32: 826:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:826:13: 826:77 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:3009 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#1}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> nfa::thompson::range_trie::SplitRange, bound_vars: [] }, (&'{erased} Closure(DefId(0:3008 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#0}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> regex_syntax::utf8::Utf8Range, bound_vars: [] }, ()]),)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:826:32: 826:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:826:13: 826:77 (#0),
                },
            ),
        ),
        ty: (core::ops::RangeInclusive<u8>,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:826:32: 826:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:826:13: 826:77 (#0),
                },
            ),
        ),
        ty: core::ops::RangeInclusive<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:826:36: 826:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:826:13: 826:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:826:36: 826:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:826:13: 826:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:826:40: 826:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:826:13: 826:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:826:40: 826:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:826:40: 826:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:826:13: 826:77 (#0),
                },
            ),
        ),
        ty: nfa::thompson::range_trie::SplitRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:826:48: 826:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:826:13: 826:77 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:3011 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#3}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> nfa::thompson::range_trie::SplitRange, bound_vars: [] }, (&'{erased} Closure(DefId(0:3008 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#0}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> regex_syntax::utf8::Utf8Range, bound_vars: [] }, ()]),)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:826:48: 826:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:826:13: 826:77 (#0),
                },
            ),
        ),
        ty: (core::ops::RangeInclusive<u8>,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:826:48: 826:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:826:13: 826:77 (#0),
                },
            ),
        ),
        ty: core::ops::RangeInclusive<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:826:53: 826:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:826:13: 826:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:826:53: 826:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:826:13: 826:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:826:57: 826:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:826:13: 826:77 (#0),
                },
            ),
        ),
        ty: nfa::thompson::range_trie::SplitRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:826:61: 826:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:826:13: 826:77 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:3010 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#2}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> nfa::thompson::range_trie::SplitRange, bound_vars: [] }, (&'{erased} Closure(DefId(0:3008 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#0}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> regex_syntax::utf8::Utf8Range, bound_vars: [] }, ()]),)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:826:61: 826:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:826:13: 826:77 (#0),
                },
            ),
        ),
        ty: (core::ops::RangeInclusive<u8>,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:826:61: 826:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:826:13: 826:77 (#0),
                },
            ),
        ),
        ty: core::ops::RangeInclusive<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:826:65: 826:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:826:13: 826:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:826:65: 826:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:826:13: 826:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:826:65: 826:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:826:65: 826:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:826:13: 826:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:826:73: 826:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:827:19: 827:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:827:19: 827:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:827:24: 827:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:827:29: 827:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:827:29: 827:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:827:33: 827:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: nfa::thompson::range_trie::Split,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:829:18: 829:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:829:13: 829:77 (#0),
                },
            ),
        ),
        ty: nfa::thompson::range_trie::SplitRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:829:32: 829:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:829:13: 829:77 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:3010 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#2}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> nfa::thompson::range_trie::SplitRange, bound_vars: [] }, (&'{erased} Closure(DefId(0:3008 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#0}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> regex_syntax::utf8::Utf8Range, bound_vars: [] }, ()]),)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:829:32: 829:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:829:13: 829:77 (#0),
                },
            ),
        ),
        ty: (core::ops::RangeInclusive<u8>,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:829:32: 829:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:829:13: 829:77 (#0),
                },
            ),
        ),
        ty: core::ops::RangeInclusive<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:829:36: 829:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:829:13: 829:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:829:36: 829:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:829:13: 829:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:829:40: 829:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:829:13: 829:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:829:40: 829:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:829:40: 829:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:829:13: 829:77 (#0),
                },
            ),
        ),
        ty: nfa::thompson::range_trie::SplitRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:829:48: 829:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:829:13: 829:77 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:3011 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#3}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> nfa::thompson::range_trie::SplitRange, bound_vars: [] }, (&'{erased} Closure(DefId(0:3008 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#0}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> regex_syntax::utf8::Utf8Range, bound_vars: [] }, ()]),)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:829:48: 829:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:829:13: 829:77 (#0),
                },
            ),
        ),
        ty: (core::ops::RangeInclusive<u8>,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:829:48: 829:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:829:13: 829:77 (#0),
                },
            ),
        ),
        ty: core::ops::RangeInclusive<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:829:53: 829:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:829:13: 829:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:829:53: 829:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:829:13: 829:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:829:57: 829:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:829:13: 829:77 (#0),
                },
            ),
        ),
        ty: nfa::thompson::range_trie::SplitRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:829:61: 829:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:829:13: 829:77 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:3009 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#1}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> nfa::thompson::range_trie::SplitRange, bound_vars: [] }, (&'{erased} Closure(DefId(0:3008 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#0}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> regex_syntax::utf8::Utf8Range, bound_vars: [] }, ()]),)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:829:61: 829:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:829:13: 829:77 (#0),
                },
            ),
        ),
        ty: (core::ops::RangeInclusive<u8>,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:829:61: 829:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:829:13: 829:77 (#0),
                },
            ),
        ),
        ty: core::ops::RangeInclusive<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:829:65: 829:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:829:13: 829:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:829:65: 829:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:829:13: 829:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:829:65: 829:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:829:65: 829:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:829:13: 829:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:829:73: 829:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:830:19: 830:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:830:19: 830:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:830:23: 830:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:830:28: 830:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:830:28: 830:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:830:32: 830:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: nfa::thompson::range_trie::Split,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:832:18: 832:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:832:13: 832:77 (#0),
                },
            ),
        ),
        ty: nfa::thompson::range_trie::SplitRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:832:32: 832:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:832:13: 832:77 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:3009 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#1}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> nfa::thompson::range_trie::SplitRange, bound_vars: [] }, (&'{erased} Closure(DefId(0:3008 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#0}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> regex_syntax::utf8::Utf8Range, bound_vars: [] }, ()]),)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:832:32: 832:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:832:13: 832:77 (#0),
                },
            ),
        ),
        ty: (core::ops::RangeInclusive<u8>,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:832:32: 832:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:832:13: 832:77 (#0),
                },
            ),
        ),
        ty: core::ops::RangeInclusive<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:832:36: 832:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:832:13: 832:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:832:36: 832:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:832:13: 832:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:832:40: 832:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:832:13: 832:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:832:40: 832:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:832:40: 832:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:832:13: 832:77 (#0),
                },
            ),
        ),
        ty: nfa::thompson::range_trie::SplitRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:832:48: 832:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:832:13: 832:77 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:3011 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#3}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> nfa::thompson::range_trie::SplitRange, bound_vars: [] }, (&'{erased} Closure(DefId(0:3008 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#0}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> regex_syntax::utf8::Utf8Range, bound_vars: [] }, ()]),)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:832:48: 832:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:832:13: 832:77 (#0),
                },
            ),
        ),
        ty: (core::ops::RangeInclusive<u8>,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:832:48: 832:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:832:13: 832:77 (#0),
                },
            ),
        ),
        ty: core::ops::RangeInclusive<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:832:53: 832:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:832:13: 832:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:832:53: 832:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:832:13: 832:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:832:57: 832:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:832:13: 832:77 (#0),
                },
            ),
        ),
        ty: nfa::thompson::range_trie::SplitRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:832:61: 832:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:832:13: 832:77 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:3010 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#2}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> nfa::thompson::range_trie::SplitRange, bound_vars: [] }, (&'{erased} Closure(DefId(0:3008 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#0}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> regex_syntax::utf8::Utf8Range, bound_vars: [] }, ()]),)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:832:61: 832:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:832:13: 832:77 (#0),
                },
            ),
        ),
        ty: (core::ops::RangeInclusive<u8>,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:832:61: 832:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:832:13: 832:77 (#0),
                },
            ),
        ),
        ty: core::ops::RangeInclusive<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:832:65: 832:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:832:13: 832:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:832:65: 832:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:832:13: 832:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:832:65: 832:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:832:65: 832:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:832:13: 832:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:832:73: 832:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:833:19: 833:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:833:19: 833:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:833:23: 833:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:833:28: 833:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:833:28: 833:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:800:9: 838:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:833:32: 833:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: nfa::thompson::range_trie::Split,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:835:18: 835:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:835:13: 835:77 (#0),
                },
            ),
        ),
        ty: nfa::thompson::range_trie::SplitRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:835:32: 835:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:835:13: 835:77 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:3010 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#2}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> nfa::thompson::range_trie::SplitRange, bound_vars: [] }, (&'{erased} Closure(DefId(0:3008 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#0}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> regex_syntax::utf8::Utf8Range, bound_vars: [] }, ()]),)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:835:32: 835:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:835:13: 835:77 (#0),
                },
            ),
        ),
        ty: (core::ops::RangeInclusive<u8>,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:835:32: 835:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:835:13: 835:77 (#0),
                },
            ),
        ),
        ty: core::ops::RangeInclusive<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:835:36: 835:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:835:13: 835:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:835:36: 835:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:835:13: 835:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:835:40: 835:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:835:13: 835:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:835:40: 835:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:835:40: 835:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:835:13: 835:77 (#0),
                },
            ),
        ),
        ty: nfa::thompson::range_trie::SplitRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:835:48: 835:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:835:13: 835:77 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:3011 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#3}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> nfa::thompson::range_trie::SplitRange, bound_vars: [] }, (&'{erased} Closure(DefId(0:3008 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#0}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> regex_syntax::utf8::Utf8Range, bound_vars: [] }, ()]),)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:835:48: 835:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:835:13: 835:77 (#0),
                },
            ),
        ),
        ty: (core::ops::RangeInclusive<u8>,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:835:48: 835:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:835:13: 835:77 (#0),
                },
            ),
        ),
        ty: core::ops::RangeInclusive<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:835:53: 835:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:835:13: 835:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:835:53: 835:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:835:13: 835:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:835:57: 835:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:835:13: 835:77 (#0),
                },
            ),
        ),
        ty: nfa::thompson::range_trie::SplitRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:835:61: 835:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:835:13: 835:77 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:3009 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#1}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> nfa::thompson::range_trie::SplitRange, bound_vars: [] }, (&'{erased} Closure(DefId(0:3008 ~ regex_automata[00dd]::nfa::thompson::range_trie::{impl#3}::new::{closure#0}), [i8, Binder { value: extern "RustCall" fn((core::ops::RangeInclusive<u8>,)) -> regex_syntax::utf8::Utf8Range, bound_vars: [] }, ()]),)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:835:61: 835:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:835:13: 835:77 (#0),
                },
            ),
        ),
        ty: (core::ops::RangeInclusive<u8>,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:835:61: 835:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:835:13: 835:77 (#0),
                },
            ),
        ),
        ty: core::ops::RangeInclusive<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:835:65: 835:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:835:13: 835:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:835:65: 835:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:835:13: 835:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:835:65: 835:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:835:65: 835:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/range_trie.rs:835:13: 835:77 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/range_trie.rs:835:73: 835:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:137:9: 137:77 (#1483),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:137:9: 137:77 (#1483),
            scope: scope[0],
        },
    },
]