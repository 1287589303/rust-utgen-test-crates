[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = _2,
            _3 = core::option::Option::<usize>::Some(move _4),
            StorageDead(_4),
            (_1.7: core::option::Option<usize>) = move _3,
            StorageDead(_3),
            _0 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:3509:5: 3509:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:3509:6: 3509:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:3506:5: 3509:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hybrid::dfa::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:3506:54: 3506:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                ImplicitSelf(
                    Mut,
                ),
            ),
        ),
        ty: hybrid::dfa::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:3506:27: 3506:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/hybrid/dfa.rs:3506:44: 3506:49 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/hybrid/dfa.rs:3506:37: 3506:42 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/dfa.rs:3506:37: 3506:42 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:3506:37: 3506:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:3507:31: 3507:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:3507:36: 3507:41 (#0),
            scope: scope[0],
        },
    },
]