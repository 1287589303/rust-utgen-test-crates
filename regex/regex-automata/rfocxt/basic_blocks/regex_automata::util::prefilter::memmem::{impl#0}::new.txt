[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/memmem.rs:25:16: 25:29 (#0),
                    scope: scope[0],
                },
                kind: _5 = core::slice::<impl [B]>::len(move _6) -> [return: bb1, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            _4 = Ne(move _5, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/memmem.rs:25:16: 25:34 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            _0 = core::option::Option::<util::prefilter::memmem::Memmem>::None,
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/memmem.rs:32:6: 32:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            _3 = const (),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = const 0_usize,
            _11 = Len((*_2)),
            _12 = Lt(_10, _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/memmem.rs:28:26: 28:36 (#0),
                    scope: scope[0],
                },
                kind: assert(move _12, "index out of bounds: the length is {} but the index is {}", move _11, _10) -> [success: bb4, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _9 = &(*_2)[_10],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/memmem.rs:28:26: 28:45 (#0),
                    scope: scope[0],
                },
                kind: _8 = <B as core::convert::AsRef<[u8]>>::as_ref(move _9) -> [return: bb5, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            FakeRead(ForLet(None), _8),
            StorageDead(_10),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &(*_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/memmem.rs:29:26: 29:61 (#0),
                    scope: scope[1],
                },
                kind: _14 = memchr::memmem::Finder::<'_>::new::<[u8]>(move _15) -> [return: bb6, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/memmem.rs:29:26: 29:74 (#0),
                    scope: scope[1],
                },
                kind: _13 = memchr::memmem::Finder::<'_>::into_owned(move _14) -> [return: bb7, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            FakeRead(ForLet(None), _13),
            StorageLive(_16),
            StorageLive(_17),
            _17 = move _13,
            _16 = util::prefilter::memmem::Memmem { finder: move _17 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/memmem.rs:30:34: 30:35 (#0),
                    scope: scope[2],
                },
                kind: drop(_17) -> [return: bb8, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            _0 = core::option::Option::<util::prefilter::memmem::Memmem>::Some(move _16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/memmem.rs:30:35: 30:36 (#0),
                    scope: scope[2],
                },
                kind: drop(_16) -> [return: bb9, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/memmem.rs:31:9: 31:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_13) -> [return: bb10, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/memmem.rs:32:6: 32:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/memmem.rs:32:6: 32:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/memmem.rs:30:35: 30:36 (#0),
                    scope: scope[2],
                },
                kind: drop(_16) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/memmem.rs:31:9: 31:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_13) -> [return: bb15, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/memmem.rs:29:73: 29:74 (#0),
                    scope: scope[1],
                },
                kind: drop(_14) -> [return: bb15, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/memmem.rs:15:5: 32:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::prefilter::memmem::Memmem>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memmem.rs:18:10: 18:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/prefilter/memmem.rs:16:16: 16:25 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/prefilter/memmem.rs:16:9: 16:14 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/prefilter/memmem.rs:16:9: 16:14 (#0),
                    },
                ),
            ),
        ),
        ty: util::search::MatchKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memmem.rs:16:9: 16:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/prefilter/memmem.rs:17:18: 17:22 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/prefilter/memmem.rs:17:9: 17:16 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/prefilter/memmem.rs:17:9: 17:16 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [B/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memmem.rs:17:9: 17:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memmem.rs:25:13: 27:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memmem.rs:25:16: 25:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memmem.rs:25:16: 25:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [B/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memmem.rs:25:16: 25:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memmem.rs:25:35: 27:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/prefilter/memmem.rs:28:26: 28:45 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/prefilter/memmem.rs:28:17: 28:23 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memmem.rs:28:17: 28:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} B/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memmem.rs:28:26: 28:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memmem.rs:28:34: 28:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memmem.rs:28:26: 28:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memmem.rs:28:26: 28:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/prefilter/memmem.rs:29:26: 29:74 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/prefilter/memmem.rs:29:17: 29:23 (#0),
                    },
                ),
            ),
        ),
        ty: memchr::memmem::Finder<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memmem.rs:29:17: 29:23 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: memchr::memmem::Finder<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memmem.rs:29:26: 29:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memmem.rs:29:54: 29:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::prefilter::memmem::Memmem,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memmem.rs:30:18: 30:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: memchr::memmem::Finder<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/memmem.rs:30:27: 30:33 (#0),
            scope: scope[0],
        },
    },
]