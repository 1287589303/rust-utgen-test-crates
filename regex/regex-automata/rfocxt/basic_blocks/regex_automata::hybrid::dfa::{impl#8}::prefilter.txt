[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = move _2,
            _3 = core::option::Option::<core::option::Option<util::prefilter::Prefilter>>::Some(move _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:3075:28: 3075:29 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb1, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:3075:9: 3075:17 (#0),
                    scope: scope[0],
                },
                kind: drop((_1.1: core::option::Option<core::option::Option<util::prefilter::Prefilter>>)) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (_1.1: core::option::Option<core::option::Option<util::prefilter::Prefilter>>) = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:3075:28: 3075:29 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb4, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (_1.1: core::option::Option<core::option::Option<util::prefilter::Prefilter>>) = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:3075:9: 3075:17 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(_1.6: core::option::Option<bool>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:3076:12: 3076:50 (#0),
                    scope: scope[0],
                },
                kind: _6 = core::option::Option::<bool>::is_none(move _7) -> [return: bb5, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:3076:12: 3076:50 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [0: bb9, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:3078:22: 3078:42 (#0),
                    scope: scope[0],
                },
                kind: _11 = hybrid::dfa::Config::get_prefilter(move _12) -> [return: bb7, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = &_11,
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:3078:22: 3078:52 (#0),
                    scope: scope[0],
                },
                kind: _9 = core::option::Option::<&util::prefilter::Prefilter>::is_some(move _10) -> [return: bb8, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            _8 = core::option::Option::<bool>::Some(move _9),
            StorageDead(_9),
            (_1.6: core::option::Option<bool>) = move _8,
            StorageDead(_8),
            StorageDead(_11),
            _5 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:3076:9: 3079:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            _5 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:3076:9: 3079:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            _0 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:3081:5: 3081:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb11, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:3081:5: 3081:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb12, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:3081:6: 3081:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:3075:28: 3075:29 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:3081:5: 3081:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb15, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:3081:5: 3081:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb16, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/hybrid/dfa.rs:3074:5: 3081:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hybrid::dfa::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:3074:59: 3074:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                ImplicitSelf(
                    Mut,
                ),
            ),
        ),
        ty: hybrid::dfa::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:3074:22: 3074:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/hybrid/dfa.rs:3074:37: 3074:54 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/hybrid/dfa.rs:3074:32: 3074:35 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/hybrid/dfa.rs:3074:32: 3074:35 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<util::prefilter::Prefilter>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:3074:32: 3074:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::option::Option<util::prefilter::Prefilter>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:3075:20: 3075:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<util::prefilter::Prefilter>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:3075:25: 3075:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:3076:9: 3079:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:3076:12: 3076:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<bool>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:3076:12: 3076:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<bool>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:3078:17: 3078:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:3078:22: 3078:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<&'{erased} util::prefilter::Prefilter>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:3078:22: 3078:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} util::prefilter::Prefilter>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:3078:22: 3078:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hybrid::dfa::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/hybrid/dfa.rs:3078:22: 3078:26 (#0),
            scope: scope[0],
        },
    },
]