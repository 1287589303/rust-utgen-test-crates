[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:85:18: 85:49 (#0),
                    scope: scope[0],
                },
                kind: _4 = meta::regex::RegexInfo::is_always_anchored_start(move _5) -> [return: bb1, unwind: bb147],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:85:18: 85:49 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            _3 = core::option::Option::<util::prefilter::Prefilter>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:85:15: 152:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb37,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:105:31: 105:44 (#0),
                    scope: scope[2],
                },
                kind: _8 = meta::regex::RegexInfo::config(move _9) -> [return: bb4, unwind: bb147],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = &(*_8),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:105:31: 105:60 (#0),
                    scope: scope[2],
                },
                kind: _6 = meta::regex::Config::get_prefilter(move _7) -> [return: bb5, unwind: bb147],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            PlaceMention(_6),
            _10 = discriminant(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:105:19: 105:28 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _10) -> [1: bb6, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:105:19: 105:28 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb7, imaginary: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            _11 = ((_6 as Some).0: &util::prefilter::Prefilter),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &(*_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:109:14: 109:25 (#0),
                    scope: scope[2],
                },
                kind: _12 = <util::prefilter::Prefilter as core::clone::Clone>::clone(move _13) -> [return: bb8, unwind: bb147],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            _3 = core::option::Option::<util::prefilter::Prefilter>::Some(move _12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:109:25: 109:26 (#0),
                    scope: scope[2],
                },
                kind: drop(_12) -> [return: bb9, unwind: bb147],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:105:12: 152:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb36,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:110:15: 110:28 (#0),
                    scope: scope[0],
                },
                kind: _16 = meta::regex::RegexInfo::config(move _17) -> [return: bb11, unwind: bb147],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _15 = &(*_16),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:110:15: 110:49 (#0),
                    scope: scope[0],
                },
                kind: _14 = meta::regex::Config::get_auto_prefilter(move _15) -> [return: bb12, unwind: bb147],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:110:15: 110:49 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _14) -> [0: bb34, otherwise: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_15),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:111:20: 111:33 (#0),
                    scope: scope[0],
                },
                kind: _20 = meta::regex::RegexInfo::config(move _21) -> [return: bb14, unwind: bb147],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _19 = &(*_20),
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:111:20: 111:50 (#0),
                    scope: scope[0],
                },
                kind: _18 = meta::regex::Config::get_match_kind(move _19) -> [return: bb15, unwind: bb147],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            FakeRead(ForLet(None), _18),
            StorageDead(_20),
            StorageLive(_22),
            StorageLive(_23),
            _23 = _18,
            StorageLive(_24),
            _24 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:112:24: 112:68 (#0),
                    scope: scope[3],
                },
                kind: _22 = util::prefilter::prefixes::<&regex_syntax::hir::Hir>(move _23, move _24) -> [return: bb16, unwind: bb147],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageDead(_23),
            FakeRead(ForLet(None), _22),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            _27 = &(*_1),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &_22,
            _28 = &(*_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:115:28: 115:63 (#0),
                    scope: scope[5],
                },
                kind: _26 = meta::strategy::Pre::<()>::from_prefixes(move _27, move _28) -> [return: bb17, unwind: bb146],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_27),
            PlaceMention(_26),
            _30 = discriminant(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:115:16: 115:25 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _30) -> [1: bb18, otherwise: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:115:16: 115:25 (#0),
                    scope: scope[5],
                },
                kind: falseEdge -> [real: bb19, imaginary: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_31),
            _31 = move ((_26 as Some).0: std::sync::Arc<dyn meta::strategy::Strategy>),
            StorageLive(_33),
            StorageLive(_34),
            _34 = move _31,
            _33 = move _34 as std::sync::Arc<dyn meta::strategy::Strategy> (PointerCoercion(Unsize)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:120:25: 120:26 (#0),
                    scope: scope[5],
                },
                kind: drop(_34) -> [return: bb20, unwind: bb143],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            _0 = core::result::Result::<std::sync::Arc<dyn meta::strategy::Strategy>, meta::error::BuildError>::Ok(move _33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:120:26: 120:27 (#0),
                    scope: scope[5],
                },
                kind: drop(_33) -> [return: bb21, unwind: bb144],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:121:9: 121:10 (#0),
                    scope: scope[4],
                },
                kind: drop(_31) -> [return: bb105, unwind: bb145],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _25 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:121:9: 121:10 (#0),
                    scope: scope[4],
                },
                kind: drop(_26) -> [return: bb23, unwind: bb146],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_26),
            StorageDead(_25),
            StorageLive(_35),
            StorageLive(_36),
            StorageLive(_37),
            _37 = &(*_1),
            StorageLive(_38),
            _38 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:134:28: 134:70 (#0),
                    scope: scope[6],
                },
                kind: _36 = meta::strategy::Pre::<()>::from_alternation_literals(move _37, move _38) -> [return: bb24, unwind: bb146],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            StorageDead(_37),
            PlaceMention(_36),
            _39 = discriminant(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:134:16: 134:25 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _39) -> [1: bb25, otherwise: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:134:16: 134:25 (#0),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb26, imaginary: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_40),
            _40 = move ((_36 as Some).0: std::sync::Arc<dyn meta::strategy::Strategy>),
            StorageLive(_42),
            StorageLive(_43),
            _43 = move _40,
            _42 = move _43 as std::sync::Arc<dyn meta::strategy::Strategy> (PointerCoercion(Unsize)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:139:25: 139:26 (#0),
                    scope: scope[6],
                },
                kind: drop(_43) -> [return: bb27, unwind: bb140],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            _0 = core::result::Result::<std::sync::Arc<dyn meta::strategy::Strategy>, meta::error::BuildError>::Ok(move _42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:139:26: 139:27 (#0),
                    scope: scope[6],
                },
                kind: drop(_42) -> [return: bb28, unwind: bb141],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:140:9: 140:10 (#0),
                    scope: scope[4],
                },
                kind: drop(_40) -> [return: bb103, unwind: bb142],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _35 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:140:9: 140:10 (#0),
                    scope: scope[4],
                },
                kind: drop(_36) -> [return: bb30, unwind: bb146],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_35),
            StorageLive(_44),
            StorageLive(_45),
            _45 = &_22,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:141:9: 141:28 (#0),
                    scope: scope[4],
                },
                kind: _44 = regex_syntax::hir::literal::Seq::literals(move _45) -> [return: bb31, unwind: bb146],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            StorageLive(_46),
            StorageLive(_47),
            _47 = &_18,
            _46 = {closure@regex-automata/src/meta/strategy.rs:141:38: 141:47} { kind: move _47 },
            StorageDead(_47),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:141:9: 148:11 (#0),
                    scope: scope[4],
                },
                kind: _3 = core::option::Option::<&[regex_syntax::hir::literal::Literal]>::and_then::<util::prefilter::Prefilter, {closure@regex-automata/src/meta/strategy.rs:141:38: 141:47}>(move _44, move _46) -> [return: bb32, unwind: bb146],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
            StorageDead(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:149:5: 149:6 (#0),
                    scope: scope[3],
                },
                kind: drop(_22) -> [return: bb33, unwind: bb147],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:110:12: 152:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb35,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_15),
            _3 = core::option::Option::<util::prefilter::Prefilter>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:110:12: 152:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb35,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:105:12: 152:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb36,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:85:15: 152:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb37,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_48),
            StorageLive(_49),
            StorageLive(_50),
            StorageLive(_51),
            StorageLive(_52),
            _52 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:153:30: 153:42 (#0),
                    scope: scope[1],
                },
                kind: _51 = <meta::regex::RegexInfo as core::clone::Clone>::clone(move _52) -> [return: bb38, unwind: bb139],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            StorageLive(_53),
            StorageLive(_54),
            _54 = &_3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:153:44: 153:55 (#0),
                    scope: scope[1],
                },
                kind: _53 = <core::option::Option<util::prefilter::Prefilter> as core::clone::Clone>::clone(move _54) -> [return: bb39, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            StorageLive(_55),
            _55 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:153:20: 153:62 (#0),
                    scope: scope[1],
                },
                kind: _50 = meta::strategy::Core::new(move _51, move _53, move _55) -> [return: bb40, unwind: bb137],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_55),
            StorageDead(_53),
            StorageDead(_51),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:153:20: 153:63 (#3856),
                    scope: scope[1],
                },
                kind: _49 = <core::result::Result<meta::strategy::Core, meta::error::BuildError> as core::ops::Try>::branch(move _50) -> [return: bb41, unwind: bb136],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            PlaceMention(_49),
            _56 = discriminant(_49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:153:20: 153:63 (#3856),
                    scope: scope[1],
                },
                kind: switchInt(move _56) -> [0: bb44, 1: bb43, otherwise: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:153:20: 153:63 (#3856),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:153:62: 153:63 (#3857),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb45, imaginary: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_60),
            _60 = move ((_49 as Continue).0: meta::strategy::Core),
            _48 = move _60,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:153:62: 153:63 (#0),
                    scope: scope[1],
                },
                kind: drop(_60) -> [return: bb47, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_57),
            _57 = move ((_49 as Break).0: core::result::Result<core::convert::Infallible, meta::error::BuildError>),
            StorageLive(_59),
            _59 = move _57,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:153:20: 153:63 (#3856),
                    scope: scope[9],
                },
                kind: _0 = <core::result::Result<std::sync::Arc<dyn meta::strategy::Strategy>, meta::error::BuildError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, meta::error::BuildError>>>::from_residual(move _59) -> [return: bb46, unwind: bb133],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:153:62: 153:63 (#3857),
                    scope: scope[1],
                },
                kind: drop(_57) -> [return: bb100, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
            FakeRead(ForLet(None), _48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:153:63: 153:64 (#0),
                    scope: scope[1],
                },
                kind: drop(_49) -> [return: bb48, unwind: bb132],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_49),
            StorageLive(_61),
            StorageLive(_62),
            StorageLive(_63),
            _63 = move _48,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:163:18: 163:44 (#0),
                    scope: scope[7],
                },
                kind: _62 = meta::strategy::ReverseAnchored::new(move _63) -> [return: bb49, unwind: bb131],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
            PlaceMention(_62),
            _64 = discriminant(_62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:163:12: 163:44 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _64) -> [0: bb52, 1: bb51, otherwise: bb50],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:163:18: 163:44 (#0),
                    scope: scope[7],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:164:9: 164:18 (#0),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb53, imaginary: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_66),
            _66 = move ((_62 as Ok).0: meta::strategy::ReverseAnchored),
            StorageLive(_68),
            StorageLive(_69),
            StorageLive(_70),
            _70 = move _66,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:167:23: 167:35 (#0),
                    scope: scope[13],
                },
                kind: _69 = std::sync::Arc::<meta::strategy::ReverseAnchored>::new(move _70) -> [return: bb55, unwind: bb128],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_65),
            _65 = move ((_62 as Err).0: meta::strategy::Core),
            _61 = move _65,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:164:25: 164:26 (#0),
                    scope: scope[7],
                },
                kind: drop(_65) -> [return: bb54, unwind: bb130],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_65),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:163:5: 163:9 (#0),
                    scope: scope[7],
                },
                kind: drop(_48) -> [return: bb58, unwind: bb59],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _68 = move _69 as std::sync::Arc<dyn meta::strategy::Strategy> (PointerCoercion(Unsize)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:167:34: 167:35 (#0),
                    scope: scope[13],
                },
                kind: drop(_69) -> [return: bb56, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_70),
            StorageDead(_69),
            _0 = core::result::Result::<std::sync::Arc<dyn meta::strategy::Strategy>, meta::error::BuildError>::Ok(move _68),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:167:35: 167:36 (#0),
                    scope: scope[13],
                },
                kind: drop(_68) -> [return: bb57, unwind: bb129],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_68),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:168:9: 168:10 (#0),
                    scope: scope[7],
                },
                kind: drop(_66) -> [return: bb97, unwind: bb130],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _48 = move _61,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:169:5: 169:6 (#0),
                    scope: scope[7],
                },
                kind: drop(_61) -> [return: bb60, unwind: bb130],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _48 = move _61,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:169:5: 169:6 (#0),
                    scope: scope[7],
                },
                kind: drop(_61) -> [return: bb130, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_61),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:169:6: 169:7 (#0),
                    scope: scope[7],
                },
                kind: drop(_62) -> [return: bb61, unwind: bb132],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_62),
            StorageLive(_71),
            StorageLive(_72),
            StorageLive(_73),
            _73 = move _48,
            StorageLive(_74),
            _74 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:170:18: 170:48 (#0),
                    scope: scope[7],
                },
                kind: _72 = meta::strategy::ReverseSuffix::new(move _73, move _74) -> [return: bb62, unwind: bb125],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_74),
            StorageDead(_73),
            PlaceMention(_72),
            _75 = discriminant(_72),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:170:12: 170:48 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _75) -> [0: bb65, 1: bb64, otherwise: bb63],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _72),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:170:18: 170:48 (#0),
                    scope: scope[7],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:171:9: 171:18 (#0),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb66, imaginary: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_77),
            _77 = move ((_72 as Ok).0: meta::strategy::ReverseSuffix),
            StorageLive(_79),
            StorageLive(_80),
            StorageLive(_81),
            _81 = move _77,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:174:23: 174:35 (#0),
                    scope: scope[15],
                },
                kind: _80 = std::sync::Arc::<meta::strategy::ReverseSuffix>::new(move _81) -> [return: bb68, unwind: bb122],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_76),
            _76 = move ((_72 as Err).0: meta::strategy::Core),
            _71 = move _76,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:171:25: 171:26 (#0),
                    scope: scope[7],
                },
                kind: drop(_76) -> [return: bb67, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_76),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:170:5: 170:9 (#0),
                    scope: scope[7],
                },
                kind: drop(_48) -> [return: bb71, unwind: bb72],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _79 = move _80 as std::sync::Arc<dyn meta::strategy::Strategy> (PointerCoercion(Unsize)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:174:34: 174:35 (#0),
                    scope: scope[15],
                },
                kind: drop(_80) -> [return: bb69, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_81),
            StorageDead(_80),
            _0 = core::result::Result::<std::sync::Arc<dyn meta::strategy::Strategy>, meta::error::BuildError>::Ok(move _79),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:174:35: 174:36 (#0),
                    scope: scope[15],
                },
                kind: drop(_79) -> [return: bb70, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_79),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:175:9: 175:10 (#0),
                    scope: scope[7],
                },
                kind: drop(_77) -> [return: bb95, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _48 = move _71,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:176:5: 176:6 (#0),
                    scope: scope[7],
                },
                kind: drop(_71) -> [return: bb73, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _48 = move _71,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:176:5: 176:6 (#0),
                    scope: scope[7],
                },
                kind: drop(_71) -> [return: bb124, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:176:6: 176:7 (#0),
                    scope: scope[7],
                },
                kind: drop(_72) -> [return: bb74, unwind: bb132],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_72),
            StorageLive(_82),
            StorageLive(_83),
            StorageLive(_84),
            _84 = move _48,
            StorageLive(_85),
            _85 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:177:18: 177:47 (#0),
                    scope: scope[7],
                },
                kind: _83 = meta::strategy::ReverseInner::new(move _84, move _85) -> [return: bb75, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_85),
            StorageDead(_84),
            PlaceMention(_83),
            _86 = discriminant(_83),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:177:12: 177:47 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _86) -> [0: bb78, 1: bb77, otherwise: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _83),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:177:18: 177:47 (#0),
                    scope: scope[7],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:178:9: 178:18 (#0),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb79, imaginary: bb78],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_88),
            _88 = move ((_83 as Ok).0: meta::strategy::ReverseInner),
            StorageLive(_90),
            StorageLive(_91),
            StorageLive(_92),
            _92 = move _88,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:181:23: 181:35 (#0),
                    scope: scope[17],
                },
                kind: _91 = std::sync::Arc::<meta::strategy::ReverseInner>::new(move _92) -> [return: bb81, unwind: bb116],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_87),
            _87 = move ((_83 as Err).0: meta::strategy::Core),
            _82 = move _87,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:178:25: 178:26 (#0),
                    scope: scope[7],
                },
                kind: drop(_87) -> [return: bb80, unwind: bb118],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_87),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:177:5: 177:9 (#0),
                    scope: scope[7],
                },
                kind: drop(_48) -> [return: bb84, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _90 = move _91 as std::sync::Arc<dyn meta::strategy::Strategy> (PointerCoercion(Unsize)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:181:34: 181:35 (#0),
                    scope: scope[17],
                },
                kind: drop(_91) -> [return: bb82, unwind: bb114],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_92),
            StorageDead(_91),
            _0 = core::result::Result::<std::sync::Arc<dyn meta::strategy::Strategy>, meta::error::BuildError>::Ok(move _90),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:181:35: 181:36 (#0),
                    scope: scope[17],
                },
                kind: drop(_90) -> [return: bb83, unwind: bb117],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_90),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:182:9: 182:10 (#0),
                    scope: scope[7],
                },
                kind: drop(_88) -> [return: bb93, unwind: bb118],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _48 = move _82,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:183:5: 183:6 (#0),
                    scope: scope[7],
                },
                kind: drop(_82) -> [return: bb86, unwind: bb118],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _48 = move _82,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:183:5: 183:6 (#0),
                    scope: scope[7],
                },
                kind: drop(_82) -> [return: bb118, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_82),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:183:6: 183:7 (#0),
                    scope: scope[7],
                },
                kind: drop(_83) -> [return: bb87, unwind: bb132],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_83),
            StorageLive(_93),
            StorageLive(_94),
            StorageLive(_95),
            _95 = move _48,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:185:8: 185:22 (#0),
                    scope: scope[7],
                },
                kind: _94 = std::sync::Arc::<meta::strategy::Core>::new(move _95) -> [return: bb88, unwind: bb113],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _93 = move _94 as std::sync::Arc<dyn meta::strategy::Strategy> (PointerCoercion(Unsize)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:185:21: 185:22 (#0),
                    scope: scope[7],
                },
                kind: drop(_94) -> [return: bb89, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_95),
            StorageDead(_94),
            _0 = core::result::Result::<std::sync::Arc<dyn meta::strategy::Strategy>, meta::error::BuildError>::Ok(move _93),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:185:22: 185:23 (#0),
                    scope: scope[7],
                },
                kind: drop(_93) -> [return: bb90, unwind: bb132],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_93),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:186:1: 186:2 (#0),
                    scope: scope[1],
                },
                kind: drop(_48) -> [return: bb91, unwind: bb139],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:186:1: 186:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb92, unwind: bb147],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:186:2: 186:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb110,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_88),
            StorageDead(_82),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:183:6: 183:7 (#0),
                    scope: scope[7],
                },
                kind: drop(_83) -> [return: bb94, unwind: bb132],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_83),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb99,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_77),
            StorageDead(_71),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:176:6: 176:7 (#0),
                    scope: scope[7],
                },
                kind: drop(_72) -> [return: bb96, unwind: bb132],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_72),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb99,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_66),
            StorageDead(_61),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:169:6: 169:7 (#0),
                    scope: scope[7],
                },
                kind: drop(_62) -> [return: bb98, unwind: bb132],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb99,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:186:1: 186:2 (#0),
                    scope: scope[1],
                },
                kind: drop(_48) -> [return: bb102, unwind: bb139],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_57),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:153:63: 153:64 (#0),
                    scope: scope[1],
                },
                kind: drop(_49) -> [return: bb101, unwind: bb139],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb102,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:186:1: 186:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb109, unwind: bb147],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:140:9: 140:10 (#0),
                    scope: scope[4],
                },
                kind: drop(_36) -> [return: bb104, unwind: bb146],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[4],
                },
                kind: goto -> bb107,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:121:9: 121:10 (#0),
                    scope: scope[4],
                },
                kind: drop(_26) -> [return: bb106, unwind: bb146],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_26),
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[4],
                },
                kind: goto -> bb107,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:149:5: 149:6 (#0),
                    scope: scope[3],
                },
                kind: drop(_22) -> [return: bb108, unwind: bb147],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_18),
            StorageDead(_14),
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb109,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:186:2: 186:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb110,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:186:2: 186:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:185:21: 185:22 (#0),
                    scope: scope[7],
                },
                kind: drop(_95) -> [return: bb112, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:185:22: 185:23 (#0),
                    scope: scope[7],
                },
                kind: drop(_93) -> [return: bb132, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:185:21: 185:22 (#0),
                    scope: scope[7],
                },
                kind: drop(_95) -> [return: bb132, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:181:34: 181:35 (#0),
                    scope: scope[17],
                },
                kind: drop(_92) -> [return: bb115, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:181:35: 181:36 (#0),
                    scope: scope[17],
                },
                kind: drop(_90) -> [return: bb117, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:181:34: 181:35 (#0),
                    scope: scope[17],
                },
                kind: drop(_92) -> [return: bb117, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:182:9: 182:10 (#0),
                    scope: scope[7],
                },
                kind: drop(_88) -> [return: bb118, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:183:6: 183:7 (#0),
                    scope: scope[7],
                },
                kind: drop(_83) -> [return: bb132, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:177:46: 177:47 (#0),
                    scope: scope[7],
                },
                kind: drop(_84) -> [return: bb132, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:174:34: 174:35 (#0),
                    scope: scope[15],
                },
                kind: drop(_81) -> [return: bb121, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:174:35: 174:36 (#0),
                    scope: scope[15],
                },
                kind: drop(_79) -> [return: bb123, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:174:34: 174:35 (#0),
                    scope: scope[15],
                },
                kind: drop(_81) -> [return: bb123, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:175:9: 175:10 (#0),
                    scope: scope[7],
                },
                kind: drop(_77) -> [return: bb124, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:176:6: 176:7 (#0),
                    scope: scope[7],
                },
                kind: drop(_72) -> [return: bb132, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:170:47: 170:48 (#0),
                    scope: scope[7],
                },
                kind: drop(_73) -> [return: bb132, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:167:34: 167:35 (#0),
                    scope: scope[13],
                },
                kind: drop(_70) -> [return: bb127, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:167:35: 167:36 (#0),
                    scope: scope[13],
                },
                kind: drop(_68) -> [return: bb129, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:167:34: 167:35 (#0),
                    scope: scope[13],
                },
                kind: drop(_70) -> [return: bb129, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:168:9: 168:10 (#0),
                    scope: scope[7],
                },
                kind: drop(_66) -> [return: bb130, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:169:6: 169:7 (#0),
                    scope: scope[7],
                },
                kind: drop(_62) -> [return: bb132, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:163:43: 163:44 (#0),
                    scope: scope[7],
                },
                kind: drop(_63) -> [return: bb132, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:186:1: 186:2 (#0),
                    scope: scope[1],
                },
                kind: drop(_48) -> [return: bb139, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:153:62: 153:63 (#3856),
                    scope: scope[9],
                },
                kind: drop(_59) -> [return: bb134, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:153:62: 153:63 (#3857),
                    scope: scope[1],
                },
                kind: drop(_57) -> [return: bb135, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:153:63: 153:64 (#0),
                    scope: scope[1],
                },
                kind: drop(_49) -> [return: bb139, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:153:62: 153:63 (#3856),
                    scope: scope[1],
                },
                kind: drop(_50) -> [return: bb139, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:153:61: 153:62 (#0),
                    scope: scope[1],
                },
                kind: drop(_53) -> [return: bb138, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:153:61: 153:62 (#0),
                    scope: scope[1],
                },
                kind: drop(_51) -> [return: bb139, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:186:1: 186:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb147, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:139:26: 139:27 (#0),
                    scope: scope[6],
                },
                kind: drop(_42) -> [return: bb141, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:140:9: 140:10 (#0),
                    scope: scope[4],
                },
                kind: drop(_40) -> [return: bb142, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:140:9: 140:10 (#0),
                    scope: scope[4],
                },
                kind: drop(_36) -> [return: bb146, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:120:26: 120:27 (#0),
                    scope: scope[5],
                },
                kind: drop(_33) -> [return: bb144, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:121:9: 121:10 (#0),
                    scope: scope[4],
                },
                kind: drop(_31) -> [return: bb145, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:121:9: 121:10 (#0),
                    scope: scope[4],
                },
                kind: drop(_26) -> [return: bb146, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:149:5: 149:6 (#0),
                    scope: scope[3],
                },
                kind: drop(_22) -> [return: bb147, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:78:1: 186:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<std::sync::Arc<dyn [Binder { value: Trait(meta::strategy::Strategy), bound_vars: [] }] + '{erased}, std::alloc::Global>, meta::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:81:6: 81:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/meta/strategy.rs:79:11: 79:21 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:79:5: 79:9 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:79:5: 79:9 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:79:5: 79:9 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/meta/strategy.rs:80:11: 80:18 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:80:5: 80:9 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:80:5: 80:9 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [&'{erased} regex_syntax::hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:80:5: 80:9 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:85:15: 152:6 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:85:9: 85:12 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<util::prefilter::Prefilter>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:85:9: 85:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:85:18: 85:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:85:18: 85:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} util::prefilter::Prefilter>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:105:31: 105:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:105:31: 105:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:105:31: 105:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:105:31: 105:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:105:19: 105:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                regex-automata/src/meta/strategy.rs:105:31: 105:60 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:105:19: 105:28 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} util::prefilter::Prefilter,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:105:24: 105:27 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::prefilter::Prefilter,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:109:14: 109:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/strategy.rs:109:9: 109:26 (#0),
                },
            ),
        ),
        ty: &'{erased} util::prefilter::Prefilter,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:109:14: 109:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:110:15: 110:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:110:15: 110:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:110:15: 110:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:110:15: 110:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:111:20: 111:50 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:111:13: 111:17 (#0),
                    },
                ),
            ),
        ),
        ty: util::search::MatchKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:111:13: 111:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:111:20: 111:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:111:20: 111:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:111:20: 111:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:112:24: 112:68 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:112:13: 112:21 (#0),
                    },
                ),
            ),
        ),
        ty: regex_syntax::hir::literal::Seq,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:112:13: 112:21 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::search::MatchKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:112:57: 112:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} regex_syntax::hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:112:63: 112:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:115:9: 121:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<std::sync::Arc<dyn [Binder { value: Trait(meta::strategy::Strategy), bound_vars: [] }] + '{erased}, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:115:28: 115:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:115:47: 115:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} regex_syntax::hir::literal::Seq,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:115:53: 115:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} regex_syntax::hir::literal::Seq,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:115:53: 115:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:115:16: 115:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _26,
                                ),
                                regex-automata/src/meta/strategy.rs:115:28: 115:63 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:115:16: 115:25 (#0),
                    },
                ),
            ),
        ),
        ty: std::sync::Arc<dyn [Binder { value: Trait(meta::strategy::Strategy), bound_vars: [] }] + '{erased}, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:115:21: 115:24 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:115:64: 121:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::sync::Arc<dyn [Binder { value: Trait(meta::strategy::Strategy), bound_vars: [] }] + '{erased}, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:120:23: 120:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::sync::Arc<dyn [Binder { value: Trait(meta::strategy::Strategy), bound_vars: [] }] + '{erased}, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:120:23: 120:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:134:9: 140:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<std::sync::Arc<dyn [Binder { value: Trait(meta::strategy::Strategy), bound_vars: [] }] + '{erased}, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:134:28: 134:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:134:59: 134:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} regex_syntax::hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:134:65: 134:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:134:16: 134:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _36,
                                ),
                                regex-automata/src/meta/strategy.rs:134:28: 134:70 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:134:16: 134:25 (#0),
                    },
                ),
            ),
        ),
        ty: std::sync::Arc<dyn [Binder { value: Trait(meta::strategy::Strategy), bound_vars: [] }] + '{erased}, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:134:21: 134:24 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:134:71: 140:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::sync::Arc<dyn [Binder { value: Trait(meta::strategy::Strategy), bound_vars: [] }] + '{erased}, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:139:23: 139:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::sync::Arc<dyn [Binder { value: Trait(meta::strategy::Strategy), bound_vars: [] }] + '{erased}, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:139:23: 139:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/strategy.rs:141:9: 148:11 (#0),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} [regex_syntax::hir::literal::Literal]>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:141:9: 141:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/strategy.rs:141:9: 148:11 (#0),
                },
            ),
        ),
        ty: &'{erased} regex_syntax::hir::literal::Seq,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:141:9: 141:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/strategy.rs:141:9: 148:11 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:2053 ~ regex_automata[00dd]::meta::strategy::new::{closure#0}),
            [
                i32,
                Binder { value: extern "RustCall" fn((&'{erased} [regex_syntax::hir::literal::Literal],)) -> core::option::Option<util::prefilter::Prefilter>, bound_vars: [] },
                (&'{erased} util::search::MatchKind,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:141:38: 148:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/strategy.rs:141:9: 148:11 (#0),
                },
            ),
        ),
        ty: &'{erased} util::search::MatchKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:141:38: 148:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:153:20: 153:63 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:153:9: 153:17 (#0),
                    },
                ),
            ),
        ),
        ty: meta::strategy::Core,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:153:9: 153:17 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, meta::error::BuildError>, meta::strategy::Core>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:153:20: 153:63 (#3856),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<meta::strategy::Core, meta::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:153:20: 153:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:153:30: 153:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:153:30: 153:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::prefilter::Prefilter>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:153:44: 153:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<util::prefilter::Prefilter>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:153:44: 153:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} regex_syntax::hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:153:57: 153:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:153:62: 153:63 (#3857),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _49,
                                ),
                                regex-automata/src/meta/strategy.rs:153:20: 153:63 (#3856),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:153:62: 153:63 (#3857),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, meta::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:153:62: 153:63 (#3857),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:153:62: 153:63 (#3857),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, meta::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:153:62: 153:63 (#3857),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _49,
                                ),
                                regex-automata/src/meta/strategy.rs:153:20: 153:63 (#3856),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:153:20: 153:63 (#3856),
                    },
                ),
            ),
        ),
        ty: meta::strategy::Core,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:153:20: 153:63 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: meta::strategy::Core,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:163:12: 169:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<meta::strategy::ReverseAnchored, meta::strategy::Core>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:163:18: 163:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: meta::strategy::Core,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:163:39: 163:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:164:9: 164:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _62,
                                ),
                                regex-automata/src/meta/strategy.rs:163:18: 163:44 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:164:9: 164:18 (#0),
                    },
                ),
            ),
        ),
        ty: meta::strategy::Core,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:164:13: 164:17 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _62,
                                ),
                                regex-automata/src/meta/strategy.rs:163:18: 163:44 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:165:9: 165:15 (#0),
                    },
                ),
            ),
        ),
        ty: meta::strategy::ReverseAnchored,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:165:12: 165:14 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:165:19: 168:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::sync::Arc<dyn [Binder { value: Trait(meta::strategy::Strategy), bound_vars: [] }] + '{erased}, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:167:23: 167:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::sync::Arc<meta::strategy::ReverseAnchored, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:167:23: 167:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: meta::strategy::ReverseAnchored,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:167:32: 167:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: meta::strategy::Core,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:170:12: 176:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<meta::strategy::ReverseSuffix, meta::strategy::Core>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:170:18: 170:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: meta::strategy::Core,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:170:37: 170:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} regex_syntax::hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:170:43: 170:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:171:9: 171:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _72,
                                ),
                                regex-automata/src/meta/strategy.rs:170:18: 170:48 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:171:9: 171:18 (#0),
                    },
                ),
            ),
        ),
        ty: meta::strategy::Core,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:171:13: 171:17 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _72,
                                ),
                                regex-automata/src/meta/strategy.rs:170:18: 170:48 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:172:9: 172:15 (#0),
                    },
                ),
            ),
        ),
        ty: meta::strategy::ReverseSuffix,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:172:12: 172:14 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:172:19: 175:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::sync::Arc<dyn [Binder { value: Trait(meta::strategy::Strategy), bound_vars: [] }] + '{erased}, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:174:23: 174:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::sync::Arc<meta::strategy::ReverseSuffix, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:174:23: 174:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: meta::strategy::ReverseSuffix,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:174:32: 174:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: meta::strategy::Core,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:177:12: 183:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<meta::strategy::ReverseInner, meta::strategy::Core>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:177:18: 177:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: meta::strategy::Core,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:177:36: 177:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} regex_syntax::hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:177:42: 177:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:178:9: 178:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _83,
                                ),
                                regex-automata/src/meta/strategy.rs:177:18: 177:47 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:178:9: 178:18 (#0),
                    },
                ),
            ),
        ),
        ty: meta::strategy::Core,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:178:13: 178:17 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _83,
                                ),
                                regex-automata/src/meta/strategy.rs:177:18: 177:47 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:179:9: 179:15 (#0),
                    },
                ),
            ),
        ),
        ty: meta::strategy::ReverseInner,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:179:12: 179:14 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:179:19: 182:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::sync::Arc<dyn [Binder { value: Trait(meta::strategy::Strategy), bound_vars: [] }] + '{erased}, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:181:23: 181:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::sync::Arc<meta::strategy::ReverseInner, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:181:23: 181:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: meta::strategy::ReverseInner,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:181:32: 181:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::sync::Arc<dyn [Binder { value: Trait(meta::strategy::Strategy), bound_vars: [] }] + '{erased}, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:185:8: 185:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/strategy.rs:185:5: 185:23 (#0),
                },
            ),
        ),
        ty: std::sync::Arc<meta::strategy::Core, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:185:8: 185:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/strategy.rs:185:5: 185:23 (#0),
                },
            ),
        ),
        ty: meta::strategy::Core,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:185:17: 185:21 (#0),
            scope: scope[0],
        },
    },
]