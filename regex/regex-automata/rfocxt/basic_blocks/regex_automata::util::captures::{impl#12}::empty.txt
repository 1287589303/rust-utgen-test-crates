[
    BasicBlockData {
        statements: [
            StorageLive(_1),
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = [],
            _3 = &_4,
            _2 = move _3 as &[core::option::Option<std::sync::Arc<str>>] (PointerCoercion(Unsize)),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2483:37: 2483:46 (#0),
                    scope: scope[0],
                },
                kind: _1 = core::slice::<impl [core::option::Option<std::sync::Arc<str>>]>::iter(move _2) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
            _0 = util::captures::GroupInfoPatternNames::<'_> { it: move _1 },
            StorageDead(_1),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2484:6: 2484:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/captures.rs:2482:5: 2484:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::captures::GroupInfoPatternNames<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2482:19: 2482:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::slice::Iter<'{erased}, core::option::Option<std::sync::Arc<str, std::alloc::Global>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2483:37: 2483:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:2483:9: 2483:48 (#0),
                },
            ),
        ),
        ty: &'{erased} [core::option::Option<std::sync::Arc<str, std::alloc::Global>>],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2483:37: 2483:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:2483:9: 2483:48 (#0),
                },
            ),
        ),
        ty: &'{erased} [core::option::Option<std::sync::Arc<str, std::alloc::Global>>; 0_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2483:37: 2483:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/captures.rs:2483:9: 2483:48 (#0),
                },
            ),
        ),
        ty: [core::option::Option<std::sync::Arc<str, std::alloc::Global>>; 0_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/captures.rs:2483:37: 2483:39 (#0),
            scope: scope[0],
        },
    },
]