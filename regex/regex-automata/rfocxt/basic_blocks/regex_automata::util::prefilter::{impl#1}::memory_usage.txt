[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/mod.rs:514:11: 514:17 (#0),
                    scope: scope[0],
                },
                kind: _4 = <std::sync::Arc<P> as core::ops::Deref>::deref(move _5) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            _3 = &(*_4),
            _2 = &(*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/mod.rs:514:9: 514:33 (#0),
                    scope: scope[0],
                },
                kind: _0 = <P as util::prefilter::PrefilterI>::memory_usage(move _2) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/mod.rs:515:6: 515:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/mod.rs:513:5: 515:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/mod.rs:513:31: 513:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} std::sync::Arc<P/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/mod.rs:513:21: 513:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/prefilter/mod.rs:514:9: 514:33 (#0),
                },
            ),
        ),
        ty: &'{erased} P/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/mod.rs:514:9: 514:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/prefilter/mod.rs:514:9: 514:33 (#0),
                },
            ),
        ),
        ty: &'{erased} P/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/mod.rs:514:9: 514:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/prefilter/mod.rs:514:9: 514:33 (#0),
                },
            ),
        ),
        ty: &'{erased} P/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/mod.rs:514:11: 514:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/prefilter/mod.rs:514:9: 514:33 (#0),
                },
            ),
        ),
        ty: &'{erased} std::sync::Arc<P/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/mod.rs:514:12: 514:17 (#0),
            scope: scope[0],
        },
    },
]