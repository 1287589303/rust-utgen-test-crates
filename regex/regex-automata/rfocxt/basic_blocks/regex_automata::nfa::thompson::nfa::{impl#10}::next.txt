[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = &mut ((*_1).0: util::primitives::PatternIDIter),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/nfa.rs:2038:9: 2038:23 (#0),
                    scope: scope[0],
                },
                kind: _0 = <util::primitives::PatternIDIter as core::iter::Iterator>::next(move _2) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/nfa.rs:2039:6: 2039:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/nfa.rs:2037:5: 2039:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::primitives::PatternID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:2037:27: 2037:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut nfa::thompson::nfa::PatternIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:2037:13: 2037:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/nfa/thompson/nfa.rs:2038:9: 2038:23 (#0),
                },
            ),
        ),
        ty: &'{erased} mut util::primitives::PatternIDIter,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/nfa.rs:2038:9: 2038:16 (#0),
            scope: scope[0],
        },
    },
]