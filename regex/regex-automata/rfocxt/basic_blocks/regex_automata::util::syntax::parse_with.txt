[
    BasicBlockData {
        statements: [
            StorageLive(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:87:23: 87:43 (#0),
                    scope: scope[0],
                },
                kind: _3 = regex_syntax::ParserBuilder::new() -> [return: bb1, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_2),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &mut _3,
            _6 = &mut (*_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:88:5: 88:31 (#0),
                    scope: scope[1],
                },
                kind: _4 = util::syntax::Config::apply(move _5, move _6) -> [return: bb2, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_7),
            StorageDead(_4),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &_3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:89:5: 89:20 (#0),
                    scope: scope[1],
                },
                kind: _9 = regex_syntax::ParserBuilder::build(move _10) -> [return: bb3, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = &mut _9,
            StorageDead(_10),
            StorageLive(_11),
            _11 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:89:5: 89:35 (#0),
                    scope: scope[1],
                },
                kind: _0 = regex_syntax::Parser::parse(move _8, move _11) -> [return: bb4, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_8),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:90:1: 90:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb5, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:90:2: 90:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:90:1: 90:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/syntax.rs:86:1: 90:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<regex_syntax::hir::Hir, regex_syntax::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:86:54: 86:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/syntax.rs:86:28: 86:32 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/syntax.rs:86:19: 86:26 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/syntax.rs:86:19: 86:26 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:86:19: 86:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/syntax.rs:86:42: 86:49 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/syntax.rs:86:34: 86:40 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/syntax.rs:86:34: 86:40 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} util::syntax::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:86:34: 86:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/syntax.rs:87:23: 87:43 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/syntax.rs:87:9: 87:20 (#0),
                    },
                ),
            ),
        ),
        ty: regex_syntax::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:87:9: 87:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:88:5: 88:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::syntax::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:88:5: 88:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:88:18: 88:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_syntax::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:88:18: 88:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/syntax.rs:89:5: 89:35 (#0),
                },
            ),
        ),
        ty: &'{erased} mut regex_syntax::Parser,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:89:5: 89:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/syntax.rs:89:5: 89:35 (#0),
                },
            ),
        ),
        ty: regex_syntax::Parser,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:89:5: 89:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/syntax.rs:89:5: 89:35 (#0),
                },
            ),
        ),
        ty: &'{erased} regex_syntax::ParserBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:89:5: 89:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/syntax.rs:89:5: 89:35 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/syntax.rs:89:27: 89:34 (#0),
            scope: scope[0],
        },
    },
]