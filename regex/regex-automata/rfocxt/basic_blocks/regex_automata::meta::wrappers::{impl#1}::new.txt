[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:79:29: 79:50 (#0),
                    scope: scope[0],
                },
                kind: _6 = nfa::thompson::pikevm::Config::new() -> [return: bb1, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:80:25: 80:38 (#0),
                    scope: scope[0],
                },
                kind: _9 = meta::regex::RegexInfo::config(move _10) -> [return: bb2, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = &(*_9),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:80:25: 80:55 (#0),
                    scope: scope[0],
                },
                kind: _7 = meta::regex::Config::get_match_kind(move _8) -> [return: bb3, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:79:29: 80:56 (#0),
                    scope: scope[0],
                },
                kind: _5 = nfa::thompson::pikevm::Config::match_kind(move _6, move _7) -> [return: bb4, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageLive(_11),
            _11 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:79:29: 81:28 (#0),
                    scope: scope[0],
                },
                kind: _4 = nfa::thompson::pikevm::Config::prefilter(move _5, move _11) -> [return: bb5, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageDead(_9),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:82:22: 82:44 (#0),
                    scope: scope[1],
                },
                kind: _19 = nfa::thompson::pikevm::Builder::new() -> [return: bb6, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _18 = &mut _19,
            StorageLive(_20),
            _20 = move _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:82:22: 83:38 (#0),
                    scope: scope[1],
                },
                kind: _17 = nfa::thompson::pikevm::Builder::configure(move _18, move _20) -> [return: bb7, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _16 = &(*_17),
            StorageDead(_20),
            StorageDead(_18),
            StorageLive(_21),
            StorageLive(_22),
            _22 = &(*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:84:29: 84:40 (#0),
                    scope: scope[1],
                },
                kind: _21 = <nfa::thompson::nfa::NFA as core::clone::Clone>::clone(move _22) -> [return: bb8, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:82:22: 84:41 (#0),
                    scope: scope[1],
                },
                kind: _15 = nfa::thompson::pikevm::Builder::build_from_nfa(move _16, move _21) -> [return: bb9, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:82:22: 85:38 (#0),
                    scope: scope[1],
                },
                kind: _14 = core::result::Result::<nfa::thompson::pikevm::PikeVM, nfa::thompson::error::BuildError>::map_err::<meta::error::BuildError, fn(nfa::thompson::error::BuildError) -> meta::error::BuildError {meta::error::BuildError::nfa}>(move _15, meta::error::BuildError::nfa) -> [return: bb10, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:82:22: 85:39 (#3935),
                    scope: scope[1],
                },
                kind: _13 = <core::result::Result<nfa::thompson::pikevm::PikeVM, meta::error::BuildError> as core::ops::Try>::branch(move _14) -> [return: bb11, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            PlaceMention(_13),
            _23 = discriminant(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:82:22: 85:39 (#3935),
                    scope: scope[1],
                },
                kind: switchInt(move _23) -> [0: bb14, 1: bb13, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:82:22: 85:39 (#3935),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:85:38: 85:39 (#3936),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb15, imaginary: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_27),
            _27 = move ((_13 as Continue).0: nfa::thompson::pikevm::PikeVM),
            _12 = move _27,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:85:38: 85:39 (#0),
                    scope: scope[1],
                },
                kind: drop(_27) -> [return: bb17, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_24),
            _24 = move ((_13 as Break).0: core::result::Result<core::convert::Infallible, meta::error::BuildError>),
            StorageLive(_26),
            _26 = move _24,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:82:22: 85:39 (#3935),
                    scope: scope[4],
                },
                kind: _0 = <core::result::Result<meta::wrappers::PikeVMEngine, meta::error::BuildError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, meta::error::BuildError>>>::from_residual(move _26) -> [return: bb16, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:85:38: 85:39 (#3936),
                    scope: scope[1],
                },
                kind: drop(_24) -> [return: bb24, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            FakeRead(ForLet(None), _12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:85:39: 85:40 (#0),
                    scope: scope[1],
                },
                kind: drop(_13) -> [return: bb18, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:85:39: 85:40 (#0),
                    scope: scope[1],
                },
                kind: drop(_19) -> [return: bb19, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_13),
            StorageLive(_28),
            StorageLive(_29),
            _29 = move _12,
            _28 = meta::wrappers::PikeVMEngine(move _29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:87:31: 87:32 (#0),
                    scope: scope[2],
                },
                kind: drop(_29) -> [return: bb20, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            _0 = core::result::Result::<meta::wrappers::PikeVMEngine, meta::error::BuildError>::Ok(move _28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:87:32: 87:33 (#0),
                    scope: scope[2],
                },
                kind: drop(_28) -> [return: bb21, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:88:5: 88:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_12) -> [return: bb22, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:88:5: 88:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb23, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:88:5: 88:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb28, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:85:39: 85:40 (#0),
                    scope: scope[1],
                },
                kind: drop(_13) -> [return: bb25, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:85:39: 85:40 (#0),
                    scope: scope[1],
                },
                kind: drop(_19) -> [return: bb26, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_13),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:88:5: 88:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb27, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:88:5: 88:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb28, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:88:6: 88:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:87:32: 87:33 (#0),
                    scope: scope[2],
                },
                kind: drop(_28) -> [return: bb31, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:85:39: 85:40 (#0),
                    scope: scope[1],
                },
                kind: drop(_19) -> [return: bb31, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:88:5: 88:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_12) -> [return: bb40, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:85:38: 85:39 (#3935),
                    scope: scope[4],
                },
                kind: drop(_26) -> [return: bb33, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:85:38: 85:39 (#3936),
                    scope: scope[1],
                },
                kind: drop(_24) -> [return: bb34, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:85:39: 85:40 (#0),
                    scope: scope[1],
                },
                kind: drop(_13) -> [return: bb39, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:85:38: 85:39 (#3935),
                    scope: scope[1],
                },
                kind: drop(_14) -> [return: bb39, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:85:37: 85:38 (#0),
                    scope: scope[1],
                },
                kind: drop(_15) -> [return: bb39, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:84:40: 84:41 (#0),
                    scope: scope[1],
                },
                kind: drop(_21) -> [return: bb39, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:83:37: 83:38 (#0),
                    scope: scope[1],
                },
                kind: drop(_20) -> [return: bb39, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:85:39: 85:40 (#0),
                    scope: scope[1],
                },
                kind: drop(_19) -> [return: bb40, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:88:5: 88:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb44, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:81:27: 81:28 (#0),
                    scope: scope[0],
                },
                kind: drop(_11) -> [return: bb42, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:81:27: 81:28 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb44, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:80:55: 80:56 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb44, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:88:5: 88:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb45, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/wrappers.rs:74:5: 88:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<meta::wrappers::PikeVMEngine, meta::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:78:10: 78:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/meta/wrappers.rs:75:15: 75:25 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/wrappers.rs:75:9: 75:13 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/wrappers.rs:75:9: 75:13 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:75:9: 75:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/meta/wrappers.rs:76:14: 76:31 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/wrappers.rs:76:9: 76:12 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/wrappers.rs:76:9: 76:12 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<util::prefilter::Prefilter>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:76:9: 76:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/meta/wrappers.rs:77:14: 77:18 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/wrappers.rs:77:9: 77:12 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/wrappers.rs:77:9: 77:12 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:77:9: 77:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/wrappers.rs:79:29: 81:28 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/wrappers.rs:79:13: 79:26 (#0),
                    },
                ),
            ),
        ),
        ty: nfa::thompson::pikevm::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:79:13: 79:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::thompson::pikevm::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:79:29: 80:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::thompson::pikevm::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:79:29: 79:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::search::MatchKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:80:25: 80:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:80:25: 80:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:80:25: 80:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::regex::RegexInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:80:25: 80:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::prefilter::Prefilter>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:81:24: 81:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/wrappers.rs:82:22: 85:39 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/wrappers.rs:82:13: 82:19 (#0),
                    },
                ),
            ),
        ),
        ty: nfa::thompson::pikevm::PikeVM,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:82:13: 82:19 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, meta::error::BuildError>, nfa::thompson::pikevm::PikeVM>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:82:22: 85:39 (#3935),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<nfa::thompson::pikevm::PikeVM, meta::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:82:22: 85:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<nfa::thompson::pikevm::PikeVM, nfa::thompson::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:82:22: 84:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::pikevm::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:82:22: 83:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut nfa::thompson::pikevm::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:82:22: 83:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut nfa::thompson::pikevm::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:82:22: 82:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::thompson::pikevm::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:82:22: 82:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::thompson::pikevm::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:83:24: 83:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:84:29: 84:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:84:29: 84:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:85:38: 85:39 (#3936),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _13,
                                ),
                                regex-automata/src/meta/wrappers.rs:82:22: 85:39 (#3935),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/wrappers.rs:85:38: 85:39 (#3936),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, meta::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:85:38: 85:39 (#3936),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:85:38: 85:39 (#3936),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, meta::error::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:85:38: 85:39 (#3936),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _13,
                                ),
                                regex-automata/src/meta/wrappers.rs:82:22: 85:39 (#3935),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/wrappers.rs:82:22: 85:39 (#3935),
                    },
                ),
            ),
        ),
        ty: nfa::thompson::pikevm::PikeVM,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:82:22: 85:39 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: meta::wrappers::PikeVMEngine,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:87:12: 87:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: nfa::thompson::pikevm::PikeVM,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/wrappers.rs:87:25: 87:31 (#0),
            scope: scope[0],
        },
    },
]