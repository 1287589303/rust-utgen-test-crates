[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = move _1,
            _0 = util::iter::CapturesIter::<'_, F>(move _2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:947:26: 947:27 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:948:5: 948:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:948:6: 948:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:948:5: 948:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:946:5: 948:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::iter::CapturesIter<'{erased}, F/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/iter.rs:946:32: 946:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: util::iter::TryCapturesIter<'{erased}, F/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/iter.rs:946:23: 946:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::iter::TryCapturesIter<'{erased}, F/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/iter.rs:947:22: 947:26 (#0),
            scope: scope[0],
        },
    },
]