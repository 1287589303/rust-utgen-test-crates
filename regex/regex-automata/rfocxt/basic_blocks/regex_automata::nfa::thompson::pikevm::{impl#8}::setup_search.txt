[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut ((*_1).0: std::vec::Vec<nfa::thompson::pikevm::FollowEpsilon>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1972:9: 1972:27 (#0),
                    scope: scope[0],
                },
                kind: _3 = std::vec::Vec::<nfa::thompson::pikevm::FollowEpsilon>::clear(move _4) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut ((*_1).1: nfa::thompson::pikevm::ActiveStates),
            StorageLive(_7),
            _7 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1973:9: 1973:50 (#0),
                    scope: scope[0],
                },
                kind: _5 = nfa::thompson::pikevm::ActiveStates::setup_search(move _6, move _7) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &mut ((*_1).2: nfa::thompson::pikevm::ActiveStates),
            StorageLive(_10),
            _10 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1974:9: 1974:50 (#0),
                    scope: scope[0],
                },
                kind: _8 = nfa::thompson::pikevm::ActiveStates::setup_search(move _9, move _10) -> [return: bb3, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_8),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1975:6: 1975:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1971:5: 1975:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1971:57: 1971:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut nfa::thompson::pikevm::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1971:21: 1971:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/nfa/thompson/pikevm.rs:1971:51: 1971:56 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/pikevm.rs:1971:32: 1971:49 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/pikevm.rs:1971:32: 1971:49 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1971:32: 1971:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1972:9: 1972:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<nfa::thompson::pikevm::FollowEpsilon, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1972:9: 1972:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1973:9: 1973:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut nfa::thompson::pikevm::ActiveStates,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1973:9: 1973:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1973:32: 1973:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1974:9: 1974:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut nfa::thompson::pikevm::ActiveStates,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1974:9: 1974:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1974:32: 1974:49 (#0),
            scope: scope[0],
        },
    },
]