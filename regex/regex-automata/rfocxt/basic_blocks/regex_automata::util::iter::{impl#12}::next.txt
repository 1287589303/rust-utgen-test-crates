[
    BasicBlockData {
        statements: [
            PlaceMention((*_1)),
            StorageLive(_2),
            _2 = &mut ((*_1).0: util::iter::Searcher<'_>),
            StorageLive(_3),
            _3 = &mut ((*_1).1: util::captures::Captures),
            StorageLive(_4),
            _4 = &mut ((*_1).2: F),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &mut (*_2),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &mut (*_4),
            StorageLive(_12),
            _12 = &mut (*_3),
            _10 = {closure@regex-automata/src/util/iter.rs:963:26: 963:33} { finder: move _11, caps: move _12 },
            StorageDead(_12),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:962:22: 966:15 (#0),
                    scope: scope[1],
                },
                kind: _8 = util::iter::Searcher::<'_>::try_advance::<{closure@regex-automata/src/util/iter.rs:963:26: 963:33}>(move _9, move _10) -> [return: bb1, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:962:22: 967:25 (#0),
                    scope: scope[1],
                },
                kind: _7 = core::result::Result::<core::option::Option<util::search::Match>, util::search::MatchError>::transpose(move _8) -> [return: bb2, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:962:22: 967:26 (#4797),
                    scope: scope[1],
                },
                kind: _6 = <core::option::Option<core::result::Result<util::search::Match, util::search::MatchError>> as core::ops::Try>::branch(move _7) -> [return: bb3, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            PlaceMention(_6),
            _13 = discriminant(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:962:22: 967:26 (#4797),
                    scope: scope[1],
                },
                kind: switchInt(move _13) -> [0: bb6, 1: bb5, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:962:22: 967:26 (#4797),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:967:25: 967:26 (#4798),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb7, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_17),
            _17 = move ((_6 as Continue).0: core::result::Result<util::search::Match, util::search::MatchError>),
            _5 = move _17,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:967:25: 967:26 (#0),
                    scope: scope[1],
                },
                kind: drop(_17) -> [return: bb9, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            _14 = ((_6 as Break).0: core::option::Option<core::convert::Infallible>),
            StorageLive(_16),
            _16 = _14,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:962:22: 967:26 (#4797),
                    scope: scope[4],
                },
                kind: _0 = <core::option::Option<core::result::Result<util::captures::Captures, util::search::MatchError>> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _16) -> [return: bb8, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:967:26: 967:27 (#0),
                    scope: scope[1],
                },
                kind: drop(_6) -> [return: bb23, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            FakeRead(ForLet(None), _5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:967:26: 967:27 (#0),
                    scope: scope[1],
                },
                kind: drop(_6) -> [return: bb10, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            PlaceMention(_5),
            _18 = discriminant(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:968:9: 968:21 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _18) -> [0: bb12, 1: bb13, otherwise: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:968:15: 968:21 (#0),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:969:13: 969:18 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb14, imaginary: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            _22 = move ((_5 as Err).0: util::search::MatchError),
            StorageLive(_23),
            StorageLive(_24),
            _24 = move _22,
            _23 = core::result::Result::<util::captures::Captures, util::search::MatchError>::Err(move _24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:970:37: 970:38 (#0),
                    scope: scope[7],
                },
                kind: drop(_24) -> [return: bb18, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &(*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:969:30: 969:42 (#0),
                    scope: scope[2],
                },
                kind: _20 = <util::captures::Captures as core::clone::Clone>::clone(move _21) -> [return: bb15, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            _19 = core::result::Result::<util::captures::Captures, util::search::MatchError>::Ok(move _20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:969:42: 969:43 (#0),
                    scope: scope[2],
                },
                kind: drop(_20) -> [return: bb16, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            _0 = core::option::Option::<core::result::Result<util::captures::Captures, util::search::MatchError>>::Some(move _19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:969:43: 969:44 (#0),
                    scope: scope[2],
                },
                kind: drop(_19) -> [return: bb17, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:969:43: 969:44 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            _0 = core::option::Option::<core::result::Result<util::captures::Captures, util::search::MatchError>>::Some(move _23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:970:38: 970:39 (#0),
                    scope: scope[7],
                },
                kind: drop(_23) -> [return: bb19, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:970:38: 970:39 (#0),
                    scope: scope[2],
                },
                kind: drop(_22) -> [return: bb20, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:970:38: 970:39 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:972:5: 972:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_5) -> [return: bb22, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:972:6: 972:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb24,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:972:6: 972:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb24,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:972:6: 972:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:970:38: 970:39 (#0),
                    scope: scope[7],
                },
                kind: drop(_23) -> [return: bb26, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:970:38: 970:39 (#0),
                    scope: scope[2],
                },
                kind: drop(_22) -> [return: bb28, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:969:43: 969:44 (#0),
                    scope: scope[2],
                },
                kind: drop(_19) -> [return: bb28, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:972:5: 972:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_5) -> [return: bb32, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:967:26: 967:27 (#0),
                    scope: scope[1],
                },
                kind: drop(_6) -> [return: bb32, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:967:25: 967:26 (#4797),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb32, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:967:24: 967:25 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb32, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/iter.rs:959:5: 972:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::result::Result<util::captures::Captures, util::search::MatchError>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/iter.rs:959:27: 959:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut util::iter::TryCapturesIter<'{erased}, F/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/iter.rs:959:13: 959:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-automata/src/util/iter.rs:961:13: 961:18 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/iter.rs:960:13: 960:73 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut util::iter::Searcher<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/iter.rs:960:31: 960:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-automata/src/util/iter.rs:961:13: 961:18 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/iter.rs:960:13: 960:73 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut util::captures::Captures,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/iter.rs:960:43: 960:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-automata/src/util/iter.rs:961:13: 961:18 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/iter.rs:960:13: 960:73 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut F/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/iter.rs:960:57: 960:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/iter.rs:962:22: 967:26 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/iter.rs:962:13: 962:19 (#0),
                    },
                ),
            ),
        ),
        ty: core::result::Result<util::search::Match, util::search::MatchError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/iter.rs:962:13: 962:19 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, core::result::Result<util::search::Match, util::search::MatchError>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/iter.rs:962:22: 967:26 (#4797),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::result::Result<util::search::Match, util::search::MatchError>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/iter.rs:962:22: 967:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::option::Option<util::search::Match>, util::search::MatchError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/iter.rs:962:22: 966:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::iter::Searcher<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/iter.rs:962:22: 962:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:3413 ~ regex_automata[00dd]::util::iter::{impl#12}::next::{closure#0}),
            [
                '{erased},
                F/#1,
                i16,
                Binder { value: extern "RustCall" fn((&'^0 util::search::Input<'^1>,)) -> core::result::Result<core::option::Option<util::search::Match>, util::search::MatchError>, bound_vars: [Region(BrAnon), Region(BrAnon)] },
                (&'{erased} mut F/#1, &'{erased} mut util::captures::Captures),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/iter.rs:963:26: 966:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut F/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/iter.rs:963:26: 966:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::captures::Captures,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/iter.rs:963:26: 966:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/iter.rs:967:25: 967:26 (#4798),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                regex-automata/src/util/iter.rs:962:22: 967:26 (#4797),
                            ),
                        ),
                        pat_span: regex-automata/src/util/iter.rs:967:25: 967:26 (#4798),
                    },
                ),
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/iter.rs:967:25: 967:26 (#4798),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/iter.rs:967:25: 967:26 (#4798),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/iter.rs:967:25: 967:26 (#4798),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                regex-automata/src/util/iter.rs:962:22: 967:26 (#4797),
                            ),
                        ),
                        pat_span: regex-automata/src/util/iter.rs:962:22: 967:26 (#4797),
                    },
                ),
            ),
        ),
        ty: core::result::Result<util::search::Match, util::search::MatchError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/iter.rs:962:22: 967:26 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/iter.rs:969:13: 969:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::result::Result<util::captures::Captures, util::search::MatchError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/iter.rs:969:27: 969:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::captures::Captures,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/iter.rs:969:30: 969:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/iter.rs:968:9: 971:10 (#0),
                },
            ),
        ),
        ty: &'{erased} util::captures::Captures,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/iter.rs:969:30: 969:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                regex-automata/src/util/iter.rs:968:15: 968:21 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/iter.rs:970:13: 970:21 (#0),
                    },
                ),
            ),
        ),
        ty: util::search::MatchError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/iter.rs:970:17: 970:20 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::result::Result<util::captures::Captures, util::search::MatchError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/iter.rs:970:30: 970:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::search::MatchError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/iter.rs:970:34: 970:37 (#0),
            scope: scope[0],
        },
    },
]