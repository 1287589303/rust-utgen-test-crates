[
    BasicBlockData {
        statements: [
            PlaceMention((_2.0: util::alphabet::UnitKind)),
            _3 = discriminant((_2.0: util::alphabet::UnitKind)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:302:9: 302:21 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), (_2.0: util::alphabet::UnitKind)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:302:15: 302:21 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:303:13: 303:28 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            _8 = (((_2.0: util::alphabet::UnitKind) as EOI).0: u16),
            StorageLive(_9),
            _9 = _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:304:33: 304:47 (#0),
                    scope: scope[2],
                },
                kind: _0 = <usize as core::convert::From<u16>>::from(move _9) -> [return: bb7, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = (((_2.0: util::alphabet::UnitKind) as U8).0: u8),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_1),
            StorageLive(_7),
            _7 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:303:44: 303:55 (#0),
                    scope: scope[1],
                },
                kind: _5 = util::alphabet::ByteClasses::get(move _6, move _7) -> [return: bb5, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:303:32: 303:56 (#0),
                    scope: scope[1],
                },
                kind: _0 = <usize as core::convert::From<u8>>::from(move _5) -> [return: bb6, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:303:55: 303:56 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:304:46: 304:47 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:306:6: 306:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:301:5: 306:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:301:46: 301:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} util::alphabet::ByteClasses,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:301:24: 301:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/alphabet.rs:301:37: 301:41 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/alphabet.rs:301:31: 301:35 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/alphabet.rs:301:31: 301:35 (#0),
                    },
                ),
            ),
        ),
        ty: util::alphabet::Unit,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:301:31: 301:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:303:13: 303:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (_2.0: util::alphabet::UnitKind),
                                ),
                                regex-automata/src/util/alphabet.rs:302:15: 302:21 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/alphabet.rs:303:13: 303:28 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:303:26: 303:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/alphabet.rs:302:9: 305:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:303:44: 303:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/alphabet.rs:302:9: 305:10 (#0),
                },
            ),
        ),
        ty: &'{erased} util::alphabet::ByteClasses,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:303:44: 303:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/alphabet.rs:302:9: 305:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:303:53: 303:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (_2.0: util::alphabet::UnitKind),
                                ),
                                regex-automata/src/util/alphabet.rs:302:15: 302:21 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/alphabet.rs:304:13: 304:29 (#0),
                    },
                ),
            ),
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:304:27: 304:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/alphabet.rs:302:9: 305:10 (#0),
                },
            ),
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:304:45: 304:46 (#0),
            scope: scope[0],
        },
    },
]