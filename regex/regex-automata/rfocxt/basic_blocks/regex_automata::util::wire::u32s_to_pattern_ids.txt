[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/wire.rs:309:13: 309:27 (#0),
                    scope: scope[0],
                },
                kind: _4 = core::slice::<impl [u32]>::as_ptr(move _5) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/wire.rs:309:13: 309:47 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::ptr::const_ptr::<impl *const u32>::cast::<util::primitives::PatternID>(move _4) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/wire.rs:310:13: 310:24 (#0),
                    scope: scope[0],
                },
                kind: _6 = core::slice::<impl [u32]>::len(move _7) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/wire.rs:308:9: 311:10 (#0),
                    scope: scope[0],
                },
                kind: _2 = core::slice::from_raw_parts::<'_, util::primitives::PatternID>(move _3, move _6) -> [return: bb4, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = &(*_2),
            StorageDead(_6),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/wire.rs:313:2: 313:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/wire.rs:301:1: 313:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [util::primitives::PatternID],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:301:53: 301:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/wire.rs:301:42: 301:48 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/wire.rs:301:35: 301:40 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/wire.rs:301:35: 301:40 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u32],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:301:35: 301:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/wire.rs:308:9: 311:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [util::primitives::PatternID],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:308:9: 311:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/wire.rs:308:9: 311:10 (#0),
                },
            ),
        ),
        ty: *const util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:309:13: 309:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/wire.rs:308:9: 311:10 (#0),
                },
            ),
        ),
        ty: *const u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:309:13: 309:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/wire.rs:308:9: 311:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [u32],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:309:13: 309:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/wire.rs:308:9: 311:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:310:13: 310:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/wire.rs:308:9: 311:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [u32],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/wire.rs:310:13: 310:18 (#0),
            scope: scope[0],
        },
    },
]