[
    BasicBlockData {
        statements: [
            PlaceMention(((*_1).0: meta::error::BuildErrorKind)),
            _2 = discriminant(((*_1).0: meta::error::BuildErrorKind)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/error.rs:75:9: 75:24 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _2) -> [0: bb2, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::option::Option::<&regex_syntax::Error>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/error.rs:77:18: 77:22 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb4,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/error.rs:76:13: 76:51 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb3, imaginary: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = &((((*_1).0: meta::error::BuildErrorKind) as Syntax).1: regex_syntax::Error),
            StorageLive(_4),
            _4 = &(*_3),
            _0 = core::option::Option::<&regex_syntax::Error>::Some(move _4),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/error.rs:76:63: 76:64 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb4,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/error.rs:79:6: 79:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} regex_syntax::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/error.rs:74:35: 74:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} meta::error::BuildError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/error.rs:74:25: 74:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/error.rs:76:13: 76:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    ((*_1).0: meta::error::BuildErrorKind),
                                ),
                                regex-automata/src/meta/error.rs:75:15: 75:24 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/error.rs:76:13: 76:51 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} regex_syntax::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/error.rs:76:38: 76:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} regex_syntax::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/error.rs:76:60: 76:63 (#0),
            scope: scope[0],
        },
    },
]