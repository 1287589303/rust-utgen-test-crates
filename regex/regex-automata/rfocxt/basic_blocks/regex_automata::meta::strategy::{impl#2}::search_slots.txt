[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &(*_1),
            StorageLive(_9),
            _9 = &mut (*_2),
            StorageLive(_10),
            _10 = &(*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:419:17: 419:42 (#0),
                    scope: scope[0],
                },
                kind: _7 = <meta::strategy::Pre<P> as meta::strategy::Strategy>::search(move _8, move _9, move _10) -> [return: bb1, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:419:17: 419:43 (#3869),
                    scope: scope[0],
                },
                kind: _6 = <core::option::Option<util::search::Match> as core::ops::Try>::branch(move _7) -> [return: bb2, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            PlaceMention(_6),
            _11 = discriminant(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:419:17: 419:43 (#3869),
                    scope: scope[0],
                },
                kind: switchInt(move _11) -> [0: bb5, 1: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:419:17: 419:43 (#3869),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:419:42: 419:43 (#3870),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_15),
            _15 = ((_6 as Continue).0: util::search::Match),
            _5 = _15,
            StorageDead(_15),
            FakeRead(ForLet(None), _5),
            StorageDead(_6),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &mut (*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:420:29: 420:45 (#0),
                    scope: scope[6],
                },
                kind: _17 = core::slice::<impl [core::option::Option<util::primitives::NonMaxUsize>]>::get_mut::<usize>(move _18, const 0_usize) -> [return: bb8, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            _12 = ((_6 as Break).0: core::option::Option<core::convert::Infallible>),
            StorageLive(_14),
            _14 = _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:419:17: 419:43 (#3869),
                    scope: scope[3],
                },
                kind: _0 = <core::option::Option<util::primitives::PatternID> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _14) -> [return: bb7, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_12),
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:427:6: 427:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            PlaceMention(_17),
            _19 = discriminant(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:420:16: 420:26 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _19) -> [1: bb9, otherwise: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:420:16: 420:26 (#0),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_20),
            _20 = move ((_17 as Some).0: &mut core::option::Option<util::primitives::NonMaxUsize>),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            _23 = &_5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:421:38: 421:47 (#0),
                    scope: scope[6],
                },
                kind: _22 = util::search::Match::start(move _23) -> [return: bb11, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:421:21: 421:48 (#0),
                    scope: scope[6],
                },
                kind: _21 = util::primitives::NonMaxUsize::new(move _22) -> [return: bb12, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            (*_20) = move _21,
            StorageDead(_21),
            _16 = const (),
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:420:9: 422:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _16 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:420:9: 422:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            _26 = &mut (*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:423:29: 423:45 (#0),
                    scope: scope[7],
                },
                kind: _25 = core::slice::<impl [core::option::Option<util::primitives::NonMaxUsize>]>::get_mut::<usize>(move _26, const 1_usize) -> [return: bb15, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            PlaceMention(_25),
            _27 = discriminant(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:423:16: 423:26 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _27) -> [1: bb16, otherwise: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:423:16: 423:26 (#0),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb17, imaginary: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_28),
            _28 = move ((_25 as Some).0: &mut core::option::Option<util::primitives::NonMaxUsize>),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            _31 = &_5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:424:38: 424:45 (#0),
                    scope: scope[7],
                },
                kind: _30 = util::search::Match::end(move _31) -> [return: bb18, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:424:21: 424:46 (#0),
                    scope: scope[7],
                },
                kind: _29 = util::primitives::NonMaxUsize::new(move _30) -> [return: bb19, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            (*_28) = move _29,
            StorageDead(_29),
            _24 = const (),
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:423:9: 425:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _24 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:423:9: 425:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_24),
            StorageLive(_32),
            StorageLive(_33),
            _33 = &_5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:426:14: 426:25 (#0),
                    scope: scope[1],
                },
                kind: _32 = util::search::Match::pattern(move _33) -> [return: bb22, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            _0 = core::option::Option::<util::primitives::PatternID>::Some(move _32),
            StorageDead(_32),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:427:6: 427:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:427:6: 427:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/meta/strategy.rs:413:5: 427:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::primitives::PatternID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:418:10: 418:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} meta::strategy::Pre<P/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:414:9: 414:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/meta/strategy.rs:415:16: 415:26 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:415:9: 415:14 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:415:9: 415:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut meta::regex::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:415:9: 415:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/meta/strategy.rs:416:16: 416:26 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:416:9: 416:14 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:416:9: 416:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:416:9: 416:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/meta/strategy.rs:417:16: 417:42 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:417:9: 417:14 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:417:9: 417:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [core::option::Option<util::primitives::NonMaxUsize>],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:417:9: 417:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/meta/strategy.rs:419:17: 419:43 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:419:13: 419:14 (#0),
                    },
                ),
            ),
        ),
        ty: util::search::Match,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:419:13: 419:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, util::search::Match>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:419:17: 419:43 (#3869),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::search::Match>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:419:17: 419:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} meta::strategy::Pre<P/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:419:17: 419:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut meta::regex::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:419:29: 419:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:419:36: 419:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:419:42: 419:43 (#3870),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                regex-automata/src/meta/strategy.rs:419:17: 419:43 (#3869),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:419:42: 419:43 (#3870),
                    },
                ),
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:419:42: 419:43 (#3870),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:419:42: 419:43 (#3870),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:419:42: 419:43 (#3870),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                regex-automata/src/meta/strategy.rs:419:17: 419:43 (#3869),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:419:17: 419:43 (#3869),
                    },
                ),
            ),
        ),
        ty: util::search::Match,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:419:17: 419:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:420:9: 422:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} mut core::option::Option<util::primitives::NonMaxUsize>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:420:29: 420:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [core::option::Option<util::primitives::NonMaxUsize>],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:420:29: 420:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:420:16: 420:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _17,
                                ),
                                regex-automata/src/meta/strategy.rs:420:29: 420:45 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:420:16: 420:26 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut core::option::Option<util::primitives::NonMaxUsize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:420:21: 420:25 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::primitives::NonMaxUsize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:421:21: 421:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:421:38: 421:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::Match,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:421:38: 421:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:423:9: 425:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} mut core::option::Option<util::primitives::NonMaxUsize>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:423:29: 423:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [core::option::Option<util::primitives::NonMaxUsize>],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:423:29: 423:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:423:16: 423:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _25,
                                ),
                                regex-automata/src/meta/strategy.rs:423:29: 423:45 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/meta/strategy.rs:423:16: 423:26 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut core::option::Option<util::primitives::NonMaxUsize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:423:21: 423:25 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::primitives::NonMaxUsize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:424:21: 424:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:424:38: 424:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::Match,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:424:38: 424:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::primitives::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:426:14: 426:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/meta/strategy.rs:426:9: 426:26 (#0),
                },
            ),
        ),
        ty: &'{erased} util::search::Match,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/meta/strategy.rs:426:14: 426:15 (#0),
            scope: scope[0],
        },
    },
]