[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = &((*_1).0: util::primitives::SmallIndexError),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/primitives.rs:645:17: 645:35 (#1811),
                    scope: scope[0],
                },
                kind: _0 = util::primitives::SmallIndexError::attempted(move _2) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/primitives.rs:646:14: 646:14 (#1811),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/primitives.rs:644:13: 646:14 (#1811),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/primitives.rs:644:40: 644:43 (#1811),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} util::primitives::PatternIDError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/primitives.rs:644:30: 644:35 (#1811),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/primitives.rs:645:17: 645:35 (#1811),
                },
            ),
        ),
        ty: &'{erased} util::primitives::SmallIndexError,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/primitives.rs:645:17: 645:23 (#1811),
            scope: scope[0],
        },
    },
]