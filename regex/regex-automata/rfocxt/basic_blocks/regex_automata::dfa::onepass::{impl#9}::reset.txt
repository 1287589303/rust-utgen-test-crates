[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2560:33: 2560:45 (#0),
                    scope: scope[0],
                },
                kind: _7 = dfa::onepass::DFA::get_nfa(move _8) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = &(*_7),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2560:33: 2560:58 (#0),
                    scope: scope[0],
                },
                kind: _5 = nfa::thompson::nfa::NFA::group_info(move _6) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = &(*_5),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2560:33: 2560:78 (#0),
                    scope: scope[0],
                },
                kind: _3 = util::captures::GroupInfo::explicit_slot_len(move _4) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageDead(_7),
            StorageDead(_5),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &mut ((*_1).0: std::vec::Vec<core::option::Option<util::primitives::NonMaxUsize>>),
            StorageLive(_11),
            _11 = _3,
            StorageLive(_12),
            _12 = core::option::Option::<util::primitives::NonMaxUsize>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2561:9: 2561:60 (#0),
                    scope: scope[1],
                },
                kind: _9 = std::vec::Vec::<core::option::Option<util::primitives::NonMaxUsize>>::resize(move _10, move _11, move _12) -> [return: bb4, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_9),
            StorageLive(_13),
            _13 = _3,
            ((*_1).1: usize) = move _13,
            StorageDead(_13),
            _0 = const (),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2563:6: 2563:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/onepass.rs:2559:5: 2563:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2559:38: 2559:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut dfa::onepass::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2559:18: 2559:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/dfa/onepass.rs:2559:33: 2559:37 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/onepass.rs:2559:29: 2559:31 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/onepass.rs:2559:29: 2559:31 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} dfa::onepass::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2559:29: 2559:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/onepass.rs:2560:33: 2560:78 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/onepass.rs:2560:13: 2560:30 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2560:13: 2560:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::captures::GroupInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2560:33: 2560:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::captures::GroupInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2560:33: 2560:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2560:33: 2560:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2560:33: 2560:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::onepass::DFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2560:33: 2560:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2561:9: 2561:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<core::option::Option<util::primitives::NonMaxUsize>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2561:9: 2561:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2561:36: 2561:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::primitives::NonMaxUsize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2561:55: 2561:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/onepass.rs:2562:34: 2562:51 (#0),
            scope: scope[0],
        },
    },
]