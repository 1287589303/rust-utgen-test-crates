[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &(*(_1.0: &mut dfa::dense::DFA<std::vec::Vec<u32>>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:88:23: 88:41 (#0),
                    scope: scope[0],
                },
                kind: _2 = dfa::dense::DFA::<std::vec::Vec<u32>>::stride2(move _3) -> [return: bb1, unwind: bb284],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &_2,
            _4 = {closure@regex-automata/src/dfa/minimize.rs:89:27: 89:52} { stride2: move _5 },
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &_2,
            _6 = {closure@regex-automata/src/dfa/minimize.rs:92:24: 92:46} { stride2: move _7 },
            StorageDead(_7),
            FakeRead(ForLet(None), _6),
            StorageLive(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:94:28: 94:45 (#0),
                    scope: scope[3],
                },
                kind: _8 = dfa::minimize::StateSet::empty() -> [return: bb2, unwind: bb284],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _8),
            StorageLive(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:95:28: 95:45 (#0),
                    scope: scope[4],
                },
                kind: _9 = dfa::minimize::StateSet::empty() -> [return: bb3, unwind: bb283],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _9),
            StorageLive(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:96:28: 96:45 (#0),
                    scope: scope[5],
                },
                kind: _10 = dfa::minimize::StateSet::empty() -> [return: bb4, unwind: bb282],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _10),
            StorageLive(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9: 44:32 (#454),
                    scope: scope[6],
                },
                kind: _11 = std::vec::Vec::<dfa::minimize::StateSet>::new() -> [return: bb5, unwind: bb281],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _11),
            StorageLive(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:101:9: 151:10 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:101:9: 151:10 (#0),
                    scope: scope[7],
                },
                kind: falseUnwind -> [real: bb7, unwind: bb280],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            StorageLive(_15),
            _15 = &mut (_1.3: std::vec::Vec<dfa::minimize::StateSet>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:101:31: 101:49 (#0),
                    scope: scope[8],
                },
                kind: _14 = std::vec::Vec::<dfa::minimize::StateSet>::pop(move _15) -> [return: bb8, unwind: bb280],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            PlaceMention(_14),
            _16 = discriminant(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:101:19: 101:28 (#0),
                    scope: scope[8],
                },
                kind: switchInt(move _16) -> [1: bb9, otherwise: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:101:19: 101:28 (#0),
                    scope: scope[8],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_17),
            _17 = move ((_14 as Some).0: dfa::minimize::StateSet),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            _22 = &(*(_1.0: &mut dfa::dense::DFA<std::vec::Vec<u32>>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:102:22: 102:45 (#0),
                    scope: scope[8],
                },
                kind: _21 = dfa::dense::DFA::<std::vec::Vec<u32>>::byte_classes(move _22) -> [return: bb11, unwind: bb278],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _20 = &(*_21),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:102:22: 102:52 (#0),
                    scope: scope[8],
                },
                kind: _19 = util::alphabet::ByteClasses::iter(move _20) -> [return: bb12, unwind: bb278],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:102:22: 102:52 (#3156),
                    scope: scope[8],
                },
                kind: _18 = <util::alphabet::ByteClassIter<'_> as core::iter::IntoIterator>::into_iter(move _19) -> [return: bb13, unwind: bb278],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            PlaceMention(_18),
            StorageLive(_23),
            _23 = move _18,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:102:13: 150:14 (#3155),
                    scope: scope[9],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:102:13: 150:14 (#3155),
                    scope: scope[9],
                },
                kind: falseUnwind -> [real: bb15, unwind: bb278],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            _27 = &mut _23,
            _26 = &mut (*_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:102:22: 102:52 (#3156),
                    scope: scope[9],
                },
                kind: _25 = <util::alphabet::ByteClassIter<'_> as core::iter::Iterator>::next(move _26) -> [return: bb16, unwind: bb278],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            PlaceMention(_25),
            _28 = discriminant(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:102:22: 102:52 (#3156),
                    scope: scope[9],
                },
                kind: switchInt(move _28) -> [0: bb18, 1: bb19, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:102:22: 102:52 (#3156),
                    scope: scope[9],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:102:13: 150:14 (#3155),
                    scope: scope[9],
                },
                kind: falseEdge -> [real: bb20, imaginary: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_30),
            _30 = ((_25 as Some).0: util::alphabet::Unit),
            StorageLive(_31),
            StorageLive(_32),
            _32 = &_1,
            StorageLive(_33),
            _33 = _30,
            StorageLive(_34),
            StorageLive(_35),
            _35 = &_17,
            _34 = &(*_35),
            StorageLive(_36),
            StorageLive(_37),
            _37 = &mut _8,
            _36 = &mut (*_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:103:17: 103:62 (#0),
                    scope: scope[10],
                },
                kind: _31 = dfa::minimize::Minimizer::<'_>::find_incoming_to(move _32, move _33, move _34, move _36) -> [return: bb21, unwind: bb278],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _13 = const (),
            StorageDead(_27),
            StorageDead(_25),
            StorageDead(_24),
            StorageDead(_23),
            StorageDead(_21),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:151:9: 151:10 (#0),
                    scope: scope[7],
                },
                kind: drop(_17) -> [return: bb87, unwind: bb279],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_34),
            StorageDead(_33),
            StorageDead(_32),
            StorageDead(_37),
            StorageDead(_35),
            StorageDead(_31),
            StorageLive(_38),
            StorageLive(_39),
            StorageLive(_40),
            _40 = &_8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:113:20: 113:39 (#0),
                    scope: scope[10],
                },
                kind: _39 = dfa::minimize::StateSet::is_empty(move _40) -> [return: bb22, unwind: bb278],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:113:20: 113:39 (#0),
                    scope: scope[10],
                },
                kind: switchInt(move _39) -> [0: bb24, otherwise: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageDead(_39),
            StorageDead(_38),
            StorageDead(_30),
            StorageDead(_27),
            StorageDead(_25),
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[9],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            _38 = const (),
            StorageDead(_39),
            StorageDead(_38),
            StorageLive(_42),
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            StorageLive(_46),
            _46 = &(_1.2: std::vec::Vec<dfa::minimize::StateSet>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:117:29: 117:50 (#0),
                    scope: scope[10],
                },
                kind: _45 = std::vec::Vec::<dfa::minimize::StateSet>::len(move _46) -> [return: bb25, unwind: bb278],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
            _44 = core::ops::Range::<usize> { start: const 0_usize, end: move _45 },
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:117:26: 117:50 (#3160),
                    scope: scope[10],
                },
                kind: _43 = <core::ops::Range<usize> as core::iter::IntoIterator>::into_iter(move _44) -> [return: bb26, unwind: bb278],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            PlaceMention(_43),
            StorageLive(_47),
            _47 = move _43,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:117:17: 147:18 (#3159),
                    scope: scope[11],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:117:17: 147:18 (#3159),
                    scope: scope[11],
                },
                kind: falseUnwind -> [real: bb28, unwind: bb278],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_48),
            StorageLive(_49),
            StorageLive(_50),
            StorageLive(_51),
            _51 = &mut _47,
            _50 = &mut (*_51),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:117:26: 117:50 (#3160),
                    scope: scope[11],
                },
                kind: _49 = <core::ops::Range<usize> as core::iter::Iterator>::next(move _50) -> [return: bb29, unwind: bb278],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            PlaceMention(_49),
            _52 = discriminant(_49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:117:26: 117:50 (#3160),
                    scope: scope[11],
                },
                kind: switchInt(move _52) -> [0: bb31, 1: bb32, otherwise: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:117:26: 117:50 (#3160),
                    scope: scope[11],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:117:17: 147:18 (#3159),
                    scope: scope[11],
                },
                kind: falseEdge -> [real: bb33, imaginary: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_54),
            _54 = ((_49 as Some).0: usize),
            StorageLive(_55),
            StorageLive(_56),
            StorageLive(_57),
            StorageLive(_58),
            _58 = &(_1.2: std::vec::Vec<dfa::minimize::StateSet>),
            StorageLive(_59),
            _59 = _54,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:118:36: 118:39 (#0),
                    scope: scope[12],
                },
                kind: _57 = <std::vec::Vec<dfa::minimize::StateSet> as core::ops::Index<usize>>::index(move _58, move _59) -> [return: bb34, unwind: bb278],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _42 = const (),
            StorageDead(_51),
            StorageDead(_49),
            StorageDead(_48),
            StorageDead(_47),
            StorageDead(_43),
            StorageDead(_42),
            StorageLive(_137),
            StorageLive(_138),
            StorageLive(_139),
            _139 = &mut (_1.2: std::vec::Vec<dfa::minimize::StateSet>),
            _138 = &mut (*_139),
            StorageLive(_140),
            _140 = move _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:148:28: 148:72 (#0),
                    scope: scope[10],
                },
                kind: _137 = core::mem::replace::<std::vec::Vec<dfa::minimize::StateSet>>(move _138, move _140) -> [return: bb81, unwind: bb264],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _56 = &(*_57),
            StorageDead(_59),
            StorageDead(_58),
            StorageLive(_60),
            StorageLive(_61),
            _61 = &_8,
            _60 = &(*_61),
            StorageLive(_62),
            StorageLive(_63),
            _63 = &mut _9,
            _62 = &mut (*_63),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:118:21: 118:78 (#0),
                    scope: scope[12],
                },
                kind: _55 = dfa::minimize::StateSet::intersection(move _56, move _60, move _62) -> [return: bb35, unwind: bb278],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_62),
            StorageDead(_60),
            StorageDead(_56),
            StorageDead(_63),
            StorageDead(_61),
            StorageDead(_57),
            StorageDead(_55),
            StorageLive(_64),
            StorageLive(_65),
            StorageLive(_66),
            _66 = &_9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:119:24: 119:43 (#0),
                    scope: scope[12],
                },
                kind: _65 = dfa::minimize::StateSet::is_empty(move _66) -> [return: bb36, unwind: bb278],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:119:24: 119:43 (#0),
                    scope: scope[12],
                },
                kind: switchInt(move _65) -> [0: bb41, otherwise: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_66),
            StorageLive(_68),
            StorageLive(_69),
            _69 = &mut _11,
            StorageLive(_70),
            StorageLive(_71),
            StorageLive(_72),
            StorageLive(_73),
            _73 = &(_1.2: std::vec::Vec<dfa::minimize::StateSet>),
            StorageLive(_74),
            _74 = _54,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:120:54: 120:57 (#0),
                    scope: scope[12],
                },
                kind: _72 = <std::vec::Vec<dfa::minimize::StateSet> as core::ops::Index<usize>>::index(move _73, move _74) -> [return: bb38, unwind: bb278],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _71 = &(*_72),
            StorageDead(_74),
            StorageDead(_73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:120:39: 120:65 (#0),
                    scope: scope[12],
                },
                kind: _70 = <dfa::minimize::StateSet as core::clone::Clone>::clone(move _71) -> [return: bb39, unwind: bb278],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:120:25: 120:66 (#0),
                    scope: scope[12],
                },
                kind: _68 = std::vec::Vec::<dfa::minimize::StateSet>::push(move _69, move _70) -> [return: bb40, unwind: bb277],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_70),
            StorageDead(_69),
            StorageDead(_72),
            StorageDead(_68),
            StorageDead(_65),
            StorageDead(_64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[12],
                },
                kind: goto -> bb80,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_66),
            _64 = const (),
            StorageDead(_65),
            StorageDead(_64),
            StorageLive(_75),
            StorageLive(_76),
            StorageLive(_77),
            StorageLive(_78),
            _78 = &(_1.2: std::vec::Vec<dfa::minimize::StateSet>),
            StorageLive(_79),
            _79 = _54,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:124:36: 124:39 (#0),
                    scope: scope[12],
                },
                kind: _77 = <std::vec::Vec<dfa::minimize::StateSet> as core::ops::Index<usize>>::index(move _78, move _79) -> [return: bb42, unwind: bb278],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _76 = &(*_77),
            StorageDead(_79),
            StorageDead(_78),
            StorageLive(_80),
            StorageLive(_81),
            _81 = &_8,
            _80 = &(*_81),
            StorageLive(_82),
            StorageLive(_83),
            _83 = &mut _10,
            _82 = &mut (*_83),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:124:21: 124:74 (#0),
                    scope: scope[12],
                },
                kind: _75 = dfa::minimize::StateSet::subtract(move _76, move _80, move _82) -> [return: bb43, unwind: bb278],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_82),
            StorageDead(_80),
            StorageDead(_76),
            StorageDead(_83),
            StorageDead(_81),
            StorageDead(_77),
            StorageDead(_75),
            StorageLive(_84),
            StorageLive(_85),
            StorageLive(_86),
            _86 = &_10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:125:24: 125:43 (#0),
                    scope: scope[12],
                },
                kind: _85 = dfa::minimize::StateSet::is_empty(move _86) -> [return: bb44, unwind: bb278],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:125:24: 125:43 (#0),
                    scope: scope[12],
                },
                kind: switchInt(move _85) -> [0: bb49, otherwise: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_86),
            StorageLive(_88),
            StorageLive(_89),
            _89 = &mut _11,
            StorageLive(_90),
            StorageLive(_91),
            StorageLive(_92),
            StorageLive(_93),
            _93 = &(_1.2: std::vec::Vec<dfa::minimize::StateSet>),
            StorageLive(_94),
            _94 = _54,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:126:54: 126:57 (#0),
                    scope: scope[12],
                },
                kind: _92 = <std::vec::Vec<dfa::minimize::StateSet> as core::ops::Index<usize>>::index(move _93, move _94) -> [return: bb46, unwind: bb278],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _91 = &(*_92),
            StorageDead(_94),
            StorageDead(_93),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:126:39: 126:65 (#0),
                    scope: scope[12],
                },
                kind: _90 = <dfa::minimize::StateSet as core::clone::Clone>::clone(move _91) -> [return: bb47, unwind: bb278],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_91),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:126:25: 126:66 (#0),
                    scope: scope[12],
                },
                kind: _88 = std::vec::Vec::<dfa::minimize::StateSet>::push(move _89, move _90) -> [return: bb48, unwind: bb276],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_90),
            StorageDead(_89),
            StorageDead(_92),
            StorageDead(_88),
            StorageDead(_85),
            StorageDead(_84),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[12],
                },
                kind: goto -> bb80,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_86),
            _84 = const (),
            StorageDead(_85),
            StorageDead(_84),
            StorageLive(_97),
            StorageLive(_98),
            StorageLive(_99),
            _99 = &_9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:131:26: 131:47 (#0),
                    scope: scope[12],
                },
                kind: _98 = dfa::minimize::StateSet::deep_clone(move _99) -> [return: bb50, unwind: bb278],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_99),
            StorageLive(_100),
            StorageLive(_101),
            _101 = &_10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:131:49: 131:70 (#0),
                    scope: scope[12],
                },
                kind: _100 = dfa::minimize::StateSet::deep_clone(move _101) -> [return: bb51, unwind: bb275],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_101),
            _97 = (move _98, move _100),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:131:70: 131:71 (#0),
                    scope: scope[12],
                },
                kind: drop(_100) -> [return: bb52, unwind: bb273],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_100),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:131:70: 131:71 (#0),
                    scope: scope[12],
                },
                kind: drop(_98) -> [return: bb53, unwind: bb274],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_98),
            PlaceMention(_97),
            StorageLive(_95),
            _95 = move (_97.0: dfa::minimize::StateSet),
            StorageLive(_96),
            _96 = move (_97.1: dfa::minimize::StateSet),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:131:71: 131:72 (#0),
                    scope: scope[12],
                },
                kind: drop(_97) -> [return: bb54, unwind: bb271],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_97),
            StorageLive(_102),
            StorageLive(_103),
            _103 = &mut _11,
            StorageLive(_104),
            StorageLive(_105),
            _105 = &_95,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:132:35: 132:44 (#0),
                    scope: scope[13],
                },
                kind: _104 = <dfa::minimize::StateSet as core::clone::Clone>::clone(move _105) -> [return: bb55, unwind: bb271],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_105),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:132:21: 132:45 (#0),
                    scope: scope[13],
                },
                kind: _102 = std::vec::Vec::<dfa::minimize::StateSet>::push(move _103, move _104) -> [return: bb56, unwind: bb270],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_104),
            StorageDead(_103),
            StorageDead(_102),
            StorageLive(_106),
            StorageLive(_107),
            _107 = &mut _11,
            StorageLive(_108),
            StorageLive(_109),
            _109 = &_96,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:133:35: 133:44 (#0),
                    scope: scope[13],
                },
                kind: _108 = <dfa::minimize::StateSet as core::clone::Clone>::clone(move _109) -> [return: bb57, unwind: bb271],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_109),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:133:21: 133:45 (#0),
                    scope: scope[13],
                },
                kind: _106 = std::vec::Vec::<dfa::minimize::StateSet>::push(move _107, move _108) -> [return: bb58, unwind: bb269],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_108),
            StorageDead(_107),
            StorageDead(_106),
            StorageLive(_110),
            StorageLive(_111),
            _111 = &_1,
            StorageLive(_112),
            StorageLive(_113),
            StorageLive(_114),
            StorageLive(_115),
            _115 = &(_1.2: std::vec::Vec<dfa::minimize::StateSet>),
            StorageLive(_116),
            _116 = _54,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:134:61: 134:64 (#0),
                    scope: scope[13],
                },
                kind: _114 = <std::vec::Vec<dfa::minimize::StateSet> as core::ops::Index<usize>>::index(move _115, move _116) -> [return: bb59, unwind: bb271],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_116),
            StorageDead(_115),
            _113 = &(*_114),
            _112 = &(*_113),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:134:27: 134:65 (#0),
                    scope: scope[13],
                },
                kind: _110 = dfa::minimize::Minimizer::<'_>::find_waiting(move _111, move _112) -> [return: bb60, unwind: bb271],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_112),
            StorageDead(_111),
            PlaceMention(_110),
            _117 = discriminant(_110),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:134:21: 134:65 (#0),
                    scope: scope[13],
                },
                kind: switchInt(move _117) -> [0: bb63, 1: bb62, otherwise: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _110),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:134:27: 134:65 (#0),
                    scope: scope[13],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:135:25: 135:32 (#0),
                    scope: scope[13],
                },
                kind: falseEdge -> [real: bb64, imaginary: bb63],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_126),
            StorageLive(_127),
            StorageLive(_128),
            _128 = &_95,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:140:32: 140:39 (#0),
                    scope: scope[13],
                },
                kind: _127 = dfa::minimize::StateSet::len(move _128) -> [return: bb70, unwind: bb271],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_118),
            _118 = ((_110 as Some).0: usize),
            StorageLive(_119),
            _119 = move _95,
            StorageLive(_120),
            StorageLive(_121),
            _121 = &mut (_1.3: std::vec::Vec<dfa::minimize::StateSet>),
            StorageLive(_122),
            _122 = _118,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:136:41: 136:44 (#0),
                    scope: scope[14],
                },
                kind: _120 = <std::vec::Vec<dfa::minimize::StateSet> as core::ops::IndexMut<usize>>::index_mut(move _121, move _122) -> [return: bb65, unwind: bb268],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_122),
            StorageDead(_121),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:136:29: 136:44 (#0),
                    scope: scope[14],
                },
                kind: drop((*_120)) -> [return: bb66, unwind: bb67],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_120) = move _119,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:136:47: 136:48 (#0),
                    scope: scope[14],
                },
                kind: drop(_119) -> [return: bb68, unwind: bb271],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_120) = move _119,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:136:29: 136:44 (#0),
                    scope: scope[14],
                },
                kind: goto -> bb268,
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_119),
            StorageDead(_120),
            StorageLive(_123),
            StorageLive(_124),
            _124 = &mut (_1.3: std::vec::Vec<dfa::minimize::StateSet>),
            StorageLive(_125),
            _125 = move _96,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:137:29: 137:49 (#0),
                    scope: scope[14],
                },
                kind: _123 = std::vec::Vec::<dfa::minimize::StateSet>::push(move _124, move _125) -> [return: bb69, unwind: bb267],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_125),
            StorageDead(_124),
            StorageDead(_123),
            _48 = const (),
            StorageDead(_118),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:138:25: 138:26 (#0),
                    scope: scope[13],
                },
                kind: goto -> bb77,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_128),
            StorageLive(_129),
            StorageLive(_130),
            _130 = &_96,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:140:43: 140:50 (#0),
                    scope: scope[13],
                },
                kind: _129 = dfa::minimize::StateSet::len(move _130) -> [return: bb71, unwind: bb271],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_130),
            _126 = Le(move _127, move _129),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:140:32: 140:50 (#0),
                    scope: scope[13],
                },
                kind: switchInt(move _126) -> [0: bb74, otherwise: bb72],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_129),
            StorageDead(_127),
            StorageLive(_131),
            StorageLive(_132),
            _132 = &mut (_1.3: std::vec::Vec<dfa::minimize::StateSet>),
            StorageLive(_133),
            _133 = move _95,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:141:33: 141:53 (#0),
                    scope: scope[13],
                },
                kind: _131 = std::vec::Vec::<dfa::minimize::StateSet>::push(move _132, move _133) -> [return: bb73, unwind: bb266],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_133),
            StorageDead(_132),
            StorageDead(_131),
            _48 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:140:29: 144:30 (#0),
                    scope: scope[13],
                },
                kind: goto -> bb76,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_129),
            StorageDead(_127),
            StorageLive(_134),
            StorageLive(_135),
            _135 = &mut (_1.3: std::vec::Vec<dfa::minimize::StateSet>),
            StorageLive(_136),
            _136 = move _96,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:143:33: 143:53 (#0),
                    scope: scope[13],
                },
                kind: _134 = std::vec::Vec::<dfa::minimize::StateSet>::push(move _135, move _136) -> [return: bb75, unwind: bb265],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_136),
            StorageDead(_135),
            StorageDead(_134),
            _48 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:140:29: 144:30 (#0),
                    scope: scope[13],
                },
                kind: goto -> bb76,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_126),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:144:29: 144:30 (#0),
                    scope: scope[13],
                },
                kind: goto -> bb77,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:147:17: 147:18 (#0),
                    scope: scope[12],
                },
                kind: drop(_96) -> [return: bb78, unwind: bb272],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_96),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:147:17: 147:18 (#0),
                    scope: scope[12],
                },
                kind: drop(_95) -> [return: bb79, unwind: bb278],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_95),
            StorageDead(_114),
            StorageDead(_113),
            StorageDead(_110),
            StorageDead(_54),
            StorageDead(_51),
            StorageDead(_49),
            StorageDead(_48),
            _13 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:117:17: 147:18 (#3159),
                    scope: scope[11],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            StorageDead(_51),
            StorageDead(_49),
            StorageDead(_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[11],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_140),
            StorageDead(_138),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:148:17: 148:25 (#0),
                    scope: scope[10],
                },
                kind: drop(_11) -> [return: bb82, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _11 = move _137,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:148:71: 148:72 (#0),
                    scope: scope[10],
                },
                kind: drop(_137) -> [return: bb84, unwind: bb278],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _11 = move _137,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:148:71: 148:72 (#0),
                    scope: scope[10],
                },
                kind: drop(_137) -> [return: bb278, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_137),
            StorageDead(_139),
            StorageLive(_141),
            StorageLive(_142),
            _142 = &mut _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:149:17: 149:33 (#0),
                    scope: scope[10],
                },
                kind: _141 = std::vec::Vec::<dfa::minimize::StateSet>::clear(move _142) -> [return: bb85, unwind: bb278],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_142),
            StorageDead(_141),
            _24 = const (),
            StorageDead(_30),
            StorageDead(_27),
            StorageDead(_25),
            StorageDead(_24),
            _13 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:102:13: 150:14 (#3155),
                    scope: scope[9],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_144),
            _12 = const (),
            StorageDead(_144),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:151:9: 151:10 (#3154),
                    scope: scope[7],
                },
                kind: drop(_14) -> [return: bb89, unwind: bb280],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:151:9: 151:10 (#3154),
                    scope: scope[7],
                },
                kind: drop(_14) -> [return: bb88, unwind: bb280],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:101:9: 151:10 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_12),
            StorageLive(_146),
            StorageLive(_147),
            StorageLive(_148),
            _148 = &(*(_1.0: &mut dfa::dense::DFA<std::vec::Vec<u32>>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:161:44: 161:64 (#0),
                    scope: scope[7],
                },
                kind: _147 = dfa::dense::DFA::<std::vec::Vec<u32>>::state_len(move _148) -> [return: bb90, unwind: bb280],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_148),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:47:9: 47:42 (#455),
                    scope: scope[7],
                },
                kind: _146 = std::vec::from_elem::<util::primitives::StateID>(const dfa::DEAD, move _147) -> [return: bb91, unwind: bb280],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_147),
            FakeRead(ForLet(None), _146),
            StorageLive(_149),
            StorageLive(_150),
            StorageLive(_151),
            _151 = &(_1.2: std::vec::Vec<dfa::minimize::StateSet>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:162:18: 162:34 (#3166),
                    scope: scope[15],
                },
                kind: _150 = <&std::vec::Vec<dfa::minimize::StateSet> as core::iter::IntoIterator>::into_iter(move _151) -> [return: bb92, unwind: bb263],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_151),
            PlaceMention(_150),
            StorageLive(_152),
            _152 = move _150,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:162:9: 164:10 (#3165),
                    scope: scope[16],
                },
                kind: goto -> bb93,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:162:9: 164:10 (#3165),
                    scope: scope[16],
                },
                kind: falseUnwind -> [real: bb94, unwind: bb263],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_153),
            StorageLive(_154),
            StorageLive(_155),
            StorageLive(_156),
            _156 = &mut _152,
            _155 = &mut (*_156),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:162:18: 162:34 (#3166),
                    scope: scope[16],
                },
                kind: _154 = <core::slice::Iter<'_, dfa::minimize::StateSet> as core::iter::Iterator>::next(move _155) -> [return: bb95, unwind: bb263],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_155),
            PlaceMention(_154),
            _157 = discriminant(_154),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:162:18: 162:34 (#3166),
                    scope: scope[16],
                },
                kind: switchInt(move _157) -> [0: bb97, 1: bb98, otherwise: bb96],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _154),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:162:18: 162:34 (#3166),
                    scope: scope[16],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:162:9: 164:10 (#3165),
                    scope: scope[16],
                },
                kind: falseEdge -> [real: bb99, imaginary: bb98],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_159),
            _159 = ((_154 as Some).0: &dfa::minimize::StateSet),
            StorageLive(_160),
            StorageLive(_161),
            _161 = &(*_159),
            StorageLive(_162),
            StorageLive(_163),
            _163 = &mut _146,
            StorageLive(_164),
            _164 = &_6,
            StorageLive(_165),
            _165 = &(*_159),
            _162 = {closure@regex-automata/src/dfa/minimize.rs:163:20: 163:24} { p: move _163, state_to_part: move _164, as_index: move _165 },
            StorageDead(_165),
            StorageDead(_164),
            StorageDead(_163),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:163:13: 163:63 (#0),
                    scope: scope[17],
                },
                kind: _160 = dfa::minimize::StateSet::iter::<{closure@regex-automata/src/dfa/minimize.rs:163:20: 163:24}>(move _161, move _162) -> [return: bb100, unwind: bb263],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _149 = const (),
            StorageDead(_156),
            StorageDead(_154),
            StorageDead(_153),
            StorageDead(_152),
            StorageDead(_150),
            StorageDead(_149),
            StorageLive(_166),
            StorageLive(_167),
            StorageLive(_168),
            _168 = &(*(_1.0: &mut dfa::dense::DFA<std::vec::Vec<u32>>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:170:42: 170:62 (#0),
                    scope: scope[15],
                },
                kind: _167 = dfa::dense::DFA::<std::vec::Vec<u32>>::state_len(move _168) -> [return: bb101, unwind: bb263],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_162),
            StorageDead(_161),
            StorageDead(_160),
            _153 = const (),
            StorageDead(_159),
            StorageDead(_156),
            StorageDead(_154),
            StorageDead(_153),
            _13 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:162:9: 164:10 (#3165),
                    scope: scope[16],
                },
                kind: goto -> bb93,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_168),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:47:9: 47:42 (#456),
                    scope: scope[15],
                },
                kind: _166 = std::vec::from_elem::<util::primitives::StateID>(const dfa::DEAD, move _167) -> [return: bb102, unwind: bb263],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_167),
            FakeRead(ForLet(None), _166),
            StorageLive(_169),
            _169 = const 0_usize,
            FakeRead(ForLet(None), _169),
            StorageLive(_170),
            StorageLive(_171),
            StorageLive(_172),
            StorageLive(_173),
            _173 = &(*(_1.0: &mut dfa::dense::DFA<std::vec::Vec<u32>>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:172:22: 172:39 (#0),
                    scope: scope[19],
                },
                kind: _172 = dfa::dense::DFA::<std::vec::Vec<u32>>::states(move _173) -> [return: bb103, unwind: bb262],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_173),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:172:22: 172:39 (#3169),
                    scope: scope[19],
                },
                kind: _171 = <dfa::dense::StateIter<'_, std::vec::Vec<u32>> as core::iter::IntoIterator>::into_iter(move _172) -> [return: bb104, unwind: bb262],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_172),
            PlaceMention(_171),
            StorageLive(_174),
            _174 = move _171,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:172:9: 177:10 (#3168),
                    scope: scope[20],
                },
                kind: goto -> bb105,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:172:9: 177:10 (#3168),
                    scope: scope[20],
                },
                kind: falseUnwind -> [real: bb106, unwind: bb262],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_175),
            StorageLive(_176),
            StorageLive(_177),
            StorageLive(_178),
            _178 = &mut _174,
            _177 = &mut (*_178),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:172:22: 172:39 (#3169),
                    scope: scope[20],
                },
                kind: _176 = <dfa::dense::StateIter<'_, std::vec::Vec<u32>> as core::iter::Iterator>::next(move _177) -> [return: bb107, unwind: bb262],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_177),
            PlaceMention(_176),
            _179 = discriminant(_176),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:172:22: 172:39 (#3169),
                    scope: scope[20],
                },
                kind: switchInt(move _179) -> [0: bb109, 1: bb110, otherwise: bb108],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _176),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:172:22: 172:39 (#3169),
                    scope: scope[20],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:172:9: 177:10 (#3168),
                    scope: scope[20],
                },
                kind: falseEdge -> [real: bb111, imaginary: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_181),
            _181 = move ((_176 as Some).0: dfa::dense::State<'_>),
            StorageLive(_182),
            StorageLive(_183),
            StorageLive(_184),
            StorageLive(_185),
            _185 = &_146,
            StorageLive(_186),
            StorageLive(_187),
            _187 = &_6,
            StorageLive(_188),
            StorageLive(_189),
            StorageLive(_190),
            _190 = &_181,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:173:39: 173:49 (#0),
                    scope: scope[21],
                },
                kind: _189 = dfa::dense::State::<'_>::id(move _190) -> [return: bb112, unwind: bb262],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _170 = const (),
            StorageDead(_178),
            StorageDead(_176),
            StorageDead(_175),
            StorageDead(_174),
            StorageDead(_171),
            StorageDead(_170),
            StorageLive(_206),
            _206 = _169,
            FakeRead(ForLet(None), _206),
            StorageLive(_207),
            StorageLive(_208),
            _208 = &_166,
            StorageLive(_209),
            _209 = &_6,
            StorageLive(_210),
            _210 = &_146,
            _207 = {closure@regex-automata/src/dfa/minimize.rs:183:21: 183:26} { minimal_ids: move _208, as_index: move _209, state_to_part: move _210 },
            StorageDead(_210),
            StorageDead(_209),
            StorageDead(_208),
            FakeRead(ForLet(None), _207),
            StorageLive(_211),
            StorageLive(_212),
            StorageLive(_213),
            StorageLive(_214),
            StorageLive(_215),
            StorageLive(_216),
            _216 = &(*(_1.0: &mut dfa::dense::DFA<std::vec::Vec<u32>>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:187:23: 187:43 (#0),
                    scope: scope[23],
                },
                kind: _215 = dfa::dense::DFA::<std::vec::Vec<u32>>::state_len(move _216) -> [return: bb125, unwind: bb262],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_190),
            _188 = (move _189,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:173:30: 173:50 (#0),
                    scope: scope[21],
                },
                kind: _186 = <{closure@regex-automata/src/dfa/minimize.rs:92:24: 92:46} as core::ops::Fn<(util::primitives::StateID,)>>::call(move _187, move _188) -> [return: bb113, unwind: bb262],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_189),
            StorageDead(_188),
            StorageDead(_187),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:173:29: 173:51 (#0),
                    scope: scope[21],
                },
                kind: _184 = <std::vec::Vec<util::primitives::StateID> as core::ops::Index<usize>>::index(move _185, move _186) -> [return: bb114, unwind: bb262],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _183 = &(*_184),
            StorageDead(_186),
            StorageDead(_185),
            StorageLive(_191),
            StorageLive(_192),
            StorageLive(_193),
            _193 = &_181,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:173:55: 173:65 (#0),
                    scope: scope[21],
                },
                kind: _192 = dfa::dense::State::<'_>::id(move _193) -> [return: bb115, unwind: bb262],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _191 = &_192,
            StorageDead(_193),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:173:16: 173:65 (#0),
                    scope: scope[21],
                },
                kind: _182 = <util::primitives::StateID as core::cmp::PartialEq>::eq(move _183, move _191) -> [return: bb116, unwind: bb262],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:173:16: 173:65 (#0),
                    scope: scope[21],
                },
                kind: switchInt(move _182) -> [0: bb123, otherwise: bb117],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_192),
            StorageDead(_191),
            StorageDead(_184),
            StorageDead(_183),
            StorageLive(_194),
            StorageLive(_195),
            _195 = &_4,
            StorageLive(_196),
            StorageLive(_197),
            _197 = _169,
            _196 = (move _197,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:174:53: 174:75 (#0),
                    scope: scope[21],
                },
                kind: _194 = <{closure@regex-automata/src/dfa/minimize.rs:89:27: 89:52} as core::ops::Fn<(usize,)>>::call(move _195, move _196) -> [return: bb118, unwind: bb262],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_197),
            StorageDead(_196),
            StorageDead(_195),
            StorageLive(_198),
            StorageLive(_199),
            _199 = &mut _166,
            StorageLive(_200),
            StorageLive(_201),
            _201 = &_6,
            StorageLive(_202),
            StorageLive(_203),
            StorageLive(_204),
            _204 = &_181,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:174:38: 174:48 (#0),
                    scope: scope[21],
                },
                kind: _203 = dfa::dense::State::<'_>::id(move _204) -> [return: bb119, unwind: bb262],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_204),
            _202 = (move _203,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:174:29: 174:49 (#0),
                    scope: scope[21],
                },
                kind: _200 = <{closure@regex-automata/src/dfa/minimize.rs:92:24: 92:46} as core::ops::Fn<(util::primitives::StateID,)>>::call(move _201, move _202) -> [return: bb120, unwind: bb262],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_203),
            StorageDead(_202),
            StorageDead(_201),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:174:28: 174:50 (#0),
                    scope: scope[21],
                },
                kind: _198 = <std::vec::Vec<util::primitives::StateID> as core::ops::IndexMut<usize>>::index_mut(move _199, move _200) -> [return: bb121, unwind: bb262],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_200),
            StorageDead(_199),
            (*_198) = move _194,
            StorageDead(_194),
            StorageDead(_198),
            _205 = AddWithOverflow(_169, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:175:17: 175:31 (#0),
                    scope: scope[21],
                },
                kind: assert(!move (_205.1: bool), "attempt to compute `{} + {}`, which would overflow", _169, const 1_usize) -> [success: bb122, unwind: bb262],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _169 = move (_205.0: usize),
            _175 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:173:13: 176:14 (#0),
                    scope: scope[21],
                },
                kind: goto -> bb124,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_192),
            StorageDead(_191),
            StorageDead(_184),
            StorageDead(_183),
            _175 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:173:13: 176:14 (#0),
                    scope: scope[21],
                },
                kind: goto -> bb124,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_182),
            StorageDead(_181),
            StorageDead(_178),
            StorageDead(_176),
            StorageDead(_175),
            _13 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:172:9: 177:10 (#3168),
                    scope: scope[20],
                },
                kind: goto -> bb105,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_216),
            _214 = core::ops::Range::<usize> { start: const 0_usize, end: move _215 },
            StorageDead(_215),
            StorageLive(_217),
            _217 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:187:19: 187:61 (#0),
                    scope: scope[23],
                },
                kind: _213 = <core::ops::Range<usize> as core::iter::Iterator>::map::<util::primitives::StateID, {closure@regex-automata/src/dfa/minimize.rs:89:27: 89:52}>(move _214, move _217) -> [return: bb126, unwind: bb262],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_217),
            StorageDead(_214),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:187:19: 187:61 (#3173),
                    scope: scope[23],
                },
                kind: _212 = <core::iter::Map<core::ops::Range<usize>, {closure@regex-automata/src/dfa/minimize.rs:89:27: 89:52}> as core::iter::IntoIterator>::into_iter(move _213) -> [return: bb127, unwind: bb262],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_213),
            PlaceMention(_212),
            StorageLive(_218),
            _218 = move _212,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:187:9: 195:10 (#3172),
                    scope: scope[24],
                },
                kind: goto -> bb128,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:187:9: 195:10 (#3172),
                    scope: scope[24],
                },
                kind: falseUnwind -> [real: bb129, unwind: bb262],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_219),
            StorageLive(_220),
            StorageLive(_221),
            StorageLive(_222),
            _222 = &mut _218,
            _221 = &mut (*_222),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:187:19: 187:61 (#3173),
                    scope: scope[24],
                },
                kind: _220 = <core::iter::Map<core::ops::Range<usize>, {closure@regex-automata/src/dfa/minimize.rs:89:27: 89:52}> as core::iter::Iterator>::next(move _221) -> [return: bb130, unwind: bb262],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_221),
            PlaceMention(_220),
            _223 = discriminant(_220),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:187:19: 187:61 (#3173),
                    scope: scope[24],
                },
                kind: switchInt(move _223) -> [0: bb132, 1: bb133, otherwise: bb131],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _220),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:187:19: 187:61 (#3173),
                    scope: scope[24],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:187:9: 195:10 (#3172),
                    scope: scope[24],
                },
                kind: falseEdge -> [real: bb134, imaginary: bb133],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_225),
            _225 = ((_220 as Some).0: util::primitives::StateID),
            StorageLive(_226),
            StorageLive(_227),
            StorageLive(_228),
            StorageLive(_229),
            StorageLive(_230),
            _230 = &_146,
            StorageLive(_231),
            StorageLive(_232),
            _232 = &_6,
            StorageLive(_233),
            StorageLive(_234),
            _234 = _225,
            _233 = (move _234,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:190:30: 190:42 (#0),
                    scope: scope[25],
                },
                kind: _231 = <{closure@regex-automata/src/dfa/minimize.rs:92:24: 92:46} as core::ops::Fn<(util::primitives::StateID,)>>::call(move _232, move _233) -> [return: bb135, unwind: bb262],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _211 = const (),
            StorageDead(_222),
            StorageDead(_220),
            StorageDead(_219),
            StorageDead(_218),
            StorageDead(_212),
            StorageDead(_211),
            StorageLive(_251),
            StorageLive(_252),
            _252 = &mut (*(_1.0: &mut dfa::dense::DFA<std::vec::Vec<u32>>)),
            StorageLive(_253),
            _253 = _206,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:201:9: 201:48 (#0),
                    scope: scope[23],
                },
                kind: _251 = dfa::dense::DFA::<std::vec::Vec<u32>>::truncate_states(move _252, move _253) -> [return: bb144, unwind: bb262],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_234),
            StorageDead(_233),
            StorageDead(_232),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:190:29: 190:43 (#0),
                    scope: scope[25],
                },
                kind: _229 = <std::vec::Vec<util::primitives::StateID> as core::ops::Index<usize>>::index(move _230, move _231) -> [return: bb136, unwind: bb262],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _228 = &(*_229),
            StorageDead(_231),
            StorageDead(_230),
            StorageLive(_235),
            _235 = &_225,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:190:16: 190:49 (#0),
                    scope: scope[25],
                },
                kind: _227 = <util::primitives::StateID as core::cmp::PartialEq>::ne(move _228, move _235) -> [return: bb137, unwind: bb262],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:190:16: 190:49 (#0),
                    scope: scope[25],
                },
                kind: switchInt(move _227) -> [0: bb139, otherwise: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_235),
            StorageDead(_229),
            StorageDead(_228),
            StorageDead(_227),
            StorageDead(_226),
            StorageDead(_225),
            StorageDead(_222),
            StorageDead(_220),
            StorageDead(_219),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[24],
                },
                kind: goto -> bb128,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_235),
            StorageDead(_229),
            StorageDead(_228),
            _226 = const (),
            StorageDead(_227),
            StorageDead(_226),
            StorageLive(_237),
            StorageLive(_238),
            _238 = &mut (*(_1.0: &mut dfa::dense::DFA<std::vec::Vec<u32>>)),
            StorageLive(_239),
            _239 = _225,
            StorageLive(_240),
            _240 = _207,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:193:13: 193:44 (#0),
                    scope: scope[25],
                },
                kind: _237 = dfa::dense::DFA::<std::vec::Vec<u32>>::remap_state::<{closure@regex-automata/src/dfa/minimize.rs:183:21: 183:26}>(move _238, move _239, move _240) -> [return: bb140, unwind: bb262],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_240),
            StorageDead(_239),
            StorageDead(_238),
            StorageDead(_237),
            StorageLive(_241),
            StorageLive(_242),
            _242 = &mut (*(_1.0: &mut dfa::dense::DFA<std::vec::Vec<u32>>)),
            StorageLive(_243),
            _243 = _225,
            StorageLive(_244),
            StorageLive(_245),
            StorageLive(_246),
            _246 = &_166,
            StorageLive(_247),
            StorageLive(_248),
            _248 = &_6,
            StorageLive(_249),
            StorageLive(_250),
            _250 = _225,
            _249 = (move _250,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:194:50: 194:62 (#0),
                    scope: scope[25],
                },
                kind: _247 = <{closure@regex-automata/src/dfa/minimize.rs:92:24: 92:46} as core::ops::Fn<(util::primitives::StateID,)>>::call(move _248, move _249) -> [return: bb141, unwind: bb262],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_250),
            StorageDead(_249),
            StorageDead(_248),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:194:49: 194:63 (#0),
                    scope: scope[25],
                },
                kind: _245 = <std::vec::Vec<util::primitives::StateID> as core::ops::Index<usize>>::index(move _246, move _247) -> [return: bb142, unwind: bb262],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _244 = (*_245),
            StorageDead(_247),
            StorageDead(_246),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:194:13: 194:64 (#0),
                    scope: scope[25],
                },
                kind: _241 = dfa::dense::DFA::<std::vec::Vec<u32>>::swap_states(move _242, move _243, move _244) -> [return: bb143, unwind: bb262],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_244),
            StorageDead(_243),
            StorageDead(_242),
            StorageDead(_245),
            StorageDead(_241),
            _219 = const (),
            StorageDead(_225),
            StorageDead(_222),
            StorageDead(_220),
            StorageDead(_219),
            _13 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:187:9: 195:10 (#3172),
                    scope: scope[24],
                },
                kind: goto -> bb128,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_253),
            StorageDead(_252),
            StorageDead(_251),
            StorageLive(_254),
            StorageLive(_255),
            StorageLive(_256),
            _256 = &(*(_1.0: &mut dfa::dense::DFA<std::vec::Vec<u32>>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:208:30: 208:47 (#0),
                    scope: scope[23],
                },
                kind: _255 = dfa::dense::DFA::<std::vec::Vec<u32>>::starts(move _256) -> [return: bb145, unwind: bb262],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_256),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:208:30: 208:57 (#0),
                    scope: scope[23],
                },
                kind: _254 = <dfa::dense::StartStateIter<'_> as core::iter::Iterator>::collect::<std::vec::Vec<(util::primitives::StateID, util::search::Anchored, util::start::Start)>>(move _255) -> [return: bb146, unwind: bb262],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_255),
            FakeRead(ForLet(None), _254),
            AscribeUserType(_254, o, UserTypeProjection { base: UserType(2), projs: [] }),
            StorageLive(_257),
            StorageLive(_258),
            StorageLive(_259),
            _259 = move _254,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:209:53: 209:59 (#3177),
                    scope: scope[26],
                },
                kind: _258 = <std::vec::Vec<(util::primitives::StateID, util::search::Anchored, util::start::Start)> as core::iter::IntoIterator>::into_iter(move _259) -> [return: bb147, unwind: bb260],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_259),
            PlaceMention(_258),
            StorageLive(_260),
            _260 = move _258,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:209:9: 215:10 (#3176),
                    scope: scope[27],
                },
                kind: goto -> bb148,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:209:9: 215:10 (#3176),
                    scope: scope[27],
                },
                kind: falseUnwind -> [real: bb149, unwind: bb258],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_261),
            StorageLive(_262),
            StorageLive(_263),
            StorageLive(_264),
            _264 = &mut _260,
            _263 = &mut (*_264),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:209:53: 209:59 (#3177),
                    scope: scope[27],
                },
                kind: _262 = <std::vec::IntoIter<(util::primitives::StateID, util::search::Anchored, util::start::Start)> as core::iter::Iterator>::next(move _263) -> [return: bb150, unwind: bb258],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_263),
            PlaceMention(_262),
            _265 = discriminant(_262),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:209:53: 209:59 (#3177),
                    scope: scope[27],
                },
                kind: switchInt(move _265) -> [0: bb152, 1: bb153, otherwise: bb151],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _262),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:209:53: 209:59 (#3177),
                    scope: scope[27],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:209:9: 215:10 (#3176),
                    scope: scope[27],
                },
                kind: falseEdge -> [real: bb154, imaginary: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_267),
            _267 = (((_262 as Some).0: (util::primitives::StateID, util::search::Anchored, util::start::Start)).0: util::primitives::StateID),
            StorageLive(_268),
            _268 = (((_262 as Some).0: (util::primitives::StateID, util::search::Anchored, util::start::Start)).1: util::search::Anchored),
            StorageLive(_269),
            _269 = (((_262 as Some).0: (util::primitives::StateID, util::search::Anchored, util::start::Start)).2: util::start::Start),
            StorageLive(_270),
            StorageLive(_271),
            _271 = &mut (*(_1.0: &mut dfa::dense::DFA<std::vec::Vec<u32>>)),
            StorageLive(_272),
            _272 = _268,
            StorageLive(_273),
            _273 = _269,
            StorageLive(_274),
            StorageLive(_275),
            _275 = &_207,
            StorageLive(_276),
            StorageLive(_277),
            _277 = _267,
            _276 = (move _277,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:213:17: 213:36 (#0),
                    scope: scope[28],
                },
                kind: _274 = <{closure@regex-automata/src/dfa/minimize.rs:183:21: 183:26} as core::ops::Fn<(util::primitives::StateID,)>>::call(move _275, move _276) -> [return: bb155, unwind: bb258],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _257 = const (),
            StorageDead(_264),
            StorageDead(_262),
            StorageDead(_261),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:215:9: 215:10 (#3176),
                    scope: scope[26],
                },
                kind: drop(_260) -> [return: bb157, unwind: bb259],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_277),
            StorageDead(_276),
            StorageDead(_275),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:210:13: 214:14 (#0),
                    scope: scope[28],
                },
                kind: _270 = dfa::dense::DFA::<std::vec::Vec<u32>>::set_start_state(move _271, move _272, move _273, move _274) -> [return: bb156, unwind: bb258],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_274),
            StorageDead(_273),
            StorageDead(_272),
            StorageDead(_271),
            StorageDead(_270),
            _261 = const (),
            StorageDead(_269),
            StorageDead(_268),
            StorageDead(_267),
            StorageDead(_264),
            StorageDead(_262),
            StorageDead(_261),
            _13 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:209:9: 215:10 (#3176),
                    scope: scope[27],
                },
                kind: goto -> bb148,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_260),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:215:9: 215:10 (#3176),
                    scope: scope[26],
                },
                kind: drop(_258) -> [return: bb158, unwind: bb261],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_258),
            StorageDead(_257),
            StorageLive(_278),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:221:24: 221:39 (#0),
                    scope: scope[26],
                },
                kind: _278 = std::collections::BTreeMap::<util::primitives::StateID, std::vec::Vec<util::primitives::PatternID>>::new() -> [return: bb159, unwind: bb261],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _278),
            StorageLive(_279),
            StorageLive(_280),
            StorageLive(_281),
            StorageLive(_282),
            _282 = &(*(_1.0: &mut dfa::dense::DFA<std::vec::Vec<u32>>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:222:40: 222:62 (#0),
                    scope: scope[29],
                },
                kind: _281 = dfa::dense::DFA::<std::vec::Vec<u32>>::pattern_map(move _282) -> [return: bb160, unwind: bb257],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_282),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:222:40: 222:62 (#3180),
                    scope: scope[29],
                },
                kind: _280 = <std::collections::BTreeMap<util::primitives::StateID, std::vec::Vec<util::primitives::PatternID>> as core::iter::IntoIterator>::into_iter(move _281) -> [return: bb161, unwind: bb256],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_281),
            PlaceMention(_280),
            StorageLive(_283),
            _283 = move _280,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:222:9: 225:10 (#3179),
                    scope: scope[30],
                },
                kind: goto -> bb162,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:222:9: 225:10 (#3179),
                    scope: scope[30],
                },
                kind: falseUnwind -> [real: bb163, unwind: bb254],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_284),
            StorageLive(_285),
            StorageLive(_286),
            StorageLive(_287),
            _287 = &mut _283,
            _286 = &mut (*_287),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:222:40: 222:62 (#3180),
                    scope: scope[30],
                },
                kind: _285 = <std::collections::btree_map::IntoIter<util::primitives::StateID, std::vec::Vec<util::primitives::PatternID>> as core::iter::Iterator>::next(move _286) -> [return: bb164, unwind: bb254],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_286),
            PlaceMention(_285),
            _288 = discriminant(_285),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:222:40: 222:62 (#3180),
                    scope: scope[30],
                },
                kind: switchInt(move _288) -> [0: bb166, 1: bb167, otherwise: bb165],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _285),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:222:40: 222:62 (#3180),
                    scope: scope[30],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:222:9: 225:10 (#3179),
                    scope: scope[30],
                },
                kind: falseEdge -> [real: bb168, imaginary: bb167],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_290),
            _290 = (((_285 as Some).0: (util::primitives::StateID, std::vec::Vec<util::primitives::PatternID>)).0: util::primitives::StateID),
            StorageLive(_291),
            _291 = move (((_285 as Some).0: (util::primitives::StateID, std::vec::Vec<util::primitives::PatternID>)).1: std::vec::Vec<util::primitives::PatternID>),
            StorageLive(_292),
            StorageLive(_293),
            _293 = &_207,
            StorageLive(_294),
            StorageLive(_295),
            _295 = _290,
            _294 = (move _295,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:223:26: 223:41 (#0),
                    scope: scope[31],
                },
                kind: _292 = <{closure@regex-automata/src/dfa/minimize.rs:183:21: 183:26} as core::ops::Fn<(util::primitives::StateID,)>>::call(move _293, move _294) -> [return: bb169, unwind: bb252],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _279 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:225:9: 225:10 (#3179),
                    scope: scope[30],
                },
                kind: drop(_285) -> [return: bb174, unwind: bb254],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_295),
            StorageDead(_294),
            StorageDead(_293),
            FakeRead(ForLet(None), _292),
            StorageLive(_296),
            StorageLive(_297),
            _297 = &mut _278,
            StorageLive(_298),
            _298 = _292,
            StorageLive(_299),
            _299 = move _291,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:224:13: 224:45 (#0),
                    scope: scope[32],
                },
                kind: _296 = std::collections::BTreeMap::<util::primitives::StateID, std::vec::Vec<util::primitives::PatternID>>::insert(move _297, move _298, move _299) -> [return: bb170, unwind: bb251],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_299),
            StorageDead(_298),
            StorageDead(_297),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:224:45: 224:46 (#0),
                    scope: scope[32],
                },
                kind: drop(_296) -> [return: bb171, unwind: bb252],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_296),
            _284 = const (),
            StorageDead(_292),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:225:9: 225:10 (#0),
                    scope: scope[30],
                },
                kind: drop(_291) -> [return: bb172, unwind: bb253],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_291),
            StorageDead(_290),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:225:9: 225:10 (#3179),
                    scope: scope[30],
                },
                kind: drop(_285) -> [return: bb173, unwind: bb254],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_287),
            StorageDead(_285),
            StorageDead(_284),
            _13 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:222:9: 225:10 (#3179),
                    scope: scope[30],
                },
                kind: goto -> bb162,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_287),
            StorageDead(_285),
            StorageDead(_284),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:225:9: 225:10 (#3179),
                    scope: scope[29],
                },
                kind: drop(_283) -> [return: bb175, unwind: bb255],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_283),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:225:9: 225:10 (#3179),
                    scope: scope[29],
                },
                kind: drop(_280) -> [return: bb176, unwind: bb257],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_280),
            StorageDead(_279),
            StorageLive(_300),
            StorageLive(_301),
            StorageLive(_302),
            _302 = &mut (*(_1.0: &mut dfa::dense::DFA<std::vec::Vec<u32>>)),
            StorageLive(_303),
            StorageLive(_304),
            _304 = &_278,
            _303 = &(*_304),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:230:9: 230:40 (#0),
                    scope: scope[29],
                },
                kind: _301 = dfa::dense::DFA::<std::vec::Vec<u32>>::set_pattern_map(move _302, move _303) -> [return: bb177, unwind: bb257],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_303),
            StorageDead(_302),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:230:9: 230:49 (#0),
                    scope: scope[29],
                },
                kind: _300 = core::result::Result::<(), dfa::dense::BuildError>::unwrap(move _301) -> [return: bb178, unwind: bb250],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_301),
            StorageDead(_304),
            StorageDead(_300),
            StorageLive(_305),
            StorageLive(_306),
            StorageLive(_307),
            StorageLive(_308),
            _308 = &(*(_1.0: &mut dfa::dense::DFA<std::vec::Vec<u32>>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:239:19: 239:37 (#0),
                    scope: scope[29],
                },
                kind: _307 = dfa::dense::DFA::<std::vec::Vec<u32>>::special(move _308) -> [return: bb179, unwind: bb257],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _306 = &(*_307),
            StorageDead(_308),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:239:19: 239:45 (#0),
                    scope: scope[29],
                },
                kind: _305 = <dfa::special::Special as core::clone::Clone>::clone(move _306) -> [return: bb180, unwind: bb257],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_306),
            FakeRead(ForLet(None), _305),
            StorageDead(_307),
            StorageLive(_309),
            StorageLive(_310),
            _310 = &mut (*(_1.0: &mut dfa::dense::DFA<std::vec::Vec<u32>>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:240:19: 240:41 (#0),
                    scope: scope[33],
                },
                kind: _309 = dfa::dense::DFA::<std::vec::Vec<u32>>::special_mut(move _310) -> [return: bb181, unwind: bb257],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_310),
            FakeRead(ForLet(None), _309),
            StorageLive(_311),
            StorageLive(_312),
            StorageLive(_313),
            _313 = &_305,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:242:12: 242:25 (#0),
                    scope: scope[34],
                },
                kind: _312 = dfa::special::Special::matches(move _313) -> [return: bb182, unwind: bb257],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:242:12: 242:25 (#0),
                    scope: scope[34],
                },
                kind: switchInt(move _312) -> [0: bb205, otherwise: bb183],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_313),
            ((*_309).2: util::primitives::StateID) = const util::primitives::StateID::MAX,
            ((*_309).3: util::primitives::StateID) = const util::primitives::StateID::ZERO,
            StorageLive(_314),
            StorageLive(_315),
            StorageLive(_316),
            StorageLive(_317),
            _317 = &_6,
            StorageLive(_318),
            StorageLive(_319),
            _319 = (_305.2: util::primitives::StateID),
            _318 = (move _319,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:245:22: 245:45 (#0),
                    scope: scope[34],
                },
                kind: _316 = <{closure@regex-automata/src/dfa/minimize.rs:92:24: 92:46} as core::ops::Fn<(util::primitives::StateID,)>>::call(move _317, move _318) -> [return: bb184, unwind: bb257],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_319),
            StorageDead(_318),
            StorageDead(_317),
            StorageLive(_320),
            StorageLive(_321),
            _321 = &_6,
            StorageLive(_322),
            StorageLive(_323),
            _323 = (_305.3: util::primitives::StateID),
            _322 = (move _323,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:245:48: 245:71 (#0),
                    scope: scope[34],
                },
                kind: _320 = <{closure@regex-automata/src/dfa/minimize.rs:92:24: 92:46} as core::ops::Fn<(util::primitives::StateID,)>>::call(move _321, move _322) -> [return: bb185, unwind: bb257],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_323),
            StorageDead(_322),
            StorageDead(_321),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:245:22: 245:71 (#0),
                    scope: scope[34],
                },
                kind: _315 = core::ops::RangeInclusive::<usize>::new(move _316, move _320) -> [return: bb186, unwind: bb257],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_320),
            StorageDead(_316),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:245:22: 245:71 (#3184),
                    scope: scope[34],
                },
                kind: _314 = <core::ops::RangeInclusive<usize> as core::iter::IntoIterator>::into_iter(move _315) -> [return: bb187, unwind: bb257],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_315),
            PlaceMention(_314),
            StorageLive(_324),
            _324 = move _314,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:245:13: 253:14 (#3183),
                    scope: scope[35],
                },
                kind: goto -> bb188,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:245:13: 253:14 (#3183),
                    scope: scope[35],
                },
                kind: falseUnwind -> [real: bb189, unwind: bb257],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_325),
            StorageLive(_326),
            StorageLive(_327),
            StorageLive(_328),
            _328 = &mut _324,
            _327 = &mut (*_328),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:245:22: 245:71 (#3184),
                    scope: scope[35],
                },
                kind: _326 = <core::ops::RangeInclusive<usize> as core::iter::Iterator>::next(move _327) -> [return: bb190, unwind: bb257],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_327),
            PlaceMention(_326),
            _329 = discriminant(_326),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:245:22: 245:71 (#3184),
                    scope: scope[35],
                },
                kind: switchInt(move _329) -> [0: bb192, 1: bb193, otherwise: bb191],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _326),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:245:22: 245:71 (#3184),
                    scope: scope[35],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:245:13: 253:14 (#3183),
                    scope: scope[35],
                },
                kind: falseEdge -> [real: bb194, imaginary: bb193],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_331),
            _331 = ((_326 as Some).0: usize),
            StorageLive(_332),
            StorageLive(_333),
            _333 = &_207,
            StorageLive(_334),
            StorageLive(_335),
            StorageLive(_336),
            _336 = &_4,
            StorageLive(_337),
            StorageLive(_338),
            _338 = _331,
            _337 = (move _338,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:246:36: 246:50 (#0),
                    scope: scope[36],
                },
                kind: _335 = <{closure@regex-automata/src/dfa/minimize.rs:89:27: 89:52} as core::ops::Fn<(usize,)>>::call(move _336, move _337) -> [return: bb195, unwind: bb257],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _311 = const (),
            StorageDead(_328),
            StorageDead(_326),
            StorageDead(_325),
            StorageDead(_324),
            StorageDead(_314),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:242:9: 254:10 (#0),
                    scope: scope[34],
                },
                kind: goto -> bb206,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_338),
            StorageDead(_337),
            StorageDead(_336),
            _334 = (move _335,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:246:30: 246:51 (#0),
                    scope: scope[36],
                },
                kind: _332 = <{closure@regex-automata/src/dfa/minimize.rs:183:21: 183:26} as core::ops::Fn<(util::primitives::StateID,)>>::call(move _333, move _334) -> [return: bb196, unwind: bb257],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_335),
            StorageDead(_334),
            StorageDead(_333),
            FakeRead(ForLet(None), _332),
            StorageLive(_339),
            StorageLive(_340),
            StorageLive(_341),
            _341 = &_332,
            StorageLive(_342),
            _342 = &((*_309).2: util::primitives::StateID),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:247:20: 247:42 (#0),
                    scope: scope[37],
                },
                kind: _340 = <util::primitives::StateID as core::cmp::PartialOrd>::lt(move _341, move _342) -> [return: bb197, unwind: bb257],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:247:20: 247:42 (#0),
                    scope: scope[37],
                },
                kind: switchInt(move _340) -> [0: bb199, otherwise: bb198],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_342),
            StorageDead(_341),
            StorageLive(_343),
            _343 = _332,
            ((*_309).2: util::primitives::StateID) = move _343,
            StorageDead(_343),
            _339 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:247:17: 249:18 (#0),
                    scope: scope[37],
                },
                kind: goto -> bb200,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_342),
            StorageDead(_341),
            _339 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:247:17: 249:18 (#0),
                    scope: scope[37],
                },
                kind: goto -> bb200,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_340),
            StorageDead(_339),
            StorageLive(_344),
            StorageLive(_345),
            _345 = &_332,
            StorageLive(_346),
            _346 = &((*_309).3: util::primitives::StateID),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:250:20: 250:42 (#0),
                    scope: scope[37],
                },
                kind: _344 = <util::primitives::StateID as core::cmp::PartialOrd>::gt(move _345, move _346) -> [return: bb201, unwind: bb257],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:250:20: 250:42 (#0),
                    scope: scope[37],
                },
                kind: switchInt(move _344) -> [0: bb203, otherwise: bb202],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_346),
            StorageDead(_345),
            StorageLive(_347),
            _347 = _332,
            ((*_309).3: util::primitives::StateID) = move _347,
            StorageDead(_347),
            _325 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:250:17: 252:18 (#0),
                    scope: scope[37],
                },
                kind: goto -> bb204,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_346),
            StorageDead(_345),
            _325 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:250:17: 252:18 (#0),
                    scope: scope[37],
                },
                kind: goto -> bb204,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_344),
            StorageDead(_332),
            StorageDead(_331),
            StorageDead(_328),
            StorageDead(_326),
            StorageDead(_325),
            _13 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:245:13: 253:14 (#3183),
                    scope: scope[35],
                },
                kind: goto -> bb188,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_313),
            _311 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:242:9: 254:10 (#0),
                    scope: scope[34],
                },
                kind: goto -> bb206,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_312),
            StorageDead(_311),
            StorageLive(_348),
            StorageLive(_349),
            StorageLive(_350),
            _350 = &_305,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:256:12: 256:24 (#0),
                    scope: scope[34],
                },
                kind: _349 = dfa::special::Special::starts(move _350) -> [return: bb207, unwind: bb257],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:256:12: 256:24 (#0),
                    scope: scope[34],
                },
                kind: switchInt(move _349) -> [0: bb237, otherwise: bb208],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_350),
            ((*_309).6: util::primitives::StateID) = const util::primitives::StateID::MAX,
            ((*_309).7: util::primitives::StateID) = const util::primitives::StateID::ZERO,
            StorageLive(_351),
            StorageLive(_352),
            StorageLive(_353),
            StorageLive(_354),
            StorageLive(_355),
            _355 = &_6,
            StorageLive(_356),
            StorageLive(_357),
            _357 = (_305.6: util::primitives::StateID),
            _356 = (move _357,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:259:22: 259:45 (#0),
                    scope: scope[34],
                },
                kind: _354 = <{closure@regex-automata/src/dfa/minimize.rs:92:24: 92:46} as core::ops::Fn<(util::primitives::StateID,)>>::call(move _355, move _356) -> [return: bb209, unwind: bb257],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_357),
            StorageDead(_356),
            StorageDead(_355),
            StorageLive(_358),
            StorageLive(_359),
            _359 = &_6,
            StorageLive(_360),
            StorageLive(_361),
            _361 = (_305.7: util::primitives::StateID),
            _360 = (move _361,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:259:48: 259:71 (#0),
                    scope: scope[34],
                },
                kind: _358 = <{closure@regex-automata/src/dfa/minimize.rs:92:24: 92:46} as core::ops::Fn<(util::primitives::StateID,)>>::call(move _359, move _360) -> [return: bb210, unwind: bb257],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_361),
            StorageDead(_360),
            StorageDead(_359),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:259:22: 259:71 (#0),
                    scope: scope[34],
                },
                kind: _353 = core::ops::RangeInclusive::<usize>::new(move _354, move _358) -> [return: bb211, unwind: bb257],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_358),
            StorageDead(_354),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:259:22: 259:71 (#3190),
                    scope: scope[34],
                },
                kind: _352 = <core::ops::RangeInclusive<usize> as core::iter::IntoIterator>::into_iter(move _353) -> [return: bb212, unwind: bb257],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_353),
            PlaceMention(_352),
            StorageLive(_362),
            _362 = move _352,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:259:13: 270:14 (#3189),
                    scope: scope[38],
                },
                kind: goto -> bb213,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:259:13: 270:14 (#3189),
                    scope: scope[38],
                },
                kind: falseUnwind -> [real: bb214, unwind: bb257],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_363),
            StorageLive(_364),
            StorageLive(_365),
            StorageLive(_366),
            _366 = &mut _362,
            _365 = &mut (*_366),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:259:22: 259:71 (#3190),
                    scope: scope[38],
                },
                kind: _364 = <core::ops::RangeInclusive<usize> as core::iter::Iterator>::next(move _365) -> [return: bb215, unwind: bb257],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_365),
            PlaceMention(_364),
            _367 = discriminant(_364),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:259:22: 259:71 (#3190),
                    scope: scope[38],
                },
                kind: switchInt(move _367) -> [0: bb217, 1: bb218, otherwise: bb216],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _364),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:259:22: 259:71 (#3190),
                    scope: scope[38],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:259:13: 270:14 (#3189),
                    scope: scope[38],
                },
                kind: falseEdge -> [real: bb219, imaginary: bb218],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_369),
            _369 = ((_364 as Some).0: usize),
            StorageLive(_370),
            StorageLive(_371),
            _371 = &_207,
            StorageLive(_372),
            StorageLive(_373),
            StorageLive(_374),
            _374 = &_4,
            StorageLive(_375),
            StorageLive(_376),
            _376 = _369,
            _375 = (move _376,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:260:36: 260:50 (#0),
                    scope: scope[39],
                },
                kind: _373 = <{closure@regex-automata/src/dfa/minimize.rs:89:27: 89:52} as core::ops::Fn<(usize,)>>::call(move _374, move _375) -> [return: bb220, unwind: bb257],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _351 = const (),
            StorageDead(_366),
            StorageDead(_364),
            StorageDead(_363),
            StorageDead(_362),
            StorageDead(_352),
            StorageDead(_351),
            StorageLive(_392),
            StorageLive(_393),
            _393 = &((*_309).7: util::primitives::StateID),
            StorageLive(_394),
            StorageLive(_395),
            _395 = const dfa::DEAD,
            _394 = &_395,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:271:16: 271:37 (#0),
                    scope: scope[34],
                },
                kind: _392 = <util::primitives::StateID as core::cmp::PartialEq>::eq(move _393, move _394) -> [return: bb233, unwind: bb257],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_376),
            StorageDead(_375),
            StorageDead(_374),
            _372 = (move _373,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:260:30: 260:51 (#0),
                    scope: scope[39],
                },
                kind: _370 = <{closure@regex-automata/src/dfa/minimize.rs:183:21: 183:26} as core::ops::Fn<(util::primitives::StateID,)>>::call(move _371, move _372) -> [return: bb221, unwind: bb257],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_373),
            StorageDead(_372),
            StorageDead(_371),
            FakeRead(ForLet(None), _370),
            StorageLive(_377),
            StorageLive(_378),
            StorageLive(_379),
            _379 = &_370,
            StorageLive(_380),
            StorageLive(_381),
            _381 = const dfa::DEAD,
            _380 = &_381,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:261:20: 261:34 (#0),
                    scope: scope[40],
                },
                kind: _378 = <util::primitives::StateID as core::cmp::PartialEq>::eq(move _379, move _380) -> [return: bb222, unwind: bb257],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:261:20: 261:34 (#0),
                    scope: scope[40],
                },
                kind: switchInt(move _378) -> [0: bb224, otherwise: bb223],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_381),
            StorageDead(_380),
            StorageDead(_379),
            StorageDead(_378),
            StorageDead(_377),
            StorageDead(_370),
            StorageDead(_369),
            StorageDead(_366),
            StorageDead(_364),
            StorageDead(_363),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[38],
                },
                kind: goto -> bb213,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_381),
            StorageDead(_380),
            StorageDead(_379),
            _377 = const (),
            StorageDead(_378),
            StorageDead(_377),
            StorageLive(_383),
            StorageLive(_384),
            StorageLive(_385),
            _385 = &_370,
            StorageLive(_386),
            _386 = &((*_309).6: util::primitives::StateID),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:264:20: 264:42 (#0),
                    scope: scope[40],
                },
                kind: _384 = <util::primitives::StateID as core::cmp::PartialOrd>::lt(move _385, move _386) -> [return: bb225, unwind: bb257],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:264:20: 264:42 (#0),
                    scope: scope[40],
                },
                kind: switchInt(move _384) -> [0: bb227, otherwise: bb226],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_386),
            StorageDead(_385),
            StorageLive(_387),
            _387 = _370,
            ((*_309).6: util::primitives::StateID) = move _387,
            StorageDead(_387),
            _383 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:264:17: 266:18 (#0),
                    scope: scope[40],
                },
                kind: goto -> bb228,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_386),
            StorageDead(_385),
            _383 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:264:17: 266:18 (#0),
                    scope: scope[40],
                },
                kind: goto -> bb228,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_384),
            StorageDead(_383),
            StorageLive(_388),
            StorageLive(_389),
            _389 = &_370,
            StorageLive(_390),
            _390 = &((*_309).7: util::primitives::StateID),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:267:20: 267:42 (#0),
                    scope: scope[40],
                },
                kind: _388 = <util::primitives::StateID as core::cmp::PartialOrd>::gt(move _389, move _390) -> [return: bb229, unwind: bb257],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:267:20: 267:42 (#0),
                    scope: scope[40],
                },
                kind: switchInt(move _388) -> [0: bb231, otherwise: bb230],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_390),
            StorageDead(_389),
            StorageLive(_391),
            _391 = _370,
            ((*_309).7: util::primitives::StateID) = move _391,
            StorageDead(_391),
            _363 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:267:17: 269:18 (#0),
                    scope: scope[40],
                },
                kind: goto -> bb232,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_390),
            StorageDead(_389),
            _363 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:267:17: 269:18 (#0),
                    scope: scope[40],
                },
                kind: goto -> bb232,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_388),
            StorageDead(_370),
            StorageDead(_369),
            StorageDead(_366),
            StorageDead(_364),
            StorageDead(_363),
            _13 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:259:13: 270:14 (#3189),
                    scope: scope[38],
                },
                kind: goto -> bb213,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:271:16: 271:37 (#0),
                    scope: scope[34],
                },
                kind: switchInt(move _392) -> [0: bb235, otherwise: bb234],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_395),
            StorageDead(_394),
            StorageDead(_393),
            ((*_309).6: util::primitives::StateID) = const dfa::DEAD,
            _348 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:271:13: 273:14 (#0),
                    scope: scope[34],
                },
                kind: goto -> bb236,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_395),
            StorageDead(_394),
            StorageDead(_393),
            _348 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:271:13: 273:14 (#0),
                    scope: scope[34],
                },
                kind: goto -> bb236,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_392),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:256:9: 274:10 (#0),
                    scope: scope[34],
                },
                kind: goto -> bb238,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_350),
            _348 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:256:9: 274:10 (#0),
                    scope: scope[34],
                },
                kind: goto -> bb238,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_349),
            StorageDead(_348),
            StorageLive(_396),
            StorageLive(_397),
            _397 = &_207,
            StorageLive(_398),
            StorageLive(_399),
            _399 = ((*_309).1: util::primitives::StateID),
            _398 = (move _399,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:275:23: 275:41 (#0),
                    scope: scope[34],
                },
                kind: _396 = <{closure@regex-automata/src/dfa/minimize.rs:183:21: 183:26} as core::ops::Fn<(util::primitives::StateID,)>>::call(move _397, move _398) -> [return: bb239, unwind: bb257],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_399),
            StorageDead(_398),
            StorageDead(_397),
            ((*_309).1: util::primitives::StateID) = move _396,
            StorageDead(_396),
            StorageLive(_400),
            StorageLive(_401),
            _401 = &mut (*_309),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:276:9: 276:22 (#0),
                    scope: scope[34],
                },
                kind: _400 = dfa::special::Special::set_max(move _401) -> [return: bb240, unwind: bb257],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_401),
            StorageDead(_400),
            _0 = const (),
            StorageDead(_309),
            StorageDead(_305),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:277:5: 277:6 (#0),
                    scope: scope[26],
                },
                kind: drop(_278) -> [return: bb241, unwind: bb261],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_278),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:277:5: 277:6 (#0),
                    scope: scope[23],
                },
                kind: drop(_254) -> [return: bb242, unwind: bb262],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_254),
            StorageDead(_207),
            StorageDead(_206),
            StorageDead(_169),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:277:5: 277:6 (#0),
                    scope: scope[15],
                },
                kind: drop(_166) -> [return: bb243, unwind: bb263],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_166),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:277:5: 277:6 (#0),
                    scope: scope[7],
                },
                kind: drop(_146) -> [return: bb244, unwind: bb280],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_146),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:277:5: 277:6 (#0),
                    scope: scope[6],
                },
                kind: drop(_11) -> [return: bb245, unwind: bb281],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:277:5: 277:6 (#0),
                    scope: scope[5],
                },
                kind: drop(_10) -> [return: bb246, unwind: bb282],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:277:5: 277:6 (#0),
                    scope: scope[4],
                },
                kind: drop(_9) -> [return: bb247, unwind: bb283],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:277:5: 277:6 (#0),
                    scope: scope[3],
                },
                kind: drop(_8) -> [return: bb248, unwind: bb284],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_4),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:277:5: 277:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb249, unwind: bb285],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:277:6: 277:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:230:48: 230:49 (#0),
                    scope: scope[29],
                },
                kind: drop(_301) -> [return: bb257, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:224:44: 224:45 (#0),
                    scope: scope[32],
                },
                kind: drop(_299) -> [return: bb252, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:225:9: 225:10 (#0),
                    scope: scope[30],
                },
                kind: drop(_291) -> [return: bb253, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:225:9: 225:10 (#3179),
                    scope: scope[30],
                },
                kind: drop(_285) -> [return: bb254, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:225:9: 225:10 (#3179),
                    scope: scope[29],
                },
                kind: drop(_283) -> [return: bb255, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:225:9: 225:10 (#3179),
                    scope: scope[29],
                },
                kind: drop(_280) -> [return: bb257, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:222:61: 222:62 (#3180),
                    scope: scope[29],
                },
                kind: drop(_281) -> [return: bb257, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:277:5: 277:6 (#0),
                    scope: scope[26],
                },
                kind: drop(_278) -> [return: bb261, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:215:9: 215:10 (#3176),
                    scope: scope[26],
                },
                kind: drop(_260) -> [return: bb259, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:215:9: 215:10 (#3176),
                    scope: scope[26],
                },
                kind: drop(_258) -> [return: bb261, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:209:58: 209:59 (#3177),
                    scope: scope[26],
                },
                kind: drop(_259) -> [return: bb261, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:277:5: 277:6 (#0),
                    scope: scope[23],
                },
                kind: drop(_254) -> [return: bb262, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:277:5: 277:6 (#0),
                    scope: scope[15],
                },
                kind: drop(_166) -> [return: bb263, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:277:5: 277:6 (#0),
                    scope: scope[7],
                },
                kind: drop(_146) -> [return: bb280, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:148:71: 148:72 (#0),
                    scope: scope[10],
                },
                kind: drop(_140) -> [return: bb278, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:143:52: 143:53 (#0),
                    scope: scope[13],
                },
                kind: drop(_136) -> [return: bb271, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:141:52: 141:53 (#0),
                    scope: scope[13],
                },
                kind: drop(_133) -> [return: bb271, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:137:48: 137:49 (#0),
                    scope: scope[14],
                },
                kind: drop(_125) -> [return: bb271, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:136:47: 136:48 (#0),
                    scope: scope[14],
                },
                kind: drop(_119) -> [return: bb271, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:133:44: 133:45 (#0),
                    scope: scope[13],
                },
                kind: drop(_108) -> [return: bb271, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:132:44: 132:45 (#0),
                    scope: scope[13],
                },
                kind: drop(_104) -> [return: bb271, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:147:17: 147:18 (#0),
                    scope: scope[12],
                },
                kind: drop(_96) -> [return: bb272, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:147:17: 147:18 (#0),
                    scope: scope[12],
                },
                kind: drop(_95) -> [return: bb278, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:131:70: 131:71 (#0),
                    scope: scope[12],
                },
                kind: drop(_98) -> [return: bb274, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:131:71: 131:72 (#0),
                    scope: scope[12],
                },
                kind: drop(_97) -> [return: bb278, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:131:70: 131:71 (#0),
                    scope: scope[12],
                },
                kind: drop(_98) -> [return: bb278, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:126:65: 126:66 (#0),
                    scope: scope[12],
                },
                kind: drop(_90) -> [return: bb278, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:120:65: 120:66 (#0),
                    scope: scope[12],
                },
                kind: drop(_70) -> [return: bb278, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:151:9: 151:10 (#0),
                    scope: scope[7],
                },
                kind: drop(_17) -> [return: bb279, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:151:9: 151:10 (#3154),
                    scope: scope[7],
                },
                kind: drop(_14) -> [return: bb280, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:277:5: 277:6 (#0),
                    scope: scope[6],
                },
                kind: drop(_11) -> [return: bb281, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:277:5: 277:6 (#0),
                    scope: scope[5],
                },
                kind: drop(_10) -> [return: bb282, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:277:5: 277:6 (#0),
                    scope: scope[4],
                },
                kind: drop(_9) -> [return: bb283, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:277:5: 277:6 (#0),
                    scope: scope[3],
                },
                kind: drop(_8) -> [return: bb284, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:277:5: 277:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb285, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:87:5: 277:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:87:25: 87:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                ImplicitSelf(
                    Mut,
                ),
            ),
        ),
        ty: dfa::minimize::Minimizer<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:87:16: 87:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/minimize.rs:88:23: 88:41 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:88:13: 88:20 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:88:13: 88:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::dense::DFA<std::vec::Vec<u32, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:88:23: 88:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/minimize.rs:89:27: 91:10 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:89:13: 89:24 (#0),
                    },
                ),
            ),
        ),
        ty: Closure(
            DefId(0:1110 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#0}),
            [
                '{erased},
                i8,
                Binder { value: extern "RustCall" fn((usize,)) -> util::primitives::StateID, bound_vars: [] },
                (&'{erased} usize,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:89:13: 89:24 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:89:27: 91:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/minimize.rs:92:24: 92:75 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:92:13: 92:21 (#0),
                    },
                ),
            ),
        ),
        ty: Closure(
            DefId(0:1111 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#1}),
            [
                '{erased},
                i8,
                Binder { value: extern "RustCall" fn((util::primitives::StateID,)) -> usize, bound_vars: [] },
                (&'{erased} usize,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:92:13: 92:21 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:92:24: 92:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/minimize.rs:94:28: 94:45 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:94:13: 94:25 (#0),
                    },
                ),
            ),
        ),
        ty: dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:94:13: 94:25 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/minimize.rs:95:28: 95:45 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:95:13: 95:25 (#0),
                    },
                ),
            ),
        ),
        ty: dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:95:13: 95:25 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/minimize.rs:96:28: 96:45 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:96:13: 96:25 (#0),
                    },
                ),
            ),
        ),
        ty: dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:96:13: 96:25 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9: 44:32 (#454),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:97:13: 97:25 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<dfa::minimize::StateSet, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:97:13: 97:25 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:101:9: 151:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:87:5: 277:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:101:9: 151:10 (#3154),
                },
            ),
        ),
        ty: core::option::Option<dfa::minimize::StateSet>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:101:31: 101:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:101:9: 151:10 (#3154),
                },
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<dfa::minimize::StateSet, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:101:31: 101:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:101:19: 101:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _14,
                                ),
                                regex-automata/src/dfa/minimize.rs:101:31: 101:49 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:101:19: 101:28 (#0),
                    },
                ),
            ),
        ),
        ty: dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:101:24: 101:27 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:102:13: 150:14 (#3155),
                },
            ),
        ),
        ty: util::alphabet::ByteClassIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:102:22: 102:52 (#3156),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:102:13: 150:14 (#3155),
                },
            ),
        ),
        ty: util::alphabet::ByteClassIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:102:22: 102:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:102:13: 150:14 (#3155),
                },
            ),
        ),
        ty: &'{erased} util::alphabet::ByteClasses,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:102:22: 102:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:102:13: 150:14 (#3155),
                },
            ),
        ),
        ty: &'{erased} util::alphabet::ByteClasses,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:102:22: 102:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:102:13: 150:14 (#3155),
                },
            ),
        ),
        ty: &'{erased} dfa::dense::DFA<std::vec::Vec<u32, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:102:22: 102:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _18,
                                ),
                                regex-automata/src/dfa/minimize.rs:102:22: 102:52 (#3156),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:102:22: 102:52 (#3156),
                    },
                ),
            ),
        ),
        ty: util::alphabet::ByteClassIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:102:22: 102:52 (#3156),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:102:22: 102:52 (#3156),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::alphabet::Unit>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:102:22: 102:52 (#3156),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::alphabet::ByteClassIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:102:22: 102:52 (#3156),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::alphabet::ByteClassIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:102:22: 102:52 (#3156),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:102:13: 150:14 (#3155),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:102:13: 150:14 (#3155),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _25,
                                ),
                                regex-automata/src/dfa/minimize.rs:102:22: 102:52 (#3156),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:102:17: 102:18 (#3157),
                    },
                ),
            ),
        ),
        ty: util::alphabet::Unit,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:102:17: 102:18 (#0),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:103:17: 103:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::minimize::Minimizer<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:103:17: 103:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::alphabet::Unit,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:103:39: 103:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:103:42: 103:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:103:42: 103:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:103:48: 103:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:103:48: 103:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:113:17: 115:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:113:20: 113:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:113:20: 113:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:113:40: 115:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:117:17: 147:18 (#3159),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:117:26: 117:50 (#3160),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:117:26: 117:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:117:29: 117:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<dfa::minimize::StateSet, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:117:29: 117:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _43,
                                ),
                                regex-automata/src/dfa/minimize.rs:117:26: 117:50 (#3160),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:117:26: 117:50 (#3160),
                    },
                ),
            ),
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:117:26: 117:50 (#3160),
            scope: scope[10],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:117:26: 117:50 (#3160),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:117:26: 117:50 (#3160),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:117:26: 117:50 (#3160),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:117:26: 117:50 (#3160),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:117:17: 147:18 (#3159),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:117:17: 147:18 (#3159),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _49,
                                ),
                                regex-automata/src/dfa/minimize.rs:117:26: 117:50 (#3160),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:117:21: 117:22 (#3161),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:117:21: 117:22 (#0),
            scope: scope[11],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:118:21: 118:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:118:21: 118:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:118:36: 118:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<dfa::minimize::StateSet, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:118:21: 118:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:118:37: 118:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:118:53: 118:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:118:53: 118:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:118:64: 118:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:118:64: 118:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:119:21: 122:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:119:24: 119:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:119:24: 119:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:119:44: 122:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:120:25: 120:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<dfa::minimize::StateSet, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:120:25: 120:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:120:39: 120:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:120:39: 120:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:120:54: 120:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<dfa::minimize::StateSet, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:120:39: 120:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:120:55: 120:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:124:21: 124:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:124:21: 124:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:124:36: 124:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<dfa::minimize::StateSet, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:124:21: 124:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:124:37: 124:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:124:49: 124:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:124:49: 124:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:124:60: 124:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:124:60: 124:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:125:21: 128:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:125:24: 125:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:125:24: 125:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:125:44: 128:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:126:25: 126:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<dfa::minimize::StateSet, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:126:25: 126:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:126:39: 126:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:126:39: 126:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:126:54: 126:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<dfa::minimize::StateSet, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:126:39: 126:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:126:55: 126:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _97,
                                ),
                                regex-automata/src/dfa/minimize.rs:131:25: 131:71 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:130:25: 130:31 (#0),
                    },
                ),
            ),
        ),
        ty: dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:130:26: 130:27 (#0),
            scope: scope[12],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _97,
                                ),
                                regex-automata/src/dfa/minimize.rs:131:25: 131:71 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:130:25: 130:31 (#0),
                    },
                ),
            ),
        ),
        ty: dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:130:29: 130:30 (#0),
            scope: scope[12],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (dfa::minimize::StateSet, dfa::minimize::StateSet),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:131:25: 131:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:131:26: 131:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:131:26: 131:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:131:49: 131:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:131:49: 131:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:132:21: 132:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<dfa::minimize::StateSet, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:132:21: 132:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:132:35: 132:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:132:35: 132:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:133:21: 133:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<dfa::minimize::StateSet, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:133:21: 133:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:133:35: 133:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:133:35: 133:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:134:21: 146:22 (#0),
                },
            ),
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:134:27: 134:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:134:21: 146:22 (#0),
                },
            ),
        ),
        ty: &'{erased} dfa::minimize::Minimizer<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:134:27: 134:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:134:21: 146:22 (#0),
                },
            ),
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:134:45: 134:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:134:21: 146:22 (#0),
                },
            ),
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:134:45: 134:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:134:21: 146:22 (#0),
                },
            ),
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:134:61: 134:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:134:21: 146:22 (#0),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<dfa::minimize::StateSet, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:134:46: 134:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:134:21: 146:22 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:134:62: 134:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:135:25: 135:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _110,
                                ),
                                regex-automata/src/dfa/minimize.rs:134:27: 134:65 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:135:25: 135:32 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:135:30: 135:31 (#0),
            scope: scope[13],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:136:47: 136:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:136:41: 136:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<dfa::minimize::StateSet, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:136:29: 136:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:136:42: 136:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:137:29: 137:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<dfa::minimize::StateSet, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:137:29: 137:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:137:47: 137:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:140:29: 144:30 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:140:32: 140:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:140:29: 144:30 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:140:32: 140:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:140:29: 144:30 (#0),
                },
            ),
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:140:32: 140:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:140:29: 144:30 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:140:43: 140:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:140:29: 144:30 (#0),
                },
            ),
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:140:43: 140:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:141:33: 141:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<dfa::minimize::StateSet, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:141:33: 141:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:141:51: 141:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:143:33: 143:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<dfa::minimize::StateSet, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:143:33: 143:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:143:51: 143:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::Vec<dfa::minimize::StateSet, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:148:28: 148:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<dfa::minimize::StateSet, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:148:41: 148:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<dfa::minimize::StateSet, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:148:41: 148:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::Vec<dfa::minimize::StateSet, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:148:63: 148:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:149:17: 149:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<dfa::minimize::StateSet, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:149:17: 149:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:101:9: 151:10 (#3154),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:101:9: 151:10 (#3154),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:101:9: 151:10 (#3154),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:101:9: 151:10 (#3154),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:47:9: 47:42 (#455),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:161:13: 161:30 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:161:13: 161:30 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:161:44: 161:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::dense::DFA<std::vec::Vec<u32, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:161:44: 161:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:162:9: 164:10 (#3165),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::Iter<'{erased}, dfa::minimize::StateSet>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:162:18: 162:34 (#3166),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<dfa::minimize::StateSet, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:162:18: 162:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _150,
                                ),
                                regex-automata/src/dfa/minimize.rs:162:18: 162:34 (#3166),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:162:18: 162:34 (#3166),
                    },
                ),
            ),
        ),
        ty: core::slice::Iter<'{erased}, dfa::minimize::StateSet>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:162:18: 162:34 (#3166),
            scope: scope[15],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:162:18: 162:34 (#3166),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} dfa::minimize::StateSet>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:162:18: 162:34 (#3166),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, dfa::minimize::StateSet>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:162:18: 162:34 (#3166),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, dfa::minimize::StateSet>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:162:18: 162:34 (#3166),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:162:9: 164:10 (#3165),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:162:9: 164:10 (#3165),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _154,
                                ),
                                regex-automata/src/dfa/minimize.rs:162:18: 162:34 (#3166),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:162:13: 162:14 (#3167),
                    },
                ),
            ),
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:162:13: 162:14 (#0),
            scope: scope[16],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:163:13: 163:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:163:13: 163:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:1112 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#2}),
            [
                '{erased},
                i16,
                Binder { value: extern "RustCall" fn((util::primitives::StateID,)), bound_vars: [] },
                (&'{erased} mut std::vec::Vec<util::primitives::StateID, std::alloc::Global>, &'{erased} Closure(DefId(0:1111 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#1}), ['{erased}, i8, Binder { value: extern "RustCall" fn((util::primitives::StateID,)) -> usize, bound_vars: [] }, (&'{erased} usize,)]), &'{erased} dfa::minimize::StateSet),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:163:20: 163:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:163:20: 163:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Closure(DefId(0:1111 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#1}), ['{erased}, i8, Binder { value: extern "RustCall" fn((util::primitives::StateID,)) -> usize, bound_vars: [] }, (&'{erased} usize,)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:163:20: 163:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:163:20: 163:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:47:9: 47:42 (#456),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:170:13: 170:28 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:170:13: 170:28 (#0),
            scope: scope[15],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:170:42: 170:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::dense::DFA<std::vec::Vec<u32, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:170:42: 170:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/minimize.rs:171:29: 171:30 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:171:13: 171:26 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:171:13: 171:26 (#0),
            scope: scope[18],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:172:9: 177:10 (#3168),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: dfa::dense::StateIter<'{erased}, std::vec::Vec<u32, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:172:22: 172:39 (#3169),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: dfa::dense::StateIter<'{erased}, std::vec::Vec<u32, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:172:22: 172:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::dense::DFA<std::vec::Vec<u32, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:172:22: 172:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _171,
                                ),
                                regex-automata/src/dfa/minimize.rs:172:22: 172:39 (#3169),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:172:22: 172:39 (#3169),
                    },
                ),
            ),
        ),
        ty: dfa::dense::StateIter<'{erased}, std::vec::Vec<u32, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:172:22: 172:39 (#3169),
            scope: scope[19],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:172:22: 172:39 (#3169),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<dfa::dense::State<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:172:22: 172:39 (#3169),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut dfa::dense::StateIter<'{erased}, std::vec::Vec<u32, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:172:22: 172:39 (#3169),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut dfa::dense::StateIter<'{erased}, std::vec::Vec<u32, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:172:22: 172:39 (#3169),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:172:9: 177:10 (#3168),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:172:9: 177:10 (#3168),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _176,
                                ),
                                regex-automata/src/dfa/minimize.rs:172:22: 172:39 (#3169),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:172:13: 172:18 (#3170),
                    },
                ),
            ),
        ),
        ty: dfa::dense::State<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:172:13: 172:18 (#0),
            scope: scope[20],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:173:13: 176:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:173:16: 173:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:173:13: 176:14 (#0),
                },
            ),
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:173:16: 173:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:173:13: 176:14 (#0),
                },
            ),
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:173:29: 173:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:173:13: 176:14 (#0),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:173:16: 173:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:173:13: 176:14 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:173:30: 173:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:173:13: 176:14 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:1111 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#1}), ['{erased}, i8, Binder { value: extern "RustCall" fn((util::primitives::StateID,)) -> usize, bound_vars: [] }, (&'{erased} usize,)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:173:30: 173:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:173:13: 176:14 (#0),
                },
            ),
        ),
        ty: (util::primitives::StateID,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:173:30: 173:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:173:13: 176:14 (#0),
                },
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:173:39: 173:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:173:13: 176:14 (#0),
                },
            ),
        ),
        ty: &'{erased} dfa::dense::State<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:173:39: 173:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:173:13: 176:14 (#0),
                },
            ),
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:173:55: 173:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:173:13: 176:14 (#0),
                },
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:173:55: 173:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:173:13: 176:14 (#0),
                },
            ),
        ),
        ty: &'{erased} dfa::dense::State<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:173:55: 173:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:174:53: 174:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Closure(DefId(0:1110 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#0}), ['{erased}, i8, Binder { value: extern "RustCall" fn((usize,)) -> util::primitives::StateID, bound_vars: [] }, (&'{erased} usize,)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:174:53: 174:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:174:53: 174:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:174:65: 174:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:174:28: 174:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:174:17: 174:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:174:29: 174:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Closure(DefId(0:1111 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#1}), ['{erased}, i8, Binder { value: extern "RustCall" fn((util::primitives::StateID,)) -> usize, bound_vars: [] }, (&'{erased} usize,)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:174:29: 174:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (util::primitives::StateID,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:174:29: 174:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:174:38: 174:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::dense::State<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:174:38: 174:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:175:17: 175:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/minimize.rs:179:29: 179:38 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:179:13: 179:26 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:179:13: 179:26 (#0),
            scope: scope[19],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/minimize.rs:183:21: 183:78 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:183:13: 183:18 (#0),
                    },
                ),
            ),
        ),
        ty: Closure(
            DefId(0:1113 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#3}),
            [
                '{erased},
                i8,
                Binder { value: extern "RustCall" fn((util::primitives::StateID,)) -> util::primitives::StateID, bound_vars: [] },
                (&'{erased} std::vec::Vec<util::primitives::StateID, std::alloc::Global>, &'{erased} Closure(DefId(0:1111 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#1}), ['{erased}, i8, Binder { value: extern "RustCall" fn((util::primitives::StateID,)) -> usize, bound_vars: [] }, (&'{erased} usize,)]), &'{erased} std::vec::Vec<util::primitives::StateID, std::alloc::Global>),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:183:13: 183:18 (#0),
            scope: scope[22],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:183:21: 183:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Closure(DefId(0:1111 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#1}), ['{erased}, i8, Binder { value: extern "RustCall" fn((util::primitives::StateID,)) -> usize, bound_vars: [] }, (&'{erased} usize,)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:183:21: 183:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:183:21: 183:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:187:9: 195:10 (#3172),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Map<core::ops::Range<usize>, Closure(DefId(0:1110 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#0}), ['{erased}, i8, Binder { value: extern "RustCall" fn((usize,)) -> util::primitives::StateID, bound_vars: [] }, (&'{erased} usize,)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:187:19: 187:61 (#3173),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Map<core::ops::Range<usize>, Closure(DefId(0:1110 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#0}), ['{erased}, i8, Binder { value: extern "RustCall" fn((usize,)) -> util::primitives::StateID, bound_vars: [] }, (&'{erased} usize,)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:187:19: 187:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:187:19: 187:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:187:23: 187:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::dense::DFA<std::vec::Vec<u32, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:187:23: 187:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:1110 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#0}),
            [
                '{erased},
                i8,
                Binder { value: extern "RustCall" fn((usize,)) -> util::primitives::StateID, bound_vars: [] },
                (&'{erased} usize,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:187:49: 187:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _212,
                                ),
                                regex-automata/src/dfa/minimize.rs:187:19: 187:61 (#3173),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:187:19: 187:61 (#3173),
                    },
                ),
            ),
        ),
        ty: core::iter::Map<core::ops::Range<usize>, Closure(DefId(0:1110 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#0}), ['{erased}, i8, Binder { value: extern "RustCall" fn((usize,)) -> util::primitives::StateID, bound_vars: [] }, (&'{erased} usize,)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:187:19: 187:61 (#3173),
            scope: scope[23],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:187:19: 187:61 (#3173),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:187:19: 187:61 (#3173),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Map<core::ops::Range<usize>, Closure(DefId(0:1110 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#0}), ['{erased}, i8, Binder { value: extern "RustCall" fn((usize,)) -> util::primitives::StateID, bound_vars: [] }, (&'{erased} usize,)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:187:19: 187:61 (#3173),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Map<core::ops::Range<usize>, Closure(DefId(0:1110 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#0}), ['{erased}, i8, Binder { value: extern "RustCall" fn((usize,)) -> util::primitives::StateID, bound_vars: [] }, (&'{erased} usize,)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:187:19: 187:61 (#3173),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:187:9: 195:10 (#3172),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:187:9: 195:10 (#3172),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _220,
                                ),
                                regex-automata/src/dfa/minimize.rs:187:19: 187:61 (#3173),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:187:13: 187:15 (#3174),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:187:13: 187:15 (#0),
            scope: scope[24],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:190:13: 192:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:190:16: 190:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:190:16: 190:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:190:29: 190:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:190:16: 190:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:190:30: 190:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Closure(DefId(0:1111 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#1}), ['{erased}, i8, Binder { value: extern "RustCall" fn((util::primitives::StateID,)) -> usize, bound_vars: [] }, (&'{erased} usize,)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:190:30: 190:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (util::primitives::StateID,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:190:30: 190:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:190:39: 190:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:190:47: 190:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:190:50: 192:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:193:13: 193:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut dfa::dense::DFA<std::vec::Vec<u32, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:193:13: 193:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:193:34: 193:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:1113 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#3}),
            [
                '{erased},
                i8,
                Binder { value: extern "RustCall" fn((util::primitives::StateID,)) -> util::primitives::StateID, bound_vars: [] },
                (&'{erased} std::vec::Vec<util::primitives::StateID, std::alloc::Global>, &'{erased} Closure(DefId(0:1111 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#1}), ['{erased}, i8, Binder { value: extern "RustCall" fn((util::primitives::StateID,)) -> usize, bound_vars: [] }, (&'{erased} usize,)]), &'{erased} std::vec::Vec<util::primitives::StateID, std::alloc::Global>),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:193:38: 193:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:194:13: 194:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut dfa::dense::DFA<std::vec::Vec<u32, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:194:13: 194:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:194:34: 194:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:194:38: 194:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:194:49: 194:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:194:38: 194:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:194:50: 194:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Closure(DefId(0:1111 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#1}), ['{erased}, i8, Binder { value: extern "RustCall" fn((util::primitives::StateID,)) -> usize, bound_vars: [] }, (&'{erased} usize,)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:194:50: 194:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (util::primitives::StateID,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:194:50: 194:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:194:59: 194:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:201:9: 201:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut dfa::dense::DFA<std::vec::Vec<u32, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:201:9: 201:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:201:34: 201:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/minimize.rs:208:30: 208:57 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:208:13: 208:19 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<(util::primitives::StateID, util::search::Anchored, util::start::Start), std::alloc::Global>,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(1),
                            projs: [],
                        },
                        regex-automata/src/dfa/minimize.rs:208:21: 208:27 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:208:13: 208:19 (#0),
            scope: scope[23],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: dfa::dense::StartStateIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:208:30: 208:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::dense::DFA<std::vec::Vec<u32, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:208:30: 208:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:209:9: 215:10 (#3176),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::IntoIter<(util::primitives::StateID, util::search::Anchored, util::start::Start), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:209:53: 209:59 (#3177),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::Vec<(util::primitives::StateID, util::search::Anchored, util::start::Start), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:209:53: 209:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _258,
                                ),
                                regex-automata/src/dfa/minimize.rs:209:53: 209:59 (#3177),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:209:53: 209:59 (#3177),
                    },
                ),
            ),
        ),
        ty: std::vec::IntoIter<(util::primitives::StateID, util::search::Anchored, util::start::Start), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:209:53: 209:59 (#3177),
            scope: scope[26],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:209:53: 209:59 (#3177),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(util::primitives::StateID, util::search::Anchored, util::start::Start)>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:209:53: 209:59 (#3177),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::IntoIter<(util::primitives::StateID, util::search::Anchored, util::start::Start), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:209:53: 209:59 (#3177),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::IntoIter<(util::primitives::StateID, util::search::Anchored, util::start::Start), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:209:53: 209:59 (#3177),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:209:9: 215:10 (#3176),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:209:9: 215:10 (#3176),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _262,
                                ),
                                regex-automata/src/dfa/minimize.rs:209:53: 209:59 (#3177),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:209:13: 209:49 (#3178),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:209:14: 209:26 (#0),
            scope: scope[27],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _262,
                                ),
                                regex-automata/src/dfa/minimize.rs:209:53: 209:59 (#3177),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:209:13: 209:49 (#3178),
                    },
                ),
            ),
        ),
        ty: util::search::Anchored,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:209:28: 209:36 (#0),
            scope: scope[27],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _262,
                                ),
                                regex-automata/src/dfa/minimize.rs:209:53: 209:59 (#3177),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:209:13: 209:49 (#3178),
                    },
                ),
            ),
        ),
        ty: util::start::Start,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:209:38: 209:48 (#0),
            scope: scope[27],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:210:13: 214:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut dfa::dense::DFA<std::vec::Vec<u32, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:210:13: 210:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::search::Anchored,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:211:17: 211:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::start::Start,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:212:17: 212:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:213:17: 213:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Closure(DefId(0:1113 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#3}), ['{erased}, i8, Binder { value: extern "RustCall" fn((util::primitives::StateID,)) -> util::primitives::StateID, bound_vars: [] }, (&'{erased} std::vec::Vec<util::primitives::StateID, std::alloc::Global>, &'{erased} Closure(DefId(0:1111 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#1}), ['{erased}, i8, Binder { value: extern "RustCall" fn((util::primitives::StateID,)) -> usize, bound_vars: [] }, (&'{erased} usize,)]), &'{erased} std::vec::Vec<util::primitives::StateID, std::alloc::Global>)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:213:17: 213:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (util::primitives::StateID,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:213:17: 213:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:213:23: 213:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/minimize.rs:221:24: 221:39 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:221:13: 221:21 (#0),
                    },
                ),
            ),
        ),
        ty: std::collections::BTreeMap<util::primitives::StateID, std::vec::Vec<util::primitives::PatternID, std::alloc::Global>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:221:13: 221:21 (#0),
            scope: scope[26],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:222:9: 225:10 (#3179),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::collections::btree_map::IntoIter<util::primitives::StateID, std::vec::Vec<util::primitives::PatternID, std::alloc::Global>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:222:40: 222:62 (#3180),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::collections::BTreeMap<util::primitives::StateID, std::vec::Vec<util::primitives::PatternID, std::alloc::Global>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:222:40: 222:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::dense::DFA<std::vec::Vec<u32, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:222:40: 222:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _280,
                                ),
                                regex-automata/src/dfa/minimize.rs:222:40: 222:62 (#3180),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:222:40: 222:62 (#3180),
                    },
                ),
            ),
        ),
        ty: std::collections::btree_map::IntoIter<util::primitives::StateID, std::vec::Vec<util::primitives::PatternID, std::alloc::Global>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:222:40: 222:62 (#3180),
            scope: scope[29],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:222:40: 222:62 (#3180),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(util::primitives::StateID, std::vec::Vec<util::primitives::PatternID, std::alloc::Global>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:222:40: 222:62 (#3180),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::collections::btree_map::IntoIter<util::primitives::StateID, std::vec::Vec<util::primitives::PatternID, std::alloc::Global>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:222:40: 222:62 (#3180),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::collections::btree_map::IntoIter<util::primitives::StateID, std::vec::Vec<util::primitives::PatternID, std::alloc::Global>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:222:40: 222:62 (#3180),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:222:9: 225:10 (#3179),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:222:9: 225:10 (#3179),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _285,
                                ),
                                regex-automata/src/dfa/minimize.rs:222:40: 222:62 (#3180),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:222:13: 222:36 (#3181),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:222:14: 222:22 (#0),
            scope: scope[30],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _285,
                                ),
                                regex-automata/src/dfa/minimize.rs:222:40: 222:62 (#3180),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:222:13: 222:36 (#3181),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<util::primitives::PatternID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:222:24: 222:35 (#0),
            scope: scope[30],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/minimize.rs:223:26: 223:41 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:223:17: 223:23 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:223:17: 223:23 (#0),
            scope: scope[31],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Closure(DefId(0:1113 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#3}), ['{erased}, i8, Binder { value: extern "RustCall" fn((util::primitives::StateID,)) -> util::primitives::StateID, bound_vars: [] }, (&'{erased} std::vec::Vec<util::primitives::StateID, std::alloc::Global>, &'{erased} Closure(DefId(0:1111 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#1}), ['{erased}, i8, Binder { value: extern "RustCall" fn((util::primitives::StateID,)) -> usize, bound_vars: [] }, (&'{erased} usize,)]), &'{erased} std::vec::Vec<util::primitives::StateID, std::alloc::Global>)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:223:26: 223:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (util::primitives::StateID,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:223:26: 223:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:223:32: 223:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<std::vec::Vec<util::primitives::PatternID, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:224:13: 224:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::collections::BTreeMap<util::primitives::StateID, std::vec::Vec<util::primitives::PatternID, std::alloc::Global>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:224:13: 224:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:224:25: 224:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::Vec<util::primitives::PatternID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:224:33: 224:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:230:9: 230:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), dfa::dense::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:230:9: 230:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut dfa::dense::DFA<std::vec::Vec<u32, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:230:9: 230:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::collections::BTreeMap<util::primitives::StateID, std::vec::Vec<util::primitives::PatternID, std::alloc::Global>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:230:34: 230:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::collections::BTreeMap<util::primitives::StateID, std::vec::Vec<util::primitives::PatternID, std::alloc::Global>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:230:34: 230:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/minimize.rs:239:19: 239:45 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:239:13: 239:16 (#0),
                    },
                ),
            ),
        ),
        ty: dfa::special::Special,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:239:13: 239:16 (#0),
            scope: scope[29],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::special::Special,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:239:19: 239:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::special::Special,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:239:19: 239:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::dense::DFA<std::vec::Vec<u32, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:239:19: 239:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/minimize.rs:240:19: 240:41 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:240:13: 240:16 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut dfa::special::Special,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:240:13: 240:16 (#0),
            scope: scope[33],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut dfa::dense::DFA<std::vec::Vec<u32, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:240:19: 240:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:242:9: 254:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:242:12: 242:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::special::Special,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:242:12: 242:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:245:13: 253:14 (#3183),
                },
            ),
        ),
        ty: core::ops::RangeInclusive<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:245:22: 245:71 (#3184),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:245:13: 253:14 (#3183),
                },
            ),
        ),
        ty: core::ops::RangeInclusive<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:245:22: 245:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:245:13: 253:14 (#3183),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:245:22: 245:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:245:13: 253:14 (#3183),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:1111 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#1}), ['{erased}, i8, Binder { value: extern "RustCall" fn((util::primitives::StateID,)) -> usize, bound_vars: [] }, (&'{erased} usize,)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:245:22: 245:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:245:13: 253:14 (#3183),
                },
            ),
        ),
        ty: (util::primitives::StateID,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:245:22: 245:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:245:13: 253:14 (#3183),
                },
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:245:31: 245:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:245:13: 253:14 (#3183),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:245:48: 245:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:245:13: 253:14 (#3183),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:1111 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#1}), ['{erased}, i8, Binder { value: extern "RustCall" fn((util::primitives::StateID,)) -> usize, bound_vars: [] }, (&'{erased} usize,)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:245:48: 245:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:245:13: 253:14 (#3183),
                },
            ),
        ),
        ty: (util::primitives::StateID,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:245:48: 245:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:245:13: 253:14 (#3183),
                },
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:245:57: 245:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _314,
                                ),
                                regex-automata/src/dfa/minimize.rs:245:22: 245:71 (#3184),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:245:22: 245:71 (#3184),
                    },
                ),
            ),
        ),
        ty: core::ops::RangeInclusive<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:245:22: 245:71 (#3184),
            scope: scope[34],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:245:22: 245:71 (#3184),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:245:22: 245:71 (#3184),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::RangeInclusive<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:245:22: 245:71 (#3184),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::RangeInclusive<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:245:22: 245:71 (#3184),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:245:13: 253:14 (#3183),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:245:13: 253:14 (#3183),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _326,
                                ),
                                regex-automata/src/dfa/minimize.rs:245:22: 245:71 (#3184),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:245:17: 245:18 (#3185),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:245:17: 245:18 (#0),
            scope: scope[35],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/minimize.rs:246:30: 246:51 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:246:21: 246:27 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:246:21: 246:27 (#0),
            scope: scope[36],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Closure(DefId(0:1113 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#3}), ['{erased}, i8, Binder { value: extern "RustCall" fn((util::primitives::StateID,)) -> util::primitives::StateID, bound_vars: [] }, (&'{erased} std::vec::Vec<util::primitives::StateID, std::alloc::Global>, &'{erased} Closure(DefId(0:1111 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#1}), ['{erased}, i8, Binder { value: extern "RustCall" fn((util::primitives::StateID,)) -> usize, bound_vars: [] }, (&'{erased} usize,)]), &'{erased} std::vec::Vec<util::primitives::StateID, std::alloc::Global>)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:246:30: 246:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (util::primitives::StateID,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:246:30: 246:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:246:36: 246:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Closure(DefId(0:1110 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#0}), ['{erased}, i8, Binder { value: extern "RustCall" fn((usize,)) -> util::primitives::StateID, bound_vars: [] }, (&'{erased} usize,)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:246:36: 246:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:246:36: 246:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:246:48: 246:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:247:17: 249:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:247:20: 247:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:247:20: 247:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:247:29: 247:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:248:37: 248:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:250:17: 252:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:250:20: 250:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:250:17: 252:18 (#0),
                },
            ),
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:250:20: 250:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:250:17: 252:18 (#0),
                },
            ),
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:250:29: 250:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:251:37: 251:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:256:9: 274:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:256:12: 256:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dfa::special::Special,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:256:12: 256:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:259:13: 270:14 (#3189),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeInclusive<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:259:22: 259:71 (#3190),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeInclusive<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:259:22: 259:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:259:22: 259:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Closure(DefId(0:1111 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#1}), ['{erased}, i8, Binder { value: extern "RustCall" fn((util::primitives::StateID,)) -> usize, bound_vars: [] }, (&'{erased} usize,)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:259:22: 259:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (util::primitives::StateID,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:259:22: 259:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:259:31: 259:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:259:48: 259:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Closure(DefId(0:1111 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#1}), ['{erased}, i8, Binder { value: extern "RustCall" fn((util::primitives::StateID,)) -> usize, bound_vars: [] }, (&'{erased} usize,)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:259:48: 259:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (util::primitives::StateID,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:259:48: 259:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:259:57: 259:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _352,
                                ),
                                regex-automata/src/dfa/minimize.rs:259:22: 259:71 (#3190),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:259:22: 259:71 (#3190),
                    },
                ),
            ),
        ),
        ty: core::ops::RangeInclusive<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:259:22: 259:71 (#3190),
            scope: scope[34],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:259:22: 259:71 (#3190),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:259:22: 259:71 (#3190),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::RangeInclusive<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:259:22: 259:71 (#3190),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::RangeInclusive<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:259:22: 259:71 (#3190),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:259:13: 270:14 (#3189),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:259:13: 270:14 (#3189),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _364,
                                ),
                                regex-automata/src/dfa/minimize.rs:259:22: 259:71 (#3190),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:259:17: 259:18 (#3191),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:259:17: 259:18 (#0),
            scope: scope[38],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/minimize.rs:260:30: 260:51 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:260:21: 260:27 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:260:21: 260:27 (#0),
            scope: scope[39],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Closure(DefId(0:1113 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#3}), ['{erased}, i8, Binder { value: extern "RustCall" fn((util::primitives::StateID,)) -> util::primitives::StateID, bound_vars: [] }, (&'{erased} std::vec::Vec<util::primitives::StateID, std::alloc::Global>, &'{erased} Closure(DefId(0:1111 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#1}), ['{erased}, i8, Binder { value: extern "RustCall" fn((util::primitives::StateID,)) -> usize, bound_vars: [] }, (&'{erased} usize,)]), &'{erased} std::vec::Vec<util::primitives::StateID, std::alloc::Global>)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:260:30: 260:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (util::primitives::StateID,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:260:30: 260:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:260:36: 260:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Closure(DefId(0:1110 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#0}), ['{erased}, i8, Binder { value: extern "RustCall" fn((usize,)) -> util::primitives::StateID, bound_vars: [] }, (&'{erased} usize,)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:260:36: 260:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:260:36: 260:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:260:48: 260:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:261:17: 263:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:261:20: 261:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:261:20: 261:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:261:30: 261:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:19 ~ regex_automata[00dd]::dfa::DEAD),
            },
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:261:30: 261:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:261:35: 263:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:264:17: 266:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:264:20: 264:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:264:20: 264:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:264:29: 264:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:265:37: 265:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:267:17: 269:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:267:20: 267:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:267:17: 269:18 (#0),
                },
            ),
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:267:20: 267:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:267:17: 269:18 (#0),
                },
            ),
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:267:29: 267:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:268:37: 268:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:271:13: 273:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:271:16: 271:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:271:13: 273:14 (#0),
                },
            ),
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:271:16: 271:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:271:13: 273:14 (#0),
                },
            ),
        ),
        ty: &'{erased} util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:271:33: 271:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:19 ~ regex_automata[00dd]::dfa::DEAD),
            },
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:271:33: 271:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:275:23: 275:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Closure(DefId(0:1113 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#3}), ['{erased}, i8, Binder { value: extern "RustCall" fn((util::primitives::StateID,)) -> util::primitives::StateID, bound_vars: [] }, (&'{erased} std::vec::Vec<util::primitives::StateID, std::alloc::Global>, &'{erased} Closure(DefId(0:1111 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::run::{closure#1}), ['{erased}, i8, Binder { value: extern "RustCall" fn((util::primitives::StateID,)) -> usize, bound_vars: [] }, (&'{erased} usize,)]), &'{erased} std::vec::Vec<util::primitives::StateID, std::alloc::Global>)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:275:23: 275:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (util::primitives::StateID,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:275:23: 275:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:275:29: 275:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:276:9: 276:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut dfa::special::Special,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:276:9: 276:12 (#0),
            scope: scope[0],
        },
    },
]