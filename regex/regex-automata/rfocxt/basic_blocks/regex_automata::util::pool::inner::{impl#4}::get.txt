[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = const util::pool::inner::THREAD_ID,
            _3 = &_4,
            StorageLive(_5),
            _5 = {closure@regex-automata/src/util/pool.rs:524:41: 524:45},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:524:26: 524:50 (#0),
                    scope: scope[0],
                },
                kind: _2 = std::thread::LocalKey::<usize>::with::<{closure@regex-automata/src/util/pool.rs:524:41: 524:45}, usize>(move _3, move _5) -> [return: bb1, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageDead(_4),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &((*_1).2: core::sync::atomic::AtomicUsize),
            StorageLive(_8),
            _8 = core::sync::atomic::Ordering::Acquire,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:525:25: 525:59 (#0),
                    scope: scope[1],
                },
                kind: _6 = core::sync::atomic::AtomicUsize::load(move _7, move _8) -> [return: bb2, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            FakeRead(ForLet(None), _6),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = _2,
            StorageLive(_12),
            _12 = _6,
            _10 = Eq(move _11, move _12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:526:16: 526:31 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _10) -> [0: bb6, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &((*_1).2: core::sync::atomic::AtomicUsize),
            StorageLive(_16),
            StorageLive(_17),
            _17 = const {alloc49: &usize},
            _16 = (*_17),
            StorageLive(_18),
            _18 = core::sync::atomic::Ordering::Release,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:530:17: 530:69 (#0),
                    scope: scope[2],
                },
                kind: _14 = core::sync::atomic::AtomicUsize::store(move _15, move _16, move _18) -> [return: bb4, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_16),
            StorageDead(_15),
            StorageDead(_17),
            StorageDead(_14),
            StorageLive(_19),
            _19 = &(*_1),
            StorageLive(_20),
            _20 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:531:24: 531:48 (#0),
                    scope: scope[2],
                },
                kind: _0 = util::pool::inner::Pool::<T, F>::guard_owned(move _19, move _20) -> [return: bb5, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_6),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:534:10: 534:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            _9 = const (),
            StorageDead(_10),
            StorageDead(_9),
            StorageLive(_21),
            _21 = &(*_1),
            StorageLive(_22),
            _22 = _2,
            StorageLive(_23),
            _23 = _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:533:13: 533:41 (#0),
                    scope: scope[2],
                },
                kind: _0 = util::pool::inner::Pool::<T, F>::get_slow(move _21, move _22, move _23) -> [return: bb7, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_22),
            StorageDead(_21),
            StorageDead(_6),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:534:10: 534:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:534:10: 534:10 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:510:9: 534:10 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::pool::inner::PoolGuard<'{erased}, T/#0, F/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:510:37: 510:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} util::pool::inner::Pool<T/#0, F/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:510:27: 510:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/pool.rs:524:26: 524:50 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/pool.rs:524:17: 524:23 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:524:17: 524:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::thread::LocalKey<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:524:26: 524:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:6401 ~ regex_automata[00dd]::util::pool::inner::THREAD_ID),
            },
        ),
        ty: std::thread::LocalKey<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:524:26: 524:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:3655 ~ regex_automata[00dd]::util::pool::inner::{impl#4}::get::{closure#0}),
            [
                T/#0,
                F/#1,
                i32,
                Binder { value: extern "RustCall" fn((&'^0 usize,)) -> usize, bound_vars: [Region(BrAnon)] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:524:41: 524:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/pool.rs:525:25: 525:59 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/pool.rs:525:17: 525:22 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:525:17: 525:22 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::sync::atomic::AtomicUsize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:525:25: 525:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::sync::atomic::Ordering,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:525:41: 525:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:526:13: 532:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:526:16: 526:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:526:16: 526:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:526:26: 526:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:526:32: 532:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:530:17: 530:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::sync::atomic::AtomicUsize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:530:17: 530:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:530:34: 530:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            StaticRef {
                def_id: DefId(0:3628 ~ regex_automata[00dd]::util::pool::inner::THREAD_ID_INUSE),
                is_thread_local: false,
            },
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:530:34: 530:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::sync::atomic::Ordering,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:530:51: 530:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::pool::inner::Pool<T/#0, F/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:531:24: 531:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:531:41: 531:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/pool.rs:533:13: 533:41 (#0),
                },
            ),
        ),
        ty: &'{erased} util::pool::inner::Pool<T/#0, F/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:533:13: 533:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/pool.rs:533:13: 533:41 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:533:27: 533:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/pool.rs:533:13: 533:41 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:533:35: 533:40 (#0),
            scope: scope[0],
        },
    },
]