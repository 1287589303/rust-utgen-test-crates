[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1411:9: 1411:30 (#0),
                    scope: scope[0],
                },
                kind: _5 = nfa::thompson::pikevm::Cache::setup_search(move _6, const 0_usize) -> [return: bb1, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1412:12: 1412:27 (#0),
                    scope: scope[0],
                },
                kind: _8 = util::search::Input::<'_>::is_done(move _9) -> [return: bb2, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1412:12: 1412:27 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _8) -> [0: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            _0 = const (),
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb59,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            _7 = const (),
            StorageDead(_8),
            StorageDead(_7),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &(*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1416:13: 1416:29 (#0),
                    scope: scope[0],
                },
                kind: _15 = util::search::Input::<'_>::haystack(move _16) -> [return: bb5, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _14 = &(*_15),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1416:13: 1416:35 (#0),
                    scope: scope[0],
                },
                kind: _13 = core::slice::<impl [u8]>::len(move _14) -> [return: bb6, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            _12 = Lt(move _13, const core::usize::MAX),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1416:13: 1416:54 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _12) -> [0: bb8, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_15),
            _11 = const (),
            StorageDead(_12),
            StorageDead(_11),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            _26 = &((*_1).0: nfa::thompson::pikevm::Config),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1422:13: 1422:41 (#0),
                    scope: scope[0],
                },
                kind: _25 = nfa::thompson::pikevm::Config::get_match_kind(move _26) -> [return: bb10, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_15),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            _22 = [const "byte slice lengths must be less than usize MAX"],
            _21 = &_22,
            _20 = &(*_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38: 108:72 (#1415),
                    scope: scope[0],
                },
                kind: _19 = core::fmt::Arguments::<'_>::new_const::<1>(move _20) -> [return: bb9, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9: 108:73 (#1414),
                    scope: scope[0],
                },
                kind: _18 = core::panicking::panic_fmt(move _19) -> bb60,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _24 = &_25,
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1422:13: 1422:69 (#0),
                    scope: scope[0],
                },
                kind: _23 = util::search::MatchKind::continue_past_first_match(move _24) -> [return: bb11, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            FakeRead(ForLet(None), _23),
            StorageDead(_25),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            _31 = &(*_1),
            StorageLive(_32),
            _32 = &(*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1423:42: 1423:66 (#0),
                    scope: scope[1],
                },
                kind: _30 = nfa::thompson::pikevm::PikeVM::start_config(move _31, move _32) -> [return: bb12, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            StorageDead(_31),
            PlaceMention(_30),
            _33 = discriminant(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1423:36: 1423:66 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _33) -> [0: bb14, 1: bb15, otherwise: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1423:42: 1423:66 (#0),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1424:13: 1424:17 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb16, imaginary: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_35),
            _35 = ((_30 as Some).0: (bool, util::primitives::StateID)),
            _29 = _35,
            StorageDead(_35),
            PlaceMention(_29),
            StorageLive(_27),
            _27 = (_29.0: bool),
            StorageLive(_28),
            _28 = (_29.1: util::primitives::StateID),
            StorageDead(_30),
            StorageDead(_29),
            PlaceMention(_2),
            StorageLive(_36),
            _36 = &mut ((*_2).0: std::vec::Vec<nfa::thompson::pikevm::FollowEpsilon>),
            StorageLive(_37),
            _37 = &mut ((*_2).1: nfa::thompson::pikevm::ActiveStates),
            StorageLive(_38),
            _38 = &mut ((*_2).2: nfa::thompson::pikevm::ActiveStates),
            StorageLive(_39),
            StorageLive(_40),
            StorageLive(_41),
            StorageLive(_42),
            StorageLive(_43),
            _43 = &(*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1429:19: 1429:32 (#0),
                    scope: scope[4],
                },
                kind: _42 = util::search::Input::<'_>::start(move _43) -> [return: bb17, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
            StorageDead(_30),
            StorageDead(_29),
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb59,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            StorageLive(_44),
            StorageLive(_45),
            _45 = &(*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1429:35: 1429:46 (#0),
                    scope: scope[4],
                },
                kind: _44 = util::search::Input::<'_>::end(move _45) -> [return: bb18, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1429:19: 1429:46 (#0),
                    scope: scope[4],
                },
                kind: _41 = core::ops::RangeInclusive::<usize>::new(move _42, move _44) -> [return: bb19, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            StorageDead(_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1429:19: 1429:46 (#4489),
                    scope: scope[4],
                },
                kind: _40 = <core::ops::RangeInclusive<usize> as core::iter::IntoIterator>::into_iter(move _41) -> [return: bb20, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            PlaceMention(_40),
            StorageLive(_46),
            _46 = move _40,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1429:9: 1453:10 (#4488),
                    scope: scope[5],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1429:9: 1453:10 (#4488),
                    scope: scope[5],
                },
                kind: falseUnwind -> [real: bb22, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_48),
            StorageLive(_49),
            StorageLive(_50),
            StorageLive(_51),
            _51 = &mut _46,
            _50 = &mut (*_51),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1429:19: 1429:46 (#4489),
                    scope: scope[5],
                },
                kind: _49 = <core::ops::RangeInclusive<usize> as core::iter::Iterator>::next(move _50) -> [return: bb23, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            PlaceMention(_49),
            _52 = discriminant(_49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1429:19: 1429:46 (#4489),
                    scope: scope[5],
                },
                kind: switchInt(move _52) -> [0: bb25, 1: bb26, otherwise: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1429:19: 1429:46 (#4489),
                    scope: scope[5],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1429:9: 1453:10 (#4488),
                    scope: scope[5],
                },
                kind: falseEdge -> [real: bb27, imaginary: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_54),
            _54 = ((_49 as Some).0: usize),
            StorageLive(_55),
            StorageLive(_56),
            StorageLive(_57),
            _57 = &(*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1430:32: 1430:49 (#0),
                    scope: scope[6],
                },
                kind: _56 = util::search::PatternSet::is_empty(move _57) -> [return: bb28, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _39 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1429:9: 1453:10 (#4488),
                    scope: scope[5],
                },
                kind: goto -> bb58,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_57),
            _55 = Not(move _56),
            StorageDead(_56),
            FakeRead(ForLet(None), _55),
            StorageLive(_58),
            StorageLive(_59),
            StorageLive(_60),
            _60 = &((*_37).0: util::sparse_set::SparseSet),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1431:16: 1431:35 (#0),
                    scope: scope[7],
                },
                kind: _59 = util::sparse_set::SparseSet::is_empty(move _60) -> [return: bb29, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1431:16: 1431:35 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _59) -> [0: bb39, otherwise: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
            StorageLive(_61),
            StorageLive(_62),
            _62 = _55,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1432:20: 1432:31 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _62) -> [0: bb33, otherwise: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_63),
            _63 = _23,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1432:36: 1432:46 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _63) -> [0: bb32, otherwise: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _39 = const (),
            StorageDead(_63),
            StorageDead(_62),
            StorageDead(_61),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb56,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _61 = const (),
            StorageDead(_63),
            StorageDead(_62),
            StorageDead(_61),
            StorageLive(_65),
            _65 = _27,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1435:20: 1435:28 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _65) -> [0: bb38, otherwise: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_66),
            StorageLive(_67),
            _67 = _54,
            StorageLive(_68),
            StorageLive(_69),
            _69 = &(*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1435:37: 1435:50 (#0),
                    scope: scope[7],
                },
                kind: _68 = util::search::Input::<'_>::start(move _69) -> [return: bb35, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_69),
            _66 = Gt(move _67, move _68),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1435:32: 1435:50 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _66) -> [0: bb37, otherwise: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_68),
            StorageDead(_67),
            _39 = const (),
            StorageDead(_66),
            StorageDead(_65),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb56,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_68),
            StorageDead(_67),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb38,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _58 = const (),
            StorageDead(_66),
            StorageDead(_65),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1431:13: 1438:14 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb40,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
            _58 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1431:13: 1438:14 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb40,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
            StorageDead(_58),
            StorageLive(_71),
            StorageLive(_72),
            _72 = _55,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1439:17: 1439:28 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _72) -> [0: bb42, otherwise: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_73),
            _73 = _23,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1439:32: 1439:42 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _73) -> [0: bb44, otherwise: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_74),
            StorageLive(_75),
            _75 = [],
            _74 = &mut _75,
            FakeRead(ForLet(None), _74),
            StorageLive(_76),
            StorageLive(_77),
            _77 = &(*_1),
            StorageLive(_78),
            _78 = &mut (*_36),
            StorageLive(_79),
            StorageLive(_80),
            _80 = &mut (*_74),
            _79 = move _80 as &mut [core::option::Option<util::primitives::NonMaxUsize>] (PointerCoercion(Unsize)),
            StorageDead(_80),
            StorageLive(_81),
            _81 = &mut (*_37),
            StorageLive(_82),
            _82 = &(*_3),
            StorageLive(_83),
            _83 = _54,
            StorageLive(_84),
            _84 = _28,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1441:17: 1441:78 (#0),
                    scope: scope[8],
                },
                kind: _76 = nfa::thompson::pikevm::PikeVM::epsilon_closure(move _77, move _78, move _79, move _81, move _82, move _83, move _84) -> [return: bb43, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_84),
            StorageDead(_83),
            StorageDead(_82),
            StorageDead(_81),
            StorageDead(_79),
            StorageDead(_78),
            StorageDead(_77),
            StorageDead(_76),
            _71 = const (),
            StorageDead(_75),
            StorageDead(_74),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1439:13: 1442:14 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb45,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _71 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1439:13: 1442:14 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb45,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_73),
            StorageDead(_72),
            StorageDead(_71),
            StorageLive(_85),
            StorageLive(_86),
            _86 = &(*_1),
            StorageLive(_87),
            _87 = &mut (*_36),
            StorageLive(_88),
            _88 = &mut (*_37),
            StorageLive(_89),
            _89 = &mut (*_38),
            StorageLive(_90),
            _90 = &(*_3),
            StorageLive(_91),
            _91 = _54,
            StorageLive(_92),
            _92 = &mut (*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1443:13: 1443:73 (#0),
                    scope: scope[7],
                },
                kind: _85 = nfa::thompson::pikevm::PikeVM::nexts_overlapping(move _86, move _87, move _88, move _89, move _90, move _91, move _92) -> [return: bb46, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_92),
            StorageDead(_91),
            StorageDead(_90),
            StorageDead(_89),
            StorageDead(_88),
            StorageDead(_87),
            StorageDead(_86),
            StorageDead(_85),
            StorageLive(_93),
            StorageLive(_94),
            StorageLive(_95),
            _95 = &(*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1448:16: 1448:32 (#0),
                    scope: scope[7],
                },
                kind: _94 = util::search::PatternSet::is_full(move _95) -> [return: bb47, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1448:16: 1448:32 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _94) -> [0: bb49, otherwise: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_95),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1448:57: 1450:14 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb52,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_95),
            StorageLive(_96),
            StorageLive(_97),
            _97 = &(*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1448:36: 1448:56 (#0),
                    scope: scope[7],
                },
                kind: _96 = util::search::Input::<'_>::get_earliest(move _97) -> [return: bb50, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1448:36: 1448:56 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _96) -> [0: bb53, otherwise: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_97),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1448:57: 1450:14 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb52,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _39 = const (),
            StorageDead(_96),
            StorageDead(_94),
            StorageDead(_93),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb57,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_97),
            _93 = const (),
            StorageDead(_96),
            StorageDead(_94),
            StorageDead(_93),
            StorageLive(_99),
            StorageLive(_100),
            _100 = &mut (*_37),
            StorageLive(_101),
            _101 = &mut (*_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1451:13: 1451:40 (#0),
                    scope: scope[7],
                },
                kind: _99 = core::mem::swap::<nfa::thompson::pikevm::ActiveStates>(move _100, move _101) -> [return: bb54, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_101),
            StorageDead(_100),
            StorageDead(_99),
            StorageLive(_102),
            StorageLive(_103),
            _103 = &mut ((*_38).0: util::sparse_set::SparseSet),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1452:13: 1452:29 (#0),
                    scope: scope[7],
                },
                kind: _102 = util::sparse_set::SparseSet::clear(move _103) -> [return: bb55, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_103),
            StorageDead(_102),
            _48 = const (),
            StorageDead(_55),
            StorageDead(_54),
            StorageDead(_51),
            StorageDead(_49),
            StorageDead(_48),
            _47 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1429:9: 1453:10 (#4488),
                    scope: scope[5],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
            StorageDead(_58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb57,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_55),
            StorageDead(_54),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb58,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
            StorageDead(_49),
            StorageDead(_48),
            StorageDead(_46),
            StorageDead(_40),
            StorageDead(_39),
            _0 = const (),
            StorageDead(_38),
            StorageDead(_37),
            StorageDead(_36),
            StorageDead(_28),
            StorageDead(_27),
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1455:6: 1455:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb59,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1455:6: 1455:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1392:5: 1455:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1397:6: 1397:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} nfa::thompson::pikevm::PikeVM,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1393:9: 1393:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/nfa/thompson/pikevm.rs:1394:16: 1394:26 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/pikevm.rs:1394:9: 1394:14 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/pikevm.rs:1394:9: 1394:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut nfa::thompson::pikevm::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1394:9: 1394:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/nfa/thompson/pikevm.rs:1395:16: 1395:26 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/pikevm.rs:1395:9: 1395:14 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/pikevm.rs:1395:9: 1395:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1395:9: 1395:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/nfa/thompson/pikevm.rs:1396:17: 1396:32 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/pikevm.rs:1396:9: 1396:15 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/pikevm.rs:1396:9: 1396:15 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut util::search::PatternSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1396:9: 1396:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1411:9: 1411:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut nfa::thompson::pikevm::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1411:9: 1411:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1412:9: 1414:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1412:12: 1412:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1412:12: 1412:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1412:28: 1414:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1415:9: 1418:10 (#1412),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1416:13: 1416:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1416:13: 1416:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1416:13: 1416:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1416:13: 1416:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1416:13: 1416:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:105:21: 109:6 (#1414),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:105:21: 109:6 (#1414),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9: 108:73 (#1414),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::fmt::Arguments<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38: 108:72 (#1415),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1417:13: 1417:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1417:13: 1417:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [&'{erased} str; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1417:13: 1417:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/pikevm.rs:1422:13: 1422:69 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/pikevm.rs:1421:13: 1421:23 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1421:13: 1421:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::MatchKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1422:13: 1422:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: util::search::MatchKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1422:13: 1422:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::pikevm::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1422:13: 1422:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _29,
                                ),
                                regex-automata/src/nfa/thompson/pikevm.rs:1423:36: 1426:10 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/pikevm.rs:1423:13: 1423:33 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1423:14: 1423:22 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _29,
                                ),
                                regex-automata/src/nfa/thompson/pikevm.rs:1423:36: 1426:10 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/pikevm.rs:1423:13: 1423:33 (#0),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1423:24: 1423:32 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (bool, util::primitives::StateID),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1423:36: 1426:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(bool, util::primitives::StateID)>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1423:42: 1423:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::pikevm::PikeVM,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1423:42: 1423:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1423:60: 1423:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1424:13: 1424:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1424:21: 1424:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _30,
                                ),
                                regex-automata/src/nfa/thompson/pikevm.rs:1423:42: 1423:66 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/pikevm.rs:1425:13: 1425:25 (#0),
                    },
                ),
            ),
        ),
        ty: (bool, util::primitives::StateID),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1425:18: 1425:24 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                regex-automata/src/nfa/thompson/pikevm.rs:1428:67: 1428:72 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/pikevm.rs:1428:13: 1428:64 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<nfa::thompson::pikevm::FollowEpsilon, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1428:21: 1428:34 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                regex-automata/src/nfa/thompson/pikevm.rs:1428:67: 1428:72 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/pikevm.rs:1428:13: 1428:64 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut nfa::thompson::pikevm::ActiveStates,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1428:36: 1428:48 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                regex-automata/src/nfa/thompson/pikevm.rs:1428:67: 1428:72 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/pikevm.rs:1428:13: 1428:64 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut nfa::thompson::pikevm::ActiveStates,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1428:50: 1428:62 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1429:9: 1453:10 (#4488),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeInclusive<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1429:19: 1429:46 (#4489),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeInclusive<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1429:19: 1429:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1429:19: 1429:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1429:19: 1429:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1429:35: 1429:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1429:35: 1429:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _40,
                                ),
                                regex-automata/src/nfa/thompson/pikevm.rs:1429:19: 1429:46 (#4489),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/pikevm.rs:1429:19: 1429:46 (#4489),
                    },
                ),
            ),
        ),
        ty: core::ops::RangeInclusive<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1429:19: 1429:46 (#4489),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1392:5: 1455:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1429:19: 1429:46 (#4489),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1429:19: 1429:46 (#4489),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::RangeInclusive<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1429:19: 1429:46 (#4489),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::RangeInclusive<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1429:19: 1429:46 (#4489),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1429:9: 1453:10 (#4488),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1429:9: 1453:10 (#4488),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _49,
                                ),
                                regex-automata/src/nfa/thompson/pikevm.rs:1429:19: 1429:46 (#4489),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/pikevm.rs:1429:13: 1429:15 (#4490),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1429:13: 1429:15 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/pikevm.rs:1430:31: 1430:49 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/pikevm.rs:1430:17: 1430:28 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1430:17: 1430:28 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1430:32: 1430:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::PatternSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1430:32: 1430:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1431:13: 1438:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1431:16: 1431:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::sparse_set::SparseSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1431:16: 1431:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1432:17: 1434:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1432:20: 1432:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1432:36: 1432:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1432:47: 1434:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1435:17: 1437:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1435:20: 1435:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1435:17: 1437:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1435:32: 1435:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1435:17: 1437:18 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1435:32: 1435:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1435:17: 1437:18 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1435:37: 1435:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1435:17: 1437:18 (#0),
                },
            ),
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1435:37: 1435:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/nfa/thompson/pikevm.rs:1435:17: 1437:18 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1435:51: 1437:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1439:13: 1442:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1439:17: 1439:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1439:32: 1439:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/nfa/thompson/pikevm.rs:1440:29: 1440:36 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/nfa/thompson/pikevm.rs:1440:21: 1440:26 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [core::option::Option<util::primitives::NonMaxUsize>; 0_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1440:21: 1440:26 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: [core::option::Option<util::primitives::NonMaxUsize>; 0_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1440:34: 1440:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1441:17: 1441:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::pikevm::PikeVM,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1441:17: 1441:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<nfa::thompson::pikevm::FollowEpsilon, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1441:38: 1441:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [core::option::Option<util::primitives::NonMaxUsize>],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1441:45: 1441:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [core::option::Option<util::primitives::NonMaxUsize>; 0_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1441:45: 1441:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut nfa::thompson::pikevm::ActiveStates,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1441:52: 1441:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1441:58: 1441:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1441:65: 1441:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1441:69: 1441:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1443:13: 1443:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::thompson::pikevm::PikeVM,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1443:13: 1443:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<nfa::thompson::pikevm::FollowEpsilon, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1443:36: 1443:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut nfa::thompson::pikevm::ActiveStates,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1443:43: 1443:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut nfa::thompson::pikevm::ActiveStates,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1443:49: 1443:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1443:55: 1443:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1443:62: 1443:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::search::PatternSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1443:66: 1443:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1448:13: 1450:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1448:16: 1448:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::PatternSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1448:16: 1448:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1448:36: 1448:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1448:36: 1448:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1448:57: 1450:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1451:13: 1451:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut nfa::thompson::pikevm::ActiveStates,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1451:29: 1451:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut nfa::thompson::pikevm::ActiveStates,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1451:35: 1451:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1452:13: 1452:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut util::sparse_set::SparseSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/nfa/thompson/pikevm.rs:1452:13: 1452:21 (#0),
            scope: scope[0],
        },
    },
]