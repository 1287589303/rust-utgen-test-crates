[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &((*_1).3: std::vec::Vec<dfa::minimize::StateSet>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:280:9: 280:28 (#0),
                    scope: scope[0],
                },
                kind: _6 = <std::vec::Vec<dfa::minimize::StateSet> as core::ops::Deref>::deref(move _7) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = &(*_6),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:280:9: 280:28 (#0),
                    scope: scope[0],
                },
                kind: _4 = core::slice::<impl [dfa::minimize::StateSet]>::iter(move _5) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &mut _4,
            StorageDead(_5),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &_2,
            _8 = {closure@regex-automata/src/dfa/minimize.rs:280:38: 280:41} { set: move _9 },
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:280:9: 280:51 (#0),
                    scope: scope[0],
                },
                kind: _0 = <core::slice::Iter<'_, dfa::minimize::StateSet> as core::iter::Iterator>::position::<{closure@regex-automata/src/dfa/minimize.rs:280:38: 280:41}>(move _3, move _8) -> [return: bb3, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_3),
            StorageDead(_6),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:281:6: 281:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:279:5: 281:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:279:47: 279:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} dfa::minimize::Minimizer<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:279:21: 279:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/dfa/minimize.rs:279:33: 279:42 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/minimize.rs:279:28: 279:31 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:279:28: 279:31 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:279:28: 279:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/minimize.rs:280:9: 280:51 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, dfa::minimize::StateSet>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:280:9: 280:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/minimize.rs:280:9: 280:51 (#0),
                },
            ),
        ),
        ty: core::slice::Iter<'{erased}, dfa::minimize::StateSet>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:280:9: 280:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/minimize.rs:280:9: 280:51 (#0),
                },
            ),
        ),
        ty: &'{erased} [dfa::minimize::StateSet],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:280:9: 280:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/minimize.rs:280:9: 280:51 (#0),
                },
            ),
        ),
        ty: &'{erased} [dfa::minimize::StateSet],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:280:9: 280:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/minimize.rs:280:9: 280:51 (#0),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<dfa::minimize::StateSet, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:280:9: 280:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/minimize.rs:280:9: 280:51 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1115 ~ regex_automata[00dd]::dfa::minimize::{impl#1}::find_waiting::{closure#0}),
            [
                '{erased},
                i16,
                Binder { value: extern "RustCall" fn((&'{erased} dfa::minimize::StateSet,)) -> bool, bound_vars: [] },
                (&'{erased} &'{erased} dfa::minimize::StateSet,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:280:38: 280:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/dfa/minimize.rs:280:9: 280:51 (#0),
                },
            ),
        ),
        ty: &'{erased} &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:280:38: 280:50 (#0),
            scope: scope[0],
        },
    },
]