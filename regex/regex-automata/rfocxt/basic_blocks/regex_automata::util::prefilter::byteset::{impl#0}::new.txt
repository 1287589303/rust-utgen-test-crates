[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = [const false; 256],
            FakeRead(ForLet(None), _3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/byteset.rs:21:27: 21:41 (#0),
                    scope: scope[1],
                },
                kind: _6 = core::slice::<impl [B]>::iter(move _7) -> [return: bb1, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/byteset.rs:21:27: 21:41 (#4903),
                    scope: scope[1],
                },
                kind: _5 = <core::slice::Iter<'_, B> as core::iter::IntoIterator>::into_iter(move _6) -> [return: bb2, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            PlaceMention(_5),
            StorageLive(_8),
            _8 = move _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/byteset.rs:21:13: 27:14 (#4902),
                    scope: scope[2],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/byteset.rs:21:13: 27:14 (#4902),
                    scope: scope[2],
                },
                kind: falseUnwind -> [real: bb4, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &mut _8,
            _12 = &mut (*_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/byteset.rs:21:27: 21:41 (#4903),
                    scope: scope[2],
                },
                kind: _11 = <core::slice::Iter<'_, B> as core::iter::Iterator>::next(move _12) -> [return: bb5, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            PlaceMention(_11),
            _14 = discriminant(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/byteset.rs:21:27: 21:41 (#4903),
                    scope: scope[2],
                },
                kind: switchInt(move _14) -> [0: bb7, 1: bb8, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/byteset.rs:21:27: 21:41 (#4903),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/byteset.rs:21:13: 27:14 (#4902),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb9, imaginary: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = ((_11 as Some).0: &B),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &(*_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/byteset.rs:22:30: 22:45 (#0),
                    scope: scope[3],
                },
                kind: _17 = <B as core::convert::AsRef<[u8]>>::as_ref(move _18) -> [return: bb10, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = const (),
            StorageDead(_13),
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_31),
            StorageLive(_32),
            _32 = _3,
            _31 = util::prefilter::byteset::ByteSet(move _32),
            StorageDead(_32),
            _0 = core::option::Option::<util::prefilter::byteset::ByteSet>::Some(move _31),
            StorageDead(_31),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/byteset.rs:30:6: 30:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            FakeRead(ForLet(None), _17),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            _22 = &(*_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/byteset.rs:23:20: 23:32 (#0),
                    scope: scope[4],
                },
                kind: _21 = core::slice::<impl [u8]>::len(move _22) -> [return: bb11, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            _20 = Ne(move _21, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/byteset.rs:23:20: 23:37 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _20) -> [0: bb13, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            _0 = core::option::Option::<util::prefilter::byteset::ByteSet>::None,
            StorageDead(_20),
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_13),
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_5),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/byteset.rs:30:6: 30:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            _19 = const (),
            StorageDead(_20),
            StorageDead(_19),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            _26 = const 0_usize,
            _27 = Len((*_17)),
            _28 = Lt(_26, _27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/byteset.rs:26:33: 26:42 (#0),
                    scope: scope[4],
                },
                kind: assert(move _28, "index out of bounds: the length is {} but the index is {}", move _27, _26) -> [success: bb14, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _25 = (*_17)[_26],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/byteset.rs:26:21: 26:43 (#0),
                    scope: scope[4],
                },
                kind: _24 = <usize as core::convert::From<u8>>::from(move _25) -> [return: bb15, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            _29 = Len(_3),
            _30 = Lt(_24, _29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/byteset.rs:26:17: 26:44 (#0),
                    scope: scope[4],
                },
                kind: assert(move _30, "index out of bounds: the length is {} but the index is {}", move _29, _24) -> [success: bb16, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3[_24] = const true,
            StorageDead(_26),
            StorageDead(_24),
            _10 = const (),
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_13),
            StorageDead(_11),
            StorageDead(_10),
            _9 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/byteset.rs:21:13: 27:14 (#4902),
                    scope: scope[2],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/byteset.rs:30:6: 30:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/prefilter/byteset.rs:10:5: 30:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<util::prefilter::byteset::ByteSet>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/byteset.rs:13:10: 13:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/prefilter/byteset.rs:11:16: 11:25 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/prefilter/byteset.rs:11:9: 11:14 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/prefilter/byteset.rs:11:9: 11:14 (#0),
                    },
                ),
            ),
        ),
        ty: util::search::MatchKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/byteset.rs:11:9: 11:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/prefilter/byteset.rs:12:18: 12:22 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/prefilter/byteset.rs:12:9: 12:16 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/prefilter/byteset.rs:12:9: 12:16 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [B/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/byteset.rs:12:9: 12:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/prefilter/byteset.rs:20:27: 20:39 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/prefilter/byteset.rs:20:17: 20:24 (#0),
                    },
                ),
            ),
        ),
        ty: [bool; 256_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/byteset.rs:20:17: 20:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/byteset.rs:21:13: 27:14 (#4902),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::Iter<'{erased}, B/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/byteset.rs:21:27: 21:41 (#4903),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::Iter<'{erased}, B/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/byteset.rs:21:27: 21:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [B/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/byteset.rs:21:27: 21:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                regex-automata/src/util/prefilter/byteset.rs:21:27: 21:41 (#4903),
                            ),
                        ),
                        pat_span: regex-automata/src/util/prefilter/byteset.rs:21:27: 21:41 (#4903),
                    },
                ),
            ),
        ),
        ty: core::slice::Iter<'{erased}, B/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/byteset.rs:21:27: 21:41 (#4903),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/byteset.rs:10:5: 30:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/byteset.rs:21:27: 21:41 (#4903),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} B/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/byteset.rs:21:27: 21:41 (#4903),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, B/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/byteset.rs:21:27: 21:41 (#4903),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, B/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/byteset.rs:21:27: 21:41 (#4903),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/byteset.rs:21:13: 27:14 (#4902),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/byteset.rs:21:13: 27:14 (#4902),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _11,
                                ),
                                regex-automata/src/util/prefilter/byteset.rs:21:27: 21:41 (#4903),
                            ),
                        ),
                        pat_span: regex-automata/src/util/prefilter/byteset.rs:21:17: 21:23 (#4904),
                    },
                ),
            ),
        ),
        ty: &'{erased} B/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/byteset.rs:21:17: 21:23 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/prefilter/byteset.rs:22:30: 22:45 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/prefilter/byteset.rs:22:21: 22:27 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/byteset.rs:22:21: 22:27 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} B/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/byteset.rs:22:30: 22:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/byteset.rs:23:17: 25:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/byteset.rs:23:20: 23:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/byteset.rs:23:20: 23:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/byteset.rs:23:20: 23:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/byteset.rs:23:38: 25:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/byteset.rs:26:21: 26:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/byteset.rs:26:33: 26:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/byteset.rs:26:40: 26:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/byteset.rs:26:33: 26:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/byteset.rs:26:33: 26:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/byteset.rs:26:17: 26:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/byteset.rs:26:17: 26:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::prefilter::byteset::ByteSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/byteset.rs:28:18: 28:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: [bool; 256_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/prefilter/byteset.rs:28:26: 28:29 (#0),
            scope: scope[0],
        },
    },
]