[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &((*_1).0: std::rc::Rc<core::cell::RefCell<std::vec::Vec<util::primitives::StateID>>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:381:20: 381:37 (#0),
                    scope: scope[0],
                },
                kind: _12 = <std::rc::Rc<core::cell::RefCell<std::vec::Vec<util::primitives::StateID>>> as core::ops::Deref>::deref(move _13) -> [return: bb1, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _11 = &(*_12),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:381:20: 381:37 (#0),
                    scope: scope[0],
                },
                kind: _10 = core::cell::RefCell::<std::vec::Vec<util::primitives::StateID>>::borrow(move _11) -> [return: bb2, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _9 = &_10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:381:20: 381:44 (#0),
                    scope: scope[0],
                },
                kind: _8 = <core::cell::Ref<'_, std::vec::Vec<util::primitives::StateID>> as core::ops::Deref>::deref(move _9) -> [return: bb3, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = &(*_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:381:20: 381:44 (#0),
                    scope: scope[0],
                },
                kind: _6 = <std::vec::Vec<util::primitives::StateID> as core::ops::Deref>::deref(move _7) -> [return: bb4, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = &(*_6),
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:381:20: 381:44 (#0),
                    scope: scope[0],
                },
                kind: _4 = core::slice::<impl [util::primitives::StateID]>::iter(move _5) -> [return: bb5, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:381:20: 381:44 (#3217),
                    scope: scope[0],
                },
                kind: _3 = <core::slice::Iter<'_, util::primitives::StateID> as core::iter::IntoIterator>::into_iter(move _4) -> [return: bb6, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            PlaceMention(_3),
            StorageLive(_14),
            _14 = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:381:9: 383:10 (#3216),
                    scope: scope[1],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:381:9: 383:10 (#3216),
                    scope: scope[1],
                },
                kind: falseUnwind -> [real: bb8, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &mut _14,
            _18 = &mut (*_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:381:20: 381:44 (#3217),
                    scope: scope[1],
                },
                kind: _17 = <core::slice::Iter<'_, util::primitives::StateID> as core::iter::Iterator>::next(move _18) -> [return: bb9, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            PlaceMention(_17),
            _20 = discriminant(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:381:20: 381:44 (#3217),
                    scope: scope[1],
                },
                kind: switchInt(move _20) -> [0: bb11, 1: bb12, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:381:20: 381:44 (#3217),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:381:9: 383:10 (#3216),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb13, imaginary: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            _22 = (*((_17 as Some).0: &util::primitives::StateID)),
            StorageLive(_23),
            StorageLive(_24),
            _24 = &mut _2,
            StorageLive(_25),
            StorageLive(_26),
            _26 = _22,
            _25 = (move _26,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:382:13: 382:18 (#0),
                    scope: scope[2],
                },
                kind: _23 = <F as core::ops::FnMut<(util::primitives::StateID,)>>::call_mut(move _24, move _25) -> [return: bb14, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:383:9: 383:10 (#3216),
                    scope: scope[0],
                },
                kind: drop(_10) -> [return: bb15, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_25),
            StorageDead(_24),
            StorageDead(_23),
            _16 = const (),
            StorageDead(_22),
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_16),
            _15 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:381:9: 383:10 (#3216),
                    scope: scope[1],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:384:5: 384:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb16, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:384:6: 384:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:383:9: 383:10 (#3216),
                    scope: scope[0],
                },
                kind: drop(_10) -> [return: bb18, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:384:5: 384:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb19, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/dfa/minimize.rs:380:5: 384:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:380:48: 380:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} dfa::minimize::StateSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:380:32: 380:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/dfa/minimize.rs:380:46: 380:47 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/dfa/minimize.rs:380:39: 380:44 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:380:39: 380:44 (#0),
                    },
                ),
            ),
        ),
        ty: F/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:380:39: 380:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:381:9: 383:10 (#3216),
                },
            ),
        ),
        ty: core::slice::Iter<'{erased}, util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:381:20: 381:44 (#3217),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:381:9: 383:10 (#3216),
                },
            ),
        ),
        ty: core::slice::Iter<'{erased}, util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:381:20: 381:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:381:9: 383:10 (#3216),
                },
            ),
        ),
        ty: &'{erased} [util::primitives::StateID],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:381:20: 381:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:381:9: 383:10 (#3216),
                },
            ),
        ),
        ty: &'{erased} [util::primitives::StateID],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:381:20: 381:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:381:9: 383:10 (#3216),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:381:20: 381:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:381:9: 383:10 (#3216),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<util::primitives::StateID, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:381:20: 381:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:381:9: 383:10 (#3216),
                },
            ),
        ),
        ty: &'{erased} core::cell::Ref<'{erased}, std::vec::Vec<util::primitives::StateID, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:381:20: 381:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:381:9: 383:10 (#3216),
                },
            ),
        ),
        ty: core::cell::Ref<'{erased}, std::vec::Vec<util::primitives::StateID, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:381:20: 381:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:381:9: 383:10 (#3216),
                },
            ),
        ),
        ty: &'{erased} core::cell::RefCell<std::vec::Vec<util::primitives::StateID, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:381:20: 381:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:381:9: 383:10 (#3216),
                },
            ),
        ),
        ty: &'{erased} core::cell::RefCell<std::vec::Vec<util::primitives::StateID, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:381:20: 381:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/dfa/minimize.rs:381:9: 383:10 (#3216),
                },
            ),
        ),
        ty: &'{erased} std::rc::Rc<core::cell::RefCell<std::vec::Vec<util::primitives::StateID, std::alloc::Global>>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:381:20: 381:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                regex-automata/src/dfa/minimize.rs:381:20: 381:44 (#3217),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:381:20: 381:44 (#3217),
                    },
                ),
            ),
        ),
        ty: core::slice::Iter<'{erased}, util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:381:20: 381:44 (#3217),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:380:5: 384:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:381:20: 381:44 (#3217),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:381:20: 381:44 (#3217),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:381:20: 381:44 (#3217),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, util::primitives::StateID>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:381:20: 381:44 (#3217),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:381:9: 383:10 (#3216),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:381:9: 383:10 (#3216),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _17,
                                ),
                                regex-automata/src/dfa/minimize.rs:381:20: 381:44 (#3217),
                            ),
                        ),
                        pat_span: regex-automata/src/dfa/minimize.rs:381:13: 381:16 (#3218),
                    },
                ),
            ),
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:381:14: 381:16 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:382:13: 382:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut F/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:382:13: 382:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (util::primitives::StateID,),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:382:13: 382:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::primitives::StateID,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/dfa/minimize.rs:382:15: 382:17 (#0),
            scope: scope[0],
        },
    },
]