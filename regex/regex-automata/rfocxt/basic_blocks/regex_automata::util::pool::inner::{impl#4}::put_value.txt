[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = const util::pool::inner::THREAD_ID,
            _4 = &_5,
            StorageLive(_6),
            _6 = {closure@regex-automata/src/util/pool.rs:605:41: 605:45},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:605:26: 605:50 (#0),
                    scope: scope[0],
                },
                kind: _3 = std::thread::LocalKey::<usize>::with::<{closure@regex-automata/src/util/pool.rs:605:41: 605:45}, usize>(move _4, move _6) -> [return: bb1, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageDead(_5),
            StorageLive(_7),
            StorageLive(_8),
            _8 = _3,
            StorageLive(_9),
            StorageLive(_10),
            _10 = &((*_1).1: std::vec::Vec<util::pool::inner::CacheLine<std::sync::Mutex<std::vec::Vec<std::boxed::Box<T>>>>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:606:37: 606:54 (#0),
                    scope: scope[1],
                },
                kind: _9 = std::vec::Vec::<util::pool::inner::CacheLine<std::sync::Mutex<std::vec::Vec<std::boxed::Box<T>>>>>::len(move _10) -> [return: bb2, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            _11 = Eq(_9, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:606:28: 606:54 (#0),
                    scope: scope[1],
                },
                kind: assert(!move _11, "attempt to calculate the remainder of `{}` with a divisor of zero", _8) -> [success: bb3, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = Rem(move _8, move _9),
            StorageDead(_9),
            StorageDead(_8),
            FakeRead(ForLet(None), _7),
            StorageLive(_12),
            StorageLive(_13),
            _13 = core::ops::Range::<i32> { start: const 0_i32, end: const 10_i32 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:618:22: 618:27 (#4888),
                    scope: scope[2],
                },
                kind: _12 = <core::ops::Range<i32> as core::iter::IntoIterator>::into_iter(move _13) -> [return: bb4, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            PlaceMention(_12),
            StorageLive(_14),
            _14 = move _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:618:13: 625:14 (#4887),
                    scope: scope[3],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:618:13: 625:14 (#4887),
                    scope: scope[3],
                },
                kind: falseUnwind -> [real: bb6, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &mut _14,
            _18 = &mut (*_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:618:22: 618:27 (#4888),
                    scope: scope[3],
                },
                kind: _17 = <core::ops::Range<i32> as core::iter::Iterator>::next(move _18) -> [return: bb7, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            PlaceMention(_17),
            _20 = discriminant(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:618:22: 618:27 (#4888),
                    scope: scope[3],
                },
                kind: switchInt(move _20) -> [0: bb9, 1: bb10, otherwise: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:618:22: 618:27 (#4888),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:618:13: 625:14 (#4887),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb11, imaginary: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            _27 = &((*_1).1: std::vec::Vec<util::pool::inner::CacheLine<std::sync::Mutex<std::vec::Vec<std::boxed::Box<T>>>>>),
            StorageLive(_28),
            _28 = _7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:619:50: 619:60 (#0),
                    scope: scope[3],
                },
                kind: _26 = <std::vec::Vec<util::pool::inner::CacheLine<std::sync::Mutex<std::vec::Vec<std::boxed::Box<T>>>>> as core::ops::Index<usize>>::index(move _27, move _28) -> [return: bb12, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_14),
            StorageDead(_12),
            StorageDead(_7),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:626:9: 626:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb24, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_27),
            _25 = &((*_26).0: std::sync::Mutex<std::vec::Vec<std::boxed::Box<T>>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:619:39: 619:73 (#0),
                    scope: scope[3],
                },
                kind: _24 = std::sync::Mutex::<std::vec::Vec<std::boxed::Box<T>>>::try_lock(move _25) -> [return: bb13, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            PlaceMention(_24),
            _29 = discriminant(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:619:33: 619:73 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _29) -> [0: bb16, 1: bb15, otherwise: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:619:39: 619:73 (#0),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:620:21: 620:27 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb21, imaginary: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_31),
            _31 = move ((_24 as Ok).0: std::sync::MutexGuard<'_, std::vec::Vec<std::boxed::Box<T>>>),
            _23 = move _31,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:621:38: 621:39 (#0),
                    scope: scope[3],
                },
                kind: drop(_31) -> [return: bb17, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            FakeRead(ForLet(None), _23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:622:18: 622:19 (#0),
                    scope: scope[3],
                },
                kind: drop(_24) -> [return: bb18, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_24),
            StorageLive(_32),
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            _35 = &mut _23,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:623:17: 623:34 (#0),
                    scope: scope[4],
                },
                kind: _34 = <std::sync::MutexGuard<'_, std::vec::Vec<std::boxed::Box<T>>> as core::ops::DerefMut>::deref_mut(move _35) -> [return: bb19, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _33 = &mut (*_34),
            StorageDead(_35),
            StorageLive(_36),
            _36 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:623:17: 623:34 (#0),
                    scope: scope[4],
                },
                kind: _32 = std::vec::Vec::<std::boxed::Box<T>>::push(move _33, move _36) -> [return: bb20, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_33),
            StorageDead(_34),
            StorageDead(_32),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:625:13: 625:14 (#0),
                    scope: scope[3],
                },
                kind: drop(_23) -> [return: bb23, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:622:18: 622:19 (#0),
                    scope: scope[3],
                },
                kind: drop(_24) -> [return: bb22, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_24),
            StorageDead(_23),
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_14),
            StorageDead(_12),
            StorageDead(_7),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:626:9: 626:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb24, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:626:10: 626:10 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:623:33: 623:34 (#0),
                    scope: scope[4],
                },
                kind: drop(_36) -> [return: bb26, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:625:13: 625:14 (#0),
                    scope: scope[3],
                },
                kind: drop(_23) -> [return: bb28, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:622:18: 622:19 (#0),
                    scope: scope[3],
                },
                kind: drop(_24) -> [return: bb28, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:626:9: 626:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb29, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/pool.rs:604:9: 626:10 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:604:43: 604:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} util::pool::inner::Pool<T/#0, F/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:604:22: 604:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/pool.rs:604:36: 604:42 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/pool.rs:604:29: 604:34 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/pool.rs:604:29: 604:34 (#0),
                    },
                ),
            ),
        ),
        ty: std::boxed::Box<T/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:604:29: 604:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/pool.rs:605:26: 605:50 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/pool.rs:605:17: 605:23 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:605:17: 605:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::thread::LocalKey<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:605:26: 605:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:6401 ~ regex_automata[00dd]::util::pool::inner::THREAD_ID),
            },
        ),
        ty: std::thread::LocalKey<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:605:26: 605:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:3658 ~ regex_automata[00dd]::util::pool::inner::{impl#4}::put_value::{closure#0}),
            [
                T/#0,
                F/#1,
                i32,
                Binder { value: extern "RustCall" fn((&'^0 usize,)) -> usize, bound_vars: [Region(BrAnon)] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:605:41: 605:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/pool.rs:606:28: 606:54 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/pool.rs:606:17: 606:25 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:606:17: 606:25 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:606:28: 606:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:606:37: 606:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<util::pool::inner::CacheLine<std::sync::Mutex<std::vec::Vec<std::boxed::Box<T/#0, std::alloc::Global>, std::alloc::Global>>>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:606:37: 606:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:606:28: 606:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/pool.rs:618:13: 625:14 (#4887),
                },
            ),
        ),
        ty: core::ops::Range<i32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:618:22: 618:27 (#4888),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-automata/src/util/pool.rs:618:13: 625:14 (#4887),
                },
            ),
        ),
        ty: core::ops::Range<i32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:618:22: 618:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _12,
                                ),
                                regex-automata/src/util/pool.rs:618:22: 618:27 (#4888),
                            ),
                        ),
                        pat_span: regex-automata/src/util/pool.rs:618:22: 618:27 (#4888),
                    },
                ),
            ),
        ),
        ty: core::ops::Range<i32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:618:22: 618:27 (#4888),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:604:9: 626:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:618:22: 618:27 (#4888),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<i32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:618:22: 618:27 (#4888),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<i32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:618:22: 618:27 (#4888),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<i32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:618:22: 618:27 (#4888),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:618:13: 625:14 (#4887),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:618:13: 625:14 (#4887),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:618:28: 625:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/pool.rs:619:33: 622:18 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/pool.rs:619:21: 619:30 (#0),
                    },
                ),
            ),
        ),
        ty: std::sync::MutexGuard<'{erased}, std::vec::Vec<std::boxed::Box<T/#0, std::alloc::Global>, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:619:21: 619:30 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<std::sync::MutexGuard<'{erased}, std::vec::Vec<std::boxed::Box<T/#0, std::alloc::Global>, std::alloc::Global>>, std::sync::TryLockError<std::sync::MutexGuard<'{erased}, std::vec::Vec<std::boxed::Box<T/#0, std::alloc::Global>, std::alloc::Global>>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:619:39: 619:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::sync::Mutex<std::vec::Vec<std::boxed::Box<T/#0, std::alloc::Global>, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:619:39: 619:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::pool::inner::CacheLine<std::sync::Mutex<std::vec::Vec<std::boxed::Box<T/#0, std::alloc::Global>, std::alloc::Global>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:619:50: 619:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<util::pool::inner::CacheLine<std::sync::Mutex<std::vec::Vec<std::boxed::Box<T/#0, std::alloc::Global>, std::alloc::Global>>>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:619:39: 619:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:619:51: 619:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:620:21: 620:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:620:31: 620:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _24,
                                ),
                                regex-automata/src/util/pool.rs:619:39: 619:73 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/pool.rs:621:21: 621:30 (#0),
                    },
                ),
            ),
        ),
        ty: std::sync::MutexGuard<'{erased}, std::vec::Vec<std::boxed::Box<T/#0, std::alloc::Global>, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:621:24: 621:29 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:623:17: 623:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<std::boxed::Box<T/#0, std::alloc::Global>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:623:17: 623:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<std::boxed::Box<T/#0, std::alloc::Global>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:623:17: 623:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::sync::MutexGuard<'{erased}, std::vec::Vec<std::boxed::Box<T/#0, std::alloc::Global>, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:623:17: 623:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::boxed::Box<T/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/pool.rs:623:28: 623:33 (#0),
            scope: scope[0],
        },
    },
]