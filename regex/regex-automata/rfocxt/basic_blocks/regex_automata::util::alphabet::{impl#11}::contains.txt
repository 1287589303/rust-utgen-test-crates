[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = _2,
            _5 = Eq(const 128_u8, const 0_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:777:22: 777:32 (#0),
                    scope: scope[0],
                },
                kind: assert(!move _5, "attempt to divide `{}` by zero", _4) -> [success: bb1, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = Div(move _4, const 128_u8),
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_6),
            StorageLive(_7),
            _7 = _2,
            _8 = Eq(const 128_u8, const 0_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:778:19: 778:29 (#0),
                    scope: scope[1],
                },
                kind: assert(!move _8, "attempt to calculate the remainder of `{}` with a divisor of zero", _7) -> [success: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = Rem(move _7, const 128_u8),
            StorageDead(_7),
            FakeRead(ForLet(None), _6),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:779:21: 779:40 (#0),
                    scope: scope[2],
                },
                kind: _11 = <usize as core::convert::From<u8>>::from(move _12) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            _13 = Len((((*_1).0: util::alphabet::BitSet).0: [u128; 2])),
            _14 = Lt(_11, _13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:779:9: 779:41 (#0),
                    scope: scope[2],
                },
                kind: assert(move _14, "index out of bounds: the length is {} but the index is {}", move _13, _11) -> [success: bb4, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = (((*_1).0: util::alphabet::BitSet).0: [u128; 2])[_11],
            StorageLive(_15),
            StorageLive(_16),
            _16 = _6,
            _17 = Lt(_16, const 128_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:779:44: 779:54 (#0),
                    scope: scope[2],
                },
                kind: assert(move _17, "attempt to shift left by `{}`, which would overflow", _16) -> [success: bb5, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _15 = Shl(const 1_u128, move _16),
            StorageDead(_16),
            _9 = BitAnd(move _10, move _15),
            StorageDead(_15),
            StorageDead(_10),
            _0 = Gt(move _9, const 0_u128),
            StorageDead(_9),
            StorageDead(_6),
            StorageDead(_3),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:780:6: 780:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/alphabet.rs:776:5: 780:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:776:48: 776:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} util::alphabet::ByteSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:776:28: 776:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/alphabet.rs:776:41: 776:43 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/alphabet.rs:776:35: 776:39 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/alphabet.rs:776:35: 776:39 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:776:35: 776:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/alphabet.rs:777:22: 777:32 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/alphabet.rs:777:13: 777:19 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:777:13: 777:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:777:22: 777:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:777:22: 777:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/alphabet.rs:778:19: 778:29 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/alphabet.rs:778:13: 778:16 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:778:13: 778:16 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:778:19: 778:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:778:19: 778:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/alphabet.rs:779:9: 779:58 (#0),
                },
            ),
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:779:9: 779:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/alphabet.rs:779:9: 779:58 (#0),
                },
            ),
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:779:9: 779:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/alphabet.rs:779:9: 779:58 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:779:21: 779:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/alphabet.rs:779:9: 779:58 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:779:33: 779:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:779:9: 779:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:779:9: 779:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/alphabet.rs:779:9: 779:58 (#0),
                },
            ),
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:779:44: 779:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/alphabet.rs:779:9: 779:58 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:779:50: 779:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/alphabet.rs:779:44: 779:54 (#0),
            scope: scope[0],
        },
    },
]