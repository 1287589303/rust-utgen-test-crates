[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/start.rs:156:27: 156:43 (#0),
                    scope: scope[0],
                },
                kind: _5 = util::search::Input::<'_>::haystack(move _6) -> [return: bb1, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = &(*_5),
            StorageDead(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/start.rs:156:48: 156:59 (#0),
                    scope: scope[0],
                },
                kind: _7 = util::search::Input::<'_>::end(move _8) -> [return: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/start.rs:156:27: 156:60 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::slice::<impl [u8]>::get::<usize>(move _4, move _7) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/start.rs:156:27: 156:69 (#0),
                    scope: scope[0],
                },
                kind: _2 = core::option::Option::<&u8>::copied(move _3) -> [return: bb4, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageDead(_5),
            StorageLive(_9),
            _9 = _2,
            StorageLive(_10),
            StorageLive(_11),
            _11 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/start.rs:157:41: 157:61 (#0),
                    scope: scope[1],
                },
                kind: _10 = util::search::Input::<'_>::get_anchored(move _11) -> [return: bb5, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            _0 = util::start::Config { look_behind: move _9, anchored: move _10 },
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/start.rs:158:6: 158:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-automata/src/util/start.rs:155:5: 158:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: util::start::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/start.rs:155:53: 155:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-automata/src/util/start.rs:155:38: 155:48 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/start.rs:155:31: 155:36 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/start.rs:155:31: 155:36 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/start.rs:155:31: 155:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-automata/src/util/start.rs:156:27: 156:69 (#0),
                            ),
                        ),
                        pat_span: regex-automata/src/util/start.rs:156:13: 156:24 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/start.rs:156:13: 156:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/start.rs:156:27: 156:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/start.rs:156:27: 156:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/start.rs:156:27: 156:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/start.rs:156:27: 156:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/start.rs:156:48: 156:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/start.rs:156:48: 156:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/start.rs:157:18: 157:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: util::search::Anchored,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/start.rs:157:41: 157:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-automata/src/util/start.rs:157:9: 157:63 (#0),
                },
            ),
        ),
        ty: &'{erased} util::search::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-automata/src/util/start.rs:157:41: 157:46 (#0),
            scope: scope[0],
        },
    },
]