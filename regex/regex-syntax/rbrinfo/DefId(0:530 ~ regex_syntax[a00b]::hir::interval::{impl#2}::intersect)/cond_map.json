{
  "regex-syntax/src/hir/interval.rs:166:16:166:73": [
    {
      "Bool": {
        "Other": "let Some(ab) = self.ranges[a].intersect(&other.ranges[b])"
      }
    }
  ],
  "regex-syntax/src/hir/interval.rs:148:12:148:35": [
    {
      "Bool": {
        "Other": "other.ranges.is_empty()"
      }
    }
  ],
  "regex-syntax/src/hir/interval.rs:175:19:175:28": [
    {
      "Match": {
        "match_source": "regex-syntax/src/hir/interval.rs:175:19:175:28",
        "match_str": "it.next()",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-syntax/src/hir/interval.rs:177:17:177:21": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/interval.rs:177:25:177:30"
          },
          "regex-syntax/src/hir/interval.rs:176:17:176:24": {
            "pat": {
              "pat_str": "Some(v)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/interval.rs:176:28:176:37"
          }
        }
      }
    }
  ],
  "regex-syntax/src/hir/interval.rs:170:20:170:68": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "self.ranges[a].upper() < other.ranges[b].upper()",
          "lhs": "self.ranges[a].upper()",
          "rhs": "other.ranges[b].upper()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/hir/interval.rs:181:38:181:50": [
    {
      "Bool": {
        "Other": "other.folded"
      }
    }
  ],
  "regex-syntax/src/hir/interval.rs:181:23:181:34": [
    {
      "Bool": {
        "Other": "self.folded"
      }
    }
  ],
  "regex-syntax/src/hir/interval.rs:145:12:145:34": [
    {
      "Bool": {
        "Other": "self.ranges.is_empty()"
      }
    }
  ]
}