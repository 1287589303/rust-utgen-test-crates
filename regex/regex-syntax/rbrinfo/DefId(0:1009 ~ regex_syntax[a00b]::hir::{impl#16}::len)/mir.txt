bb0
  0: StorageLive(_2)
    SourceInfo(regex-syntax/src/hir/mod.rs:1335:13-1335:17)
  1: StorageLive(_3)
    SourceInfo(regex-syntax/src/hir/mod.rs:1335:20-1335:43)
  2: StorageLive(_4)
    SourceInfo(regex-syntax/src/hir/mod.rs:1335:24-1335:43)
  3: StorageLive(_5)
    SourceInfo(regex-syntax/src/hir/mod.rs:1335:34-1335:42)
  4: _5 = ((*_1).1: char)
    SourceInfo(regex-syntax/src/hir/mod.rs:1335:34-1335:42)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1335:24-1335:43)
      kind: _4 = <u32 as core::convert::From<char>>::from(move _5) -> [return: bb1, unwind: bb7]
  }
  preds []
  succs [bb1, bb7]

bb1
  0: StorageDead(_5)
    SourceInfo(regex-syntax/src/hir/mod.rs:1335:42-1335:43)
  1: _6 = AddWithOverflow(const 1_u32, _4)
    SourceInfo(regex-syntax/src/hir/mod.rs:1335:20-1335:43)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1335:20-1335:43)
      kind: assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", const 1_u32, move _4) -> [success: bb2, unwind: bb7]
  }
  preds [bb0]
  succs [bb2, bb7]

bb2
  0: _3 = move (_6.0: u32)
    SourceInfo(regex-syntax/src/hir/mod.rs:1335:20-1335:43)
  1: StorageDead(_4)
    SourceInfo(regex-syntax/src/hir/mod.rs:1335:42-1335:43)
  2: StorageLive(_7)
    SourceInfo(regex-syntax/src/hir/mod.rs:1335:46-1335:67)
  3: StorageLive(_8)
    SourceInfo(regex-syntax/src/hir/mod.rs:1335:56-1335:66)
  4: _8 = ((*_1).0: char)
    SourceInfo(regex-syntax/src/hir/mod.rs:1335:56-1335:66)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1335:46-1335:67)
      kind: _7 = <u32 as core::convert::From<char>>::from(move _8) -> [return: bb3, unwind: bb7]
  }
  preds [bb1]
  succs [bb3, bb7]

bb3
  0: StorageDead(_8)
    SourceInfo(regex-syntax/src/hir/mod.rs:1335:66-1335:67)
  1: _9 = SubWithOverflow(_3, _7)
    SourceInfo(regex-syntax/src/hir/mod.rs:1335:20-1335:67)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1335:20-1335:67)
      kind: assert(!move (_9.1: bool), "attempt to compute `{} - {}`, which would overflow", move _3, move _7) -> [success: bb4, unwind: bb7]
  }
  preds [bb2]
  succs [bb4, bb7]

bb4
  0: _2 = move (_9.0: u32)
    SourceInfo(regex-syntax/src/hir/mod.rs:1335:20-1335:67)
  1: StorageDead(_7)
    SourceInfo(regex-syntax/src/hir/mod.rs:1335:66-1335:67)
  2: StorageDead(_3)
    SourceInfo(regex-syntax/src/hir/mod.rs:1335:66-1335:67)
  3: FakeRead(ForLet(None), _2)
    SourceInfo(regex-syntax/src/hir/mod.rs:1335:13-1335:17)
  4: StorageLive(_10)
    SourceInfo(regex-syntax/src/hir/mod.rs:1342:9-1342:30)
  5: StorageLive(_11)
    SourceInfo(regex-syntax/src/hir/mod.rs:1342:25-1342:29)
  6: _11 = _2
    SourceInfo(regex-syntax/src/hir/mod.rs:1342:25-1342:29)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1342:9-1342:30)
      kind: _10 = <usize as core::convert::TryFrom<u32>>::try_from(move _11) -> [return: bb5, unwind: bb7]
  }
  preds [bb3]
  succs [bb5, bb7]

bb5
  0: StorageDead(_11)
    SourceInfo(regex-syntax/src/hir/mod.rs:1342:29-1342:30)
  1: StorageLive(_12)
    SourceInfo(regex-syntax/src/hir/mod.rs:1342:38-1342:68)
  2: StorageLive(_13)
    SourceInfo(regex-syntax/src/hir/mod.rs:1342:38-1342:68)
  3: _13 = const "char class len fits in usize"
    SourceInfo(regex-syntax/src/hir/mod.rs:1342:38-1342:68)
  4: _12 = &(*_13)
    SourceInfo(regex-syntax/src/hir/mod.rs:1342:38-1342:68)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1342:9-1342:69)
      kind: _0 = core::result::Result::<usize, core::num::TryFromIntError>::expect(move _10, move _12) -> [return: bb6, unwind: bb7]
  }
  preds [bb4]
  succs [bb6, bb7]

bb6
  0: StorageDead(_12)
    SourceInfo(regex-syntax/src/hir/mod.rs:1342:68-1342:69)
  1: StorageDead(_10)
    SourceInfo(regex-syntax/src/hir/mod.rs:1342:68-1342:69)
  2: StorageDead(_2)
    SourceInfo(regex-syntax/src/hir/mod.rs:1343:5-1343:6)
  3: StorageDead(_13)
    SourceInfo(regex-syntax/src/hir/mod.rs:1343:5-1343:6)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1343:6-1343:6)
      kind: return
  }
  preds [bb5]
  succs []

bb7
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1334:5-1343:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5]
  succs []

