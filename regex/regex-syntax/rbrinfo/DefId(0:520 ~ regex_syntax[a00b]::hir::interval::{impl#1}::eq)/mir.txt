bb0
  0: StorageLive(_3)
    SourceInfo(regex-syntax/src/hir/interval.rs:63:9-63:20)
  1: _3 = &((*_1).0: std::vec::Vec<I>)
    SourceInfo(regex-syntax/src/hir/interval.rs:63:9-63:20)
  2: StorageLive(_4)
    SourceInfo(regex-syntax/src/hir/interval.rs:63:24-63:37)
  3: StorageLive(_5)
    SourceInfo(regex-syntax/src/hir/interval.rs:63:24-63:37)
  4: _5 = &((*_2).0: std::vec::Vec<I>)
    SourceInfo(regex-syntax/src/hir/interval.rs:63:24-63:37)
  5: _4 = &(*_5)
    SourceInfo(regex-syntax/src/hir/interval.rs:63:24-63:37)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:63:9-63:38)
      kind: _0 = <std::vec::Vec<I> as core::cmp::PartialEq>::eq(move _3, move _4) -> [return: bb1, unwind: bb2]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-syntax/src/hir/interval.rs:63:37-63:38)
  1: StorageDead(_3)
    SourceInfo(regex-syntax/src/hir/interval.rs:63:37-63:38)
  2: StorageDead(_5)
    SourceInfo(regex-syntax/src/hir/interval.rs:64:5-64:6)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:64:6-64:6)
      kind: return
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:62:5-64:6)
      kind: resume
  }
  preds [bb0]
  succs []

