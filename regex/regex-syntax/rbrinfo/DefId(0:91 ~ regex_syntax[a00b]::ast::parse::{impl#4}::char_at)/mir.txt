bb0
  0: StorageLive(_3)
    SourceInfo(regex-syntax/src/ast/parse.rs:484:9-486:20)
  1: StorageLive(_4)
    SourceInfo(regex-syntax/src/ast/parse.rs:484:9-485:21)
  2: StorageLive(_5)
    SourceInfo(regex-syntax/src/ast/parse.rs:484:9-485:21)
  3: StorageLive(_6)
    SourceInfo(regex-syntax/src/ast/parse.rs:484:9-484:28)
  4: StorageLive(_7)
    SourceInfo(regex-syntax/src/ast/parse.rs:484:23-484:28)
  5: StorageLive(_8)
    SourceInfo(regex-syntax/src/ast/parse.rs:484:9-484:23)
  6: StorageLive(_9)
    SourceInfo(regex-syntax/src/ast/parse.rs:484:9-484:23)
  7: StorageLive(_10)
    SourceInfo(regex-syntax/src/ast/parse.rs:484:9-484:13)
  8: _10 = &(*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:484:9-484:13)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:484:9-484:23)
      kind: _9 = ast::parse::ParserI::<'_, P>::pattern(move _10) -> [return: bb1, unwind: bb6]
  }
  preds []
  succs [bb1, bb6]

bb1
  0: _8 = &(*_9)
    SourceInfo(regex-syntax/src/ast/parse.rs:484:9-484:23)
  1: StorageDead(_10)
    SourceInfo(regex-syntax/src/ast/parse.rs:484:22-484:23)
  2: StorageLive(_11)
    SourceInfo(regex-syntax/src/ast/parse.rs:484:24-484:27)
  3: StorageLive(_12)
    SourceInfo(regex-syntax/src/ast/parse.rs:484:24-484:25)
  4: _12 = _2
    SourceInfo(regex-syntax/src/ast/parse.rs:484:24-484:25)
  5: _11 = core::ops::RangeFrom::<usize> { start: move _12 }
    SourceInfo(regex-syntax/src/ast/parse.rs:484:24-484:27)
  6: StorageDead(_12)
    SourceInfo(regex-syntax/src/ast/parse.rs:484:26-484:27)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:484:23-484:28)
      kind: _7 = <str as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _8, move _11) -> [return: bb2, unwind: bb6]
  }
  preds [bb0]
  succs [bb2, bb6]

bb2
  0: _6 = &(*_7)
    SourceInfo(regex-syntax/src/ast/parse.rs:484:9-484:28)
  1: StorageDead(_11)
    SourceInfo(regex-syntax/src/ast/parse.rs:484:27-484:28)
  2: StorageDead(_8)
    SourceInfo(regex-syntax/src/ast/parse.rs:484:27-484:28)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:484:9-485:21)
      kind: _5 = core::str::<impl str>::chars(move _6) -> [return: bb3, unwind: bb6]
  }
  preds [bb1]
  succs [bb3, bb6]

bb3
  0: _4 = &mut _5
    SourceInfo(regex-syntax/src/ast/parse.rs:484:9-485:21)
  1: StorageDead(_6)
    SourceInfo(regex-syntax/src/ast/parse.rs:485:20-485:21)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:484:9-486:20)
      kind: _3 = <core::str::Chars<'_> as core::iter::Iterator>::next(move _4) -> [return: bb4, unwind: bb6]
  }
  preds [bb2]
  succs [bb4, bb6]

bb4
  0: StorageDead(_4)
    SourceInfo(regex-syntax/src/ast/parse.rs:486:19-486:20)
  1: StorageLive(_13)
    SourceInfo(regex-syntax/src/ast/parse.rs:487:29-487:71)
  2: StorageLive(_14)
    SourceInfo(regex-syntax/src/ast/parse.rs:487:29-487:71)
  3: _14 = &_2
    SourceInfo(regex-syntax/src/ast/parse.rs:487:29-487:71)
  4: _13 = {closure@regex-syntax/src/ast/parse.rs:487:29: 487:31} { i: move _14 }
    SourceInfo(regex-syntax/src/ast/parse.rs:487:29-487:71)
  5: StorageDead(_14)
    SourceInfo(regex-syntax/src/ast/parse.rs:487:30-487:31)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:484:9-487:72)
      kind: _0 = core::option::Option::<char>::unwrap_or_else::<{closure@regex-syntax/src/ast/parse.rs:487:29: 487:31}>(move _3, move _13) -> [return: bb5, unwind: bb6]
  }
  preds [bb3]
  succs [bb5, bb6]

bb5
  0: StorageDead(_13)
    SourceInfo(regex-syntax/src/ast/parse.rs:487:71-487:72)
  1: StorageDead(_3)
    SourceInfo(regex-syntax/src/ast/parse.rs:487:71-487:72)
  2: StorageDead(_9)
    SourceInfo(regex-syntax/src/ast/parse.rs:488:5-488:6)
  3: StorageDead(_7)
    SourceInfo(regex-syntax/src/ast/parse.rs:488:5-488:6)
  4: StorageDead(_5)
    SourceInfo(regex-syntax/src/ast/parse.rs:488:5-488:6)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:488:6-488:6)
      kind: return
  }
  preds [bb4]
  succs []

bb6
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:483:5-488:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4]
  succs []

