bb0
  0: PlaceMention((*_1))
    SourceInfo(regex-syntax/src/ast/mod.rs:1402:15-1402:20)
  1: _4 = discriminant((*_1))
    SourceInfo(regex-syntax/src/ast/mod.rs:1402:15-1402:20)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/mod.rs:1402:9-1402:20)
      kind: switchInt(move _4) -> [2: bb2, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: _0 = const true
    SourceInfo(regex-syntax/src/ast/mod.rs:1404:18-1404:22)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/mod.rs:1404:18-1404:22)
      kind: goto -> bb6
  }
  preds [bb0, bb2, bb5, bb5]
  succs [bb6]

bb2
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/mod.rs:1403:13-1403:43)
      kind: falseEdge -> [real: bb3, imaginary: bb1]
  }
  preds [bb0]
  succs [bb1, bb3]

bb3
  0: StorageLive(_6)
    SourceInfo(regex-syntax/src/ast/mod.rs:1403:38-1403:39)
  1: _6 = &(((*_1) as Bounded).0: u32)
    SourceInfo(regex-syntax/src/ast/mod.rs:1403:38-1403:39)
  2: StorageLive(_8)
    SourceInfo(regex-syntax/src/ast/mod.rs:1403:41-1403:42)
  3: _8 = &(((*_1) as Bounded).1: u32)
    SourceInfo(regex-syntax/src/ast/mod.rs:1403:41-1403:42)
  4: _2 = &fake shallow _1
    SourceInfo(regex-syntax/src/ast/mod.rs:1402:15-1402:20)
  5: _3 = &fake shallow (*_1)
    SourceInfo(regex-syntax/src/ast/mod.rs:1402:15-1402:20)
  6: StorageLive(_9)
    SourceInfo(regex-syntax/src/ast/mod.rs:1403:47-1403:52)
  7: StorageLive(_10)
    SourceInfo(regex-syntax/src/ast/mod.rs:1403:47-1403:48)
  8: _10 = (*_6)
    SourceInfo(regex-syntax/src/ast/mod.rs:1403:47-1403:48)
  9: StorageLive(_11)
    SourceInfo(regex-syntax/src/ast/mod.rs:1403:51-1403:52)
  10: _11 = (*_8)
    SourceInfo(regex-syntax/src/ast/mod.rs:1403:51-1403:52)
  11: _9 = Gt(move _10, move _11)
    SourceInfo(regex-syntax/src/ast/mod.rs:1403:47-1403:52)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/mod.rs:1403:47-1403:52)
      kind: switchInt(move _9) -> [0: bb5, otherwise: bb4]
  }
  preds [bb2]
  succs [bb4, bb5]

bb4
  0: StorageDead(_11)
    SourceInfo(regex-syntax/src/ast/mod.rs:1403:51-1403:52)
  1: StorageDead(_10)
    SourceInfo(regex-syntax/src/ast/mod.rs:1403:51-1403:52)
  2: StorageDead(_9)
    SourceInfo(regex-syntax/src/ast/mod.rs:1403:51-1403:52)
  3: FakeRead(ForMatchGuard, _2)
    SourceInfo(regex-syntax/src/ast/mod.rs:1403:51-1403:52)
  4: FakeRead(ForMatchGuard, _3)
    SourceInfo(regex-syntax/src/ast/mod.rs:1403:51-1403:52)
  5: FakeRead(ForGuardBinding, _6)
    SourceInfo(regex-syntax/src/ast/mod.rs:1403:51-1403:52)
  6: FakeRead(ForGuardBinding, _8)
    SourceInfo(regex-syntax/src/ast/mod.rs:1403:51-1403:52)
  7: StorageLive(_5)
    SourceInfo(regex-syntax/src/ast/mod.rs:1403:38-1403:39)
  8: _5 = (((*_1) as Bounded).0: u32)
    SourceInfo(regex-syntax/src/ast/mod.rs:1403:38-1403:39)
  9: StorageLive(_7)
    SourceInfo(regex-syntax/src/ast/mod.rs:1403:41-1403:42)
  10: _7 = (((*_1) as Bounded).1: u32)
    SourceInfo(regex-syntax/src/ast/mod.rs:1403:41-1403:42)
  11: _0 = const false
    SourceInfo(regex-syntax/src/ast/mod.rs:1403:56-1403:61)
  12: StorageDead(_7)
    SourceInfo(regex-syntax/src/ast/mod.rs:1403:60-1403:61)
  13: StorageDead(_5)
    SourceInfo(regex-syntax/src/ast/mod.rs:1403:60-1403:61)
  14: StorageDead(_8)
    SourceInfo(regex-syntax/src/ast/mod.rs:1403:60-1403:61)
  15: StorageDead(_6)
    SourceInfo(regex-syntax/src/ast/mod.rs:1403:60-1403:61)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/mod.rs:1403:60-1403:61)
      kind: goto -> bb6
  }
  preds [bb3]
  succs [bb6]

bb5
  0: StorageDead(_11)
    SourceInfo(regex-syntax/src/ast/mod.rs:1403:51-1403:52)
  1: StorageDead(_10)
    SourceInfo(regex-syntax/src/ast/mod.rs:1403:51-1403:52)
  2: StorageDead(_9)
    SourceInfo(regex-syntax/src/ast/mod.rs:1403:51-1403:52)
  3: StorageDead(_8)
    SourceInfo(regex-syntax/src/ast/mod.rs:1403:60-1403:61)
  4: StorageDead(_6)
    SourceInfo(regex-syntax/src/ast/mod.rs:1403:60-1403:61)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/mod.rs:1403:47-1403:52)
      kind: falseEdge -> [real: bb1, imaginary: bb1]
  }
  preds [bb3]
  succs [bb1, bb1]

bb6
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/mod.rs:1406:6-1406:6)
      kind: return
  }
  preds [bb1, bb4]
  succs []

