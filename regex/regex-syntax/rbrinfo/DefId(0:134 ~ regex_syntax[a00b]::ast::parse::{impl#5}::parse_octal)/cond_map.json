{
  "regex-syntax/src/ast/parse.rs:1687:15:1687:26": [
    {
      "Bool": {
        "Other": "self.bump()"
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1689:16:1689:34": [
    {
      "Bool": {
        "Binary": {
          "kind": "Le",
          "expr": "self.char() <= '7'",
          "lhs": "self.char()",
          "rhs": "'7'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1683:17:1683:36": [
    {
      "Bool": {
        "Other": "self.parser().octal"
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1684:39:1684:57": [
    {
      "Bool": {
        "Binary": {
          "kind": "Le",
          "expr": "self.char() <= '7'",
          "lhs": "self.char()",
          "rhs": "'7'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1690:16:1690:48": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.pos().offset - start.offset",
          "lhs": "self.pos().offset",
          "rhs": "start.offset",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1684:17:1684:35": [
    {
      "Bool": {
        "Binary": {
          "kind": "Le",
          "expr": "'0' <= self.char()",
          "lhs": "'0'",
          "rhs": "self.char()",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1688:16:1688:34": [
    {
      "Bool": {
        "Binary": {
          "kind": "Le",
          "expr": "'0' <= self.char()",
          "lhs": "'0'",
          "rhs": "self.char()",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1690:16:1690:53": [
    {
      "Bool": {
        "Binary": {
          "kind": "Le",
          "expr": "self.pos().offset - start.offset <= 2",
          "lhs": "self.pos().offset - start.offset",
          "rhs": "2",
          "cmp_with_int": true
        }
      }
    }
  ]
}