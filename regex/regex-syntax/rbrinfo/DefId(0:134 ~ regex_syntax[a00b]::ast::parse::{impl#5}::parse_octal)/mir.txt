bb0
  0: StorageLive(_2)
    SourceInfo(regex-syntax/src/ast/parse.rs:1683:9-1683:37)
  1: StorageLive(_3)
    SourceInfo(regex-syntax/src/ast/parse.rs:1683:17-1683:36)
  2: StorageLive(_4)
    SourceInfo(regex-syntax/src/ast/parse.rs:1683:17-1683:30)
  3: StorageLive(_5)
    SourceInfo(regex-syntax/src/ast/parse.rs:1683:17-1683:21)
  4: _5 = &(*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:1683:17-1683:21)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1683:17-1683:30)
      kind: _4 = ast::parse::ParserI::<'_, P>::parser(move _5) -> [return: bb1, unwind: bb36]
  }
  preds []
  succs [bb1, bb36]

bb1
  0: StorageDead(_5)
    SourceInfo(regex-syntax/src/ast/parse.rs:1683:29-1683:30)
  1: _3 = ((*_4).3: bool)
    SourceInfo(regex-syntax/src/ast/parse.rs:1683:17-1683:36)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1683:17-1683:36)
      kind: switchInt(move _3) -> [0: bb2, otherwise: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_4)
    SourceInfo(regex-syntax/src/ast/parse.rs:1683:36-1683:37)
  1: StorageLive(_6)
    SourceInfo(regex-syntax/src/ast/parse.rs:1683:9-1683:37)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1683:9-1683:37)
      kind: _6 = core::panicking::panic(const "assertion failed: self.parser().octal") -> bb36
  }
  preds [bb1]
  succs [bb36]

bb3
  0: StorageDead(_4)
    SourceInfo(regex-syntax/src/ast/parse.rs:1683:36-1683:37)
  1: _2 = const ()
    SourceInfo(regex-syntax/src/ast/parse.rs:1683:37-1683:37)
  2: StorageDead(_3)
    SourceInfo(regex-syntax/src/ast/parse.rs:1683:36-1683:37)
  3: StorageDead(_2)
    SourceInfo(regex-syntax/src/ast/parse.rs:1683:36-1683:37)
  4: StorageLive(_7)
    SourceInfo(regex-syntax/src/ast/parse.rs:1684:9-1684:58)
  5: StorageLive(_8)
    SourceInfo(regex-syntax/src/ast/parse.rs:1684:17-1684:35)
  6: StorageLive(_9)
    SourceInfo(regex-syntax/src/ast/parse.rs:1684:24-1684:35)
  7: StorageLive(_10)
    SourceInfo(regex-syntax/src/ast/parse.rs:1684:24-1684:28)
  8: _10 = &(*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:1684:24-1684:28)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1684:24-1684:35)
      kind: _9 = ast::parse::ParserI::<'_, P>::char(move _10) -> [return: bb4, unwind: bb36]
  }
  preds [bb1]
  succs [bb4, bb36]

bb4
  0: StorageDead(_10)
    SourceInfo(regex-syntax/src/ast/parse.rs:1684:34-1684:35)
  1: _8 = Le(const '0', move _9)
    SourceInfo(regex-syntax/src/ast/parse.rs:1684:17-1684:35)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1684:17-1684:35)
      kind: switchInt(move _8) -> [0: bb9, otherwise: bb5]
  }
  preds [bb3]
  succs [bb5, bb9]

bb5
  0: StorageDead(_9)
    SourceInfo(regex-syntax/src/ast/parse.rs:1684:34-1684:35)
  1: StorageLive(_11)
    SourceInfo(regex-syntax/src/ast/parse.rs:1684:39-1684:57)
  2: StorageLive(_12)
    SourceInfo(regex-syntax/src/ast/parse.rs:1684:39-1684:50)
  3: StorageLive(_13)
    SourceInfo(regex-syntax/src/ast/parse.rs:1684:39-1684:43)
  4: _13 = &(*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:1684:39-1684:43)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1684:39-1684:50)
      kind: _12 = ast::parse::ParserI::<'_, P>::char(move _13) -> [return: bb6, unwind: bb36]
  }
  preds [bb4]
  succs [bb6, bb36]

bb6
  0: StorageDead(_13)
    SourceInfo(regex-syntax/src/ast/parse.rs:1684:49-1684:50)
  1: _11 = Le(move _12, const '7')
    SourceInfo(regex-syntax/src/ast/parse.rs:1684:39-1684:57)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1684:39-1684:57)
      kind: switchInt(move _11) -> [0: bb8, otherwise: bb7]
  }
  preds [bb5]
  succs [bb7, bb8]

bb7
  0: StorageDead(_12)
    SourceInfo(regex-syntax/src/ast/parse.rs:1684:56-1684:57)
  1: _7 = const ()
    SourceInfo(regex-syntax/src/ast/parse.rs:1684:58-1684:58)
  2: StorageDead(_11)
    SourceInfo(regex-syntax/src/ast/parse.rs:1684:57-1684:58)
  3: StorageDead(_8)
    SourceInfo(regex-syntax/src/ast/parse.rs:1684:57-1684:58)
  4: StorageDead(_7)
    SourceInfo(regex-syntax/src/ast/parse.rs:1684:57-1684:58)
  5: StorageLive(_15)
    SourceInfo(regex-syntax/src/ast/parse.rs:1685:13-1685:18)
  6: StorageLive(_16)
    SourceInfo(regex-syntax/src/ast/parse.rs:1685:21-1685:25)
  7: _16 = &(*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:1685:21-1685:25)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1685:21-1685:31)
      kind: _15 = ast::parse::ParserI::<'_, P>::pos(move _16) -> [return: bb11, unwind: bb36]
  }
  preds [bb6]
  succs [bb11, bb36]

bb8
  0: StorageDead(_12)
    SourceInfo(regex-syntax/src/ast/parse.rs:1684:56-1684:57)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/lib.rs:1:1-1:1)
      kind: goto -> bb10
  }
  preds [bb6]
  succs [bb10]

bb9
  0: StorageDead(_9)
    SourceInfo(regex-syntax/src/ast/parse.rs:1684:34-1684:35)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/lib.rs:1:1-1:1)
      kind: goto -> bb10
  }
  preds [bb4]
  succs [bb10]

bb10
  0: StorageLive(_14)
    SourceInfo(regex-syntax/src/ast/parse.rs:1684:9-1684:58)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1684:9-1684:58)
      kind: _14 = core::panicking::panic(const "assertion failed: '0' <= self.char() && self.char() <= '7'") -> bb36
  }
  preds [bb8, bb9]
  succs [bb36]

bb11
  0: StorageDead(_16)
    SourceInfo(regex-syntax/src/ast/parse.rs:1685:30-1685:31)
  1: FakeRead(ForLet(None), _15)
    SourceInfo(regex-syntax/src/ast/parse.rs:1685:13-1685:18)
  2: StorageLive(_17)
    SourceInfo(regex-syntax/src/ast/parse.rs:1687:9-1691:11)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1687:9-1691:11)
      kind: goto -> bb12
  }
  preds [bb7]
  succs [bb12]

bb12
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1687:9-1691:11)
      kind: falseUnwind -> [real: bb13, unwind: bb36]
  }
  preds [bb11, bb22]
  succs [bb13, bb36]

bb13
  0: StorageLive(_19)
    SourceInfo(regex-syntax/src/ast/parse.rs:1687:15-1687:26)
  1: StorageLive(_20)
    SourceInfo(regex-syntax/src/ast/parse.rs:1687:15-1687:19)
  2: _20 = &(*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:1687:15-1687:19)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1687:15-1687:26)
      kind: _19 = ast::parse::ParserI::<'_, P>::bump(move _20) -> [return: bb14, unwind: bb36]
  }
  preds [bb12]
  succs [bb14, bb36]

bb14
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1687:15-1687:26)
      kind: switchInt(move _19) -> [0: bb26, otherwise: bb15]
  }
  preds [bb13]
  succs [bb15, bb26]

bb15
  0: StorageDead(_20)
    SourceInfo(regex-syntax/src/ast/parse.rs:1687:25-1687:26)
  1: StorageLive(_21)
    SourceInfo(regex-syntax/src/ast/parse.rs:1688:16-1688:34)
  2: StorageLive(_22)
    SourceInfo(regex-syntax/src/ast/parse.rs:1688:23-1688:34)
  3: StorageLive(_23)
    SourceInfo(regex-syntax/src/ast/parse.rs:1688:23-1688:27)
  4: _23 = &(*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:1688:23-1688:27)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1688:23-1688:34)
      kind: _22 = ast::parse::ParserI::<'_, P>::char(move _23) -> [return: bb16, unwind: bb36]
  }
  preds [bb14]
  succs [bb16, bb36]

bb16
  0: StorageDead(_23)
    SourceInfo(regex-syntax/src/ast/parse.rs:1688:33-1688:34)
  1: _21 = Le(const '0', move _22)
    SourceInfo(regex-syntax/src/ast/parse.rs:1688:16-1688:34)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1688:16-1688:34)
      kind: switchInt(move _21) -> [0: bb25, otherwise: bb17]
  }
  preds [bb15]
  succs [bb17, bb25]

bb17
  0: StorageDead(_22)
    SourceInfo(regex-syntax/src/ast/parse.rs:1688:33-1688:34)
  1: StorageLive(_24)
    SourceInfo(regex-syntax/src/ast/parse.rs:1689:16-1689:34)
  2: StorageLive(_25)
    SourceInfo(regex-syntax/src/ast/parse.rs:1689:16-1689:27)
  3: StorageLive(_26)
    SourceInfo(regex-syntax/src/ast/parse.rs:1689:16-1689:20)
  4: _26 = &(*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:1689:16-1689:20)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1689:16-1689:27)
      kind: _25 = ast::parse::ParserI::<'_, P>::char(move _26) -> [return: bb18, unwind: bb36]
  }
  preds [bb16]
  succs [bb18, bb36]

bb18
  0: StorageDead(_26)
    SourceInfo(regex-syntax/src/ast/parse.rs:1689:26-1689:27)
  1: _24 = Le(move _25, const '7')
    SourceInfo(regex-syntax/src/ast/parse.rs:1689:16-1689:34)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1689:16-1689:34)
      kind: switchInt(move _24) -> [0: bb24, otherwise: bb19]
  }
  preds [bb17]
  succs [bb19, bb24]

bb19
  0: StorageDead(_25)
    SourceInfo(regex-syntax/src/ast/parse.rs:1689:33-1689:34)
  1: StorageLive(_27)
    SourceInfo(regex-syntax/src/ast/parse.rs:1690:16-1690:53)
  2: StorageLive(_28)
    SourceInfo(regex-syntax/src/ast/parse.rs:1690:16-1690:48)
  3: StorageLive(_29)
    SourceInfo(regex-syntax/src/ast/parse.rs:1690:16-1690:33)
  4: StorageLive(_30)
    SourceInfo(regex-syntax/src/ast/parse.rs:1690:16-1690:26)
  5: StorageLive(_31)
    SourceInfo(regex-syntax/src/ast/parse.rs:1690:16-1690:20)
  6: _31 = &(*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:1690:16-1690:20)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1690:16-1690:26)
      kind: _30 = ast::parse::ParserI::<'_, P>::pos(move _31) -> [return: bb20, unwind: bb36]
  }
  preds [bb18]
  succs [bb20, bb36]

bb20
  0: StorageDead(_31)
    SourceInfo(regex-syntax/src/ast/parse.rs:1690:25-1690:26)
  1: _29 = (_30.0: usize)
    SourceInfo(regex-syntax/src/ast/parse.rs:1690:16-1690:33)
  2: StorageLive(_32)
    SourceInfo(regex-syntax/src/ast/parse.rs:1690:36-1690:48)
  3: _32 = (_15.0: usize)
    SourceInfo(regex-syntax/src/ast/parse.rs:1690:36-1690:48)
  4: _33 = SubWithOverflow(_29, _32)
    SourceInfo(regex-syntax/src/ast/parse.rs:1690:16-1690:48)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1690:16-1690:48)
      kind: assert(!move (_33.1: bool), "attempt to compute `{} - {}`, which would overflow", move _29, move _32) -> [success: bb21, unwind: bb36]
  }
  preds [bb19]
  succs [bb21, bb36]

bb21
  0: _28 = move (_33.0: usize)
    SourceInfo(regex-syntax/src/ast/parse.rs:1690:16-1690:48)
  1: StorageDead(_32)
    SourceInfo(regex-syntax/src/ast/parse.rs:1690:47-1690:48)
  2: StorageDead(_29)
    SourceInfo(regex-syntax/src/ast/parse.rs:1690:47-1690:48)
  3: _27 = Le(move _28, const 2_usize)
    SourceInfo(regex-syntax/src/ast/parse.rs:1690:16-1690:53)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1690:16-1690:53)
      kind: switchInt(move _27) -> [0: bb23, otherwise: bb22]
  }
  preds [bb20]
  succs [bb22, bb23]

bb22
  0: StorageDead(_30)
    SourceInfo(regex-syntax/src/ast/parse.rs:1690:52-1690:53)
  1: StorageDead(_28)
    SourceInfo(regex-syntax/src/ast/parse.rs:1690:52-1690:53)
  2: _18 = const ()
    SourceInfo(regex-syntax/src/ast/parse.rs:1691:9-1691:11)
  3: StorageDead(_27)
    SourceInfo(regex-syntax/src/ast/parse.rs:1691:10-1691:11)
  4: StorageDead(_24)
    SourceInfo(regex-syntax/src/ast/parse.rs:1691:10-1691:11)
  5: StorageDead(_21)
    SourceInfo(regex-syntax/src/ast/parse.rs:1691:10-1691:11)
  6: StorageDead(_19)
    SourceInfo(regex-syntax/src/ast/parse.rs:1691:10-1691:11)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1687:9-1691:11)
      kind: goto -> bb12
  }
  preds [bb21]
  succs [bb12]

bb23
  0: StorageDead(_30)
    SourceInfo(regex-syntax/src/ast/parse.rs:1690:52-1690:53)
  1: StorageDead(_28)
    SourceInfo(regex-syntax/src/ast/parse.rs:1690:52-1690:53)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/lib.rs:1:1-1:1)
      kind: goto -> bb27
  }
  preds [bb21]
  succs [bb27]

bb24
  0: StorageDead(_25)
    SourceInfo(regex-syntax/src/ast/parse.rs:1689:33-1689:34)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/lib.rs:1:1-1:1)
      kind: goto -> bb27
  }
  preds [bb18]
  succs [bb27]

bb25
  0: StorageDead(_22)
    SourceInfo(regex-syntax/src/ast/parse.rs:1688:33-1688:34)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/lib.rs:1:1-1:1)
      kind: goto -> bb27
  }
  preds [bb16]
  succs [bb27]

bb26
  0: StorageDead(_20)
    SourceInfo(regex-syntax/src/ast/parse.rs:1687:25-1687:26)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/lib.rs:1:1-1:1)
      kind: goto -> bb27
  }
  preds [bb14]
  succs [bb27]

bb27
  0: StorageLive(_35)
    SourceInfo(regex-syntax/src/ast/parse.rs:1687:9-1691:11)
  1: _17 = const ()
    SourceInfo(regex-syntax/src/ast/parse.rs:1687:9-1691:11)
  2: StorageDead(_35)
    SourceInfo(regex-syntax/src/ast/parse.rs:1691:10-1691:11)
  3: StorageDead(_27)
    SourceInfo(regex-syntax/src/ast/parse.rs:1691:10-1691:11)
  4: StorageDead(_24)
    SourceInfo(regex-syntax/src/ast/parse.rs:1691:10-1691:11)
  5: StorageDead(_21)
    SourceInfo(regex-syntax/src/ast/parse.rs:1691:10-1691:11)
  6: StorageDead(_19)
    SourceInfo(regex-syntax/src/ast/parse.rs:1691:10-1691:11)
  7: StorageDead(_17)
    SourceInfo(regex-syntax/src/ast/parse.rs:1691:10-1691:11)
  8: StorageLive(_37)
    SourceInfo(regex-syntax/src/ast/parse.rs:1692:13-1692:16)
  9: StorageLive(_38)
    SourceInfo(regex-syntax/src/ast/parse.rs:1692:19-1692:23)
  10: _38 = &(*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:1692:19-1692:23)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1692:19-1692:29)
      kind: _37 = ast::parse::ParserI::<'_, P>::pos(move _38) -> [return: bb28, unwind: bb36]
  }
  preds [bb23, bb24, bb25, bb26]
  succs [bb28, bb36]

bb28
  0: StorageDead(_38)
    SourceInfo(regex-syntax/src/ast/parse.rs:1692:28-1692:29)
  1: FakeRead(ForLet(None), _37)
    SourceInfo(regex-syntax/src/ast/parse.rs:1692:13-1692:16)
  2: StorageLive(_39)
    SourceInfo(regex-syntax/src/ast/parse.rs:1693:13-1693:18)
  3: StorageLive(_40)
    SourceInfo(regex-syntax/src/ast/parse.rs:1693:36-1693:62)
  4: StorageLive(_41)
    SourceInfo(regex-syntax/src/ast/parse.rs:1693:22-1693:36)
  5: StorageLive(_42)
    SourceInfo(regex-syntax/src/ast/parse.rs:1693:22-1693:36)
  6: StorageLive(_43)
    SourceInfo(regex-syntax/src/ast/parse.rs:1693:22-1693:26)
  7: _43 = &(*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:1693:22-1693:26)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1693:22-1693:36)
      kind: _42 = ast::parse::ParserI::<'_, P>::pattern(move _43) -> [return: bb29, unwind: bb36]
  }
  preds [bb27]
  succs [bb29, bb36]

bb29
  0: _41 = &(*_42)
    SourceInfo(regex-syntax/src/ast/parse.rs:1693:22-1693:36)
  1: StorageDead(_43)
    SourceInfo(regex-syntax/src/ast/parse.rs:1693:35-1693:36)
  2: StorageLive(_44)
    SourceInfo(regex-syntax/src/ast/parse.rs:1693:37-1693:61)
  3: StorageLive(_45)
    SourceInfo(regex-syntax/src/ast/parse.rs:1693:37-1693:49)
  4: _45 = (_15.0: usize)
    SourceInfo(regex-syntax/src/ast/parse.rs:1693:37-1693:49)
  5: StorageLive(_46)
    SourceInfo(regex-syntax/src/ast/parse.rs:1693:51-1693:61)
  6: _46 = (_37.0: usize)
    SourceInfo(regex-syntax/src/ast/parse.rs:1693:51-1693:61)
  7: _44 = core::ops::Range::<usize> { start: move _45, end: move _46 }
    SourceInfo(regex-syntax/src/ast/parse.rs:1693:37-1693:61)
  8: StorageDead(_46)
    SourceInfo(regex-syntax/src/ast/parse.rs:1693:60-1693:61)
  9: StorageDead(_45)
    SourceInfo(regex-syntax/src/ast/parse.rs:1693:60-1693:61)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1693:36-1693:62)
      kind: _40 = <str as core::ops::Index<core::ops::Range<usize>>>::index(move _41, move _44) -> [return: bb30, unwind: bb36]
  }
  preds [bb28]
  succs [bb30, bb36]

bb30
  0: StorageDead(_44)
    SourceInfo(regex-syntax/src/ast/parse.rs:1693:61-1693:62)
  1: StorageDead(_41)
    SourceInfo(regex-syntax/src/ast/parse.rs:1693:61-1693:62)
  2: _39 = &(*_40)
    SourceInfo(regex-syntax/src/ast/parse.rs:1693:21-1693:62)
  3: FakeRead(ForLet(None), _39)
    SourceInfo(regex-syntax/src/ast/parse.rs:1693:13-1693:18)
  4: StorageLive(_47)
    SourceInfo(regex-syntax/src/ast/parse.rs:1696:13-1696:22)
  5: StorageLive(_48)
    SourceInfo(regex-syntax/src/ast/parse.rs:1697:13-1697:42)
  6: StorageLive(_49)
    SourceInfo(regex-syntax/src/ast/parse.rs:1697:33-1697:38)
  7: _49 = &(*_39)
    SourceInfo(regex-syntax/src/ast/parse.rs:1697:33-1697:38)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1697:13-1697:42)
      kind: _48 = core::num::<impl u32>::from_str_radix(move _49, const 8_u32) -> [return: bb31, unwind: bb36]
  }
  preds [bb29]
  succs [bb31, bb36]

bb31
  0: StorageDead(_49)
    SourceInfo(regex-syntax/src/ast/parse.rs:1697:41-1697:42)
  1: StorageLive(_50)
    SourceInfo(regex-syntax/src/ast/parse.rs:1697:50-1697:70)
  2: StorageLive(_51)
    SourceInfo(regex-syntax/src/ast/parse.rs:1697:50-1697:70)
  3: _51 = const "valid octal number"
    SourceInfo(regex-syntax/src/ast/parse.rs:1697:50-1697:70)
  4: _50 = &(*_51)
    SourceInfo(regex-syntax/src/ast/parse.rs:1697:50-1697:70)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1697:13-1697:71)
      kind: _47 = core::result::Result::<u32, core::num::ParseIntError>::expect(move _48, move _50) -> [return: bb32, unwind: bb36]
  }
  preds [bb30]
  succs [bb32, bb36]

bb32
  0: StorageDead(_50)
    SourceInfo(regex-syntax/src/ast/parse.rs:1697:70-1697:71)
  1: StorageDead(_48)
    SourceInfo(regex-syntax/src/ast/parse.rs:1697:70-1697:71)
  2: FakeRead(ForLet(None), _47)
    SourceInfo(regex-syntax/src/ast/parse.rs:1696:13-1696:22)
  3: StorageDead(_51)
    SourceInfo(regex-syntax/src/ast/parse.rs:1697:71-1697:72)
  4: StorageLive(_52)
    SourceInfo(regex-syntax/src/ast/parse.rs:1700:13-1700:14)
  5: StorageLive(_53)
    SourceInfo(regex-syntax/src/ast/parse.rs:1700:17-1700:42)
  6: StorageLive(_54)
    SourceInfo(regex-syntax/src/ast/parse.rs:1700:32-1700:41)
  7: _54 = _47
    SourceInfo(regex-syntax/src/ast/parse.rs:1700:32-1700:41)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1700:17-1700:42)
      kind: _53 = core::char::methods::<impl char>::from_u32(move _54) -> [return: bb33, unwind: bb36]
  }
  preds [bb31]
  succs [bb33, bb36]

bb33
  0: StorageDead(_54)
    SourceInfo(regex-syntax/src/ast/parse.rs:1700:41-1700:42)
  1: StorageLive(_55)
    SourceInfo(regex-syntax/src/ast/parse.rs:1700:50-1700:72)
  2: StorageLive(_56)
    SourceInfo(regex-syntax/src/ast/parse.rs:1700:50-1700:72)
  3: _56 = const "Unicode scalar value"
    SourceInfo(regex-syntax/src/ast/parse.rs:1700:50-1700:72)
  4: _55 = &(*_56)
    SourceInfo(regex-syntax/src/ast/parse.rs:1700:50-1700:72)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1700:17-1700:73)
      kind: _52 = core::option::Option::<char>::expect(move _53, move _55) -> [return: bb34, unwind: bb36]
  }
  preds [bb32]
  succs [bb34, bb36]

bb34
  0: StorageDead(_55)
    SourceInfo(regex-syntax/src/ast/parse.rs:1700:72-1700:73)
  1: StorageDead(_53)
    SourceInfo(regex-syntax/src/ast/parse.rs:1700:72-1700:73)
  2: FakeRead(ForLet(None), _52)
    SourceInfo(regex-syntax/src/ast/parse.rs:1700:13-1700:14)
  3: StorageDead(_56)
    SourceInfo(regex-syntax/src/ast/parse.rs:1700:73-1700:74)
  4: StorageLive(_57)
    SourceInfo(regex-syntax/src/ast/parse.rs:1702:19-1702:40)
  5: StorageLive(_58)
    SourceInfo(regex-syntax/src/ast/parse.rs:1702:29-1702:34)
  6: _58 = _15
    SourceInfo(regex-syntax/src/ast/parse.rs:1702:29-1702:34)
  7: StorageLive(_59)
    SourceInfo(regex-syntax/src/ast/parse.rs:1702:36-1702:39)
  8: _59 = _37
    SourceInfo(regex-syntax/src/ast/parse.rs:1702:36-1702:39)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1702:19-1702:40)
      kind: _57 = ast::Span::new(move _58, move _59) -> [return: bb35, unwind: bb36]
  }
  preds [bb33]
  succs [bb35, bb36]

bb35
  0: StorageDead(_59)
    SourceInfo(regex-syntax/src/ast/parse.rs:1702:39-1702:40)
  1: StorageDead(_58)
    SourceInfo(regex-syntax/src/ast/parse.rs:1702:39-1702:40)
  2: StorageLive(_60)
    SourceInfo(regex-syntax/src/ast/parse.rs:1703:19-1703:42)
  3: _60 = ast::LiteralKind::Octal
    SourceInfo(regex-syntax/src/ast/parse.rs:1703:19-1703:42)
  4: StorageLive(_61)
    SourceInfo(regex-syntax/src/ast/parse.rs:1704:13-1704:14)
  5: _61 = _52
    SourceInfo(regex-syntax/src/ast/parse.rs:1704:13-1704:14)
  6: _0 = ast::Literal { span: move _57, kind: move _60, c: move _61 }
    SourceInfo(regex-syntax/src/ast/parse.rs:1701:9-1705:10)
  7: StorageDead(_61)
    SourceInfo(regex-syntax/src/ast/parse.rs:1705:9-1705:10)
  8: StorageDead(_60)
    SourceInfo(regex-syntax/src/ast/parse.rs:1705:9-1705:10)
  9: StorageDead(_57)
    SourceInfo(regex-syntax/src/ast/parse.rs:1705:9-1705:10)
  10: StorageDead(_52)
    SourceInfo(regex-syntax/src/ast/parse.rs:1706:5-1706:6)
  11: StorageDead(_47)
    SourceInfo(regex-syntax/src/ast/parse.rs:1706:5-1706:6)
  12: StorageDead(_42)
    SourceInfo(regex-syntax/src/ast/parse.rs:1706:5-1706:6)
  13: StorageDead(_40)
    SourceInfo(regex-syntax/src/ast/parse.rs:1706:5-1706:6)
  14: StorageDead(_39)
    SourceInfo(regex-syntax/src/ast/parse.rs:1706:5-1706:6)
  15: StorageDead(_37)
    SourceInfo(regex-syntax/src/ast/parse.rs:1706:5-1706:6)
  16: StorageDead(_15)
    SourceInfo(regex-syntax/src/ast/parse.rs:1706:5-1706:6)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1706:6-1706:6)
      kind: return
  }
  preds [bb34]
  succs []

bb36
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1682:5-1706:6)
      kind: resume
  }
  preds [bb0, bb2, bb3, bb5, bb7, bb10, bb12, bb13, bb15, bb17, bb19, bb20, bb27, bb28, bb29, bb30, bb31, bb32, bb33, bb34]
  succs []

