{
  "regex-syntax/src/ast/parse.rs:1899:29:1899:57": [
    {
      "Try": "self.push_class_open(union)?"
    }
  ],
  "regex-syntax/src/ast/parse.rs:1915:29:1915:47": [
    {
      "Bool": {
        "Other": "self.bump_if(\"--\")"
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1921:24:1921:48": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.peek() == Some('~')",
          "lhs": "self.peek()",
          "rhs": "Some('~')",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1893:25:1893:70": [
    {
      "Bool": {
        "Other": "self.parser().stack_class.borrow().is_empty()"
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1887:19:1887:30": [
    {
      "Match": {
        "match_source": "regex-syntax/src/ast/parse.rs:1887:19:1887:30",
        "match_str": "self.char()",
        "match_kind": "Other",
        "arms": {
          "regex-syntax/src/ast/parse.rs:1901:17:1901:20": {
            "pat": {
              "pat_str": "']'",
              "kind": {
                "Other": 93
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/ast/parse.rs:1901:24:1906:18"
          },
          "regex-syntax/src/ast/parse.rs:1888:17:1888:20": {
            "pat": {
              "pat_str": "'['",
              "kind": {
                "Other": 91
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/ast/parse.rs:1888:24:1900:18"
          },
          "regex-syntax/src/ast/parse.rs:1914:17:1914:20": {
            "pat": {
              "pat_str": "'-'",
              "kind": {
                "Other": 45
              }
            },
            "guard": {
              "regex-syntax/src/ast/parse.rs:1914:24:1914:48": [
                {
                  "Bool": {
                    "Binary": {
                      "kind": "Eq",
                      "expr": "self.peek() == Some('-')",
                      "lhs": "self.peek()",
                      "rhs": "Some('-')",
                      "cmp_with_int": false
                    }
                  }
                }
              ]
            },
            "body_source": "regex-syntax/src/ast/parse.rs:1914:52:1920:18"
          },
          "regex-syntax/src/ast/parse.rs:1907:17:1907:20": {
            "pat": {
              "pat_str": "'&'",
              "kind": {
                "Other": 38
              }
            },
            "guard": {
              "regex-syntax/src/ast/parse.rs:1907:24:1907:48": [
                {
                  "Bool": {
                    "Binary": {
                      "kind": "Eq",
                      "expr": "self.peek() == Some('&')",
                      "lhs": "self.peek()",
                      "rhs": "Some('&')",
                      "cmp_with_int": false
                    }
                  }
                }
              ]
            },
            "body_source": "regex-syntax/src/ast/parse.rs:1907:52:1913:18"
          },
          "regex-syntax/src/ast/parse.rs:1921:17:1921:20": {
            "pat": {
              "pat_str": "'~'",
              "kind": {
                "Other": 126
              }
            },
            "guard": {
              "regex-syntax/src/ast/parse.rs:1921:24:1921:48": [
                {
                  "Bool": {
                    "Binary": {
                      "kind": "Eq",
                      "expr": "self.peek() == Some('~')",
                      "lhs": "self.peek()",
                      "rhs": "Some('~')",
                      "cmp_with_int": false
                    }
                  }
                }
              ]
            },
            "body_source": "regex-syntax/src/ast/parse.rs:1921:52:1927:18"
          },
          "regex-syntax/src/ast/parse.rs:1928:17:1928:18": {
            "pat": {
              "pat_str": "_",
              "kind": "Wild"
            },
            "guard": null,
            "body_source": "regex-syntax/src/ast/parse.rs:1928:22:1930:18"
          }
        }
      }
    }
  ],
  "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15:38:32": [
    {
      "Match": {
        "match_source": "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15:38:32",
        "match_str": "(&$left, &$right)",
        "match_kind": {
          "StructLike": null
        },
        "arms": {
          "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:13:39:34": {
            "pat": {
              "pat_str": "(left_val, right_val)",
              "kind": {
                "StructLike": {
                  "0": [
                    null,
                    "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14:39:22"
                  ],
                  "1": [
                    null,
                    "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24:39:33"
                  ]
                }
              }
            },
            "guard": null,
            "body_source": null
          }
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1908:29:1908:47": [
    {
      "Bool": {
        "Other": "self.bump_if(\"&&\")"
      }
    }
  ],
  "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21:40:46": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "(*left_val == *right_val)",
          "lhs": "*left_val",
          "rhs": "*right_val",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1894:28:1894:74": [
    {
      "Bool": {
        "Other": "let Some(cls) = self.maybe_parse_ascii_class()"
      }
    }
  ],
  "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:9:48:10": [
    {
      "Match": {
        "match_source": "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15:38:32",
        "match_str": "(&$left, &$right)",
        "match_kind": {
          "StructLike": null
        },
        "arms": {
          "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:13:39:34": {
            "pat": {
              "pat_str": "(left_val, right_val)",
              "kind": {
                "StructLike": {
                  "0": [
                    null,
                    "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14:39:22"
                  ],
                  "1": [
                    null,
                    "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24:39:33"
                  ]
                }
              }
            },
            "guard": null,
            "body_source": null
          }
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1901:30:1901:52": [
    {
      "Try": "self.pop_class(union)?"
    },
    {
      "Match": {
        "match_source": "regex-syntax/src/ast/parse.rs:1901:30:1901:52",
        "match_str": "self.pop_class(union)?",
        "match_kind": {
          "Enum": [
            "Left",
            "Right"
          ]
        },
        "arms": {
          "regex-syntax/src/ast/parse.rs:1902:21:1902:47": {
            "pat": {
              "pat_str": "Either::Left(nested_union)",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/ast/parse.rs:1902:51:1904:22"
          },
          "regex-syntax/src/ast/parse.rs:1905:21:1905:41": {
            "pat": {
              "pat_str": "Either::Right(class)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/ast/parse.rs:1905:45:1905:61"
          }
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1914:24:1914:48": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.peek() == Some('-')",
          "lhs": "self.peek()",
          "rhs": "Some('-')",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1907:24:1907:48": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.peek() == Some('&')",
          "lhs": "self.peek()",
          "rhs": "Some('&')",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1922:29:1922:47": [
    {
      "Bool": {
        "Other": "self.bump_if(\"~~\")"
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1884:16:1884:29": [
    {
      "Bool": {
        "Other": "self.is_eof()"
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1929:32:1929:61": [
    {
      "Try": "self.parse_set_class_range()?"
    }
  ]
}