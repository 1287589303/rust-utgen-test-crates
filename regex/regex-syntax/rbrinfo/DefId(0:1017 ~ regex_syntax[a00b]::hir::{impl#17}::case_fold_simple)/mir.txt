bb0
  0: StorageLive(_2)
    SourceInfo(regex-syntax/src/hir/mod.rs:1400:9-1400:77)
  1: StorageLive(_3)
    SourceInfo(regex-syntax/src/hir/mod.rs:1400:9-1400:36)
  2: StorageLive(_4)
    SourceInfo(regex-syntax/src/hir/mod.rs:1400:9-1400:17)
  3: _4 = &mut ((*_1).0: hir::interval::IntervalSet<hir::ClassBytesRange>)
    SourceInfo(regex-syntax/src/hir/mod.rs:1400:9-1400:17)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1400:9-1400:36)
      kind: _3 = hir::interval::IntervalSet::<hir::ClassBytesRange>::case_fold_simple(move _4) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-syntax/src/hir/mod.rs:1400:35-1400:36)
  1: StorageLive(_5)
    SourceInfo(regex-syntax/src/hir/mod.rs:1400:44-1400:76)
  2: StorageLive(_6)
    SourceInfo(regex-syntax/src/hir/mod.rs:1400:44-1400:76)
  3: _6 = const "ASCII case folding never fails"
    SourceInfo(regex-syntax/src/hir/mod.rs:1400:44-1400:76)
  4: _5 = &(*_6)
    SourceInfo(regex-syntax/src/hir/mod.rs:1400:44-1400:76)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1400:9-1400:77)
      kind: _2 = core::result::Result::<(), unicode::CaseFoldError>::expect(move _3, move _5) -> [return: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_5)
    SourceInfo(regex-syntax/src/hir/mod.rs:1400:76-1400:77)
  1: StorageDead(_3)
    SourceInfo(regex-syntax/src/hir/mod.rs:1400:76-1400:77)
  2: StorageDead(_6)
    SourceInfo(regex-syntax/src/hir/mod.rs:1400:77-1400:78)
  3: StorageDead(_2)
    SourceInfo(regex-syntax/src/hir/mod.rs:1400:77-1400:78)
  4: _0 = const ()
    SourceInfo(regex-syntax/src/hir/mod.rs:1399:40-1401:6)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1401:6-1401:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1399:5-1401:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

