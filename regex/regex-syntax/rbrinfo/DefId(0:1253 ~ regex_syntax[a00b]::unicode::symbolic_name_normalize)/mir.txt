bb0
  0: StorageLive(_2)
    SourceInfo(regex-syntax/src/unicode.rs:880:9-880:16)
  1: StorageLive(_3)
    SourceInfo(regex-syntax/src/unicode.rs:880:19-880:31)
  2: StorageLive(_4)
    SourceInfo(regex-syntax/src/unicode.rs:880:19-880:31)
  3: StorageLive(_5)
    SourceInfo(regex-syntax/src/unicode.rs:880:19-880:20)
  4: _5 = &(*_1)
    SourceInfo(regex-syntax/src/unicode.rs:880:19-880:20)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/unicode.rs:880:19-880:31)
      kind: _4 = core::str::<impl str>::as_bytes(move _5) -> [return: bb1, unwind: bb13]
  }
  preds []
  succs [bb1, bb13]

bb1
  0: _3 = &(*_4)
    SourceInfo(regex-syntax/src/unicode.rs:880:19-880:31)
  1: StorageDead(_5)
    SourceInfo(regex-syntax/src/unicode.rs:880:30-880:31)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/unicode.rs:880:19-880:40)
      kind: _2 = std::slice::<impl [u8]>::to_vec(move _3) -> [return: bb2, unwind: bb13]
  }
  preds [bb0]
  succs [bb2, bb13]

bb2
  0: StorageDead(_3)
    SourceInfo(regex-syntax/src/unicode.rs:880:39-880:40)
  1: FakeRead(ForLet(None), _2)
    SourceInfo(regex-syntax/src/unicode.rs:880:9-880:16)
  2: StorageDead(_4)
    SourceInfo(regex-syntax/src/unicode.rs:880:40-880:41)
  3: StorageLive(_6)
    SourceInfo(regex-syntax/src/unicode.rs:881:9-881:12)
  4: StorageLive(_7)
    SourceInfo(regex-syntax/src/unicode.rs:881:15-881:54)
  5: StorageLive(_8)
    SourceInfo(regex-syntax/src/unicode.rs:881:15-881:54)
  6: StorageLive(_9)
    SourceInfo(regex-syntax/src/unicode.rs:881:45-881:53)
  7: StorageLive(_10)
    SourceInfo(regex-syntax/src/unicode.rs:881:45-881:53)
  8: StorageLive(_11)
    SourceInfo(regex-syntax/src/unicode.rs:881:45-881:53)
  9: StorageLive(_12)
    SourceInfo(regex-syntax/src/unicode.rs:881:45-881:53)
  10: _12 = &mut _2
    SourceInfo(regex-syntax/src/unicode.rs:881:45-881:53)
  11: _11 = &mut (*_12)
    SourceInfo(regex-syntax/src/unicode.rs:881:45-881:53)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/unicode.rs:881:45-881:53)
      kind: _10 = <std::vec::Vec<u8> as core::ops::DerefMut>::deref_mut(move _11) -> [return: bb3, unwind: bb12]
  }
  preds [bb1]
  succs [bb3, bb12]

bb3
  0: _9 = &mut (*_10)
    SourceInfo(regex-syntax/src/unicode.rs:881:45-881:53)
  1: StorageDead(_11)
    SourceInfo(regex-syntax/src/unicode.rs:881:52-881:53)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/unicode.rs:881:15-881:54)
      kind: _8 = unicode::symbolic_name_normalize_bytes(move _9) -> [return: bb4, unwind: bb12]
  }
  preds [bb2]
  succs [bb4, bb12]

bb4
  0: _7 = &(*_8)
    SourceInfo(regex-syntax/src/unicode.rs:881:15-881:54)
  1: StorageDead(_9)
    SourceInfo(regex-syntax/src/unicode.rs:881:53-881:54)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/unicode.rs:881:15-881:60)
      kind: _6 = core::slice::<impl [u8]>::len(move _7) -> [return: bb5, unwind: bb12]
  }
  preds [bb3]
  succs [bb5, bb12]

bb5
  0: StorageDead(_7)
    SourceInfo(regex-syntax/src/unicode.rs:881:59-881:60)
  1: FakeRead(ForLet(None), _6)
    SourceInfo(regex-syntax/src/unicode.rs:881:9-881:12)
  2: StorageDead(_12)
    SourceInfo(regex-syntax/src/unicode.rs:881:60-881:61)
  3: StorageDead(_10)
    SourceInfo(regex-syntax/src/unicode.rs:881:60-881:61)
  4: StorageDead(_8)
    SourceInfo(regex-syntax/src/unicode.rs:881:60-881:61)
  5: StorageLive(_13)
    SourceInfo(regex-syntax/src/unicode.rs:882:5-882:22)
  6: StorageLive(_14)
    SourceInfo(regex-syntax/src/unicode.rs:882:5-882:8)
  7: _14 = &mut _2
    SourceInfo(regex-syntax/src/unicode.rs:882:5-882:8)
  8: StorageLive(_15)
    SourceInfo(regex-syntax/src/unicode.rs:882:18-882:21)
  9: _15 = _6
    SourceInfo(regex-syntax/src/unicode.rs:882:18-882:21)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/unicode.rs:882:5-882:22)
      kind: _13 = std::vec::Vec::<u8>::truncate(move _14, move _15) -> [return: bb6, unwind: bb12]
  }
  preds [bb4]
  succs [bb6, bb12]

bb6
  0: StorageDead(_15)
    SourceInfo(regex-syntax/src/unicode.rs:882:21-882:22)
  1: StorageDead(_14)
    SourceInfo(regex-syntax/src/unicode.rs:882:21-882:22)
  2: StorageDead(_13)
    SourceInfo(regex-syntax/src/unicode.rs:882:22-882:23)
  3: StorageLive(_16)
    SourceInfo(regex-syntax/src/unicode.rs:889:5-889:27)
  4: StorageLive(_17)
    SourceInfo(regex-syntax/src/unicode.rs:889:23-889:26)
  5: _17 = move _2
    SourceInfo(regex-syntax/src/unicode.rs:889:23-889:26)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/unicode.rs:889:5-889:27)
      kind: _16 = std::string::String::from_utf8(move _17) -> [return: bb7, unwind: bb11]
  }
  preds [bb5]
  succs [bb7, bb11]

bb7
  0: StorageDead(_17)
    SourceInfo(regex-syntax/src/unicode.rs:889:26-889:27)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/unicode.rs:889:5-889:36)
      kind: _0 = core::result::Result::<std::string::String, std::string::FromUtf8Error>::unwrap(move _16) -> [return: bb8, unwind: bb10]
  }
  preds [bb6]
  succs [bb8, bb10]

bb8
  0: StorageDead(_16)
    SourceInfo(regex-syntax/src/unicode.rs:889:35-889:36)
  1: StorageDead(_6)
    SourceInfo(regex-syntax/src/unicode.rs:890:1-890:2)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/unicode.rs:890:1-890:2)
      kind: drop(_2) -> [return: bb9, unwind: bb13]
  }
  preds [bb7]
  succs [bb9, bb13]

bb9
  0: StorageDead(_2)
    SourceInfo(regex-syntax/src/unicode.rs:890:1-890:2)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/unicode.rs:890:2-890:2)
      kind: return
  }
  preds [bb8]
  succs []

bb10
  Terminator {
      source_info: SourceInfo(regex-syntax/src/unicode.rs:889:35-889:36)
      kind: drop(_16) -> [return: bb12, unwind terminate(cleanup)]
  }
  preds [bb7]
  succs [bb12]

bb11
  Terminator {
      source_info: SourceInfo(regex-syntax/src/unicode.rs:889:26-889:27)
      kind: drop(_17) -> [return: bb12, unwind terminate(cleanup)]
  }
  preds [bb6]
  succs [bb12]

bb12
  Terminator {
      source_info: SourceInfo(regex-syntax/src/unicode.rs:890:1-890:2)
      kind: drop(_2) -> [return: bb13, unwind terminate(cleanup)]
  }
  preds [bb2, bb3, bb4, bb5, bb10, bb11]
  succs [bb13]

bb13
  Terminator {
      source_info: SourceInfo(regex-syntax/src/unicode.rs:879:1-890:2)
      kind: resume
  }
  preds [bb0, bb1, bb8, bb12]
  succs []

