{
  "regex-syntax/src/hir/interval.rs:322:24:322:37": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "drain_end - 1",
          "lhs": "drain_end",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/hir/interval.rs:323:37:323:50": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "drain_end - 1",
          "lhs": "drain_end",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/hir/interval.rs:297:12:297:34": [
    {
      "Bool": {
        "Other": "self.ranges.is_empty()"
      }
    }
  ],
  "regex-syntax/src/hir/interval.rs:322:12:322:70": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "self.ranges[drain_end - 1].upper() < I::Bound::max_value()",
          "lhs": "self.ranges[drain_end - 1].upper()",
          "rhs": "I::Bound::max_value()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/hir/interval.rs:317:18:317:30": [
    {
      "For": {
        "iter_var": "i",
        "iter_range": "1..drain_end"
      }
    }
  ],
  "regex-syntax/src/hir/interval.rs:318:37:318:42": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "i - 1",
          "lhs": "i",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/hir/interval.rs:313:12:313:58": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "self.ranges[0].lower() > I::Bound::min_value()",
          "lhs": "self.ranges[0].lower()",
          "rhs": "I::Bound::min_value()",
          "cmp_with_int": false
        }
      }
    }
  ]
}