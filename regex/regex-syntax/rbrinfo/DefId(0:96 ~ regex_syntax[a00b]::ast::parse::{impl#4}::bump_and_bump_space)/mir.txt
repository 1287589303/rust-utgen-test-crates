bb0
  0: StorageLive(_2)
    SourceInfo(regex-syntax/src/ast/parse.rs:542:9-544:10)
  1: StorageLive(_3)
    SourceInfo(regex-syntax/src/ast/parse.rs:542:13-542:24)
  2: StorageLive(_4)
    SourceInfo(regex-syntax/src/ast/parse.rs:542:13-542:17)
  3: _4 = &(*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:542:13-542:17)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:542:13-542:24)
      kind: _3 = ast::parse::ParserI::<'_, P>::bump(move _4) -> [return: bb1, unwind: bb7]
  }
  preds []
  succs [bb1, bb7]

bb1
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:542:13-542:24)
      kind: switchInt(move _3) -> [0: bb3, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_4)
    SourceInfo(regex-syntax/src/ast/parse.rs:542:23-542:24)
  1: _2 = const ()
    SourceInfo(regex-syntax/src/ast/parse.rs:544:10-544:10)
  2: StorageDead(_3)
    SourceInfo(regex-syntax/src/ast/parse.rs:544:9-544:10)
  3: StorageDead(_2)
    SourceInfo(regex-syntax/src/ast/parse.rs:544:9-544:10)
  4: StorageLive(_6)
    SourceInfo(regex-syntax/src/ast/parse.rs:545:9-545:26)
  5: StorageLive(_7)
    SourceInfo(regex-syntax/src/ast/parse.rs:545:9-545:13)
  6: _7 = &(*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:545:9-545:13)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:545:9-545:26)
      kind: _6 = ast::parse::ParserI::<'_, P>::bump_space(move _7) -> [return: bb4, unwind: bb7]
  }
  preds [bb1]
  succs [bb4, bb7]

bb3
  0: StorageDead(_4)
    SourceInfo(regex-syntax/src/ast/parse.rs:542:23-542:24)
  1: _0 = const false
    SourceInfo(regex-syntax/src/ast/parse.rs:543:20-543:25)
  2: StorageDead(_3)
    SourceInfo(regex-syntax/src/ast/parse.rs:544:9-544:10)
  3: StorageDead(_2)
    SourceInfo(regex-syntax/src/ast/parse.rs:544:9-544:10)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:547:6-547:6)
      kind: goto -> bb6
  }
  preds [bb1]
  succs [bb6]

bb4
  0: StorageDead(_7)
    SourceInfo(regex-syntax/src/ast/parse.rs:545:25-545:26)
  1: StorageDead(_6)
    SourceInfo(regex-syntax/src/ast/parse.rs:545:26-545:27)
  2: StorageLive(_8)
    SourceInfo(regex-syntax/src/ast/parse.rs:546:10-546:23)
  3: StorageLive(_9)
    SourceInfo(regex-syntax/src/ast/parse.rs:546:10-546:14)
  4: _9 = &(*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:546:10-546:14)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:546:10-546:23)
      kind: _8 = ast::parse::ParserI::<'_, P>::is_eof(move _9) -> [return: bb5, unwind: bb7]
  }
  preds [bb2]
  succs [bb5, bb7]

bb5
  0: StorageDead(_9)
    SourceInfo(regex-syntax/src/ast/parse.rs:546:22-546:23)
  1: _0 = Not(move _8)
    SourceInfo(regex-syntax/src/ast/parse.rs:546:9-546:23)
  2: StorageDead(_8)
    SourceInfo(regex-syntax/src/ast/parse.rs:546:22-546:23)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:547:6-547:6)
      kind: goto -> bb6
  }
  preds [bb4]
  succs [bb6]

bb6
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:547:6-547:6)
      kind: return
  }
  preds [bb3, bb5]
  succs []

bb7
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:541:5-547:6)
      kind: resume
  }
  preds [bb0, bb2, bb4]
  succs []

