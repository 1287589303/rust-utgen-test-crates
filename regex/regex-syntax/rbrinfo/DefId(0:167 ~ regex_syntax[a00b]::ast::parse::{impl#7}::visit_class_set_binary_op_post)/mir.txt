bb0
  0: StorageLive(_3)
    SourceInfo(regex-syntax/src/ast/parse.rs:2412:9-2412:31)
  1: StorageLive(_4)
    SourceInfo(regex-syntax/src/ast/parse.rs:2412:9-2412:13)
  2: _4 = &mut (*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:2412:9-2412:13)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:2412:9-2412:31)
      kind: _3 = ast::parse::NestLimiter::<'_, '_, P>::decrement_depth(move _4) -> [return: bb1, unwind: bb2]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-syntax/src/ast/parse.rs:2412:30-2412:31)
  1: StorageDead(_3)
    SourceInfo(regex-syntax/src/ast/parse.rs:2412:31-2412:32)
  2: StorageLive(_5)
    SourceInfo(regex-syntax/src/ast/parse.rs:2413:12-2413:14)
  3: _5 = ()
    SourceInfo(regex-syntax/src/ast/parse.rs:2413:12-2413:14)
  4: _0 = core::result::Result::<(), ast::Error>::Ok(move _5)
    SourceInfo(regex-syntax/src/ast/parse.rs:2413:9-2413:15)
  5: StorageDead(_5)
    SourceInfo(regex-syntax/src/ast/parse.rs:2413:14-2413:15)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:2414:6-2414:6)
      kind: return
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:2408:5-2414:6)
      kind: resume
  }
  preds [bb0]
  succs []

