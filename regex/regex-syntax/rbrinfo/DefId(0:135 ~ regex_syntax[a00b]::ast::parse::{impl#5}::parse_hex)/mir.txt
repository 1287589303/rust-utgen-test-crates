bb0
  0: StorageLive(_2)
    SourceInfo(regex-syntax/src/ast/parse.rs:1714:9-1716:10)
  1: StorageLive(_3)
    SourceInfo(regex-syntax/src/ast/parse.rs:1715:13-1715:31)
  2: StorageLive(_4)
    SourceInfo(regex-syntax/src/ast/parse.rs:1715:13-1715:24)
  3: StorageLive(_5)
    SourceInfo(regex-syntax/src/ast/parse.rs:1715:13-1715:17)
  4: _5 = &(*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:1715:13-1715:17)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1715:13-1715:24)
      kind: _4 = ast::parse::ParserI::<'_, P>::char(move _5) -> [return: bb1, unwind: bb31]
  }
  preds []
  succs [bb1, bb31]

bb1
  0: StorageDead(_5)
    SourceInfo(regex-syntax/src/ast/parse.rs:1715:23-1715:24)
  1: _3 = Eq(move _4, const 'x')
    SourceInfo(regex-syntax/src/ast/parse.rs:1715:13-1715:31)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1715:13-1715:31)
      kind: switchInt(move _3) -> [0: bb3, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_4)
    SourceInfo(regex-syntax/src/ast/parse.rs:1715:30-1715:31)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1714:9-1716:10)
      kind: goto -> bb10
  }
  preds [bb1]
  succs [bb10]

bb3
  0: StorageDead(_4)
    SourceInfo(regex-syntax/src/ast/parse.rs:1715:30-1715:31)
  1: StorageLive(_6)
    SourceInfo(regex-syntax/src/ast/parse.rs:1715:35-1715:53)
  2: StorageLive(_7)
    SourceInfo(regex-syntax/src/ast/parse.rs:1715:35-1715:46)
  3: StorageLive(_8)
    SourceInfo(regex-syntax/src/ast/parse.rs:1715:35-1715:39)
  4: _8 = &(*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:1715:35-1715:39)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1715:35-1715:46)
      kind: _7 = ast::parse::ParserI::<'_, P>::char(move _8) -> [return: bb4, unwind: bb31]
  }
  preds [bb1]
  succs [bb4, bb31]

bb4
  0: StorageDead(_8)
    SourceInfo(regex-syntax/src/ast/parse.rs:1715:45-1715:46)
  1: _6 = Eq(move _7, const 'u')
    SourceInfo(regex-syntax/src/ast/parse.rs:1715:35-1715:53)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1715:35-1715:53)
      kind: switchInt(move _6) -> [0: bb6, otherwise: bb5]
  }
  preds [bb3]
  succs [bb5, bb6]

bb5
  0: StorageDead(_7)
    SourceInfo(regex-syntax/src/ast/parse.rs:1715:52-1715:53)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1714:9-1716:10)
      kind: goto -> bb10
  }
  preds [bb4]
  succs [bb10]

bb6
  0: StorageDead(_7)
    SourceInfo(regex-syntax/src/ast/parse.rs:1715:52-1715:53)
  1: StorageLive(_9)
    SourceInfo(regex-syntax/src/ast/parse.rs:1715:57-1715:75)
  2: StorageLive(_10)
    SourceInfo(regex-syntax/src/ast/parse.rs:1715:57-1715:68)
  3: StorageLive(_11)
    SourceInfo(regex-syntax/src/ast/parse.rs:1715:57-1715:61)
  4: _11 = &(*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:1715:57-1715:61)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1715:57-1715:68)
      kind: _10 = ast::parse::ParserI::<'_, P>::char(move _11) -> [return: bb7, unwind: bb31]
  }
  preds [bb4]
  succs [bb7, bb31]

bb7
  0: StorageDead(_11)
    SourceInfo(regex-syntax/src/ast/parse.rs:1715:67-1715:68)
  1: _9 = Eq(move _10, const 'U')
    SourceInfo(regex-syntax/src/ast/parse.rs:1715:57-1715:75)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1715:57-1715:75)
      kind: switchInt(move _9) -> [0: bb9, otherwise: bb8]
  }
  preds [bb6]
  succs [bb8, bb9]

bb8
  0: StorageDead(_10)
    SourceInfo(regex-syntax/src/ast/parse.rs:1715:74-1715:75)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1714:9-1716:10)
      kind: goto -> bb10
  }
  preds [bb7]
  succs [bb10]

bb9
  0: StorageDead(_10)
    SourceInfo(regex-syntax/src/ast/parse.rs:1715:74-1715:75)
  1: StorageLive(_12)
    SourceInfo(regex-syntax/src/ast/parse.rs:1714:9-1716:10)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1714:9-1716:10)
      kind: _12 = core::panicking::panic(const "assertion failed: self.char() == 'x' || self.char() == 'u' || self.char() == 'U'") -> bb31
  }
  preds [bb7]
  succs [bb31]

bb10
  0: _2 = const ()
    SourceInfo(regex-syntax/src/ast/parse.rs:1716:10-1716:10)
  1: StorageDead(_9)
    SourceInfo(regex-syntax/src/ast/parse.rs:1716:9-1716:10)
  2: StorageDead(_6)
    SourceInfo(regex-syntax/src/ast/parse.rs:1716:9-1716:10)
  3: StorageDead(_3)
    SourceInfo(regex-syntax/src/ast/parse.rs:1716:9-1716:10)
  4: StorageDead(_2)
    SourceInfo(regex-syntax/src/ast/parse.rs:1716:9-1716:10)
  5: StorageLive(_13)
    SourceInfo(regex-syntax/src/ast/parse.rs:1718:13-1718:21)
  6: StorageLive(_14)
    SourceInfo(regex-syntax/src/ast/parse.rs:1718:30-1718:41)
  7: StorageLive(_15)
    SourceInfo(regex-syntax/src/ast/parse.rs:1718:30-1718:34)
  8: _15 = &(*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:1718:30-1718:34)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1718:30-1718:41)
      kind: _14 = ast::parse::ParserI::<'_, P>::char(move _15) -> [return: bb11, unwind: bb31]
  }
  preds [bb2, bb5, bb8]
  succs [bb11, bb31]

bb11
  0: StorageDead(_15)
    SourceInfo(regex-syntax/src/ast/parse.rs:1718:40-1718:41)
  1: PlaceMention(_14)
    SourceInfo(regex-syntax/src/ast/parse.rs:1718:30-1718:41)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1718:24-1718:41)
      kind: switchInt(_14) -> [120: bb13, 117: bb14, otherwise: bb12]
  }
  preds [bb10]
  succs [bb12, bb13, bb14]

bb12
  0: _13 = ast::HexLiteralKind::UnicodeLong
    SourceInfo(regex-syntax/src/ast/parse.rs:1721:18-1721:50)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1721:18-1721:50)
      kind: goto -> bb17
  }
  preds [bb11, bb14]
  succs [bb17]

bb13
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1719:13-1719:16)
      kind: falseEdge -> [real: bb15, imaginary: bb14]
  }
  preds [bb11]
  succs [bb14, bb15]

bb14
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1720:13-1720:16)
      kind: falseEdge -> [real: bb16, imaginary: bb12]
  }
  preds [bb11, bb13]
  succs [bb12, bb16]

bb15
  0: _13 = ast::HexLiteralKind::X
    SourceInfo(regex-syntax/src/ast/parse.rs:1719:20-1719:42)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1719:20-1719:42)
      kind: goto -> bb17
  }
  preds [bb13]
  succs [bb17]

bb16
  0: _13 = ast::HexLiteralKind::UnicodeShort
    SourceInfo(regex-syntax/src/ast/parse.rs:1720:20-1720:53)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1720:20-1720:53)
      kind: goto -> bb17
  }
  preds [bb14]
  succs [bb17]

bb17
  0: FakeRead(ForLet(None), _13)
    SourceInfo(regex-syntax/src/ast/parse.rs:1718:13-1718:21)
  1: StorageDead(_14)
    SourceInfo(regex-syntax/src/ast/parse.rs:1722:10-1722:11)
  2: StorageLive(_16)
    SourceInfo(regex-syntax/src/ast/parse.rs:1723:9-1727:10)
  3: StorageLive(_17)
    SourceInfo(regex-syntax/src/ast/parse.rs:1723:13-1723:39)
  4: StorageLive(_18)
    SourceInfo(regex-syntax/src/ast/parse.rs:1723:13-1723:17)
  5: _18 = &(*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:1723:13-1723:17)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1723:13-1723:39)
      kind: _17 = ast::parse::ParserI::<'_, P>::bump_and_bump_space(move _18) -> [return: bb18, unwind: bb31]
  }
  preds [bb12, bb15, bb16]
  succs [bb18, bb31]

bb18
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1723:13-1723:39)
      kind: switchInt(move _17) -> [0: bb20, otherwise: bb19]
  }
  preds [bb17]
  succs [bb19, bb20]

bb19
  0: StorageDead(_18)
    SourceInfo(regex-syntax/src/ast/parse.rs:1723:38-1723:39)
  1: _16 = const ()
    SourceInfo(regex-syntax/src/ast/parse.rs:1727:10-1727:10)
  2: StorageDead(_17)
    SourceInfo(regex-syntax/src/ast/parse.rs:1727:9-1727:10)
  3: StorageDead(_16)
    SourceInfo(regex-syntax/src/ast/parse.rs:1727:9-1727:10)
  4: StorageLive(_25)
    SourceInfo(regex-syntax/src/ast/parse.rs:1728:12-1728:30)
  5: StorageLive(_26)
    SourceInfo(regex-syntax/src/ast/parse.rs:1728:12-1728:23)
  6: StorageLive(_27)
    SourceInfo(regex-syntax/src/ast/parse.rs:1728:12-1728:16)
  7: _27 = &(*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:1728:12-1728:16)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1728:12-1728:23)
      kind: _26 = ast::parse::ParserI::<'_, P>::char(move _27) -> [return: bb24, unwind: bb31]
  }
  preds [bb18]
  succs [bb24, bb31]

bb20
  0: StorageDead(_18)
    SourceInfo(regex-syntax/src/ast/parse.rs:1723:38-1723:39)
  1: StorageLive(_20)
    SourceInfo(regex-syntax/src/ast/parse.rs:1725:17-1725:77)
  2: StorageLive(_21)
    SourceInfo(regex-syntax/src/ast/parse.rs:1725:17-1725:21)
  3: _21 = &(*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:1725:17-1725:21)
  4: StorageLive(_22)
    SourceInfo(regex-syntax/src/ast/parse.rs:1725:28-1725:39)
  5: StorageLive(_23)
    SourceInfo(regex-syntax/src/ast/parse.rs:1725:28-1725:32)
  6: _23 = &(*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:1725:28-1725:32)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1725:28-1725:39)
      kind: _22 = ast::parse::ParserI::<'_, P>::span(move _23) -> [return: bb21, unwind: bb31]
  }
  preds [bb18]
  succs [bb21, bb31]

bb21
  0: StorageDead(_23)
    SourceInfo(regex-syntax/src/ast/parse.rs:1725:38-1725:39)
  1: StorageLive(_24)
    SourceInfo(regex-syntax/src/ast/parse.rs:1725:41-1725:76)
  2: _24 = ast::ErrorKind::EscapeUnexpectedEof
    SourceInfo(regex-syntax/src/ast/parse.rs:1725:41-1725:76)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1725:17-1725:77)
      kind: _20 = ast::parse::ParserI::<'_, P>::error(move _21, move _22, move _24) -> [return: bb22, unwind: bb31]
  }
  preds [bb20]
  succs [bb22, bb31]

bb22
  0: StorageDead(_24)
    SourceInfo(regex-syntax/src/ast/parse.rs:1725:76-1725:77)
  1: StorageDead(_22)
    SourceInfo(regex-syntax/src/ast/parse.rs:1725:76-1725:77)
  2: StorageDead(_21)
    SourceInfo(regex-syntax/src/ast/parse.rs:1725:76-1725:77)
  3: _0 = core::result::Result::<ast::Literal, ast::Error>::Err(move _20)
    SourceInfo(regex-syntax/src/ast/parse.rs:1724:20-1726:14)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1726:13-1726:14)
      kind: drop(_20) -> [return: bb23, unwind: bb31]
  }
  preds [bb21]
  succs [bb23, bb31]

bb23
  0: StorageDead(_20)
    SourceInfo(regex-syntax/src/ast/parse.rs:1726:13-1726:14)
  1: StorageDead(_17)
    SourceInfo(regex-syntax/src/ast/parse.rs:1727:9-1727:10)
  2: StorageDead(_16)
    SourceInfo(regex-syntax/src/ast/parse.rs:1727:9-1727:10)
  3: StorageDead(_13)
    SourceInfo(regex-syntax/src/ast/parse.rs:1733:5-1733:6)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1733:6-1733:6)
      kind: goto -> bb30
  }
  preds [bb22]
  succs [bb30]

bb24
  0: StorageDead(_27)
    SourceInfo(regex-syntax/src/ast/parse.rs:1728:22-1728:23)
  1: _25 = Eq(move _26, const '{')
    SourceInfo(regex-syntax/src/ast/parse.rs:1728:12-1728:30)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1728:12-1728:30)
      kind: switchInt(move _25) -> [0: bb27, otherwise: bb25]
  }
  preds [bb19]
  succs [bb25, bb27]

bb25
  0: StorageDead(_26)
    SourceInfo(regex-syntax/src/ast/parse.rs:1728:29-1728:30)
  1: StorageLive(_28)
    SourceInfo(regex-syntax/src/ast/parse.rs:1729:13-1729:17)
  2: _28 = &(*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:1729:13-1729:17)
  3: StorageLive(_29)
    SourceInfo(regex-syntax/src/ast/parse.rs:1729:34-1729:42)
  4: _29 = move _13
    SourceInfo(regex-syntax/src/ast/parse.rs:1729:34-1729:42)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1729:13-1729:43)
      kind: _0 = ast::parse::ParserI::<'_, P>::parse_hex_brace(move _28, move _29) -> [return: bb26, unwind: bb31]
  }
  preds [bb24]
  succs [bb26, bb31]

bb26
  0: StorageDead(_29)
    SourceInfo(regex-syntax/src/ast/parse.rs:1729:42-1729:43)
  1: StorageDead(_28)
    SourceInfo(regex-syntax/src/ast/parse.rs:1729:42-1729:43)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1728:9-1732:10)
      kind: goto -> bb29
  }
  preds [bb25]
  succs [bb29]

bb27
  0: StorageDead(_26)
    SourceInfo(regex-syntax/src/ast/parse.rs:1728:29-1728:30)
  1: StorageLive(_30)
    SourceInfo(regex-syntax/src/ast/parse.rs:1731:13-1731:17)
  2: _30 = &(*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:1731:13-1731:17)
  3: StorageLive(_31)
    SourceInfo(regex-syntax/src/ast/parse.rs:1731:35-1731:43)
  4: _31 = move _13
    SourceInfo(regex-syntax/src/ast/parse.rs:1731:35-1731:43)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1731:13-1731:44)
      kind: _0 = ast::parse::ParserI::<'_, P>::parse_hex_digits(move _30, move _31) -> [return: bb28, unwind: bb31]
  }
  preds [bb24]
  succs [bb28, bb31]

bb28
  0: StorageDead(_31)
    SourceInfo(regex-syntax/src/ast/parse.rs:1731:43-1731:44)
  1: StorageDead(_30)
    SourceInfo(regex-syntax/src/ast/parse.rs:1731:43-1731:44)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1728:9-1732:10)
      kind: goto -> bb29
  }
  preds [bb27]
  succs [bb29]

bb29
  0: StorageDead(_25)
    SourceInfo(regex-syntax/src/ast/parse.rs:1732:9-1732:10)
  1: StorageDead(_13)
    SourceInfo(regex-syntax/src/ast/parse.rs:1733:5-1733:6)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1733:6-1733:6)
      kind: goto -> bb30
  }
  preds [bb26, bb28]
  succs [bb30]

bb30
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1733:6-1733:6)
      kind: return
  }
  preds [bb23, bb29]
  succs []

bb31
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:1713:5-1733:6)
      kind: resume
  }
  preds [bb0, bb3, bb6, bb9, bb10, bb17, bb19, bb20, bb21, bb22, bb25, bb27]
  succs []

