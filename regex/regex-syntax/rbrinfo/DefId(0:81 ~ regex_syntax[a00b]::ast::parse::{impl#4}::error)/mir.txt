bb0
  0: StorageLive(_4)
    SourceInfo(regex-syntax/src/ast/parse.rs:409:22-409:26)
  1: _4 = move _3
    SourceInfo(regex-syntax/src/ast/parse.rs:409:22-409:26)
  2: StorageLive(_5)
    SourceInfo(regex-syntax/src/ast/parse.rs:409:37-409:63)
  3: StorageLive(_6)
    SourceInfo(regex-syntax/src/ast/parse.rs:409:37-409:51)
  4: StorageLive(_7)
    SourceInfo(regex-syntax/src/ast/parse.rs:409:37-409:51)
  5: StorageLive(_8)
    SourceInfo(regex-syntax/src/ast/parse.rs:409:37-409:41)
  6: _8 = &(*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:409:37-409:41)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:409:37-409:51)
      kind: _7 = ast::parse::ParserI::<'_, P>::pattern(move _8) -> [return: bb1, unwind: bb4]
  }
  preds []
  succs [bb1, bb4]

bb1
  0: _6 = &(*_7)
    SourceInfo(regex-syntax/src/ast/parse.rs:409:37-409:51)
  1: StorageDead(_8)
    SourceInfo(regex-syntax/src/ast/parse.rs:409:50-409:51)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:409:37-409:63)
      kind: _5 = <str as std::string::ToString>::to_string(move _6) -> [return: bb2, unwind: bb4]
  }
  preds [bb0]
  succs [bb2, bb4]

bb2
  0: StorageDead(_6)
    SourceInfo(regex-syntax/src/ast/parse.rs:409:62-409:63)
  1: StorageLive(_9)
    SourceInfo(regex-syntax/src/ast/parse.rs:409:65-409:69)
  2: _9 = _2
    SourceInfo(regex-syntax/src/ast/parse.rs:409:65-409:69)
  3: _0 = ast::Error { kind: move _4, pattern: move _5, span: move _9 }
    SourceInfo(regex-syntax/src/ast/parse.rs:409:9-409:71)
  4: StorageDead(_9)
    SourceInfo(regex-syntax/src/ast/parse.rs:409:70-409:71)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:409:70-409:71)
      kind: drop(_5) -> [return: bb3, unwind: bb4]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: StorageDead(_5)
    SourceInfo(regex-syntax/src/ast/parse.rs:409:70-409:71)
  1: StorageDead(_4)
    SourceInfo(regex-syntax/src/ast/parse.rs:409:70-409:71)
  2: StorageDead(_7)
    SourceInfo(regex-syntax/src/ast/parse.rs:410:5-410:6)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:410:6-410:6)
      kind: return
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:408:5-410:6)
      kind: resume
  }
  preds [bb0, bb1, bb2]
  succs []

