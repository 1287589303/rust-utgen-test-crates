{
  "regex-syntax/src/ast/visitor.rs:337:20:337:55": [
    {
      "Bool": {
        "Other": "let Some(x) = self.pop_class(frame)"
      }
    }
  ],
  "regex-syntax/src/ast/visitor.rs:347:17:347:59": [
    {
      "Try": "self.visit_class_post(&post_ast, visitor)?"
    }
  ],
  "regex-syntax/src/ast/visitor.rs:319:13:319:49": [
    {
      "Try": "self.visit_class_pre(&ast, visitor)?"
    }
  ],
  "regex-syntax/src/ast/visitor.rs:326:13:326:50": [
    {
      "Try": "self.visit_class_post(&ast, visitor)?"
    }
  ],
  "regex-syntax/src/ast/visitor.rs:339:25:339:66": [
    {
      "Try": "visitor.visit_class_set_binary_op_in(op)?"
    }
  ],
  "regex-syntax/src/ast/visitor.rs:338:24:338:68": [
    {
      "Bool": {
        "Other": "let ClassFrame::BinaryRHS { ref op, .. } = x"
      }
    }
  ],
  "regex-syntax/src/ast/visitor.rs:320:16:320:53": [
    {
      "Bool": {
        "Other": "let Some(x) = self.induct_class(&ast)"
      }
    }
  ],
  "regex-syntax/src/ast/visitor.rs:331:47:331:69": [
    {
      "Match": {
        "match_source": "regex-syntax/src/ast/visitor.rs:331:47:331:69",
        "match_str": "self.stack_class.pop()",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-syntax/src/ast/visitor.rs:332:21:332:25": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/ast/visitor.rs:332:29:332:42"
          },
          "regex-syntax/src/ast/visitor.rs:333:21:333:44": {
            "pat": {
              "pat_str": "Some((post_ast, frame))",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/ast/visitor.rs:333:48:333:65"
          }
        }
      }
    }
  ]
}