bb0
  0: StorageLive(_2)
    SourceInfo(regex-syntax/src/ast/parse.rs:477:9-477:13)
  1: _2 = &(*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:477:9-477:13)
  2: StorageLive(_3)
    SourceInfo(regex-syntax/src/ast/parse.rs:477:22-477:35)
  3: StorageLive(_4)
    SourceInfo(regex-syntax/src/ast/parse.rs:477:22-477:26)
  4: _4 = &(*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:477:22-477:26)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:477:22-477:35)
      kind: _3 = ast::parse::ParserI::<'_, P>::offset(move _4) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-syntax/src/ast/parse.rs:477:34-477:35)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:477:9-477:36)
      kind: _0 = ast::parse::ParserI::<'_, P>::char_at(move _2, move _3) -> [return: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_3)
    SourceInfo(regex-syntax/src/ast/parse.rs:477:35-477:36)
  1: StorageDead(_2)
    SourceInfo(regex-syntax/src/ast/parse.rs:477:35-477:36)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:478:6-478:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:476:5-478:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

