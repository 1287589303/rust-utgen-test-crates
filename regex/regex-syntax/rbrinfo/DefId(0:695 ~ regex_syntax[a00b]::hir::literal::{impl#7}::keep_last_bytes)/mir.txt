bb0
  0: StorageLive(_3)
    SourceInfo(regex-syntax/src/hir/literal.rs:2142:9-2144:10)
  1: StorageLive(_4)
    SourceInfo(regex-syntax/src/hir/literal.rs:2142:12-2142:29)
  2: StorageLive(_5)
    SourceInfo(regex-syntax/src/hir/literal.rs:2142:12-2142:15)
  3: _5 = _2
    SourceInfo(regex-syntax/src/hir/literal.rs:2142:12-2142:15)
  4: StorageLive(_6)
    SourceInfo(regex-syntax/src/hir/literal.rs:2142:19-2142:29)
  5: StorageLive(_7)
    SourceInfo(regex-syntax/src/hir/literal.rs:2142:19-2142:23)
  6: _7 = &(*_1)
    SourceInfo(regex-syntax/src/hir/literal.rs:2142:19-2142:23)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/literal.rs:2142:19-2142:29)
      kind: _6 = hir::literal::Literal::len(move _7) -> [return: bb1, unwind: bb10]
  }
  preds []
  succs [bb1, bb10]

bb1
  0: StorageDead(_7)
    SourceInfo(regex-syntax/src/hir/literal.rs:2142:28-2142:29)
  1: _4 = Ge(move _5, move _6)
    SourceInfo(regex-syntax/src/hir/literal.rs:2142:12-2142:29)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/literal.rs:2142:12-2142:29)
      kind: switchInt(move _4) -> [0: bb3, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_6)
    SourceInfo(regex-syntax/src/hir/literal.rs:2142:28-2142:29)
  1: StorageDead(_5)
    SourceInfo(regex-syntax/src/hir/literal.rs:2142:28-2142:29)
  2: _0 = const ()
    SourceInfo(regex-syntax/src/hir/literal.rs:2143:13-2143:19)
  3: StorageDead(_4)
    SourceInfo(regex-syntax/src/hir/literal.rs:2144:9-2144:10)
  4: StorageDead(_3)
    SourceInfo(regex-syntax/src/hir/literal.rs:2144:9-2144:10)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/literal.rs:2147:6-2147:6)
      kind: goto -> bb9
  }
  preds [bb1]
  succs [bb9]

bb3
  0: StorageDead(_6)
    SourceInfo(regex-syntax/src/hir/literal.rs:2142:28-2142:29)
  1: StorageDead(_5)
    SourceInfo(regex-syntax/src/hir/literal.rs:2142:28-2142:29)
  2: _3 = const ()
    SourceInfo(regex-syntax/src/hir/literal.rs:2144:10-2144:10)
  3: StorageDead(_4)
    SourceInfo(regex-syntax/src/hir/literal.rs:2144:9-2144:10)
  4: StorageDead(_3)
    SourceInfo(regex-syntax/src/hir/literal.rs:2144:9-2144:10)
  5: StorageLive(_9)
    SourceInfo(regex-syntax/src/hir/literal.rs:2145:9-2145:28)
  6: StorageLive(_10)
    SourceInfo(regex-syntax/src/hir/literal.rs:2145:9-2145:13)
  7: _10 = &mut (*_1)
    SourceInfo(regex-syntax/src/hir/literal.rs:2145:9-2145:13)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/literal.rs:2145:9-2145:28)
      kind: _9 = hir::literal::Literal::make_inexact(move _10) -> [return: bb4, unwind: bb10]
  }
  preds [bb1]
  succs [bb4, bb10]

bb4
  0: StorageDead(_10)
    SourceInfo(regex-syntax/src/hir/literal.rs:2145:27-2145:28)
  1: StorageDead(_9)
    SourceInfo(regex-syntax/src/hir/literal.rs:2145:28-2145:29)
  2: StorageLive(_11)
    SourceInfo(regex-syntax/src/hir/literal.rs:2146:9-2146:45)
  3: StorageLive(_12)
    SourceInfo(regex-syntax/src/hir/literal.rs:2146:9-2146:19)
  4: _12 = &mut ((*_1).0: std::vec::Vec<u8>)
    SourceInfo(regex-syntax/src/hir/literal.rs:2146:9-2146:19)
  5: StorageLive(_13)
    SourceInfo(regex-syntax/src/hir/literal.rs:2146:26-2146:44)
  6: StorageLive(_14)
    SourceInfo(regex-syntax/src/hir/literal.rs:2146:28-2146:44)
  7: StorageLive(_15)
    SourceInfo(regex-syntax/src/hir/literal.rs:2146:28-2146:38)
  8: StorageLive(_16)
    SourceInfo(regex-syntax/src/hir/literal.rs:2146:28-2146:32)
  9: _16 = &(*_1)
    SourceInfo(regex-syntax/src/hir/literal.rs:2146:28-2146:32)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/literal.rs:2146:28-2146:38)
      kind: _15 = hir::literal::Literal::len(move _16) -> [return: bb5, unwind: bb10]
  }
  preds [bb3]
  succs [bb5, bb10]

bb5
  0: StorageDead(_16)
    SourceInfo(regex-syntax/src/hir/literal.rs:2146:37-2146:38)
  1: StorageLive(_17)
    SourceInfo(regex-syntax/src/hir/literal.rs:2146:41-2146:44)
  2: _17 = _2
    SourceInfo(regex-syntax/src/hir/literal.rs:2146:41-2146:44)
  3: _18 = SubWithOverflow(_15, _17)
    SourceInfo(regex-syntax/src/hir/literal.rs:2146:28-2146:44)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/literal.rs:2146:28-2146:44)
      kind: assert(!move (_18.1: bool), "attempt to compute `{} - {}`, which would overflow", move _15, move _17) -> [success: bb6, unwind: bb10]
  }
  preds [bb4]
  succs [bb6, bb10]

bb6
  0: _14 = move (_18.0: usize)
    SourceInfo(regex-syntax/src/hir/literal.rs:2146:28-2146:44)
  1: StorageDead(_17)
    SourceInfo(regex-syntax/src/hir/literal.rs:2146:43-2146:44)
  2: StorageDead(_15)
    SourceInfo(regex-syntax/src/hir/literal.rs:2146:43-2146:44)
  3: _13 = core::ops::RangeTo::<usize> { end: move _14 }
    SourceInfo(regex-syntax/src/hir/literal.rs:2146:26-2146:44)
  4: StorageDead(_14)
    SourceInfo(regex-syntax/src/hir/literal.rs:2146:43-2146:44)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/literal.rs:2146:9-2146:45)
      kind: _11 = std::vec::Vec::<u8>::drain::<core::ops::RangeTo<usize>>(move _12, move _13) -> [return: bb7, unwind: bb10]
  }
  preds [bb5]
  succs [bb7, bb10]

bb7
  0: StorageDead(_13)
    SourceInfo(regex-syntax/src/hir/literal.rs:2146:44-2146:45)
  1: StorageDead(_12)
    SourceInfo(regex-syntax/src/hir/literal.rs:2146:44-2146:45)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/literal.rs:2146:45-2146:46)
      kind: drop(_11) -> [return: bb8, unwind: bb10]
  }
  preds [bb6]
  succs [bb8, bb10]

bb8
  0: StorageDead(_11)
    SourceInfo(regex-syntax/src/hir/literal.rs:2146:45-2146:46)
  1: _0 = const ()
    SourceInfo(regex-syntax/src/hir/literal.rs:2141:51-2147:6)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/literal.rs:2147:6-2147:6)
      kind: goto -> bb9
  }
  preds [bb7]
  succs [bb9]

bb9
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/literal.rs:2147:6-2147:6)
      kind: return
  }
  preds [bb2, bb8]
  succs []

bb10
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/literal.rs:2141:5-2147:6)
      kind: resume
  }
  preds [bb0, bb3, bb4, bb5, bb6, bb7]
  succs []

