bb0
  0: StorageLive(_2)
    SourceInfo(regex-syntax/src/hir/interval.rs:372:9-379:10)
  1: StorageLive(_3)
    SourceInfo(regex-syntax/src/hir/interval.rs:372:21-372:43)
  2: StorageLive(_4)
    SourceInfo(regex-syntax/src/hir/interval.rs:372:21-372:43)
  3: StorageLive(_5)
    SourceInfo(regex-syntax/src/hir/interval.rs:372:21-372:32)
  4: StorageLive(_6)
    SourceInfo(regex-syntax/src/hir/interval.rs:372:21-372:43)
  5: StorageLive(_7)
    SourceInfo(regex-syntax/src/hir/interval.rs:372:21-372:32)
  6: _7 = &((*_1).0: std::vec::Vec<I>)
    SourceInfo(regex-syntax/src/hir/interval.rs:372:21-372:32)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:372:21-372:43)
      kind: _6 = <std::vec::Vec<I> as core::ops::Deref>::deref(move _7) -> [return: bb1, unwind: bb23]
  }
  preds []
  succs [bb1, bb23]

bb1
  0: _5 = &(*_6)
    SourceInfo(regex-syntax/src/hir/interval.rs:372:21-372:32)
  1: StorageDead(_7)
    SourceInfo(regex-syntax/src/hir/interval.rs:372:31-372:32)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:372:21-372:43)
      kind: _4 = core::slice::<impl [I]>::windows(move _5, const 2_usize) -> [return: bb2, unwind: bb23]
  }
  preds [bb0]
  succs [bb2, bb23]

bb2
  0: StorageDead(_5)
    SourceInfo(regex-syntax/src/hir/interval.rs:372:42-372:43)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:372:21-372:43)
      kind: _3 = <core::slice::Windows<'_, I> as core::iter::IntoIterator>::into_iter(move _4) -> [return: bb3, unwind: bb23]
  }
  preds [bb1]
  succs [bb3, bb23]

bb3
  0: StorageDead(_4)
    SourceInfo(regex-syntax/src/hir/interval.rs:372:42-372:43)
  1: PlaceMention(_3)
    SourceInfo(regex-syntax/src/hir/interval.rs:372:21-372:43)
  2: StorageLive(_8)
    SourceInfo(regex-syntax/src/hir/interval.rs:372:21-372:43)
  3: _8 = move _3
    SourceInfo(regex-syntax/src/hir/interval.rs:372:21-372:43)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:372:9-379:10)
      kind: goto -> bb4
  }
  preds [bb2]
  succs [bb4]

bb4
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:372:9-379:10)
      kind: falseUnwind -> [real: bb5, unwind: bb23]
  }
  preds [bb3, bb20]
  succs [bb5, bb23]

bb5
  0: StorageLive(_10)
    SourceInfo(regex-syntax/src/hir/interval.rs:372:21-372:43)
  1: StorageLive(_11)
    SourceInfo(regex-syntax/src/hir/interval.rs:372:21-372:43)
  2: StorageLive(_12)
    SourceInfo(regex-syntax/src/hir/interval.rs:372:21-372:43)
  3: StorageLive(_13)
    SourceInfo(regex-syntax/src/hir/interval.rs:372:21-372:43)
  4: _13 = &mut _8
    SourceInfo(regex-syntax/src/hir/interval.rs:372:21-372:43)
  5: _12 = &mut (*_13)
    SourceInfo(regex-syntax/src/hir/interval.rs:372:21-372:43)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:372:21-372:43)
      kind: _11 = <core::slice::Windows<'_, I> as core::iter::Iterator>::next(move _12) -> [return: bb6, unwind: bb23]
  }
  preds [bb4]
  succs [bb6, bb23]

bb6
  0: StorageDead(_12)
    SourceInfo(regex-syntax/src/hir/interval.rs:372:42-372:43)
  1: PlaceMention(_11)
    SourceInfo(regex-syntax/src/hir/interval.rs:372:21-372:43)
  2: _14 = discriminant(_11)
    SourceInfo(regex-syntax/src/hir/interval.rs:372:21-372:43)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:372:21-372:43)
      kind: switchInt(move _14) -> [0: bb8, 1: bb9, otherwise: bb7]
  }
  preds [bb5]
  succs [bb7, bb8, bb9]

bb7
  0: FakeRead(ForMatchedPlace(None), _11)
    SourceInfo(regex-syntax/src/hir/interval.rs:372:21-372:43)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:372:21-372:43)
      kind: unreachable
  }
  preds [bb6]
  succs []

bb8
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:372:9-379:10)
      kind: falseEdge -> [real: bb10, imaginary: bb9]
  }
  preds [bb6]
  succs [bb9, bb10]

bb9
  0: StorageLive(_16)
    SourceInfo(regex-syntax/src/hir/interval.rs:372:13-372:17)
  1: _16 = ((_11 as Some).0: &[I])
    SourceInfo(regex-syntax/src/hir/interval.rs:372:13-372:17)
  2: StorageLive(_17)
    SourceInfo(regex-syntax/src/hir/interval.rs:373:13-375:14)
  3: StorageLive(_18)
    SourceInfo(regex-syntax/src/hir/interval.rs:373:16-373:34)
  4: StorageLive(_19)
    SourceInfo(regex-syntax/src/hir/interval.rs:373:16-373:23)
  5: StorageLive(_20)
    SourceInfo(regex-syntax/src/hir/interval.rs:373:21-373:22)
  6: _20 = const 0_usize
    SourceInfo(regex-syntax/src/hir/interval.rs:373:21-373:22)
  7: _21 = Len((*_16))
    SourceInfo(regex-syntax/src/hir/interval.rs:373:16-373:23)
  8: _22 = Lt(_20, _21)
    SourceInfo(regex-syntax/src/hir/interval.rs:373:16-373:23)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:373:16-373:23)
      kind: assert(move _22, "index out of bounds: the length is {} but the index is {}", move _21, _20) -> [success: bb11, unwind: bb23]
  }
  preds [bb6, bb8]
  succs [bb11, bb23]

bb10
  0: _2 = const ()
    SourceInfo(regex-syntax/src/hir/interval.rs:372:9-379:10)
  1: StorageDead(_13)
    SourceInfo(regex-syntax/src/hir/interval.rs:379:9-379:10)
  2: StorageDead(_11)
    SourceInfo(regex-syntax/src/hir/interval.rs:379:9-379:10)
  3: StorageDead(_10)
    SourceInfo(regex-syntax/src/hir/interval.rs:379:9-379:10)
  4: StorageDead(_8)
    SourceInfo(regex-syntax/src/hir/interval.rs:379:9-379:10)
  5: StorageDead(_6)
    SourceInfo(regex-syntax/src/hir/interval.rs:379:9-379:10)
  6: StorageDead(_3)
    SourceInfo(regex-syntax/src/hir/interval.rs:379:9-379:10)
  7: StorageDead(_2)
    SourceInfo(regex-syntax/src/hir/interval.rs:379:9-379:10)
  8: _0 = const true
    SourceInfo(regex-syntax/src/hir/interval.rs:380:9-380:13)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:381:6-381:6)
      kind: goto -> bb22
  }
  preds [bb8]
  succs [bb22]

bb11
  0: _19 = &(*_16)[_20]
    SourceInfo(regex-syntax/src/hir/interval.rs:373:16-373:23)
  1: StorageLive(_23)
    SourceInfo(regex-syntax/src/hir/interval.rs:373:27-373:34)
  2: StorageLive(_24)
    SourceInfo(regex-syntax/src/hir/interval.rs:373:32-373:33)
  3: _24 = const 1_usize
    SourceInfo(regex-syntax/src/hir/interval.rs:373:32-373:33)
  4: _25 = Len((*_16))
    SourceInfo(regex-syntax/src/hir/interval.rs:373:27-373:34)
  5: _26 = Lt(_24, _25)
    SourceInfo(regex-syntax/src/hir/interval.rs:373:27-373:34)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:373:27-373:34)
      kind: assert(move _26, "index out of bounds: the length is {} but the index is {}", move _25, _24) -> [success: bb12, unwind: bb23]
  }
  preds [bb9]
  succs [bb12, bb23]

bb12
  0: _23 = &(*_16)[_24]
    SourceInfo(regex-syntax/src/hir/interval.rs:373:27-373:34)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:373:16-373:34)
      kind: _18 = <I as core::cmp::PartialOrd>::ge(move _19, move _23) -> [return: bb13, unwind: bb23]
  }
  preds [bb11]
  succs [bb13, bb23]

bb13
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:373:16-373:34)
      kind: switchInt(move _18) -> [0: bb15, otherwise: bb14]
  }
  preds [bb12]
  succs [bb14, bb15]

bb14
  0: StorageDead(_24)
    SourceInfo(regex-syntax/src/hir/interval.rs:373:33-373:34)
  1: StorageDead(_23)
    SourceInfo(regex-syntax/src/hir/interval.rs:373:33-373:34)
  2: StorageDead(_20)
    SourceInfo(regex-syntax/src/hir/interval.rs:373:33-373:34)
  3: StorageDead(_19)
    SourceInfo(regex-syntax/src/hir/interval.rs:373:33-373:34)
  4: _0 = const false
    SourceInfo(regex-syntax/src/hir/interval.rs:374:24-374:29)
  5: StorageDead(_18)
    SourceInfo(regex-syntax/src/hir/interval.rs:375:13-375:14)
  6: StorageDead(_17)
    SourceInfo(regex-syntax/src/hir/interval.rs:375:13-375:14)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/lib.rs:1:1-1:1)
      kind: goto -> bb21
  }
  preds [bb13]
  succs [bb21]

bb15
  0: StorageDead(_24)
    SourceInfo(regex-syntax/src/hir/interval.rs:373:33-373:34)
  1: StorageDead(_23)
    SourceInfo(regex-syntax/src/hir/interval.rs:373:33-373:34)
  2: StorageDead(_20)
    SourceInfo(regex-syntax/src/hir/interval.rs:373:33-373:34)
  3: StorageDead(_19)
    SourceInfo(regex-syntax/src/hir/interval.rs:373:33-373:34)
  4: _17 = const ()
    SourceInfo(regex-syntax/src/hir/interval.rs:375:14-375:14)
  5: StorageDead(_18)
    SourceInfo(regex-syntax/src/hir/interval.rs:375:13-375:14)
  6: StorageDead(_17)
    SourceInfo(regex-syntax/src/hir/interval.rs:375:13-375:14)
  7: StorageLive(_28)
    SourceInfo(regex-syntax/src/hir/interval.rs:376:16-376:47)
  8: StorageLive(_29)
    SourceInfo(regex-syntax/src/hir/interval.rs:376:16-376:23)
  9: StorageLive(_30)
    SourceInfo(regex-syntax/src/hir/interval.rs:376:21-376:22)
  10: _30 = const 0_usize
    SourceInfo(regex-syntax/src/hir/interval.rs:376:21-376:22)
  11: _31 = Len((*_16))
    SourceInfo(regex-syntax/src/hir/interval.rs:376:16-376:23)
  12: _32 = Lt(_30, _31)
    SourceInfo(regex-syntax/src/hir/interval.rs:376:16-376:23)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:376:16-376:23)
      kind: assert(move _32, "index out of bounds: the length is {} but the index is {}", move _31, _30) -> [success: bb16, unwind: bb23]
  }
  preds [bb13]
  succs [bb16, bb23]

bb16
  0: _29 = &(*_16)[_30]
    SourceInfo(regex-syntax/src/hir/interval.rs:376:16-376:23)
  1: StorageLive(_33)
    SourceInfo(regex-syntax/src/hir/interval.rs:376:38-376:46)
  2: StorageLive(_34)
    SourceInfo(regex-syntax/src/hir/interval.rs:376:38-376:46)
  3: StorageLive(_35)
    SourceInfo(regex-syntax/src/hir/interval.rs:376:44-376:45)
  4: _35 = const 1_usize
    SourceInfo(regex-syntax/src/hir/interval.rs:376:44-376:45)
  5: _36 = Len((*_16))
    SourceInfo(regex-syntax/src/hir/interval.rs:376:39-376:46)
  6: _37 = Lt(_35, _36)
    SourceInfo(regex-syntax/src/hir/interval.rs:376:39-376:46)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:376:39-376:46)
      kind: assert(move _37, "index out of bounds: the length is {} but the index is {}", move _36, _35) -> [success: bb17, unwind: bb23]
  }
  preds [bb15]
  succs [bb17, bb23]

bb17
  0: _34 = &(*_16)[_35]
    SourceInfo(regex-syntax/src/hir/interval.rs:376:38-376:46)
  1: _33 = &(*_34)
    SourceInfo(regex-syntax/src/hir/interval.rs:376:38-376:46)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:376:16-376:47)
      kind: _28 = <I as hir::interval::Interval>::is_contiguous(move _29, move _33) -> [return: bb18, unwind: bb23]
  }
  preds [bb16]
  succs [bb18, bb23]

bb18
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:376:16-376:47)
      kind: switchInt(move _28) -> [0: bb20, otherwise: bb19]
  }
  preds [bb17]
  succs [bb19, bb20]

bb19
  0: StorageDead(_35)
    SourceInfo(regex-syntax/src/hir/interval.rs:376:46-376:47)
  1: StorageDead(_34)
    SourceInfo(regex-syntax/src/hir/interval.rs:376:46-376:47)
  2: StorageDead(_33)
    SourceInfo(regex-syntax/src/hir/interval.rs:376:46-376:47)
  3: StorageDead(_30)
    SourceInfo(regex-syntax/src/hir/interval.rs:376:46-376:47)
  4: StorageDead(_29)
    SourceInfo(regex-syntax/src/hir/interval.rs:376:46-376:47)
  5: _0 = const false
    SourceInfo(regex-syntax/src/hir/interval.rs:377:24-377:29)
  6: StorageDead(_28)
    SourceInfo(regex-syntax/src/hir/interval.rs:378:13-378:14)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/lib.rs:1:1-1:1)
      kind: goto -> bb21
  }
  preds [bb18]
  succs [bb21]

bb20
  0: StorageDead(_35)
    SourceInfo(regex-syntax/src/hir/interval.rs:376:46-376:47)
  1: StorageDead(_34)
    SourceInfo(regex-syntax/src/hir/interval.rs:376:46-376:47)
  2: StorageDead(_33)
    SourceInfo(regex-syntax/src/hir/interval.rs:376:46-376:47)
  3: StorageDead(_30)
    SourceInfo(regex-syntax/src/hir/interval.rs:376:46-376:47)
  4: StorageDead(_29)
    SourceInfo(regex-syntax/src/hir/interval.rs:376:46-376:47)
  5: _10 = const ()
    SourceInfo(regex-syntax/src/hir/interval.rs:378:14-378:14)
  6: StorageDead(_28)
    SourceInfo(regex-syntax/src/hir/interval.rs:378:13-378:14)
  7: StorageDead(_16)
    SourceInfo(regex-syntax/src/hir/interval.rs:379:9-379:10)
  8: StorageDead(_13)
    SourceInfo(regex-syntax/src/hir/interval.rs:379:9-379:10)
  9: StorageDead(_11)
    SourceInfo(regex-syntax/src/hir/interval.rs:379:9-379:10)
  10: StorageDead(_10)
    SourceInfo(regex-syntax/src/hir/interval.rs:379:9-379:10)
  11: _9 = const ()
    SourceInfo(regex-syntax/src/hir/interval.rs:372:9-379:10)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:372:9-379:10)
      kind: goto -> bb4
  }
  preds [bb18]
  succs [bb4]

bb21
  0: StorageDead(_16)
    SourceInfo(regex-syntax/src/hir/interval.rs:379:9-379:10)
  1: StorageDead(_13)
    SourceInfo(regex-syntax/src/hir/interval.rs:379:9-379:10)
  2: StorageDead(_11)
    SourceInfo(regex-syntax/src/hir/interval.rs:379:9-379:10)
  3: StorageDead(_10)
    SourceInfo(regex-syntax/src/hir/interval.rs:379:9-379:10)
  4: StorageDead(_8)
    SourceInfo(regex-syntax/src/hir/interval.rs:379:9-379:10)
  5: StorageDead(_6)
    SourceInfo(regex-syntax/src/hir/interval.rs:379:9-379:10)
  6: StorageDead(_3)
    SourceInfo(regex-syntax/src/hir/interval.rs:379:9-379:10)
  7: StorageDead(_2)
    SourceInfo(regex-syntax/src/hir/interval.rs:379:9-379:10)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:381:6-381:6)
      kind: goto -> bb22
  }
  preds [bb14, bb19]
  succs [bb22]

bb22
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:381:6-381:6)
      kind: return
  }
  preds [bb10, bb21]
  succs []

bb23
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:371:5-381:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb4, bb5, bb9, bb11, bb12, bb15, bb16, bb17]
  succs []

