bb0
  0: StorageLive(_2)
    SourceInfo(regex-syntax/src/debug.rs:94:5-96:6)
  1: StorageLive(_3)
    SourceInfo(regex-syntax/src/debug.rs:94:8-94:24)
  2: StorageLive(_4)
    SourceInfo(regex-syntax/src/debug.rs:94:8-94:13)
  3: _4 = &(*_1)
    SourceInfo(regex-syntax/src/debug.rs:94:8-94:13)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/debug.rs:94:8-94:24)
      kind: _3 = core::slice::<impl [u8]>::is_empty(move _4) -> [return: bb1, unwind: bb35]
  }
  preds []
  succs [bb1, bb35]

bb1
  Terminator {
      source_info: SourceInfo(regex-syntax/src/debug.rs:94:8-94:24)
      kind: switchInt(move _3) -> [0: bb3, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_4)
    SourceInfo(regex-syntax/src/debug.rs:94:23-94:24)
  1: _0 = core::option::Option::<core::result::Result<char, u8>>::None
    SourceInfo(regex-syntax/src/debug.rs:95:16-95:20)
  2: StorageDead(_3)
    SourceInfo(regex-syntax/src/debug.rs:96:5-96:6)
  3: StorageDead(_2)
    SourceInfo(regex-syntax/src/debug.rs:96:5-96:6)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/lib.rs:1:1-1:1)
      kind: goto -> bb34
  }
  preds [bb1]
  succs [bb34]

bb3
  0: StorageDead(_4)
    SourceInfo(regex-syntax/src/debug.rs:94:23-94:24)
  1: _2 = const ()
    SourceInfo(regex-syntax/src/debug.rs:96:6-96:6)
  2: StorageDead(_3)
    SourceInfo(regex-syntax/src/debug.rs:96:5-96:6)
  3: StorageDead(_2)
    SourceInfo(regex-syntax/src/debug.rs:96:5-96:6)
  4: StorageLive(_6)
    SourceInfo(regex-syntax/src/debug.rs:97:9-97:12)
  5: StorageLive(_7)
    SourceInfo(regex-syntax/src/debug.rs:97:21-97:34)
  6: StorageLive(_8)
    SourceInfo(regex-syntax/src/debug.rs:97:25-97:33)
  7: StorageLive(_9)
    SourceInfo(regex-syntax/src/debug.rs:97:31-97:32)
  8: _9 = const 0_usize
    SourceInfo(regex-syntax/src/debug.rs:97:31-97:32)
  9: _10 = Len((*_1))
    SourceInfo(regex-syntax/src/debug.rs:97:25-97:33)
  10: _11 = Lt(_9, _10)
    SourceInfo(regex-syntax/src/debug.rs:97:25-97:33)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/debug.rs:97:25-97:33)
      kind: assert(move _11, "index out of bounds: the length is {} but the index is {}", move _10, _9) -> [success: bb4, unwind: bb35]
  }
  preds [bb1]
  succs [bb4, bb35]

bb4
  0: _8 = (*_1)[_9]
    SourceInfo(regex-syntax/src/debug.rs:97:25-97:33)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/debug.rs:97:21-97:34)
      kind: _7 = debug::utf8_decode::len(move _8) -> [return: bb5, unwind: bb35]
  }
  preds [bb3]
  succs [bb5, bb35]

bb5
  0: StorageDead(_8)
    SourceInfo(regex-syntax/src/debug.rs:97:33-97:34)
  1: PlaceMention(_7)
    SourceInfo(regex-syntax/src/debug.rs:97:21-97:34)
  2: _14 = discriminant(_7)
    SourceInfo(regex-syntax/src/debug.rs:97:21-97:34)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/debug.rs:97:15-97:34)
      kind: switchInt(move _14) -> [0: bb7, 1: bb8, otherwise: bb6]
  }
  preds [bb4]
  succs [bb6, bb7, bb8]

bb6
  0: FakeRead(ForMatchedPlace(None), _7)
    SourceInfo(regex-syntax/src/debug.rs:97:21-97:34)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/debug.rs:97:21-97:34)
      kind: unreachable
  }
  preds [bb5]
  succs []

bb7
  Terminator {
      source_info: SourceInfo(regex-syntax/src/debug.rs:98:9-98:13)
      kind: falseEdge -> [real: bb12, imaginary: bb8]
  }
  preds [bb5]
  succs [bb8, bb12]

bb8
  Terminator {
      source_info: SourceInfo(regex-syntax/src/debug.rs:99:9-99:18)
      kind: falseEdge -> [real: bb14, imaginary: bb9]
  }
  preds [bb5, bb7]
  succs [bb9, bb14]

bb9
  Terminator {
      source_info: SourceInfo(regex-syntax/src/debug.rs:97:15-97:34)
      kind: switchInt(((_7 as Some).0: usize)) -> [1: bb11, otherwise: bb10]
  }
  preds [bb8, bb17]
  succs [bb10, bb11]

bb10
  0: StorageLive(_40)
    SourceInfo(regex-syntax/src/debug.rs:101:14-101:17)
  1: _40 = ((_7 as Some).0: usize)
    SourceInfo(regex-syntax/src/debug.rs:101:14-101:17)
  2: _6 = _40
    SourceInfo(regex-syntax/src/debug.rs:101:22-101:25)
  3: StorageDead(_40)
    SourceInfo(regex-syntax/src/debug.rs:101:24-101:25)
  4: FakeRead(ForLet(None), _6)
    SourceInfo(regex-syntax/src/debug.rs:97:9-97:12)
  5: StorageDead(_9)
    SourceInfo(regex-syntax/src/debug.rs:102:6-102:7)
  6: StorageDead(_7)
    SourceInfo(regex-syntax/src/debug.rs:102:6-102:7)
  7: StorageLive(_41)
    SourceInfo(regex-syntax/src/debug.rs:103:11-103:46)
  8: StorageLive(_42)
    SourceInfo(regex-syntax/src/debug.rs:103:32-103:45)
  9: StorageLive(_43)
    SourceInfo(regex-syntax/src/debug.rs:103:32-103:45)
  10: StorageLive(_44)
    SourceInfo(regex-syntax/src/debug.rs:103:38-103:45)
  11: StorageLive(_45)
    SourceInfo(regex-syntax/src/debug.rs:103:33-103:38)
  12: _45 = &(*_1)
    SourceInfo(regex-syntax/src/debug.rs:103:33-103:38)
  13: StorageLive(_46)
    SourceInfo(regex-syntax/src/debug.rs:103:39-103:44)
  14: StorageLive(_47)
    SourceInfo(regex-syntax/src/debug.rs:103:41-103:44)
  15: _47 = _6
    SourceInfo(regex-syntax/src/debug.rs:103:41-103:44)
  16: _46 = core::ops::RangeTo::<usize> { end: move _47 }
    SourceInfo(regex-syntax/src/debug.rs:103:39-103:44)
  17: StorageDead(_47)
    SourceInfo(regex-syntax/src/debug.rs:103:43-103:44)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/debug.rs:103:38-103:45)
      kind: _44 = <[u8] as core::ops::Index<core::ops::RangeTo<usize>>>::index(move _45, move _46) -> [return: bb22, unwind: bb35]
  }
  preds [bb9, bb11]
  succs [bb22, bb35]

bb11
  Terminator {
      source_info: SourceInfo(regex-syntax/src/debug.rs:100:9-100:16)
      kind: falseEdge -> [real: bb19, imaginary: bb10]
  }
  preds [bb9]
  succs [bb10, bb19]

bb12
  0: StorageLive(_16)
    SourceInfo(regex-syntax/src/debug.rs:98:29-98:42)
  1: StorageLive(_17)
    SourceInfo(regex-syntax/src/debug.rs:98:33-98:41)
  2: StorageLive(_18)
    SourceInfo(regex-syntax/src/debug.rs:98:39-98:40)
  3: _18 = const 0_usize
    SourceInfo(regex-syntax/src/debug.rs:98:39-98:40)
  4: _19 = Len((*_1))
    SourceInfo(regex-syntax/src/debug.rs:98:33-98:41)
  5: _20 = Lt(_18, _19)
    SourceInfo(regex-syntax/src/debug.rs:98:33-98:41)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/debug.rs:98:33-98:41)
      kind: assert(move _20, "index out of bounds: the length is {} but the index is {}", move _19, _18) -> [success: bb13, unwind: bb35]
  }
  preds [bb7]
  succs [bb13, bb35]

bb13
  0: _17 = (*_1)[_18]
    SourceInfo(regex-syntax/src/debug.rs:98:33-98:41)
  1: _16 = core::result::Result::<char, u8>::Err(move _17)
    SourceInfo(regex-syntax/src/debug.rs:98:29-98:42)
  2: StorageDead(_17)
    SourceInfo(regex-syntax/src/debug.rs:98:41-98:42)
  3: _0 = core::option::Option::<core::result::Result<char, u8>>::Some(move _16)
    SourceInfo(regex-syntax/src/debug.rs:98:24-98:43)
  4: StorageDead(_16)
    SourceInfo(regex-syntax/src/debug.rs:98:42-98:43)
  5: StorageDead(_18)
    SourceInfo(regex-syntax/src/debug.rs:98:42-98:43)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/lib.rs:1:1-1:1)
      kind: goto -> bb33
  }
  preds [bb12]
  succs [bb33]

bb14
  0: StorageLive(_22)
    SourceInfo(regex-syntax/src/debug.rs:99:14-99:17)
  1: _22 = &((_7 as Some).0: usize)
    SourceInfo(regex-syntax/src/debug.rs:99:14-99:17)
  2: _12 = &fake shallow _7
    SourceInfo(regex-syntax/src/debug.rs:97:21-97:34)
  3: _13 = &fake shallow ((_7 as Some).0: usize)
    SourceInfo(regex-syntax/src/debug.rs:97:21-97:34)
  4: StorageLive(_23)
    SourceInfo(regex-syntax/src/debug.rs:99:22-99:39)
  5: StorageLive(_24)
    SourceInfo(regex-syntax/src/debug.rs:99:22-99:25)
  6: _24 = (*_22)
    SourceInfo(regex-syntax/src/debug.rs:99:22-99:25)
  7: StorageLive(_25)
    SourceInfo(regex-syntax/src/debug.rs:99:28-99:39)
  8: StorageLive(_26)
    SourceInfo(regex-syntax/src/debug.rs:99:28-99:33)
  9: _26 = &(*_1)
    SourceInfo(regex-syntax/src/debug.rs:99:28-99:33)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/debug.rs:99:28-99:39)
      kind: _25 = core::slice::<impl [u8]>::len(move _26) -> [return: bb15, unwind: bb35]
  }
  preds [bb8]
  succs [bb15, bb35]

bb15
  0: StorageDead(_26)
    SourceInfo(regex-syntax/src/debug.rs:99:38-99:39)
  1: _23 = Gt(move _24, move _25)
    SourceInfo(regex-syntax/src/debug.rs:99:22-99:39)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/debug.rs:99:22-99:39)
      kind: switchInt(move _23) -> [0: bb17, otherwise: bb16]
  }
  preds [bb14]
  succs [bb16, bb17]

bb16
  0: StorageDead(_25)
    SourceInfo(regex-syntax/src/debug.rs:99:38-99:39)
  1: StorageDead(_24)
    SourceInfo(regex-syntax/src/debug.rs:99:38-99:39)
  2: StorageDead(_23)
    SourceInfo(regex-syntax/src/debug.rs:99:38-99:39)
  3: FakeRead(ForMatchGuard, _12)
    SourceInfo(regex-syntax/src/debug.rs:99:38-99:39)
  4: FakeRead(ForMatchGuard, _13)
    SourceInfo(regex-syntax/src/debug.rs:99:38-99:39)
  5: FakeRead(ForGuardBinding, _22)
    SourceInfo(regex-syntax/src/debug.rs:99:38-99:39)
  6: StorageLive(_21)
    SourceInfo(regex-syntax/src/debug.rs:99:14-99:17)
  7: _21 = ((_7 as Some).0: usize)
    SourceInfo(regex-syntax/src/debug.rs:99:14-99:17)
  8: StorageLive(_28)
    SourceInfo(regex-syntax/src/debug.rs:99:55-99:68)
  9: StorageLive(_29)
    SourceInfo(regex-syntax/src/debug.rs:99:59-99:67)
  10: StorageLive(_30)
    SourceInfo(regex-syntax/src/debug.rs:99:65-99:66)
  11: _30 = const 0_usize
    SourceInfo(regex-syntax/src/debug.rs:99:65-99:66)
  12: _31 = Len((*_1))
    SourceInfo(regex-syntax/src/debug.rs:99:59-99:67)
  13: _32 = Lt(_30, _31)
    SourceInfo(regex-syntax/src/debug.rs:99:59-99:67)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/debug.rs:99:59-99:67)
      kind: assert(move _32, "index out of bounds: the length is {} but the index is {}", move _31, _30) -> [success: bb18, unwind: bb35]
  }
  preds [bb15]
  succs [bb18, bb35]

bb17
  0: StorageDead(_25)
    SourceInfo(regex-syntax/src/debug.rs:99:38-99:39)
  1: StorageDead(_24)
    SourceInfo(regex-syntax/src/debug.rs:99:38-99:39)
  2: StorageDead(_23)
    SourceInfo(regex-syntax/src/debug.rs:99:38-99:39)
  3: StorageDead(_22)
    SourceInfo(regex-syntax/src/debug.rs:99:68-99:69)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/debug.rs:99:22-99:39)
      kind: goto -> bb9
  }
  preds [bb15]
  succs [bb9]

bb18
  0: _29 = (*_1)[_30]
    SourceInfo(regex-syntax/src/debug.rs:99:59-99:67)
  1: _28 = core::result::Result::<char, u8>::Err(move _29)
    SourceInfo(regex-syntax/src/debug.rs:99:55-99:68)
  2: StorageDead(_29)
    SourceInfo(regex-syntax/src/debug.rs:99:67-99:68)
  3: _0 = core::option::Option::<core::result::Result<char, u8>>::Some(move _28)
    SourceInfo(regex-syntax/src/debug.rs:99:50-99:69)
  4: StorageDead(_28)
    SourceInfo(regex-syntax/src/debug.rs:99:68-99:69)
  5: StorageDead(_30)
    SourceInfo(regex-syntax/src/debug.rs:99:68-99:69)
  6: StorageDead(_21)
    SourceInfo(regex-syntax/src/debug.rs:99:68-99:69)
  7: StorageDead(_22)
    SourceInfo(regex-syntax/src/debug.rs:99:68-99:69)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/lib.rs:1:1-1:1)
      kind: goto -> bb33
  }
  preds [bb16]
  succs [bb33]

bb19
  0: StorageLive(_34)
    SourceInfo(regex-syntax/src/debug.rs:100:32-100:56)
  1: StorageLive(_35)
    SourceInfo(regex-syntax/src/debug.rs:100:35-100:55)
  2: StorageLive(_36)
    SourceInfo(regex-syntax/src/debug.rs:100:46-100:54)
  3: StorageLive(_37)
    SourceInfo(regex-syntax/src/debug.rs:100:52-100:53)
  4: _37 = const 0_usize
    SourceInfo(regex-syntax/src/debug.rs:100:52-100:53)
  5: _38 = Len((*_1))
    SourceInfo(regex-syntax/src/debug.rs:100:46-100:54)
  6: _39 = Lt(_37, _38)
    SourceInfo(regex-syntax/src/debug.rs:100:46-100:54)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/debug.rs:100:46-100:54)
      kind: assert(move _39, "index out of bounds: the length is {} but the index is {}", move _38, _37) -> [success: bb20, unwind: bb35]
  }
  preds [bb11]
  succs [bb20, bb35]

bb20
  0: _36 = (*_1)[_37]
    SourceInfo(regex-syntax/src/debug.rs:100:46-100:54)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/debug.rs:100:35-100:55)
      kind: _35 = <char as core::convert::From<u8>>::from(move _36) -> [return: bb21, unwind: bb35]
  }
  preds [bb19]
  succs [bb21, bb35]

bb21
  0: StorageDead(_36)
    SourceInfo(regex-syntax/src/debug.rs:100:54-100:55)
  1: _34 = core::result::Result::<char, u8>::Ok(move _35)
    SourceInfo(regex-syntax/src/debug.rs:100:32-100:56)
  2: StorageDead(_35)
    SourceInfo(regex-syntax/src/debug.rs:100:55-100:56)
  3: _0 = core::option::Option::<core::result::Result<char, u8>>::Some(move _34)
    SourceInfo(regex-syntax/src/debug.rs:100:27-100:57)
  4: StorageDead(_34)
    SourceInfo(regex-syntax/src/debug.rs:100:56-100:57)
  5: StorageDead(_37)
    SourceInfo(regex-syntax/src/debug.rs:100:56-100:57)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/lib.rs:1:1-1:1)
      kind: goto -> bb33
  }
  preds [bb20]
  succs [bb33]

bb22
  0: StorageDead(_46)
    SourceInfo(regex-syntax/src/debug.rs:103:44-103:45)
  1: StorageDead(_45)
    SourceInfo(regex-syntax/src/debug.rs:103:44-103:45)
  2: _43 = &(*_44)
    SourceInfo(regex-syntax/src/debug.rs:103:32-103:45)
  3: _42 = &(*_43)
    SourceInfo(regex-syntax/src/debug.rs:103:32-103:45)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/debug.rs:103:11-103:46)
      kind: _41 = core::str::from_utf8(move _42) -> [return: bb23, unwind: bb35]
  }
  preds [bb10]
  succs [bb23, bb35]

bb23
  0: StorageDead(_42)
    SourceInfo(regex-syntax/src/debug.rs:103:45-103:46)
  1: PlaceMention(_41)
    SourceInfo(regex-syntax/src/debug.rs:103:11-103:46)
  2: _48 = discriminant(_41)
    SourceInfo(regex-syntax/src/debug.rs:103:11-103:46)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/debug.rs:103:5-103:46)
      kind: switchInt(move _48) -> [0: bb25, 1: bb26, otherwise: bb24]
  }
  preds [bb22]
  succs [bb24, bb25, bb26]

bb24
  0: FakeRead(ForMatchedPlace(None), _41)
    SourceInfo(regex-syntax/src/debug.rs:103:11-103:46)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/debug.rs:103:11-103:46)
      kind: unreachable
  }
  preds [bb23]
  succs []

bb25
  Terminator {
      source_info: SourceInfo(regex-syntax/src/debug.rs:104:9-104:14)
      kind: falseEdge -> [real: bb27, imaginary: bb26]
  }
  preds [bb23]
  succs [bb26, bb27]

bb26
  0: StorageLive(_56)
    SourceInfo(regex-syntax/src/debug.rs:105:24-105:37)
  1: StorageLive(_57)
    SourceInfo(regex-syntax/src/debug.rs:105:28-105:36)
  2: StorageLive(_58)
    SourceInfo(regex-syntax/src/debug.rs:105:34-105:35)
  3: _58 = const 0_usize
    SourceInfo(regex-syntax/src/debug.rs:105:34-105:35)
  4: _59 = Len((*_1))
    SourceInfo(regex-syntax/src/debug.rs:105:28-105:36)
  5: _60 = Lt(_58, _59)
    SourceInfo(regex-syntax/src/debug.rs:105:28-105:36)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/debug.rs:105:28-105:36)
      kind: assert(move _60, "index out of bounds: the length is {} but the index is {}", move _59, _58) -> [success: bb31, unwind: bb35]
  }
  preds [bb23, bb25]
  succs [bb31, bb35]

bb27
  0: StorageLive(_49)
    SourceInfo(regex-syntax/src/debug.rs:104:12-104:13)
  1: _49 = ((_41 as Ok).0: &str)
    SourceInfo(regex-syntax/src/debug.rs:104:12-104:13)
  2: StorageLive(_50)
    SourceInfo(regex-syntax/src/debug.rs:104:23-104:52)
  3: StorageLive(_51)
    SourceInfo(regex-syntax/src/debug.rs:104:26-104:51)
  4: StorageLive(_52)
    SourceInfo(regex-syntax/src/debug.rs:104:26-104:42)
  5: StorageLive(_53)
    SourceInfo(regex-syntax/src/debug.rs:104:26-104:35)
  6: StorageLive(_54)
    SourceInfo(regex-syntax/src/debug.rs:104:26-104:35)
  7: StorageLive(_55)
    SourceInfo(regex-syntax/src/debug.rs:104:26-104:27)
  8: _55 = &(*_49)
    SourceInfo(regex-syntax/src/debug.rs:104:26-104:27)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/debug.rs:104:26-104:35)
      kind: _54 = core::str::<impl str>::chars(move _55) -> [return: bb28, unwind: bb35]
  }
  preds [bb25]
  succs [bb28, bb35]

bb28
  0: _53 = &mut _54
    SourceInfo(regex-syntax/src/debug.rs:104:26-104:35)
  1: StorageDead(_55)
    SourceInfo(regex-syntax/src/debug.rs:104:34-104:35)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/debug.rs:104:26-104:42)
      kind: _52 = <core::str::Chars<'_> as core::iter::Iterator>::next(move _53) -> [return: bb29, unwind: bb35]
  }
  preds [bb27]
  succs [bb29, bb35]

bb29
  0: StorageDead(_53)
    SourceInfo(regex-syntax/src/debug.rs:104:41-104:42)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/debug.rs:104:26-104:51)
      kind: _51 = core::option::Option::<char>::unwrap(move _52) -> [return: bb30, unwind: bb35]
  }
  preds [bb28]
  succs [bb30, bb35]

bb30
  0: StorageDead(_52)
    SourceInfo(regex-syntax/src/debug.rs:104:50-104:51)
  1: _50 = core::result::Result::<char, u8>::Ok(move _51)
    SourceInfo(regex-syntax/src/debug.rs:104:23-104:52)
  2: StorageDead(_51)
    SourceInfo(regex-syntax/src/debug.rs:104:51-104:52)
  3: _0 = core::option::Option::<core::result::Result<char, u8>>::Some(move _50)
    SourceInfo(regex-syntax/src/debug.rs:104:18-104:53)
  4: StorageDead(_50)
    SourceInfo(regex-syntax/src/debug.rs:104:52-104:53)
  5: StorageDead(_54)
    SourceInfo(regex-syntax/src/debug.rs:104:52-104:53)
  6: StorageDead(_49)
    SourceInfo(regex-syntax/src/debug.rs:104:52-104:53)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/debug.rs:104:52-104:53)
      kind: goto -> bb32
  }
  preds [bb29]
  succs [bb32]

bb31
  0: _57 = (*_1)[_58]
    SourceInfo(regex-syntax/src/debug.rs:105:28-105:36)
  1: _56 = core::result::Result::<char, u8>::Err(move _57)
    SourceInfo(regex-syntax/src/debug.rs:105:24-105:37)
  2: StorageDead(_57)
    SourceInfo(regex-syntax/src/debug.rs:105:36-105:37)
  3: _0 = core::option::Option::<core::result::Result<char, u8>>::Some(move _56)
    SourceInfo(regex-syntax/src/debug.rs:105:19-105:38)
  4: StorageDead(_56)
    SourceInfo(regex-syntax/src/debug.rs:105:37-105:38)
  5: StorageDead(_58)
    SourceInfo(regex-syntax/src/debug.rs:105:37-105:38)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/debug.rs:105:37-105:38)
      kind: goto -> bb32
  }
  preds [bb26]
  succs [bb32]

bb32
  0: StorageDead(_6)
    SourceInfo(regex-syntax/src/debug.rs:107:1-107:2)
  1: StorageDead(_44)
    SourceInfo(regex-syntax/src/debug.rs:107:1-107:2)
  2: StorageDead(_43)
    SourceInfo(regex-syntax/src/debug.rs:107:1-107:2)
  3: StorageDead(_41)
    SourceInfo(regex-syntax/src/debug.rs:107:1-107:2)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/debug.rs:107:2-107:2)
      kind: goto -> bb34
  }
  preds [bb30, bb31]
  succs [bb34]

bb33
  0: StorageDead(_9)
    SourceInfo(regex-syntax/src/debug.rs:102:6-102:7)
  1: StorageDead(_7)
    SourceInfo(regex-syntax/src/debug.rs:102:6-102:7)
  2: StorageDead(_6)
    SourceInfo(regex-syntax/src/debug.rs:107:1-107:2)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/lib.rs:1:1-1:1)
      kind: goto -> bb34
  }
  preds [bb13, bb18, bb21]
  succs [bb34]

bb34
  Terminator {
      source_info: SourceInfo(regex-syntax/src/debug.rs:107:2-107:2)
      kind: return
  }
  preds [bb2, bb32, bb33]
  succs []

bb35
  Terminator {
      source_info: SourceInfo(regex-syntax/src/debug.rs:77:1-107:2)
      kind: resume
  }
  preds [bb0, bb3, bb4, bb10, bb12, bb14, bb16, bb19, bb20, bb22, bb26, bb27, bb28, bb29]
  succs []

