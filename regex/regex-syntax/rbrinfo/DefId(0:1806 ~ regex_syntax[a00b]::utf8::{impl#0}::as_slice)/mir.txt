bb0
  0: StorageLive(_2)
    SourceInfo(regex-syntax/src/utf8.rs:138:9-143:10)
  1: PlaceMention((*_1))
    SourceInfo(regex-syntax/src/utf8.rs:138:15-138:20)
  2: _3 = discriminant((*_1))
    SourceInfo(regex-syntax/src/utf8.rs:138:15-138:20)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:138:9-138:20)
      kind: switchInt(move _3) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2, bb3, bb4, bb5]

bb1
  0: FakeRead(ForMatchedPlace(None), (*_1))
    SourceInfo(regex-syntax/src/utf8.rs:138:15-138:20)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:138:15-138:20)
      kind: unreachable
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:139:13-139:23)
      kind: falseEdge -> [real: bb6, imaginary: bb3]
  }
  preds [bb0]
  succs [bb3, bb6]

bb3
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:140:13-140:23)
      kind: falseEdge -> [real: bb8, imaginary: bb4]
  }
  preds [bb0, bb2]
  succs [bb4, bb8]

bb4
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:141:13-141:25)
      kind: falseEdge -> [real: bb10, imaginary: bb5]
  }
  preds [bb0, bb3]
  succs [bb5, bb10]

bb5
  0: StorageLive(_17)
    SourceInfo(regex-syntax/src/utf8.rs:142:18-142:23)
  1: _17 = &(((*_1) as Four).0: [utf8::Utf8Range; 4])
    SourceInfo(regex-syntax/src/utf8.rs:142:18-142:23)
  2: StorageLive(_18)
    SourceInfo(regex-syntax/src/utf8.rs:142:28-142:34)
  3: StorageLive(_19)
    SourceInfo(regex-syntax/src/utf8.rs:142:30-142:34)
  4: StorageLive(_20)
    SourceInfo(regex-syntax/src/utf8.rs:142:29-142:30)
  5: _20 = &(*_17)
    SourceInfo(regex-syntax/src/utf8.rs:142:29-142:30)
  6: StorageLive(_21)
    SourceInfo(regex-syntax/src/utf8.rs:142:31-142:33)
  7: _21 = core::ops::RangeFull
    SourceInfo(regex-syntax/src/utf8.rs:142:31-142:33)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:142:30-142:34)
      kind: _19 = <[utf8::Utf8Range; 4] as core::ops::Index<core::ops::RangeFull>>::index(move _20, move _21) -> [return: bb12, unwind: bb14]
  }
  preds [bb0, bb4]
  succs [bb12, bb14]

bb6
  0: StorageLive(_4)
    SourceInfo(regex-syntax/src/utf8.rs:139:17-139:22)
  1: _4 = &(((*_1) as One).0: utf8::Utf8Range)
    SourceInfo(regex-syntax/src/utf8.rs:139:17-139:22)
  2: StorageLive(_5)
    SourceInfo(regex-syntax/src/utf8.rs:139:27-139:45)
  3: StorageLive(_6)
    SourceInfo(regex-syntax/src/utf8.rs:139:43-139:44)
  4: _6 = &(*_4)
    SourceInfo(regex-syntax/src/utf8.rs:139:43-139:44)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:139:27-139:45)
      kind: _5 = core::slice::from_ref::<utf8::Utf8Range>(move _6) -> [return: bb7, unwind: bb14]
  }
  preds [bb2]
  succs [bb7, bb14]

bb7
  0: _2 = &(*_5)
    SourceInfo(regex-syntax/src/utf8.rs:139:27-139:45)
  1: StorageDead(_6)
    SourceInfo(regex-syntax/src/utf8.rs:139:44-139:45)
  2: StorageDead(_5)
    SourceInfo(regex-syntax/src/utf8.rs:139:44-139:45)
  3: StorageDead(_4)
    SourceInfo(regex-syntax/src/utf8.rs:139:44-139:45)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:139:44-139:45)
      kind: goto -> bb13
  }
  preds [bb6]
  succs [bb13]

bb8
  0: StorageLive(_7)
    SourceInfo(regex-syntax/src/utf8.rs:140:17-140:22)
  1: _7 = &(((*_1) as Two).0: [utf8::Utf8Range; 2])
    SourceInfo(regex-syntax/src/utf8.rs:140:17-140:22)
  2: StorageLive(_8)
    SourceInfo(regex-syntax/src/utf8.rs:140:27-140:33)
  3: StorageLive(_9)
    SourceInfo(regex-syntax/src/utf8.rs:140:29-140:33)
  4: StorageLive(_10)
    SourceInfo(regex-syntax/src/utf8.rs:140:28-140:29)
  5: _10 = &(*_7)
    SourceInfo(regex-syntax/src/utf8.rs:140:28-140:29)
  6: StorageLive(_11)
    SourceInfo(regex-syntax/src/utf8.rs:140:30-140:32)
  7: _11 = core::ops::RangeFull
    SourceInfo(regex-syntax/src/utf8.rs:140:30-140:32)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:140:29-140:33)
      kind: _9 = <[utf8::Utf8Range; 2] as core::ops::Index<core::ops::RangeFull>>::index(move _10, move _11) -> [return: bb9, unwind: bb14]
  }
  preds [bb3]
  succs [bb9, bb14]

bb9
  0: StorageDead(_11)
    SourceInfo(regex-syntax/src/utf8.rs:140:32-140:33)
  1: StorageDead(_10)
    SourceInfo(regex-syntax/src/utf8.rs:140:32-140:33)
  2: _8 = &(*_9)
    SourceInfo(regex-syntax/src/utf8.rs:140:27-140:33)
  3: _2 = &(*_8)
    SourceInfo(regex-syntax/src/utf8.rs:140:27-140:33)
  4: StorageDead(_9)
    SourceInfo(regex-syntax/src/utf8.rs:140:32-140:33)
  5: StorageDead(_8)
    SourceInfo(regex-syntax/src/utf8.rs:140:32-140:33)
  6: StorageDead(_7)
    SourceInfo(regex-syntax/src/utf8.rs:140:32-140:33)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:140:32-140:33)
      kind: goto -> bb13
  }
  preds [bb8]
  succs [bb13]

bb10
  0: StorageLive(_12)
    SourceInfo(regex-syntax/src/utf8.rs:141:19-141:24)
  1: _12 = &(((*_1) as Three).0: [utf8::Utf8Range; 3])
    SourceInfo(regex-syntax/src/utf8.rs:141:19-141:24)
  2: StorageLive(_13)
    SourceInfo(regex-syntax/src/utf8.rs:141:29-141:35)
  3: StorageLive(_14)
    SourceInfo(regex-syntax/src/utf8.rs:141:31-141:35)
  4: StorageLive(_15)
    SourceInfo(regex-syntax/src/utf8.rs:141:30-141:31)
  5: _15 = &(*_12)
    SourceInfo(regex-syntax/src/utf8.rs:141:30-141:31)
  6: StorageLive(_16)
    SourceInfo(regex-syntax/src/utf8.rs:141:32-141:34)
  7: _16 = core::ops::RangeFull
    SourceInfo(regex-syntax/src/utf8.rs:141:32-141:34)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:141:31-141:35)
      kind: _14 = <[utf8::Utf8Range; 3] as core::ops::Index<core::ops::RangeFull>>::index(move _15, move _16) -> [return: bb11, unwind: bb14]
  }
  preds [bb4]
  succs [bb11, bb14]

bb11
  0: StorageDead(_16)
    SourceInfo(regex-syntax/src/utf8.rs:141:34-141:35)
  1: StorageDead(_15)
    SourceInfo(regex-syntax/src/utf8.rs:141:34-141:35)
  2: _13 = &(*_14)
    SourceInfo(regex-syntax/src/utf8.rs:141:29-141:35)
  3: _2 = &(*_13)
    SourceInfo(regex-syntax/src/utf8.rs:141:29-141:35)
  4: StorageDead(_14)
    SourceInfo(regex-syntax/src/utf8.rs:141:34-141:35)
  5: StorageDead(_13)
    SourceInfo(regex-syntax/src/utf8.rs:141:34-141:35)
  6: StorageDead(_12)
    SourceInfo(regex-syntax/src/utf8.rs:141:34-141:35)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:141:34-141:35)
      kind: goto -> bb13
  }
  preds [bb10]
  succs [bb13]

bb12
  0: StorageDead(_21)
    SourceInfo(regex-syntax/src/utf8.rs:142:33-142:34)
  1: StorageDead(_20)
    SourceInfo(regex-syntax/src/utf8.rs:142:33-142:34)
  2: _18 = &(*_19)
    SourceInfo(regex-syntax/src/utf8.rs:142:28-142:34)
  3: _2 = &(*_18)
    SourceInfo(regex-syntax/src/utf8.rs:142:28-142:34)
  4: StorageDead(_19)
    SourceInfo(regex-syntax/src/utf8.rs:142:33-142:34)
  5: StorageDead(_18)
    SourceInfo(regex-syntax/src/utf8.rs:142:33-142:34)
  6: StorageDead(_17)
    SourceInfo(regex-syntax/src/utf8.rs:142:33-142:34)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:142:33-142:34)
      kind: goto -> bb13
  }
  preds [bb5]
  succs [bb13]

bb13
  0: _0 = &(*_2)
    SourceInfo(regex-syntax/src/utf8.rs:138:9-143:10)
  1: StorageDead(_2)
    SourceInfo(regex-syntax/src/utf8.rs:144:5-144:6)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:144:6-144:6)
      kind: return
  }
  preds [bb7, bb9, bb11, bb12]
  succs []

bb14
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:136:5-144:6)
      kind: resume
  }
  preds [bb5, bb6, bb8, bb10]
  succs []

