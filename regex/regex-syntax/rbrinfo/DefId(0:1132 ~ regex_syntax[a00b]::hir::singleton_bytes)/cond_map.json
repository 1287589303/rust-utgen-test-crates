{
  "regex-syntax/src/hir/mod.rs:3003:16:3003:27": [
    {
      "For": {
        "iter_var": "hir",
        "iter_range": "hirs.iter()"
      }
    }
  ],
  "regex-syntax/src/hir/mod.rs:3008:12:3008:30": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "literal.len() != 1",
          "lhs": "literal.len()",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/hir/mod.rs:3004:29:3004:40": [
    {
      "Match": {
        "match_source": "regex-syntax/src/hir/mod.rs:3004:29:3004:40",
        "match_str": "*hir.kind()",
        "match_kind": {
          "Enum": [
            "Empty",
            "Literal",
            "Class",
            "Look",
            "Repetition",
            "Capture",
            "Concat",
            "Alternation"
          ]
        },
        "arms": {
          "regex-syntax/src/hir/mod.rs:3005:13:3005:49": {
            "pat": {
              "pat_str": "HirKind::Literal(Literal(ref bytes))",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/mod.rs:3005:53:3005:58"
          },
          "regex-syntax/src/hir/mod.rs:3006:13:3006:14": {
            "pat": {
              "pat_str": "_",
              "kind": "Wild"
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/mod.rs:3006:18:3006:29"
          }
        }
      }
    }
  ]
}