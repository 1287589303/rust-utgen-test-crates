bb0
  0: StorageLive(_2)
    SourceInfo(regex-syntax/src/error.rs:260:12-260:39)
  1: StorageLive(_3)
    SourceInfo(regex-syntax/src/error.rs:260:12-260:34)
  2: _3 = ((*_1).1: usize)
    SourceInfo(regex-syntax/src/error.rs:260:12-260:34)
  3: _2 = Eq(move _3, const 0_usize)
    SourceInfo(regex-syntax/src/error.rs:260:12-260:39)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/error.rs:260:12-260:39)
      kind: switchInt(move _2) -> [0: bb2, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_3)
    SourceInfo(regex-syntax/src/error.rs:260:38-260:39)
  1: _0 = const 4_usize
    SourceInfo(regex-syntax/src/error.rs:261:13-261:14)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/error.rs:260:9-264:10)
      kind: goto -> bb4
  }
  preds [bb0]
  succs [bb4]

bb2
  0: StorageDead(_3)
    SourceInfo(regex-syntax/src/error.rs:260:38-260:39)
  1: StorageLive(_4)
    SourceInfo(regex-syntax/src/error.rs:263:17-263:39)
  2: _4 = ((*_1).1: usize)
    SourceInfo(regex-syntax/src/error.rs:263:17-263:39)
  3: _5 = AddWithOverflow(const 2_usize, _4)
    SourceInfo(regex-syntax/src/error.rs:263:13-263:39)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/error.rs:263:13-263:39)
      kind: assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", const 2_usize, move _4) -> [success: bb3, unwind: bb5]
  }
  preds [bb0]
  succs [bb3, bb5]

bb3
  0: _0 = move (_5.0: usize)
    SourceInfo(regex-syntax/src/error.rs:263:13-263:39)
  1: StorageDead(_4)
    SourceInfo(regex-syntax/src/error.rs:263:38-263:39)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/error.rs:260:9-264:10)
      kind: goto -> bb4
  }
  preds [bb2]
  succs [bb4]

bb4
  0: StorageDead(_2)
    SourceInfo(regex-syntax/src/error.rs:264:9-264:10)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/error.rs:265:6-265:6)
      kind: return
  }
  preds [bb1, bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(regex-syntax/src/error.rs:259:5-265:6)
      kind: resume
  }
  preds [bb2]
  succs []

