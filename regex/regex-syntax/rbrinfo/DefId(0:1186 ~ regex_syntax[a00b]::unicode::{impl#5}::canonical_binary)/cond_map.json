{
  "regex-syntax/src/unicode.rs:314:12:314:54": [
    {
      "Bool": {
        "Other": "let Some(canon) = canonical_gencat(&norm)?"
      }
    }
  ],
  "regex-syntax/src/unicode.rs:309:44:309:56": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "norm != \"lc\"",
          "lhs": "norm",
          "rhs": "\"lc\"",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/unicode.rs:309:12:309:24": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "norm != \"cf\"",
          "lhs": "norm",
          "rhs": "\"cf\"",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/unicode.rs:310:34:310:56": [
    {
      "Try": "canonical_prop(&norm)?"
    }
  ],
  "regex-syntax/src/unicode.rs:317:12:317:54": [
    {
      "Bool": {
        "Other": "let Some(canon) = canonical_script(&norm)?"
      }
    }
  ],
  "regex-syntax/src/unicode.rs:309:28:309:40": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "norm != \"sc\"",
          "lhs": "norm",
          "rhs": "\"sc\"",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/unicode.rs:314:30:314:54": [
    {
      "Try": "canonical_gencat(&norm)?"
    }
  ],
  "regex-syntax/src/unicode.rs:310:16:310:56": [
    {
      "Bool": {
        "Other": "let Some(canon) = canonical_prop(&norm)?"
      }
    }
  ],
  "regex-syntax/src/unicode.rs:317:30:317:54": [
    {
      "Try": "canonical_script(&norm)?"
    }
  ]
}