bb0
  0: StorageLive(_2)
    SourceInfo(regex-syntax/src/hir/literal.rs:2320:5-2320:34)
  1: _2 = const rank::BYTE_FREQUENCIES
    SourceInfo(regex-syntax/src/hir/literal.rs:2320:5-2320:34)
  2: StorageLive(_3)
    SourceInfo(regex-syntax/src/hir/literal.rs:2320:35-2320:52)
  3: StorageLive(_4)
    SourceInfo(regex-syntax/src/hir/literal.rs:2320:47-2320:51)
  4: _4 = _1
    SourceInfo(regex-syntax/src/hir/literal.rs:2320:47-2320:51)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/literal.rs:2320:35-2320:52)
      kind: _3 = <usize as core::convert::From<u8>>::from(move _4) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-syntax/src/hir/literal.rs:2320:51-2320:52)
  1: _5 = Len(_2)
    SourceInfo(regex-syntax/src/hir/literal.rs:2320:5-2320:53)
  2: _6 = Lt(_3, _5)
    SourceInfo(regex-syntax/src/hir/literal.rs:2320:5-2320:53)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/literal.rs:2320:5-2320:53)
      kind: assert(move _6, "index out of bounds: the length is {} but the index is {}", move _5, _3) -> [success: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: _0 = _2[_3]
    SourceInfo(regex-syntax/src/hir/literal.rs:2320:5-2320:53)
  1: StorageDead(_3)
    SourceInfo(regex-syntax/src/hir/literal.rs:2321:1-2321:2)
  2: StorageDead(_2)
    SourceInfo(regex-syntax/src/hir/literal.rs:2321:1-2321:2)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/literal.rs:2321:2-2321:2)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/literal.rs:2319:1-2321:2)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

