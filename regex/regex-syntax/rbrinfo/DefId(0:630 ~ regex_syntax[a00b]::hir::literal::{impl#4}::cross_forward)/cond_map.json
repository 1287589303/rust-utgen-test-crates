{
  "regex-syntax/src/hir/literal.rs:960:36:960:62": [
    {
      "Match": {
        "match_source": "regex-syntax/src/hir/literal.rs:960:36:960:62",
        "match_str": "self.cross_preamble(other)",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-syntax/src/hir/literal.rs:961:13:961:17": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/literal.rs:961:21:961:27"
          },
          "regex-syntax/src/hir/literal.rs:962:13:962:33": {
            "pat": {
              "pat_str": "Some((lits1, lits2))",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/literal.rs:962:37:962:51"
          }
        }
      }
    }
  ],
  "regex-syntax/src/hir/literal.rs:972:21:972:51": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "selflit.len() + otherlit.len()",
          "lhs": "selflit.len()",
          "rhs": "otherlit.len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/hir/literal.rs:976:21:976:40": [
    {
      "Bool": {
        "Other": "otherlit.is_exact()"
      }
    }
  ],
  "regex-syntax/src/hir/literal.rs:966:17:966:35": [
    {
      "Bool": {
        "Other": "selflit.is_exact()"
      }
    }
  ],
  "regex-syntax/src/hir/literal.rs:965:24:965:71": [
    {
      "For": {
        "iter_var": "selflit",
        "iter_range": "mem::replace(lits1, Vec::with_capacity(newcap))"
      }
    }
  ],
  "regex-syntax/src/hir/literal.rs:970:29:970:41": [
    {
      "For": {
        "iter_var": "otherlit",
        "iter_range": "lits2.iter()"
      }
    }
  ]
}