{
  "regex-syntax/src/ast/parse.rs:1054:35:1054:53": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.char() == '*'",
          "lhs": "self.char()",
          "rhs": "'*'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1054:13:1054:31": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.char() == '?'",
          "lhs": "self.char()",
          "rhs": "'?'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1054:57:1054:75": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.char() == '+'",
          "lhs": "self.char()",
          "rhs": "'+'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1065:15:1065:18": [
    {
      "Match": {
        "match_source": "regex-syntax/src/ast/parse.rs:1065:15:1065:18",
        "match_str": "ast",
        "match_kind": {
          "Enum": [
            "Empty",
            "Flags",
            "Literal",
            "Dot",
            "Assertion",
            "ClassUnicode",
            "ClassPerl",
            "ClassBracketed",
            "Repetition",
            "Group",
            "Alternation",
            "Concat"
          ]
        },
        "arms": {
          "regex-syntax/src/ast/parse.rs:1071:13:1071:14": {
            "pat": {
              "pat_str": "_",
              "kind": "Wild"
            },
            "guard": null,
            "body_source": "regex-syntax/src/ast/parse.rs:1071:18:1071:20"
          },
          "regex-syntax/src/ast/parse.rs:1066:29:1066:42": {
            "pat": {
              "pat_str": "Ast::Flags(_)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/ast/parse.rs:1066:46:1070:14"
          },
          "regex-syntax/src/ast/parse.rs:1066:13:1066:26": {
            "pat": {
              "pat_str": "Ast::Empty(_)",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/ast/parse.rs:1066:46:1070:14"
          }
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1057:25:1057:42": [
    {
      "Match": {
        "match_source": "regex-syntax/src/ast/parse.rs:1057:25:1057:42",
        "match_str": "concat.asts.pop()",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-syntax/src/ast/parse.rs:1058:13:1058:22": {
            "pat": {
              "pat_str": "Some(ast)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/ast/parse.rs:1058:26:1058:29"
          },
          "regex-syntax/src/ast/parse.rs:1059:13:1059:17": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/ast/parse.rs:1059:21:1063:14"
          }
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1074:12:1074:23": [
    {
      "Bool": {
        "Other": "self.bump()"
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1074:27:1074:45": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.char() == '?'",
          "lhs": "self.char()",
          "rhs": "'?'",
          "cmp_with_int": true
        }
      }
    }
  ]
}