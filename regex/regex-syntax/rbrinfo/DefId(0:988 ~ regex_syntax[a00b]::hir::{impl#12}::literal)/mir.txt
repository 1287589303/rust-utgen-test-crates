bb0
  0: StorageLive(_2)
    SourceInfo(regex-syntax/src/hir/mod.rs:1197:13-1197:15)
  1: StorageLive(_3)
    SourceInfo(regex-syntax/src/hir/mod.rs:1197:18-1197:22)
  2: _3 = &(*_1)
    SourceInfo(regex-syntax/src/hir/mod.rs:1197:18-1197:22)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1197:18-1197:31)
      kind: _2 = hir::ClassUnicode::ranges(move _3) -> [return: bb1, unwind: bb17]
  }
  preds []
  succs [bb1, bb17]

bb1
  0: StorageDead(_3)
    SourceInfo(regex-syntax/src/hir/mod.rs:1197:30-1197:31)
  1: FakeRead(ForLet(None), _2)
    SourceInfo(regex-syntax/src/hir/mod.rs:1197:13-1197:15)
  2: StorageLive(_4)
    SourceInfo(regex-syntax/src/hir/mod.rs:1198:12-1198:25)
  3: StorageLive(_5)
    SourceInfo(regex-syntax/src/hir/mod.rs:1198:12-1198:20)
  4: StorageLive(_6)
    SourceInfo(regex-syntax/src/hir/mod.rs:1198:12-1198:14)
  5: _6 = &(*_2)
    SourceInfo(regex-syntax/src/hir/mod.rs:1198:12-1198:14)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1198:12-1198:20)
      kind: _5 = core::slice::<impl [hir::ClassUnicodeRange]>::len(move _6) -> [return: bb2, unwind: bb17]
  }
  preds [bb0]
  succs [bb2, bb17]

bb2
  0: StorageDead(_6)
    SourceInfo(regex-syntax/src/hir/mod.rs:1198:19-1198:20)
  1: _4 = Eq(move _5, const 1_usize)
    SourceInfo(regex-syntax/src/hir/mod.rs:1198:12-1198:25)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1198:12-1198:25)
      kind: switchInt(move _4) -> [0: bb13, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb13]

bb3
  0: StorageDead(_5)
    SourceInfo(regex-syntax/src/hir/mod.rs:1198:24-1198:25)
  1: StorageLive(_7)
    SourceInfo(regex-syntax/src/hir/mod.rs:1198:29-1198:53)
  2: StorageLive(_8)
    SourceInfo(regex-syntax/src/hir/mod.rs:1198:29-1198:40)
  3: StorageLive(_9)
    SourceInfo(regex-syntax/src/hir/mod.rs:1198:32-1198:33)
  4: _9 = const 0_usize
    SourceInfo(regex-syntax/src/hir/mod.rs:1198:32-1198:33)
  5: _10 = Len((*_2))
    SourceInfo(regex-syntax/src/hir/mod.rs:1198:29-1198:34)
  6: _11 = Lt(_9, _10)
    SourceInfo(regex-syntax/src/hir/mod.rs:1198:29-1198:34)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1198:29-1198:34)
      kind: assert(move _11, "index out of bounds: the length is {} but the index is {}", move _10, _9) -> [success: bb4, unwind: bb17]
  }
  preds [bb2]
  succs [bb4, bb17]

bb4
  0: _8 = ((*_2)[_9].0: char)
    SourceInfo(regex-syntax/src/hir/mod.rs:1198:29-1198:40)
  1: StorageLive(_12)
    SourceInfo(regex-syntax/src/hir/mod.rs:1198:44-1198:53)
  2: StorageLive(_13)
    SourceInfo(regex-syntax/src/hir/mod.rs:1198:47-1198:48)
  3: _13 = const 0_usize
    SourceInfo(regex-syntax/src/hir/mod.rs:1198:47-1198:48)
  4: _14 = Len((*_2))
    SourceInfo(regex-syntax/src/hir/mod.rs:1198:44-1198:49)
  5: _15 = Lt(_13, _14)
    SourceInfo(regex-syntax/src/hir/mod.rs:1198:44-1198:49)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1198:44-1198:49)
      kind: assert(move _15, "index out of bounds: the length is {} but the index is {}", move _14, _13) -> [success: bb5, unwind: bb17]
  }
  preds [bb3]
  succs [bb5, bb17]

bb5
  0: _12 = ((*_2)[_13].1: char)
    SourceInfo(regex-syntax/src/hir/mod.rs:1198:44-1198:53)
  1: _7 = Eq(move _8, move _12)
    SourceInfo(regex-syntax/src/hir/mod.rs:1198:29-1198:53)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1198:29-1198:53)
      kind: switchInt(move _7) -> [0: bb12, otherwise: bb6]
  }
  preds [bb4]
  succs [bb6, bb12]

bb6
  0: StorageDead(_13)
    SourceInfo(regex-syntax/src/hir/mod.rs:1198:52-1198:53)
  1: StorageDead(_12)
    SourceInfo(regex-syntax/src/hir/mod.rs:1198:52-1198:53)
  2: StorageDead(_9)
    SourceInfo(regex-syntax/src/hir/mod.rs:1198:52-1198:53)
  3: StorageDead(_8)
    SourceInfo(regex-syntax/src/hir/mod.rs:1198:52-1198:53)
  4: StorageLive(_16)
    SourceInfo(regex-syntax/src/hir/mod.rs:1199:18-1199:79)
  5: StorageLive(_17)
    SourceInfo(regex-syntax/src/hir/mod.rs:1199:18-1199:66)
  6: StorageLive(_18)
    SourceInfo(regex-syntax/src/hir/mod.rs:1199:18-1199:54)
  7: StorageLive(_19)
    SourceInfo(regex-syntax/src/hir/mod.rs:1199:18-1199:54)
  8: StorageLive(_20)
    SourceInfo(regex-syntax/src/hir/mod.rs:1199:18-1199:29)
  9: StorageLive(_21)
    SourceInfo(regex-syntax/src/hir/mod.rs:1199:21-1199:22)
  10: _21 = const 0_usize
    SourceInfo(regex-syntax/src/hir/mod.rs:1199:21-1199:22)
  11: _22 = Len((*_2))
    SourceInfo(regex-syntax/src/hir/mod.rs:1199:18-1199:23)
  12: _23 = Lt(_21, _22)
    SourceInfo(regex-syntax/src/hir/mod.rs:1199:18-1199:23)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1199:18-1199:23)
      kind: assert(move _23, "index out of bounds: the length is {} but the index is {}", move _22, _21) -> [success: bb7, unwind: bb17]
  }
  preds [bb5]
  succs [bb7, bb17]

bb7
  0: _20 = ((*_2)[_21].0: char)
    SourceInfo(regex-syntax/src/hir/mod.rs:1199:18-1199:29)
  1: StorageLive(_24)
    SourceInfo(regex-syntax/src/hir/mod.rs:1199:42-1199:53)
  2: StorageLive(_25)
    SourceInfo(regex-syntax/src/hir/mod.rs:1199:42-1199:53)
  3: StorageLive(_26)
    SourceInfo(regex-syntax/src/hir/mod.rs:1199:42-1199:53)
  4: StorageLive(_27)
    SourceInfo(regex-syntax/src/hir/mod.rs:1199:47-1199:53)
  5: _27 = [const 0_u8; 4]
    SourceInfo(regex-syntax/src/hir/mod.rs:1199:47-1199:53)
  6: _26 = &mut _27
    SourceInfo(regex-syntax/src/hir/mod.rs:1199:42-1199:53)
  7: _25 = &mut (*_26)
    SourceInfo(regex-syntax/src/hir/mod.rs:1199:42-1199:53)
  8: _24 = move _25 as &mut [u8] (PointerCoercion(Unsize))
    SourceInfo(regex-syntax/src/hir/mod.rs:1199:42-1199:53)
  9: StorageDead(_25)
    SourceInfo(regex-syntax/src/hir/mod.rs:1199:52-1199:53)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1199:18-1199:54)
      kind: _19 = core::char::methods::<impl char>::encode_utf8(move _20, move _24) -> [return: bb8, unwind: bb17]
  }
  preds [bb6]
  succs [bb8, bb17]

bb8
  0: _18 = &_19
    SourceInfo(regex-syntax/src/hir/mod.rs:1199:18-1199:54)
  1: StorageDead(_24)
    SourceInfo(regex-syntax/src/hir/mod.rs:1199:53-1199:54)
  2: StorageDead(_20)
    SourceInfo(regex-syntax/src/hir/mod.rs:1199:53-1199:54)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1199:18-1199:66)
      kind: _17 = <&mut str as std::string::ToString>::to_string(move _18) -> [return: bb9, unwind: bb17]
  }
  preds [bb7]
  succs [bb9, bb17]

bb9
  0: StorageDead(_18)
    SourceInfo(regex-syntax/src/hir/mod.rs:1199:65-1199:66)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1199:18-1199:79)
      kind: _16 = std::string::String::into_bytes(move _17) -> [return: bb10, unwind: bb16]
  }
  preds [bb8]
  succs [bb10, bb16]

bb10
  0: StorageDead(_17)
    SourceInfo(regex-syntax/src/hir/mod.rs:1199:78-1199:79)
  1: _0 = core::option::Option::<std::vec::Vec<u8>>::Some(move _16)
    SourceInfo(regex-syntax/src/hir/mod.rs:1199:13-1199:80)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1199:79-1199:80)
      kind: drop(_16) -> [return: bb11, unwind: bb17]
  }
  preds [bb9]
  succs [bb11, bb17]

bb11
  0: StorageDead(_16)
    SourceInfo(regex-syntax/src/hir/mod.rs:1199:79-1199:80)
  1: StorageDead(_27)
    SourceInfo(regex-syntax/src/hir/mod.rs:1200:9-1200:10)
  2: StorageDead(_26)
    SourceInfo(regex-syntax/src/hir/mod.rs:1200:9-1200:10)
  3: StorageDead(_21)
    SourceInfo(regex-syntax/src/hir/mod.rs:1200:9-1200:10)
  4: StorageDead(_19)
    SourceInfo(regex-syntax/src/hir/mod.rs:1200:9-1200:10)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1198:9-1202:10)
      kind: goto -> bb15
  }
  preds [bb10]
  succs [bb15]

bb12
  0: StorageDead(_13)
    SourceInfo(regex-syntax/src/hir/mod.rs:1198:52-1198:53)
  1: StorageDead(_12)
    SourceInfo(regex-syntax/src/hir/mod.rs:1198:52-1198:53)
  2: StorageDead(_9)
    SourceInfo(regex-syntax/src/hir/mod.rs:1198:52-1198:53)
  3: StorageDead(_8)
    SourceInfo(regex-syntax/src/hir/mod.rs:1198:52-1198:53)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/lib.rs:1:1-1:1)
      kind: goto -> bb14
  }
  preds [bb5]
  succs [bb14]

bb13
  0: StorageDead(_5)
    SourceInfo(regex-syntax/src/hir/mod.rs:1198:24-1198:25)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/lib.rs:1:1-1:1)
      kind: goto -> bb14
  }
  preds [bb2]
  succs [bb14]

bb14
  0: _0 = core::option::Option::<std::vec::Vec<u8>>::None
    SourceInfo(regex-syntax/src/hir/mod.rs:1201:13-1201:17)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1198:9-1202:10)
      kind: goto -> bb15
  }
  preds [bb12, bb13]
  succs [bb15]

bb15
  0: StorageDead(_7)
    SourceInfo(regex-syntax/src/hir/mod.rs:1202:9-1202:10)
  1: StorageDead(_4)
    SourceInfo(regex-syntax/src/hir/mod.rs:1202:9-1202:10)
  2: StorageDead(_2)
    SourceInfo(regex-syntax/src/hir/mod.rs:1203:5-1203:6)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1203:6-1203:6)
      kind: return
  }
  preds [bb11, bb14]
  succs []

bb16
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1199:78-1199:79)
      kind: drop(_17) -> [return: bb17, unwind terminate(cleanup)]
  }
  preds [bb9]
  succs [bb17]

bb17
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1196:5-1203:6)
      kind: resume
  }
  preds [bb0, bb1, bb3, bb4, bb6, bb7, bb8, bb10, bb16]
  succs []

