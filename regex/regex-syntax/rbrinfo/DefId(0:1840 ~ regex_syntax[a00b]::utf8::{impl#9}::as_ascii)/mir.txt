bb0
  0: StorageLive(_2)
    SourceInfo(regex-syntax/src/utf8.rs:415:12-415:27)
  1: StorageLive(_3)
    SourceInfo(regex-syntax/src/utf8.rs:415:12-415:16)
  2: _3 = &(*_1)
    SourceInfo(regex-syntax/src/utf8.rs:415:12-415:16)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:415:12-415:27)
      kind: _2 = utf8::ScalarRange::is_ascii(move _3) -> [return: bb1, unwind: bb10]
  }
  preds []
  succs [bb1, bb10]

bb1
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:415:12-415:27)
      kind: switchInt(move _2) -> [0: bb8, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb8]

bb2
  0: StorageDead(_3)
    SourceInfo(regex-syntax/src/utf8.rs:415:26-415:27)
  1: StorageLive(_4)
    SourceInfo(regex-syntax/src/utf8.rs:416:17-416:22)
  2: StorageLive(_5)
    SourceInfo(regex-syntax/src/utf8.rs:416:25-416:49)
  3: StorageLive(_6)
    SourceInfo(regex-syntax/src/utf8.rs:416:38-416:48)
  4: _6 = ((*_1).0: u32)
    SourceInfo(regex-syntax/src/utf8.rs:416:38-416:48)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:416:25-416:49)
      kind: _5 = <u8 as core::convert::TryFrom<u32>>::try_from(move _6) -> [return: bb3, unwind: bb10]
  }
  preds [bb1]
  succs [bb3, bb10]

bb3
  0: StorageDead(_6)
    SourceInfo(regex-syntax/src/utf8.rs:416:48-416:49)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:416:25-416:58)
      kind: _4 = core::result::Result::<u8, core::num::TryFromIntError>::unwrap(move _5) -> [return: bb4, unwind: bb10]
  }
  preds [bb2]
  succs [bb4, bb10]

bb4
  0: StorageDead(_5)
    SourceInfo(regex-syntax/src/utf8.rs:416:57-416:58)
  1: FakeRead(ForLet(None), _4)
    SourceInfo(regex-syntax/src/utf8.rs:416:17-416:22)
  2: StorageLive(_7)
    SourceInfo(regex-syntax/src/utf8.rs:417:17-417:20)
  3: StorageLive(_8)
    SourceInfo(regex-syntax/src/utf8.rs:417:23-417:45)
  4: StorageLive(_9)
    SourceInfo(regex-syntax/src/utf8.rs:417:36-417:44)
  5: _9 = ((*_1).1: u32)
    SourceInfo(regex-syntax/src/utf8.rs:417:36-417:44)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:417:23-417:45)
      kind: _8 = <u8 as core::convert::TryFrom<u32>>::try_from(move _9) -> [return: bb5, unwind: bb10]
  }
  preds [bb3]
  succs [bb5, bb10]

bb5
  0: StorageDead(_9)
    SourceInfo(regex-syntax/src/utf8.rs:417:44-417:45)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:417:23-417:54)
      kind: _7 = core::result::Result::<u8, core::num::TryFromIntError>::unwrap(move _8) -> [return: bb6, unwind: bb10]
  }
  preds [bb4]
  succs [bb6, bb10]

bb6
  0: StorageDead(_8)
    SourceInfo(regex-syntax/src/utf8.rs:417:53-417:54)
  1: FakeRead(ForLet(None), _7)
    SourceInfo(regex-syntax/src/utf8.rs:417:17-417:20)
  2: StorageLive(_10)
    SourceInfo(regex-syntax/src/utf8.rs:418:18-418:44)
  3: StorageLive(_11)
    SourceInfo(regex-syntax/src/utf8.rs:418:33-418:38)
  4: _11 = _4
    SourceInfo(regex-syntax/src/utf8.rs:418:33-418:38)
  5: StorageLive(_12)
    SourceInfo(regex-syntax/src/utf8.rs:418:40-418:43)
  6: _12 = _7
    SourceInfo(regex-syntax/src/utf8.rs:418:40-418:43)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:418:18-418:44)
      kind: _10 = utf8::Utf8Range::new(move _11, move _12) -> [return: bb7, unwind: bb10]
  }
  preds [bb5]
  succs [bb7, bb10]

bb7
  0: StorageDead(_12)
    SourceInfo(regex-syntax/src/utf8.rs:418:43-418:44)
  1: StorageDead(_11)
    SourceInfo(regex-syntax/src/utf8.rs:418:43-418:44)
  2: _0 = core::option::Option::<utf8::Utf8Range>::Some(move _10)
    SourceInfo(regex-syntax/src/utf8.rs:418:13-418:45)
  3: StorageDead(_10)
    SourceInfo(regex-syntax/src/utf8.rs:418:44-418:45)
  4: StorageDead(_7)
    SourceInfo(regex-syntax/src/utf8.rs:419:9-419:10)
  5: StorageDead(_4)
    SourceInfo(regex-syntax/src/utf8.rs:419:9-419:10)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:415:9-421:10)
      kind: goto -> bb9
  }
  preds [bb6]
  succs [bb9]

bb8
  0: StorageDead(_3)
    SourceInfo(regex-syntax/src/utf8.rs:415:26-415:27)
  1: _0 = core::option::Option::<utf8::Utf8Range>::None
    SourceInfo(regex-syntax/src/utf8.rs:420:13-420:17)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:415:9-421:10)
      kind: goto -> bb9
  }
  preds [bb1]
  succs [bb9]

bb9
  0: StorageDead(_2)
    SourceInfo(regex-syntax/src/utf8.rs:421:9-421:10)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:422:6-422:6)
      kind: return
  }
  preds [bb7, bb8]
  succs []

bb10
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:414:5-422:6)
      kind: resume
  }
  preds [bb0, bb2, bb3, bb4, bb5, bb6]
  succs []

