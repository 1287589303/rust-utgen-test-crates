{
  "regex-syntax/src/hir/mod.rs:495:12:495:26": [
    {
      "Bool": {
        "Other": "new.is_empty()"
      }
    }
  ],
  "regex-syntax/src/hir/mod.rs:497:19:497:33": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "new.len() == 1",
          "lhs": "new.len()",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/hir/mod.rs:467:36:467:77": [
    {
      "Bool": {
        "Other": "let Some(ref mut prior_bytes) = prior_lit"
      }
    }
  ],
  "regex-syntax/src/hir/mod.rs:463:33:463:38": [
    {
      "For": {
        "iter_var": "sub2",
        "iter_range": "subs2"
      }
    }
  ],
  "regex-syntax/src/hir/mod.rs:448:20:448:24": [
    {
      "For": {
        "iter_var": "sub",
        "iter_range": "subs"
      }
    }
  ],
  "regex-syntax/src/hir/mod.rs:465:31:465:36": [
    {
      "Match": {
        "match_source": "regex-syntax/src/hir/mod.rs:465:31:465:36",
        "match_str": "kind2",
        "match_kind": {
          "Enum": [
            "Empty",
            "Literal",
            "Class",
            "Look",
            "Repetition",
            "Capture",
            "Concat",
            "Alternation"
          ]
        },
        "arms": {
          "regex-syntax/src/hir/mod.rs:466:29:466:61": {
            "pat": {
              "pat_str": "HirKind::Literal(Literal(bytes))",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/mod.rs:466:65:472:30"
          },
          "regex-syntax/src/hir/mod.rs:473:29:473:34": {
            "pat": {
              "pat_str": "kind2",
              "kind": {
                "Other": null
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/mod.rs:473:38:478:30"
          }
        }
      }
    }
  ],
  "regex-syntax/src/hir/mod.rs:452:24:452:65": [
    {
      "Bool": {
        "Other": "let Some(ref mut prior_bytes) = prior_lit"
      }
    }
  ],
  "regex-syntax/src/hir/mod.rs:492:12:492:52": [
    {
      "Bool": {
        "Other": "let Some(prior_bytes) = prior_lit.take()"
      }
    }
  ],
  "regex-syntax/src/hir/mod.rs:485:24:485:64": [
    {
      "Bool": {
        "Other": "let Some(prior_bytes) = prior_lit.take()"
      }
    }
  ],
  "regex-syntax/src/hir/mod.rs:450:19:450:23": [
    {
      "Match": {
        "match_source": "regex-syntax/src/hir/mod.rs:450:19:450:23",
        "match_str": "kind",
        "match_kind": {
          "Enum": [
            "Empty",
            "Literal",
            "Class",
            "Look",
            "Repetition",
            "Capture",
            "Concat",
            "Alternation"
          ]
        },
        "arms": {
          "regex-syntax/src/hir/mod.rs:484:17:484:21": {
            "pat": {
              "pat_str": "kind",
              "kind": {
                "Other": null
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/mod.rs:484:25:489:18"
          },
          "regex-syntax/src/hir/mod.rs:462:17:462:39": {
            "pat": {
              "pat_str": "HirKind::Concat(subs2)",
              "kind": {
                "Enum": 6
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/mod.rs:462:43:481:18"
          },
          "regex-syntax/src/hir/mod.rs:451:17:451:49": {
            "pat": {
              "pat_str": "HirKind::Literal(Literal(bytes))",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/mod.rs:451:53:457:18"
          },
          "regex-syntax/src/hir/mod.rs:483:17:483:31": {
            "pat": {
              "pat_str": "HirKind::Empty",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/mod.rs:483:35:483:37"
          }
        }
      }
    }
  ],
  "regex-syntax/src/hir/mod.rs:474:36:474:76": [
    {
      "Bool": {
        "Other": "let Some(prior_bytes) = prior_lit.take()"
      }
    }
  ]
}