{
  "name": "regex_syntax::ast::{impl#0}::auxiliary_span",
  "mod_info": {
    "name": "ast",
    "loc": "regex-syntax/src/lib.rs:186:1:186:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/ast/mod.rs:57:5:65:6",
  "doc": "/// Return an auxiliary span. This span exists only for some errors that\n/// benefit from being able to point to two locations in the original\n/// regular expression. For example, \"duplicate\" errors will have the\n/// main error position set to the duplicate occurrence while its\n/// auxiliary span will be set to the initial occurrence.\n",
  "code": [
    "pub fn auxiliary_span(&self) -> Option<&Span> {",
    "    use self::ErrorKind::*;",
    "    match self.kind {",
    "        FlagDuplicate { ref original } => Some(original),",
    "        FlagRepeatedNegation { ref original, .. } => Some(original),",
    "        GroupNameDuplicate { ref original, .. } => Some(original),",
    "        _ => None,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.kind matches FlagRepeatedNegation { ref original, .. }",
          "norm": null,
          "value": "false",
          "line": 61,
          "bound": null
        },
        {
          "cond": "self.kind matches FlagDuplicate { ref original }",
          "norm": null,
          "value": "false",
          "line": 60,
          "bound": null
        },
        {
          "cond": "self.kind matches GroupNameDuplicate { ref original, .. }",
          "norm": null,
          "value": "false",
          "line": 62,
          "bound": null
        },
        {
          "cond": "self.kind matches _",
          "norm": null,
          "value": "true",
          "line": 63,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.kind matches GroupNameDuplicate { ref original, .. }",
          "norm": null,
          "value": "true",
          "line": 59,
          "bound": null
        },
        {
          "cond": "self.kind matches GroupNameDuplicate { ref original, .. }",
          "norm": null,
          "value": "true",
          "line": 59,
          "bound": null
        }
      ],
      "ret": "Some(original)",
      "path": [
        0,
        4,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.kind matches FlagRepeatedNegation { ref original, .. }",
          "norm": null,
          "value": "true",
          "line": 59,
          "bound": null
        },
        {
          "cond": "self.kind matches FlagRepeatedNegation { ref original, .. }",
          "norm": null,
          "value": "true",
          "line": 59,
          "bound": null
        }
      ],
      "ret": "Some(original)",
      "path": [
        0,
        3,
        6,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.kind matches FlagDuplicate { ref original }",
          "norm": null,
          "value": "true",
          "line": 59,
          "bound": null
        },
        {
          "cond": "self.kind matches FlagDuplicate { ref original }",
          "norm": null,
          "value": "true",
          "line": 59,
          "bound": null
        }
      ],
      "ret": "Some(original)",
      "path": [
        0,
        2,
        5,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}