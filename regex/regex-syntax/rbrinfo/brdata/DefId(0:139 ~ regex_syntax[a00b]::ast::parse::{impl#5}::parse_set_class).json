{
  "name": "regex_syntax::ast::parse::{impl#5}::parse_set_class",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:1877:5:1933:6",
  "doc": "/// Parse a standard character class consisting primarily of characters or\n/// character ranges, but can also contain nested character classes of\n/// any type (sans `.`).\n///\n/// This assumes the parser is positioned at the opening `[`. If parsing\n/// is successful, then the parser is advanced to the position immediately\n/// following the closing `]`.\n",
  "code": [
    "fn parse_set_class(&self) -> Result<ast::ClassBracketed> {",
    "    assert_eq!(self.char(), '[');",
    "",
    "    let mut union =",
    "        ast::ClassSetUnion { span: self.span(), items: vec![] };",
    "    loop {",
    "        self.bump_space();",
    "        if self.is_eof() {",
    "            return Err(self.unclosed_class_error());",
    "        }",
    "        match self.char() {",
    "            '[' => {",
    "                // If we've already parsed the opening bracket, then",
    "                // attempt to treat this as the beginning of an ASCII",
    "                // class. If ASCII class parsing fails, then the parser",
    "                // backs up to `[`.",
    "                if !self.parser().stack_class.borrow().is_empty() {",
    "                    if let Some(cls) = self.maybe_parse_ascii_class() {",
    "                        union.push(ast::ClassSetItem::Ascii(cls));",
    "                        continue;",
    "                    }",
    "                }",
    "                union = self.push_class_open(union)?;",
    "            }",
    "            ']' => match self.pop_class(union)? {",
    "                Either::Left(nested_union) => {",
    "                    union = nested_union;",
    "                }",
    "                Either::Right(class) => return Ok(class),",
    "            },",
    "            '&' if self.peek() == Some('&') => {",
    "                assert!(self.bump_if(\"&&\"));",
    "                union = self.push_class_op(",
    "                    ast::ClassSetBinaryOpKind::Intersection,",
    "                    union,",
    "                );",
    "            }",
    "            '-' if self.peek() == Some('-') => {",
    "                assert!(self.bump_if(\"--\"));",
    "                union = self.push_class_op(",
    "                    ast::ClassSetBinaryOpKind::Difference,",
    "                    union,",
    "                );",
    "            }",
    "            '~' if self.peek() == Some('~') => {",
    "                assert!(self.bump_if(\"~~\"));",
    "                union = self.push_class_op(",
    "                    ast::ClassSetBinaryOpKind::SymmetricDifference,",
    "                    union,",
    "                );",
    "            }",
    "            _ => {",
    "                union.push(self.parse_set_class_range()?);",
    "            }",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 24,
    "contra": 12,
    "min_set": 18
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1884,
          "bound": null
        }
      ],
      "ret": "Err(self.unclosed_class_error())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        125,
        126
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1884,
          "bound": null
        },
        {
          "cond": "self.char() matches ']'",
          "norm": null,
          "value": "true",
          "line": 1901,
          "bound": null
        },
        {
          "cond": "self.char() matches '['",
          "norm": null,
          "value": "true",
          "line": 1888,
          "bound": null
        },
        {
          "cond": "self.char() matches '-'",
          "norm": null,
          "value": "true",
          "line": 1914,
          "bound": null
        },
        {
          "cond": "self.char() matches '&'",
          "norm": null,
          "value": "true",
          "line": 1907,
          "bound": null
        },
        {
          "cond": "self.char() matches '~'",
          "norm": null,
          "value": "true",
          "line": 1921,
          "bound": null
        },
        {
          "cond": "self.char() matches _",
          "norm": null,
          "value": "true",
          "line": 1928,
          "bound": null
        },
        {
          "cond": "self.parse_set_class_range()?",
          "norm": null,
          "value": "Err/None",
          "line": 1929,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        14,
        15,
        16,
        105,
        106,
        108,
        110,
        111,
        116,
        117,
        124,
        125,
        126
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1884,
          "bound": null
        },
        {
          "cond": "self.char() matches ']'",
          "norm": null,
          "value": "true",
          "line": 1901,
          "bound": null
        },
        {
          "cond": "self.char() matches '['",
          "norm": null,
          "value": "true",
          "line": 1888,
          "bound": null
        },
        {
          "cond": "self.char() matches '-'",
          "norm": null,
          "value": "true",
          "line": 1914,
          "bound": null
        },
        {
          "cond": "self.char() matches '&'",
          "norm": null,
          "value": "true",
          "line": 1907,
          "bound": null
        },
        {
          "cond": "self.char() matches '~'",
          "norm": null,
          "value": "true",
          "line": 1921,
          "bound": null
        },
        {
          "cond": "self.char() matches _",
          "norm": null,
          "value": "true",
          "line": 1928,
          "bound": null
        },
        {
          "cond": "self.parse_set_class_range()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1929,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1884,
          "bound": null
        }
      ],
      "ret": "Err(self.unclosed_class_error())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        14,
        15,
        16,
        105,
        106,
        109,
        112,
        113,
        114,
        115,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        125,
        126
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1884,
          "bound": null
        },
        {
          "cond": "self.char() matches '~'",
          "norm": null,
          "value": "true",
          "line": 1921,
          "bound": null
        },
        {
          "cond": "self.char() matches '~'",
          "norm": null,
          "value": "true",
          "line": 1887,
          "bound": null
        },
        {
          "cond": "self.peek() == Some('~')",
          "norm": "Some('~') == self.peek()",
          "value": "true",
          "line": 1921,
          "bound": null
        },
        {
          "cond": "self.bump_if(\"~~\")",
          "norm": null,
          "value": "true",
          "line": 1922,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1884,
          "bound": null
        }
      ],
      "ret": "Err(self.unclosed_class_error())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        14,
        15,
        21,
        93,
        94,
        95,
        96,
        98,
        99,
        101,
        102,
        104,
        115,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        125,
        126
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1884,
          "bound": null
        },
        {
          "cond": "self.char() matches '~'",
          "norm": null,
          "value": "true",
          "line": 1921,
          "bound": null
        },
        {
          "cond": "self.char() matches '~'",
          "norm": null,
          "value": "true",
          "line": 1887,
          "bound": null
        },
        {
          "cond": "self.peek() == Some('~')",
          "norm": "Some('~') == self.peek()",
          "value": "true",
          "line": 1921,
          "bound": null
        },
        {
          "cond": "self.bump_if(\"~~\")",
          "norm": null,
          "value": "false",
          "line": 1922,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        14,
        15,
        21,
        93,
        94,
        95,
        96,
        98,
        100,
        150,
        151
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1884,
          "bound": null
        },
        {
          "cond": "self.char() matches '~'",
          "norm": null,
          "value": "true",
          "line": 1921,
          "bound": null
        },
        {
          "cond": "self.char() matches '~'",
          "norm": null,
          "value": "true",
          "line": 1887,
          "bound": null
        },
        {
          "cond": "self.peek() == Some('~')",
          "norm": "Some('~') == self.peek()",
          "value": "false",
          "line": 1921,
          "bound": null
        },
        {
          "cond": "self.parse_set_class_range()?",
          "norm": null,
          "value": "Err/None",
          "line": 1929,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        14,
        15,
        21,
        93,
        94,
        95,
        97,
        16,
        105,
        106,
        108,
        110,
        111,
        116,
        117,
        124,
        125,
        126
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1884,
          "bound": null
        },
        {
          "cond": "self.char() matches '~'",
          "norm": null,
          "value": "true",
          "line": 1921,
          "bound": null
        },
        {
          "cond": "self.char() matches '~'",
          "norm": null,
          "value": "true",
          "line": 1887,
          "bound": null
        },
        {
          "cond": "self.peek() == Some('~')",
          "norm": "Some('~') == self.peek()",
          "value": "false",
          "line": 1921,
          "bound": null
        },
        {
          "cond": "self.parse_set_class_range()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1929,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1884,
          "bound": null
        }
      ],
      "ret": "Err(self.unclosed_class_error())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        14,
        15,
        21,
        93,
        94,
        95,
        97,
        16,
        105,
        106,
        109,
        112,
        113,
        114,
        115,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        125,
        126
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1884,
          "bound": null
        },
        {
          "cond": "self.char() matches '-'",
          "norm": null,
          "value": "true",
          "line": 1914,
          "bound": null
        },
        {
          "cond": "self.char() matches '-'",
          "norm": null,
          "value": "true",
          "line": 1887,
          "bound": null
        },
        {
          "cond": "self.peek() == Some('-')",
          "norm": "Some('-') == self.peek()",
          "value": "true",
          "line": 1914,
          "bound": null
        },
        {
          "cond": "self.bump_if(\"--\")",
          "norm": null,
          "value": "true",
          "line": 1915,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1884,
          "bound": null
        }
      ],
      "ret": "Err(self.unclosed_class_error())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        14,
        15,
        20,
        81,
        82,
        83,
        84,
        86,
        87,
        89,
        90,
        92,
        115,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        125,
        126
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1884,
          "bound": null
        },
        {
          "cond": "self.char() matches '-'",
          "norm": null,
          "value": "true",
          "line": 1914,
          "bound": null
        },
        {
          "cond": "self.char() matches '-'",
          "norm": null,
          "value": "true",
          "line": 1887,
          "bound": null
        },
        {
          "cond": "self.peek() == Some('-')",
          "norm": "Some('-') == self.peek()",
          "value": "true",
          "line": 1914,
          "bound": null
        },
        {
          "cond": "self.bump_if(\"--\")",
          "norm": null,
          "value": "false",
          "line": 1915,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        14,
        15,
        20,
        81,
        82,
        83,
        84,
        86,
        88,
        150,
        151
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1884,
          "bound": null
        },
        {
          "cond": "self.char() matches '-'",
          "norm": null,
          "value": "true",
          "line": 1914,
          "bound": null
        },
        {
          "cond": "self.char() matches '-'",
          "norm": null,
          "value": "true",
          "line": 1887,
          "bound": null
        },
        {
          "cond": "self.peek() == Some('-')",
          "norm": "Some('-') == self.peek()",
          "value": "false",
          "line": 1914,
          "bound": null
        },
        {
          "cond": "self.parse_set_class_range()?",
          "norm": null,
          "value": "Err/None",
          "line": 1929,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        14,
        15,
        20,
        81,
        82,
        83,
        85,
        16,
        105,
        106,
        108,
        110,
        111,
        116,
        117,
        124,
        125,
        126
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1884,
          "bound": null
        },
        {
          "cond": "self.char() matches '-'",
          "norm": null,
          "value": "true",
          "line": 1914,
          "bound": null
        },
        {
          "cond": "self.char() matches '-'",
          "norm": null,
          "value": "true",
          "line": 1887,
          "bound": null
        },
        {
          "cond": "self.peek() == Some('-')",
          "norm": "Some('-') == self.peek()",
          "value": "false",
          "line": 1914,
          "bound": null
        },
        {
          "cond": "self.parse_set_class_range()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1929,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1884,
          "bound": null
        }
      ],
      "ret": "Err(self.unclosed_class_error())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        14,
        15,
        20,
        81,
        82,
        83,
        85,
        16,
        105,
        106,
        109,
        112,
        113,
        114,
        115,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        125,
        126
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1884,
          "bound": null
        },
        {
          "cond": "self.char() matches '&'",
          "norm": null,
          "value": "true",
          "line": 1907,
          "bound": null
        },
        {
          "cond": "self.char() matches '&'",
          "norm": null,
          "value": "true",
          "line": 1887,
          "bound": null
        },
        {
          "cond": "self.peek() == Some('&')",
          "norm": "Some('&') == self.peek()",
          "value": "true",
          "line": 1907,
          "bound": null
        },
        {
          "cond": "self.bump_if(\"&&\")",
          "norm": null,
          "value": "true",
          "line": 1908,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1884,
          "bound": null
        }
      ],
      "ret": "Err(self.unclosed_class_error())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        14,
        15,
        19,
        69,
        70,
        71,
        72,
        74,
        75,
        77,
        78,
        80,
        115,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        125,
        126
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1884,
          "bound": null
        },
        {
          "cond": "self.char() matches '&'",
          "norm": null,
          "value": "true",
          "line": 1907,
          "bound": null
        },
        {
          "cond": "self.char() matches '&'",
          "norm": null,
          "value": "true",
          "line": 1887,
          "bound": null
        },
        {
          "cond": "self.peek() == Some('&')",
          "norm": "Some('&') == self.peek()",
          "value": "true",
          "line": 1907,
          "bound": null
        },
        {
          "cond": "self.bump_if(\"&&\")",
          "norm": null,
          "value": "false",
          "line": 1908,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        14,
        15,
        19,
        69,
        70,
        71,
        72,
        74,
        76,
        150,
        151
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1884,
          "bound": null
        },
        {
          "cond": "self.char() matches '&'",
          "norm": null,
          "value": "true",
          "line": 1907,
          "bound": null
        },
        {
          "cond": "self.char() matches '&'",
          "norm": null,
          "value": "true",
          "line": 1887,
          "bound": null
        },
        {
          "cond": "self.peek() == Some('&')",
          "norm": "Some('&') == self.peek()",
          "value": "false",
          "line": 1907,
          "bound": null
        },
        {
          "cond": "self.parse_set_class_range()?",
          "norm": null,
          "value": "Err/None",
          "line": 1929,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        14,
        15,
        19,
        69,
        70,
        71,
        73,
        16,
        105,
        106,
        108,
        110,
        111,
        116,
        117,
        124,
        125,
        126
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1884,
          "bound": null
        },
        {
          "cond": "self.char() matches '&'",
          "norm": null,
          "value": "true",
          "line": 1907,
          "bound": null
        },
        {
          "cond": "self.char() matches '&'",
          "norm": null,
          "value": "true",
          "line": 1887,
          "bound": null
        },
        {
          "cond": "self.peek() == Some('&')",
          "norm": "Some('&') == self.peek()",
          "value": "false",
          "line": 1907,
          "bound": null
        },
        {
          "cond": "self.parse_set_class_range()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1929,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1884,
          "bound": null
        }
      ],
      "ret": "Err(self.unclosed_class_error())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        14,
        15,
        19,
        69,
        70,
        71,
        73,
        16,
        105,
        106,
        109,
        112,
        113,
        114,
        115,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        125,
        126
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1884,
          "bound": null
        },
        {
          "cond": "self.char() matches ']'",
          "norm": null,
          "value": "true",
          "line": 1901,
          "bound": null
        },
        {
          "cond": "self.char() matches ']'",
          "norm": null,
          "value": "true",
          "line": 1887,
          "bound": null
        },
        {
          "cond": "self.pop_class(union)?",
          "norm": null,
          "value": "Err/None",
          "line": 1901,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        14,
        15,
        18,
        49,
        50,
        51,
        53,
        55,
        56,
        119,
        120,
        121,
        124,
        125,
        126
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1884,
          "bound": null
        },
        {
          "cond": "self.char() matches ']'",
          "norm": null,
          "value": "true",
          "line": 1901,
          "bound": null
        },
        {
          "cond": "self.char() matches ']'",
          "norm": null,
          "value": "true",
          "line": 1887,
          "bound": null
        },
        {
          "cond": "self.pop_class(union)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1901,
          "bound": null
        },
        {
          "cond": "self.pop_class(union)?",
          "norm": null,
          "value": "Err/None",
          "line": 1901,
          "bound": null
        }
      ],
      "ret": "Ok(class)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        14,
        15,
        18,
        49,
        50,
        51,
        54,
        57,
        60,
        66,
        118,
        120,
        121,
        124,
        125,
        126
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1884,
          "bound": null
        },
        {
          "cond": "self.char() matches ']'",
          "norm": null,
          "value": "true",
          "line": 1901,
          "bound": null
        },
        {
          "cond": "self.char() matches ']'",
          "norm": null,
          "value": "true",
          "line": 1887,
          "bound": null
        },
        {
          "cond": "self.pop_class(union)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1901,
          "bound": null
        },
        {
          "cond": "self.pop_class(union)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1901,
          "bound": null
        },
        {
          "cond": "self.pop_class(union)? matches Either::Left(nested_union)",
          "norm": null,
          "value": "true",
          "line": 1901,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1884,
          "bound": null
        }
      ],
      "ret": "Err(self.unclosed_class_error())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        14,
        15,
        18,
        49,
        50,
        51,
        54,
        57,
        59,
        61,
        62,
        64,
        65,
        67,
        68,
        115,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        125,
        126
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1884,
          "bound": null
        },
        {
          "cond": "self.char() matches '['",
          "norm": null,
          "value": "true",
          "line": 1888,
          "bound": null
        },
        {
          "cond": "self.char() matches '['",
          "norm": null,
          "value": "true",
          "line": 1887,
          "bound": null
        },
        {
          "cond": "self.parser().stack_class.borrow().is_empty()",
          "norm": null,
          "value": "true",
          "line": 1893,
          "bound": null
        },
        {
          "cond": "self.push_class_open(union)?",
          "norm": null,
          "value": "Err/None",
          "line": 1899,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        14,
        15,
        17,
        22,
        23,
        24,
        25,
        26,
        27,
        35,
        36,
        37,
        38,
        40,
        42,
        43,
        122,
        123,
        124,
        125,
        126
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1884,
          "bound": null
        },
        {
          "cond": "self.char() matches '['",
          "norm": null,
          "value": "true",
          "line": 1888,
          "bound": null
        },
        {
          "cond": "self.char() matches '['",
          "norm": null,
          "value": "true",
          "line": 1887,
          "bound": null
        },
        {
          "cond": "self.parser().stack_class.borrow().is_empty()",
          "norm": null,
          "value": "true",
          "line": 1893,
          "bound": null
        },
        {
          "cond": "self.push_class_open(union)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1899,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1884,
          "bound": null
        }
      ],
      "ret": "Err(self.unclosed_class_error())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        14,
        15,
        17,
        22,
        23,
        24,
        25,
        26,
        27,
        35,
        36,
        37,
        38,
        41,
        44,
        45,
        47,
        48,
        115,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        125,
        126
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1884,
          "bound": null
        },
        {
          "cond": "self.char() matches '['",
          "norm": null,
          "value": "true",
          "line": 1888,
          "bound": null
        },
        {
          "cond": "self.char() matches '['",
          "norm": null,
          "value": "true",
          "line": 1887,
          "bound": null
        },
        {
          "cond": "self.parser().stack_class.borrow().is_empty()",
          "norm": null,
          "value": "false",
          "line": 1893,
          "bound": null
        },
        {
          "cond": "let Some(cls) = self.maybe_parse_ascii_class()",
          "norm": null,
          "value": "true",
          "line": 1894,
          "bound": null
        },
        {
          "cond": "self.push_class_open(union)?",
          "norm": null,
          "value": "Err/None",
          "line": 1899,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        14,
        15,
        17,
        22,
        23,
        24,
        25,
        26,
        28,
        29,
        30,
        34,
        36,
        37,
        38,
        40,
        42,
        43,
        122,
        123,
        124,
        125,
        126
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1884,
          "bound": null
        },
        {
          "cond": "self.char() matches '['",
          "norm": null,
          "value": "true",
          "line": 1888,
          "bound": null
        },
        {
          "cond": "self.char() matches '['",
          "norm": null,
          "value": "true",
          "line": 1887,
          "bound": null
        },
        {
          "cond": "self.parser().stack_class.borrow().is_empty()",
          "norm": null,
          "value": "false",
          "line": 1893,
          "bound": null
        },
        {
          "cond": "let Some(cls) = self.maybe_parse_ascii_class()",
          "norm": null,
          "value": "true",
          "line": 1894,
          "bound": null
        },
        {
          "cond": "self.push_class_open(union)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1899,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1884,
          "bound": null
        }
      ],
      "ret": "Err(self.unclosed_class_error())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        14,
        15,
        17,
        22,
        23,
        24,
        25,
        26,
        28,
        29,
        30,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        47,
        48,
        115,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        125,
        126
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1884,
          "bound": null
        },
        {
          "cond": "self.char() matches '['",
          "norm": null,
          "value": "true",
          "line": 1888,
          "bound": null
        },
        {
          "cond": "self.char() matches '['",
          "norm": null,
          "value": "true",
          "line": 1887,
          "bound": null
        },
        {
          "cond": "self.parser().stack_class.borrow().is_empty()",
          "norm": null,
          "value": "false",
          "line": 1893,
          "bound": null
        },
        {
          "cond": "let Some(cls) = self.maybe_parse_ascii_class()",
          "norm": null,
          "value": "true",
          "line": 1894,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1884,
          "bound": null
        }
      ],
      "ret": "Err(self.unclosed_class_error())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        14,
        15,
        17,
        22,
        23,
        24,
        25,
        26,
        28,
        29,
        30,
        31,
        32,
        33,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        125,
        126
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        151
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}