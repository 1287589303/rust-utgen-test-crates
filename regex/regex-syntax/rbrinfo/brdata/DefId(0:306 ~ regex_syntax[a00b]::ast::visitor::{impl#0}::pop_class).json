{
  "name": "regex_syntax::ast::visitor::{impl#0}::pop_class",
  "mod_info": {
    "name": "ast::visitor",
    "loc": "regex-syntax/src/ast/mod.rs:13:1:13:13"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/visitor.rs:419:5:437:6",
  "doc": "/// Pops the given frame. If the frame has an additional inductive step,\n/// then return it, otherwise return `None`.\n",
  "code": [
    "fn pop_class(&self, induct: ClassFrame<'a>) -> Option<ClassFrame<'a>> {",
    "    match induct {",
    "        ClassFrame::Union { tail, .. } => {",
    "            if tail.is_empty() {",
    "                None",
    "            } else {",
    "                Some(ClassFrame::Union {",
    "                    head: &tail[0],",
    "                    tail: &tail[1..],",
    "                })",
    "            }",
    "        }",
    "        ClassFrame::Binary { .. } => None,",
    "        ClassFrame::BinaryLHS { op, rhs, .. } => {",
    "            Some(ClassFrame::BinaryRHS { op, rhs })",
    "        }",
    "        ClassFrame::BinaryRHS { .. } => None,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "induct matches ClassFrame::BinaryRHS { .. }",
          "norm": null,
          "value": "true",
          "line": 420,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        5,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "induct matches ClassFrame::BinaryLHS { op, rhs, .. }",
          "norm": null,
          "value": "true",
          "line": 420,
          "bound": null
        },
        {
          "cond": "induct matches ClassFrame::BinaryLHS { op, rhs, .. }",
          "norm": null,
          "value": "true",
          "line": 420,
          "bound": null
        }
      ],
      "ret": "Some(ClassFrame::BinaryRHS { op, rhs })",
      "path": [
        0,
        4,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "induct matches ClassFrame::Binary { .. }",
          "norm": null,
          "value": "true",
          "line": 420,
          "bound": null
        },
        {
          "cond": "induct matches ClassFrame::Binary { .. }",
          "norm": null,
          "value": "true",
          "line": 420,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        3,
        13,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "induct matches ClassFrame::Union { tail, .. }",
          "norm": null,
          "value": "true",
          "line": 420,
          "bound": null
        },
        {
          "cond": "induct matches ClassFrame::Union { tail, .. }",
          "norm": null,
          "value": "true",
          "line": 420,
          "bound": null
        },
        {
          "cond": "tail.is_empty()",
          "norm": null,
          "value": "true",
          "line": 422,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        2,
        6,
        7,
        8,
        12,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "induct matches ClassFrame::Union { tail, .. }",
          "norm": null,
          "value": "true",
          "line": 420,
          "bound": null
        },
        {
          "cond": "induct matches ClassFrame::Union { tail, .. }",
          "norm": null,
          "value": "true",
          "line": 420,
          "bound": null
        },
        {
          "cond": "tail.is_empty()",
          "norm": null,
          "value": "false",
          "line": 422,
          "bound": null
        }
      ],
      "ret": "Some(ClassFrame::Union {\n                        head: &tail[0],\n                        tail: &tail[1..],\n                    })",
      "path": [
        0,
        2,
        6,
        7,
        9,
        10,
        11,
        12,
        15
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}