{
  "name": "regex_syntax::ast::parse::{impl#4}::push_class_open",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:839:5:851:6",
  "doc": "/// Parse the opening of a character class and push the current class\n/// parsing context onto the parser's stack. This assumes that the parser\n/// is positioned at an opening `[`. The given union should correspond to\n/// the union of set items built up before seeing the `[`.\n///\n/// If there was a problem parsing the opening of the class, then an error\n/// is returned. Otherwise, a new union of set items for the class is\n/// returned (which may be populated with either a `]` or a `-`).\n",
  "code": [
    "fn push_class_open(",
    "    &self,",
    "    parent_union: ast::ClassSetUnion,",
    ") -> Result<ast::ClassSetUnion> {",
    "    assert_eq!(self.char(), '[');",
    "",
    "    let (nested_set, nested_union) = self.parse_set_class_open()?;",
    "    self.parser()",
    "        .stack_class",
    "        .borrow_mut()",
    "        .push(ClassState::Open { union: parent_union, set: nested_set });",
    "    Ok(nested_union)",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.parse_set_class_open()?",
          "norm": null,
          "value": "Err/None",
          "line": 845,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        24,
        25,
        26
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.parse_set_class_open()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 845,
          "bound": null
        }
      ],
      "ret": "Ok(nested_union)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        26
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        37,
        38
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}