{
  "name": "regex_syntax::utf8::{impl#0}::from_encoded_range",
  "mod_info": {
    "name": "utf8",
    "loc": "regex-syntax/src/lib.rs:195:1:195:14"
  },
  "visible": false,
  "loc": "regex-syntax/src/utf8.rs:113:5:133:6",
  "doc": "/// Creates a new UTF-8 sequence from the encoded bytes of a scalar value\n/// range.\n///\n/// This assumes that `start` and `end` have the same length.\n",
  "code": [
    "fn from_encoded_range(start: &[u8], end: &[u8]) -> Self {",
    "    assert_eq!(start.len(), end.len());",
    "    match start.len() {",
    "        2 => Utf8Sequence::Two([",
    "            Utf8Range::new(start[0], end[0]),",
    "            Utf8Range::new(start[1], end[1]),",
    "        ]),",
    "        3 => Utf8Sequence::Three([",
    "            Utf8Range::new(start[0], end[0]),",
    "            Utf8Range::new(start[1], end[1]),",
    "            Utf8Range::new(start[2], end[2]),",
    "        ]),",
    "        4 => Utf8Sequence::Four([",
    "            Utf8Range::new(start[0], end[0]),",
    "            Utf8Range::new(start[1], end[1]),",
    "            Utf8Range::new(start[2], end[2]),",
    "            Utf8Range::new(start[3], end[3]),",
    "        ]),",
    "        n => unreachable!(\"invalid encoded length: {}\", n),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "start.len() matches 3",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "start.len() matches 4",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "start.len() matches 2",
          "norm": null,
          "value": "true",
          "line": 116,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        40,
        41,
        43
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "start.len() matches 4",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "start.len() matches 4",
          "norm": null,
          "value": "true",
          "line": 115,
          "bound": null
        }
      ],
      "ret": "Utf8Sequence::Four([\n                Utf8Range::new(start[0], end[0]),\n                Utf8Range::new(start[1], end[1]),\n                Utf8Range::new(start[2], end[2]),\n                Utf8Range::new(start[3], end[3]),\n            ])",
      "path": [
        0,
        1,
        2,
        3,
        5,
        9,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "start.len() matches 3",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "start.len() matches 3",
          "norm": null,
          "value": "true",
          "line": 115,
          "bound": null
        }
      ],
      "ret": "Utf8Sequence::Three([\n                Utf8Range::new(start[0], end[0]),\n                Utf8Range::new(start[1], end[1]),\n                Utf8Range::new(start[2], end[2]),\n            ])",
      "path": [
        0,
        1,
        2,
        3,
        5,
        8,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "start.len() matches 2",
          "norm": null,
          "value": "true",
          "line": 116,
          "bound": null
        },
        {
          "cond": "start.len() matches 2",
          "norm": null,
          "value": "true",
          "line": 115,
          "bound": null
        }
      ],
      "ret": "Utf8Sequence::Two([\n                Utf8Range::new(start[0], end[0]),\n                Utf8Range::new(start[1], end[1]),\n            ])",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        43
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}