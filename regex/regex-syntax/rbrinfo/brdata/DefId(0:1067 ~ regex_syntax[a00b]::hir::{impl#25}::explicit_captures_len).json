{
  "name": "regex_syntax::hir::{impl#25}::explicit_captures_len",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:2164:5:2166:6",
  "doc": "/// Returns the total number of explicit capturing groups in the\n/// corresponding HIR.\n///\n/// Note that this does not include the implicit capturing group\n/// corresponding to the entire match that is typically included by regex\n/// engines.\n///\n/// # Example\n///\n/// This method will return `0` for `a` and `1` for `(a)`:\n///\n/// ```\n/// use regex_syntax::parse;\n///\n/// assert_eq!(0, parse(\"a\")?.properties().explicit_captures_len());\n/// assert_eq!(1, parse(\"(a)\")?.properties().explicit_captures_len());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn explicit_captures_len(&self) -> usize {",
    "    self.0.explicit_captures_len",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self.0.explicit_captures_len",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}