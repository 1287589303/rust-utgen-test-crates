{
  "name": "regex_syntax::ast::parse::{impl#5}::parse_hex_brace",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:1786:5:1832:6",
  "doc": "/// Parse a hex representation of any Unicode scalar value. This expects\n/// the parser to be positioned at the opening brace `{` and will advance\n/// the parser to the first character following the closing brace `}`.\n",
  "code": [
    "fn parse_hex_brace(",
    "    &self,",
    "    kind: ast::HexLiteralKind,",
    ") -> Result<ast::Literal> {",
    "    let mut scratch = self.parser().scratch.borrow_mut();",
    "    scratch.clear();",
    "",
    "    let brace_pos = self.pos();",
    "    let start = self.span_char().end;",
    "    while self.bump_and_bump_space() && self.char() != '}' {",
    "        if !is_hex(self.char()) {",
    "            return Err(self.error(",
    "                self.span_char(),",
    "                ast::ErrorKind::EscapeHexInvalidDigit,",
    "            ));",
    "        }",
    "        scratch.push(self.char());",
    "    }",
    "    if self.is_eof() {",
    "        return Err(self.error(",
    "            Span::new(brace_pos, self.pos()),",
    "            ast::ErrorKind::EscapeUnexpectedEof,",
    "        ));",
    "    }",
    "    let end = self.pos();",
    "    let hex = scratch.as_str();",
    "    assert_eq!(self.char(), '}');",
    "    self.bump_and_bump_space();",
    "",
    "    if hex.is_empty() {",
    "        return Err(self.error(",
    "            Span::new(brace_pos, self.pos()),",
    "            ast::ErrorKind::EscapeHexEmpty,",
    "        ));",
    "    }",
    "    match u32::from_str_radix(hex, 16).ok().and_then(char::from_u32) {",
    "        None => Err(self.error(",
    "            Span::new(start, end),",
    "            ast::ErrorKind::EscapeHexInvalid,",
    "        )),",
    "        Some(c) => Ok(ast::Literal {",
    "            span: Span::new(start, self.pos()),",
    "            kind: ast::LiteralKind::HexBrace(kind),",
    "            c,",
    "        }),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 16,
    "contra": 5,
    "min_set": 7
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1795,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1795,
          "bound": null
        },
        {
          "cond": "is_hex(self.char())",
          "norm": null,
          "value": "true",
          "line": 1796,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 1795,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1804,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(brace_pos, self.pos()),\n                ast::ErrorKind::EscapeUnexpectedEof,\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        20,
        21,
        22,
        7,
        8,
        9,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        61,
        62,
        63
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1795,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1795,
          "bound": null
        },
        {
          "cond": "is_hex(self.char())",
          "norm": null,
          "value": "true",
          "line": 1796,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 1795,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1804,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "hex.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1815,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(brace_pos, self.pos()),\n                ast::ErrorKind::EscapeHexEmpty,\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        20,
        21,
        22,
        7,
        8,
        9,
        24,
        25,
        26,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        61,
        62,
        63
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1795,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1795,
          "bound": null
        },
        {
          "cond": "is_hex(self.char())",
          "norm": null,
          "value": "true",
          "line": 1796,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 1795,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1804,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "hex.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1815,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(hex, 16).ok().and_then(char::from_u32) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 1821,
          "bound": null
        }
      ],
      "ret": "Ok(ast::Literal {\n                span: Span::new(start, self.pos()),\n                kind: ast::LiteralKind::HexBrace(kind),\n                c,\n            })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        20,
        21,
        22,
        7,
        8,
        9,
        24,
        25,
        26,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        52,
        57,
        58,
        59,
        60,
        63
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1795,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1795,
          "bound": null
        },
        {
          "cond": "is_hex(self.char())",
          "norm": null,
          "value": "true",
          "line": 1796,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 1795,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1804,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "hex.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1815,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(hex, 16).ok().and_then(char::from_u32) matches None",
          "norm": null,
          "value": "true",
          "line": 1821,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(hex, 16).ok().and_then(char::from_u32) matches None",
          "norm": null,
          "value": "true",
          "line": 1821,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(start, end),\n                ast::ErrorKind::EscapeHexInvalid,\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        20,
        21,
        22,
        7,
        8,
        9,
        24,
        25,
        26,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        51,
        53,
        54,
        55,
        56,
        59,
        60,
        63
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1795,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1795,
          "bound": null
        },
        {
          "cond": "is_hex(self.char())",
          "norm": null,
          "value": "true",
          "line": 1796,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 1795,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1804,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        20,
        21,
        22,
        7,
        8,
        9,
        24,
        25,
        26,
        32,
        33,
        34,
        35,
        36,
        38,
        64,
        65
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1795,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1795,
          "bound": null
        },
        {
          "cond": "is_hex(self.char())",
          "norm": null,
          "value": "false",
          "line": 1796,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                    self.span_char(),\n                    ast::ErrorKind::EscapeHexInvalidDigit,\n                ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        61,
        62,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1795,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1795,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1804,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(brace_pos, self.pos()),\n                ast::ErrorKind::EscapeUnexpectedEof,\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        23,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        61,
        62,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1795,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1795,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1804,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "hex.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1815,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(brace_pos, self.pos()),\n                ast::ErrorKind::EscapeHexEmpty,\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        23,
        25,
        26,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        61,
        62,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1795,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1795,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1804,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "hex.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1815,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(hex, 16).ok().and_then(char::from_u32) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 1821,
          "bound": null
        }
      ],
      "ret": "Ok(ast::Literal {\n                span: Span::new(start, self.pos()),\n                kind: ast::LiteralKind::HexBrace(kind),\n                c,\n            })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        23,
        25,
        26,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        52,
        57,
        58,
        59,
        60,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1795,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1795,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1804,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "hex.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1815,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(hex, 16).ok().and_then(char::from_u32) matches None",
          "norm": null,
          "value": "true",
          "line": 1821,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(hex, 16).ok().and_then(char::from_u32) matches None",
          "norm": null,
          "value": "true",
          "line": 1821,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(start, end),\n                ast::ErrorKind::EscapeHexInvalid,\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        23,
        25,
        26,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        51,
        53,
        54,
        55,
        56,
        59,
        60,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1795,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1795,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1804,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        23,
        25,
        26,
        32,
        33,
        34,
        35,
        36,
        38,
        64,
        65
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 1795,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1804,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(brace_pos, self.pos()),\n                ast::ErrorKind::EscapeUnexpectedEof,\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        61,
        62,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 1795,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1804,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "hex.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1815,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(brace_pos, self.pos()),\n                ast::ErrorKind::EscapeHexEmpty,\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        24,
        25,
        26,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        61,
        62,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 1795,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1804,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "hex.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1815,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(hex, 16).ok().and_then(char::from_u32) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 1821,
          "bound": null
        }
      ],
      "ret": "Ok(ast::Literal {\n                span: Span::new(start, self.pos()),\n                kind: ast::LiteralKind::HexBrace(kind),\n                c,\n            })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        24,
        25,
        26,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        52,
        57,
        58,
        59,
        60,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 1795,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1804,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "hex.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1815,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(hex, 16).ok().and_then(char::from_u32) matches None",
          "norm": null,
          "value": "true",
          "line": 1821,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(hex, 16).ok().and_then(char::from_u32) matches None",
          "norm": null,
          "value": "true",
          "line": 1821,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(start, end),\n                ast::ErrorKind::EscapeHexInvalid,\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        24,
        25,
        26,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        51,
        53,
        54,
        55,
        56,
        59,
        60,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 1795,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1804,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        24,
        25,
        26,
        32,
        33,
        34,
        35,
        36,
        38,
        64,
        65
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}