{
  "name": "regex_syntax::hir::{impl#16}::len",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:1334:5:1343:6",
  "doc": "/// Returns the number of codepoints in this range.\n",
  "code": [
    "pub fn len(&self) -> usize {",
    "    let diff = 1 + u32::from(self.end) - u32::from(self.start);",
    "    // This is likely to panic in 16-bit targets since a usize can only fit",
    "    // 2^16. It's not clear what to do here, other than to return an error",
    "    // when building a Unicode class that contains a range whose length",
    "    // overflows usize. (Which, to be honest, is probably quite common on",
    "    // 16-bit targets. For example, this would imply that '.' and '\\p{any}'",
    "    // would be impossible to build.)",
    "    usize::try_from(diff).expect(\"char class len fits in usize\")",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}