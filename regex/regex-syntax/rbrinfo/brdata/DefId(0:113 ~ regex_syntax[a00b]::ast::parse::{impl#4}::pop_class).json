{
  "name": "regex_syntax::ast::parse::{impl#4}::pop_class",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:868:5:910:6",
  "doc": "/// Parse the end of a character class set and pop the character class\n/// parser stack. The union given corresponds to the last union built\n/// before seeing the closing `]`. The union returned corresponds to the\n/// parent character class set with the nested class added to it.\n///\n/// This assumes that the parser is positioned at a `]` and will advance\n/// the parser to the byte immediately following the `]`.\n///\n/// If the stack is empty after popping, then this returns the final\n/// \"top-level\" character class AST (where a \"top-level\" character class\n/// is one that is not nested inside any other character class).\n///\n/// If there is no corresponding opening bracket on the parser's stack,\n/// then an error is returned.\n",
  "code": [
    "fn pop_class(",
    "    &self,",
    "    nested_union: ast::ClassSetUnion,",
    ") -> Result<Either<ast::ClassSetUnion, ast::ClassBracketed>> {",
    "    assert_eq!(self.char(), ']');",
    "",
    "    let item = ast::ClassSet::Item(nested_union.into_item());",
    "    let prevset = self.pop_class_op(item);",
    "    let mut stack = self.parser().stack_class.borrow_mut();",
    "    match stack.pop() {",
    "        None => {",
    "            // We can never observe an empty stack:",
    "            //",
    "            // 1) We are guaranteed to start with a non-empty stack since",
    "            //    the character class parser is only initiated when it sees",
    "            //    a `[`.",
    "            // 2) If we ever observe an empty stack while popping after",
    "            //    seeing a `]`, then we signal the character class parser",
    "            //    to terminate.",
    "            panic!(\"unexpected empty character class stack\")",
    "        }",
    "        Some(ClassState::Op { .. }) => {",
    "            // This panic is unfortunate, but this case is impossible",
    "            // since we already popped the Op state if one exists above.",
    "            // Namely, every push to the class parser stack is guarded by",
    "            // whether an existing Op is already on the top of the stack.",
    "            // If it is, the existing Op is modified. That is, the stack",
    "            // can never have consecutive Op states.",
    "            panic!(\"unexpected ClassState::Op\")",
    "        }",
    "        Some(ClassState::Open { mut union, mut set }) => {",
    "            self.bump();",
    "            set.span.end = self.pos();",
    "            set.kind = prevset;",
    "            if stack.is_empty() {",
    "                Ok(Either::Right(set))",
    "            } else {",
    "                union.push(ast::ClassSetItem::Bracketed(Box::new(set)));",
    "                Ok(Either::Left(union))",
    "            }",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(ClassState::Op { .. }) or Some(ClassState::Open { mut union, mut set })",
          "norm": null,
          "value": "true",
          "line": 877,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(ClassState::Op { .. }) or Some(ClassState::Open { mut union, mut set })",
          "norm": null,
          "value": "true",
          "line": 877,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(ClassState::Op { .. })",
          "norm": null,
          "value": "true",
          "line": 877,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        14,
        18,
        19,
        50,
        51,
        52,
        53,
        59,
        60
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(ClassState::Op { .. }) or Some(ClassState::Open { mut union, mut set })",
          "norm": null,
          "value": "true",
          "line": 877,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 877,
          "bound": null
        },
        {
          "cond": "stack.is_empty()",
          "norm": null,
          "value": "true",
          "line": 902,
          "bound": null
        }
      ],
      "ret": "Ok(Either::Right(set))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        15,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(ClassState::Op { .. }) or Some(ClassState::Open { mut union, mut set })",
          "norm": null,
          "value": "true",
          "line": 877,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 877,
          "bound": null
        },
        {
          "cond": "stack.is_empty()",
          "norm": null,
          "value": "false",
          "line": 902,
          "bound": null
        }
      ],
      "ret": "Ok(Either::Left(union))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        15,
        20,
        21,
        22,
        24,
        25,
        26,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 877,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 877,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        16,
        17,
        50,
        51,
        52,
        53,
        59,
        60
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        59,
        60
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}