{
  "name": "regex_syntax::ast::parse::{impl#5}::maybe_parse_ascii_class",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:2096:5:2158:6",
  "doc": "/// Attempt to parse an ASCII character class, e.g., `[:alnum:]`.\n///\n/// This assumes the parser is positioned at the opening `[`.\n///\n/// If no valid ASCII character class could be found, then this does not\n/// advance the parser and `None` is returned. Otherwise, the parser is\n/// advanced to the first byte following the closing `]` and the\n/// corresponding ASCII class is returned.\n",
  "code": [
    "fn maybe_parse_ascii_class(&self) -> Option<ast::ClassAscii> {",
    "    // ASCII character classes are interesting from a parsing perspective",
    "    // because parsing cannot fail with any interesting error. For example,",
    "    // in order to use an ASCII character class, it must be enclosed in",
    "    // double brackets, e.g., `[[:alnum:]]`. Alternatively, you might think",
    "    // of it as \"ASCII character classes have the syntax `[:NAME:]` which",
    "    // can only appear within character brackets.\" This means that things",
    "    // like `[[:lower:]A]` are legal constructs.",
    "    //",
    "    // However, if one types an incorrect ASCII character class, e.g.,",
    "    // `[[:loower:]]`, then we treat that as a normal nested character",
    "    // class containing the characters `:elorw`. One might argue that we",
    "    // should return an error instead since the repeated colons give away",
    "    // the intent to write an ASCII class. But what if the user typed",
    "    // `[[:lower]]` instead? How can we tell that was intended to be an",
    "    // ASCII class and not just a normal nested class?",
    "    //",
    "    // Reasonable people can probably disagree over this, but for better",
    "    // or worse, we implement semantics that never fails at the expense",
    "    // of better failure modes.",
    "    assert_eq!(self.char(), '[');",
    "    // If parsing fails, then we back up the parser to this starting point.",
    "    let start = self.pos();",
    "    let mut negated = false;",
    "    if !self.bump() || self.char() != ':' {",
    "        self.parser().pos.set(start);",
    "        return None;",
    "    }",
    "    if !self.bump() {",
    "        self.parser().pos.set(start);",
    "        return None;",
    "    }",
    "    if self.char() == '^' {",
    "        negated = true;",
    "        if !self.bump() {",
    "            self.parser().pos.set(start);",
    "            return None;",
    "        }",
    "    }",
    "    let name_start = self.offset();",
    "    while self.char() != ':' && self.bump() {}",
    "    if self.is_eof() {",
    "        self.parser().pos.set(start);",
    "        return None;",
    "    }",
    "    let name = &self.pattern()[name_start..self.offset()];",
    "    if !self.bump_if(\":]\") {",
    "        self.parser().pos.set(start);",
    "        return None;",
    "    }",
    "    let kind = match ast::ClassAsciiKind::from_name(name) {",
    "        Some(kind) => kind,",
    "        None => {",
    "            self.parser().pos.set(start);",
    "            return None;",
    "        }",
    "    };",
    "    Some(ast::ClassAscii {",
    "        span: Span::new(start, self.pos()),",
    "        kind,",
    "        negated,",
    "    })",
    "}"
  ],
  "size": {
    "chain": 29,
    "contra": 8,
    "min_set": 10
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "true",
          "line": 2120,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        8,
        9,
        10,
        11,
        12,
        62,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2124,
          "bound": null
        },
        {
          "cond": "self.char() == '^'",
          "norm": "'^' == self.char()",
          "value": "false",
          "line": 2128,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2130,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "true",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 2137,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        8,
        13,
        14,
        15,
        19,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        29,
        30,
        31,
        36,
        37,
        38,
        39,
        40,
        41,
        61,
        62,
        63
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2124,
          "bound": null
        },
        {
          "cond": "self.char() == '^'",
          "norm": "'^' == self.char()",
          "value": "false",
          "line": 2128,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2130,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "true",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2137,
          "bound": null
        },
        {
          "cond": "self.bump_if(\":]\")",
          "norm": null,
          "value": "true",
          "line": 2142,
          "bound": null
        },
        {
          "cond": "ast::ClassAsciiKind::from_name(name) matches Some(kind)",
          "norm": null,
          "value": "true",
          "line": 2146,
          "bound": null
        },
        {
          "cond": "ast::ClassAsciiKind::from_name(name) matches Some(kind)",
          "norm": null,
          "value": "true",
          "line": 2146,
          "bound": null
        }
      ],
      "ret": "Some(ast::ClassAscii {\n            span: Span::new(start, self.pos()),\n            kind,\n            negated,\n        })",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        8,
        13,
        14,
        15,
        19,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        29,
        30,
        31,
        36,
        37,
        38,
        42,
        43,
        44,
        45,
        46,
        47,
        51,
        53,
        55,
        58,
        59,
        63
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2124,
          "bound": null
        },
        {
          "cond": "self.char() == '^'",
          "norm": "'^' == self.char()",
          "value": "false",
          "line": 2128,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2130,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "true",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2137,
          "bound": null
        },
        {
          "cond": "self.bump_if(\":]\")",
          "norm": null,
          "value": "true",
          "line": 2142,
          "bound": null
        },
        {
          "cond": "ast::ClassAsciiKind::from_name(name) matches None",
          "norm": null,
          "value": "true",
          "line": 2146,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        8,
        13,
        14,
        15,
        19,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        29,
        30,
        31,
        36,
        37,
        38,
        42,
        43,
        44,
        45,
        46,
        47,
        51,
        54,
        56,
        57,
        60,
        61,
        62,
        63
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2124,
          "bound": null
        },
        {
          "cond": "self.char() == '^'",
          "norm": "'^' == self.char()",
          "value": "false",
          "line": 2128,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2130,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "true",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2137,
          "bound": null
        },
        {
          "cond": "self.bump_if(\":]\")",
          "norm": null,
          "value": "false",
          "line": 2142,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        8,
        13,
        14,
        15,
        19,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        29,
        30,
        31,
        36,
        37,
        38,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        60,
        61,
        62,
        63
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2124,
          "bound": null
        },
        {
          "cond": "self.char() == '^'",
          "norm": "'^' == self.char()",
          "value": "false",
          "line": 2128,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2130,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "true",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "false",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 2137,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        8,
        13,
        14,
        15,
        19,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        35,
        37,
        38,
        39,
        40,
        41,
        61,
        62,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2124,
          "bound": null
        },
        {
          "cond": "self.char() == '^'",
          "norm": "'^' == self.char()",
          "value": "false",
          "line": 2128,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2130,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "true",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "false",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2137,
          "bound": null
        },
        {
          "cond": "self.bump_if(\":]\")",
          "norm": null,
          "value": "true",
          "line": 2142,
          "bound": null
        },
        {
          "cond": "ast::ClassAsciiKind::from_name(name) matches Some(kind)",
          "norm": null,
          "value": "true",
          "line": 2146,
          "bound": null
        },
        {
          "cond": "ast::ClassAsciiKind::from_name(name) matches Some(kind)",
          "norm": null,
          "value": "true",
          "line": 2146,
          "bound": null
        }
      ],
      "ret": "Some(ast::ClassAscii {\n            span: Span::new(start, self.pos()),\n            kind,\n            negated,\n        })",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        8,
        13,
        14,
        15,
        19,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        35,
        37,
        38,
        42,
        43,
        44,
        45,
        46,
        47,
        51,
        53,
        55,
        58,
        59,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2124,
          "bound": null
        },
        {
          "cond": "self.char() == '^'",
          "norm": "'^' == self.char()",
          "value": "false",
          "line": 2128,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2130,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "true",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "false",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2137,
          "bound": null
        },
        {
          "cond": "self.bump_if(\":]\")",
          "norm": null,
          "value": "true",
          "line": 2142,
          "bound": null
        },
        {
          "cond": "ast::ClassAsciiKind::from_name(name) matches None",
          "norm": null,
          "value": "true",
          "line": 2146,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        8,
        13,
        14,
        15,
        19,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        35,
        37,
        38,
        42,
        43,
        44,
        45,
        46,
        47,
        51,
        54,
        56,
        57,
        60,
        61,
        62,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2124,
          "bound": null
        },
        {
          "cond": "self.char() == '^'",
          "norm": "'^' == self.char()",
          "value": "false",
          "line": 2128,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2130,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "true",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "false",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2137,
          "bound": null
        },
        {
          "cond": "self.bump_if(\":]\")",
          "norm": null,
          "value": "false",
          "line": 2142,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        8,
        13,
        14,
        15,
        19,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        35,
        37,
        38,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        60,
        61,
        62,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2124,
          "bound": null
        },
        {
          "cond": "self.char() == '^'",
          "norm": "'^' == self.char()",
          "value": "false",
          "line": 2128,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2130,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 2137,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        8,
        13,
        14,
        15,
        19,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        31,
        36,
        37,
        38,
        39,
        40,
        41,
        61,
        62,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2124,
          "bound": null
        },
        {
          "cond": "self.char() == '^'",
          "norm": "'^' == self.char()",
          "value": "false",
          "line": 2128,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2130,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2137,
          "bound": null
        },
        {
          "cond": "self.bump_if(\":]\")",
          "norm": null,
          "value": "true",
          "line": 2142,
          "bound": null
        },
        {
          "cond": "ast::ClassAsciiKind::from_name(name) matches Some(kind)",
          "norm": null,
          "value": "true",
          "line": 2146,
          "bound": null
        },
        {
          "cond": "ast::ClassAsciiKind::from_name(name) matches Some(kind)",
          "norm": null,
          "value": "true",
          "line": 2146,
          "bound": null
        }
      ],
      "ret": "Some(ast::ClassAscii {\n            span: Span::new(start, self.pos()),\n            kind,\n            negated,\n        })",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        8,
        13,
        14,
        15,
        19,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        31,
        36,
        37,
        38,
        42,
        43,
        44,
        45,
        46,
        47,
        51,
        53,
        55,
        58,
        59,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2124,
          "bound": null
        },
        {
          "cond": "self.char() == '^'",
          "norm": "'^' == self.char()",
          "value": "false",
          "line": 2128,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2130,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2137,
          "bound": null
        },
        {
          "cond": "self.bump_if(\":]\")",
          "norm": null,
          "value": "true",
          "line": 2142,
          "bound": null
        },
        {
          "cond": "ast::ClassAsciiKind::from_name(name) matches None",
          "norm": null,
          "value": "true",
          "line": 2146,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        8,
        13,
        14,
        15,
        19,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        31,
        36,
        37,
        38,
        42,
        43,
        44,
        45,
        46,
        47,
        51,
        54,
        56,
        57,
        60,
        61,
        62,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2124,
          "bound": null
        },
        {
          "cond": "self.char() == '^'",
          "norm": "'^' == self.char()",
          "value": "false",
          "line": 2128,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2130,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2137,
          "bound": null
        },
        {
          "cond": "self.bump_if(\":]\")",
          "norm": null,
          "value": "false",
          "line": 2142,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        8,
        13,
        14,
        15,
        19,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        31,
        36,
        37,
        38,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        60,
        61,
        62,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2124,
          "bound": null
        },
        {
          "cond": "self.char() == '^'",
          "norm": "'^' == self.char()",
          "value": "false",
          "line": 2128,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "false",
          "line": 2130,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        8,
        13,
        14,
        15,
        19,
        20,
        21,
        23,
        24,
        25,
        62,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2124,
          "bound": null
        },
        {
          "cond": "self.char() == '^'",
          "norm": "'^' == self.char()",
          "value": "true",
          "line": 2128,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "true",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 2137,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        8,
        13,
        14,
        15,
        19,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        29,
        30,
        31,
        36,
        37,
        38,
        39,
        40,
        41,
        61,
        62,
        63
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2124,
          "bound": null
        },
        {
          "cond": "self.char() == '^'",
          "norm": "'^' == self.char()",
          "value": "true",
          "line": 2128,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "true",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2137,
          "bound": null
        },
        {
          "cond": "self.bump_if(\":]\")",
          "norm": null,
          "value": "true",
          "line": 2142,
          "bound": null
        },
        {
          "cond": "ast::ClassAsciiKind::from_name(name) matches Some(kind)",
          "norm": null,
          "value": "true",
          "line": 2146,
          "bound": null
        },
        {
          "cond": "ast::ClassAsciiKind::from_name(name) matches Some(kind)",
          "norm": null,
          "value": "true",
          "line": 2146,
          "bound": null
        }
      ],
      "ret": "Some(ast::ClassAscii {\n            span: Span::new(start, self.pos()),\n            kind,\n            negated,\n        })",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        8,
        13,
        14,
        15,
        19,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        29,
        30,
        31,
        36,
        37,
        38,
        42,
        43,
        44,
        45,
        46,
        47,
        51,
        53,
        55,
        58,
        59,
        63
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2124,
          "bound": null
        },
        {
          "cond": "self.char() == '^'",
          "norm": "'^' == self.char()",
          "value": "true",
          "line": 2128,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "true",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2137,
          "bound": null
        },
        {
          "cond": "self.bump_if(\":]\")",
          "norm": null,
          "value": "true",
          "line": 2142,
          "bound": null
        },
        {
          "cond": "ast::ClassAsciiKind::from_name(name) matches None",
          "norm": null,
          "value": "true",
          "line": 2146,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        8,
        13,
        14,
        15,
        19,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        29,
        30,
        31,
        36,
        37,
        38,
        42,
        43,
        44,
        45,
        46,
        47,
        51,
        54,
        56,
        57,
        60,
        61,
        62,
        63
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2124,
          "bound": null
        },
        {
          "cond": "self.char() == '^'",
          "norm": "'^' == self.char()",
          "value": "true",
          "line": 2128,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "true",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2137,
          "bound": null
        },
        {
          "cond": "self.bump_if(\":]\")",
          "norm": null,
          "value": "false",
          "line": 2142,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        8,
        13,
        14,
        15,
        19,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        29,
        30,
        31,
        36,
        37,
        38,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        60,
        61,
        62,
        63
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2124,
          "bound": null
        },
        {
          "cond": "self.char() == '^'",
          "norm": "'^' == self.char()",
          "value": "true",
          "line": 2128,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "true",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "false",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 2137,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        8,
        13,
        14,
        15,
        19,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        35,
        37,
        38,
        39,
        40,
        41,
        61,
        62,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2124,
          "bound": null
        },
        {
          "cond": "self.char() == '^'",
          "norm": "'^' == self.char()",
          "value": "true",
          "line": 2128,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "true",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "false",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2137,
          "bound": null
        },
        {
          "cond": "self.bump_if(\":]\")",
          "norm": null,
          "value": "true",
          "line": 2142,
          "bound": null
        },
        {
          "cond": "ast::ClassAsciiKind::from_name(name) matches Some(kind)",
          "norm": null,
          "value": "true",
          "line": 2146,
          "bound": null
        },
        {
          "cond": "ast::ClassAsciiKind::from_name(name) matches Some(kind)",
          "norm": null,
          "value": "true",
          "line": 2146,
          "bound": null
        }
      ],
      "ret": "Some(ast::ClassAscii {\n            span: Span::new(start, self.pos()),\n            kind,\n            negated,\n        })",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        8,
        13,
        14,
        15,
        19,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        35,
        37,
        38,
        42,
        43,
        44,
        45,
        46,
        47,
        51,
        53,
        55,
        58,
        59,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2124,
          "bound": null
        },
        {
          "cond": "self.char() == '^'",
          "norm": "'^' == self.char()",
          "value": "true",
          "line": 2128,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "true",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "false",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2137,
          "bound": null
        },
        {
          "cond": "self.bump_if(\":]\")",
          "norm": null,
          "value": "true",
          "line": 2142,
          "bound": null
        },
        {
          "cond": "ast::ClassAsciiKind::from_name(name) matches None",
          "norm": null,
          "value": "true",
          "line": 2146,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        8,
        13,
        14,
        15,
        19,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        35,
        37,
        38,
        42,
        43,
        44,
        45,
        46,
        47,
        51,
        54,
        56,
        57,
        60,
        61,
        62,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2124,
          "bound": null
        },
        {
          "cond": "self.char() == '^'",
          "norm": "'^' == self.char()",
          "value": "true",
          "line": 2128,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "true",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "false",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2137,
          "bound": null
        },
        {
          "cond": "self.bump_if(\":]\")",
          "norm": null,
          "value": "false",
          "line": 2142,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        8,
        13,
        14,
        15,
        19,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        35,
        37,
        38,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        60,
        61,
        62,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2124,
          "bound": null
        },
        {
          "cond": "self.char() == '^'",
          "norm": "'^' == self.char()",
          "value": "true",
          "line": 2128,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 2137,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        8,
        13,
        14,
        15,
        19,
        26,
        27,
        28,
        29,
        30,
        31,
        36,
        37,
        38,
        39,
        40,
        41,
        61,
        62,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2124,
          "bound": null
        },
        {
          "cond": "self.char() == '^'",
          "norm": "'^' == self.char()",
          "value": "true",
          "line": 2128,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2137,
          "bound": null
        },
        {
          "cond": "self.bump_if(\":]\")",
          "norm": null,
          "value": "true",
          "line": 2142,
          "bound": null
        },
        {
          "cond": "ast::ClassAsciiKind::from_name(name) matches Some(kind)",
          "norm": null,
          "value": "true",
          "line": 2146,
          "bound": null
        },
        {
          "cond": "ast::ClassAsciiKind::from_name(name) matches Some(kind)",
          "norm": null,
          "value": "true",
          "line": 2146,
          "bound": null
        }
      ],
      "ret": "Some(ast::ClassAscii {\n            span: Span::new(start, self.pos()),\n            kind,\n            negated,\n        })",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        8,
        13,
        14,
        15,
        19,
        26,
        27,
        28,
        29,
        30,
        31,
        36,
        37,
        38,
        42,
        43,
        44,
        45,
        46,
        47,
        51,
        53,
        55,
        58,
        59,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2124,
          "bound": null
        },
        {
          "cond": "self.char() == '^'",
          "norm": "'^' == self.char()",
          "value": "true",
          "line": 2128,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2137,
          "bound": null
        },
        {
          "cond": "self.bump_if(\":]\")",
          "norm": null,
          "value": "true",
          "line": 2142,
          "bound": null
        },
        {
          "cond": "ast::ClassAsciiKind::from_name(name) matches None",
          "norm": null,
          "value": "true",
          "line": 2146,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        8,
        13,
        14,
        15,
        19,
        26,
        27,
        28,
        29,
        30,
        31,
        36,
        37,
        38,
        42,
        43,
        44,
        45,
        46,
        47,
        51,
        54,
        56,
        57,
        60,
        61,
        62,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2124,
          "bound": null
        },
        {
          "cond": "self.char() == '^'",
          "norm": "'^' == self.char()",
          "value": "true",
          "line": 2128,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2136,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2137,
          "bound": null
        },
        {
          "cond": "self.bump_if(\":]\")",
          "norm": null,
          "value": "false",
          "line": 2142,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        8,
        13,
        14,
        15,
        19,
        26,
        27,
        28,
        29,
        30,
        31,
        36,
        37,
        38,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        60,
        61,
        62,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 2120,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "false",
          "line": 2124,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        8,
        13,
        14,
        16,
        17,
        18,
        62,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "false",
          "line": 2120,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        10,
        11,
        12,
        62,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 29,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        64
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}