{
  "name": "regex_syntax::hir::translate::{impl#5}::case_fold_char",
  "mod_info": {
    "name": "hir::translate",
    "loc": "regex-syntax/src/hir/mod.rs:44:1:44:19"
  },
  "visible": false,
  "loc": "regex-syntax/src/hir/translate.rs:845:5:886:6",
  "doc": "",
  "code": [
    "fn case_fold_char(&self, span: Span, c: char) -> Result<Option<Hir>> {",
    "    if !self.flags().case_insensitive() {",
    "        return Ok(None);",
    "    }",
    "    if self.flags().unicode() {",
    "        // If case folding won't do anything, then don't bother trying.",
    "        let map = unicode::SimpleCaseFolder::new()",
    "            .map(|f| f.overlaps(c, c))",
    "            .map_err(|_| {",
    "                self.error(span, ErrorKind::UnicodeCaseUnavailable)",
    "            })?;",
    "        if !map {",
    "            return Ok(None);",
    "        }",
    "        let mut cls =",
    "            hir::ClassUnicode::new(vec![hir::ClassUnicodeRange::new(",
    "                c, c,",
    "            )]);",
    "        cls.try_case_fold_simple().map_err(|_| {",
    "            self.error(span, ErrorKind::UnicodeCaseUnavailable)",
    "        })?;",
    "        Ok(Some(Hir::class(hir::Class::Unicode(cls))))",
    "    } else {",
    "        if !c.is_ascii() {",
    "            return Ok(None);",
    "        }",
    "        // If case folding won't do anything, then don't bother trying.",
    "        match c {",
    "            'A'..='Z' | 'a'..='z' => {}",
    "            _ => return Ok(None),",
    "        }",
    "        let mut cls =",
    "            hir::ClassBytes::new(vec![hir::ClassBytesRange::new(",
    "                // OK because 'c.len_utf8() == 1' which in turn implies",
    "                // that 'c' is ASCII.",
    "                u8::try_from(c).unwrap(),",
    "                u8::try_from(c).unwrap(),",
    "            )]);",
    "        cls.case_fold_simple();",
    "        Ok(Some(Hir::class(hir::Class::Bytes(cls))))",
    "    }",
    "}"
  ],
  "size": {
    "chain": 13,
    "contra": 4,
    "min_set": 9
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.flags().case_insensitive()",
          "norm": null,
          "value": "true",
          "line": 846,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 849,
          "bound": null
        },
        {
          "cond": "unicode::SimpleCaseFolder::new()\n                .map(|f| f.overlaps(c, c))\n                .map_err(|_| {\n                    self.error(span, ErrorKind::UnicodeCaseUnavailable)\n                })?",
          "norm": null,
          "value": "Err/None",
          "line": 851,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        17,
        74,
        75,
        76,
        77,
        78
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.flags().case_insensitive()",
          "norm": null,
          "value": "true",
          "line": 846,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 849,
          "bound": null
        },
        {
          "cond": "unicode::SimpleCaseFolder::new()\n                .map(|f| f.overlaps(c, c))\n                .map_err(|_| {\n                    self.error(span, ErrorKind::UnicodeCaseUnavailable)\n                })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 851,
          "bound": null
        },
        {
          "cond": "map",
          "norm": null,
          "value": "true",
          "line": 856,
          "bound": null
        },
        {
          "cond": "cls.try_case_fold_simple().map_err(|_| {\n                self.error(span, ErrorKind::UnicodeCaseUnavailable)\n            })?",
          "norm": null,
          "value": "Err/None",
          "line": 863,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        32,
        34,
        35,
        71,
        72,
        73,
        76,
        77,
        78
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.flags().case_insensitive()",
          "norm": null,
          "value": "true",
          "line": 846,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 849,
          "bound": null
        },
        {
          "cond": "unicode::SimpleCaseFolder::new()\n                .map(|f| f.overlaps(c, c))\n                .map_err(|_| {\n                    self.error(span, ErrorKind::UnicodeCaseUnavailable)\n                })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 851,
          "bound": null
        },
        {
          "cond": "map",
          "norm": null,
          "value": "true",
          "line": 856,
          "bound": null
        },
        {
          "cond": "cls.try_case_fold_simple().map_err(|_| {\n                self.error(span, ErrorKind::UnicodeCaseUnavailable)\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 863,
          "bound": null
        }
      ],
      "ret": "Ok(Some(Hir::class(hir::Class::Unicode(cls))))",
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        36,
        37,
        38,
        39,
        40,
        41,
        70,
        78
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.flags().case_insensitive()",
          "norm": null,
          "value": "true",
          "line": 846,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 849,
          "bound": null
        },
        {
          "cond": "unicode::SimpleCaseFolder::new()\n                .map(|f| f.overlaps(c, c))\n                .map_err(|_| {\n                    self.error(span, ErrorKind::UnicodeCaseUnavailable)\n                })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 851,
          "bound": null
        },
        {
          "cond": "map",
          "norm": null,
          "value": "false",
          "line": 856,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        18,
        19,
        20,
        76,
        77,
        78
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.flags().case_insensitive()",
          "norm": null,
          "value": "true",
          "line": 846,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 849,
          "bound": null
        },
        {
          "cond": "c.is_ascii()",
          "norm": null,
          "value": "true",
          "line": 868,
          "bound": null
        },
        {
          "cond": "c matches 'A'..='Z'",
          "norm": null,
          "value": "true",
          "line": 873,
          "bound": null
        },
        {
          "cond": "c matches 'A'..='Z'",
          "norm": null,
          "value": "true",
          "line": 873,
          "bound": null
        },
        {
          "cond": "c matches 'a'..='z' or 'A'..='Z'",
          "norm": null,
          "value": "true",
          "line": 872,
          "bound": null
        }
      ],
      "ret": "Ok(Some(Hir::class(hir::Class::Bytes(cls))))",
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        42,
        43,
        44,
        50,
        51,
        52,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        78
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.flags().case_insensitive()",
          "norm": null,
          "value": "true",
          "line": 846,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 849,
          "bound": null
        },
        {
          "cond": "c.is_ascii()",
          "norm": null,
          "value": "true",
          "line": 868,
          "bound": null
        },
        {
          "cond": "c matches 'A'..='Z'",
          "norm": null,
          "value": "true",
          "line": 873,
          "bound": null
        },
        {
          "cond": "c matches 'A'..='Z'",
          "norm": null,
          "value": "false",
          "line": 873,
          "bound": null
        },
        {
          "cond": "c matches 'a'..='z'",
          "norm": null,
          "value": "true",
          "line": 873,
          "bound": null
        },
        {
          "cond": "c matches 'a'..='z'",
          "norm": null,
          "value": "true",
          "line": 873,
          "bound": null
        },
        {
          "cond": "c matches 'a'..='z' or 'A'..='Z'",
          "norm": null,
          "value": "true",
          "line": 872,
          "bound": null
        }
      ],
      "ret": "Ok(Some(Hir::class(hir::Class::Bytes(cls))))",
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        42,
        43,
        44,
        50,
        48,
        49,
        51,
        52,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        78
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.flags().case_insensitive()",
          "norm": null,
          "value": "true",
          "line": 846,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 849,
          "bound": null
        },
        {
          "cond": "c.is_ascii()",
          "norm": null,
          "value": "true",
          "line": 868,
          "bound": null
        },
        {
          "cond": "c matches 'A'..='Z'",
          "norm": null,
          "value": "true",
          "line": 873,
          "bound": null
        },
        {
          "cond": "c matches 'A'..='Z'",
          "norm": null,
          "value": "false",
          "line": 873,
          "bound": null
        },
        {
          "cond": "c matches 'a'..='z'",
          "norm": null,
          "value": "true",
          "line": 873,
          "bound": null
        },
        {
          "cond": "c matches 'a'..='z'",
          "norm": null,
          "value": "false",
          "line": 873,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        42,
        43,
        44,
        50,
        48,
        49,
        47,
        53,
        77,
        78
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.flags().case_insensitive()",
          "norm": null,
          "value": "true",
          "line": 846,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 849,
          "bound": null
        },
        {
          "cond": "c.is_ascii()",
          "norm": null,
          "value": "true",
          "line": 868,
          "bound": null
        },
        {
          "cond": "c matches 'A'..='Z'",
          "norm": null,
          "value": "true",
          "line": 873,
          "bound": null
        },
        {
          "cond": "c matches 'A'..='Z'",
          "norm": null,
          "value": "false",
          "line": 873,
          "bound": null
        },
        {
          "cond": "c matches 'a'..='z'",
          "norm": null,
          "value": "false",
          "line": 873,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        42,
        43,
        44,
        50,
        48,
        47,
        53,
        77,
        78
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.flags().case_insensitive()",
          "norm": null,
          "value": "true",
          "line": 846,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 849,
          "bound": null
        },
        {
          "cond": "c.is_ascii()",
          "norm": null,
          "value": "true",
          "line": 868,
          "bound": null
        },
        {
          "cond": "c matches 'A'..='Z'",
          "norm": null,
          "value": "false",
          "line": 873,
          "bound": null
        },
        {
          "cond": "c matches 'a'..='z'",
          "norm": null,
          "value": "true",
          "line": 873,
          "bound": null
        },
        {
          "cond": "c matches 'a'..='z'",
          "norm": null,
          "value": "true",
          "line": 873,
          "bound": null
        },
        {
          "cond": "c matches 'a'..='z' or 'A'..='Z'",
          "norm": null,
          "value": "true",
          "line": 872,
          "bound": null
        }
      ],
      "ret": "Ok(Some(Hir::class(hir::Class::Bytes(cls))))",
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        42,
        43,
        44,
        48,
        49,
        51,
        52,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        78
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.flags().case_insensitive()",
          "norm": null,
          "value": "true",
          "line": 846,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 849,
          "bound": null
        },
        {
          "cond": "c.is_ascii()",
          "norm": null,
          "value": "true",
          "line": 868,
          "bound": null
        },
        {
          "cond": "c matches 'A'..='Z'",
          "norm": null,
          "value": "false",
          "line": 873,
          "bound": null
        },
        {
          "cond": "c matches 'a'..='z'",
          "norm": null,
          "value": "true",
          "line": 873,
          "bound": null
        },
        {
          "cond": "c matches 'a'..='z'",
          "norm": null,
          "value": "false",
          "line": 873,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        42,
        43,
        44,
        48,
        49,
        47,
        53,
        77,
        78
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "self.flags().case_insensitive()",
          "norm": null,
          "value": "true",
          "line": 846,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 849,
          "bound": null
        },
        {
          "cond": "c.is_ascii()",
          "norm": null,
          "value": "true",
          "line": 868,
          "bound": null
        },
        {
          "cond": "c matches 'A'..='Z'",
          "norm": null,
          "value": "false",
          "line": 873,
          "bound": null
        },
        {
          "cond": "c matches 'a'..='z'",
          "norm": null,
          "value": "false",
          "line": 873,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        42,
        43,
        44,
        48,
        47,
        53,
        77,
        78
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "self.flags().case_insensitive()",
          "norm": null,
          "value": "true",
          "line": 846,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 849,
          "bound": null
        },
        {
          "cond": "c.is_ascii()",
          "norm": null,
          "value": "false",
          "line": 868,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        42,
        43,
        45,
        46,
        77,
        78
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "self.flags().case_insensitive()",
          "norm": null,
          "value": "false",
          "line": 846,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        78
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}