{
  "name": "regex_syntax::unicode::hir_class",
  "mod_info": {
    "name": "unicode",
    "loc": "regex-syntax/src/lib.rs:193:1:193:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/unicode.rs:452:1:458:2",
  "doc": "/// Build a Unicode HIR class from a sequence of Unicode scalar value ranges.\n",
  "code": [
    "pub fn hir_class(ranges: &[(char, char)]) -> hir::ClassUnicode {",
    "    let hir_ranges: Vec<hir::ClassUnicodeRange> = ranges",
    "        .iter()",
    "        .map(|&(s, e)| hir::ClassUnicodeRange::new(s, e))",
    "        .collect();",
    "    hir::ClassUnicode::new(hir_ranges)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}