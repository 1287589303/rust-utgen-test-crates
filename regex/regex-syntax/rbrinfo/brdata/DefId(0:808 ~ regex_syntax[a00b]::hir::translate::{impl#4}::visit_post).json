{
  "name": "regex_syntax::hir::translate::{impl#4}::visit_post",
  "mod_info": {
    "name": "hir::translate",
    "loc": "regex-syntax/src/hir/mod.rs:44:1:44:19"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/translate.rs:371:5:470:6",
  "doc": "",
  "code": [
    "fn visit_post(&mut self, ast: &Ast) -> Result<()> {",
    "    match *ast {",
    "        Ast::Empty(_) => {",
    "            self.push(HirFrame::Expr(Hir::empty()));",
    "        }",
    "        Ast::Flags(ref x) => {",
    "            self.set_flags(&x.flags);",
    "            // Flags in the AST are generally considered directives and",
    "            // not actual sub-expressions. However, they can be used in",
    "            // the concrete syntax like `((?i))`, and we need some kind of",
    "            // indication of an expression there, and Empty is the correct",
    "            // choice.",
    "            //",
    "            // There can also be things like `(?i)+`, but we rule those out",
    "            // in the parser. In the future, we might allow them for",
    "            // consistency sake.",
    "            self.push(HirFrame::Expr(Hir::empty()));",
    "        }",
    "        Ast::Literal(ref x) => match self.ast_literal_to_scalar(x)? {",
    "            Either::Right(byte) => self.push_byte(byte),",
    "            Either::Left(ch) => match self.case_fold_char(x.span, ch)? {",
    "                None => self.push_char(ch),",
    "                Some(expr) => self.push(HirFrame::Expr(expr)),",
    "            },",
    "        },",
    "        Ast::Dot(ref span) => {",
    "            self.push(HirFrame::Expr(self.hir_dot(**span)?));",
    "        }",
    "        Ast::Assertion(ref x) => {",
    "            self.push(HirFrame::Expr(self.hir_assertion(x)?));",
    "        }",
    "        Ast::ClassPerl(ref x) => {",
    "            if self.flags().unicode() {",
    "                let cls = self.hir_perl_unicode_class(x)?;",
    "                let hcls = hir::Class::Unicode(cls);",
    "                self.push(HirFrame::Expr(Hir::class(hcls)));",
    "            } else {",
    "                let cls = self.hir_perl_byte_class(x)?;",
    "                let hcls = hir::Class::Bytes(cls);",
    "                self.push(HirFrame::Expr(Hir::class(hcls)));",
    "            }",
    "        }",
    "        Ast::ClassUnicode(ref x) => {",
    "            let cls = hir::Class::Unicode(self.hir_unicode_class(x)?);",
    "            self.push(HirFrame::Expr(Hir::class(cls)));",
    "        }",
    "        Ast::ClassBracketed(ref ast) => {",
    "            if self.flags().unicode() {",
    "                let mut cls = self.pop().unwrap().unwrap_class_unicode();",
    "                self.unicode_fold_and_negate(",
    "                    &ast.span,",
    "                    ast.negated,",
    "                    &mut cls,",
    "                )?;",
    "                let expr = Hir::class(hir::Class::Unicode(cls));",
    "                self.push(HirFrame::Expr(expr));",
    "            } else {",
    "                let mut cls = self.pop().unwrap().unwrap_class_bytes();",
    "                self.bytes_fold_and_negate(",
    "                    &ast.span,",
    "                    ast.negated,",
    "                    &mut cls,",
    "                )?;",
    "                let expr = Hir::class(hir::Class::Bytes(cls));",
    "                self.push(HirFrame::Expr(expr));",
    "            }",
    "        }",
    "        Ast::Repetition(ref x) => {",
    "            let expr = self.pop().unwrap().unwrap_expr();",
    "            self.pop().unwrap().unwrap_repetition();",
    "            self.push(HirFrame::Expr(self.hir_repetition(x, expr)));",
    "        }",
    "        Ast::Group(ref x) => {",
    "            let expr = self.pop().unwrap().unwrap_expr();",
    "            let old_flags = self.pop().unwrap().unwrap_group();",
    "            self.trans().flags.set(old_flags);",
    "            self.push(HirFrame::Expr(self.hir_capture(x, expr)));",
    "        }",
    "        Ast::Concat(_) => {",
    "            let mut exprs = vec![];",
    "            while let Some(expr) = self.pop_concat_expr() {",
    "                if !matches!(*expr.kind(), HirKind::Empty) {",
    "                    exprs.push(expr);",
    "                }",
    "            }",
    "            exprs.reverse();",
    "            self.push(HirFrame::Expr(Hir::concat(exprs)));",
    "        }",
    "        Ast::Alternation(_) => {",
    "            let mut exprs = vec![];",
    "            while let Some(expr) = self.pop_alt_expr() {",
    "                self.pop().unwrap().unwrap_alternation_pipe();",
    "                exprs.push(expr);",
    "            }",
    "            exprs.reverse();",
    "            self.push(HirFrame::Expr(Hir::alternation(exprs)));",
    "        }",
    "    }",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 28,
    "contra": 1,
    "min_set": 24
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*ast matches Ast::Concat(_)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::Concat(_)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "let Some(expr) = self.pop_concat_expr()",
          "norm": null,
          "value": "true",
          "line": 451,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        12,
        196,
        197,
        198,
        199,
        200,
        212,
        215,
        216,
        217,
        218,
        219,
        220,
        221,
        242,
        267
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*ast matches Ast::Concat(_)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::Concat(_)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "let Some(expr) = self.pop_concat_expr()",
          "norm": null,
          "value": "true",
          "line": 451,
          "bound": null
        },
        {
          "cond": "*expr.kind() matches _",
          "norm": null,
          "value": "true",
          "line": 459,
          "bound": null
        },
        {
          "cond": "*expr.kind() matches HirKind::Empty",
          "norm": null,
          "value": "false",
          "line": 452,
          "bound": null
        },
        {
          "cond": "let Some(expr) = self.pop_concat_expr()",
          "norm": null,
          "value": "true",
          "line": 451,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        12,
        196,
        197,
        198,
        199,
        200,
        201,
        202,
        203,
        204,
        207,
        208,
        209,
        211,
        213,
        214,
        198,
        199,
        200,
        212,
        215,
        216,
        217,
        218,
        219,
        220,
        221,
        242,
        267
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "*ast matches Ast::Concat(_)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::Concat(_)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "let Some(expr) = self.pop_concat_expr()",
          "norm": null,
          "value": "true",
          "line": 451,
          "bound": null
        },
        {
          "cond": "*expr.kind() matches HirKind::Empty",
          "norm": null,
          "value": "true",
          "line": 452,
          "bound": null
        },
        {
          "cond": "*expr.kind() matches HirKind::Empty",
          "norm": null,
          "value": "true",
          "line": 452,
          "bound": null
        },
        {
          "cond": "let Some(expr) = self.pop_concat_expr()",
          "norm": null,
          "value": "true",
          "line": 451,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        12,
        196,
        197,
        198,
        199,
        200,
        201,
        202,
        203,
        205,
        206,
        207,
        210,
        211,
        213,
        214,
        198,
        199,
        200,
        212,
        215,
        216,
        217,
        218,
        219,
        220,
        221,
        242,
        267
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "*ast matches Ast::Alternation(_)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "let Some(expr) = self.pop_alt_expr()",
          "norm": null,
          "value": "true",
          "line": 461,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        13,
        222,
        223,
        224,
        225,
        232,
        235,
        236,
        237,
        238,
        239,
        240,
        241,
        242,
        267
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "*ast matches Ast::Alternation(_)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "let Some(expr) = self.pop_alt_expr()",
          "norm": null,
          "value": "true",
          "line": 461,
          "bound": null
        },
        {
          "cond": "let Some(expr) = self.pop_alt_expr()",
          "norm": null,
          "value": "true",
          "line": 461,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        13,
        222,
        223,
        224,
        225,
        226,
        227,
        228,
        229,
        230,
        231,
        233,
        234,
        223,
        224,
        225,
        232,
        235,
        236,
        237,
        238,
        239,
        240,
        241,
        242,
        267
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "*ast matches Ast::Group(ref x)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::Group(ref x)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        11,
        183,
        184,
        185,
        186,
        187,
        188,
        189,
        190,
        191,
        192,
        193,
        194,
        195,
        242,
        267
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "*ast matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        10,
        172,
        173,
        174,
        175,
        176,
        177,
        178,
        179,
        180,
        181,
        182,
        242,
        267
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "*ast matches Ast::ClassBracketed(ref ast)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::ClassBracketed(ref ast)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 418,
          "bound": null
        },
        {
          "cond": "self.unicode_fold_and_negate(\n                        &ast.span,\n                        ast.negated,\n                        &mut cls,\n                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 420,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        9,
        132,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        142,
        144,
        145,
        246,
        247,
        248,
        249,
        266,
        267
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "*ast matches Ast::ClassBracketed(ref ast)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::ClassBracketed(ref ast)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 418,
          "bound": null
        },
        {
          "cond": "self.unicode_fold_and_negate(\n                        &ast.span,\n                        ast.negated,\n                        &mut cls,\n                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 420,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        9,
        132,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        143,
        146,
        147,
        148,
        149,
        150,
        151,
        152,
        171,
        242,
        267
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "*ast matches Ast::ClassBracketed(ref ast)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::ClassBracketed(ref ast)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 418,
          "bound": null
        },
        {
          "cond": "self.bytes_fold_and_negate(\n                        &ast.span,\n                        ast.negated,\n                        &mut cls,\n                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 429,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        9,
        132,
        133,
        134,
        153,
        154,
        155,
        156,
        157,
        158,
        160,
        162,
        163,
        243,
        244,
        245,
        249,
        266,
        267
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "*ast matches Ast::ClassBracketed(ref ast)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::ClassBracketed(ref ast)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 418,
          "bound": null
        },
        {
          "cond": "self.bytes_fold_and_negate(\n                        &ast.span,\n                        ast.negated,\n                        &mut cls,\n                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 429,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        9,
        132,
        133,
        134,
        153,
        154,
        155,
        156,
        157,
        158,
        161,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        242,
        267
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "*ast matches Ast::ClassPerl(ref x)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::ClassPerl(ref x)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 403,
          "bound": null
        },
        {
          "cond": "self.hir_perl_unicode_class(x)?",
          "norm": null,
          "value": "Err/None",
          "line": 404,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        7,
        81,
        82,
        83,
        84,
        85,
        86,
        88,
        90,
        91,
        254,
        255,
        256,
        266,
        267
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "*ast matches Ast::ClassPerl(ref x)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::ClassPerl(ref x)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 403,
          "bound": null
        },
        {
          "cond": "self.hir_perl_unicode_class(x)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 404,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        7,
        81,
        82,
        83,
        84,
        85,
        86,
        89,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        116,
        242,
        267
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "*ast matches Ast::ClassPerl(ref x)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::ClassPerl(ref x)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 403,
          "bound": null
        },
        {
          "cond": "self.hir_perl_byte_class(x)?",
          "norm": null,
          "value": "Err/None",
          "line": 408,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        7,
        81,
        82,
        83,
        100,
        101,
        102,
        104,
        106,
        107,
        252,
        253,
        256,
        266,
        267
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "*ast matches Ast::ClassPerl(ref x)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::ClassPerl(ref x)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 403,
          "bound": null
        },
        {
          "cond": "self.hir_perl_byte_class(x)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 408,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        7,
        81,
        82,
        83,
        100,
        101,
        102,
        105,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        242,
        267
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "*ast matches Ast::ClassUnicode(ref x)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::ClassUnicode(ref x)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "self.hir_unicode_class(x)?",
          "norm": null,
          "value": "Err/None",
          "line": 414,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        8,
        117,
        118,
        119,
        121,
        123,
        124,
        250,
        251,
        266,
        267
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "*ast matches Ast::ClassUnicode(ref x)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::ClassUnicode(ref x)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "self.hir_unicode_class(x)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 414,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        8,
        117,
        118,
        119,
        122,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        242,
        267
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "*ast matches Ast::Assertion(ref x)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::Assertion(ref x)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "self.hir_assertion(x)?",
          "norm": null,
          "value": "Err/None",
          "line": 400,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        6,
        69,
        70,
        71,
        73,
        75,
        76,
        257,
        258,
        266,
        267
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "*ast matches Ast::Assertion(ref x)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::Assertion(ref x)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "self.hir_assertion(x)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 400,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        6,
        69,
        70,
        71,
        74,
        77,
        78,
        79,
        80,
        242,
        267
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "*ast matches Ast::Dot(ref span)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::Dot(ref span)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "self.hir_dot(**span)?",
          "norm": null,
          "value": "Err/None",
          "line": 397,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        57,
        58,
        59,
        61,
        63,
        64,
        259,
        260,
        266,
        267
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "*ast matches Ast::Dot(ref span)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::Dot(ref span)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "self.hir_dot(**span)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 397,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        5,
        57,
        58,
        59,
        62,
        65,
        66,
        67,
        68,
        242,
        267
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "*ast matches Ast::Literal(ref x)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::Literal(ref x)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "self.ast_literal_to_scalar(x)?",
          "norm": null,
          "value": "Err/None",
          "line": 389,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        23,
        24,
        25,
        27,
        29,
        30,
        263,
        264,
        265,
        266,
        267
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "*ast matches Ast::Literal(ref x)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::Literal(ref x)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "self.ast_literal_to_scalar(x)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 389,
          "bound": null
        },
        {
          "cond": "self.ast_literal_to_scalar(x)?",
          "norm": null,
          "value": "Err/None",
          "line": 389,
          "bound": null
        },
        {
          "cond": "self.ast_literal_to_scalar(x)? matches Either::Right(byte)",
          "norm": null,
          "value": "true",
          "line": 389,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        4,
        23,
        24,
        25,
        28,
        32,
        34,
        35,
        55,
        56,
        242,
        267
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "*ast matches Ast::Literal(ref x)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::Literal(ref x)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "self.ast_literal_to_scalar(x)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 389,
          "bound": null
        },
        {
          "cond": "self.ast_literal_to_scalar(x)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 389,
          "bound": null
        },
        {
          "cond": "self.case_fold_char(x.span, ch)? matches Some(expr)",
          "norm": null,
          "value": "true",
          "line": 391,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        23,
        24,
        25,
        28,
        33,
        36,
        37,
        39,
        41,
        42,
        261,
        262,
        264,
        265,
        266,
        267
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "*ast matches Ast::Literal(ref x)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::Literal(ref x)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "self.ast_literal_to_scalar(x)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 389,
          "bound": null
        },
        {
          "cond": "self.ast_literal_to_scalar(x)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 389,
          "bound": null
        },
        {
          "cond": "self.case_fold_char(x.span, ch)? matches None",
          "norm": null,
          "value": "true",
          "line": 391,
          "bound": null
        },
        {
          "cond": "self.case_fold_char(x.span, ch)? matches Some(expr)",
          "norm": null,
          "value": "true",
          "line": 391,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        4,
        23,
        24,
        25,
        28,
        33,
        36,
        37,
        40,
        43,
        46,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        242,
        267
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "*ast matches Ast::Literal(ref x)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::Literal(ref x)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "self.ast_literal_to_scalar(x)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 389,
          "bound": null
        },
        {
          "cond": "self.ast_literal_to_scalar(x)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 389,
          "bound": null
        },
        {
          "cond": "self.case_fold_char(x.span, ch)? matches None",
          "norm": null,
          "value": "true",
          "line": 391,
          "bound": null
        },
        {
          "cond": "self.case_fold_char(x.span, ch)? matches None",
          "norm": null,
          "value": "true",
          "line": 391,
          "bound": null
        },
        {
          "cond": "self.case_fold_char(x.span, ch)? matches None",
          "norm": null,
          "value": "true",
          "line": 391,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        4,
        23,
        24,
        25,
        28,
        33,
        36,
        37,
        40,
        43,
        45,
        47,
        48,
        52,
        53,
        54,
        55,
        56,
        242,
        267
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "*ast matches Ast::Flags(ref x)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::Flags(ref x)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        3,
        18,
        19,
        20,
        21,
        22,
        242,
        267
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "*ast matches Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 372,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        2,
        14,
        15,
        16,
        17,
        242,
        267
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}