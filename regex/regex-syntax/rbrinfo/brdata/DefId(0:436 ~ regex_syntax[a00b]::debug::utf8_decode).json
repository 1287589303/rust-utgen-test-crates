{
  "name": "regex_syntax::debug::utf8_decode",
  "mod_info": {
    "name": "debug",
    "loc": "regex-syntax/src/lib.rs:187:1:187:11"
  },
  "visible": true,
  "loc": "regex-syntax/src/debug.rs:77:1:107:2",
  "doc": "/// Decodes the next UTF-8 encoded codepoint from the given byte slice.\n///\n/// If no valid encoding of a codepoint exists at the beginning of the given\n/// byte slice, then the first byte is returned instead.\n///\n/// This returns `None` if and only if `bytes` is empty.\n",
  "code": [
    "pub(crate) fn utf8_decode(bytes: &[u8]) -> Option<Result<char, u8>> {",
    "    fn len(byte: u8) -> Option<usize> {",
    "        if byte <= 0x7F {",
    "            return Some(1);",
    "        } else if byte & 0b1100_0000 == 0b1000_0000 {",
    "            return None;",
    "        } else if byte <= 0b1101_1111 {",
    "            Some(2)",
    "        } else if byte <= 0b1110_1111 {",
    "            Some(3)",
    "        } else if byte <= 0b1111_0111 {",
    "            Some(4)",
    "        } else {",
    "            None",
    "        }",
    "    }",
    "",
    "    if bytes.is_empty() {",
    "        return None;",
    "    }",
    "    let len = match len(bytes[0]) {",
    "        None => return Some(Err(bytes[0])),",
    "        Some(len) if len > bytes.len() => return Some(Err(bytes[0])),",
    "        Some(1) => return Some(Ok(char::from(bytes[0]))),",
    "        Some(len) => len,",
    "    };",
    "    match core::str::from_utf8(&bytes[..len]) {",
    "        Ok(s) => Some(Ok(s.chars().next().unwrap())),",
    "        Err(_) => Some(Err(bytes[0])),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 6,
    "contra": 0,
    "min_set": 6
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "bytes.is_empty()",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        34
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "bytes.is_empty()",
          "norm": null,
          "value": "false",
          "line": 94,
          "bound": null
        },
        {
          "cond": "len(bytes[0]) matches Some(1) or Some(len) or Some(len)",
          "norm": null,
          "value": "true",
          "line": 97,
          "bound": null
        },
        {
          "cond": "len(bytes[0]) matches Some(len)",
          "norm": null,
          "value": "true",
          "line": 97,
          "bound": null
        },
        {
          "cond": "len > bytes.len()",
          "norm": "bytes.len() < len",
          "value": "true",
          "line": 99,
          "bound": null
        }
      ],
      "ret": "Some(Err(bytes[0]))",
      "path": [
        0,
        1,
        3,
        4,
        5,
        8,
        14,
        15,
        16,
        18,
        33,
        34
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "bytes.is_empty()",
          "norm": null,
          "value": "false",
          "line": 94,
          "bound": null
        },
        {
          "cond": "len(bytes[0]) matches Some(1) or Some(len) or Some(len)",
          "norm": null,
          "value": "true",
          "line": 97,
          "bound": null
        },
        {
          "cond": "len(bytes[0]) matches Some(len)",
          "norm": null,
          "value": "true",
          "line": 97,
          "bound": null
        },
        {
          "cond": "len > bytes.len()",
          "norm": "bytes.len() < len",
          "value": "false",
          "line": 99,
          "bound": "len == bytes.len()"
        },
        {
          "cond": "len(bytes[0]) matches None",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "len(bytes[0]) matches Some(1)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "len(bytes[0]) matches Some(len)",
          "norm": null,
          "value": "false",
          "line": 101,
          "bound": null
        },
        {
          "cond": "len(bytes[0]) matches Some(len)",
          "norm": null,
          "value": "false",
          "line": 99,
          "bound": null
        },
        {
          "cond": "core::str::from_utf8(&bytes[..len]) matches Err(_)",
          "norm": null,
          "value": "true",
          "line": 103,
          "bound": null
        }
      ],
      "ret": "Some(Err(bytes[0]))",
      "path": [
        0,
        1,
        3,
        4,
        5,
        8,
        14,
        15,
        17,
        9,
        10,
        22,
        23,
        26,
        31,
        32,
        34
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "bytes.is_empty()",
          "norm": null,
          "value": "false",
          "line": 94,
          "bound": null
        },
        {
          "cond": "len(bytes[0]) matches Some(1) or Some(len) or Some(len)",
          "norm": null,
          "value": "true",
          "line": 97,
          "bound": null
        },
        {
          "cond": "len(bytes[0]) matches Some(len)",
          "norm": null,
          "value": "true",
          "line": 97,
          "bound": null
        },
        {
          "cond": "len > bytes.len()",
          "norm": "bytes.len() < len",
          "value": "false",
          "line": 99,
          "bound": "len == bytes.len()"
        },
        {
          "cond": "len(bytes[0]) matches None",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "len(bytes[0]) matches Some(1)",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        },
        {
          "cond": "len(bytes[0]) matches Some(len)",
          "norm": null,
          "value": "false",
          "line": 101,
          "bound": null
        },
        {
          "cond": "len(bytes[0]) matches Some(len)",
          "norm": null,
          "value": "false",
          "line": 99,
          "bound": null
        },
        {
          "cond": "core::str::from_utf8(&bytes[..len]) matches Ok(s)",
          "norm": null,
          "value": "true",
          "line": 103,
          "bound": null
        },
        {
          "cond": "core::str::from_utf8(&bytes[..len]) matches Ok(s)",
          "norm": null,
          "value": "true",
          "line": 103,
          "bound": null
        }
      ],
      "ret": "Some(Ok(s.chars().next().unwrap()))",
      "path": [
        0,
        1,
        3,
        4,
        5,
        8,
        14,
        15,
        17,
        9,
        10,
        22,
        23,
        25,
        27,
        28,
        29,
        30,
        32,
        34
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "bytes.is_empty()",
          "norm": null,
          "value": "false",
          "line": 94,
          "bound": null
        },
        {
          "cond": "len(bytes[0]) matches Some(1) or Some(len) or Some(len)",
          "norm": null,
          "value": "true",
          "line": 97,
          "bound": null
        },
        {
          "cond": "len(bytes[0]) matches Some(len)",
          "norm": null,
          "value": "true",
          "line": 97,
          "bound": null
        },
        {
          "cond": "len > bytes.len()",
          "norm": "bytes.len() < len",
          "value": "false",
          "line": 99,
          "bound": "len == bytes.len()"
        },
        {
          "cond": "len(bytes[0]) matches Some(1) or Some(len) or Some(len)",
          "norm": null,
          "value": "true",
          "line": 97,
          "bound": null
        },
        {
          "cond": "len(bytes[0]) matches Some(1)",
          "norm": null,
          "value": "true",
          "line": 97,
          "bound": null
        }
      ],
      "ret": "Some(Ok(char::from(bytes[0])))",
      "path": [
        0,
        1,
        3,
        4,
        5,
        8,
        14,
        15,
        17,
        9,
        11,
        19,
        20,
        21,
        33,
        34
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "bytes.is_empty()",
          "norm": null,
          "value": "false",
          "line": 94,
          "bound": null
        },
        {
          "cond": "len(bytes[0]) matches None",
          "norm": null,
          "value": "true",
          "line": 97,
          "bound": null
        },
        {
          "cond": "len(bytes[0]) matches None",
          "norm": null,
          "value": "true",
          "line": 97,
          "bound": null
        }
      ],
      "ret": "Some(Err(bytes[0]))",
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        12,
        13,
        33,
        34
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}