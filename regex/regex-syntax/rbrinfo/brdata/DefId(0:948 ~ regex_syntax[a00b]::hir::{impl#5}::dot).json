{
  "name": "regex_syntax::hir::{impl#5}::dot",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:659:5:706:6",
  "doc": "/// Returns an HIR expression for `.`.\n///\n/// * [`Dot::AnyChar`] maps to `(?su-R:.)`.\n/// * [`Dot::AnyByte`] maps to `(?s-Ru:.)`.\n/// * [`Dot::AnyCharExceptLF`] maps to `(?u-Rs:.)`.\n/// * [`Dot::AnyCharExceptCRLF`] maps to `(?Ru-s:.)`.\n/// * [`Dot::AnyByteExceptLF`] maps to `(?-Rsu:.)`.\n/// * [`Dot::AnyByteExceptCRLF`] maps to `(?R-su:.)`.\n///\n/// # Example\n///\n/// Note that this is a convenience routine for constructing the correct\n/// character class based on the value of `Dot`. There is no explicit \"dot\"\n/// HIR value. It is just an abbreviation for a common character class.\n///\n/// ```\n/// use regex_syntax::hir::{Hir, Dot, Class, ClassBytes, ClassBytesRange};\n///\n/// let hir = Hir::dot(Dot::AnyByte);\n/// let expected = Hir::class(Class::Bytes(ClassBytes::new([\n///     ClassBytesRange::new(0x00, 0xFF),\n/// ])));\n/// assert_eq!(expected, hir);\n/// ```\n",
  "code": [
    "pub fn dot(dot: Dot) -> Hir {",
    "    match dot {",
    "        Dot::AnyChar => Hir::class(Class::Unicode(ClassUnicode::new([",
    "            ClassUnicodeRange::new('\\0', '\\u{10FFFF}'),",
    "        ]))),",
    "        Dot::AnyByte => Hir::class(Class::Bytes(ClassBytes::new([",
    "            ClassBytesRange::new(b'\\0', b'\\xFF'),",
    "        ]))),",
    "        Dot::AnyCharExcept(ch) => {",
    "            let mut cls =",
    "                ClassUnicode::new([ClassUnicodeRange::new(ch, ch)]);",
    "            cls.negate();",
    "            Hir::class(Class::Unicode(cls))",
    "        }",
    "        Dot::AnyCharExceptLF => {",
    "            Hir::class(Class::Unicode(ClassUnicode::new([",
    "                ClassUnicodeRange::new('\\0', '\\x09'),",
    "                ClassUnicodeRange::new('\\x0B', '\\u{10FFFF}'),",
    "            ])))",
    "        }",
    "        Dot::AnyCharExceptCRLF => {",
    "            Hir::class(Class::Unicode(ClassUnicode::new([",
    "                ClassUnicodeRange::new('\\0', '\\x09'),",
    "                ClassUnicodeRange::new('\\x0B', '\\x0C'),",
    "                ClassUnicodeRange::new('\\x0E', '\\u{10FFFF}'),",
    "            ])))",
    "        }",
    "        Dot::AnyByteExcept(byte) => {",
    "            let mut cls =",
    "                ClassBytes::new([ClassBytesRange::new(byte, byte)]);",
    "            cls.negate();",
    "            Hir::class(Class::Bytes(cls))",
    "        }",
    "        Dot::AnyByteExceptLF => {",
    "            Hir::class(Class::Bytes(ClassBytes::new([",
    "                ClassBytesRange::new(b'\\0', b'\\x09'),",
    "                ClassBytesRange::new(b'\\x0B', b'\\xFF'),",
    "            ])))",
    "        }",
    "        Dot::AnyByteExceptCRLF => {",
    "            Hir::class(Class::Bytes(ClassBytes::new([",
    "                ClassBytesRange::new(b'\\0', b'\\x09'),",
    "                ClassBytesRange::new(b'\\x0B', b'\\x0C'),",
    "                ClassBytesRange::new(b'\\x0E', b'\\xFF'),",
    "            ])))",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 8,
    "contra": 0,
    "min_set": 8
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "dot matches Dot::AnyByteExceptCRLF",
          "norm": null,
          "value": "true",
          "line": 660,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        9,
        53,
        54,
        55,
        56,
        57,
        58,
        59
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "dot matches Dot::AnyByteExceptLF",
          "norm": null,
          "value": "true",
          "line": 660,
          "bound": null
        },
        {
          "cond": "dot matches Dot::AnyByteExceptLF",
          "norm": null,
          "value": "true",
          "line": 660,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        8,
        47,
        48,
        49,
        50,
        51,
        52,
        59
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "dot matches Dot::AnyByteExcept(byte)",
          "norm": null,
          "value": "true",
          "line": 660,
          "bound": null
        },
        {
          "cond": "dot matches Dot::AnyByteExcept(byte)",
          "norm": null,
          "value": "true",
          "line": 660,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        7,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        59
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "dot matches Dot::AnyCharExceptCRLF",
          "norm": null,
          "value": "true",
          "line": 660,
          "bound": null
        },
        {
          "cond": "dot matches Dot::AnyCharExceptCRLF",
          "norm": null,
          "value": "true",
          "line": 660,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        6,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        59
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "dot matches Dot::AnyCharExceptLF",
          "norm": null,
          "value": "true",
          "line": 660,
          "bound": null
        },
        {
          "cond": "dot matches Dot::AnyCharExceptLF",
          "norm": null,
          "value": "true",
          "line": 660,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        27,
        28,
        29,
        30,
        31,
        32,
        59
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "dot matches Dot::AnyCharExcept(ch)",
          "norm": null,
          "value": "true",
          "line": 660,
          "bound": null
        },
        {
          "cond": "dot matches Dot::AnyCharExcept(ch)",
          "norm": null,
          "value": "true",
          "line": 660,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        59
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "dot matches Dot::AnyByte",
          "norm": null,
          "value": "true",
          "line": 660,
          "bound": null
        },
        {
          "cond": "dot matches Dot::AnyByte",
          "norm": null,
          "value": "true",
          "line": 660,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        15,
        16,
        17,
        18,
        19,
        59
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "dot matches Dot::AnyChar",
          "norm": null,
          "value": "true",
          "line": 660,
          "bound": null
        },
        {
          "cond": "dot matches Dot::AnyChar",
          "norm": null,
          "value": "true",
          "line": 660,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        10,
        11,
        12,
        13,
        14,
        59
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}