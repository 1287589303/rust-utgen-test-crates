{
  "name": "regex_syntax::hir::class_bytes",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": false,
  "loc": "regex-syntax/src/hir/mod.rs:2959:1:2973:2",
  "doc": "/// Given a sequence of HIR values where each value corresponds to a byte class\n/// (or an all-ASCII Unicode class), return a single byte class corresponding\n/// to the union of the classes found.\n",
  "code": [
    "fn class_bytes(hirs: &[Hir]) -> Option<Class> {",
    "    let mut cls = ClassBytes::new(vec![]);",
    "    for hir in hirs.iter() {",
    "        match *hir.kind() {",
    "            HirKind::Class(Class::Unicode(ref cls2)) => {",
    "                cls.union(&cls2.to_byte_class()?);",
    "            }",
    "            HirKind::Class(Class::Bytes(ref cls2)) => {",
    "                cls.union(cls2);",
    "            }",
    "            _ => return None,",
    "        };",
    "    }",
    "    Some(Class::Bytes(cls))",
    "}"
  ],
  "size": {
    "chain": 6,
    "contra": 2,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "hir in hirs.iter()",
          "norm": null,
          "value": "true",
          "line": 2961,
          "bound": null
        },
        {
          "cond": "*hir.kind() matches HirKind::Class(Class::Unicode(ref cls2))",
          "norm": null,
          "value": "false",
          "line": 2963,
          "bound": null
        },
        {
          "cond": "*hir.kind() matches HirKind::Class(Class::Bytes(ref cls2))",
          "norm": null,
          "value": "false",
          "line": 2966,
          "bound": null
        },
        {
          "cond": "*hir.kind() matches _",
          "norm": null,
          "value": "true",
          "line": 2969,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        12,
        13,
        36,
        37,
        38
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "hir in hirs.iter()",
          "norm": null,
          "value": "true",
          "line": 2961,
          "bound": null
        },
        {
          "cond": "*hir.kind() matches HirKind::Class(Class::Unicode(ref cls2)) or HirKind::Class(Class::Bytes(ref cls2))",
          "norm": null,
          "value": "true",
          "line": 2962,
          "bound": null
        },
        {
          "cond": "*hir.kind() matches HirKind::Class(Class::Unicode(ref cls2))",
          "norm": null,
          "value": "false",
          "line": 2963,
          "bound": null
        },
        {
          "cond": "*hir.kind() matches HirKind::Class(Class::Bytes(ref cls2))",
          "norm": null,
          "value": "false",
          "line": 2966,
          "bound": null
        },
        {
          "cond": "*hir.kind() matches _",
          "norm": null,
          "value": "true",
          "line": 2969,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        12,
        14,
        13,
        36,
        37,
        38
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "hir in hirs.iter()",
          "norm": null,
          "value": "true",
          "line": 2961,
          "bound": null
        },
        {
          "cond": "*hir.kind() matches HirKind::Class(Class::Unicode(ref cls2)) or HirKind::Class(Class::Bytes(ref cls2))",
          "norm": null,
          "value": "true",
          "line": 2962,
          "bound": null
        },
        {
          "cond": "*hir.kind() matches ",
          "norm": null,
          "value": "true",
          "line": 2962,
          "bound": null
        },
        {
          "cond": "*hir.kind() matches HirKind::Class(Class::Bytes(ref cls2))",
          "norm": null,
          "value": "true",
          "line": 2962,
          "bound": null
        },
        {
          "cond": "hir in hirs.iter()",
          "norm": null,
          "value": "false",
          "line": 2961,
          "bound": null
        }
      ],
      "ret": "Some(Class::Bytes(cls))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        12,
        14,
        16,
        29,
        30,
        31,
        5,
        6,
        7,
        9,
        11,
        32,
        33,
        34,
        38
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "hir in hirs.iter()",
          "norm": null,
          "value": "true",
          "line": 2961,
          "bound": null
        },
        {
          "cond": "*hir.kind() matches HirKind::Class(Class::Unicode(ref cls2)) or HirKind::Class(Class::Bytes(ref cls2))",
          "norm": null,
          "value": "true",
          "line": 2962,
          "bound": null
        },
        {
          "cond": "*hir.kind() matches ",
          "norm": null,
          "value": "true",
          "line": 2962,
          "bound": null
        },
        {
          "cond": "*hir.kind() matches HirKind::Class(Class::Unicode(ref cls2))",
          "norm": null,
          "value": "true",
          "line": 2962,
          "bound": null
        },
        {
          "cond": "cls2.to_byte_class()?",
          "norm": null,
          "value": "Err/None",
          "line": 2964,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        12,
        14,
        15,
        17,
        18,
        19,
        21,
        23,
        24,
        35,
        36,
        37,
        38
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "hir in hirs.iter()",
          "norm": null,
          "value": "true",
          "line": 2961,
          "bound": null
        },
        {
          "cond": "*hir.kind() matches HirKind::Class(Class::Unicode(ref cls2)) or HirKind::Class(Class::Bytes(ref cls2))",
          "norm": null,
          "value": "true",
          "line": 2962,
          "bound": null
        },
        {
          "cond": "*hir.kind() matches ",
          "norm": null,
          "value": "true",
          "line": 2962,
          "bound": null
        },
        {
          "cond": "*hir.kind() matches HirKind::Class(Class::Unicode(ref cls2))",
          "norm": null,
          "value": "true",
          "line": 2962,
          "bound": null
        },
        {
          "cond": "cls2.to_byte_class()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2964,
          "bound": null
        },
        {
          "cond": "hir in hirs.iter()",
          "norm": null,
          "value": "false",
          "line": 2961,
          "bound": null
        }
      ],
      "ret": "Some(Class::Bytes(cls))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        12,
        14,
        15,
        17,
        18,
        19,
        22,
        25,
        26,
        27,
        28,
        31,
        5,
        6,
        7,
        9,
        11,
        32,
        33,
        34,
        38
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "hir in hirs.iter()",
          "norm": null,
          "value": "false",
          "line": 2961,
          "bound": null
        }
      ],
      "ret": "Some(Class::Bytes(cls))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        11,
        32,
        33,
        34,
        38
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}