{
  "name": "regex_syntax::unicode::{impl#4}::mapping",
  "mod_info": {
    "name": "unicode",
    "loc": "regex-syntax/src/lib.rs:193:1:193:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/unicode.rs:124:5:160:6",
  "doc": "/// Return the equivalence class of case folded codepoints for the given\n/// codepoint. The equivalence class returned never includes the codepoint\n/// given. If the given codepoint has no case folded codepoints (i.e.,\n/// no entry in the underlying case folding table), then this returns an\n/// empty slice.\n///\n/// # Panics\n///\n/// This panics when called with a `c` that is less than or equal to the\n/// previous call. In other words, callers need to use this method with\n/// strictly increasing values of `c`.\n",
  "code": [
    "pub fn mapping(&mut self, c: char) -> &'static [char] {",
    "    if let Some(last) = self.last {",
    "        assert!(",
    "            last < c,",
    "            \"got codepoint U+{:X} which occurs before \\",
    "             last codepoint U+{:X}\",",
    "            u32::from(c),",
    "            u32::from(last),",
    "        );",
    "    }",
    "    self.last = Some(c);",
    "    if self.next >= self.table.len() {",
    "        return &[];",
    "    }",
    "    let (k, v) = self.table[self.next];",
    "    if k == c {",
    "        self.next += 1;",
    "        return v;",
    "    }",
    "    match self.get(c) {",
    "        Err(i) => {",
    "            self.next = i;",
    "            &[]",
    "        }",
    "        Ok(i) => {",
    "            // Since we require lookups to proceed",
    "            // in order, anything we find should be",
    "            // after whatever we thought might be",
    "            // next. Otherwise, the caller is either",
    "            // going out of order or we would have",
    "            // found our next key at 'self.next'.",
    "            assert!(i > self.next);",
    "            self.next = i + 1;",
    "            self.table[i].1",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 11,
    "contra": 0,
    "min_set": 6
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(last) = self.last",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "self.next >= self.table.len()",
          "norm": null,
          "value": "true",
          "line": 135,
          "bound": "self.next == self.table.len()"
        }
      ],
      "ret": "&[]",
      "path": [
        0,
        10,
        11,
        12,
        13,
        29,
        30
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(last) = self.last",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "self.next >= self.table.len()",
          "norm": null,
          "value": "false",
          "line": 135,
          "bound": null
        },
        {
          "cond": "k == c",
          "norm": "c == k",
          "value": "true",
          "line": 139,
          "bound": null
        }
      ],
      "ret": "v",
      "path": [
        0,
        10,
        11,
        12,
        14,
        15,
        16,
        17,
        29,
        30
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some(last) = self.last",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "self.next >= self.table.len()",
          "norm": null,
          "value": "false",
          "line": 135,
          "bound": null
        },
        {
          "cond": "k == c",
          "norm": "c == k",
          "value": "false",
          "line": 139,
          "bound": null
        },
        {
          "cond": "self.get(c) matches Err(i)",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "self.get(c) matches Err(i)",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        }
      ],
      "ret": "match self.get(c) {\n            Err(i) => {\n                self.next = i;\n                &[]\n            }\n            Ok(i) => {\n                // Since we require lookups to proceed\n                // in order, anything we find should be\n                // after whatever we thought might be\n                // next. Otherwise, the caller is either\n                // going out of order or we would have\n                // found our next key at 'self.next'.\n                assert!(i > self.next);\n                self.next = i + 1;\n                self.table[i].1\n            }\n        }",
      "path": [
        0,
        10,
        11,
        12,
        14,
        15,
        18,
        19,
        21,
        23,
        28,
        30
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "let Some(last) = self.last",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "self.next >= self.table.len()",
          "norm": null,
          "value": "false",
          "line": 135,
          "bound": null
        },
        {
          "cond": "k == c",
          "norm": "c == k",
          "value": "false",
          "line": 139,
          "bound": null
        },
        {
          "cond": "self.get(c) matches Ok(i)",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "i > self.next",
          "norm": null,
          "value": "true",
          "line": 155,
          "bound": null
        }
      ],
      "ret": "match self.get(c) {\n            Err(i) => {\n                self.next = i;\n                &[]\n            }\n            Ok(i) => {\n                // Since we require lookups to proceed\n                // in order, anything we find should be\n                // after whatever we thought might be\n                // next. Otherwise, the caller is either\n                // going out of order or we would have\n                // found our next key at 'self.next'.\n                assert!(i > self.next);\n                self.next = i + 1;\n                self.table[i].1\n            }\n        }",
      "path": [
        0,
        10,
        11,
        12,
        14,
        15,
        18,
        19,
        22,
        24,
        26,
        27,
        28,
        30
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "let Some(last) = self.last",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "self.next >= self.table.len()",
          "norm": null,
          "value": "false",
          "line": 135,
          "bound": null
        },
        {
          "cond": "k == c",
          "norm": "c == k",
          "value": "false",
          "line": 139,
          "bound": null
        },
        {
          "cond": "self.get(c) matches Ok(i)",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "i > self.next",
          "norm": null,
          "value": "false",
          "line": 155,
          "bound": "i == self.next"
        }
      ],
      "ret": null,
      "path": [
        0,
        10,
        11,
        12,
        14,
        15,
        18,
        19,
        22,
        25,
        31
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "let Some(last) = self.last",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "last < c",
          "norm": "c > last",
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "self.next >= self.table.len()",
          "norm": null,
          "value": "true",
          "line": 135,
          "bound": "self.next == self.table.len()"
        }
      ],
      "ret": "&[]",
      "path": [
        0,
        1,
        2,
        3,
        11,
        12,
        13,
        29,
        30
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "let Some(last) = self.last",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "last < c",
          "norm": "c > last",
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "self.next >= self.table.len()",
          "norm": null,
          "value": "false",
          "line": 135,
          "bound": null
        },
        {
          "cond": "k == c",
          "norm": "c == k",
          "value": "true",
          "line": 139,
          "bound": null
        }
      ],
      "ret": "v",
      "path": [
        0,
        1,
        2,
        3,
        11,
        12,
        14,
        15,
        16,
        17,
        29,
        30
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "let Some(last) = self.last",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "last < c",
          "norm": "c > last",
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "self.next >= self.table.len()",
          "norm": null,
          "value": "false",
          "line": 135,
          "bound": null
        },
        {
          "cond": "k == c",
          "norm": "c == k",
          "value": "false",
          "line": 139,
          "bound": null
        },
        {
          "cond": "self.get(c) matches Err(i)",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "self.get(c) matches Err(i)",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        }
      ],
      "ret": "match self.get(c) {\n            Err(i) => {\n                self.next = i;\n                &[]\n            }\n            Ok(i) => {\n                // Since we require lookups to proceed\n                // in order, anything we find should be\n                // after whatever we thought might be\n                // next. Otherwise, the caller is either\n                // going out of order or we would have\n                // found our next key at 'self.next'.\n                assert!(i > self.next);\n                self.next = i + 1;\n                self.table[i].1\n            }\n        }",
      "path": [
        0,
        1,
        2,
        3,
        11,
        12,
        14,
        15,
        18,
        19,
        21,
        23,
        28,
        30
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "let Some(last) = self.last",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "last < c",
          "norm": "c > last",
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "self.next >= self.table.len()",
          "norm": null,
          "value": "false",
          "line": 135,
          "bound": null
        },
        {
          "cond": "k == c",
          "norm": "c == k",
          "value": "false",
          "line": 139,
          "bound": null
        },
        {
          "cond": "self.get(c) matches Ok(i)",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "i > self.next",
          "norm": null,
          "value": "true",
          "line": 155,
          "bound": null
        }
      ],
      "ret": "match self.get(c) {\n            Err(i) => {\n                self.next = i;\n                &[]\n            }\n            Ok(i) => {\n                // Since we require lookups to proceed\n                // in order, anything we find should be\n                // after whatever we thought might be\n                // next. Otherwise, the caller is either\n                // going out of order or we would have\n                // found our next key at 'self.next'.\n                assert!(i > self.next);\n                self.next = i + 1;\n                self.table[i].1\n            }\n        }",
      "path": [
        0,
        1,
        2,
        3,
        11,
        12,
        14,
        15,
        18,
        19,
        22,
        24,
        26,
        27,
        28,
        30
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "let Some(last) = self.last",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "last < c",
          "norm": "c > last",
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "self.next >= self.table.len()",
          "norm": null,
          "value": "false",
          "line": 135,
          "bound": null
        },
        {
          "cond": "k == c",
          "norm": "c == k",
          "value": "false",
          "line": 139,
          "bound": null
        },
        {
          "cond": "self.get(c) matches Ok(i)",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "i > self.next",
          "norm": null,
          "value": "false",
          "line": 155,
          "bound": "i == self.next"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        11,
        12,
        14,
        15,
        18,
        19,
        22,
        25,
        31
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "let Some(last) = self.last",
          "norm": null,
          "value": "true",
          "line": 125,
          "bound": null
        },
        {
          "cond": "last < c",
          "norm": "c > last",
          "value": "false",
          "line": 127,
          "bound": "last == c"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        31
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}