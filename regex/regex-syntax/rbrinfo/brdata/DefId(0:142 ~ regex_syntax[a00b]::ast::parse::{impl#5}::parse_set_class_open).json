{
  "name": "regex_syntax::ast::parse::{impl#5}::parse_set_class_open",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:2022:5:2085:6",
  "doc": "/// Parses the opening of a character class set. This includes the opening\n/// bracket along with `^` if present to indicate negation. This also\n/// starts parsing the opening set of unioned items if applicable, since\n/// there are special rules applied to certain characters in the opening\n/// of a character class. For example, `[^]]` is the class of all\n/// characters not equal to `]`. (`]` would need to be escaped in any other\n/// position.) Similarly for `-`.\n///\n/// In all cases, the op inside the returned `ast::ClassBracketed` is an\n/// empty union. This empty union should be replaced with the actual item\n/// when it is popped from the parser's stack.\n///\n/// This assumes the parser is positioned at the opening `[` and advances\n/// the parser to the first non-special byte of the character class.\n///\n/// An error is returned if EOF is found.\n",
  "code": [
    "fn parse_set_class_open(",
    "    &self,",
    ") -> Result<(ast::ClassBracketed, ast::ClassSetUnion)> {",
    "    assert_eq!(self.char(), '[');",
    "    let start = self.pos();",
    "    if !self.bump_and_bump_space() {",
    "        return Err(self.error(",
    "            Span::new(start, self.pos()),",
    "            ast::ErrorKind::ClassUnclosed,",
    "        ));",
    "    }",
    "",
    "    let negated = if self.char() != '^' {",
    "        false",
    "    } else {",
    "        if !self.bump_and_bump_space() {",
    "            return Err(self.error(",
    "                Span::new(start, self.pos()),",
    "                ast::ErrorKind::ClassUnclosed,",
    "            ));",
    "        }",
    "        true",
    "    };",
    "    // Accept any number of `-` as literal `-`.",
    "    let mut union =",
    "        ast::ClassSetUnion { span: self.span(), items: vec![] };",
    "    while self.char() == '-' {",
    "        union.push(ast::ClassSetItem::Literal(ast::Literal {",
    "            span: self.span_char(),",
    "            kind: ast::LiteralKind::Verbatim,",
    "            c: '-',",
    "        }));",
    "        if !self.bump_and_bump_space() {",
    "            return Err(self.error(",
    "                Span::new(start, start),",
    "                ast::ErrorKind::ClassUnclosed,",
    "            ));",
    "        }",
    "    }",
    "    // If `]` is the *first* char in a set, then interpret it as a literal",
    "    // `]`. That is, an empty class is impossible to write.",
    "    if union.items.is_empty() && self.char() == ']' {",
    "        union.push(ast::ClassSetItem::Literal(ast::Literal {",
    "            span: self.span_char(),",
    "            kind: ast::LiteralKind::Verbatim,",
    "            c: ']',",
    "        }));",
    "        if !self.bump_and_bump_space() {",
    "            return Err(self.error(",
    "                Span::new(start, self.pos()),",
    "                ast::ErrorKind::ClassUnclosed,",
    "            ));",
    "        }",
    "    }",
    "    let set = ast::ClassBracketed {",
    "        span: Span::new(start, self.pos()),",
    "        negated,",
    "        kind: ast::ClassSet::union(ast::ClassSetUnion {",
    "            span: Span::new(union.span.start, union.span.start),",
    "            items: vec![],",
    "        }),",
    "    };",
    "    Ok((set, union))",
    "}"
  ],
  "size": {
    "chain": 21,
    "contra": 8,
    "min_set": 9
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2027,
          "bound": null
        },
        {
          "cond": "self.char() != '^'",
          "norm": "'^' != self.char()",
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "self.char() == '-'",
          "norm": "'-' == self.char()",
          "value": "false",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2054,
          "bound": null
        },
        {
          "cond": "self.char() == '-'",
          "norm": "'-' == self.char()",
          "value": "true",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "union.items.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2063,
          "bound": null
        },
        {
          "cond": "self.char() == ']'",
          "norm": "']' == self.char()",
          "value": "false",
          "line": 2063,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2069,
          "bound": null
        }
      ],
      "ret": "Ok((set, union))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        13,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        26,
        27,
        28,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        72
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2027,
          "bound": null
        },
        {
          "cond": "self.char() != '^'",
          "norm": "'^' != self.char()",
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "self.char() == '-'",
          "norm": "'-' == self.char()",
          "value": "false",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2054,
          "bound": null
        },
        {
          "cond": "self.char() == '-'",
          "norm": "'-' == self.char()",
          "value": "true",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "union.items.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2063,
          "bound": null
        },
        {
          "cond": "self.char() == ']'",
          "norm": "']' == self.char()",
          "value": "false",
          "line": 2063,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 2069,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                    Span::new(start, self.pos()),\n                    ast::ErrorKind::ClassUnclosed,\n                ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        13,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        26,
        27,
        28,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        47,
        48,
        49,
        50,
        51,
        68,
        69,
        70,
        71,
        72
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2027,
          "bound": null
        },
        {
          "cond": "self.char() != '^'",
          "norm": "'^' != self.char()",
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "self.char() == '-'",
          "norm": "'-' == self.char()",
          "value": "false",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2054,
          "bound": null
        },
        {
          "cond": "self.char() == '-'",
          "norm": "'-' == self.char()",
          "value": "true",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "union.items.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2063,
          "bound": null
        },
        {
          "cond": "self.char() == ']'",
          "norm": "']' == self.char()",
          "value": "true",
          "line": 2063,
          "bound": null
        }
      ],
      "ret": "Ok((set, union))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        13,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        26,
        27,
        28,
        38,
        39,
        40,
        41,
        52,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        72
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2027,
          "bound": null
        },
        {
          "cond": "self.char() != '^'",
          "norm": "'^' != self.char()",
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "self.char() == '-'",
          "norm": "'-' == self.char()",
          "value": "false",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2054,
          "bound": null
        },
        {
          "cond": "self.char() == '-'",
          "norm": "'-' == self.char()",
          "value": "true",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "union.items.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2063,
          "bound": null
        }
      ],
      "ret": "Ok((set, union))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        13,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        26,
        27,
        28,
        38,
        39,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        72
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2027,
          "bound": null
        },
        {
          "cond": "self.char() != '^'",
          "norm": "'^' != self.char()",
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "self.char() == '-'",
          "norm": "'-' == self.char()",
          "value": "false",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 2054,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                    Span::new(start, start),\n                    ast::ErrorKind::ClassUnclosed,\n                ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        13,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        34,
        35,
        36,
        37,
        68,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2027,
          "bound": null
        },
        {
          "cond": "self.char() != '^'",
          "norm": "'^' != self.char()",
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "self.char() == '-'",
          "norm": "'-' == self.char()",
          "value": "true",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "union.items.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2063,
          "bound": null
        },
        {
          "cond": "self.char() == ']'",
          "norm": "']' == self.char()",
          "value": "false",
          "line": 2063,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2069,
          "bound": null
        }
      ],
      "ret": "Ok((set, union))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        13,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2027,
          "bound": null
        },
        {
          "cond": "self.char() != '^'",
          "norm": "'^' != self.char()",
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "self.char() == '-'",
          "norm": "'-' == self.char()",
          "value": "true",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "union.items.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2063,
          "bound": null
        },
        {
          "cond": "self.char() == ']'",
          "norm": "']' == self.char()",
          "value": "false",
          "line": 2063,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 2069,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                    Span::new(start, self.pos()),\n                    ast::ErrorKind::ClassUnclosed,\n                ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        13,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        47,
        48,
        49,
        50,
        51,
        68,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2027,
          "bound": null
        },
        {
          "cond": "self.char() != '^'",
          "norm": "'^' != self.char()",
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "self.char() == '-'",
          "norm": "'-' == self.char()",
          "value": "true",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "union.items.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2063,
          "bound": null
        },
        {
          "cond": "self.char() == ']'",
          "norm": "']' == self.char()",
          "value": "true",
          "line": 2063,
          "bound": null
        }
      ],
      "ret": "Ok((set, union))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        13,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        38,
        39,
        40,
        41,
        52,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2027,
          "bound": null
        },
        {
          "cond": "self.char() != '^'",
          "norm": "'^' != self.char()",
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "self.char() == '-'",
          "norm": "'-' == self.char()",
          "value": "true",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "union.items.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2063,
          "bound": null
        }
      ],
      "ret": "Ok((set, union))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        13,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        38,
        39,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2027,
          "bound": null
        },
        {
          "cond": "self.char() != '^'",
          "norm": "'^' != self.char()",
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2037,
          "bound": null
        },
        {
          "cond": "self.char() == '-'",
          "norm": "'-' == self.char()",
          "value": "false",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2054,
          "bound": null
        },
        {
          "cond": "self.char() == '-'",
          "norm": "'-' == self.char()",
          "value": "true",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "union.items.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2063,
          "bound": null
        },
        {
          "cond": "self.char() == ']'",
          "norm": "']' == self.char()",
          "value": "false",
          "line": 2063,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2069,
          "bound": null
        }
      ],
      "ret": "Ok((set, union))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        14,
        15,
        16,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        26,
        27,
        28,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        72
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2027,
          "bound": null
        },
        {
          "cond": "self.char() != '^'",
          "norm": "'^' != self.char()",
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2037,
          "bound": null
        },
        {
          "cond": "self.char() == '-'",
          "norm": "'-' == self.char()",
          "value": "false",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2054,
          "bound": null
        },
        {
          "cond": "self.char() == '-'",
          "norm": "'-' == self.char()",
          "value": "true",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "union.items.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2063,
          "bound": null
        },
        {
          "cond": "self.char() == ']'",
          "norm": "']' == self.char()",
          "value": "false",
          "line": 2063,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 2069,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                    Span::new(start, self.pos()),\n                    ast::ErrorKind::ClassUnclosed,\n                ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        14,
        15,
        16,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        26,
        27,
        28,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        47,
        48,
        49,
        50,
        51,
        68,
        69,
        70,
        71,
        72
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2027,
          "bound": null
        },
        {
          "cond": "self.char() != '^'",
          "norm": "'^' != self.char()",
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2037,
          "bound": null
        },
        {
          "cond": "self.char() == '-'",
          "norm": "'-' == self.char()",
          "value": "false",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2054,
          "bound": null
        },
        {
          "cond": "self.char() == '-'",
          "norm": "'-' == self.char()",
          "value": "true",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "union.items.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2063,
          "bound": null
        },
        {
          "cond": "self.char() == ']'",
          "norm": "']' == self.char()",
          "value": "true",
          "line": 2063,
          "bound": null
        }
      ],
      "ret": "Ok((set, union))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        14,
        15,
        16,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        26,
        27,
        28,
        38,
        39,
        40,
        41,
        52,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        72
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2027,
          "bound": null
        },
        {
          "cond": "self.char() != '^'",
          "norm": "'^' != self.char()",
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2037,
          "bound": null
        },
        {
          "cond": "self.char() == '-'",
          "norm": "'-' == self.char()",
          "value": "false",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2054,
          "bound": null
        },
        {
          "cond": "self.char() == '-'",
          "norm": "'-' == self.char()",
          "value": "true",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "union.items.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2063,
          "bound": null
        }
      ],
      "ret": "Ok((set, union))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        14,
        15,
        16,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        26,
        27,
        28,
        38,
        39,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        72
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2027,
          "bound": null
        },
        {
          "cond": "self.char() != '^'",
          "norm": "'^' != self.char()",
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2037,
          "bound": null
        },
        {
          "cond": "self.char() == '-'",
          "norm": "'-' == self.char()",
          "value": "false",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 2054,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                    Span::new(start, start),\n                    ast::ErrorKind::ClassUnclosed,\n                ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        14,
        15,
        16,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        34,
        35,
        36,
        37,
        68,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2027,
          "bound": null
        },
        {
          "cond": "self.char() != '^'",
          "norm": "'^' != self.char()",
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2037,
          "bound": null
        },
        {
          "cond": "self.char() == '-'",
          "norm": "'-' == self.char()",
          "value": "true",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "union.items.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2063,
          "bound": null
        },
        {
          "cond": "self.char() == ']'",
          "norm": "']' == self.char()",
          "value": "false",
          "line": 2063,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2069,
          "bound": null
        }
      ],
      "ret": "Ok((set, union))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        14,
        15,
        16,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        72
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2027,
          "bound": null
        },
        {
          "cond": "self.char() != '^'",
          "norm": "'^' != self.char()",
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2037,
          "bound": null
        },
        {
          "cond": "self.char() == '-'",
          "norm": "'-' == self.char()",
          "value": "true",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "union.items.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2063,
          "bound": null
        },
        {
          "cond": "self.char() == ']'",
          "norm": "']' == self.char()",
          "value": "false",
          "line": 2063,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 2069,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                    Span::new(start, self.pos()),\n                    ast::ErrorKind::ClassUnclosed,\n                ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        14,
        15,
        16,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        47,
        48,
        49,
        50,
        51,
        68,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2027,
          "bound": null
        },
        {
          "cond": "self.char() != '^'",
          "norm": "'^' != self.char()",
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2037,
          "bound": null
        },
        {
          "cond": "self.char() == '-'",
          "norm": "'-' == self.char()",
          "value": "true",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "union.items.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2063,
          "bound": null
        },
        {
          "cond": "self.char() == ']'",
          "norm": "']' == self.char()",
          "value": "true",
          "line": 2063,
          "bound": null
        }
      ],
      "ret": "Ok((set, union))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        14,
        15,
        16,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        38,
        39,
        40,
        41,
        52,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        72
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2027,
          "bound": null
        },
        {
          "cond": "self.char() != '^'",
          "norm": "'^' != self.char()",
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2037,
          "bound": null
        },
        {
          "cond": "self.char() == '-'",
          "norm": "'-' == self.char()",
          "value": "true",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "union.items.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2063,
          "bound": null
        }
      ],
      "ret": "Ok((set, union))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        14,
        15,
        16,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        38,
        39,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        72
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2027,
          "bound": null
        },
        {
          "cond": "self.char() != '^'",
          "norm": "'^' != self.char()",
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 2037,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                    Span::new(start, self.pos()),\n                    ast::ErrorKind::ClassUnclosed,\n                ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        14,
        15,
        17,
        18,
        19,
        20,
        21,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 2027,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(start, self.pos()),\n                ast::ErrorKind::ClassUnclosed,\n            ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        71,
        72
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        80
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}