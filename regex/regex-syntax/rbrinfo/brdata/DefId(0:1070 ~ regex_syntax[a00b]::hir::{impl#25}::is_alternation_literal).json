{
  "name": "regex_syntax::hir::{impl#25}::is_alternation_literal",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:2229:5:2231:6",
  "doc": "/// Return true if and only if this HIR is either a simple literal or an\n/// alternation of simple literals. This is only\n/// true when this HIR expression is either itself a `Literal` or a\n/// concatenation of only `Literal`s or an alternation of only `Literal`s.\n///\n/// For example, `f`, `foo`, `a|b|c`, and `foo|bar|baz` are alternation\n/// literals, but `f+`, `(foo)`, `foo()`, and the empty pattern are not\n/// (even though that contain sub-expressions that are literals).\n",
  "code": [
    "pub fn is_alternation_literal(&self) -> bool {",
    "    self.0.alternation_literal",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self.0.alternation_literal",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}