{
  "name": "regex_syntax::ast::parse::{impl#4}::span_char",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:642:5:653:6",
  "doc": "/// Create a span that covers the current character.\n",
  "code": [
    "fn span_char(&self) -> Span {",
    "    let mut next = Position {",
    "        offset: self.offset().checked_add(self.char().len_utf8()).unwrap(),",
    "        line: self.line(),",
    "        column: self.column().checked_add(1).unwrap(),",
    "    };",
    "    if self.char() == '\\n' {",
    "        next.line += 1;",
    "        next.column = 1;",
    "    }",
    "    Span::new(self.pos(), next)",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.char() == '\\n'",
          "norm": "'\\n' == self.char()",
          "value": "false",
          "line": 648,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        15,
        16
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.char() == '\\n'",
          "norm": "'\\n' == self.char()",
          "value": "true",
          "line": 648,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        14,
        15,
        16
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}