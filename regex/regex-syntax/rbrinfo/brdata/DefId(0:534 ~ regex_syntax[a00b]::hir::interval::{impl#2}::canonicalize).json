{
  "name": "regex_syntax::hir::interval::{impl#2}::canonicalize",
  "mod_info": {
    "name": "hir::interval",
    "loc": "regex-syntax/src/hir/mod.rs:41:1:41:14"
  },
  "visible": false,
  "loc": "regex-syntax/src/hir/interval.rs:343:5:368:6",
  "doc": "/// Converts this set into a canonical ordering.\n",
  "code": [
    "fn canonicalize(&mut self) {",
    "    if self.is_canonical() {",
    "        return;",
    "    }",
    "    self.ranges.sort();",
    "    assert!(!self.ranges.is_empty());",
    "",
    "    // Is there a way to do this in-place with constant memory? I couldn't",
    "    // figure out a way to do it. So just append the canonicalization to",
    "    // the end of this range, and then drain it before we're done.",
    "    let drain_end = self.ranges.len();",
    "    for oldi in 0..drain_end {",
    "        // If we've added at least one new range, then check if we can",
    "        // merge this range in the previously added range.",
    "        if self.ranges.len() > drain_end {",
    "            let (last, rest) = self.ranges.split_last_mut().unwrap();",
    "            if let Some(union) = last.union(&rest[oldi]) {",
    "                *last = union;",
    "                continue;",
    "            }",
    "        }",
    "        let range = self.ranges[oldi];",
    "        self.ranges.push(range);",
    "    }",
    "    self.ranges.drain(..drain_end);",
    "}"
  ],
  "size": {
    "chain": 6,
    "contra": 3,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.is_canonical()",
          "norm": null,
          "value": "true",
          "line": 344,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        34
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.is_canonical()",
          "norm": null,
          "value": "false",
          "line": 344,
          "bound": null
        },
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        35
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.is_canonical()",
          "norm": null,
          "value": "false",
          "line": 344,
          "bound": null
        },
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 348,
          "bound": null
        },
        {
          "cond": "oldi in 0..drain_end",
          "norm": null,
          "value": "true",
          "line": 354,
          "bound": null
        },
        {
          "cond": "self.ranges.len() > drain_end",
          "norm": "drain_end < self.ranges.len()",
          "value": "true",
          "line": 357,
          "bound": null
        },
        {
          "cond": "let Some(union) = last.union(&rest[oldi])",
          "norm": null,
          "value": "true",
          "line": 359,
          "bound": null
        },
        {
          "cond": "oldi in 0..drain_end",
          "norm": null,
          "value": "false",
          "line": 354,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        8,
        9,
        10,
        11,
        12,
        13,
        16,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        27,
        29,
        30,
        31,
        11,
        12,
        13,
        15,
        17,
        32,
        33,
        34
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.is_canonical()",
          "norm": null,
          "value": "false",
          "line": 344,
          "bound": null
        },
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 348,
          "bound": null
        },
        {
          "cond": "oldi in 0..drain_end",
          "norm": null,
          "value": "true",
          "line": 354,
          "bound": null
        },
        {
          "cond": "self.ranges.len() > drain_end",
          "norm": "drain_end < self.ranges.len()",
          "value": "true",
          "line": 357,
          "bound": null
        },
        {
          "cond": "let Some(union) = last.union(&rest[oldi])",
          "norm": null,
          "value": "true",
          "line": 359,
          "bound": null
        },
        {
          "cond": "oldi in 0..drain_end",
          "norm": null,
          "value": "false",
          "line": 354,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        8,
        9,
        10,
        11,
        12,
        13,
        16,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        11,
        12,
        13,
        15,
        17,
        32,
        33,
        34
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.is_canonical()",
          "norm": null,
          "value": "false",
          "line": 344,
          "bound": null
        },
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 348,
          "bound": null
        },
        {
          "cond": "oldi in 0..drain_end",
          "norm": null,
          "value": "true",
          "line": 354,
          "bound": null
        },
        {
          "cond": "self.ranges.len() > drain_end",
          "norm": "drain_end < self.ranges.len()",
          "value": "false",
          "line": 357,
          "bound": "self.ranges.len() == drain_end"
        },
        {
          "cond": "oldi in 0..drain_end",
          "norm": null,
          "value": "false",
          "line": 354,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        8,
        9,
        10,
        11,
        12,
        13,
        16,
        18,
        28,
        29,
        30,
        31,
        11,
        12,
        13,
        15,
        17,
        32,
        33,
        34
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.is_canonical()",
          "norm": null,
          "value": "false",
          "line": 344,
          "bound": null
        },
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 348,
          "bound": null
        },
        {
          "cond": "oldi in 0..drain_end",
          "norm": null,
          "value": "false",
          "line": 354,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        17,
        32,
        33,
        34
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}