{
  "name": "regex_syntax::hir::interval::{impl#2}::symmetric_difference",
  "mod_info": {
    "name": "hir::interval",
    "loc": "regex-syntax/src/hir/mod.rs:41:1:41:14"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/interval.rs:284:5:290:6",
  "doc": "/// Compute the symmetric difference of the two sets, in place.\n///\n/// This computes the symmetric difference of two interval sets. This\n/// removes all elements in this set that are also in the given set,\n/// but also adds all elements from the given set that aren't in this\n/// set. That is, the set will contain all elements in either set,\n/// but will not contain any elements that are in both sets.\n",
  "code": [
    "pub fn symmetric_difference(&mut self, other: &IntervalSet<I>) {",
    "    // TODO(burntsushi): Fix this so that it amortizes allocation.",
    "    let mut intersection = self.clone();",
    "    intersection.intersect(other);",
    "    self.union(other);",
    "    self.difference(&intersection);",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}