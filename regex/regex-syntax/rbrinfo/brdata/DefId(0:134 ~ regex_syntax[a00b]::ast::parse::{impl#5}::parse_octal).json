{
  "name": "regex_syntax::ast::parse::{impl#5}::parse_octal",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:1682:5:1706:6",
  "doc": "/// Parse an octal representation of a Unicode codepoint up to 3 digits\n/// long. This expects the parser to be positioned at the first octal\n/// digit and advances the parser to the first character immediately\n/// following the octal number. This also assumes that parsing octal\n/// escapes is enabled.\n///\n/// Assuming the preconditions are met, this routine can never fail.\n",
  "code": [
    "fn parse_octal(&self) -> ast::Literal {",
    "    assert!(self.parser().octal);",
    "    assert!('0' <= self.char() && self.char() <= '7');",
    "    let start = self.pos();",
    "    // Parse up to two more digits.",
    "    while self.bump()",
    "        && '0' <= self.char()",
    "        && self.char() <= '7'",
    "        && self.pos().offset - start.offset <= 2",
    "    {}",
    "    let end = self.pos();",
    "    let octal = &self.pattern()[start.offset..end.offset];",
    "    // Parsing the octal should never fail since the above guarantees a",
    "    // valid number.",
    "    let codepoint =",
    "        u32::from_str_radix(octal, 8).expect(\"valid octal number\");",
    "    // The max value for 3 digit octal is 0777 = 511 and [0, 511] has no",
    "    // invalid Unicode scalar values.",
    "    let c = char::from_u32(codepoint).expect(\"Unicode scalar value\");",
    "    ast::Literal {",
    "        span: Span::new(start, end),",
    "        kind: ast::LiteralKind::Octal,",
    "        c,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 8,
    "contra": 1,
    "min_set": 8
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.parser().octal",
          "norm": null,
          "value": "true",
          "line": 1683,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 1684,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '7'",
          "norm": "'7' >= self.char()",
          "value": "true",
          "line": 1684,
          "bound": "self.char() == '7'"
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 1687,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 1688,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '7'",
          "norm": "'7' >= self.char()",
          "value": "true",
          "line": 1689,
          "bound": "self.char() == '7'"
        },
        {
          "cond": "self.pos().offset - start.offset <= 2",
          "norm": "2 >= self.pos().offset - start.offset",
          "value": "true",
          "line": 1690,
          "bound": "self.pos().offset - start.offset == 2"
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "false",
          "line": 1687,
          "bound": null
        }
      ],
      "ret": "ast::Literal {\n            span: Span::new(start, end),\n            kind: ast::LiteralKind::Octal,\n            c,\n        }",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        12,
        13,
        14,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.parser().octal",
          "norm": null,
          "value": "true",
          "line": 1683,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 1684,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '7'",
          "norm": "'7' >= self.char()",
          "value": "true",
          "line": 1684,
          "bound": "self.char() == '7'"
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 1687,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 1688,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '7'",
          "norm": "'7' >= self.char()",
          "value": "true",
          "line": 1689,
          "bound": "self.char() == '7'"
        },
        {
          "cond": "self.pos().offset - start.offset <= 2",
          "norm": "2 >= self.pos().offset - start.offset",
          "value": "false",
          "line": 1690,
          "bound": null
        }
      ],
      "ret": "ast::Literal {\n            span: Span::new(start, end),\n            kind: ast::LiteralKind::Octal,\n            c,\n        }",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        23,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.parser().octal",
          "norm": null,
          "value": "true",
          "line": 1683,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 1684,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '7'",
          "norm": "'7' >= self.char()",
          "value": "true",
          "line": 1684,
          "bound": "self.char() == '7'"
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 1687,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 1688,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '7'",
          "norm": "'7' >= self.char()",
          "value": "false",
          "line": 1689,
          "bound": null
        }
      ],
      "ret": "ast::Literal {\n            span: Span::new(start, end),\n            kind: ast::LiteralKind::Octal,\n            c,\n        }",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        24,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.parser().octal",
          "norm": null,
          "value": "true",
          "line": 1683,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 1684,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '7'",
          "norm": "'7' >= self.char()",
          "value": "true",
          "line": 1684,
          "bound": "self.char() == '7'"
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 1687,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "false",
          "line": 1688,
          "bound": null
        }
      ],
      "ret": "ast::Literal {\n            span: Span::new(start, end),\n            kind: ast::LiteralKind::Octal,\n            c,\n        }",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        11,
        12,
        13,
        14,
        15,
        16,
        25,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.parser().octal",
          "norm": null,
          "value": "true",
          "line": 1683,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 1684,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '7'",
          "norm": "'7' >= self.char()",
          "value": "true",
          "line": 1684,
          "bound": "self.char() == '7'"
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "false",
          "line": 1687,
          "bound": null
        }
      ],
      "ret": "ast::Literal {\n            span: Span::new(start, end),\n            kind: ast::LiteralKind::Octal,\n            c,\n        }",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        11,
        12,
        13,
        14,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.parser().octal",
          "norm": null,
          "value": "true",
          "line": 1683,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 1684,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '7'",
          "norm": "'7' >= self.char()",
          "value": "false",
          "line": 1684,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        8,
        10,
        36
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.parser().octal",
          "norm": null,
          "value": "true",
          "line": 1683,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "false",
          "line": 1684,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        9,
        10,
        36
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.parser().octal",
          "norm": null,
          "value": "false",
          "line": 1683,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        36
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}