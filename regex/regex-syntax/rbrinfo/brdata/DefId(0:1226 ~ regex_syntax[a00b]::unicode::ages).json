{
  "name": "regex_syntax::unicode::ages",
  "mod_info": {
    "name": "unicode",
    "loc": "regex-syntax/src/lib.rs:193:1:193:13"
  },
  "visible": false,
  "loc": "regex-syntax/src/unicode.rs:641:1:691:2",
  "doc": "/// Returns an iterator over Unicode Age sets. Each item corresponds to a set\n/// of codepoints that were added in a particular revision of Unicode. The\n/// iterator yields items in chronological order.\n///\n/// If the given age value isn't valid or if the data isn't available, then an\n/// error is returned instead.\n",
  "code": [
    "fn ages(canonical_age: &str) -> Result<impl Iterator<Item = Range>, Error> {",
    "    #[cfg(not(feature = \"unicode-age\"))]",
    "    fn imp(_: &str) -> Result<impl Iterator<Item = Range>, Error> {",
    "        use core::option::IntoIter;",
    "        Err::<IntoIter<Range>, _>(Error::PropertyNotFound)",
    "    }",
    "",
    "    #[cfg(feature = \"unicode-age\")]",
    "    fn imp(canonical_age: &str) -> Result<impl Iterator<Item = Range>, Error> {",
    "        use crate::unicode_tables::age;",
    "",
    "        const AGES: &[(&str, Range)] = &[",
    "            (\"V1_1\", age::V1_1),",
    "            (\"V2_0\", age::V2_0),",
    "            (\"V2_1\", age::V2_1),",
    "            (\"V3_0\", age::V3_0),",
    "            (\"V3_1\", age::V3_1),",
    "            (\"V3_2\", age::V3_2),",
    "            (\"V4_0\", age::V4_0),",
    "            (\"V4_1\", age::V4_1),",
    "            (\"V5_0\", age::V5_0),",
    "            (\"V5_1\", age::V5_1),",
    "            (\"V5_2\", age::V5_2),",
    "            (\"V6_0\", age::V6_0),",
    "            (\"V6_1\", age::V6_1),",
    "            (\"V6_2\", age::V6_2),",
    "            (\"V6_3\", age::V6_3),",
    "            (\"V7_0\", age::V7_0),",
    "            (\"V8_0\", age::V8_0),",
    "            (\"V9_0\", age::V9_0),",
    "            (\"V10_0\", age::V10_0),",
    "            (\"V11_0\", age::V11_0),",
    "            (\"V12_0\", age::V12_0),",
    "            (\"V12_1\", age::V12_1),",
    "            (\"V13_0\", age::V13_0),",
    "            (\"V14_0\", age::V14_0),",
    "            (\"V15_0\", age::V15_0),",
    "            (\"V15_1\", age::V15_1),",
    "            (\"V16_0\", age::V16_0),",
    "        ];",
    "        assert_eq!(AGES.len(), age::BY_NAME.len(), \"ages are out of sync\");",
    "",
    "        let pos = AGES.iter().position(|&(age, _)| canonical_age == age);",
    "        match pos {",
    "            None => Err(Error::PropertyValueNotFound),",
    "            Some(i) => Ok(AGES[..=i].iter().map(|&(_, classes)| classes)),",
    "        }",
    "    }",
    "",
    "    imp(canonical_age)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}