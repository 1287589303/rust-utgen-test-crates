{
  "name": "regex_syntax::hir::{impl#5}::fail",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:279:5:286:6",
  "doc": "/// Returns an HIR expression that can never match anything. That is,\n/// the size of the set of strings in the language described by the HIR\n/// returned is `0`.\n///\n/// This is distinct from [`Hir::empty`] in that the empty string matches\n/// the HIR returned by `Hir::empty`. That is, the set of strings in the\n/// language describe described by `Hir::empty` is non-empty.\n///\n/// Note that currently, the HIR returned uses an empty character class to\n/// indicate that nothing can match. An equivalent expression that cannot\n/// match is an empty alternation, but all such \"fail\" expressions are\n/// normalized (via smart constructors) to empty character classes. This is\n/// because empty character classes can be spelled in the concrete syntax\n/// of a regex (e.g., `\\P{any}` or `(?-u:[^\\x00-\\xFF])` or `[a&&b]`), but\n/// empty alternations cannot.\n",
  "code": [
    "pub fn fail() -> Hir {",
    "    let class = Class::Bytes(ClassBytes::empty());",
    "    let props = Properties::class(&class);",
    "    // We can't just call Hir::class here because it defers to Hir::fail",
    "    // in order to canonicalize the Hir value used to represent \"cannot",
    "    // match.\"",
    "    Hir { kind: HirKind::Class(class), props }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Hir { kind: HirKind::Class(class), props }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}