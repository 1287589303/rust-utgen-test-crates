{
  "name": "regex_syntax::hir::interval::{impl#2}::intersect",
  "mod_info": {
    "name": "hir::interval",
    "loc": "regex-syntax/src/hir/mod.rs:41:1:41:14"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/interval.rs:144:5:182:6",
  "doc": "/// Intersect this set with the given set, in place.\n",
  "code": [
    "pub fn intersect(&mut self, other: &IntervalSet<I>) {",
    "    if self.ranges.is_empty() {",
    "        return;",
    "    }",
    "    if other.ranges.is_empty() {",
    "        self.ranges.clear();",
    "        // An empty set is case folded.",
    "        self.folded = true;",
    "        return;",
    "    }",
    "",
    "    // There should be a way to do this in-place with constant memory,",
    "    // but I couldn't figure out a simple way to do it. So just append",
    "    // the intersection to the end of this range, and then drain it before",
    "    // we're done.",
    "    let drain_end = self.ranges.len();",
    "",
    "    let mut ita = 0..drain_end;",
    "    let mut itb = 0..other.ranges.len();",
    "    let mut a = ita.next().unwrap();",
    "    let mut b = itb.next().unwrap();",
    "    loop {",
    "        if let Some(ab) = self.ranges[a].intersect(&other.ranges[b]) {",
    "            self.ranges.push(ab);",
    "        }",
    "        let (it, aorb) =",
    "            if self.ranges[a].upper() < other.ranges[b].upper() {",
    "                (&mut ita, &mut a)",
    "            } else {",
    "                (&mut itb, &mut b)",
    "            };",
    "        match it.next() {",
    "            Some(v) => *aorb = v,",
    "            None => break,",
    "        }",
    "    }",
    "    self.ranges.drain(..drain_end);",
    "    self.folded = self.folded && other.folded;",
    "}"
  ],
  "size": {
    "chain": 18,
    "contra": 8,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "true",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 148,
          "bound": null
        },
        {
          "cond": "let Some(ab) = self.ranges[a].intersect(&other.ranges[b])",
          "norm": null,
          "value": "true",
          "line": 166,
          "bound": null
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].upper()",
          "norm": "other.ranges[b].upper() > self.ranges[a].upper()",
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "it.next() matches Some(v)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "it.next() matches Some(v)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Some(ab) = self.ranges[a].intersect(&other.ranges[b])",
          "norm": null,
          "value": "true",
          "line": 166,
          "bound": null
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].upper()",
          "norm": "other.ranges[b].upper() > self.ranges[a].upper()",
          "value": "false",
          "line": 170,
          "bound": "self.ranges[a].upper() == other.ranges[b].upper()"
        },
        {
          "cond": "it.next() matches None",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 181,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        31,
        32,
        34,
        36,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        23,
        24,
        25,
        26,
        27,
        28,
        30,
        31,
        32,
        35,
        37,
        38,
        39,
        41,
        42
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 148,
          "bound": null
        },
        {
          "cond": "let Some(ab) = self.ranges[a].intersect(&other.ranges[b])",
          "norm": null,
          "value": "true",
          "line": 166,
          "bound": null
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].upper()",
          "norm": "other.ranges[b].upper() > self.ranges[a].upper()",
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "it.next() matches Some(v)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "it.next() matches Some(v)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Some(ab) = self.ranges[a].intersect(&other.ranges[b])",
          "norm": null,
          "value": "true",
          "line": 166,
          "bound": null
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].upper()",
          "norm": "other.ranges[b].upper() > self.ranges[a].upper()",
          "value": "false",
          "line": 170,
          "bound": "self.ranges[a].upper() == other.ranges[b].upper()"
        },
        {
          "cond": "it.next() matches None",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 181,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        31,
        32,
        34,
        36,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        23,
        24,
        25,
        26,
        27,
        28,
        30,
        31,
        32,
        35,
        37,
        38,
        40,
        41,
        42
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 148,
          "bound": null
        },
        {
          "cond": "let Some(ab) = self.ranges[a].intersect(&other.ranges[b])",
          "norm": null,
          "value": "true",
          "line": 166,
          "bound": null
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].upper()",
          "norm": "other.ranges[b].upper() > self.ranges[a].upper()",
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "it.next() matches None",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 181,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        31,
        32,
        35,
        37,
        38,
        39,
        41,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 148,
          "bound": null
        },
        {
          "cond": "let Some(ab) = self.ranges[a].intersect(&other.ranges[b])",
          "norm": null,
          "value": "true",
          "line": 166,
          "bound": null
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].upper()",
          "norm": "other.ranges[b].upper() > self.ranges[a].upper()",
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "it.next() matches None",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 181,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        31,
        32,
        35,
        37,
        38,
        40,
        41,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 148,
          "bound": null
        },
        {
          "cond": "let Some(ab) = self.ranges[a].intersect(&other.ranges[b])",
          "norm": null,
          "value": "true",
          "line": 166,
          "bound": null
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].upper()",
          "norm": "other.ranges[b].upper() > self.ranges[a].upper()",
          "value": "false",
          "line": 170,
          "bound": "self.ranges[a].upper() == other.ranges[b].upper()"
        },
        {
          "cond": "it.next() matches Some(v)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "it.next() matches Some(v)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Some(ab) = self.ranges[a].intersect(&other.ranges[b])",
          "norm": null,
          "value": "true",
          "line": 166,
          "bound": null
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].upper()",
          "norm": "other.ranges[b].upper() > self.ranges[a].upper()",
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "it.next() matches None",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 181,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        30,
        31,
        32,
        34,
        36,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        31,
        32,
        35,
        37,
        38,
        39,
        41,
        42
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 148,
          "bound": null
        },
        {
          "cond": "let Some(ab) = self.ranges[a].intersect(&other.ranges[b])",
          "norm": null,
          "value": "true",
          "line": 166,
          "bound": null
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].upper()",
          "norm": "other.ranges[b].upper() > self.ranges[a].upper()",
          "value": "false",
          "line": 170,
          "bound": "self.ranges[a].upper() == other.ranges[b].upper()"
        },
        {
          "cond": "it.next() matches Some(v)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "it.next() matches Some(v)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Some(ab) = self.ranges[a].intersect(&other.ranges[b])",
          "norm": null,
          "value": "true",
          "line": 166,
          "bound": null
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].upper()",
          "norm": "other.ranges[b].upper() > self.ranges[a].upper()",
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "it.next() matches None",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 181,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        30,
        31,
        32,
        34,
        36,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        31,
        32,
        35,
        37,
        38,
        40,
        41,
        42
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 148,
          "bound": null
        },
        {
          "cond": "let Some(ab) = self.ranges[a].intersect(&other.ranges[b])",
          "norm": null,
          "value": "true",
          "line": 166,
          "bound": null
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].upper()",
          "norm": "other.ranges[b].upper() > self.ranges[a].upper()",
          "value": "false",
          "line": 170,
          "bound": "self.ranges[a].upper() == other.ranges[b].upper()"
        },
        {
          "cond": "it.next() matches None",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 181,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        30,
        31,
        32,
        35,
        37,
        38,
        39,
        41,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 148,
          "bound": null
        },
        {
          "cond": "let Some(ab) = self.ranges[a].intersect(&other.ranges[b])",
          "norm": null,
          "value": "true",
          "line": 166,
          "bound": null
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].upper()",
          "norm": "other.ranges[b].upper() > self.ranges[a].upper()",
          "value": "false",
          "line": 170,
          "bound": "self.ranges[a].upper() == other.ranges[b].upper()"
        },
        {
          "cond": "it.next() matches None",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 181,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        30,
        31,
        32,
        35,
        37,
        38,
        40,
        41,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 148,
          "bound": null
        },
        {
          "cond": "let Some(ab) = self.ranges[a].intersect(&other.ranges[b])",
          "norm": null,
          "value": "true",
          "line": 166,
          "bound": null
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].upper()",
          "norm": "other.ranges[b].upper() > self.ranges[a].upper()",
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "it.next() matches Some(v)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "it.next() matches Some(v)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Some(ab) = self.ranges[a].intersect(&other.ranges[b])",
          "norm": null,
          "value": "true",
          "line": 166,
          "bound": null
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].upper()",
          "norm": "other.ranges[b].upper() > self.ranges[a].upper()",
          "value": "false",
          "line": 170,
          "bound": "self.ranges[a].upper() == other.ranges[b].upper()"
        },
        {
          "cond": "it.next() matches None",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 181,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        31,
        32,
        34,
        36,
        14,
        15,
        16,
        17,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        30,
        31,
        32,
        35,
        37,
        38,
        39,
        41,
        42
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 148,
          "bound": null
        },
        {
          "cond": "let Some(ab) = self.ranges[a].intersect(&other.ranges[b])",
          "norm": null,
          "value": "true",
          "line": 166,
          "bound": null
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].upper()",
          "norm": "other.ranges[b].upper() > self.ranges[a].upper()",
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "it.next() matches Some(v)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "it.next() matches Some(v)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Some(ab) = self.ranges[a].intersect(&other.ranges[b])",
          "norm": null,
          "value": "true",
          "line": 166,
          "bound": null
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].upper()",
          "norm": "other.ranges[b].upper() > self.ranges[a].upper()",
          "value": "false",
          "line": 170,
          "bound": "self.ranges[a].upper() == other.ranges[b].upper()"
        },
        {
          "cond": "it.next() matches None",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 181,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        31,
        32,
        34,
        36,
        14,
        15,
        16,
        17,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        30,
        31,
        32,
        35,
        37,
        38,
        40,
        41,
        42
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 148,
          "bound": null
        },
        {
          "cond": "let Some(ab) = self.ranges[a].intersect(&other.ranges[b])",
          "norm": null,
          "value": "true",
          "line": 166,
          "bound": null
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].upper()",
          "norm": "other.ranges[b].upper() > self.ranges[a].upper()",
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "it.next() matches None",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 181,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        31,
        32,
        35,
        37,
        38,
        39,
        41,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 148,
          "bound": null
        },
        {
          "cond": "let Some(ab) = self.ranges[a].intersect(&other.ranges[b])",
          "norm": null,
          "value": "true",
          "line": 166,
          "bound": null
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].upper()",
          "norm": "other.ranges[b].upper() > self.ranges[a].upper()",
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "it.next() matches None",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 181,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        31,
        32,
        35,
        37,
        38,
        40,
        41,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 148,
          "bound": null
        },
        {
          "cond": "let Some(ab) = self.ranges[a].intersect(&other.ranges[b])",
          "norm": null,
          "value": "true",
          "line": 166,
          "bound": null
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].upper()",
          "norm": "other.ranges[b].upper() > self.ranges[a].upper()",
          "value": "false",
          "line": 170,
          "bound": "self.ranges[a].upper() == other.ranges[b].upper()"
        },
        {
          "cond": "it.next() matches Some(v)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "it.next() matches Some(v)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Some(ab) = self.ranges[a].intersect(&other.ranges[b])",
          "norm": null,
          "value": "true",
          "line": 166,
          "bound": null
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].upper()",
          "norm": "other.ranges[b].upper() > self.ranges[a].upper()",
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "it.next() matches None",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 181,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        23,
        24,
        25,
        26,
        27,
        28,
        30,
        31,
        32,
        34,
        36,
        14,
        15,
        16,
        17,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        31,
        32,
        35,
        37,
        38,
        39,
        41,
        42
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 148,
          "bound": null
        },
        {
          "cond": "let Some(ab) = self.ranges[a].intersect(&other.ranges[b])",
          "norm": null,
          "value": "true",
          "line": 166,
          "bound": null
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].upper()",
          "norm": "other.ranges[b].upper() > self.ranges[a].upper()",
          "value": "false",
          "line": 170,
          "bound": "self.ranges[a].upper() == other.ranges[b].upper()"
        },
        {
          "cond": "it.next() matches Some(v)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "it.next() matches Some(v)",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "let Some(ab) = self.ranges[a].intersect(&other.ranges[b])",
          "norm": null,
          "value": "true",
          "line": 166,
          "bound": null
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].upper()",
          "norm": "other.ranges[b].upper() > self.ranges[a].upper()",
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "it.next() matches None",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 181,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        23,
        24,
        25,
        26,
        27,
        28,
        30,
        31,
        32,
        34,
        36,
        14,
        15,
        16,
        17,
        18,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        31,
        32,
        35,
        37,
        38,
        40,
        41,
        42
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 148,
          "bound": null
        },
        {
          "cond": "let Some(ab) = self.ranges[a].intersect(&other.ranges[b])",
          "norm": null,
          "value": "true",
          "line": 166,
          "bound": null
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].upper()",
          "norm": "other.ranges[b].upper() > self.ranges[a].upper()",
          "value": "false",
          "line": 170,
          "bound": "self.ranges[a].upper() == other.ranges[b].upper()"
        },
        {
          "cond": "it.next() matches None",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 181,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        23,
        24,
        25,
        26,
        27,
        28,
        30,
        31,
        32,
        35,
        37,
        38,
        39,
        41,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 148,
          "bound": null
        },
        {
          "cond": "let Some(ab) = self.ranges[a].intersect(&other.ranges[b])",
          "norm": null,
          "value": "true",
          "line": 166,
          "bound": null
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].upper()",
          "norm": "other.ranges[b].upper() > self.ranges[a].upper()",
          "value": "false",
          "line": 170,
          "bound": "self.ranges[a].upper() == other.ranges[b].upper()"
        },
        {
          "cond": "it.next() matches None",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 181,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        23,
        24,
        25,
        26,
        27,
        28,
        30,
        31,
        32,
        35,
        37,
        38,
        40,
        41,
        42
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}