{
  "name": "regex_syntax::ast::visitor::{impl#0}::visit",
  "mod_info": {
    "name": "ast::visitor",
    "loc": "regex-syntax/src/ast/mod.rs:13:1:13:13"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/visitor.rs:205:5:254:6",
  "doc": "",
  "code": [
    "fn visit<V: Visitor>(",
    "    &mut self,",
    "    mut ast: &'a Ast,",
    "    mut visitor: V,",
    ") -> Result<V::Output, V::Err> {",
    "    self.stack.clear();",
    "    self.stack_class.clear();",
    "",
    "    visitor.start();",
    "    loop {",
    "        visitor.visit_pre(ast)?;",
    "        if let Some(x) = self.induct(ast, &mut visitor)? {",
    "            let child = x.child();",
    "            self.stack.push((ast, x));",
    "            ast = child;",
    "            continue;",
    "        }",
    "        // No induction means we have a base case, so we can post visit",
    "        // it now.",
    "        visitor.visit_post(ast)?;",
    "",
    "        // At this point, we now try to pop our call stack until it is",
    "        // either empty or we hit another inductive case.",
    "        loop {",
    "            let (post_ast, frame) = match self.stack.pop() {",
    "                None => return visitor.finish(),",
    "                Some((post_ast, frame)) => (post_ast, frame),",
    "            };",
    "            // If this is a concat/alternate, then we might have additional",
    "            // inductive steps to process.",
    "            if let Some(x) = self.pop(frame) {",
    "                match x {",
    "                    Frame::Alternation { .. } => {",
    "                        visitor.visit_alternation_in()?;",
    "                    }",
    "                    Frame::Concat { .. } => {",
    "                        visitor.visit_concat_in()?;",
    "                    }",
    "                    _ => {}",
    "                }",
    "                ast = x.child();",
    "                self.stack.push((post_ast, x));",
    "                break;",
    "            }",
    "            // Otherwise, we've finished visiting all the child nodes for",
    "            // this AST, so we can post visit it now.",
    "            visitor.visit_post(post_ast)?;",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 12,
    "contra": 4,
    "min_set": 10
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "visitor.visit_pre(ast)?",
          "norm": null,
          "value": "Err/None",
          "line": 215,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        11,
        12,
        92,
        93,
        94,
        95
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "visitor.visit_pre(ast)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 215,
          "bound": null
        },
        {
          "cond": "self.induct(ast, &mut visitor)?",
          "norm": null,
          "value": "Err/None",
          "line": 216,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        13,
        14,
        15,
        17,
        19,
        20,
        90,
        91,
        94,
        95
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "visitor.visit_pre(ast)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 215,
          "bound": null
        },
        {
          "cond": "self.induct(ast, &mut visitor)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 216,
          "bound": null
        },
        {
          "cond": "let Some(x) = self.induct(ast, &mut visitor)?",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "visitor.visit_post(ast)?",
          "norm": null,
          "value": "Err/None",
          "line": 224,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        13,
        14,
        15,
        18,
        21,
        26,
        27,
        28,
        30,
        32,
        33,
        88,
        89,
        94,
        95
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "visitor.visit_pre(ast)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 215,
          "bound": null
        },
        {
          "cond": "self.induct(ast, &mut visitor)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 216,
          "bound": null
        },
        {
          "cond": "let Some(x) = self.induct(ast, &mut visitor)?",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "visitor.visit_post(ast)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 224,
          "bound": null
        },
        {
          "cond": "self.stack.pop() matches Some((post_ast, frame))",
          "norm": null,
          "value": "true",
          "line": 229,
          "bound": null
        },
        {
          "cond": "let Some(x) = self.pop(frame)",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "visitor.visit_post(post_ast)?",
          "norm": null,
          "value": "Err/None",
          "line": 251,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        13,
        14,
        15,
        18,
        21,
        26,
        27,
        28,
        31,
        34,
        35,
        36,
        37,
        40,
        43,
        70,
        71,
        72,
        74,
        76,
        77,
        80,
        81,
        87,
        94,
        95
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "visitor.visit_pre(ast)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 215,
          "bound": null
        },
        {
          "cond": "self.induct(ast, &mut visitor)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 216,
          "bound": null
        },
        {
          "cond": "let Some(x) = self.induct(ast, &mut visitor)?",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "visitor.visit_post(ast)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 224,
          "bound": null
        },
        {
          "cond": "self.stack.pop() matches Some((post_ast, frame))",
          "norm": null,
          "value": "true",
          "line": 229,
          "bound": null
        },
        {
          "cond": "let Some(x) = self.pop(frame)",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "visitor.visit_post(post_ast)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 251,
          "bound": null
        },
        {
          "cond": "self.stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 229,
          "bound": null
        },
        {
          "cond": "self.stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 229,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        13,
        14,
        15,
        18,
        21,
        26,
        27,
        28,
        31,
        34,
        35,
        36,
        37,
        40,
        43,
        70,
        71,
        72,
        75,
        78,
        35,
        36,
        37,
        39,
        41,
        42,
        94,
        95
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "visitor.visit_pre(ast)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 215,
          "bound": null
        },
        {
          "cond": "self.induct(ast, &mut visitor)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 216,
          "bound": null
        },
        {
          "cond": "let Some(x) = self.induct(ast, &mut visitor)?",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "visitor.visit_post(ast)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 224,
          "bound": null
        },
        {
          "cond": "self.stack.pop() matches Some((post_ast, frame))",
          "norm": null,
          "value": "true",
          "line": 229,
          "bound": null
        },
        {
          "cond": "let Some(x) = self.pop(frame)",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "x matches Frame::Concat { .. }",
          "norm": null,
          "value": "false",
          "line": 240,
          "bound": null
        },
        {
          "cond": "x matches Frame::Alternation { .. }",
          "norm": null,
          "value": "false",
          "line": 237,
          "bound": null
        },
        {
          "cond": "x matches _",
          "norm": null,
          "value": "true",
          "line": 243,
          "bound": null
        },
        {
          "cond": "visitor.visit_pre(ast)?",
          "norm": null,
          "value": "Err/None",
          "line": 215,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        13,
        14,
        15,
        18,
        21,
        26,
        27,
        28,
        31,
        34,
        35,
        36,
        37,
        40,
        43,
        44,
        45,
        46,
        67,
        68,
        69,
        4,
        5,
        6,
        7,
        9,
        11,
        12,
        92,
        93,
        94,
        95
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "visitor.visit_pre(ast)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 215,
          "bound": null
        },
        {
          "cond": "self.induct(ast, &mut visitor)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 216,
          "bound": null
        },
        {
          "cond": "let Some(x) = self.induct(ast, &mut visitor)?",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "visitor.visit_post(ast)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 224,
          "bound": null
        },
        {
          "cond": "self.stack.pop() matches Some((post_ast, frame))",
          "norm": null,
          "value": "true",
          "line": 229,
          "bound": null
        },
        {
          "cond": "let Some(x) = self.pop(frame)",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "x matches Frame::Alternation { .. }",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "x matches Frame::Alternation { .. }",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "visitor.visit_alternation_in()?",
          "norm": null,
          "value": "Err/None",
          "line": 238,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        13,
        14,
        15,
        18,
        21,
        26,
        27,
        28,
        31,
        34,
        35,
        36,
        37,
        40,
        43,
        44,
        45,
        47,
        49,
        50,
        51,
        53,
        55,
        56,
        84,
        85,
        86,
        87,
        94,
        95
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "visitor.visit_pre(ast)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 215,
          "bound": null
        },
        {
          "cond": "self.induct(ast, &mut visitor)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 216,
          "bound": null
        },
        {
          "cond": "let Some(x) = self.induct(ast, &mut visitor)?",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "visitor.visit_post(ast)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 224,
          "bound": null
        },
        {
          "cond": "self.stack.pop() matches Some((post_ast, frame))",
          "norm": null,
          "value": "true",
          "line": 229,
          "bound": null
        },
        {
          "cond": "let Some(x) = self.pop(frame)",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "x matches Frame::Alternation { .. }",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "x matches Frame::Alternation { .. }",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "visitor.visit_alternation_in()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 238,
          "bound": null
        },
        {
          "cond": "visitor.visit_pre(ast)?",
          "norm": null,
          "value": "Err/None",
          "line": 215,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        13,
        14,
        15,
        18,
        21,
        26,
        27,
        28,
        31,
        34,
        35,
        36,
        37,
        40,
        43,
        44,
        45,
        47,
        49,
        50,
        51,
        54,
        57,
        67,
        68,
        69,
        4,
        5,
        6,
        7,
        9,
        11,
        12,
        92,
        93,
        94,
        95
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "visitor.visit_pre(ast)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 215,
          "bound": null
        },
        {
          "cond": "self.induct(ast, &mut visitor)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 216,
          "bound": null
        },
        {
          "cond": "let Some(x) = self.induct(ast, &mut visitor)?",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "visitor.visit_post(ast)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 224,
          "bound": null
        },
        {
          "cond": "self.stack.pop() matches Some((post_ast, frame))",
          "norm": null,
          "value": "true",
          "line": 229,
          "bound": null
        },
        {
          "cond": "let Some(x) = self.pop(frame)",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "x matches Frame::Concat { .. }",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "x matches Frame::Concat { .. }",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "visitor.visit_concat_in()?",
          "norm": null,
          "value": "Err/None",
          "line": 241,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        13,
        14,
        15,
        18,
        21,
        26,
        27,
        28,
        31,
        34,
        35,
        36,
        37,
        40,
        43,
        44,
        45,
        48,
        58,
        59,
        60,
        62,
        64,
        65,
        82,
        83,
        86,
        87,
        94,
        95
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "visitor.visit_pre(ast)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 215,
          "bound": null
        },
        {
          "cond": "self.induct(ast, &mut visitor)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 216,
          "bound": null
        },
        {
          "cond": "let Some(x) = self.induct(ast, &mut visitor)?",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "visitor.visit_post(ast)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 224,
          "bound": null
        },
        {
          "cond": "self.stack.pop() matches Some((post_ast, frame))",
          "norm": null,
          "value": "true",
          "line": 229,
          "bound": null
        },
        {
          "cond": "let Some(x) = self.pop(frame)",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "x matches Frame::Concat { .. }",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "x matches Frame::Concat { .. }",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "visitor.visit_concat_in()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 241,
          "bound": null
        },
        {
          "cond": "visitor.visit_pre(ast)?",
          "norm": null,
          "value": "Err/None",
          "line": 215,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        13,
        14,
        15,
        18,
        21,
        26,
        27,
        28,
        31,
        34,
        35,
        36,
        37,
        40,
        43,
        44,
        45,
        48,
        58,
        59,
        60,
        63,
        66,
        67,
        68,
        69,
        4,
        5,
        6,
        7,
        9,
        11,
        12,
        92,
        93,
        94,
        95
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "visitor.visit_pre(ast)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 215,
          "bound": null
        },
        {
          "cond": "self.induct(ast, &mut visitor)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 216,
          "bound": null
        },
        {
          "cond": "let Some(x) = self.induct(ast, &mut visitor)?",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "visitor.visit_post(ast)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 224,
          "bound": null
        },
        {
          "cond": "self.stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 229,
          "bound": null
        },
        {
          "cond": "self.stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 229,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        13,
        14,
        15,
        18,
        21,
        26,
        27,
        28,
        31,
        34,
        35,
        36,
        37,
        39,
        41,
        42,
        94,
        95
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "visitor.visit_pre(ast)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 215,
          "bound": null
        },
        {
          "cond": "self.induct(ast, &mut visitor)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 216,
          "bound": null
        },
        {
          "cond": "let Some(x) = self.induct(ast, &mut visitor)?",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        },
        {
          "cond": "visitor.visit_pre(ast)?",
          "norm": null,
          "value": "Err/None",
          "line": 215,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        13,
        14,
        15,
        18,
        22,
        23,
        24,
        25,
        79,
        4,
        5,
        6,
        7,
        9,
        11,
        12,
        92,
        93,
        94,
        95
      ],
      "may_contra": true,
      "min_set": false
    }
  ]
}