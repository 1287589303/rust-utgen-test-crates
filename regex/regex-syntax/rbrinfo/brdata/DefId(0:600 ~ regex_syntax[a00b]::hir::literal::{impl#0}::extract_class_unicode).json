{
  "name": "regex_syntax::hir::literal::{impl#0}::extract_class_unicode",
  "mod_info": {
    "name": "hir::literal",
    "loc": "regex-syntax/src/hir/mod.rs:42:1:42:17"
  },
  "visible": false,
  "loc": "regex-syntax/src/hir/literal.rs:500:5:512:6",
  "doc": "/// Convert the given Unicode class into a sequence of literals if the\n/// class is small enough. If the class is too big, return an infinite\n/// sequence.\n",
  "code": [
    "fn extract_class_unicode(&self, cls: &hir::ClassUnicode) -> Seq {",
    "    if self.class_over_limit_unicode(cls) {",
    "        return Seq::infinite();",
    "    }",
    "    let mut seq = Seq::empty();",
    "    for r in cls.iter() {",
    "        for ch in r.start()..=r.end() {",
    "            seq.push(Literal::from(ch));",
    "        }",
    "    }",
    "    self.enforce_literal_len(&mut seq);",
    "    seq",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 2,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.class_over_limit_unicode(cls)",
          "norm": null,
          "value": "true",
          "line": 501,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        29,
        30
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.class_over_limit_unicode(cls)",
          "norm": null,
          "value": "false",
          "line": 501,
          "bound": null
        },
        {
          "cond": "r in cls.iter()",
          "norm": null,
          "value": "true",
          "line": 505,
          "bound": null
        },
        {
          "cond": "ch in r.start()..=r.end()",
          "norm": null,
          "value": "true",
          "line": 506,
          "bound": null
        },
        {
          "cond": "ch in r.start()..=r.end()",
          "norm": null,
          "value": "false",
          "line": 506,
          "bound": null
        },
        {
          "cond": "r in cls.iter()",
          "norm": null,
          "value": "false",
          "line": 505,
          "bound": null
        }
      ],
      "ret": "seq",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        12,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        23,
        25,
        26,
        18,
        19,
        20,
        22,
        24,
        7,
        8,
        9,
        11,
        13,
        27,
        28,
        30
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.class_over_limit_unicode(cls)",
          "norm": null,
          "value": "false",
          "line": 501,
          "bound": null
        },
        {
          "cond": "r in cls.iter()",
          "norm": null,
          "value": "true",
          "line": 505,
          "bound": null
        },
        {
          "cond": "ch in r.start()..=r.end()",
          "norm": null,
          "value": "false",
          "line": 506,
          "bound": null
        },
        {
          "cond": "r in cls.iter()",
          "norm": null,
          "value": "false",
          "line": 505,
          "bound": null
        }
      ],
      "ret": "seq",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        12,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        22,
        24,
        7,
        8,
        9,
        11,
        13,
        27,
        28,
        30
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.class_over_limit_unicode(cls)",
          "norm": null,
          "value": "false",
          "line": 501,
          "bound": null
        },
        {
          "cond": "r in cls.iter()",
          "norm": null,
          "value": "false",
          "line": 505,
          "bound": null
        }
      ],
      "ret": "seq",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        13,
        27,
        28,
        30
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}