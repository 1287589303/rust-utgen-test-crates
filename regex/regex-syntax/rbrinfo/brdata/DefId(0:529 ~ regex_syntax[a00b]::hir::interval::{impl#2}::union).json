{
  "name": "regex_syntax::hir::interval::{impl#2}::union",
  "mod_info": {
    "name": "hir::interval",
    "loc": "regex-syntax/src/hir/mod.rs:41:1:41:14"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/interval.rs:133:5:141:6",
  "doc": "/// Union this set with the given set, in place.\n",
  "code": [
    "pub fn union(&mut self, other: &IntervalSet<I>) {",
    "    if other.ranges.is_empty() || self.ranges == other.ranges {",
    "        return;",
    "    }",
    "    // This could almost certainly be done more efficiently.",
    "    self.ranges.extend(&other.ranges);",
    "    self.canonicalize();",
    "    self.folded = self.folded && other.folded;",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        6,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "self.ranges == other.ranges",
          "norm": "other.ranges == self.ranges",
          "value": "true",
          "line": 134,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "self.ranges == other.ranges",
          "norm": "other.ranges == self.ranges",
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 140,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "self.ranges == other.ranges",
          "norm": "other.ranges == self.ranges",
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 140,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        11,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}