{
  "name": "regex_syntax::hir::interval::Interval::intersect",
  "mod_info": {
    "name": "hir::interval",
    "loc": "regex-syntax/src/hir/mod.rs:41:1:41:14"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/interval.rs:438:5:446:6",
  "doc": "/// Intersect this range with the given range and return the result.\n///\n/// If the intersection is empty, then this returns `None`.\n",
  "code": [
    "fn intersect(&self, other: &Self) -> Option<Self> {",
    "    let lower = cmp::max(self.lower(), other.lower());",
    "    let upper = cmp::min(self.upper(), other.upper());",
    "    if lower <= upper {",
    "        Some(Self::create(lower, upper))",
    "    } else {",
    "        None",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "lower <= upper",
          "norm": null,
          "value": "true",
          "line": 441,
          "bound": "lower == upper"
        }
      ],
      "ret": "Some(Self::create(lower, upper))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "lower <= upper",
          "norm": null,
          "value": "false",
          "line": 441,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}