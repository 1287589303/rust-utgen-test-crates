{
  "name": "regex_syntax::hir::translate::{impl#5}::ast_literal_to_scalar",
  "mod_info": {
    "name": "hir::translate",
    "loc": "regex-syntax/src/hir/mod.rs:44:1:44:19"
  },
  "visible": false,
  "loc": "regex-syntax/src/hir/translate.rs:825:5:843:6",
  "doc": "/// Convert an Ast literal to its scalar representation.\n///\n/// When Unicode mode is enabled, then this always succeeds and returns a\n/// `char` (Unicode scalar value).\n///\n/// When Unicode mode is disabled, then a `char` will still be returned\n/// whenever possible. A byte is returned only when invalid UTF-8 is\n/// allowed and when the byte is not ASCII. Otherwise, a non-ASCII byte\n/// will result in an error when invalid UTF-8 is not allowed.\n",
  "code": [
    "fn ast_literal_to_scalar(",
    "    &self,",
    "    lit: &ast::Literal,",
    ") -> Result<Either<char, u8>> {",
    "    if self.flags().unicode() {",
    "        return Ok(Either::Left(lit.c));",
    "    }",
    "    let byte = match lit.byte() {",
    "        None => return Ok(Either::Left(lit.c)),",
    "        Some(byte) => byte,",
    "    };",
    "    if byte <= 0x7F {",
    "        return Ok(Either::Left(char::try_from(byte).unwrap()));",
    "    }",
    "    if self.trans().utf8 {",
    "        return Err(self.error(lit.span, ErrorKind::InvalidUtf8));",
    "    }",
    "    Ok(Either::Right(byte))",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 829,
          "bound": null
        }
      ],
      "ret": "Ok(Either::Left(lit.c))",
      "path": [
        0,
        1,
        2,
        3,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 829,
          "bound": null
        },
        {
          "cond": "lit.byte() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 832,
          "bound": null
        },
        {
          "cond": "byte <= 0x7F",
          "norm": "0x7F >= byte",
          "value": "true",
          "line": 836,
          "bound": "byte == 0x7F"
        }
      ],
      "ret": "Ok(Either::Left(char::try_from(byte).unwrap()))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        8,
        10,
        12,
        13,
        19,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 829,
          "bound": null
        },
        {
          "cond": "lit.byte() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 832,
          "bound": null
        },
        {
          "cond": "byte <= 0x7F",
          "norm": "0x7F >= byte",
          "value": "false",
          "line": 836,
          "bound": null
        },
        {
          "cond": "self.trans().utf8",
          "norm": null,
          "value": "true",
          "line": 839,
          "bound": null
        }
      ],
      "ret": "Err(self.error(lit.span, ErrorKind::InvalidUtf8))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        8,
        11,
        14,
        15,
        16,
        17,
        19,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 829,
          "bound": null
        },
        {
          "cond": "lit.byte() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 832,
          "bound": null
        },
        {
          "cond": "byte <= 0x7F",
          "norm": "0x7F >= byte",
          "value": "false",
          "line": 836,
          "bound": null
        },
        {
          "cond": "self.trans().utf8",
          "norm": null,
          "value": "false",
          "line": 839,
          "bound": null
        }
      ],
      "ret": "Ok(Either::Right(byte))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        8,
        11,
        14,
        18,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 829,
          "bound": null
        },
        {
          "cond": "lit.byte() matches None",
          "norm": null,
          "value": "true",
          "line": 832,
          "bound": null
        },
        {
          "cond": "lit.byte() matches None",
          "norm": null,
          "value": "true",
          "line": 832,
          "bound": null
        }
      ],
      "ret": "Ok(Either::Left(lit.c))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        19,
        20
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}