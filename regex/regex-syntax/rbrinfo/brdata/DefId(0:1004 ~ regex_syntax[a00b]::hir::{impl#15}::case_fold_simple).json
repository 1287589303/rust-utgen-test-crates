{
  "name": "regex_syntax::hir::{impl#15}::case_fold_simple",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:1290:5:1305:6",
  "doc": "/// Apply simple case folding to this Unicode scalar value range.\n///\n/// Additional ranges are appended to the given vector. Canonical ordering\n/// is *not* maintained in the given vector.\n",
  "code": [
    "fn case_fold_simple(",
    "    &self,",
    "    ranges: &mut Vec<ClassUnicodeRange>,",
    ") -> Result<(), unicode::CaseFoldError> {",
    "    let mut folder = unicode::SimpleCaseFolder::new()?;",
    "    if !folder.overlaps(self.start, self.end) {",
    "        return Ok(());",
    "    }",
    "    let (start, end) = (u32::from(self.start), u32::from(self.end));",
    "    for cp in (start..=end).filter_map(char::from_u32) {",
    "        for &cp_folded in folder.mapping(cp) {",
    "            ranges.push(ClassUnicodeRange::new(cp_folded, cp_folded));",
    "        }",
    "    }",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 2,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "unicode::SimpleCaseFolder::new()?",
          "norm": null,
          "value": "Err/None",
          "line": 1294,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        34,
        35
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "unicode::SimpleCaseFolder::new()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1294,
          "bound": null
        },
        {
          "cond": "folder.overlaps(self.start, self.end)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "cp in (start..=end).filter_map(char::from_u32)",
          "norm": null,
          "value": "true",
          "line": 1299,
          "bound": null
        },
        {
          "cond": "&cp_folded in folder.mapping(cp)",
          "norm": null,
          "value": "true",
          "line": 1300,
          "bound": null
        },
        {
          "cond": "&cp_folded in folder.mapping(cp)",
          "norm": null,
          "value": "false",
          "line": 1300,
          "bound": null
        },
        {
          "cond": "cp in (start..=end).filter_map(char::from_u32)",
          "norm": null,
          "value": "false",
          "line": 1299,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        26,
        27,
        30,
        32,
        33,
        25,
        26,
        27,
        29,
        31,
        16,
        17,
        18,
        20,
        22,
        35
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "unicode::SimpleCaseFolder::new()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1294,
          "bound": null
        },
        {
          "cond": "folder.overlaps(self.start, self.end)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "cp in (start..=end).filter_map(char::from_u32)",
          "norm": null,
          "value": "true",
          "line": 1299,
          "bound": null
        },
        {
          "cond": "&cp_folded in folder.mapping(cp)",
          "norm": null,
          "value": "false",
          "line": 1300,
          "bound": null
        },
        {
          "cond": "cp in (start..=end).filter_map(char::from_u32)",
          "norm": null,
          "value": "false",
          "line": 1299,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        26,
        27,
        29,
        31,
        16,
        17,
        18,
        20,
        22,
        35
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "unicode::SimpleCaseFolder::new()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1294,
          "bound": null
        },
        {
          "cond": "folder.overlaps(self.start, self.end)",
          "norm": null,
          "value": "true",
          "line": 1295,
          "bound": null
        },
        {
          "cond": "cp in (start..=end).filter_map(char::from_u32)",
          "norm": null,
          "value": "false",
          "line": 1299,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        22,
        35
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "unicode::SimpleCaseFolder::new()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1294,
          "bound": null
        },
        {
          "cond": "folder.overlaps(self.start, self.end)",
          "norm": null,
          "value": "false",
          "line": 1295,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        5,
        8,
        10,
        34,
        35
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}