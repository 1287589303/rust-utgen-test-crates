{
  "name": "regex_syntax::hir::literal::{impl#0}::kind",
  "mod_info": {
    "name": "hir::literal",
    "loc": "regex-syntax/src/hir/mod.rs:42:1:42:17"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/literal.rs:220:5:223:6",
  "doc": "/// Set the kind of literal sequence to extract from an [`Hir`] expression.\n///\n/// The default is to extract prefixes, but suffixes can be selected\n/// instead. The contract for prefixes is that every match of the\n/// corresponding `Hir` must start with one of the literals in the sequence\n/// returned. Moreover, the _order_ of the sequence returned corresponds to\n/// the preference order.\n///\n/// Suffixes satisfy a similar contract in that every match of the\n/// corresponding `Hir` must end with one of the literals in the sequence\n/// returned. However, there is no guarantee that the literals are in\n/// preference order.\n///\n/// Remember that a sequence can be infinite. For example, unless the\n/// limits are configured to be impractically large, attempting to extract\n/// prefixes (or suffixes) for the pattern `[A-Z]` will return an infinite\n/// sequence. Generally speaking, if the sequence returned is infinite,\n/// then it is presumed to be unwise to do prefix (or suffix) optimizations\n/// for the pattern.\n",
  "code": [
    "pub fn kind(&mut self, kind: ExtractKind) -> &mut Extractor {",
    "    self.kind = kind;",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}