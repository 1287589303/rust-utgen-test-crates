{
  "name": "regex_syntax::hir::translate::{impl#5}::hir_assertion",
  "mod_info": {
    "name": "hir::translate",
    "loc": "regex-syntax/src/hir/mod.rs:44:1:44:19"
  },
  "visible": false,
  "loc": "regex-syntax/src/hir/translate.rs:923:5:987:6",
  "doc": "",
  "code": [
    "fn hir_assertion(&self, asst: &ast::Assertion) -> Result<Hir> {",
    "    let unicode = self.flags().unicode();",
    "    let multi_line = self.flags().multi_line();",
    "    let crlf = self.flags().crlf();",
    "    Ok(match asst.kind {",
    "        ast::AssertionKind::StartLine => Hir::look(if multi_line {",
    "            if crlf {",
    "                hir::Look::StartCRLF",
    "            } else {",
    "                hir::Look::StartLF",
    "            }",
    "        } else {",
    "            hir::Look::Start",
    "        }),",
    "        ast::AssertionKind::EndLine => Hir::look(if multi_line {",
    "            if crlf {",
    "                hir::Look::EndCRLF",
    "            } else {",
    "                hir::Look::EndLF",
    "            }",
    "        } else {",
    "            hir::Look::End",
    "        }),",
    "        ast::AssertionKind::StartText => Hir::look(hir::Look::Start),",
    "        ast::AssertionKind::EndText => Hir::look(hir::Look::End),",
    "        ast::AssertionKind::WordBoundary => Hir::look(if unicode {",
    "            hir::Look::WordUnicode",
    "        } else {",
    "            hir::Look::WordAscii",
    "        }),",
    "        ast::AssertionKind::NotWordBoundary => Hir::look(if unicode {",
    "            hir::Look::WordUnicodeNegate",
    "        } else {",
    "            hir::Look::WordAsciiNegate",
    "        }),",
    "        ast::AssertionKind::WordBoundaryStart",
    "        | ast::AssertionKind::WordBoundaryStartAngle => {",
    "            Hir::look(if unicode {",
    "                hir::Look::WordStartUnicode",
    "            } else {",
    "                hir::Look::WordStartAscii",
    "            })",
    "        }",
    "        ast::AssertionKind::WordBoundaryEnd",
    "        | ast::AssertionKind::WordBoundaryEndAngle => {",
    "            Hir::look(if unicode {",
    "                hir::Look::WordEndUnicode",
    "            } else {",
    "                hir::Look::WordEndAscii",
    "            })",
    "        }",
    "        ast::AssertionKind::WordBoundaryStartHalf => {",
    "            Hir::look(if unicode {",
    "                hir::Look::WordStartHalfUnicode",
    "            } else {",
    "                hir::Look::WordStartHalfAscii",
    "            })",
    "        }",
    "        ast::AssertionKind::WordBoundaryEndHalf => Hir::look(if unicode {",
    "            hir::Look::WordEndHalfUnicode",
    "        } else {",
    "            hir::Look::WordEndHalfAscii",
    "        }),",
    "    })",
    "}"
  ],
  "size": {
    "chain": 24,
    "contra": 0,
    "min_set": 20
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "asst.kind matches ast::AssertionKind::WordBoundaryEndHalf",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "unicode",
          "norm": null,
          "value": "true",
          "line": 981,
          "bound": null
        }
      ],
      "ret": "Ok(match asst.kind {\n            ast::AssertionKind::StartLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::StartCRLF\n                } else {\n                    hir::Look::StartLF\n                }\n            } else {\n                hir::Look::Start\n            }),\n            ast::AssertionKind::EndLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::EndCRLF\n                } else {\n                    hir::Look::EndLF\n                }\n            } else {\n                hir::Look::End\n            }),\n            ast::AssertionKind::StartText => Hir::look(hir::Look::Start),\n            ast::AssertionKind::EndText => Hir::look(hir::Look::End),\n            ast::AssertionKind::WordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicode\n            } else {\n                hir::Look::WordAscii\n            }),\n            ast::AssertionKind::NotWordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicodeNegate\n            } else {\n                hir::Look::WordAsciiNegate\n            }),\n            ast::AssertionKind::WordBoundaryStart\n            | ast::AssertionKind::WordBoundaryStartAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartUnicode\n                } else {\n                    hir::Look::WordStartAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEnd\n            | ast::AssertionKind::WordBoundaryEndAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordEndUnicode\n                } else {\n                    hir::Look::WordEndAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryStartHalf => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartHalfUnicode\n                } else {\n                    hir::Look::WordStartHalfAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEndHalf => Hir::look(if unicode {\n                hir::Look::WordEndHalfUnicode\n            } else {\n                hir::Look::WordEndHalfAscii\n            }),\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        15,
        63,
        65,
        66,
        67,
        68
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "asst.kind matches ast::AssertionKind::WordBoundaryEndHalf",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "unicode",
          "norm": null,
          "value": "false",
          "line": 981,
          "bound": null
        }
      ],
      "ret": "Ok(match asst.kind {\n            ast::AssertionKind::StartLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::StartCRLF\n                } else {\n                    hir::Look::StartLF\n                }\n            } else {\n                hir::Look::Start\n            }),\n            ast::AssertionKind::EndLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::EndCRLF\n                } else {\n                    hir::Look::EndLF\n                }\n            } else {\n                hir::Look::End\n            }),\n            ast::AssertionKind::StartText => Hir::look(hir::Look::Start),\n            ast::AssertionKind::EndText => Hir::look(hir::Look::End),\n            ast::AssertionKind::WordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicode\n            } else {\n                hir::Look::WordAscii\n            }),\n            ast::AssertionKind::NotWordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicodeNegate\n            } else {\n                hir::Look::WordAsciiNegate\n            }),\n            ast::AssertionKind::WordBoundaryStart\n            | ast::AssertionKind::WordBoundaryStartAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartUnicode\n                } else {\n                    hir::Look::WordStartAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEnd\n            | ast::AssertionKind::WordBoundaryEndAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordEndUnicode\n                } else {\n                    hir::Look::WordEndAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryStartHalf => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartHalfUnicode\n                } else {\n                    hir::Look::WordStartHalfAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEndHalf => Hir::look(if unicode {\n                hir::Look::WordEndHalfUnicode\n            } else {\n                hir::Look::WordEndHalfAscii\n            }),\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        15,
        64,
        65,
        66,
        67,
        68
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "asst.kind matches ast::AssertionKind::WordBoundaryStartHalf",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "asst.kind matches ast::AssertionKind::WordBoundaryStartHalf",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "unicode",
          "norm": null,
          "value": "true",
          "line": 975,
          "bound": null
        }
      ],
      "ret": "Ok(match asst.kind {\n            ast::AssertionKind::StartLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::StartCRLF\n                } else {\n                    hir::Look::StartLF\n                }\n            } else {\n                hir::Look::Start\n            }),\n            ast::AssertionKind::EndLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::EndCRLF\n                } else {\n                    hir::Look::EndLF\n                }\n            } else {\n                hir::Look::End\n            }),\n            ast::AssertionKind::StartText => Hir::look(hir::Look::Start),\n            ast::AssertionKind::EndText => Hir::look(hir::Look::End),\n            ast::AssertionKind::WordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicode\n            } else {\n                hir::Look::WordAscii\n            }),\n            ast::AssertionKind::NotWordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicodeNegate\n            } else {\n                hir::Look::WordAsciiNegate\n            }),\n            ast::AssertionKind::WordBoundaryStart\n            | ast::AssertionKind::WordBoundaryStartAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartUnicode\n                } else {\n                    hir::Look::WordStartAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEnd\n            | ast::AssertionKind::WordBoundaryEndAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordEndUnicode\n                } else {\n                    hir::Look::WordEndAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryStartHalf => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartHalfUnicode\n                } else {\n                    hir::Look::WordStartHalfAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEndHalf => Hir::look(if unicode {\n                hir::Look::WordEndHalfUnicode\n            } else {\n                hir::Look::WordEndHalfAscii\n            }),\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        14,
        58,
        59,
        61,
        62,
        67,
        68
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "asst.kind matches ast::AssertionKind::WordBoundaryStartHalf",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "asst.kind matches ast::AssertionKind::WordBoundaryStartHalf",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "unicode",
          "norm": null,
          "value": "false",
          "line": 975,
          "bound": null
        }
      ],
      "ret": "Ok(match asst.kind {\n            ast::AssertionKind::StartLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::StartCRLF\n                } else {\n                    hir::Look::StartLF\n                }\n            } else {\n                hir::Look::Start\n            }),\n            ast::AssertionKind::EndLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::EndCRLF\n                } else {\n                    hir::Look::EndLF\n                }\n            } else {\n                hir::Look::End\n            }),\n            ast::AssertionKind::StartText => Hir::look(hir::Look::Start),\n            ast::AssertionKind::EndText => Hir::look(hir::Look::End),\n            ast::AssertionKind::WordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicode\n            } else {\n                hir::Look::WordAscii\n            }),\n            ast::AssertionKind::NotWordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicodeNegate\n            } else {\n                hir::Look::WordAsciiNegate\n            }),\n            ast::AssertionKind::WordBoundaryStart\n            | ast::AssertionKind::WordBoundaryStartAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartUnicode\n                } else {\n                    hir::Look::WordStartAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEnd\n            | ast::AssertionKind::WordBoundaryEndAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordEndUnicode\n                } else {\n                    hir::Look::WordEndAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryStartHalf => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartHalfUnicode\n                } else {\n                    hir::Look::WordStartHalfAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEndHalf => Hir::look(if unicode {\n                hir::Look::WordEndHalfUnicode\n            } else {\n                hir::Look::WordEndHalfAscii\n            }),\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        14,
        58,
        60,
        61,
        62,
        67,
        68
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "asst.kind matches ast::AssertionKind::WordBoundaryEndAngle",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "asst.kind matches ast::AssertionKind::WordBoundaryEndAngle or ast::AssertionKind::WordBoundaryEnd",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "unicode",
          "norm": null,
          "value": "true",
          "line": 968,
          "bound": null
        }
      ],
      "ret": "Ok(match asst.kind {\n            ast::AssertionKind::StartLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::StartCRLF\n                } else {\n                    hir::Look::StartLF\n                }\n            } else {\n                hir::Look::Start\n            }),\n            ast::AssertionKind::EndLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::EndCRLF\n                } else {\n                    hir::Look::EndLF\n                }\n            } else {\n                hir::Look::End\n            }),\n            ast::AssertionKind::StartText => Hir::look(hir::Look::Start),\n            ast::AssertionKind::EndText => Hir::look(hir::Look::End),\n            ast::AssertionKind::WordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicode\n            } else {\n                hir::Look::WordAscii\n            }),\n            ast::AssertionKind::NotWordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicodeNegate\n            } else {\n                hir::Look::WordAsciiNegate\n            }),\n            ast::AssertionKind::WordBoundaryStart\n            | ast::AssertionKind::WordBoundaryStartAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartUnicode\n                } else {\n                    hir::Look::WordStartAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEnd\n            | ast::AssertionKind::WordBoundaryEndAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordEndUnicode\n                } else {\n                    hir::Look::WordEndAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryStartHalf => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartHalfUnicode\n                } else {\n                    hir::Look::WordStartHalfAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEndHalf => Hir::look(if unicode {\n                hir::Look::WordEndHalfUnicode\n            } else {\n                hir::Look::WordEndHalfAscii\n            }),\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        17,
        53,
        54,
        56,
        57,
        67,
        68
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "asst.kind matches ast::AssertionKind::WordBoundaryEndAngle",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "asst.kind matches ast::AssertionKind::WordBoundaryEndAngle or ast::AssertionKind::WordBoundaryEnd",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "unicode",
          "norm": null,
          "value": "false",
          "line": 968,
          "bound": null
        }
      ],
      "ret": "Ok(match asst.kind {\n            ast::AssertionKind::StartLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::StartCRLF\n                } else {\n                    hir::Look::StartLF\n                }\n            } else {\n                hir::Look::Start\n            }),\n            ast::AssertionKind::EndLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::EndCRLF\n                } else {\n                    hir::Look::EndLF\n                }\n            } else {\n                hir::Look::End\n            }),\n            ast::AssertionKind::StartText => Hir::look(hir::Look::Start),\n            ast::AssertionKind::EndText => Hir::look(hir::Look::End),\n            ast::AssertionKind::WordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicode\n            } else {\n                hir::Look::WordAscii\n            }),\n            ast::AssertionKind::NotWordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicodeNegate\n            } else {\n                hir::Look::WordAsciiNegate\n            }),\n            ast::AssertionKind::WordBoundaryStart\n            | ast::AssertionKind::WordBoundaryStartAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartUnicode\n                } else {\n                    hir::Look::WordStartAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEnd\n            | ast::AssertionKind::WordBoundaryEndAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordEndUnicode\n                } else {\n                    hir::Look::WordEndAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryStartHalf => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartHalfUnicode\n                } else {\n                    hir::Look::WordStartHalfAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEndHalf => Hir::look(if unicode {\n                hir::Look::WordEndHalfUnicode\n            } else {\n                hir::Look::WordEndHalfAscii\n            }),\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        17,
        53,
        55,
        56,
        57,
        67,
        68
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "asst.kind matches ast::AssertionKind::WordBoundaryStartAngle",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "asst.kind matches ast::AssertionKind::WordBoundaryStart or ast::AssertionKind::WordBoundaryStartAngle",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "unicode",
          "norm": null,
          "value": "true",
          "line": 960,
          "bound": null
        }
      ],
      "ret": "Ok(match asst.kind {\n            ast::AssertionKind::StartLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::StartCRLF\n                } else {\n                    hir::Look::StartLF\n                }\n            } else {\n                hir::Look::Start\n            }),\n            ast::AssertionKind::EndLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::EndCRLF\n                } else {\n                    hir::Look::EndLF\n                }\n            } else {\n                hir::Look::End\n            }),\n            ast::AssertionKind::StartText => Hir::look(hir::Look::Start),\n            ast::AssertionKind::EndText => Hir::look(hir::Look::End),\n            ast::AssertionKind::WordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicode\n            } else {\n                hir::Look::WordAscii\n            }),\n            ast::AssertionKind::NotWordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicodeNegate\n            } else {\n                hir::Look::WordAsciiNegate\n            }),\n            ast::AssertionKind::WordBoundaryStart\n            | ast::AssertionKind::WordBoundaryStartAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartUnicode\n                } else {\n                    hir::Look::WordStartAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEnd\n            | ast::AssertionKind::WordBoundaryEndAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordEndUnicode\n                } else {\n                    hir::Look::WordEndAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryStartHalf => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartHalfUnicode\n                } else {\n                    hir::Look::WordStartHalfAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEndHalf => Hir::look(if unicode {\n                hir::Look::WordEndHalfUnicode\n            } else {\n                hir::Look::WordEndHalfAscii\n            }),\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        16,
        48,
        49,
        51,
        52,
        67,
        68
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "asst.kind matches ast::AssertionKind::WordBoundaryStartAngle",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "asst.kind matches ast::AssertionKind::WordBoundaryStart or ast::AssertionKind::WordBoundaryStartAngle",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "unicode",
          "norm": null,
          "value": "false",
          "line": 960,
          "bound": null
        }
      ],
      "ret": "Ok(match asst.kind {\n            ast::AssertionKind::StartLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::StartCRLF\n                } else {\n                    hir::Look::StartLF\n                }\n            } else {\n                hir::Look::Start\n            }),\n            ast::AssertionKind::EndLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::EndCRLF\n                } else {\n                    hir::Look::EndLF\n                }\n            } else {\n                hir::Look::End\n            }),\n            ast::AssertionKind::StartText => Hir::look(hir::Look::Start),\n            ast::AssertionKind::EndText => Hir::look(hir::Look::End),\n            ast::AssertionKind::WordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicode\n            } else {\n                hir::Look::WordAscii\n            }),\n            ast::AssertionKind::NotWordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicodeNegate\n            } else {\n                hir::Look::WordAsciiNegate\n            }),\n            ast::AssertionKind::WordBoundaryStart\n            | ast::AssertionKind::WordBoundaryStartAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartUnicode\n                } else {\n                    hir::Look::WordStartAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEnd\n            | ast::AssertionKind::WordBoundaryEndAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordEndUnicode\n                } else {\n                    hir::Look::WordEndAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryStartHalf => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartHalfUnicode\n                } else {\n                    hir::Look::WordStartHalfAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEndHalf => Hir::look(if unicode {\n                hir::Look::WordEndHalfUnicode\n            } else {\n                hir::Look::WordEndHalfAscii\n            }),\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        16,
        48,
        50,
        51,
        52,
        67,
        68
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "asst.kind matches ast::AssertionKind::WordBoundaryEnd",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "asst.kind matches ast::AssertionKind::WordBoundaryEndAngle or ast::AssertionKind::WordBoundaryEnd",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "unicode",
          "norm": null,
          "value": "true",
          "line": 968,
          "bound": null
        }
      ],
      "ret": "Ok(match asst.kind {\n            ast::AssertionKind::StartLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::StartCRLF\n                } else {\n                    hir::Look::StartLF\n                }\n            } else {\n                hir::Look::Start\n            }),\n            ast::AssertionKind::EndLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::EndCRLF\n                } else {\n                    hir::Look::EndLF\n                }\n            } else {\n                hir::Look::End\n            }),\n            ast::AssertionKind::StartText => Hir::look(hir::Look::Start),\n            ast::AssertionKind::EndText => Hir::look(hir::Look::End),\n            ast::AssertionKind::WordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicode\n            } else {\n                hir::Look::WordAscii\n            }),\n            ast::AssertionKind::NotWordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicodeNegate\n            } else {\n                hir::Look::WordAsciiNegate\n            }),\n            ast::AssertionKind::WordBoundaryStart\n            | ast::AssertionKind::WordBoundaryStartAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartUnicode\n                } else {\n                    hir::Look::WordStartAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEnd\n            | ast::AssertionKind::WordBoundaryEndAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordEndUnicode\n                } else {\n                    hir::Look::WordEndAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryStartHalf => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartHalfUnicode\n                } else {\n                    hir::Look::WordStartHalfAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEndHalf => Hir::look(if unicode {\n                hir::Look::WordEndHalfUnicode\n            } else {\n                hir::Look::WordEndHalfAscii\n            }),\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        17,
        53,
        54,
        56,
        57,
        67,
        68
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "asst.kind matches ast::AssertionKind::WordBoundaryEnd",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "asst.kind matches ast::AssertionKind::WordBoundaryEndAngle or ast::AssertionKind::WordBoundaryEnd",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "unicode",
          "norm": null,
          "value": "false",
          "line": 968,
          "bound": null
        }
      ],
      "ret": "Ok(match asst.kind {\n            ast::AssertionKind::StartLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::StartCRLF\n                } else {\n                    hir::Look::StartLF\n                }\n            } else {\n                hir::Look::Start\n            }),\n            ast::AssertionKind::EndLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::EndCRLF\n                } else {\n                    hir::Look::EndLF\n                }\n            } else {\n                hir::Look::End\n            }),\n            ast::AssertionKind::StartText => Hir::look(hir::Look::Start),\n            ast::AssertionKind::EndText => Hir::look(hir::Look::End),\n            ast::AssertionKind::WordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicode\n            } else {\n                hir::Look::WordAscii\n            }),\n            ast::AssertionKind::NotWordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicodeNegate\n            } else {\n                hir::Look::WordAsciiNegate\n            }),\n            ast::AssertionKind::WordBoundaryStart\n            | ast::AssertionKind::WordBoundaryStartAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartUnicode\n                } else {\n                    hir::Look::WordStartAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEnd\n            | ast::AssertionKind::WordBoundaryEndAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordEndUnicode\n                } else {\n                    hir::Look::WordEndAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryStartHalf => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartHalfUnicode\n                } else {\n                    hir::Look::WordStartHalfAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEndHalf => Hir::look(if unicode {\n                hir::Look::WordEndHalfUnicode\n            } else {\n                hir::Look::WordEndHalfAscii\n            }),\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        17,
        53,
        55,
        56,
        57,
        67,
        68
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "asst.kind matches ast::AssertionKind::WordBoundaryStart",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "asst.kind matches ast::AssertionKind::WordBoundaryStart or ast::AssertionKind::WordBoundaryStartAngle",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "unicode",
          "norm": null,
          "value": "true",
          "line": 960,
          "bound": null
        }
      ],
      "ret": "Ok(match asst.kind {\n            ast::AssertionKind::StartLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::StartCRLF\n                } else {\n                    hir::Look::StartLF\n                }\n            } else {\n                hir::Look::Start\n            }),\n            ast::AssertionKind::EndLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::EndCRLF\n                } else {\n                    hir::Look::EndLF\n                }\n            } else {\n                hir::Look::End\n            }),\n            ast::AssertionKind::StartText => Hir::look(hir::Look::Start),\n            ast::AssertionKind::EndText => Hir::look(hir::Look::End),\n            ast::AssertionKind::WordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicode\n            } else {\n                hir::Look::WordAscii\n            }),\n            ast::AssertionKind::NotWordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicodeNegate\n            } else {\n                hir::Look::WordAsciiNegate\n            }),\n            ast::AssertionKind::WordBoundaryStart\n            | ast::AssertionKind::WordBoundaryStartAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartUnicode\n                } else {\n                    hir::Look::WordStartAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEnd\n            | ast::AssertionKind::WordBoundaryEndAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordEndUnicode\n                } else {\n                    hir::Look::WordEndAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryStartHalf => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartHalfUnicode\n                } else {\n                    hir::Look::WordStartHalfAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEndHalf => Hir::look(if unicode {\n                hir::Look::WordEndHalfUnicode\n            } else {\n                hir::Look::WordEndHalfAscii\n            }),\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        16,
        48,
        49,
        51,
        52,
        67,
        68
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "asst.kind matches ast::AssertionKind::WordBoundaryStart",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "asst.kind matches ast::AssertionKind::WordBoundaryStart or ast::AssertionKind::WordBoundaryStartAngle",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "unicode",
          "norm": null,
          "value": "false",
          "line": 960,
          "bound": null
        }
      ],
      "ret": "Ok(match asst.kind {\n            ast::AssertionKind::StartLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::StartCRLF\n                } else {\n                    hir::Look::StartLF\n                }\n            } else {\n                hir::Look::Start\n            }),\n            ast::AssertionKind::EndLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::EndCRLF\n                } else {\n                    hir::Look::EndLF\n                }\n            } else {\n                hir::Look::End\n            }),\n            ast::AssertionKind::StartText => Hir::look(hir::Look::Start),\n            ast::AssertionKind::EndText => Hir::look(hir::Look::End),\n            ast::AssertionKind::WordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicode\n            } else {\n                hir::Look::WordAscii\n            }),\n            ast::AssertionKind::NotWordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicodeNegate\n            } else {\n                hir::Look::WordAsciiNegate\n            }),\n            ast::AssertionKind::WordBoundaryStart\n            | ast::AssertionKind::WordBoundaryStartAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartUnicode\n                } else {\n                    hir::Look::WordStartAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEnd\n            | ast::AssertionKind::WordBoundaryEndAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordEndUnicode\n                } else {\n                    hir::Look::WordEndAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryStartHalf => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartHalfUnicode\n                } else {\n                    hir::Look::WordStartHalfAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEndHalf => Hir::look(if unicode {\n                hir::Look::WordEndHalfUnicode\n            } else {\n                hir::Look::WordEndHalfAscii\n            }),\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        16,
        48,
        50,
        51,
        52,
        67,
        68
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "asst.kind matches ast::AssertionKind::NotWordBoundary",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "asst.kind matches ast::AssertionKind::NotWordBoundary",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "unicode",
          "norm": null,
          "value": "true",
          "line": 953,
          "bound": null
        }
      ],
      "ret": "Ok(match asst.kind {\n            ast::AssertionKind::StartLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::StartCRLF\n                } else {\n                    hir::Look::StartLF\n                }\n            } else {\n                hir::Look::Start\n            }),\n            ast::AssertionKind::EndLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::EndCRLF\n                } else {\n                    hir::Look::EndLF\n                }\n            } else {\n                hir::Look::End\n            }),\n            ast::AssertionKind::StartText => Hir::look(hir::Look::Start),\n            ast::AssertionKind::EndText => Hir::look(hir::Look::End),\n            ast::AssertionKind::WordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicode\n            } else {\n                hir::Look::WordAscii\n            }),\n            ast::AssertionKind::NotWordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicodeNegate\n            } else {\n                hir::Look::WordAsciiNegate\n            }),\n            ast::AssertionKind::WordBoundaryStart\n            | ast::AssertionKind::WordBoundaryStartAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartUnicode\n                } else {\n                    hir::Look::WordStartAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEnd\n            | ast::AssertionKind::WordBoundaryEndAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordEndUnicode\n                } else {\n                    hir::Look::WordEndAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryStartHalf => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartHalfUnicode\n                } else {\n                    hir::Look::WordStartHalfAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEndHalf => Hir::look(if unicode {\n                hir::Look::WordEndHalfUnicode\n            } else {\n                hir::Look::WordEndHalfAscii\n            }),\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        43,
        44,
        46,
        47,
        67,
        68
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "asst.kind matches ast::AssertionKind::NotWordBoundary",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "asst.kind matches ast::AssertionKind::NotWordBoundary",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "unicode",
          "norm": null,
          "value": "false",
          "line": 953,
          "bound": null
        }
      ],
      "ret": "Ok(match asst.kind {\n            ast::AssertionKind::StartLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::StartCRLF\n                } else {\n                    hir::Look::StartLF\n                }\n            } else {\n                hir::Look::Start\n            }),\n            ast::AssertionKind::EndLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::EndCRLF\n                } else {\n                    hir::Look::EndLF\n                }\n            } else {\n                hir::Look::End\n            }),\n            ast::AssertionKind::StartText => Hir::look(hir::Look::Start),\n            ast::AssertionKind::EndText => Hir::look(hir::Look::End),\n            ast::AssertionKind::WordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicode\n            } else {\n                hir::Look::WordAscii\n            }),\n            ast::AssertionKind::NotWordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicodeNegate\n            } else {\n                hir::Look::WordAsciiNegate\n            }),\n            ast::AssertionKind::WordBoundaryStart\n            | ast::AssertionKind::WordBoundaryStartAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartUnicode\n                } else {\n                    hir::Look::WordStartAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEnd\n            | ast::AssertionKind::WordBoundaryEndAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordEndUnicode\n                } else {\n                    hir::Look::WordEndAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryStartHalf => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartHalfUnicode\n                } else {\n                    hir::Look::WordStartHalfAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEndHalf => Hir::look(if unicode {\n                hir::Look::WordEndHalfUnicode\n            } else {\n                hir::Look::WordEndHalfAscii\n            }),\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        43,
        45,
        46,
        47,
        67,
        68
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "asst.kind matches ast::AssertionKind::WordBoundary",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "asst.kind matches ast::AssertionKind::WordBoundary",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "unicode",
          "norm": null,
          "value": "true",
          "line": 948,
          "bound": null
        }
      ],
      "ret": "Ok(match asst.kind {\n            ast::AssertionKind::StartLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::StartCRLF\n                } else {\n                    hir::Look::StartLF\n                }\n            } else {\n                hir::Look::Start\n            }),\n            ast::AssertionKind::EndLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::EndCRLF\n                } else {\n                    hir::Look::EndLF\n                }\n            } else {\n                hir::Look::End\n            }),\n            ast::AssertionKind::StartText => Hir::look(hir::Look::Start),\n            ast::AssertionKind::EndText => Hir::look(hir::Look::End),\n            ast::AssertionKind::WordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicode\n            } else {\n                hir::Look::WordAscii\n            }),\n            ast::AssertionKind::NotWordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicodeNegate\n            } else {\n                hir::Look::WordAsciiNegate\n            }),\n            ast::AssertionKind::WordBoundaryStart\n            | ast::AssertionKind::WordBoundaryStartAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartUnicode\n                } else {\n                    hir::Look::WordStartAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEnd\n            | ast::AssertionKind::WordBoundaryEndAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordEndUnicode\n                } else {\n                    hir::Look::WordEndAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryStartHalf => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartHalfUnicode\n                } else {\n                    hir::Look::WordStartHalfAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEndHalf => Hir::look(if unicode {\n                hir::Look::WordEndHalfUnicode\n            } else {\n                hir::Look::WordEndHalfAscii\n            }),\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        12,
        38,
        39,
        41,
        42,
        67,
        68
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "asst.kind matches ast::AssertionKind::WordBoundary",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "asst.kind matches ast::AssertionKind::WordBoundary",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "unicode",
          "norm": null,
          "value": "false",
          "line": 948,
          "bound": null
        }
      ],
      "ret": "Ok(match asst.kind {\n            ast::AssertionKind::StartLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::StartCRLF\n                } else {\n                    hir::Look::StartLF\n                }\n            } else {\n                hir::Look::Start\n            }),\n            ast::AssertionKind::EndLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::EndCRLF\n                } else {\n                    hir::Look::EndLF\n                }\n            } else {\n                hir::Look::End\n            }),\n            ast::AssertionKind::StartText => Hir::look(hir::Look::Start),\n            ast::AssertionKind::EndText => Hir::look(hir::Look::End),\n            ast::AssertionKind::WordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicode\n            } else {\n                hir::Look::WordAscii\n            }),\n            ast::AssertionKind::NotWordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicodeNegate\n            } else {\n                hir::Look::WordAsciiNegate\n            }),\n            ast::AssertionKind::WordBoundaryStart\n            | ast::AssertionKind::WordBoundaryStartAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartUnicode\n                } else {\n                    hir::Look::WordStartAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEnd\n            | ast::AssertionKind::WordBoundaryEndAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordEndUnicode\n                } else {\n                    hir::Look::WordEndAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryStartHalf => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartHalfUnicode\n                } else {\n                    hir::Look::WordStartHalfAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEndHalf => Hir::look(if unicode {\n                hir::Look::WordEndHalfUnicode\n            } else {\n                hir::Look::WordEndHalfAscii\n            }),\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        12,
        38,
        40,
        41,
        42,
        67,
        68
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "asst.kind matches ast::AssertionKind::EndText",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "asst.kind matches ast::AssertionKind::EndText",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        }
      ],
      "ret": "Ok(match asst.kind {\n            ast::AssertionKind::StartLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::StartCRLF\n                } else {\n                    hir::Look::StartLF\n                }\n            } else {\n                hir::Look::Start\n            }),\n            ast::AssertionKind::EndLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::EndCRLF\n                } else {\n                    hir::Look::EndLF\n                }\n            } else {\n                hir::Look::End\n            }),\n            ast::AssertionKind::StartText => Hir::look(hir::Look::Start),\n            ast::AssertionKind::EndText => Hir::look(hir::Look::End),\n            ast::AssertionKind::WordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicode\n            } else {\n                hir::Look::WordAscii\n            }),\n            ast::AssertionKind::NotWordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicodeNegate\n            } else {\n                hir::Look::WordAsciiNegate\n            }),\n            ast::AssertionKind::WordBoundaryStart\n            | ast::AssertionKind::WordBoundaryStartAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartUnicode\n                } else {\n                    hir::Look::WordStartAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEnd\n            | ast::AssertionKind::WordBoundaryEndAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordEndUnicode\n                } else {\n                    hir::Look::WordEndAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryStartHalf => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartHalfUnicode\n                } else {\n                    hir::Look::WordStartHalfAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEndHalf => Hir::look(if unicode {\n                hir::Look::WordEndHalfUnicode\n            } else {\n                hir::Look::WordEndHalfAscii\n            }),\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        11,
        36,
        37,
        67,
        68
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "asst.kind matches ast::AssertionKind::StartText",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "asst.kind matches ast::AssertionKind::StartText",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        }
      ],
      "ret": "Ok(match asst.kind {\n            ast::AssertionKind::StartLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::StartCRLF\n                } else {\n                    hir::Look::StartLF\n                }\n            } else {\n                hir::Look::Start\n            }),\n            ast::AssertionKind::EndLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::EndCRLF\n                } else {\n                    hir::Look::EndLF\n                }\n            } else {\n                hir::Look::End\n            }),\n            ast::AssertionKind::StartText => Hir::look(hir::Look::Start),\n            ast::AssertionKind::EndText => Hir::look(hir::Look::End),\n            ast::AssertionKind::WordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicode\n            } else {\n                hir::Look::WordAscii\n            }),\n            ast::AssertionKind::NotWordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicodeNegate\n            } else {\n                hir::Look::WordAsciiNegate\n            }),\n            ast::AssertionKind::WordBoundaryStart\n            | ast::AssertionKind::WordBoundaryStartAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartUnicode\n                } else {\n                    hir::Look::WordStartAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEnd\n            | ast::AssertionKind::WordBoundaryEndAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordEndUnicode\n                } else {\n                    hir::Look::WordEndAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryStartHalf => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartHalfUnicode\n                } else {\n                    hir::Look::WordStartHalfAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEndHalf => Hir::look(if unicode {\n                hir::Look::WordEndHalfUnicode\n            } else {\n                hir::Look::WordEndHalfAscii\n            }),\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        34,
        35,
        67,
        68
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "asst.kind matches ast::AssertionKind::EndLine",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "asst.kind matches ast::AssertionKind::EndLine",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "multi_line",
          "norm": null,
          "value": "true",
          "line": 937,
          "bound": null
        },
        {
          "cond": "crlf",
          "norm": null,
          "value": "true",
          "line": 938,
          "bound": null
        }
      ],
      "ret": "Ok(match asst.kind {\n            ast::AssertionKind::StartLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::StartCRLF\n                } else {\n                    hir::Look::StartLF\n                }\n            } else {\n                hir::Look::Start\n            }),\n            ast::AssertionKind::EndLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::EndCRLF\n                } else {\n                    hir::Look::EndLF\n                }\n            } else {\n                hir::Look::End\n            }),\n            ast::AssertionKind::StartText => Hir::look(hir::Look::Start),\n            ast::AssertionKind::EndText => Hir::look(hir::Look::End),\n            ast::AssertionKind::WordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicode\n            } else {\n                hir::Look::WordAscii\n            }),\n            ast::AssertionKind::NotWordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicodeNegate\n            } else {\n                hir::Look::WordAsciiNegate\n            }),\n            ast::AssertionKind::WordBoundaryStart\n            | ast::AssertionKind::WordBoundaryStartAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartUnicode\n                } else {\n                    hir::Look::WordStartAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEnd\n            | ast::AssertionKind::WordBoundaryEndAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordEndUnicode\n                } else {\n                    hir::Look::WordEndAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryStartHalf => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartHalfUnicode\n                } else {\n                    hir::Look::WordStartHalfAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEndHalf => Hir::look(if unicode {\n                hir::Look::WordEndHalfUnicode\n            } else {\n                hir::Look::WordEndHalfAscii\n            }),\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        26,
        27,
        28,
        30,
        32,
        33,
        67,
        68
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "asst.kind matches ast::AssertionKind::EndLine",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "asst.kind matches ast::AssertionKind::EndLine",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "multi_line",
          "norm": null,
          "value": "true",
          "line": 937,
          "bound": null
        },
        {
          "cond": "crlf",
          "norm": null,
          "value": "false",
          "line": 938,
          "bound": null
        }
      ],
      "ret": "Ok(match asst.kind {\n            ast::AssertionKind::StartLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::StartCRLF\n                } else {\n                    hir::Look::StartLF\n                }\n            } else {\n                hir::Look::Start\n            }),\n            ast::AssertionKind::EndLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::EndCRLF\n                } else {\n                    hir::Look::EndLF\n                }\n            } else {\n                hir::Look::End\n            }),\n            ast::AssertionKind::StartText => Hir::look(hir::Look::Start),\n            ast::AssertionKind::EndText => Hir::look(hir::Look::End),\n            ast::AssertionKind::WordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicode\n            } else {\n                hir::Look::WordAscii\n            }),\n            ast::AssertionKind::NotWordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicodeNegate\n            } else {\n                hir::Look::WordAsciiNegate\n            }),\n            ast::AssertionKind::WordBoundaryStart\n            | ast::AssertionKind::WordBoundaryStartAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartUnicode\n                } else {\n                    hir::Look::WordStartAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEnd\n            | ast::AssertionKind::WordBoundaryEndAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordEndUnicode\n                } else {\n                    hir::Look::WordEndAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryStartHalf => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartHalfUnicode\n                } else {\n                    hir::Look::WordStartHalfAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEndHalf => Hir::look(if unicode {\n                hir::Look::WordEndHalfUnicode\n            } else {\n                hir::Look::WordEndHalfAscii\n            }),\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        26,
        27,
        29,
        30,
        32,
        33,
        67,
        68
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "asst.kind matches ast::AssertionKind::EndLine",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "asst.kind matches ast::AssertionKind::EndLine",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "multi_line",
          "norm": null,
          "value": "false",
          "line": 937,
          "bound": null
        }
      ],
      "ret": "Ok(match asst.kind {\n            ast::AssertionKind::StartLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::StartCRLF\n                } else {\n                    hir::Look::StartLF\n                }\n            } else {\n                hir::Look::Start\n            }),\n            ast::AssertionKind::EndLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::EndCRLF\n                } else {\n                    hir::Look::EndLF\n                }\n            } else {\n                hir::Look::End\n            }),\n            ast::AssertionKind::StartText => Hir::look(hir::Look::Start),\n            ast::AssertionKind::EndText => Hir::look(hir::Look::End),\n            ast::AssertionKind::WordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicode\n            } else {\n                hir::Look::WordAscii\n            }),\n            ast::AssertionKind::NotWordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicodeNegate\n            } else {\n                hir::Look::WordAsciiNegate\n            }),\n            ast::AssertionKind::WordBoundaryStart\n            | ast::AssertionKind::WordBoundaryStartAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartUnicode\n                } else {\n                    hir::Look::WordStartAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEnd\n            | ast::AssertionKind::WordBoundaryEndAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordEndUnicode\n                } else {\n                    hir::Look::WordEndAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryStartHalf => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartHalfUnicode\n                } else {\n                    hir::Look::WordStartHalfAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEndHalf => Hir::look(if unicode {\n                hir::Look::WordEndHalfUnicode\n            } else {\n                hir::Look::WordEndHalfAscii\n            }),\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        26,
        31,
        32,
        33,
        67,
        68
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "asst.kind matches ast::AssertionKind::StartLine",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "asst.kind matches ast::AssertionKind::StartLine",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "multi_line",
          "norm": null,
          "value": "true",
          "line": 928,
          "bound": null
        },
        {
          "cond": "crlf",
          "norm": null,
          "value": "true",
          "line": 929,
          "bound": null
        }
      ],
      "ret": "Ok(match asst.kind {\n            ast::AssertionKind::StartLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::StartCRLF\n                } else {\n                    hir::Look::StartLF\n                }\n            } else {\n                hir::Look::Start\n            }),\n            ast::AssertionKind::EndLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::EndCRLF\n                } else {\n                    hir::Look::EndLF\n                }\n            } else {\n                hir::Look::End\n            }),\n            ast::AssertionKind::StartText => Hir::look(hir::Look::Start),\n            ast::AssertionKind::EndText => Hir::look(hir::Look::End),\n            ast::AssertionKind::WordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicode\n            } else {\n                hir::Look::WordAscii\n            }),\n            ast::AssertionKind::NotWordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicodeNegate\n            } else {\n                hir::Look::WordAsciiNegate\n            }),\n            ast::AssertionKind::WordBoundaryStart\n            | ast::AssertionKind::WordBoundaryStartAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartUnicode\n                } else {\n                    hir::Look::WordStartAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEnd\n            | ast::AssertionKind::WordBoundaryEndAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordEndUnicode\n                } else {\n                    hir::Look::WordEndAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryStartHalf => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartHalfUnicode\n                } else {\n                    hir::Look::WordStartHalfAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEndHalf => Hir::look(if unicode {\n                hir::Look::WordEndHalfUnicode\n            } else {\n                hir::Look::WordEndHalfAscii\n            }),\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        18,
        19,
        20,
        22,
        24,
        25,
        67,
        68
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "asst.kind matches ast::AssertionKind::StartLine",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "asst.kind matches ast::AssertionKind::StartLine",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "multi_line",
          "norm": null,
          "value": "true",
          "line": 928,
          "bound": null
        },
        {
          "cond": "crlf",
          "norm": null,
          "value": "false",
          "line": 929,
          "bound": null
        }
      ],
      "ret": "Ok(match asst.kind {\n            ast::AssertionKind::StartLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::StartCRLF\n                } else {\n                    hir::Look::StartLF\n                }\n            } else {\n                hir::Look::Start\n            }),\n            ast::AssertionKind::EndLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::EndCRLF\n                } else {\n                    hir::Look::EndLF\n                }\n            } else {\n                hir::Look::End\n            }),\n            ast::AssertionKind::StartText => Hir::look(hir::Look::Start),\n            ast::AssertionKind::EndText => Hir::look(hir::Look::End),\n            ast::AssertionKind::WordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicode\n            } else {\n                hir::Look::WordAscii\n            }),\n            ast::AssertionKind::NotWordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicodeNegate\n            } else {\n                hir::Look::WordAsciiNegate\n            }),\n            ast::AssertionKind::WordBoundaryStart\n            | ast::AssertionKind::WordBoundaryStartAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartUnicode\n                } else {\n                    hir::Look::WordStartAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEnd\n            | ast::AssertionKind::WordBoundaryEndAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordEndUnicode\n                } else {\n                    hir::Look::WordEndAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryStartHalf => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartHalfUnicode\n                } else {\n                    hir::Look::WordStartHalfAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEndHalf => Hir::look(if unicode {\n                hir::Look::WordEndHalfUnicode\n            } else {\n                hir::Look::WordEndHalfAscii\n            }),\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        18,
        19,
        21,
        22,
        24,
        25,
        67,
        68
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "asst.kind matches ast::AssertionKind::StartLine",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "asst.kind matches ast::AssertionKind::StartLine",
          "norm": null,
          "value": "true",
          "line": 927,
          "bound": null
        },
        {
          "cond": "multi_line",
          "norm": null,
          "value": "false",
          "line": 928,
          "bound": null
        }
      ],
      "ret": "Ok(match asst.kind {\n            ast::AssertionKind::StartLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::StartCRLF\n                } else {\n                    hir::Look::StartLF\n                }\n            } else {\n                hir::Look::Start\n            }),\n            ast::AssertionKind::EndLine => Hir::look(if multi_line {\n                if crlf {\n                    hir::Look::EndCRLF\n                } else {\n                    hir::Look::EndLF\n                }\n            } else {\n                hir::Look::End\n            }),\n            ast::AssertionKind::StartText => Hir::look(hir::Look::Start),\n            ast::AssertionKind::EndText => Hir::look(hir::Look::End),\n            ast::AssertionKind::WordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicode\n            } else {\n                hir::Look::WordAscii\n            }),\n            ast::AssertionKind::NotWordBoundary => Hir::look(if unicode {\n                hir::Look::WordUnicodeNegate\n            } else {\n                hir::Look::WordAsciiNegate\n            }),\n            ast::AssertionKind::WordBoundaryStart\n            | ast::AssertionKind::WordBoundaryStartAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartUnicode\n                } else {\n                    hir::Look::WordStartAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEnd\n            | ast::AssertionKind::WordBoundaryEndAngle => {\n                Hir::look(if unicode {\n                    hir::Look::WordEndUnicode\n                } else {\n                    hir::Look::WordEndAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryStartHalf => {\n                Hir::look(if unicode {\n                    hir::Look::WordStartHalfUnicode\n                } else {\n                    hir::Look::WordStartHalfAscii\n                })\n            }\n            ast::AssertionKind::WordBoundaryEndHalf => Hir::look(if unicode {\n                hir::Look::WordEndHalfUnicode\n            } else {\n                hir::Look::WordEndHalfAscii\n            }),\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        18,
        23,
        24,
        25,
        67,
        68
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}