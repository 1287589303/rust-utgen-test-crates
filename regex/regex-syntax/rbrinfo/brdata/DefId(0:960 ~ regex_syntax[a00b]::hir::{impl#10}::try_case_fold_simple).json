{
  "name": "regex_syntax::hir::{impl#10}::try_case_fold_simple",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:874:5:882:6",
  "doc": "/// Apply Unicode simple case folding to this character class, in place.\n/// The character class will be expanded to include all simple case folded\n/// character variants.\n///\n/// If this is a byte oriented character class, then this will be limited\n/// to the ASCII ranges `A-Z` and `a-z`.\n///\n/// # Error\n///\n/// This routine returns an error when the case mapping data necessary\n/// for this routine to complete is unavailable. This occurs when the\n/// `unicode-case` feature is not enabled and the underlying class is\n/// Unicode oriented.\n",
  "code": [
    "pub fn try_case_fold_simple(",
    "    &mut self,",
    ") -> core::result::Result<(), CaseFoldError> {",
    "    match *self {",
    "        Class::Unicode(ref mut x) => x.try_case_fold_simple()?,",
    "        Class::Bytes(ref mut x) => x.case_fold_simple(),",
    "    }",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*self matches Class::Bytes(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 877,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        3,
        12,
        13,
        14
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*self matches Class::Unicode(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 877,
          "bound": null
        },
        {
          "cond": "*self matches Class::Unicode(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 877,
          "bound": null
        },
        {
          "cond": "x.try_case_fold_simple()?",
          "norm": null,
          "value": "Err/None",
          "line": 878,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        4,
        5,
        6,
        8,
        10,
        11,
        14
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "*self matches Class::Unicode(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 877,
          "bound": null
        },
        {
          "cond": "*self matches Class::Unicode(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 877,
          "bound": null
        },
        {
          "cond": "x.try_case_fold_simple()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 878,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        2,
        4,
        5,
        6,
        9,
        13,
        14
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}