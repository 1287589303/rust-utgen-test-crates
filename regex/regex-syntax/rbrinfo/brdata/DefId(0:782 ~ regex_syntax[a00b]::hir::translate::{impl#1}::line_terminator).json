{
  "name": "regex_syntax::hir::translate::{impl#1}::line_terminator",
  "mod_info": {
    "name": "hir::translate",
    "loc": "regex-syntax/src/hir/mod.rs:44:1:44:19"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/translate.rs:92:5:95:6",
  "doc": "/// Sets the line terminator for use with `(?u-s:.)` and `(?-us:.)`.\n///\n/// Namely, instead of `.` (by default) matching everything except for `\\n`,\n/// this will cause `.` to match everything except for the byte given.\n///\n/// If `.` is used in a context where Unicode mode is enabled and this byte\n/// isn't ASCII, then an error will be returned. When Unicode mode is\n/// disabled, then any byte is permitted, but will return an error if UTF-8\n/// mode is enabled and it is a non-ASCII byte.\n///\n/// In short, any ASCII value for a line terminator is always okay. But a\n/// non-ASCII byte might result in an error depending on whether Unicode\n/// mode or UTF-8 mode are enabled.\n///\n/// Note that if `R` mode is enabled then it always takes precedence and\n/// the line terminator will be treated as `\\r` and `\\n` simultaneously.\n///\n/// Note also that this *doesn't* impact the look-around assertions\n/// `(?m:^)` and `(?m:$)`. That's usually controlled by additional\n/// configuration in the regex engine itself.\n",
  "code": [
    "pub fn line_terminator(&mut self, byte: u8) -> &mut TranslatorBuilder {",
    "    self.line_terminator = byte;",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}