{
  "name": "regex_syntax::ast::parse::{impl#4}::bump",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:493:5:507:6",
  "doc": "/// Bump the parser to the next Unicode scalar value.\n///\n/// If the end of the input has been reached, then `false` is returned.\n",
  "code": [
    "fn bump(&self) -> bool {",
    "    if self.is_eof() {",
    "        return false;",
    "    }",
    "    let Position { mut offset, mut line, mut column } = self.pos();",
    "    if self.char() == '\\n' {",
    "        line = line.checked_add(1).unwrap();",
    "        column = 1;",
    "    } else {",
    "        column = column.checked_add(1).unwrap();",
    "    }",
    "    offset += self.char().len_utf8();",
    "    self.parser().pos.set(Position { offset, line, column });",
    "    self.pattern()[self.offset()..].chars().next().is_some()",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 494,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        2,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 494,
          "bound": null
        },
        {
          "cond": "self.char() == '\\n'",
          "norm": "'\\n' == self.char()",
          "value": "false",
          "line": 498,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 494,
          "bound": null
        },
        {
          "cond": "self.char() == '\\n'",
          "norm": "'\\n' == self.char()",
          "value": "true",
          "line": 498,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}