{
  "name": "regex_syntax::hir::literal::{impl#4}::dedup",
  "mod_info": {
    "name": "hir::literal",
    "loc": "regex-syntax/src/hir/mod.rs:42:1:42:17"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/literal.rs:1341:5:1354:6",
  "doc": "/// Deduplicate adjacent equivalent literals in this sequence.\n///\n/// If adjacent literals are equivalent strings but one is exact and the\n/// other inexact, the inexact literal is kept and the exact one is\n/// removed.\n///\n/// Deduping an infinite sequence is a no-op.\n///\n/// # Example\n///\n/// This example shows how literals that are duplicate byte strings but\n/// are not equivalent with respect to exactness are resolved.\n///\n/// ```\n/// use regex_syntax::hir::literal::{Literal, Seq};\n///\n/// let mut seq = Seq::from_iter([\n///     Literal::exact(\"foo\"),\n///     Literal::inexact(\"foo\"),\n/// ]);\n/// seq.dedup();\n///\n/// assert_eq!(Seq::from_iter([Literal::inexact(\"foo\")]), seq);\n/// ```\n",
  "code": [
    "pub fn dedup(&mut self) {",
    "    if let Some(ref mut lits) = self.literals {",
    "        lits.dedup_by(|lit1, lit2| {",
    "            if lit1.as_bytes() != lit2.as_bytes() {",
    "                return false;",
    "            }",
    "            if lit1.is_exact() != lit2.is_exact() {",
    "                lit1.make_inexact();",
    "                lit2.make_inexact();",
    "            }",
    "            true",
    "        });",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(ref mut lits) = self.literals",
          "norm": null,
          "value": "true",
          "line": 1342,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(ref mut lits) = self.literals",
          "norm": null,
          "value": "true",
          "line": 1342,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}