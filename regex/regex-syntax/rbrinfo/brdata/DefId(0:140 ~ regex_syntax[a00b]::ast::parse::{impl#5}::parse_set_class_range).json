{
  "name": "regex_syntax::ast::parse::{impl#5}::parse_set_class_range",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:1944:5:1978:6",
  "doc": "/// Parse a single primitive item in a character class set. The item to\n/// be parsed can either be one of a simple literal character, a range\n/// between two simple literal characters or a \"primitive\" character\n/// class like \\w or \\p{Greek}.\n///\n/// If an invalid escape is found, or if a character class is found where\n/// a simple literal is expected (e.g., in a range), then an error is\n/// returned.\n",
  "code": [
    "fn parse_set_class_range(&self) -> Result<ast::ClassSetItem> {",
    "    let prim1 = self.parse_set_class_item()?;",
    "    self.bump_space();",
    "    if self.is_eof() {",
    "        return Err(self.unclosed_class_error());",
    "    }",
    "    // If the next char isn't a `-`, then we don't have a range.",
    "    // There are two exceptions. If the char after a `-` is a `]`, then",
    "    // `-` is interpreted as a literal `-`. Alternatively, if the char",
    "    // after a `-` is a `-`, then `--` corresponds to a \"difference\"",
    "    // operation.",
    "    if self.char() != '-'",
    "        || self.peek_space() == Some(']')",
    "        || self.peek_space() == Some('-')",
    "    {",
    "        return prim1.into_class_set_item(self);",
    "    }",
    "    // OK, now we're parsing a range, so bump past the `-` and parse the",
    "    // second half of the range.",
    "    if !self.bump_and_bump_space() {",
    "        return Err(self.unclosed_class_error());",
    "    }",
    "    let prim2 = self.parse_set_class_item()?;",
    "    let range = ast::ClassSetRange {",
    "        span: Span::new(prim1.span().start, prim2.span().end),",
    "        start: prim1.into_class_literal(self)?,",
    "        end: prim2.into_class_literal(self)?,",
    "    };",
    "    if !range.is_valid() {",
    "        return Err(",
    "            self.error(range.span, ast::ErrorKind::ClassRangeInvalid)",
    "        );",
    "    }",
    "    Ok(ast::ClassSetItem::Range(range))",
    "}"
  ],
  "size": {
    "chain": 11,
    "contra": 0,
    "min_set": 11
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.parse_set_class_item()?",
          "norm": null,
          "value": "Err/None",
          "line": 1945,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        80,
        81,
        82,
        83
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.parse_set_class_item()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1945,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1947,
          "bound": null
        }
      ],
      "ret": "Err(self.unclosed_class_error())",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        79,
        82,
        83
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.parse_set_class_item()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1945,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1947,
          "bound": null
        },
        {
          "cond": "self.char() != '-'",
          "norm": "'-' != self.char()",
          "value": "true",
          "line": 1955,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        15,
        16,
        17,
        26,
        27,
        79,
        82,
        83
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.parse_set_class_item()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1945,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1947,
          "bound": null
        },
        {
          "cond": "self.char() != '-'",
          "norm": "'-' != self.char()",
          "value": "false",
          "line": 1955,
          "bound": null
        },
        {
          "cond": "self.peek_space() == Some(']')",
          "norm": "Some(']') == self.peek_space()",
          "value": "true",
          "line": 1956,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        15,
        16,
        18,
        19,
        20,
        21,
        26,
        27,
        79,
        82,
        83
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.parse_set_class_item()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1945,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1947,
          "bound": null
        },
        {
          "cond": "self.char() != '-'",
          "norm": "'-' != self.char()",
          "value": "false",
          "line": 1955,
          "bound": null
        },
        {
          "cond": "self.peek_space() == Some(']')",
          "norm": "Some(']') == self.peek_space()",
          "value": "false",
          "line": 1956,
          "bound": null
        },
        {
          "cond": "self.peek_space() == Some('-')",
          "norm": "Some('-') == self.peek_space()",
          "value": "true",
          "line": 1957,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        15,
        16,
        18,
        19,
        20,
        22,
        23,
        24,
        25,
        26,
        27,
        79,
        82,
        83
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.parse_set_class_item()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1945,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1947,
          "bound": null
        },
        {
          "cond": "self.char() != '-'",
          "norm": "'-' != self.char()",
          "value": "false",
          "line": 1955,
          "bound": null
        },
        {
          "cond": "self.peek_space() == Some(']')",
          "norm": "Some(']') == self.peek_space()",
          "value": "false",
          "line": 1956,
          "bound": null
        },
        {
          "cond": "self.peek_space() == Some('-')",
          "norm": "Some('-') == self.peek_space()",
          "value": "false",
          "line": 1957,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1963,
          "bound": null
        },
        {
          "cond": "self.parse_set_class_item()?",
          "norm": null,
          "value": "Err/None",
          "line": 1966,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        15,
        16,
        18,
        19,
        20,
        22,
        23,
        24,
        28,
        29,
        30,
        34,
        35,
        37,
        39,
        40,
        76,
        77,
        78,
        79,
        82,
        83
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.parse_set_class_item()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1945,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1947,
          "bound": null
        },
        {
          "cond": "self.char() != '-'",
          "norm": "'-' != self.char()",
          "value": "false",
          "line": 1955,
          "bound": null
        },
        {
          "cond": "self.peek_space() == Some(']')",
          "norm": "Some(']') == self.peek_space()",
          "value": "false",
          "line": 1956,
          "bound": null
        },
        {
          "cond": "self.peek_space() == Some('-')",
          "norm": "Some('-') == self.peek_space()",
          "value": "false",
          "line": 1957,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1963,
          "bound": null
        },
        {
          "cond": "self.parse_set_class_item()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1966,
          "bound": null
        },
        {
          "cond": "prim1.into_class_literal(self)?",
          "norm": null,
          "value": "Err/None",
          "line": 1969,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        15,
        16,
        18,
        19,
        20,
        22,
        23,
        24,
        28,
        29,
        30,
        34,
        35,
        38,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        49,
        51,
        52,
        72,
        73,
        74,
        75,
        78,
        79,
        82,
        83
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.parse_set_class_item()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1945,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1947,
          "bound": null
        },
        {
          "cond": "self.char() != '-'",
          "norm": "'-' != self.char()",
          "value": "false",
          "line": 1955,
          "bound": null
        },
        {
          "cond": "self.peek_space() == Some(']')",
          "norm": "Some(']') == self.peek_space()",
          "value": "false",
          "line": 1956,
          "bound": null
        },
        {
          "cond": "self.peek_space() == Some('-')",
          "norm": "Some('-') == self.peek_space()",
          "value": "false",
          "line": 1957,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1963,
          "bound": null
        },
        {
          "cond": "self.parse_set_class_item()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1966,
          "bound": null
        },
        {
          "cond": "prim1.into_class_literal(self)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1969,
          "bound": null
        },
        {
          "cond": "prim2.into_class_literal(self)?",
          "norm": null,
          "value": "Err/None",
          "line": 1970,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        15,
        16,
        18,
        19,
        20,
        22,
        23,
        24,
        28,
        29,
        30,
        34,
        35,
        38,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        50,
        53,
        54,
        56,
        58,
        59,
        70,
        71,
        73,
        74,
        75,
        78,
        79,
        82,
        83
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.parse_set_class_item()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1945,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1947,
          "bound": null
        },
        {
          "cond": "self.char() != '-'",
          "norm": "'-' != self.char()",
          "value": "false",
          "line": 1955,
          "bound": null
        },
        {
          "cond": "self.peek_space() == Some(']')",
          "norm": "Some(']') == self.peek_space()",
          "value": "false",
          "line": 1956,
          "bound": null
        },
        {
          "cond": "self.peek_space() == Some('-')",
          "norm": "Some('-') == self.peek_space()",
          "value": "false",
          "line": 1957,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1963,
          "bound": null
        },
        {
          "cond": "self.parse_set_class_item()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1966,
          "bound": null
        },
        {
          "cond": "prim1.into_class_literal(self)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1969,
          "bound": null
        },
        {
          "cond": "prim2.into_class_literal(self)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1970,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "true",
          "line": 1972,
          "bound": null
        }
      ],
      "ret": "Ok(ast::ClassSetItem::Range(range))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        15,
        16,
        18,
        19,
        20,
        22,
        23,
        24,
        28,
        29,
        30,
        34,
        35,
        38,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        50,
        53,
        54,
        57,
        60,
        61,
        62,
        63,
        67,
        68,
        69,
        83
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.parse_set_class_item()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1945,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1947,
          "bound": null
        },
        {
          "cond": "self.char() != '-'",
          "norm": "'-' != self.char()",
          "value": "false",
          "line": 1955,
          "bound": null
        },
        {
          "cond": "self.peek_space() == Some(']')",
          "norm": "Some(']') == self.peek_space()",
          "value": "false",
          "line": 1956,
          "bound": null
        },
        {
          "cond": "self.peek_space() == Some('-')",
          "norm": "Some('-') == self.peek_space()",
          "value": "false",
          "line": 1957,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1963,
          "bound": null
        },
        {
          "cond": "self.parse_set_class_item()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1966,
          "bound": null
        },
        {
          "cond": "prim1.into_class_literal(self)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1969,
          "bound": null
        },
        {
          "cond": "prim2.into_class_literal(self)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1970,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "false",
          "line": 1972,
          "bound": null
        }
      ],
      "ret": "Err(\n                self.error(range.span, ast::ErrorKind::ClassRangeInvalid)\n            )",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        15,
        16,
        18,
        19,
        20,
        22,
        23,
        24,
        28,
        29,
        30,
        34,
        35,
        38,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        50,
        53,
        54,
        57,
        60,
        61,
        62,
        64,
        65,
        66,
        75,
        78,
        79,
        82,
        83
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "self.parse_set_class_item()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1945,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1947,
          "bound": null
        },
        {
          "cond": "self.char() != '-'",
          "norm": "'-' != self.char()",
          "value": "false",
          "line": 1955,
          "bound": null
        },
        {
          "cond": "self.peek_space() == Some(']')",
          "norm": "Some(']') == self.peek_space()",
          "value": "false",
          "line": 1956,
          "bound": null
        },
        {
          "cond": "self.peek_space() == Some('-')",
          "norm": "Some('-') == self.peek_space()",
          "value": "false",
          "line": 1957,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 1963,
          "bound": null
        }
      ],
      "ret": "Err(self.unclosed_class_error())",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        15,
        16,
        18,
        19,
        20,
        22,
        23,
        24,
        28,
        29,
        31,
        32,
        33,
        79,
        82,
        83
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}