{
  "name": "regex_syntax::ast::visitor::{impl#0}::induct",
  "mod_info": {
    "name": "ast::visitor",
    "loc": "regex-syntax/src/ast/mod.rs:13:1:13:13"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/visitor.rs:261:5:284:6",
  "doc": "/// Build a stack frame for the given AST if one is needed (which occurs if\n/// and only if there are child nodes in the AST). Otherwise, return None.\n///\n/// If this visits a class, then the underlying visitor implementation may\n/// return an error which will be passed on here.\n",
  "code": [
    "fn induct<V: Visitor>(",
    "    &mut self,",
    "    ast: &'a Ast,",
    "    visitor: &mut V,",
    ") -> Result<Option<Frame<'a>>, V::Err> {",
    "    Ok(match *ast {",
    "        Ast::ClassBracketed(ref x) => {",
    "            self.visit_class(x, visitor)?;",
    "            None",
    "        }",
    "        Ast::Repetition(ref x) => Some(Frame::Repetition(x)),",
    "        Ast::Group(ref x) => Some(Frame::Group(x)),",
    "        Ast::Concat(ref x) if x.asts.is_empty() => None,",
    "        Ast::Concat(ref x) => {",
    "            Some(Frame::Concat { head: &x.asts[0], tail: &x.asts[1..] })",
    "        }",
    "        Ast::Alternation(ref x) if x.asts.is_empty() => None,",
    "        Ast::Alternation(ref x) => Some(Frame::Alternation {",
    "            head: &x.asts[0],",
    "            tail: &x.asts[1..],",
    "        }),",
    "        _ => None,",
    "    })",
    "}"
  ],
  "size": {
    "chain": 9,
    "contra": 0,
    "min_set": 9
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*ast matches Ast::ClassBracketed(ref x)",
          "norm": null,
          "value": "false",
          "line": 267,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::Group(ref x)",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "false",
          "line": 271,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::Concat(ref x)",
          "norm": null,
          "value": "false",
          "line": 274,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::Concat(ref x)",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "false",
          "line": 278,
          "bound": null
        },
        {
          "cond": "*ast matches _",
          "norm": null,
          "value": "true",
          "line": 282,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(match *ast {\n            Ast::ClassBracketed(ref x) => {\n                self.visit_class(x, visitor)?;\n                None\n            }\n            Ast::Repetition(ref x) => Some(Frame::Repetition(x)),\n            Ast::Group(ref x) => Some(Frame::Group(x)),\n            Ast::Concat(ref x) if x.asts.is_empty() => None,\n            Ast::Concat(ref x) => {\n                Some(Frame::Concat { head: &x.asts[0], tail: &x.asts[1..] })\n            }\n            Ast::Alternation(ref x) if x.asts.is_empty() => None,\n            Ast::Alternation(ref x) => Some(Frame::Alternation {\n                head: &x.asts[0],\n                tail: &x.asts[1..],\n            }),\n            _ => None,\n        })",
      "path": [
        0,
        1,
        34,
        37
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*ast matches Ast::Concat(ref x) or Ast::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 266,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 266,
          "bound": null
        },
        {
          "cond": "x.asts.is_empty()",
          "norm": null,
          "value": "true",
          "line": 273,
          "bound": null
        }
      ],
      "ret": "Ok(match *ast {\n            Ast::ClassBracketed(ref x) => {\n                self.visit_class(x, visitor)?;\n                None\n            }\n            Ast::Repetition(ref x) => Some(Frame::Repetition(x)),\n            Ast::Group(ref x) => Some(Frame::Group(x)),\n            Ast::Concat(ref x) if x.asts.is_empty() => None,\n            Ast::Concat(ref x) => {\n                Some(Frame::Concat { head: &x.asts[0], tail: &x.asts[1..] })\n            }\n            Ast::Alternation(ref x) if x.asts.is_empty() => None,\n            Ast::Alternation(ref x) => Some(Frame::Alternation {\n                head: &x.asts[0],\n                tail: &x.asts[1..],\n            }),\n            _ => None,\n        })",
      "path": [
        0,
        5,
        20,
        21,
        22,
        34,
        37
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "*ast matches Ast::Concat(ref x) or Ast::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 266,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 266,
          "bound": null
        },
        {
          "cond": "x.asts.is_empty()",
          "norm": null,
          "value": "false",
          "line": 273,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 266,
          "bound": null
        }
      ],
      "ret": "Ok(match *ast {\n            Ast::ClassBracketed(ref x) => {\n                self.visit_class(x, visitor)?;\n                None\n            }\n            Ast::Repetition(ref x) => Some(Frame::Repetition(x)),\n            Ast::Group(ref x) => Some(Frame::Group(x)),\n            Ast::Concat(ref x) if x.asts.is_empty() => None,\n            Ast::Concat(ref x) => {\n                Some(Frame::Concat { head: &x.asts[0], tail: &x.asts[1..] })\n            }\n            Ast::Alternation(ref x) if x.asts.is_empty() => None,\n            Ast::Alternation(ref x) => Some(Frame::Alternation {\n                head: &x.asts[0],\n                tail: &x.asts[1..],\n            }),\n            _ => None,\n        })",
      "path": [
        0,
        5,
        20,
        21,
        23,
        6,
        24,
        25,
        26,
        34,
        37
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "*ast matches Ast::Alternation(ref x) or Ast::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 266,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 266,
          "bound": null
        },
        {
          "cond": "x.asts.is_empty()",
          "norm": null,
          "value": "true",
          "line": 277,
          "bound": null
        }
      ],
      "ret": "Ok(match *ast {\n            Ast::ClassBracketed(ref x) => {\n                self.visit_class(x, visitor)?;\n                None\n            }\n            Ast::Repetition(ref x) => Some(Frame::Repetition(x)),\n            Ast::Group(ref x) => Some(Frame::Group(x)),\n            Ast::Concat(ref x) if x.asts.is_empty() => None,\n            Ast::Concat(ref x) => {\n                Some(Frame::Concat { head: &x.asts[0], tail: &x.asts[1..] })\n            }\n            Ast::Alternation(ref x) if x.asts.is_empty() => None,\n            Ast::Alternation(ref x) => Some(Frame::Alternation {\n                head: &x.asts[0],\n                tail: &x.asts[1..],\n            }),\n            _ => None,\n        })",
      "path": [
        0,
        7,
        27,
        28,
        29,
        34,
        37
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "*ast matches Ast::Alternation(ref x) or Ast::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 266,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 266,
          "bound": null
        },
        {
          "cond": "x.asts.is_empty()",
          "norm": null,
          "value": "false",
          "line": 277,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 266,
          "bound": null
        }
      ],
      "ret": "Ok(match *ast {\n            Ast::ClassBracketed(ref x) => {\n                self.visit_class(x, visitor)?;\n                None\n            }\n            Ast::Repetition(ref x) => Some(Frame::Repetition(x)),\n            Ast::Group(ref x) => Some(Frame::Group(x)),\n            Ast::Concat(ref x) if x.asts.is_empty() => None,\n            Ast::Concat(ref x) => {\n                Some(Frame::Concat { head: &x.asts[0], tail: &x.asts[1..] })\n            }\n            Ast::Alternation(ref x) if x.asts.is_empty() => None,\n            Ast::Alternation(ref x) => Some(Frame::Alternation {\n                head: &x.asts[0],\n                tail: &x.asts[1..],\n            }),\n            _ => None,\n        })",
      "path": [
        0,
        7,
        27,
        28,
        30,
        8,
        31,
        32,
        33,
        34,
        37
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "*ast matches Ast::Group(ref x)",
          "norm": null,
          "value": "true",
          "line": 266,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::Group(ref x)",
          "norm": null,
          "value": "true",
          "line": 266,
          "bound": null
        }
      ],
      "ret": "Ok(match *ast {\n            Ast::ClassBracketed(ref x) => {\n                self.visit_class(x, visitor)?;\n                None\n            }\n            Ast::Repetition(ref x) => Some(Frame::Repetition(x)),\n            Ast::Group(ref x) => Some(Frame::Group(x)),\n            Ast::Concat(ref x) if x.asts.is_empty() => None,\n            Ast::Concat(ref x) => {\n                Some(Frame::Concat { head: &x.asts[0], tail: &x.asts[1..] })\n            }\n            Ast::Alternation(ref x) if x.asts.is_empty() => None,\n            Ast::Alternation(ref x) => Some(Frame::Alternation {\n                head: &x.asts[0],\n                tail: &x.asts[1..],\n            }),\n            _ => None,\n        })",
      "path": [
        0,
        4,
        19,
        34,
        37
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "*ast matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 266,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 266,
          "bound": null
        }
      ],
      "ret": "Ok(match *ast {\n            Ast::ClassBracketed(ref x) => {\n                self.visit_class(x, visitor)?;\n                None\n            }\n            Ast::Repetition(ref x) => Some(Frame::Repetition(x)),\n            Ast::Group(ref x) => Some(Frame::Group(x)),\n            Ast::Concat(ref x) if x.asts.is_empty() => None,\n            Ast::Concat(ref x) => {\n                Some(Frame::Concat { head: &x.asts[0], tail: &x.asts[1..] })\n            }\n            Ast::Alternation(ref x) if x.asts.is_empty() => None,\n            Ast::Alternation(ref x) => Some(Frame::Alternation {\n                head: &x.asts[0],\n                tail: &x.asts[1..],\n            }),\n            _ => None,\n        })",
      "path": [
        0,
        3,
        18,
        34,
        37
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "*ast matches Ast::ClassBracketed(ref x)",
          "norm": null,
          "value": "true",
          "line": 266,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::ClassBracketed(ref x)",
          "norm": null,
          "value": "true",
          "line": 266,
          "bound": null
        },
        {
          "cond": "self.visit_class(x, visitor)?",
          "norm": null,
          "value": "Err/None",
          "line": 268,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        9,
        10,
        11,
        13,
        15,
        16,
        35,
        36,
        37
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "*ast matches Ast::ClassBracketed(ref x)",
          "norm": null,
          "value": "true",
          "line": 266,
          "bound": null
        },
        {
          "cond": "*ast matches Ast::ClassBracketed(ref x)",
          "norm": null,
          "value": "true",
          "line": 266,
          "bound": null
        },
        {
          "cond": "self.visit_class(x, visitor)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 268,
          "bound": null
        }
      ],
      "ret": "Ok(match *ast {\n            Ast::ClassBracketed(ref x) => {\n                self.visit_class(x, visitor)?;\n                None\n            }\n            Ast::Repetition(ref x) => Some(Frame::Repetition(x)),\n            Ast::Group(ref x) => Some(Frame::Group(x)),\n            Ast::Concat(ref x) if x.asts.is_empty() => None,\n            Ast::Concat(ref x) => {\n                Some(Frame::Concat { head: &x.asts[0], tail: &x.asts[1..] })\n            }\n            Ast::Alternation(ref x) if x.asts.is_empty() => None,\n            Ast::Alternation(ref x) => Some(Frame::Alternation {\n                head: &x.asts[0],\n                tail: &x.asts[1..],\n            }),\n            _ => None,\n        })",
      "path": [
        0,
        2,
        9,
        10,
        11,
        14,
        17,
        34,
        37
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}