{
  "name": "regex_syntax::hir::translate::{impl#5}::class_literal_byte",
  "mod_info": {
    "name": "hir::translate",
    "loc": "regex-syntax/src/hir/mod.rs:44:1:44:19"
  },
  "visible": false,
  "loc": "regex-syntax/src/hir/translate.rs:1203:5:1217:6",
  "doc": "/// Return a scalar byte value suitable for use as a literal in a byte\n/// character class.\n",
  "code": [
    "fn class_literal_byte(&self, ast: &ast::Literal) -> Result<u8> {",
    "    match self.ast_literal_to_scalar(ast)? {",
    "        Either::Right(byte) => Ok(byte),",
    "        Either::Left(ch) => {",
    "            if ch.is_ascii() {",
    "                Ok(u8::try_from(ch).unwrap())",
    "            } else {",
    "                // We can't feasibly support Unicode in",
    "                // byte oriented classes. Byte classes don't",
    "                // do Unicode case folding.",
    "                Err(self.error(ast.span, ErrorKind::UnicodeNotAllowed))",
    "            }",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 1,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.ast_literal_to_scalar(ast)?",
          "norm": null,
          "value": "Err/None",
          "line": 1204,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        22,
        23,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.ast_literal_to_scalar(ast)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1204,
          "bound": null
        },
        {
          "cond": "self.ast_literal_to_scalar(ast)?",
          "norm": null,
          "value": "Err/None",
          "line": 1204,
          "bound": null
        },
        {
          "cond": "self.ast_literal_to_scalar(ast)? matches Either::Right(byte)",
          "norm": null,
          "value": "true",
          "line": 1204,
          "bound": null
        }
      ],
      "ret": "Ok(byte)",
      "path": [
        0,
        1,
        2,
        5,
        9,
        11,
        20,
        21,
        24
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.ast_literal_to_scalar(ast)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1204,
          "bound": null
        },
        {
          "cond": "self.ast_literal_to_scalar(ast)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1204,
          "bound": null
        },
        {
          "cond": "ch.is_ascii()",
          "norm": null,
          "value": "true",
          "line": 1207,
          "bound": null
        }
      ],
      "ret": "Ok(u8::try_from(ch).unwrap())",
      "path": [
        0,
        1,
        2,
        5,
        10,
        12,
        13,
        14,
        15,
        19,
        20,
        21,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.ast_literal_to_scalar(ast)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1204,
          "bound": null
        },
        {
          "cond": "self.ast_literal_to_scalar(ast)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1204,
          "bound": null
        },
        {
          "cond": "ch.is_ascii()",
          "norm": null,
          "value": "false",
          "line": 1207,
          "bound": null
        }
      ],
      "ret": "Err(self.error(ast.span, ErrorKind::UnicodeNotAllowed))",
      "path": [
        0,
        1,
        2,
        5,
        10,
        12,
        16,
        17,
        18,
        19,
        20,
        21,
        24
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}