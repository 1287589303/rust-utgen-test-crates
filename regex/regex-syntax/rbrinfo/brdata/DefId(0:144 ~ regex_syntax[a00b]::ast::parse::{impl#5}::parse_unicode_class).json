{
  "name": "regex_syntax::ast::parse::{impl#5}::parse_unicode_class",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:2167:5:2240:6",
  "doc": "/// Parse a Unicode class in either the single character notation, `\\pN`\n/// or the multi-character bracketed notation, `\\p{Greek}`. This assumes\n/// the parser is positioned at the `p` (or `P` for negation) and will\n/// advance the parser to the character immediately following the class.\n///\n/// Note that this does not check whether the class name is valid or not.\n",
  "code": [
    "fn parse_unicode_class(&self) -> Result<ast::ClassUnicode> {",
    "    assert!(self.char() == 'p' || self.char() == 'P');",
    "",
    "    let mut scratch = self.parser().scratch.borrow_mut();",
    "    scratch.clear();",
    "",
    "    let negated = self.char() == 'P';",
    "    if !self.bump_and_bump_space() {",
    "        return Err(",
    "            self.error(self.span(), ast::ErrorKind::EscapeUnexpectedEof)",
    "        );",
    "    }",
    "    let (start, kind) = if self.char() == '{' {",
    "        let start = self.span_char().end;",
    "        while self.bump_and_bump_space() && self.char() != '}' {",
    "            scratch.push(self.char());",
    "        }",
    "        if self.is_eof() {",
    "            return Err(self",
    "                .error(self.span(), ast::ErrorKind::EscapeUnexpectedEof));",
    "        }",
    "        assert_eq!(self.char(), '}');",
    "        self.bump();",
    "",
    "        let name = scratch.as_str();",
    "        if let Some(i) = name.find(\"!=\") {",
    "            (",
    "                start,",
    "                ast::ClassUnicodeKind::NamedValue {",
    "                    op: ast::ClassUnicodeOpKind::NotEqual,",
    "                    name: name[..i].to_string(),",
    "                    value: name[i + 2..].to_string(),",
    "                },",
    "            )",
    "        } else if let Some(i) = name.find(':') {",
    "            (",
    "                start,",
    "                ast::ClassUnicodeKind::NamedValue {",
    "                    op: ast::ClassUnicodeOpKind::Colon,",
    "                    name: name[..i].to_string(),",
    "                    value: name[i + 1..].to_string(),",
    "                },",
    "            )",
    "        } else if let Some(i) = name.find('=') {",
    "            (",
    "                start,",
    "                ast::ClassUnicodeKind::NamedValue {",
    "                    op: ast::ClassUnicodeOpKind::Equal,",
    "                    name: name[..i].to_string(),",
    "                    value: name[i + 1..].to_string(),",
    "                },",
    "            )",
    "        } else {",
    "            (start, ast::ClassUnicodeKind::Named(name.to_string()))",
    "        }",
    "    } else {",
    "        let start = self.pos();",
    "        let c = self.char();",
    "        if c == '\\\\' {",
    "            return Err(self.error(",
    "                self.span_char(),",
    "                ast::ErrorKind::UnicodeClassInvalid,",
    "            ));",
    "        }",
    "        self.bump_and_bump_space();",
    "        let kind = ast::ClassUnicodeKind::OneLetter(c);",
    "        (start, kind)",
    "    };",
    "    Ok(ast::ClassUnicode {",
    "        span: Span::new(start, self.pos()),",
    "        negated,",
    "        kind,",
    "    })",
    "}"
  ],
  "size": {
    "chain": 43,
    "contra": 12,
    "min_set": 8
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 2184,
          "bound": null
        }
      ],
      "ret": "Err(self\n                    .error(self.span(), ast::ErrorKind::EscapeUnexpectedEof))",
      "path": [
        0,
        1,
        2,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        22,
        23,
        24,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        107,
        108,
        109,
        110
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2184,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(\"!=\")",
          "norm": null,
          "value": "true",
          "line": 2192,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(':')",
          "norm": null,
          "value": "true",
          "line": 2201,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find('=')",
          "norm": null,
          "value": "true",
          "line": 2210,
          "bound": null
        }
      ],
      "ret": "Ok(ast::ClassUnicode {\n            span: Span::new(start, self.pos()),\n            negated,\n            kind,\n        })",
      "path": [
        0,
        1,
        2,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        22,
        23,
        24,
        32,
        33,
        34,
        39,
        40,
        41,
        43,
        44,
        45,
        46,
        57,
        58,
        69,
        70,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        110
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2184,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(\"!=\")",
          "norm": null,
          "value": "true",
          "line": 2192,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(':')",
          "norm": null,
          "value": "true",
          "line": 2201,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find('=')",
          "norm": null,
          "value": "true",
          "line": 2210,
          "bound": null
        }
      ],
      "ret": "Ok(ast::ClassUnicode {\n            span: Span::new(start, self.pos()),\n            negated,\n            kind,\n        })",
      "path": [
        0,
        1,
        2,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        22,
        23,
        24,
        32,
        33,
        34,
        39,
        40,
        41,
        43,
        44,
        45,
        46,
        57,
        58,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        85,
        86,
        87,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        110
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2184,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(\"!=\")",
          "norm": null,
          "value": "true",
          "line": 2192,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(':')",
          "norm": null,
          "value": "true",
          "line": 2201,
          "bound": null
        }
      ],
      "ret": "Ok(ast::ClassUnicode {\n            span: Span::new(start, self.pos()),\n            negated,\n            kind,\n        })",
      "path": [
        0,
        1,
        2,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        22,
        23,
        24,
        32,
        33,
        34,
        39,
        40,
        41,
        43,
        44,
        45,
        46,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        86,
        87,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        110
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2184,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(\"!=\")",
          "norm": null,
          "value": "true",
          "line": 2192,
          "bound": null
        }
      ],
      "ret": "Ok(ast::ClassUnicode {\n            span: Span::new(start, self.pos()),\n            negated,\n            kind,\n        })",
      "path": [
        0,
        1,
        2,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        22,
        23,
        24,
        32,
        33,
        34,
        39,
        40,
        41,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        87,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        110
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2184,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        22,
        23,
        24,
        32,
        33,
        34,
        39,
        40,
        42,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 2184,
          "bound": null
        }
      ],
      "ret": "Err(self\n                    .error(self.span(), ast::ErrorKind::EscapeUnexpectedEof))",
      "path": [
        0,
        1,
        2,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        33,
        34,
        35,
        36,
        37,
        38,
        107,
        108,
        109,
        110
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2184,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(\"!=\")",
          "norm": null,
          "value": "true",
          "line": 2192,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(':')",
          "norm": null,
          "value": "true",
          "line": 2201,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find('=')",
          "norm": null,
          "value": "true",
          "line": 2210,
          "bound": null
        }
      ],
      "ret": "Ok(ast::ClassUnicode {\n            span: Span::new(start, self.pos()),\n            negated,\n            kind,\n        })",
      "path": [
        0,
        1,
        2,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        33,
        34,
        39,
        40,
        41,
        43,
        44,
        45,
        46,
        57,
        58,
        69,
        70,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        110
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2184,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(\"!=\")",
          "norm": null,
          "value": "true",
          "line": 2192,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(':')",
          "norm": null,
          "value": "true",
          "line": 2201,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find('=')",
          "norm": null,
          "value": "true",
          "line": 2210,
          "bound": null
        }
      ],
      "ret": "Ok(ast::ClassUnicode {\n            span: Span::new(start, self.pos()),\n            negated,\n            kind,\n        })",
      "path": [
        0,
        1,
        2,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        33,
        34,
        39,
        40,
        41,
        43,
        44,
        45,
        46,
        57,
        58,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        85,
        86,
        87,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        110
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2184,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(\"!=\")",
          "norm": null,
          "value": "true",
          "line": 2192,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(':')",
          "norm": null,
          "value": "true",
          "line": 2201,
          "bound": null
        }
      ],
      "ret": "Ok(ast::ClassUnicode {\n            span: Span::new(start, self.pos()),\n            negated,\n            kind,\n        })",
      "path": [
        0,
        1,
        2,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        33,
        34,
        39,
        40,
        41,
        43,
        44,
        45,
        46,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        86,
        87,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        110
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2184,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(\"!=\")",
          "norm": null,
          "value": "true",
          "line": 2192,
          "bound": null
        }
      ],
      "ret": "Ok(ast::ClassUnicode {\n            span: Span::new(start, self.pos()),\n            negated,\n            kind,\n        })",
      "path": [
        0,
        1,
        2,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        33,
        34,
        39,
        40,
        41,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        87,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        110
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2184,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        33,
        34,
        39,
        40,
        42,
        124,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 2184,
          "bound": null
        }
      ],
      "ret": "Err(self\n                    .error(self.span(), ast::ErrorKind::EscapeUnexpectedEof))",
      "path": [
        0,
        1,
        2,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        107,
        108,
        109,
        110
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2184,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(\"!=\")",
          "norm": null,
          "value": "true",
          "line": 2192,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(':')",
          "norm": null,
          "value": "true",
          "line": 2201,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find('=')",
          "norm": null,
          "value": "true",
          "line": 2210,
          "bound": null
        }
      ],
      "ret": "Ok(ast::ClassUnicode {\n            span: Span::new(start, self.pos()),\n            negated,\n            kind,\n        })",
      "path": [
        0,
        1,
        2,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        32,
        33,
        34,
        39,
        40,
        41,
        43,
        44,
        45,
        46,
        57,
        58,
        69,
        70,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        110
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2184,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(\"!=\")",
          "norm": null,
          "value": "true",
          "line": 2192,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(':')",
          "norm": null,
          "value": "true",
          "line": 2201,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find('=')",
          "norm": null,
          "value": "true",
          "line": 2210,
          "bound": null
        }
      ],
      "ret": "Ok(ast::ClassUnicode {\n            span: Span::new(start, self.pos()),\n            negated,\n            kind,\n        })",
      "path": [
        0,
        1,
        2,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        32,
        33,
        34,
        39,
        40,
        41,
        43,
        44,
        45,
        46,
        57,
        58,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        85,
        86,
        87,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        110
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2184,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(\"!=\")",
          "norm": null,
          "value": "true",
          "line": 2192,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(':')",
          "norm": null,
          "value": "true",
          "line": 2201,
          "bound": null
        }
      ],
      "ret": "Ok(ast::ClassUnicode {\n            span: Span::new(start, self.pos()),\n            negated,\n            kind,\n        })",
      "path": [
        0,
        1,
        2,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        32,
        33,
        34,
        39,
        40,
        41,
        43,
        44,
        45,
        46,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        86,
        87,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        110
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2184,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(\"!=\")",
          "norm": null,
          "value": "true",
          "line": 2192,
          "bound": null
        }
      ],
      "ret": "Ok(ast::ClassUnicode {\n            span: Span::new(start, self.pos()),\n            negated,\n            kind,\n        })",
      "path": [
        0,
        1,
        2,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        32,
        33,
        34,
        39,
        40,
        41,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        87,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        110
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2184,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        32,
        33,
        34,
        39,
        40,
        42,
        124,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "true",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "c == '\\\\'",
          "norm": "'\\\\' == c",
          "value": "false",
          "line": 2225,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                    self.span_char(),\n                    ast::ErrorKind::UnicodeClassInvalid,\n                ))",
      "path": [
        0,
        1,
        2,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        107,
        108,
        109,
        110
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "true",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "c == '\\\\'",
          "norm": "'\\\\' == c",
          "value": "true",
          "line": 2225,
          "bound": null
        }
      ],
      "ret": "Ok(ast::ClassUnicode {\n            span: Span::new(start, self.pos()),\n            negated,\n            kind,\n        })",
      "path": [
        0,
        1,
        2,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        110
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 2174,
          "bound": null
        }
      ],
      "ret": "Err(\n                self.error(self.span(), ast::ErrorKind::EscapeUnexpectedEof)\n            )",
      "path": [
        0,
        1,
        2,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        17,
        18,
        108,
        109,
        110
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "true",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.char() == 'P'",
          "norm": "'P' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 2184,
          "bound": null
        }
      ],
      "ret": "Err(self\n                    .error(self.span(), ast::ErrorKind::EscapeUnexpectedEof))",
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        22,
        23,
        24,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        107,
        108,
        109,
        110
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "true",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.char() == 'P'",
          "norm": "'P' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2184,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(\"!=\")",
          "norm": null,
          "value": "true",
          "line": 2192,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(':')",
          "norm": null,
          "value": "true",
          "line": 2201,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find('=')",
          "norm": null,
          "value": "true",
          "line": 2210,
          "bound": null
        }
      ],
      "ret": "Ok(ast::ClassUnicode {\n            span: Span::new(start, self.pos()),\n            negated,\n            kind,\n        })",
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        22,
        23,
        24,
        32,
        33,
        34,
        39,
        40,
        41,
        43,
        44,
        45,
        46,
        57,
        58,
        69,
        70,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        110
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "true",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.char() == 'P'",
          "norm": "'P' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2184,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(\"!=\")",
          "norm": null,
          "value": "true",
          "line": 2192,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(':')",
          "norm": null,
          "value": "true",
          "line": 2201,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find('=')",
          "norm": null,
          "value": "true",
          "line": 2210,
          "bound": null
        }
      ],
      "ret": "Ok(ast::ClassUnicode {\n            span: Span::new(start, self.pos()),\n            negated,\n            kind,\n        })",
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        22,
        23,
        24,
        32,
        33,
        34,
        39,
        40,
        41,
        43,
        44,
        45,
        46,
        57,
        58,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        85,
        86,
        87,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        110
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "true",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.char() == 'P'",
          "norm": "'P' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2184,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(\"!=\")",
          "norm": null,
          "value": "true",
          "line": 2192,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(':')",
          "norm": null,
          "value": "true",
          "line": 2201,
          "bound": null
        }
      ],
      "ret": "Ok(ast::ClassUnicode {\n            span: Span::new(start, self.pos()),\n            negated,\n            kind,\n        })",
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        22,
        23,
        24,
        32,
        33,
        34,
        39,
        40,
        41,
        43,
        44,
        45,
        46,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        86,
        87,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        110
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "true",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.char() == 'P'",
          "norm": "'P' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2184,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(\"!=\")",
          "norm": null,
          "value": "true",
          "line": 2192,
          "bound": null
        }
      ],
      "ret": "Ok(ast::ClassUnicode {\n            span: Span::new(start, self.pos()),\n            negated,\n            kind,\n        })",
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        22,
        23,
        24,
        32,
        33,
        34,
        39,
        40,
        41,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        87,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        110
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "true",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.char() == 'P'",
          "norm": "'P' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2184,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        22,
        23,
        24,
        32,
        33,
        34,
        39,
        40,
        42,
        124,
        125
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "true",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.char() == 'P'",
          "norm": "'P' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 2184,
          "bound": null
        }
      ],
      "ret": "Err(self\n                    .error(self.span(), ast::ErrorKind::EscapeUnexpectedEof))",
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        33,
        34,
        35,
        36,
        37,
        38,
        107,
        108,
        109,
        110
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 29,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "true",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.char() == 'P'",
          "norm": "'P' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2184,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(\"!=\")",
          "norm": null,
          "value": "true",
          "line": 2192,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(':')",
          "norm": null,
          "value": "true",
          "line": 2201,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find('=')",
          "norm": null,
          "value": "true",
          "line": 2210,
          "bound": null
        }
      ],
      "ret": "Ok(ast::ClassUnicode {\n            span: Span::new(start, self.pos()),\n            negated,\n            kind,\n        })",
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        33,
        34,
        39,
        40,
        41,
        43,
        44,
        45,
        46,
        57,
        58,
        69,
        70,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        110
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 30,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "true",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.char() == 'P'",
          "norm": "'P' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2184,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(\"!=\")",
          "norm": null,
          "value": "true",
          "line": 2192,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(':')",
          "norm": null,
          "value": "true",
          "line": 2201,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find('=')",
          "norm": null,
          "value": "true",
          "line": 2210,
          "bound": null
        }
      ],
      "ret": "Ok(ast::ClassUnicode {\n            span: Span::new(start, self.pos()),\n            negated,\n            kind,\n        })",
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        33,
        34,
        39,
        40,
        41,
        43,
        44,
        45,
        46,
        57,
        58,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        85,
        86,
        87,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        110
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 31,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "true",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.char() == 'P'",
          "norm": "'P' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2184,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(\"!=\")",
          "norm": null,
          "value": "true",
          "line": 2192,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(':')",
          "norm": null,
          "value": "true",
          "line": 2201,
          "bound": null
        }
      ],
      "ret": "Ok(ast::ClassUnicode {\n            span: Span::new(start, self.pos()),\n            negated,\n            kind,\n        })",
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        33,
        34,
        39,
        40,
        41,
        43,
        44,
        45,
        46,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        86,
        87,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        110
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 32,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "true",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.char() == 'P'",
          "norm": "'P' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2184,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(\"!=\")",
          "norm": null,
          "value": "true",
          "line": 2192,
          "bound": null
        }
      ],
      "ret": "Ok(ast::ClassUnicode {\n            span: Span::new(start, self.pos()),\n            negated,\n            kind,\n        })",
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        33,
        34,
        39,
        40,
        41,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        87,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        110
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 33,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "true",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.char() == 'P'",
          "norm": "'P' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2184,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        33,
        34,
        39,
        40,
        42,
        124,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 34,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "true",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.char() == 'P'",
          "norm": "'P' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 2184,
          "bound": null
        }
      ],
      "ret": "Err(self\n                    .error(self.span(), ast::ErrorKind::EscapeUnexpectedEof))",
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        107,
        108,
        109,
        110
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 35,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "true",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.char() == 'P'",
          "norm": "'P' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2184,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(\"!=\")",
          "norm": null,
          "value": "true",
          "line": 2192,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(':')",
          "norm": null,
          "value": "true",
          "line": 2201,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find('=')",
          "norm": null,
          "value": "true",
          "line": 2210,
          "bound": null
        }
      ],
      "ret": "Ok(ast::ClassUnicode {\n            span: Span::new(start, self.pos()),\n            negated,\n            kind,\n        })",
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        32,
        33,
        34,
        39,
        40,
        41,
        43,
        44,
        45,
        46,
        57,
        58,
        69,
        70,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        110
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 36,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "true",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.char() == 'P'",
          "norm": "'P' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2184,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(\"!=\")",
          "norm": null,
          "value": "true",
          "line": 2192,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(':')",
          "norm": null,
          "value": "true",
          "line": 2201,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find('=')",
          "norm": null,
          "value": "true",
          "line": 2210,
          "bound": null
        }
      ],
      "ret": "Ok(ast::ClassUnicode {\n            span: Span::new(start, self.pos()),\n            negated,\n            kind,\n        })",
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        32,
        33,
        34,
        39,
        40,
        41,
        43,
        44,
        45,
        46,
        57,
        58,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        85,
        86,
        87,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        110
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 37,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "true",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.char() == 'P'",
          "norm": "'P' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2184,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(\"!=\")",
          "norm": null,
          "value": "true",
          "line": 2192,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(':')",
          "norm": null,
          "value": "true",
          "line": 2201,
          "bound": null
        }
      ],
      "ret": "Ok(ast::ClassUnicode {\n            span: Span::new(start, self.pos()),\n            negated,\n            kind,\n        })",
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        32,
        33,
        34,
        39,
        40,
        41,
        43,
        44,
        45,
        46,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        86,
        87,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        110
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 38,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "true",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.char() == 'P'",
          "norm": "'P' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2184,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "let Some(i) = name.find(\"!=\")",
          "norm": null,
          "value": "true",
          "line": 2192,
          "bound": null
        }
      ],
      "ret": "Ok(ast::ClassUnicode {\n            span: Span::new(start, self.pos()),\n            negated,\n            kind,\n        })",
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        32,
        33,
        34,
        39,
        40,
        41,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        87,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        110
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 39,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "true",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.char() == 'P'",
          "norm": "'P' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 2181,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 2184,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        23,
        24,
        32,
        33,
        34,
        39,
        40,
        42,
        124,
        125
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 40,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "true",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.char() == 'P'",
          "norm": "'P' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "true",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "c == '\\\\'",
          "norm": "'\\\\' == c",
          "value": "false",
          "line": 2225,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                    self.span_char(),\n                    ast::ErrorKind::UnicodeClassInvalid,\n                ))",
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        107,
        108,
        109,
        110
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 41,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "true",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.char() == 'P'",
          "norm": "'P' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 2174,
          "bound": null
        },
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "true",
          "line": 2179,
          "bound": null
        },
        {
          "cond": "c == '\\\\'",
          "norm": "'\\\\' == c",
          "value": "true",
          "line": 2225,
          "bound": null
        }
      ],
      "ret": "Ok(ast::ClassUnicode {\n            span: Span::new(start, self.pos()),\n            negated,\n            kind,\n        })",
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        110
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 42,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "true",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.char() == 'P'",
          "norm": "'P' == self.char()",
          "value": "false",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 2174,
          "bound": null
        }
      ],
      "ret": "Err(\n                self.error(self.span(), ast::ErrorKind::EscapeUnexpectedEof)\n            )",
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        17,
        18,
        108,
        109,
        110
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 43,
      "conds": [
        {
          "cond": "self.char() == 'p'",
          "norm": "'p' == self.char()",
          "value": "true",
          "line": 2168,
          "bound": null
        },
        {
          "cond": "self.char() == 'P'",
          "norm": "'P' == self.char()",
          "value": "true",
          "line": 2168,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        6,
        125
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}