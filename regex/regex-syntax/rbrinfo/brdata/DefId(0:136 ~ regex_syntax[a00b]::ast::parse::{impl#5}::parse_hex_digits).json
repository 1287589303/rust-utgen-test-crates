{
  "name": "regex_syntax::ast::parse::{impl#5}::parse_hex_digits",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:1743:5:1780:6",
  "doc": "/// Parse an N-digit hex representation of a Unicode codepoint. This\n/// expects the parser to be positioned at the first digit and will advance\n/// the parser to the first character immediately following the escape\n/// sequence.\n///\n/// The number of digits given must be 2 (for `\\xNN`), 4 (for `\\uNNNN`)\n/// or 8 (for `\\UNNNNNNNN`).\n",
  "code": [
    "fn parse_hex_digits(",
    "    &self,",
    "    kind: ast::HexLiteralKind,",
    ") -> Result<ast::Literal> {",
    "    let mut scratch = self.parser().scratch.borrow_mut();",
    "    scratch.clear();",
    "",
    "    let start = self.pos();",
    "    for i in 0..kind.digits() {",
    "        if i > 0 && !self.bump_and_bump_space() {",
    "            return Err(self",
    "                .error(self.span(), ast::ErrorKind::EscapeUnexpectedEof));",
    "        }",
    "        if !is_hex(self.char()) {",
    "            return Err(self.error(",
    "                self.span_char(),",
    "                ast::ErrorKind::EscapeHexInvalidDigit,",
    "            ));",
    "        }",
    "        scratch.push(self.char());",
    "    }",
    "    // The final bump just moves the parser past the literal, which may",
    "    // be EOF.",
    "    self.bump_and_bump_space();",
    "    let end = self.pos();",
    "    let hex = scratch.as_str();",
    "    match u32::from_str_radix(hex, 16).ok().and_then(char::from_u32) {",
    "        None => Err(self.error(",
    "            Span::new(start, end),",
    "            ast::ErrorKind::EscapeHexInvalid,",
    "        )),",
    "        Some(c) => Ok(ast::Literal {",
    "            span: Span::new(start, end),",
    "            kind: ast::LiteralKind::HexFixed(kind),",
    "            c,",
    "        }),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 9,
    "contra": 4,
    "min_set": 6
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "i in 0..kind.digits()",
          "norm": null,
          "value": "true",
          "line": 1751,
          "bound": null
        },
        {
          "cond": "i > 0",
          "norm": "0 < i",
          "value": "true",
          "line": 1752,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1752,
          "bound": null
        },
        {
          "cond": "is_hex(self.char())",
          "norm": null,
          "value": "true",
          "line": 1756,
          "bound": null
        },
        {
          "cond": "i in 0..kind.digits()",
          "norm": null,
          "value": "false",
          "line": 1751,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(hex, 16).ok().and_then(char::from_u32) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 1769,
          "bound": null
        }
      ],
      "ret": "Ok(ast::Literal {\n                span: Span::new(start, end),\n                kind: ast::LiteralKind::HexFixed(kind),\n                c,\n            })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        15,
        16,
        17,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        8,
        9,
        10,
        12,
        14,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        48,
        49,
        50,
        53
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "i in 0..kind.digits()",
          "norm": null,
          "value": "true",
          "line": 1751,
          "bound": null
        },
        {
          "cond": "i > 0",
          "norm": "0 < i",
          "value": "true",
          "line": 1752,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1752,
          "bound": null
        },
        {
          "cond": "is_hex(self.char())",
          "norm": null,
          "value": "true",
          "line": 1756,
          "bound": null
        },
        {
          "cond": "i in 0..kind.digits()",
          "norm": null,
          "value": "false",
          "line": 1751,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(hex, 16).ok().and_then(char::from_u32) matches None",
          "norm": null,
          "value": "true",
          "line": 1769,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(hex, 16).ok().and_then(char::from_u32) matches None",
          "norm": null,
          "value": "true",
          "line": 1769,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(start, end),\n                ast::ErrorKind::EscapeHexInvalid,\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        15,
        16,
        17,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        8,
        9,
        10,
        12,
        14,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        42,
        44,
        45,
        46,
        47,
        49,
        50,
        53
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "i in 0..kind.digits()",
          "norm": null,
          "value": "true",
          "line": 1751,
          "bound": null
        },
        {
          "cond": "i > 0",
          "norm": "0 < i",
          "value": "true",
          "line": 1752,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1752,
          "bound": null
        },
        {
          "cond": "is_hex(self.char())",
          "norm": null,
          "value": "false",
          "line": 1756,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                    self.span_char(),\n                    ast::ErrorKind::EscapeHexInvalidDigit,\n                ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        15,
        16,
        17,
        23,
        24,
        25,
        27,
        28,
        29,
        30,
        51,
        52,
        53
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "i in 0..kind.digits()",
          "norm": null,
          "value": "true",
          "line": 1751,
          "bound": null
        },
        {
          "cond": "i > 0",
          "norm": "0 < i",
          "value": "true",
          "line": 1752,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 1752,
          "bound": null
        }
      ],
      "ret": "Err(self\n                    .error(self.span(), ast::ErrorKind::EscapeUnexpectedEof))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        15,
        16,
        18,
        19,
        20,
        21,
        51,
        52,
        53
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "i in 0..kind.digits()",
          "norm": null,
          "value": "true",
          "line": 1751,
          "bound": null
        },
        {
          "cond": "i > 0",
          "norm": "0 < i",
          "value": "false",
          "line": 1752,
          "bound": "i == 0"
        },
        {
          "cond": "is_hex(self.char())",
          "norm": null,
          "value": "true",
          "line": 1756,
          "bound": null
        },
        {
          "cond": "i in 0..kind.digits()",
          "norm": null,
          "value": "false",
          "line": 1751,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(hex, 16).ok().and_then(char::from_u32) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 1769,
          "bound": null
        }
      ],
      "ret": "Ok(ast::Literal {\n                span: Span::new(start, end),\n                kind: ast::LiteralKind::HexFixed(kind),\n                c,\n            })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        8,
        9,
        10,
        12,
        14,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        48,
        49,
        50,
        53
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "i in 0..kind.digits()",
          "norm": null,
          "value": "true",
          "line": 1751,
          "bound": null
        },
        {
          "cond": "i > 0",
          "norm": "0 < i",
          "value": "false",
          "line": 1752,
          "bound": "i == 0"
        },
        {
          "cond": "is_hex(self.char())",
          "norm": null,
          "value": "true",
          "line": 1756,
          "bound": null
        },
        {
          "cond": "i in 0..kind.digits()",
          "norm": null,
          "value": "false",
          "line": 1751,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(hex, 16).ok().and_then(char::from_u32) matches None",
          "norm": null,
          "value": "true",
          "line": 1769,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(hex, 16).ok().and_then(char::from_u32) matches None",
          "norm": null,
          "value": "true",
          "line": 1769,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(start, end),\n                ast::ErrorKind::EscapeHexInvalid,\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        8,
        9,
        10,
        12,
        14,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        42,
        44,
        45,
        46,
        47,
        49,
        50,
        53
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "i in 0..kind.digits()",
          "norm": null,
          "value": "true",
          "line": 1751,
          "bound": null
        },
        {
          "cond": "i > 0",
          "norm": "0 < i",
          "value": "false",
          "line": 1752,
          "bound": "i == 0"
        },
        {
          "cond": "is_hex(self.char())",
          "norm": null,
          "value": "false",
          "line": 1756,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                    self.span_char(),\n                    ast::ErrorKind::EscapeHexInvalidDigit,\n                ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        22,
        23,
        24,
        25,
        27,
        28,
        29,
        30,
        51,
        52,
        53
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "i in 0..kind.digits()",
          "norm": null,
          "value": "false",
          "line": 1751,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(hex, 16).ok().and_then(char::from_u32) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 1769,
          "bound": null
        }
      ],
      "ret": "Ok(ast::Literal {\n                span: Span::new(start, end),\n                kind: ast::LiteralKind::HexFixed(kind),\n                c,\n            })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        14,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        43,
        48,
        49,
        50,
        53
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "i in 0..kind.digits()",
          "norm": null,
          "value": "false",
          "line": 1751,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(hex, 16).ok().and_then(char::from_u32) matches None",
          "norm": null,
          "value": "true",
          "line": 1769,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(hex, 16).ok().and_then(char::from_u32) matches None",
          "norm": null,
          "value": "true",
          "line": 1769,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(start, end),\n                ast::ErrorKind::EscapeHexInvalid,\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        14,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        42,
        44,
        45,
        46,
        47,
        49,
        50,
        53
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}