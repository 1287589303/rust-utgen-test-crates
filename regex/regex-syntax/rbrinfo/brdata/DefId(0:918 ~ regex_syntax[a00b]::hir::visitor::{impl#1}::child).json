{
  "name": "regex_syntax::hir::visitor::{impl#1}::child",
  "mod_info": {
    "name": "hir::visitor",
    "loc": "regex-syntax/src/hir/mod.rs:45:1:45:13"
  },
  "visible": false,
  "loc": "regex-syntax/src/hir/visitor.rs:207:5:214:6",
  "doc": "/// Perform the next inductive step on this frame and return the next\n/// child HIR node to visit.\n",
  "code": [
    "fn child(&self) -> &'a Hir {",
    "    match *self {",
    "        Frame::Repetition(rep) => &rep.sub,",
    "        Frame::Capture(capture) => &capture.sub,",
    "        Frame::Concat { head, .. } => head,",
    "        Frame::Alternation { head, .. } => head,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*self matches Frame::Alternation { head, .. }",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        }
      ],
      "ret": "match *self {\n            Frame::Repetition(rep) => &rep.sub,\n            Frame::Capture(capture) => &capture.sub,\n            Frame::Concat { head, .. } => head,\n            Frame::Alternation { head, .. } => head,\n        }",
      "path": [
        0,
        5,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*self matches Frame::Concat { head, .. }",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "*self matches Frame::Concat { head, .. }",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        }
      ],
      "ret": "match *self {\n            Frame::Repetition(rep) => &rep.sub,\n            Frame::Capture(capture) => &capture.sub,\n            Frame::Concat { head, .. } => head,\n            Frame::Alternation { head, .. } => head,\n        }",
      "path": [
        0,
        4,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "*self matches Frame::Capture(capture)",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "*self matches Frame::Capture(capture)",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        }
      ],
      "ret": "match *self {\n            Frame::Repetition(rep) => &rep.sub,\n            Frame::Capture(capture) => &capture.sub,\n            Frame::Concat { head, .. } => head,\n            Frame::Alternation { head, .. } => head,\n        }",
      "path": [
        0,
        3,
        7,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "*self matches Frame::Repetition(rep)",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "*self matches Frame::Repetition(rep)",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        }
      ],
      "ret": "match *self {\n            Frame::Repetition(rep) => &rep.sub,\n            Frame::Capture(capture) => &capture.sub,\n            Frame::Concat { head, .. } => head,\n            Frame::Alternation { head, .. } => head,\n        }",
      "path": [
        0,
        2,
        6,
        9
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}