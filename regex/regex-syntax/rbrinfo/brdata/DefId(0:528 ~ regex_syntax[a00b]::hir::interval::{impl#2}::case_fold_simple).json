{
  "name": "regex_syntax::hir::interval::{impl#2}::case_fold_simple",
  "mod_info": {
    "name": "hir::interval",
    "loc": "regex-syntax/src/hir/mod.rs:41:1:41:14"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/interval.rs:115:5:130:6",
  "doc": "/// Expand this interval set such that it contains all case folded\n/// characters. For example, if this class consists of the range `a-z`,\n/// then applying case folding will result in the class containing both the\n/// ranges `a-z` and `A-Z`.\n///\n/// This returns an error if the necessary case mapping data is not\n/// available.\n",
  "code": [
    "pub fn case_fold_simple(&mut self) -> Result<(), unicode::CaseFoldError> {",
    "    if self.folded {",
    "        return Ok(());",
    "    }",
    "    let len = self.ranges.len();",
    "    for i in 0..len {",
    "        let range = self.ranges[i];",
    "        if let Err(err) = range.case_fold_simple(&mut self.ranges) {",
    "            self.canonicalize();",
    "            return Err(err);",
    "        }",
    "    }",
    "    self.canonicalize();",
    "    self.folded = true;",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 1,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 116,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        19
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 116,
          "bound": null
        },
        {
          "cond": "i in 0..len",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "let Err(err) = range.case_fold_simple(&mut self.ranges)",
          "norm": null,
          "value": "true",
          "line": 122,
          "bound": null
        },
        {
          "cond": "i in 0..len",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        12,
        13,
        17,
        5,
        6,
        7,
        9,
        11,
        18,
        19
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 116,
          "bound": null
        },
        {
          "cond": "i in 0..len",
          "norm": null,
          "value": "true",
          "line": 120,
          "bound": null
        },
        {
          "cond": "let Err(err) = range.case_fold_simple(&mut self.ranges)",
          "norm": null,
          "value": "true",
          "line": 122,
          "bound": null
        }
      ],
      "ret": "Err(err)",
      "path": [
        0,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        12,
        13,
        14,
        15,
        16,
        19
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 116,
          "bound": null
        },
        {
          "cond": "i in 0..len",
          "norm": null,
          "value": "false",
          "line": 120,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        11,
        18,
        19
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}