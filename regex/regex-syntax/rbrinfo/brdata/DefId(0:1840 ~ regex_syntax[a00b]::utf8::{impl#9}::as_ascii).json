{
  "name": "regex_syntax::utf8::{impl#9}::as_ascii",
  "mod_info": {
    "name": "utf8",
    "loc": "regex-syntax/src/lib.rs:195:1:195:14"
  },
  "visible": false,
  "loc": "regex-syntax/src/utf8.rs:414:5:422:6",
  "doc": "/// as_ascii returns this range as a Utf8Range if and only if all scalar\n/// values in this range can be encoded as a single byte.\n",
  "code": [
    "fn as_ascii(&self) -> Option<Utf8Range> {",
    "    if self.is_ascii() {",
    "        let start = u8::try_from(self.start).unwrap();",
    "        let end = u8::try_from(self.end).unwrap();",
    "        Some(Utf8Range::new(start, end))",
    "    } else {",
    "        None",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.is_ascii()",
          "norm": null,
          "value": "true",
          "line": 415,
          "bound": null
        }
      ],
      "ret": "Some(Utf8Range::new(start, end))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.is_ascii()",
          "norm": null,
          "value": "false",
          "line": 415,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}