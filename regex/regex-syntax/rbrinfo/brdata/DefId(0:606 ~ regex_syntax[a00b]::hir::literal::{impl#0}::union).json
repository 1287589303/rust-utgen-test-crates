{
  "name": "regex_syntax::hir::literal::{impl#0}::union",
  "mod_info": {
    "name": "hir::literal",
    "loc": "regex-syntax/src/hir/mod.rs:42:1:42:17"
  },
  "visible": false,
  "loc": "regex-syntax/src/hir/literal.rs:577:5:616:6",
  "doc": "/// Union the two sequences if the result would be within configured\n/// limits. Otherwise, make `seq2` infinite and union the infinite sequence\n/// with `seq1`.\n",
  "code": [
    "fn union(&self, mut seq1: Seq, seq2: &mut Seq) -> Seq {",
    "    if seq1.max_union_len(seq2).map_or(false, |len| len > self.limit_total)",
    "    {",
    "        // We try to trim our literal sequences to see if we can make",
    "        // room for more literals. The idea is that we'd rather trim down",
    "        // literals already in our sequence if it means we can add a few",
    "        // more and retain a finite sequence. Otherwise, we'll union with",
    "        // an infinite sequence and that infects everything and effectively",
    "        // stops literal extraction in its tracks.",
    "        //",
    "        // We do we keep 4 bytes here? Well, it's a bit of an abstraction",
    "        // leakage. Downstream, the literals may wind up getting fed to",
    "        // the Teddy algorithm, which supports searching literals up to",
    "        // length 4. So that's why we pick that number here. Arguably this",
    "        // should be a tuneable parameter, but it seems a little tricky to",
    "        // describe. And I'm still unsure if this is the right way to go",
    "        // about culling literal sequences.",
    "        match self.kind {",
    "            ExtractKind::Prefix => {",
    "                seq1.keep_first_bytes(4);",
    "                seq2.keep_first_bytes(4);",
    "            }",
    "            ExtractKind::Suffix => {",
    "                seq1.keep_last_bytes(4);",
    "                seq2.keep_last_bytes(4);",
    "            }",
    "        }",
    "        seq1.dedup();",
    "        seq2.dedup();",
    "        if seq1",
    "            .max_union_len(seq2)",
    "            .map_or(false, |len| len > self.limit_total)",
    "        {",
    "            seq2.make_infinite();",
    "        }",
    "    }",
    "    seq1.union(seq2);",
    "    assert!(seq1.len().map_or(true, |x| x <= self.limit_total));",
    "    seq1",
    "}"
  ],
  "size": {
    "chain": 10,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "seq1.max_union_len(seq2).map_or(false, |len| len > self.limit_total)",
          "norm": null,
          "value": "true",
          "line": 578,
          "bound": null
        },
        {
          "cond": "self.kind matches ExtractKind::Suffix",
          "norm": null,
          "value": "true",
          "line": 594,
          "bound": null
        },
        {
          "cond": "seq1\n                .max_union_len(seq2)\n                .map_or(false, |len| len > self.limit_total)",
          "norm": null,
          "value": "true",
          "line": 606,
          "bound": null
        },
        {
          "cond": "seq1.len().map_or(true, |x| x <= self.limit_total)",
          "norm": null,
          "value": "true",
          "line": 614,
          "bound": null
        }
      ],
      "ret": "seq1",
      "path": [
        0,
        1,
        2,
        3,
        6,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        22,
        23,
        24,
        25,
        26,
        28
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "seq1.max_union_len(seq2).map_or(false, |len| len > self.limit_total)",
          "norm": null,
          "value": "true",
          "line": 578,
          "bound": null
        },
        {
          "cond": "self.kind matches ExtractKind::Suffix",
          "norm": null,
          "value": "true",
          "line": 594,
          "bound": null
        },
        {
          "cond": "seq1\n                .max_union_len(seq2)\n                .map_or(false, |len| len > self.limit_total)",
          "norm": null,
          "value": "true",
          "line": 606,
          "bound": null
        },
        {
          "cond": "seq1.len().map_or(true, |x| x <= self.limit_total)",
          "norm": null,
          "value": "false",
          "line": 614,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        22,
        23,
        24,
        25,
        27,
        29,
        30
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "seq1.max_union_len(seq2).map_or(false, |len| len > self.limit_total)",
          "norm": null,
          "value": "true",
          "line": 578,
          "bound": null
        },
        {
          "cond": "self.kind matches ExtractKind::Suffix",
          "norm": null,
          "value": "true",
          "line": 594,
          "bound": null
        },
        {
          "cond": "seq1\n                .max_union_len(seq2)\n                .map_or(false, |len| len > self.limit_total)",
          "norm": null,
          "value": "false",
          "line": 606,
          "bound": null
        },
        {
          "cond": "seq1.len().map_or(true, |x| x <= self.limit_total)",
          "norm": null,
          "value": "true",
          "line": 614,
          "bound": null
        }
      ],
      "ret": "seq1",
      "path": [
        0,
        1,
        2,
        3,
        6,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        20,
        22,
        23,
        24,
        25,
        26,
        28
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "seq1.max_union_len(seq2).map_or(false, |len| len > self.limit_total)",
          "norm": null,
          "value": "true",
          "line": 578,
          "bound": null
        },
        {
          "cond": "self.kind matches ExtractKind::Suffix",
          "norm": null,
          "value": "true",
          "line": 594,
          "bound": null
        },
        {
          "cond": "seq1\n                .max_union_len(seq2)\n                .map_or(false, |len| len > self.limit_total)",
          "norm": null,
          "value": "false",
          "line": 606,
          "bound": null
        },
        {
          "cond": "seq1.len().map_or(true, |x| x <= self.limit_total)",
          "norm": null,
          "value": "false",
          "line": 614,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        20,
        22,
        23,
        24,
        25,
        27,
        29,
        30
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "seq1.max_union_len(seq2).map_or(false, |len| len > self.limit_total)",
          "norm": null,
          "value": "true",
          "line": 578,
          "bound": null
        },
        {
          "cond": "self.kind matches ExtractKind::Prefix",
          "norm": null,
          "value": "true",
          "line": 594,
          "bound": null
        },
        {
          "cond": "self.kind matches ExtractKind::Prefix",
          "norm": null,
          "value": "true",
          "line": 594,
          "bound": null
        },
        {
          "cond": "seq1\n                .max_union_len(seq2)\n                .map_or(false, |len| len > self.limit_total)",
          "norm": null,
          "value": "true",
          "line": 606,
          "bound": null
        },
        {
          "cond": "seq1.len().map_or(true, |x| x <= self.limit_total)",
          "norm": null,
          "value": "true",
          "line": 614,
          "bound": null
        }
      ],
      "ret": "seq1",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        22,
        23,
        24,
        25,
        26,
        28
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "seq1.max_union_len(seq2).map_or(false, |len| len > self.limit_total)",
          "norm": null,
          "value": "true",
          "line": 578,
          "bound": null
        },
        {
          "cond": "self.kind matches ExtractKind::Prefix",
          "norm": null,
          "value": "true",
          "line": 594,
          "bound": null
        },
        {
          "cond": "self.kind matches ExtractKind::Prefix",
          "norm": null,
          "value": "true",
          "line": 594,
          "bound": null
        },
        {
          "cond": "seq1\n                .max_union_len(seq2)\n                .map_or(false, |len| len > self.limit_total)",
          "norm": null,
          "value": "true",
          "line": 606,
          "bound": null
        },
        {
          "cond": "seq1.len().map_or(true, |x| x <= self.limit_total)",
          "norm": null,
          "value": "false",
          "line": 614,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        22,
        23,
        24,
        25,
        27,
        29,
        30
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "seq1.max_union_len(seq2).map_or(false, |len| len > self.limit_total)",
          "norm": null,
          "value": "true",
          "line": 578,
          "bound": null
        },
        {
          "cond": "self.kind matches ExtractKind::Prefix",
          "norm": null,
          "value": "true",
          "line": 594,
          "bound": null
        },
        {
          "cond": "self.kind matches ExtractKind::Prefix",
          "norm": null,
          "value": "true",
          "line": 594,
          "bound": null
        },
        {
          "cond": "seq1\n                .max_union_len(seq2)\n                .map_or(false, |len| len > self.limit_total)",
          "norm": null,
          "value": "false",
          "line": 606,
          "bound": null
        },
        {
          "cond": "seq1.len().map_or(true, |x| x <= self.limit_total)",
          "norm": null,
          "value": "true",
          "line": 614,
          "bound": null
        }
      ],
      "ret": "seq1",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        19,
        20,
        22,
        23,
        24,
        25,
        26,
        28
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "seq1.max_union_len(seq2).map_or(false, |len| len > self.limit_total)",
          "norm": null,
          "value": "true",
          "line": 578,
          "bound": null
        },
        {
          "cond": "self.kind matches ExtractKind::Prefix",
          "norm": null,
          "value": "true",
          "line": 594,
          "bound": null
        },
        {
          "cond": "self.kind matches ExtractKind::Prefix",
          "norm": null,
          "value": "true",
          "line": 594,
          "bound": null
        },
        {
          "cond": "seq1\n                .max_union_len(seq2)\n                .map_or(false, |len| len > self.limit_total)",
          "norm": null,
          "value": "false",
          "line": 606,
          "bound": null
        },
        {
          "cond": "seq1.len().map_or(true, |x| x <= self.limit_total)",
          "norm": null,
          "value": "false",
          "line": 614,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        19,
        20,
        22,
        23,
        24,
        25,
        27,
        29,
        30
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "seq1.max_union_len(seq2).map_or(false, |len| len > self.limit_total)",
          "norm": null,
          "value": "false",
          "line": 578,
          "bound": null
        },
        {
          "cond": "seq1.len().map_or(true, |x| x <= self.limit_total)",
          "norm": null,
          "value": "true",
          "line": 614,
          "bound": null
        }
      ],
      "ret": "seq1",
      "path": [
        0,
        1,
        2,
        21,
        22,
        23,
        24,
        25,
        26,
        28
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "seq1.max_union_len(seq2).map_or(false, |len| len > self.limit_total)",
          "norm": null,
          "value": "false",
          "line": 578,
          "bound": null
        },
        {
          "cond": "seq1.len().map_or(true, |x| x <= self.limit_total)",
          "norm": null,
          "value": "false",
          "line": 614,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        21,
        22,
        23,
        24,
        25,
        27,
        29,
        30
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}