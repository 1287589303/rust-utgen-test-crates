{
  "name": "regex_syntax::ast::parse::{impl#4}::push_group",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:703:5:732:6",
  "doc": "/// Parse and push a group AST (and its parent concatenation) on to the\n/// parser's internal stack. Return a fresh concatenation corresponding\n/// to the group's sub-AST.\n///\n/// If a set of flags was found (with no group), then the concatenation\n/// is returned with that set of flags added.\n///\n/// This assumes that the parser is currently positioned on the opening\n/// parenthesis. It advances the parser to the character at the start\n/// of the sub-expression (or adjoining expression).\n///\n/// If there was a problem parsing the start of the group, then an error\n/// is returned.\n",
  "code": [
    "fn push_group(&self, mut concat: ast::Concat) -> Result<ast::Concat> {",
    "    assert_eq!(self.char(), '(');",
    "    match self.parse_group()? {",
    "        Either::Left(set) => {",
    "            let ignore = set.flags.flag_state(ast::Flag::IgnoreWhitespace);",
    "            if let Some(v) = ignore {",
    "                self.parser().ignore_whitespace.set(v);",
    "            }",
    "",
    "            concat.asts.push(Ast::flags(set));",
    "            Ok(concat)",
    "        }",
    "        Either::Right(group) => {",
    "            let old_ignore_whitespace = self.ignore_whitespace();",
    "            let new_ignore_whitespace = group",
    "                .flags()",
    "                .and_then(|f| f.flag_state(ast::Flag::IgnoreWhitespace))",
    "                .unwrap_or(old_ignore_whitespace);",
    "            self.parser().stack_group.borrow_mut().push(",
    "                GroupState::Group {",
    "                    concat,",
    "                    group,",
    "                    ignore_whitespace: old_ignore_whitespace,",
    "                },",
    "            );",
    "            self.parser().ignore_whitespace.set(new_ignore_whitespace);",
    "            Ok(ast::Concat { span: self.span(), asts: vec![] })",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 1,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.parse_group()?",
          "norm": null,
          "value": "Err/None",
          "line": 705,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        48,
        49,
        50
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.parse_group()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 705,
          "bound": null
        },
        {
          "cond": "self.parse_group()?",
          "norm": null,
          "value": "Err/None",
          "line": 705,
          "bound": null
        }
      ],
      "ret": "Ok(ast::Concat { span: self.span(), asts: vec![] })",
      "path": [
        0,
        1,
        2,
        4,
        5,
        8,
        11,
        14,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        50
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.parse_group()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 705,
          "bound": null
        },
        {
          "cond": "self.parse_group()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 705,
          "bound": null
        },
        {
          "cond": "self.parse_group()? matches Either::Left(set)",
          "norm": null,
          "value": "true",
          "line": 705,
          "bound": null
        },
        {
          "cond": "let Some(v) = ignore",
          "norm": null,
          "value": "true",
          "line": 708,
          "bound": null
        }
      ],
      "ret": "Ok(concat)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        8,
        11,
        13,
        15,
        16,
        21,
        22,
        23,
        24,
        25,
        26,
        45,
        46,
        47,
        50
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.parse_group()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 705,
          "bound": null
        },
        {
          "cond": "self.parse_group()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 705,
          "bound": null
        },
        {
          "cond": "self.parse_group()? matches Either::Left(set)",
          "norm": null,
          "value": "true",
          "line": 705,
          "bound": null
        },
        {
          "cond": "let Some(v) = ignore",
          "norm": null,
          "value": "true",
          "line": 708,
          "bound": null
        }
      ],
      "ret": "Ok(concat)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        8,
        11,
        13,
        15,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        24,
        25,
        26,
        45,
        46,
        47,
        50
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        64,
        65
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}