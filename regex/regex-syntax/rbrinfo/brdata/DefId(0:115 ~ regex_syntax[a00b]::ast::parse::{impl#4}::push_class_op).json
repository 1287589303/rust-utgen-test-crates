{
  "name": "regex_syntax::ast::parse::{impl#4}::push_class_op",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:934:5:946:6",
  "doc": "/// Push the current set of class items on to the class parser's stack as\n/// the left hand side of the given operator.\n///\n/// A fresh set union is returned, which should be used to build the right\n/// hand side of this operator.\n",
  "code": [
    "fn push_class_op(",
    "    &self,",
    "    next_kind: ast::ClassSetBinaryOpKind,",
    "    next_union: ast::ClassSetUnion,",
    ") -> ast::ClassSetUnion {",
    "    let item = ast::ClassSet::Item(next_union.into_item());",
    "    let new_lhs = self.pop_class_op(item);",
    "    self.parser()",
    "        .stack_class",
    "        .borrow_mut()",
    "        .push(ClassState::Op { kind: next_kind, lhs: new_lhs });",
    "    ast::ClassSetUnion { span: self.span(), items: vec![] }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "ast::ClassSetUnion { span: self.span(), items: vec![] }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}