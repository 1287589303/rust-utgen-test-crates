{
  "name": "regex_syntax::hir::{impl#5}::concat",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:439:5:502:6",
  "doc": "/// Returns the concatenation of the given expressions.\n///\n/// This attempts to flatten and simplify the concatenation as appropriate.\n///\n/// # Example\n///\n/// This shows a simple example of basic flattening of both concatenations\n/// and literals.\n///\n/// ```\n/// use regex_syntax::hir::Hir;\n///\n/// let hir = Hir::concat(vec![\n///     Hir::concat(vec![\n///         Hir::literal([b'a']),\n///         Hir::literal([b'b']),\n///         Hir::literal([b'c']),\n///     ]),\n///     Hir::concat(vec![\n///         Hir::literal([b'x']),\n///         Hir::literal([b'y']),\n///         Hir::literal([b'z']),\n///     ]),\n/// ]);\n/// let expected = Hir::literal(\"abcxyz\".as_bytes());\n/// assert_eq!(expected, hir);\n/// ```\n",
  "code": [
    "pub fn concat(subs: Vec<Hir>) -> Hir {",
    "    // We rebuild the concatenation by simplifying it. Would be nice to do",
    "    // it in place, but that seems a little tricky?",
    "    let mut new = vec![];",
    "    // This gobbles up any adjacent literals in a concatenation and smushes",
    "    // them together. Basically, when we see a literal, we add its bytes",
    "    // to 'prior_lit', and whenever we see anything else, we first take",
    "    // any bytes in 'prior_lit' and add it to the 'new' concatenation.",
    "    let mut prior_lit: Option<Vec<u8>> = None;",
    "    for sub in subs {",
    "        let (kind, props) = sub.into_parts();",
    "        match kind {",
    "            HirKind::Literal(Literal(bytes)) => {",
    "                if let Some(ref mut prior_bytes) = prior_lit {",
    "                    prior_bytes.extend_from_slice(&bytes);",
    "                } else {",
    "                    prior_lit = Some(bytes.to_vec());",
    "                }",
    "            }",
    "            // We also flatten concats that are direct children of another",
    "            // concat. We only need to do this one level deep since",
    "            // Hir::concat is the only way to build concatenations, and so",
    "            // flattening happens inductively.",
    "            HirKind::Concat(subs2) => {",
    "                for sub2 in subs2 {",
    "                    let (kind2, props2) = sub2.into_parts();",
    "                    match kind2 {",
    "                        HirKind::Literal(Literal(bytes)) => {",
    "                            if let Some(ref mut prior_bytes) = prior_lit {",
    "                                prior_bytes.extend_from_slice(&bytes);",
    "                            } else {",
    "                                prior_lit = Some(bytes.to_vec());",
    "                            }",
    "                        }",
    "                        kind2 => {",
    "                            if let Some(prior_bytes) = prior_lit.take() {",
    "                                new.push(Hir::literal(prior_bytes));",
    "                            }",
    "                            new.push(Hir { kind: kind2, props: props2 });",
    "                        }",
    "                    }",
    "                }",
    "            }",
    "            // We can just skip empty HIRs.",
    "            HirKind::Empty => {}",
    "            kind => {",
    "                if let Some(prior_bytes) = prior_lit.take() {",
    "                    new.push(Hir::literal(prior_bytes));",
    "                }",
    "                new.push(Hir { kind, props });",
    "            }",
    "        }",
    "    }",
    "    if let Some(prior_bytes) = prior_lit.take() {",
    "        new.push(Hir::literal(prior_bytes));",
    "    }",
    "    if new.is_empty() {",
    "        return Hir::empty();",
    "    } else if new.len() == 1 {",
    "        return new.pop().unwrap();",
    "    }",
    "    let props = Properties::concat(&new);",
    "    Hir { kind: HirKind::Concat(new), props }",
    "}"
  ],
  "size": {
    "chain": 66,
    "contra": 60,
    "min_set": 8
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "false",
          "line": 462,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "false",
          "line": 451,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Empty",
          "norm": null,
          "value": "false",
          "line": 483,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 485,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "true",
          "line": 495,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        12,
        76,
        81,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        102,
        104,
        105,
        106,
        107,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "false",
          "line": 462,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "false",
          "line": 451,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Empty",
          "norm": null,
          "value": "false",
          "line": 483,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 485,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "false",
          "line": 497,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        12,
        76,
        81,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        102,
        104,
        105,
        106,
        108,
        109,
        110,
        111,
        112,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "false",
          "line": 462,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "false",
          "line": 451,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Empty",
          "norm": null,
          "value": "false",
          "line": 483,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 485,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 497,
          "bound": null
        }
      ],
      "ret": "Hir { kind: HirKind::Concat(new), props }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        12,
        76,
        81,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        102,
        104,
        105,
        106,
        108,
        109,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "false",
          "line": 462,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "false",
          "line": 451,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Empty",
          "norm": null,
          "value": "false",
          "line": 483,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 485,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "true",
          "line": 495,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        12,
        76,
        81,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        107,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "false",
          "line": 462,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "false",
          "line": 451,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Empty",
          "norm": null,
          "value": "false",
          "line": 483,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 485,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "false",
          "line": 497,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        12,
        76,
        81,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        108,
        109,
        110,
        111,
        112,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "false",
          "line": 462,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "false",
          "line": 451,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Empty",
          "norm": null,
          "value": "false",
          "line": 483,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 485,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 497,
          "bound": null
        }
      ],
      "ret": "Hir { kind: HirKind::Concat(new), props }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        12,
        76,
        81,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        108,
        109,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "false",
          "line": 462,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "false",
          "line": 451,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Empty",
          "norm": null,
          "value": "false",
          "line": 483,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 485,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "true",
          "line": 495,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        12,
        76,
        77,
        78,
        79,
        80,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        102,
        104,
        105,
        106,
        107,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "false",
          "line": 462,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "false",
          "line": 451,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Empty",
          "norm": null,
          "value": "false",
          "line": 483,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 485,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "false",
          "line": 497,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        12,
        76,
        77,
        78,
        79,
        80,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        102,
        104,
        105,
        106,
        108,
        109,
        110,
        111,
        112,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "false",
          "line": 462,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "false",
          "line": 451,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Empty",
          "norm": null,
          "value": "false",
          "line": 483,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 485,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 497,
          "bound": null
        }
      ],
      "ret": "Hir { kind: HirKind::Concat(new), props }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        12,
        76,
        77,
        78,
        79,
        80,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        102,
        104,
        105,
        106,
        108,
        109,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "false",
          "line": 462,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "false",
          "line": 451,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Empty",
          "norm": null,
          "value": "false",
          "line": 483,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 485,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "true",
          "line": 495,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        12,
        76,
        77,
        78,
        79,
        80,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        107,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "false",
          "line": 462,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "false",
          "line": 451,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Empty",
          "norm": null,
          "value": "false",
          "line": 483,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 485,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "false",
          "line": 497,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        12,
        76,
        77,
        78,
        79,
        80,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        108,
        109,
        110,
        111,
        112,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "false",
          "line": 462,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "false",
          "line": 451,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Empty",
          "norm": null,
          "value": "false",
          "line": 483,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 485,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 497,
          "bound": null
        }
      ],
      "ret": "Hir { kind: HirKind::Concat(new), props }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        12,
        76,
        77,
        78,
        79,
        80,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        108,
        109,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        125
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "true",
          "line": 463,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "false",
          "line": 466,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 474,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "false",
          "line": 463,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "true",
          "line": 495,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        14,
        28,
        29,
        30,
        31,
        32,
        35,
        37,
        38,
        39,
        53,
        58,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        30,
        31,
        32,
        34,
        36,
        71,
        72,
        73,
        74,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        102,
        104,
        105,
        106,
        107,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "true",
          "line": 463,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "false",
          "line": 466,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 474,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "false",
          "line": 463,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "false",
          "line": 497,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        14,
        28,
        29,
        30,
        31,
        32,
        35,
        37,
        38,
        39,
        53,
        58,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        30,
        31,
        32,
        34,
        36,
        71,
        72,
        73,
        74,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        102,
        104,
        105,
        106,
        108,
        109,
        110,
        111,
        112,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "true",
          "line": 463,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "false",
          "line": 466,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 474,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "false",
          "line": 463,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 497,
          "bound": null
        }
      ],
      "ret": "Hir { kind: HirKind::Concat(new), props }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        14,
        28,
        29,
        30,
        31,
        32,
        35,
        37,
        38,
        39,
        53,
        58,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        30,
        31,
        32,
        34,
        36,
        71,
        72,
        73,
        74,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        102,
        104,
        105,
        106,
        108,
        109,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "true",
          "line": 463,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "false",
          "line": 466,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 474,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "false",
          "line": 463,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "true",
          "line": 495,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        14,
        28,
        29,
        30,
        31,
        32,
        35,
        37,
        38,
        39,
        53,
        58,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        30,
        31,
        32,
        34,
        36,
        71,
        72,
        73,
        74,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        107,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "true",
          "line": 463,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "false",
          "line": 466,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 474,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "false",
          "line": 463,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "false",
          "line": 497,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        14,
        28,
        29,
        30,
        31,
        32,
        35,
        37,
        38,
        39,
        53,
        58,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        30,
        31,
        32,
        34,
        36,
        71,
        72,
        73,
        74,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        108,
        109,
        110,
        111,
        112,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "true",
          "line": 463,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "false",
          "line": 466,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 474,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "false",
          "line": 463,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 497,
          "bound": null
        }
      ],
      "ret": "Hir { kind: HirKind::Concat(new), props }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        14,
        28,
        29,
        30,
        31,
        32,
        35,
        37,
        38,
        39,
        53,
        58,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        30,
        31,
        32,
        34,
        36,
        71,
        72,
        73,
        74,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        108,
        109,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "true",
          "line": 463,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "false",
          "line": 466,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 474,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "false",
          "line": 463,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "true",
          "line": 495,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        14,
        28,
        29,
        30,
        31,
        32,
        35,
        37,
        38,
        39,
        53,
        54,
        55,
        56,
        57,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        30,
        31,
        32,
        34,
        36,
        71,
        72,
        73,
        74,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        102,
        104,
        105,
        106,
        107,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "true",
          "line": 463,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "false",
          "line": 466,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 474,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "false",
          "line": 463,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "false",
          "line": 497,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        14,
        28,
        29,
        30,
        31,
        32,
        35,
        37,
        38,
        39,
        53,
        54,
        55,
        56,
        57,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        30,
        31,
        32,
        34,
        36,
        71,
        72,
        73,
        74,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        102,
        104,
        105,
        106,
        108,
        109,
        110,
        111,
        112,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "true",
          "line": 463,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "false",
          "line": 466,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 474,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "false",
          "line": 463,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 497,
          "bound": null
        }
      ],
      "ret": "Hir { kind: HirKind::Concat(new), props }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        14,
        28,
        29,
        30,
        31,
        32,
        35,
        37,
        38,
        39,
        53,
        54,
        55,
        56,
        57,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        30,
        31,
        32,
        34,
        36,
        71,
        72,
        73,
        74,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        102,
        104,
        105,
        106,
        108,
        109,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "true",
          "line": 463,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "false",
          "line": 466,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 474,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "false",
          "line": 463,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "true",
          "line": 495,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        14,
        28,
        29,
        30,
        31,
        32,
        35,
        37,
        38,
        39,
        53,
        54,
        55,
        56,
        57,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        30,
        31,
        32,
        34,
        36,
        71,
        72,
        73,
        74,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        107,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "true",
          "line": 463,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "false",
          "line": 466,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 474,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "false",
          "line": 463,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "false",
          "line": 497,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        14,
        28,
        29,
        30,
        31,
        32,
        35,
        37,
        38,
        39,
        53,
        54,
        55,
        56,
        57,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        30,
        31,
        32,
        34,
        36,
        71,
        72,
        73,
        74,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        108,
        109,
        110,
        111,
        112,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "true",
          "line": 463,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "false",
          "line": 466,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 474,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "false",
          "line": 463,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 497,
          "bound": null
        }
      ],
      "ret": "Hir { kind: HirKind::Concat(new), props }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        14,
        28,
        29,
        30,
        31,
        32,
        35,
        37,
        38,
        39,
        53,
        54,
        55,
        56,
        57,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        30,
        31,
        32,
        34,
        36,
        71,
        72,
        73,
        74,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        108,
        109,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        125
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "true",
          "line": 463,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 465,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut prior_bytes) = prior_lit",
          "norm": null,
          "value": "true",
          "line": 467,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "false",
          "line": 463,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "true",
          "line": 495,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        14,
        28,
        29,
        30,
        31,
        32,
        35,
        37,
        38,
        40,
        41,
        45,
        46,
        47,
        48,
        50,
        51,
        52,
        66,
        67,
        68,
        69,
        70,
        30,
        31,
        32,
        34,
        36,
        71,
        72,
        73,
        74,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        102,
        104,
        105,
        106,
        107,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "true",
          "line": 463,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 465,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut prior_bytes) = prior_lit",
          "norm": null,
          "value": "true",
          "line": 467,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "false",
          "line": 463,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "false",
          "line": 497,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        14,
        28,
        29,
        30,
        31,
        32,
        35,
        37,
        38,
        40,
        41,
        45,
        46,
        47,
        48,
        50,
        51,
        52,
        66,
        67,
        68,
        69,
        70,
        30,
        31,
        32,
        34,
        36,
        71,
        72,
        73,
        74,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        102,
        104,
        105,
        106,
        108,
        109,
        110,
        111,
        112,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "true",
          "line": 463,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 465,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut prior_bytes) = prior_lit",
          "norm": null,
          "value": "true",
          "line": 467,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "false",
          "line": 463,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 497,
          "bound": null
        }
      ],
      "ret": "Hir { kind: HirKind::Concat(new), props }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        14,
        28,
        29,
        30,
        31,
        32,
        35,
        37,
        38,
        40,
        41,
        45,
        46,
        47,
        48,
        50,
        51,
        52,
        66,
        67,
        68,
        69,
        70,
        30,
        31,
        32,
        34,
        36,
        71,
        72,
        73,
        74,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        102,
        104,
        105,
        106,
        108,
        109,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "true",
          "line": 463,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 465,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut prior_bytes) = prior_lit",
          "norm": null,
          "value": "true",
          "line": 467,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "false",
          "line": 463,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "true",
          "line": 495,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        14,
        28,
        29,
        30,
        31,
        32,
        35,
        37,
        38,
        40,
        41,
        45,
        46,
        47,
        48,
        50,
        51,
        52,
        66,
        67,
        68,
        69,
        70,
        30,
        31,
        32,
        34,
        36,
        71,
        72,
        73,
        74,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        107,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 29,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "true",
          "line": 463,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 465,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut prior_bytes) = prior_lit",
          "norm": null,
          "value": "true",
          "line": 467,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "false",
          "line": 463,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "false",
          "line": 497,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        14,
        28,
        29,
        30,
        31,
        32,
        35,
        37,
        38,
        40,
        41,
        45,
        46,
        47,
        48,
        50,
        51,
        52,
        66,
        67,
        68,
        69,
        70,
        30,
        31,
        32,
        34,
        36,
        71,
        72,
        73,
        74,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        108,
        109,
        110,
        111,
        112,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 30,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "true",
          "line": 463,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 465,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut prior_bytes) = prior_lit",
          "norm": null,
          "value": "true",
          "line": 467,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "false",
          "line": 463,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 497,
          "bound": null
        }
      ],
      "ret": "Hir { kind: HirKind::Concat(new), props }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        14,
        28,
        29,
        30,
        31,
        32,
        35,
        37,
        38,
        40,
        41,
        45,
        46,
        47,
        48,
        50,
        51,
        52,
        66,
        67,
        68,
        69,
        70,
        30,
        31,
        32,
        34,
        36,
        71,
        72,
        73,
        74,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        108,
        109,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 31,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "true",
          "line": 463,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 465,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut prior_bytes) = prior_lit",
          "norm": null,
          "value": "true",
          "line": 467,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "false",
          "line": 463,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "true",
          "line": 495,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        14,
        28,
        29,
        30,
        31,
        32,
        35,
        37,
        38,
        40,
        41,
        42,
        43,
        44,
        51,
        52,
        66,
        67,
        68,
        69,
        70,
        30,
        31,
        32,
        34,
        36,
        71,
        72,
        73,
        74,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        102,
        104,
        105,
        106,
        107,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 32,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "true",
          "line": 463,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 465,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut prior_bytes) = prior_lit",
          "norm": null,
          "value": "true",
          "line": 467,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "false",
          "line": 463,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "false",
          "line": 497,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        14,
        28,
        29,
        30,
        31,
        32,
        35,
        37,
        38,
        40,
        41,
        42,
        43,
        44,
        51,
        52,
        66,
        67,
        68,
        69,
        70,
        30,
        31,
        32,
        34,
        36,
        71,
        72,
        73,
        74,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        102,
        104,
        105,
        106,
        108,
        109,
        110,
        111,
        112,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 33,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "true",
          "line": 463,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 465,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut prior_bytes) = prior_lit",
          "norm": null,
          "value": "true",
          "line": 467,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "false",
          "line": 463,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 497,
          "bound": null
        }
      ],
      "ret": "Hir { kind: HirKind::Concat(new), props }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        14,
        28,
        29,
        30,
        31,
        32,
        35,
        37,
        38,
        40,
        41,
        42,
        43,
        44,
        51,
        52,
        66,
        67,
        68,
        69,
        70,
        30,
        31,
        32,
        34,
        36,
        71,
        72,
        73,
        74,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        102,
        104,
        105,
        106,
        108,
        109,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 34,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "true",
          "line": 463,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 465,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut prior_bytes) = prior_lit",
          "norm": null,
          "value": "true",
          "line": 467,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "false",
          "line": 463,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "true",
          "line": 495,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        14,
        28,
        29,
        30,
        31,
        32,
        35,
        37,
        38,
        40,
        41,
        42,
        43,
        44,
        51,
        52,
        66,
        67,
        68,
        69,
        70,
        30,
        31,
        32,
        34,
        36,
        71,
        72,
        73,
        74,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        107,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 35,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "true",
          "line": 463,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 465,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut prior_bytes) = prior_lit",
          "norm": null,
          "value": "true",
          "line": 467,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "false",
          "line": 463,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "false",
          "line": 497,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        14,
        28,
        29,
        30,
        31,
        32,
        35,
        37,
        38,
        40,
        41,
        42,
        43,
        44,
        51,
        52,
        66,
        67,
        68,
        69,
        70,
        30,
        31,
        32,
        34,
        36,
        71,
        72,
        73,
        74,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        108,
        109,
        110,
        111,
        112,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 36,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "true",
          "line": 463,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 465,
          "bound": null
        },
        {
          "cond": "kind2 matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut prior_bytes) = prior_lit",
          "norm": null,
          "value": "true",
          "line": 467,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "false",
          "line": 463,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 497,
          "bound": null
        }
      ],
      "ret": "Hir { kind: HirKind::Concat(new), props }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        14,
        28,
        29,
        30,
        31,
        32,
        35,
        37,
        38,
        40,
        41,
        42,
        43,
        44,
        51,
        52,
        66,
        67,
        68,
        69,
        70,
        30,
        31,
        32,
        34,
        36,
        71,
        72,
        73,
        74,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        108,
        109,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        125
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 37,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "false",
          "line": 463,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "true",
          "line": 495,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        14,
        28,
        29,
        30,
        31,
        32,
        34,
        36,
        71,
        72,
        73,
        74,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        102,
        104,
        105,
        106,
        107,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 38,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "false",
          "line": 463,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "false",
          "line": 497,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        14,
        28,
        29,
        30,
        31,
        32,
        34,
        36,
        71,
        72,
        73,
        74,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        102,
        104,
        105,
        106,
        108,
        109,
        110,
        111,
        112,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 39,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "false",
          "line": 463,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 497,
          "bound": null
        }
      ],
      "ret": "Hir { kind: HirKind::Concat(new), props }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        14,
        28,
        29,
        30,
        31,
        32,
        34,
        36,
        71,
        72,
        73,
        74,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        102,
        104,
        105,
        106,
        108,
        109,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 40,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "false",
          "line": 463,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "true",
          "line": 495,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        14,
        28,
        29,
        30,
        31,
        32,
        34,
        36,
        71,
        72,
        73,
        74,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        107,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 41,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "false",
          "line": 463,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "false",
          "line": 497,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        14,
        28,
        29,
        30,
        31,
        32,
        34,
        36,
        71,
        72,
        73,
        74,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        108,
        109,
        110,
        111,
        112,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 42,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Concat(subs2)",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub2 in subs2",
          "norm": null,
          "value": "false",
          "line": 463,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 497,
          "bound": null
        }
      ],
      "ret": "Hir { kind: HirKind::Concat(new), props }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        14,
        28,
        29,
        30,
        31,
        32,
        34,
        36,
        71,
        72,
        73,
        74,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        108,
        109,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 43,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "let Some(ref mut prior_bytes) = prior_lit",
          "norm": null,
          "value": "true",
          "line": 452,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "true",
          "line": 495,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        13,
        16,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        102,
        104,
        105,
        106,
        107,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 44,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "let Some(ref mut prior_bytes) = prior_lit",
          "norm": null,
          "value": "true",
          "line": 452,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "false",
          "line": 497,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        13,
        16,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        102,
        104,
        105,
        106,
        108,
        109,
        110,
        111,
        112,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 45,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "let Some(ref mut prior_bytes) = prior_lit",
          "norm": null,
          "value": "true",
          "line": 452,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 497,
          "bound": null
        }
      ],
      "ret": "Hir { kind: HirKind::Concat(new), props }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        13,
        16,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        102,
        104,
        105,
        106,
        108,
        109,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 46,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "let Some(ref mut prior_bytes) = prior_lit",
          "norm": null,
          "value": "true",
          "line": 452,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "true",
          "line": 495,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        13,
        16,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        107,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 47,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "let Some(ref mut prior_bytes) = prior_lit",
          "norm": null,
          "value": "true",
          "line": 452,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "false",
          "line": 497,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        13,
        16,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        108,
        109,
        110,
        111,
        112,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 48,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "let Some(ref mut prior_bytes) = prior_lit",
          "norm": null,
          "value": "true",
          "line": 452,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 497,
          "bound": null
        }
      ],
      "ret": "Hir { kind: HirKind::Concat(new), props }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        13,
        16,
        20,
        21,
        22,
        23,
        25,
        26,
        27,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        108,
        109,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 49,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "let Some(ref mut prior_bytes) = prior_lit",
          "norm": null,
          "value": "true",
          "line": 452,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "true",
          "line": 495,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        13,
        16,
        17,
        18,
        19,
        26,
        27,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        102,
        104,
        105,
        106,
        107,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 50,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "let Some(ref mut prior_bytes) = prior_lit",
          "norm": null,
          "value": "true",
          "line": 452,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "false",
          "line": 497,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        13,
        16,
        17,
        18,
        19,
        26,
        27,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        102,
        104,
        105,
        106,
        108,
        109,
        110,
        111,
        112,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 51,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "let Some(ref mut prior_bytes) = prior_lit",
          "norm": null,
          "value": "true",
          "line": 452,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 497,
          "bound": null
        }
      ],
      "ret": "Hir { kind: HirKind::Concat(new), props }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        13,
        16,
        17,
        18,
        19,
        26,
        27,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        102,
        104,
        105,
        106,
        108,
        109,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 52,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "let Some(ref mut prior_bytes) = prior_lit",
          "norm": null,
          "value": "true",
          "line": 452,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "true",
          "line": 495,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        13,
        16,
        17,
        18,
        19,
        26,
        27,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        107,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 53,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "let Some(ref mut prior_bytes) = prior_lit",
          "norm": null,
          "value": "true",
          "line": 452,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "false",
          "line": 497,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        13,
        16,
        17,
        18,
        19,
        26,
        27,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        108,
        109,
        110,
        111,
        112,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 54,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Literal(Literal(bytes))",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "let Some(ref mut prior_bytes) = prior_lit",
          "norm": null,
          "value": "true",
          "line": 452,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 497,
          "bound": null
        }
      ],
      "ret": "Hir { kind: HirKind::Concat(new), props }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        13,
        16,
        17,
        18,
        19,
        26,
        27,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        108,
        109,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        125
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 55,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Empty",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Empty",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "true",
          "line": 495,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        15,
        75,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        102,
        104,
        105,
        106,
        107,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 56,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Empty",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Empty",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "false",
          "line": 497,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        15,
        75,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        102,
        104,
        105,
        106,
        108,
        109,
        110,
        111,
        112,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 57,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Empty",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Empty",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 497,
          "bound": null
        }
      ],
      "ret": "Hir { kind: HirKind::Concat(new), props }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        15,
        75,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        102,
        104,
        105,
        106,
        108,
        109,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 58,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Empty",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Empty",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "true",
          "line": 495,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        15,
        75,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        107,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 59,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Empty",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Empty",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "false",
          "line": 497,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        15,
        75,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        108,
        109,
        110,
        111,
        112,
        122,
        123,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 60,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Empty",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Empty",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 497,
          "bound": null
        }
      ],
      "ret": "Hir { kind: HirKind::Concat(new), props }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        15,
        75,
        89,
        90,
        91,
        92,
        93,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        108,
        109,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        125
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 61,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "true",
          "line": 495,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        102,
        104,
        105,
        106,
        107,
        122,
        123,
        124,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 62,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "false",
          "line": 497,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        102,
        104,
        105,
        106,
        108,
        109,
        110,
        111,
        112,
        122,
        123,
        124,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 63,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 497,
          "bound": null
        }
      ],
      "ret": "Hir { kind: HirKind::Concat(new), props }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        102,
        104,
        105,
        106,
        108,
        109,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 64,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "true",
          "line": 495,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        107,
        122,
        123,
        124,
        125
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 65,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "false",
          "line": 497,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        108,
        109,
        110,
        111,
        112,
        122,
        123,
        124,
        125
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 66,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        },
        {
          "cond": "let Some(prior_bytes) = prior_lit.take()",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 495,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 497,
          "bound": null
        }
      ],
      "ret": "Hir { kind: HirKind::Concat(new), props }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        103,
        104,
        105,
        106,
        108,
        109,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        125
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}