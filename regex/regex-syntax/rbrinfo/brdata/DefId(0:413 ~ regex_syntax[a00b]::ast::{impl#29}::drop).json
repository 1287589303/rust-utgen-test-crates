{
  "name": "regex_syntax::ast::{impl#29}::drop",
  "mod_info": {
    "name": "ast",
    "loc": "regex-syntax/src/lib.rs:186:1:186:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/ast/mod.rs:1635:5:1684:6",
  "doc": "",
  "code": [
    "fn drop(&mut self) {",
    "    use core::mem;",
    "",
    "    match *self {",
    "        Ast::Empty(_)",
    "        | Ast::Flags(_)",
    "        | Ast::Literal(_)",
    "        | Ast::Dot(_)",
    "        | Ast::Assertion(_)",
    "        | Ast::ClassUnicode(_)",
    "        | Ast::ClassPerl(_)",
    "        // Bracketed classes are recursive, they get their own Drop impl.",
    "        | Ast::ClassBracketed(_) => return,",
    "        Ast::Repetition(ref x) if !x.ast.has_subexprs() => return,",
    "        Ast::Group(ref x) if !x.ast.has_subexprs() => return,",
    "        Ast::Alternation(ref x) if x.asts.is_empty() => return,",
    "        Ast::Concat(ref x) if x.asts.is_empty() => return,",
    "        _ => {}",
    "    }",
    "",
    "    let empty_span = || Span::splat(Position::new(0, 0, 0));",
    "    let empty_ast = || Ast::empty(empty_span());",
    "    let mut stack = vec![mem::replace(self, empty_ast())];",
    "    while let Some(mut ast) = stack.pop() {",
    "        match ast {",
    "            Ast::Empty(_)",
    "            | Ast::Flags(_)",
    "            | Ast::Literal(_)",
    "            | Ast::Dot(_)",
    "            | Ast::Assertion(_)",
    "            | Ast::ClassUnicode(_)",
    "            | Ast::ClassPerl(_)",
    "            // Bracketed classes are recursive, so they get their own Drop",
    "            // impl.",
    "            | Ast::ClassBracketed(_) => {}",
    "            Ast::Repetition(ref mut x) => {",
    "                stack.push(mem::replace(&mut x.ast, empty_ast()));",
    "            }",
    "            Ast::Group(ref mut x) => {",
    "                stack.push(mem::replace(&mut x.ast, empty_ast()));",
    "            }",
    "            Ast::Alternation(ref mut x) => {",
    "                stack.extend(x.asts.drain(..));",
    "            }",
    "            Ast::Concat(ref mut x) => {",
    "                stack.extend(x.asts.drain(..));",
    "            }",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 77,
    "contra": 0,
    "min_set": 24
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*self matches Ast::Dot(_)",
          "norm": null,
          "value": "false",
          "line": 1642,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Assertion(_)",
          "norm": null,
          "value": "false",
          "line": 1643,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassUnicode(_)",
          "norm": null,
          "value": "false",
          "line": 1644,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "false",
          "line": 1650,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassBracketed(_)",
          "norm": null,
          "value": "false",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1639,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassPerl(_)",
          "norm": null,
          "value": "false",
          "line": 1645,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Literal(_)",
          "norm": null,
          "value": "false",
          "line": 1641,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "false",
          "line": 1649,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "false",
          "line": 1648,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "*self matches _",
          "norm": null,
          "value": "true",
          "line": 1652,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1640,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*self matches Ast::Dot(_)",
          "norm": null,
          "value": "false",
          "line": 1642,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Assertion(_)",
          "norm": null,
          "value": "false",
          "line": 1643,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassUnicode(_)",
          "norm": null,
          "value": "false",
          "line": 1644,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "false",
          "line": 1650,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassBracketed(_)",
          "norm": null,
          "value": "false",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1639,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassPerl(_)",
          "norm": null,
          "value": "false",
          "line": 1645,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Literal(_)",
          "norm": null,
          "value": "false",
          "line": 1641,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "false",
          "line": 1649,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "false",
          "line": 1648,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "*self matches _",
          "norm": null,
          "value": "true",
          "line": 1652,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1640,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Concat(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        54,
        55,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "*self matches Ast::Dot(_)",
          "norm": null,
          "value": "false",
          "line": 1642,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Assertion(_)",
          "norm": null,
          "value": "false",
          "line": 1643,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassUnicode(_)",
          "norm": null,
          "value": "false",
          "line": 1644,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "false",
          "line": 1650,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassBracketed(_)",
          "norm": null,
          "value": "false",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1639,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassPerl(_)",
          "norm": null,
          "value": "false",
          "line": 1645,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Literal(_)",
          "norm": null,
          "value": "false",
          "line": 1641,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "false",
          "line": 1649,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "false",
          "line": 1648,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "*self matches _",
          "norm": null,
          "value": "true",
          "line": 1652,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1640,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Alternation(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Alternation(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        39,
        51,
        52,
        53,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "*self matches Ast::Dot(_)",
          "norm": null,
          "value": "false",
          "line": 1642,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Assertion(_)",
          "norm": null,
          "value": "false",
          "line": 1643,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassUnicode(_)",
          "norm": null,
          "value": "false",
          "line": 1644,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "false",
          "line": 1650,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassBracketed(_)",
          "norm": null,
          "value": "false",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1639,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassPerl(_)",
          "norm": null,
          "value": "false",
          "line": 1645,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Literal(_)",
          "norm": null,
          "value": "false",
          "line": 1641,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "false",
          "line": 1649,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "false",
          "line": 1648,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "*self matches _",
          "norm": null,
          "value": "true",
          "line": 1652,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1640,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Group(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Group(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        38,
        47,
        48,
        49,
        50,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "*self matches Ast::Dot(_)",
          "norm": null,
          "value": "false",
          "line": 1642,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Assertion(_)",
          "norm": null,
          "value": "false",
          "line": 1643,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassUnicode(_)",
          "norm": null,
          "value": "false",
          "line": 1644,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "false",
          "line": 1650,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassBracketed(_)",
          "norm": null,
          "value": "false",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1639,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassPerl(_)",
          "norm": null,
          "value": "false",
          "line": 1645,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Literal(_)",
          "norm": null,
          "value": "false",
          "line": 1641,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "false",
          "line": 1649,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "false",
          "line": 1648,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "*self matches _",
          "norm": null,
          "value": "true",
          "line": 1652,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1640,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Repetition(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Repetition(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        43,
        44,
        45,
        46,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "*self matches Ast::Dot(_)",
          "norm": null,
          "value": "false",
          "line": 1642,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Assertion(_)",
          "norm": null,
          "value": "false",
          "line": 1643,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassUnicode(_)",
          "norm": null,
          "value": "false",
          "line": 1644,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "false",
          "line": 1650,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassBracketed(_)",
          "norm": null,
          "value": "false",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1639,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassPerl(_)",
          "norm": null,
          "value": "false",
          "line": 1645,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Literal(_)",
          "norm": null,
          "value": "false",
          "line": 1641,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "false",
          "line": 1649,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "false",
          "line": 1648,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "*self matches _",
          "norm": null,
          "value": "true",
          "line": 1652,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1640,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassBracketed(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "*self matches Ast::Dot(_)",
          "norm": null,
          "value": "false",
          "line": 1642,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Assertion(_)",
          "norm": null,
          "value": "false",
          "line": 1643,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassUnicode(_)",
          "norm": null,
          "value": "false",
          "line": 1644,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "false",
          "line": 1650,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassBracketed(_)",
          "norm": null,
          "value": "false",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1639,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassPerl(_)",
          "norm": null,
          "value": "false",
          "line": 1645,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Literal(_)",
          "norm": null,
          "value": "false",
          "line": 1641,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "false",
          "line": 1649,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "false",
          "line": 1648,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "*self matches _",
          "norm": null,
          "value": "true",
          "line": 1652,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1640,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "*self matches Ast::Dot(_)",
          "norm": null,
          "value": "false",
          "line": 1642,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Assertion(_)",
          "norm": null,
          "value": "false",
          "line": 1643,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassUnicode(_)",
          "norm": null,
          "value": "false",
          "line": 1644,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "false",
          "line": 1650,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassBracketed(_)",
          "norm": null,
          "value": "false",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1639,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassPerl(_)",
          "norm": null,
          "value": "false",
          "line": 1645,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Literal(_)",
          "norm": null,
          "value": "false",
          "line": 1641,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "false",
          "line": 1649,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "false",
          "line": 1648,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "*self matches _",
          "norm": null,
          "value": "true",
          "line": 1652,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1640,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassUnicode(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "*self matches Ast::Dot(_)",
          "norm": null,
          "value": "false",
          "line": 1642,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Assertion(_)",
          "norm": null,
          "value": "false",
          "line": 1643,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassUnicode(_)",
          "norm": null,
          "value": "false",
          "line": 1644,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "false",
          "line": 1650,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassBracketed(_)",
          "norm": null,
          "value": "false",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1639,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassPerl(_)",
          "norm": null,
          "value": "false",
          "line": 1645,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Literal(_)",
          "norm": null,
          "value": "false",
          "line": 1641,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "false",
          "line": 1649,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "false",
          "line": 1648,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "*self matches _",
          "norm": null,
          "value": "true",
          "line": 1652,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1640,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Assertion(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "*self matches Ast::Dot(_)",
          "norm": null,
          "value": "false",
          "line": 1642,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Assertion(_)",
          "norm": null,
          "value": "false",
          "line": 1643,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassUnicode(_)",
          "norm": null,
          "value": "false",
          "line": 1644,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "false",
          "line": 1650,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassBracketed(_)",
          "norm": null,
          "value": "false",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1639,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassPerl(_)",
          "norm": null,
          "value": "false",
          "line": 1645,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Literal(_)",
          "norm": null,
          "value": "false",
          "line": 1641,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "false",
          "line": 1649,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "false",
          "line": 1648,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "*self matches _",
          "norm": null,
          "value": "true",
          "line": 1652,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1640,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Dot(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "*self matches Ast::Dot(_)",
          "norm": null,
          "value": "false",
          "line": 1642,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Assertion(_)",
          "norm": null,
          "value": "false",
          "line": 1643,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassUnicode(_)",
          "norm": null,
          "value": "false",
          "line": 1644,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "false",
          "line": 1650,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassBracketed(_)",
          "norm": null,
          "value": "false",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1639,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassPerl(_)",
          "norm": null,
          "value": "false",
          "line": 1645,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Literal(_)",
          "norm": null,
          "value": "false",
          "line": 1641,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "false",
          "line": 1649,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "false",
          "line": 1648,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "*self matches _",
          "norm": null,
          "value": "true",
          "line": 1652,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1640,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Literal(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "*self matches Ast::Dot(_)",
          "norm": null,
          "value": "false",
          "line": 1642,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Assertion(_)",
          "norm": null,
          "value": "false",
          "line": 1643,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassUnicode(_)",
          "norm": null,
          "value": "false",
          "line": 1644,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "false",
          "line": 1650,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassBracketed(_)",
          "norm": null,
          "value": "false",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1639,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassPerl(_)",
          "norm": null,
          "value": "false",
          "line": 1645,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Literal(_)",
          "norm": null,
          "value": "false",
          "line": 1641,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "false",
          "line": 1649,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "false",
          "line": 1648,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "*self matches _",
          "norm": null,
          "value": "true",
          "line": 1652,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1640,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "*self matches Ast::Dot(_)",
          "norm": null,
          "value": "false",
          "line": 1642,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Assertion(_)",
          "norm": null,
          "value": "false",
          "line": 1643,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassUnicode(_)",
          "norm": null,
          "value": "false",
          "line": 1644,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "false",
          "line": 1650,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassBracketed(_)",
          "norm": null,
          "value": "false",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1639,
          "bound": null
        },
        {
          "cond": "*self matches Ast::ClassPerl(_)",
          "norm": null,
          "value": "false",
          "line": 1645,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Literal(_)",
          "norm": null,
          "value": "false",
          "line": 1641,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "false",
          "line": 1649,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "false",
          "line": 1648,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "*self matches _",
          "norm": null,
          "value": "true",
          "line": 1652,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1640,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.asts.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1651,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        20,
        21,
        22,
        62,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.asts.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        20,
        21,
        23,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.asts.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Concat(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        20,
        21,
        23,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        54,
        55,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.asts.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Alternation(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Alternation(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        20,
        21,
        23,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        39,
        51,
        52,
        53,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.asts.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Group(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Group(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        20,
        21,
        23,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        38,
        47,
        48,
        49,
        50,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.asts.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Repetition(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Repetition(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        20,
        21,
        23,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        43,
        44,
        45,
        46,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.asts.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassBracketed(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        20,
        21,
        23,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.asts.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        20,
        21,
        23,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.asts.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassUnicode(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        20,
        21,
        23,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.asts.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Assertion(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        20,
        21,
        23,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.asts.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Dot(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        20,
        21,
        23,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.asts.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Literal(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        20,
        21,
        23,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.asts.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        20,
        21,
        23,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.asts.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        20,
        21,
        23,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.asts.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1650,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        16,
        17,
        18,
        62,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 29,
      "conds": [
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.asts.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1650,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        16,
        17,
        19,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 30,
      "conds": [
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.asts.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1650,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Concat(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        16,
        17,
        19,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        54,
        55,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 31,
      "conds": [
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.asts.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1650,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Alternation(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Alternation(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        16,
        17,
        19,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        39,
        51,
        52,
        53,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 32,
      "conds": [
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.asts.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1650,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Group(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Group(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        16,
        17,
        19,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        38,
        47,
        48,
        49,
        50,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 33,
      "conds": [
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.asts.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1650,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Repetition(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Repetition(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        16,
        17,
        19,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        43,
        44,
        45,
        46,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 34,
      "conds": [
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.asts.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1650,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassBracketed(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        16,
        17,
        19,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 35,
      "conds": [
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.asts.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1650,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        16,
        17,
        19,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 36,
      "conds": [
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.asts.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1650,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassUnicode(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        16,
        17,
        19,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 37,
      "conds": [
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.asts.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1650,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Assertion(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        16,
        17,
        19,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 38,
      "conds": [
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.asts.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1650,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Dot(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        16,
        17,
        19,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 39,
      "conds": [
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.asts.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1650,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Literal(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        16,
        17,
        19,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 40,
      "conds": [
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.asts.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1650,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        16,
        17,
        19,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 41,
      "conds": [
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.asts.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1650,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        16,
        17,
        19,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 42,
      "conds": [
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.ast.has_subexprs()",
          "norm": null,
          "value": "true",
          "line": 1649,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        12,
        13,
        14,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 43,
      "conds": [
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.ast.has_subexprs()",
          "norm": null,
          "value": "true",
          "line": 1649,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Concat(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        12,
        13,
        14,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        54,
        55,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 44,
      "conds": [
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.ast.has_subexprs()",
          "norm": null,
          "value": "true",
          "line": 1649,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Alternation(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Alternation(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        12,
        13,
        14,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        39,
        51,
        52,
        53,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 45,
      "conds": [
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.ast.has_subexprs()",
          "norm": null,
          "value": "true",
          "line": 1649,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Group(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Group(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        12,
        13,
        14,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        38,
        47,
        48,
        49,
        50,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 46,
      "conds": [
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.ast.has_subexprs()",
          "norm": null,
          "value": "true",
          "line": 1649,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Repetition(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Repetition(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        12,
        13,
        14,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        43,
        44,
        45,
        46,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 47,
      "conds": [
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.ast.has_subexprs()",
          "norm": null,
          "value": "true",
          "line": 1649,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassBracketed(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        12,
        13,
        14,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 48,
      "conds": [
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.ast.has_subexprs()",
          "norm": null,
          "value": "true",
          "line": 1649,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        12,
        13,
        14,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 49,
      "conds": [
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.ast.has_subexprs()",
          "norm": null,
          "value": "true",
          "line": 1649,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassUnicode(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        12,
        13,
        14,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 50,
      "conds": [
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.ast.has_subexprs()",
          "norm": null,
          "value": "true",
          "line": 1649,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Assertion(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        12,
        13,
        14,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 51,
      "conds": [
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.ast.has_subexprs()",
          "norm": null,
          "value": "true",
          "line": 1649,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Dot(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        12,
        13,
        14,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 52,
      "conds": [
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.ast.has_subexprs()",
          "norm": null,
          "value": "true",
          "line": 1649,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Literal(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        12,
        13,
        14,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 53,
      "conds": [
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.ast.has_subexprs()",
          "norm": null,
          "value": "true",
          "line": 1649,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        12,
        13,
        14,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 54,
      "conds": [
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.ast.has_subexprs()",
          "norm": null,
          "value": "true",
          "line": 1649,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        12,
        13,
        14,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 55,
      "conds": [
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Group(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.ast.has_subexprs()",
          "norm": null,
          "value": "false",
          "line": 1649,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        12,
        13,
        15,
        62,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 56,
      "conds": [
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.ast.has_subexprs()",
          "norm": null,
          "value": "true",
          "line": 1648,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        8,
        9,
        10,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 57,
      "conds": [
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.ast.has_subexprs()",
          "norm": null,
          "value": "true",
          "line": 1648,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Concat(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        8,
        9,
        10,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        54,
        55,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 58,
      "conds": [
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.ast.has_subexprs()",
          "norm": null,
          "value": "true",
          "line": 1648,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Alternation(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Alternation(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        8,
        9,
        10,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        39,
        51,
        52,
        53,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 59,
      "conds": [
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.ast.has_subexprs()",
          "norm": null,
          "value": "true",
          "line": 1648,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Group(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Group(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        8,
        9,
        10,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        38,
        47,
        48,
        49,
        50,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 60,
      "conds": [
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.ast.has_subexprs()",
          "norm": null,
          "value": "true",
          "line": 1648,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Repetition(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Repetition(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        8,
        9,
        10,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        43,
        44,
        45,
        46,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 61,
      "conds": [
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.ast.has_subexprs()",
          "norm": null,
          "value": "true",
          "line": 1648,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassBracketed(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        8,
        9,
        10,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 62,
      "conds": [
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.ast.has_subexprs()",
          "norm": null,
          "value": "true",
          "line": 1648,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        8,
        9,
        10,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 63,
      "conds": [
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.ast.has_subexprs()",
          "norm": null,
          "value": "true",
          "line": 1648,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassUnicode(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        8,
        9,
        10,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 64,
      "conds": [
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.ast.has_subexprs()",
          "norm": null,
          "value": "true",
          "line": 1648,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Assertion(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        8,
        9,
        10,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 65,
      "conds": [
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.ast.has_subexprs()",
          "norm": null,
          "value": "true",
          "line": 1648,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Dot(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        8,
        9,
        10,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 66,
      "conds": [
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.ast.has_subexprs()",
          "norm": null,
          "value": "true",
          "line": 1648,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Literal(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        8,
        9,
        10,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 67,
      "conds": [
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.ast.has_subexprs()",
          "norm": null,
          "value": "true",
          "line": 1648,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        8,
        9,
        10,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 68,
      "conds": [
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.ast.has_subexprs()",
          "norm": null,
          "value": "true",
          "line": 1648,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "ast matches Ast::ClassPerl(_) or Ast::ClassUnicode(_) or Ast::Literal(_) or Ast::Dot(_) or Ast::Flags(_) or Ast::Assertion(_) or Ast::ClassBracketed(_) or Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        },
        {
          "cond": "let Some(mut ast) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 1658,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        8,
        9,
        10,
        1,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        41,
        42,
        56,
        58,
        59,
        31,
        32,
        33,
        57,
        60,
        61,
        63
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 69,
      "conds": [
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "x.ast.has_subexprs()",
          "norm": null,
          "value": "false",
          "line": 1648,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        8,
        9,
        11,
        62,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 70,
      "conds": [
        {
          "cond": "*self matches Ast::ClassBracketed(_)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Dot(_) or Ast::Assertion(_) or Ast::ClassUnicode(_) or Ast::ClassBracketed(_) or Ast::Empty(_) or Ast::ClassPerl(_) or Ast::Literal(_) or Ast::Flags(_)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        6,
        7,
        62,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 71,
      "conds": [
        {
          "cond": "*self matches Ast::ClassPerl(_)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Dot(_) or Ast::Assertion(_) or Ast::ClassUnicode(_) or Ast::ClassBracketed(_) or Ast::Empty(_) or Ast::ClassPerl(_) or Ast::Literal(_) or Ast::Flags(_)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        6,
        7,
        62,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 72,
      "conds": [
        {
          "cond": "*self matches Ast::ClassUnicode(_)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Dot(_) or Ast::Assertion(_) or Ast::ClassUnicode(_) or Ast::ClassBracketed(_) or Ast::Empty(_) or Ast::ClassPerl(_) or Ast::Literal(_) or Ast::Flags(_)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        6,
        7,
        62,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 73,
      "conds": [
        {
          "cond": "*self matches Ast::Assertion(_)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Dot(_) or Ast::Assertion(_) or Ast::ClassUnicode(_) or Ast::ClassBracketed(_) or Ast::Empty(_) or Ast::ClassPerl(_) or Ast::Literal(_) or Ast::Flags(_)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        6,
        7,
        62,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 74,
      "conds": [
        {
          "cond": "*self matches Ast::Dot(_)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Dot(_) or Ast::Assertion(_) or Ast::ClassUnicode(_) or Ast::ClassBracketed(_) or Ast::Empty(_) or Ast::ClassPerl(_) or Ast::Literal(_) or Ast::Flags(_)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        6,
        7,
        62,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 75,
      "conds": [
        {
          "cond": "*self matches Ast::Literal(_)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Dot(_) or Ast::Assertion(_) or Ast::ClassUnicode(_) or Ast::ClassBracketed(_) or Ast::Empty(_) or Ast::ClassPerl(_) or Ast::Literal(_) or Ast::Flags(_)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        6,
        7,
        62,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 76,
      "conds": [
        {
          "cond": "*self matches Ast::Flags(_)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Dot(_) or Ast::Assertion(_) or Ast::ClassUnicode(_) or Ast::ClassBracketed(_) or Ast::Empty(_) or Ast::ClassPerl(_) or Ast::Literal(_) or Ast::Flags(_)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        6,
        7,
        62,
        63
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 77,
      "conds": [
        {
          "cond": "*self matches Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        },
        {
          "cond": "*self matches Ast::Dot(_) or Ast::Assertion(_) or Ast::ClassUnicode(_) or Ast::ClassBracketed(_) or Ast::Empty(_) or Ast::ClassPerl(_) or Ast::Literal(_) or Ast::Flags(_)",
          "norm": null,
          "value": "true",
          "line": 1638,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        6,
        7,
        62,
        63
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}