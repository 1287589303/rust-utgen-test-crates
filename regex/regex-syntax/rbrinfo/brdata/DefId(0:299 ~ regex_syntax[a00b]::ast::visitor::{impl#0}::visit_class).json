{
  "name": "regex_syntax::ast::visitor::{impl#0}::visit_class",
  "mod_info": {
    "name": "ast::visitor",
    "loc": "regex-syntax/src/ast/mod.rs:13:1:13:13"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/visitor.rs:312:5:350:6",
  "doc": "",
  "code": [
    "fn visit_class<V: Visitor>(",
    "    &mut self,",
    "    ast: &'a ast::ClassBracketed,",
    "    visitor: &mut V,",
    ") -> Result<(), V::Err> {",
    "    let mut ast = ClassInduct::from_bracketed(ast);",
    "    loop {",
    "        self.visit_class_pre(&ast, visitor)?;",
    "        if let Some(x) = self.induct_class(&ast) {",
    "            let child = x.child();",
    "            self.stack_class.push((ast, x));",
    "            ast = child;",
    "            continue;",
    "        }",
    "        self.visit_class_post(&ast, visitor)?;",
    "",
    "        // At this point, we now try to pop our call stack until it is",
    "        // either empty or we hit another inductive case.",
    "        loop {",
    "            let (post_ast, frame) = match self.stack_class.pop() {",
    "                None => return Ok(()),",
    "                Some((post_ast, frame)) => (post_ast, frame),",
    "            };",
    "            // If this is a union or a binary op, then we might have",
    "            // additional inductive steps to process.",
    "            if let Some(x) = self.pop_class(frame) {",
    "                if let ClassFrame::BinaryRHS { ref op, .. } = x {",
    "                    visitor.visit_class_set_binary_op_in(op)?;",
    "                }",
    "                ast = x.child();",
    "                self.stack_class.push((post_ast, x));",
    "                break;",
    "            }",
    "            // Otherwise, we've finished visiting all the child nodes for",
    "            // this class node, so we can post visit it now.",
    "            self.visit_class_post(&post_ast, visitor)?;",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 9,
    "contra": 3,
    "min_set": 6
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.visit_class_pre(&ast, visitor)?",
          "norm": null,
          "value": "Err/None",
          "line": 319,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        10,
        66,
        67,
        68
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.visit_class_pre(&ast, visitor)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 319,
          "bound": null
        },
        {
          "cond": "let Some(x) = self.induct_class(&ast)",
          "norm": null,
          "value": "true",
          "line": 320,
          "bound": null
        },
        {
          "cond": "self.visit_class_post(&ast, visitor)?",
          "norm": null,
          "value": "Err/None",
          "line": 326,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        17,
        18,
        19,
        21,
        23,
        24,
        64,
        65,
        68
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.visit_class_pre(&ast, visitor)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 319,
          "bound": null
        },
        {
          "cond": "let Some(x) = self.induct_class(&ast)",
          "norm": null,
          "value": "true",
          "line": 320,
          "bound": null
        },
        {
          "cond": "self.visit_class_post(&ast, visitor)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 326,
          "bound": null
        },
        {
          "cond": "self.stack_class.pop() matches Some((post_ast, frame))",
          "norm": null,
          "value": "true",
          "line": 331,
          "bound": null
        },
        {
          "cond": "let Some(x) = self.pop_class(frame)",
          "norm": null,
          "value": "true",
          "line": 337,
          "bound": null
        },
        {
          "cond": "self.visit_class_post(&post_ast, visitor)?",
          "norm": null,
          "value": "Err/None",
          "line": 347,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        17,
        18,
        19,
        22,
        25,
        26,
        27,
        28,
        31,
        33,
        50,
        51,
        52,
        54,
        56,
        57,
        59,
        60,
        63,
        68
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.visit_class_pre(&ast, visitor)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 319,
          "bound": null
        },
        {
          "cond": "let Some(x) = self.induct_class(&ast)",
          "norm": null,
          "value": "true",
          "line": 320,
          "bound": null
        },
        {
          "cond": "self.visit_class_post(&ast, visitor)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 326,
          "bound": null
        },
        {
          "cond": "self.stack_class.pop() matches Some((post_ast, frame))",
          "norm": null,
          "value": "true",
          "line": 331,
          "bound": null
        },
        {
          "cond": "let Some(x) = self.pop_class(frame)",
          "norm": null,
          "value": "true",
          "line": 337,
          "bound": null
        },
        {
          "cond": "self.visit_class_post(&post_ast, visitor)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 347,
          "bound": null
        },
        {
          "cond": "self.stack_class.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 331,
          "bound": null
        },
        {
          "cond": "self.stack_class.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 331,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        17,
        18,
        19,
        22,
        25,
        26,
        27,
        28,
        31,
        33,
        50,
        51,
        52,
        55,
        58,
        26,
        27,
        28,
        30,
        32,
        68
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.visit_class_pre(&ast, visitor)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 319,
          "bound": null
        },
        {
          "cond": "let Some(x) = self.induct_class(&ast)",
          "norm": null,
          "value": "true",
          "line": 320,
          "bound": null
        },
        {
          "cond": "self.visit_class_post(&ast, visitor)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 326,
          "bound": null
        },
        {
          "cond": "self.stack_class.pop() matches Some((post_ast, frame))",
          "norm": null,
          "value": "true",
          "line": 331,
          "bound": null
        },
        {
          "cond": "let Some(x) = self.pop_class(frame)",
          "norm": null,
          "value": "true",
          "line": 337,
          "bound": null
        },
        {
          "cond": "let ClassFrame::BinaryRHS { ref op, .. } = x",
          "norm": null,
          "value": "true",
          "line": 338,
          "bound": null
        },
        {
          "cond": "self.visit_class_pre(&ast, visitor)?",
          "norm": null,
          "value": "Err/None",
          "line": 319,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        17,
        18,
        19,
        22,
        25,
        26,
        27,
        28,
        31,
        33,
        34,
        35,
        46,
        47,
        48,
        49,
        2,
        3,
        4,
        5,
        7,
        9,
        10,
        66,
        67,
        68
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.visit_class_pre(&ast, visitor)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 319,
          "bound": null
        },
        {
          "cond": "let Some(x) = self.induct_class(&ast)",
          "norm": null,
          "value": "true",
          "line": 320,
          "bound": null
        },
        {
          "cond": "self.visit_class_post(&ast, visitor)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 326,
          "bound": null
        },
        {
          "cond": "self.stack_class.pop() matches Some((post_ast, frame))",
          "norm": null,
          "value": "true",
          "line": 331,
          "bound": null
        },
        {
          "cond": "let Some(x) = self.pop_class(frame)",
          "norm": null,
          "value": "true",
          "line": 337,
          "bound": null
        },
        {
          "cond": "let ClassFrame::BinaryRHS { ref op, .. } = x",
          "norm": null,
          "value": "true",
          "line": 338,
          "bound": null
        },
        {
          "cond": "visitor.visit_class_set_binary_op_in(op)?",
          "norm": null,
          "value": "Err/None",
          "line": 339,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        17,
        18,
        19,
        22,
        25,
        26,
        27,
        28,
        31,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        41,
        43,
        44,
        61,
        62,
        63,
        68
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.visit_class_pre(&ast, visitor)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 319,
          "bound": null
        },
        {
          "cond": "let Some(x) = self.induct_class(&ast)",
          "norm": null,
          "value": "true",
          "line": 320,
          "bound": null
        },
        {
          "cond": "self.visit_class_post(&ast, visitor)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 326,
          "bound": null
        },
        {
          "cond": "self.stack_class.pop() matches Some((post_ast, frame))",
          "norm": null,
          "value": "true",
          "line": 331,
          "bound": null
        },
        {
          "cond": "let Some(x) = self.pop_class(frame)",
          "norm": null,
          "value": "true",
          "line": 337,
          "bound": null
        },
        {
          "cond": "let ClassFrame::BinaryRHS { ref op, .. } = x",
          "norm": null,
          "value": "true",
          "line": 338,
          "bound": null
        },
        {
          "cond": "visitor.visit_class_set_binary_op_in(op)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 339,
          "bound": null
        },
        {
          "cond": "self.visit_class_pre(&ast, visitor)?",
          "norm": null,
          "value": "Err/None",
          "line": 319,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        17,
        18,
        19,
        22,
        25,
        26,
        27,
        28,
        31,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        42,
        45,
        47,
        48,
        49,
        2,
        3,
        4,
        5,
        7,
        9,
        10,
        66,
        67,
        68
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.visit_class_pre(&ast, visitor)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 319,
          "bound": null
        },
        {
          "cond": "let Some(x) = self.induct_class(&ast)",
          "norm": null,
          "value": "true",
          "line": 320,
          "bound": null
        },
        {
          "cond": "self.visit_class_post(&ast, visitor)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 326,
          "bound": null
        },
        {
          "cond": "self.stack_class.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 331,
          "bound": null
        },
        {
          "cond": "self.stack_class.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 331,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        17,
        18,
        19,
        22,
        25,
        26,
        27,
        28,
        30,
        32,
        68
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.visit_class_pre(&ast, visitor)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 319,
          "bound": null
        },
        {
          "cond": "let Some(x) = self.induct_class(&ast)",
          "norm": null,
          "value": "true",
          "line": 320,
          "bound": null
        },
        {
          "cond": "self.visit_class_pre(&ast, visitor)?",
          "norm": null,
          "value": "Err/None",
          "line": 319,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        2,
        3,
        4,
        5,
        7,
        9,
        10,
        66,
        67,
        68
      ],
      "may_contra": true,
      "min_set": false
    }
  ]
}