{
  "name": "regex_syntax::utf8::{impl#0}::as_slice",
  "mod_info": {
    "name": "utf8",
    "loc": "regex-syntax/src/lib.rs:195:1:195:14"
  },
  "visible": true,
  "loc": "regex-syntax/src/utf8.rs:136:5:144:6",
  "doc": "/// Returns the underlying sequence of byte ranges as a slice.\n",
  "code": [
    "pub fn as_slice(&self) -> &[Utf8Range] {",
    "    use self::Utf8Sequence::*;",
    "    match *self {",
    "        One(ref r) => slice::from_ref(r),",
    "        Two(ref r) => &r[..],",
    "        Three(ref r) => &r[..],",
    "        Four(ref r) => &r[..],",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*self matches Four(ref r)",
          "norm": null,
          "value": "true",
          "line": 138,
          "bound": null
        }
      ],
      "ret": "match *self {\n            One(ref r) => slice::from_ref(r),\n            Two(ref r) => &r[..],\n            Three(ref r) => &r[..],\n            Four(ref r) => &r[..],\n        }",
      "path": [
        0,
        5,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*self matches Three(ref r)",
          "norm": null,
          "value": "true",
          "line": 138,
          "bound": null
        },
        {
          "cond": "*self matches Three(ref r)",
          "norm": null,
          "value": "true",
          "line": 138,
          "bound": null
        }
      ],
      "ret": "match *self {\n            One(ref r) => slice::from_ref(r),\n            Two(ref r) => &r[..],\n            Three(ref r) => &r[..],\n            Four(ref r) => &r[..],\n        }",
      "path": [
        0,
        4,
        10,
        11,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "*self matches Two(ref r)",
          "norm": null,
          "value": "true",
          "line": 138,
          "bound": null
        },
        {
          "cond": "*self matches Two(ref r)",
          "norm": null,
          "value": "true",
          "line": 138,
          "bound": null
        }
      ],
      "ret": "match *self {\n            One(ref r) => slice::from_ref(r),\n            Two(ref r) => &r[..],\n            Three(ref r) => &r[..],\n            Four(ref r) => &r[..],\n        }",
      "path": [
        0,
        3,
        8,
        9,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "*self matches One(ref r)",
          "norm": null,
          "value": "true",
          "line": 138,
          "bound": null
        },
        {
          "cond": "*self matches One(ref r)",
          "norm": null,
          "value": "true",
          "line": 138,
          "bound": null
        }
      ],
      "ret": "match *self {\n            One(ref r) => slice::from_ref(r),\n            Two(ref r) => &r[..],\n            Three(ref r) => &r[..],\n            Four(ref r) => &r[..],\n        }",
      "path": [
        0,
        2,
        6,
        7,
        13
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}