{
  "name": "regex_syntax::ast::parse::{impl#0}::into_ast",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:54:5:62:6",
  "doc": "/// Convert this primitive into a proper AST.\n",
  "code": [
    "fn into_ast(self) -> Ast {",
    "    match self {",
    "        Primitive::Literal(lit) => Ast::literal(lit),",
    "        Primitive::Assertion(assert) => Ast::assertion(assert),",
    "        Primitive::Dot(span) => Ast::dot(span),",
    "        Primitive::Perl(cls) => Ast::class_perl(cls),",
    "        Primitive::Unicode(cls) => Ast::class_unicode(cls),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self matches Primitive::Unicode(cls)",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        6,
        15,
        16,
        17,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self matches Primitive::Perl(cls)",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        },
        {
          "cond": "self matches Primitive::Perl(cls)",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        13,
        14,
        17,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self matches Primitive::Dot(span)",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        },
        {
          "cond": "self matches Primitive::Dot(span)",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        11,
        12,
        17,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self matches Primitive::Assertion(assert)",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        },
        {
          "cond": "self matches Primitive::Assertion(assert)",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        9,
        10,
        17,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self matches Primitive::Literal(lit)",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        },
        {
          "cond": "self matches Primitive::Literal(lit)",
          "norm": null,
          "value": "true",
          "line": 55,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        7,
        8,
        17,
        18
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}