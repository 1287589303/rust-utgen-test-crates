{
  "name": "regex_syntax::ast::parse::{impl#5}::parse_counted_repetition",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:1103:5:1206:6",
  "doc": "/// Parses a counted repetition operation. A counted repetition operator\n/// corresponds to the {m,n} syntax, and does not include the ?, * or +\n/// operators.\n///\n/// This assumes that the parser is currently positioned at the opening `{`\n/// and advances the parser to the first character after the operator.\n/// (Note that the operator may include a single additional `?`, which\n/// makes the operator ungreedy.)\n///\n/// The caller should include the concatenation that is being built. The\n/// concatenation returned includes the repetition operator applied to the\n/// last expression in the given concatenation.\n",
  "code": [
    "fn parse_counted_repetition(",
    "    &self,",
    "    mut concat: ast::Concat,",
    ") -> Result<ast::Concat> {",
    "    assert!(self.char() == '{');",
    "    let start = self.pos();",
    "    let ast = match concat.asts.pop() {",
    "        Some(ast) => ast,",
    "        None => {",
    "            return Err(",
    "                self.error(self.span(), ast::ErrorKind::RepetitionMissing)",
    "            )",
    "        }",
    "    };",
    "    match ast {",
    "        Ast::Empty(_) | Ast::Flags(_) => {",
    "            return Err(",
    "                self.error(self.span(), ast::ErrorKind::RepetitionMissing)",
    "            )",
    "        }",
    "        _ => {}",
    "    }",
    "    if !self.bump_and_bump_space() {",
    "        return Err(self.error(",
    "            Span::new(start, self.pos()),",
    "            ast::ErrorKind::RepetitionCountUnclosed,",
    "        ));",
    "    }",
    "    let count_start = specialize_err(",
    "        self.parse_decimal(),",
    "        ast::ErrorKind::DecimalEmpty,",
    "        ast::ErrorKind::RepetitionCountDecimalEmpty,",
    "    );",
    "    if self.is_eof() {",
    "        return Err(self.error(",
    "            Span::new(start, self.pos()),",
    "            ast::ErrorKind::RepetitionCountUnclosed,",
    "        ));",
    "    }",
    "    let range = if self.char() == ',' {",
    "        if !self.bump_and_bump_space() {",
    "            return Err(self.error(",
    "                Span::new(start, self.pos()),",
    "                ast::ErrorKind::RepetitionCountUnclosed,",
    "            ));",
    "        }",
    "        if self.char() != '}' {",
    "            let count_start = match count_start {",
    "                Ok(c) => c,",
    "                Err(err)",
    "                    if err.kind",
    "                        == ast::ErrorKind::RepetitionCountDecimalEmpty =>",
    "                {",
    "                    if self.parser().empty_min_range {",
    "                        0",
    "                    } else {",
    "                        return Err(err);",
    "                    }",
    "                }",
    "                err => err?,",
    "            };",
    "            let count_end = specialize_err(",
    "                self.parse_decimal(),",
    "                ast::ErrorKind::DecimalEmpty,",
    "                ast::ErrorKind::RepetitionCountDecimalEmpty,",
    "            )?;",
    "            ast::RepetitionRange::Bounded(count_start, count_end)",
    "        } else {",
    "            ast::RepetitionRange::AtLeast(count_start?)",
    "        }",
    "    } else {",
    "        ast::RepetitionRange::Exactly(count_start?)",
    "    };",
    "",
    "    if self.is_eof() || self.char() != '}' {",
    "        return Err(self.error(",
    "            Span::new(start, self.pos()),",
    "            ast::ErrorKind::RepetitionCountUnclosed,",
    "        ));",
    "    }",
    "",
    "    let mut greedy = true;",
    "    if self.bump_and_bump_space() && self.char() == '?' {",
    "        greedy = false;",
    "        self.bump();",
    "    }",
    "",
    "    let op_span = Span::new(start, self.pos());",
    "    if !range.is_valid() {",
    "        return Err(",
    "            self.error(op_span, ast::ErrorKind::RepetitionCountInvalid)",
    "        );",
    "    }",
    "    concat.asts.push(Ast::repetition(ast::Repetition {",
    "        span: ast.span().with_end(self.pos()),",
    "        op: ast::RepetitionOp {",
    "            span: op_span,",
    "            kind: ast::RepetitionKind::Range(range),",
    "        },",
    "        greedy,",
    "        ast: Box::new(ast),",
    "    }));",
    "    Ok(concat)",
    "}"
  ],
  "size": {
    "chain": 64,
    "contra": 0,
    "min_set": 17
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1136,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(start, self.pos()),\n                ast::ErrorKind::RepetitionCountUnclosed,\n            ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Ok(c)",
          "norm": null,
          "value": "false",
          "line": 1151,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "false",
          "line": 1152,
          "bound": null
        },
        {
          "cond": "err?",
          "norm": null,
          "value": "Err/None",
          "line": 1162,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        48,
        61,
        63,
        65,
        66,
        140,
        141,
        142,
        144,
        145,
        146,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Ok(c)",
          "norm": null,
          "value": "false",
          "line": 1151,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "false",
          "line": 1152,
          "bound": null
        },
        {
          "cond": "err?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1162,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Err/None",
          "line": 1164,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        48,
        61,
        64,
        67,
        68,
        69,
        70,
        71,
        72,
        74,
        76,
        77,
        138,
        139,
        144,
        145,
        146,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Ok(c)",
          "norm": null,
          "value": "false",
          "line": 1151,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "false",
          "line": 1152,
          "bound": null
        },
        {
          "cond": "err?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1162,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1164,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1177,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(start, self.pos()),\n                ast::ErrorKind::RepetitionCountUnclosed,\n            ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        48,
        61,
        64,
        67,
        68,
        69,
        70,
        71,
        72,
        75,
        78,
        87,
        96,
        97,
        98,
        102,
        103,
        104,
        105,
        106,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Ok(c)",
          "norm": null,
          "value": "false",
          "line": 1151,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "false",
          "line": 1152,
          "bound": null
        },
        {
          "cond": "err?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1162,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1164,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1177,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(start, self.pos()),\n                ast::ErrorKind::RepetitionCountUnclosed,\n            ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        48,
        61,
        64,
        67,
        68,
        69,
        70,
        71,
        72,
        75,
        78,
        87,
        96,
        97,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Ok(c)",
          "norm": null,
          "value": "false",
          "line": 1151,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "false",
          "line": 1152,
          "bound": null
        },
        {
          "cond": "err?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1162,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1164,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "self.char() == '?'",
          "norm": "'?' == self.char()",
          "value": "false",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "true",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Ok(concat)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        48,
        61,
        64,
        67,
        68,
        69,
        70,
        71,
        72,
        75,
        78,
        87,
        96,
        97,
        99,
        100,
        107,
        108,
        109,
        110,
        111,
        112,
        116,
        117,
        118,
        119,
        120,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Ok(c)",
          "norm": null,
          "value": "false",
          "line": 1151,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "false",
          "line": 1152,
          "bound": null
        },
        {
          "cond": "err?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1162,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1164,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "self.char() == '?'",
          "norm": "'?' == self.char()",
          "value": "false",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "false",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Err(\n                self.error(op_span, ast::ErrorKind::RepetitionCountInvalid)\n            )",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        48,
        61,
        64,
        67,
        68,
        69,
        70,
        71,
        72,
        75,
        78,
        87,
        96,
        97,
        99,
        100,
        107,
        108,
        109,
        110,
        111,
        112,
        116,
        117,
        118,
        119,
        121,
        122,
        123,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Ok(c)",
          "norm": null,
          "value": "false",
          "line": 1151,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "false",
          "line": 1152,
          "bound": null
        },
        {
          "cond": "err?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1162,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1164,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "self.char() == '?'",
          "norm": "'?' == self.char()",
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "true",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Ok(concat)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        48,
        61,
        64,
        67,
        68,
        69,
        70,
        71,
        72,
        75,
        78,
        87,
        96,
        97,
        99,
        100,
        107,
        108,
        109,
        110,
        113,
        115,
        116,
        117,
        118,
        119,
        120,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Ok(c)",
          "norm": null,
          "value": "false",
          "line": 1151,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "false",
          "line": 1152,
          "bound": null
        },
        {
          "cond": "err?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1162,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1164,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "self.char() == '?'",
          "norm": "'?' == self.char()",
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "false",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Err(\n                self.error(op_span, ast::ErrorKind::RepetitionCountInvalid)\n            )",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        48,
        61,
        64,
        67,
        68,
        69,
        70,
        71,
        72,
        75,
        78,
        87,
        96,
        97,
        99,
        100,
        107,
        108,
        109,
        110,
        113,
        115,
        116,
        117,
        118,
        119,
        121,
        122,
        123,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Ok(c)",
          "norm": null,
          "value": "false",
          "line": 1151,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "false",
          "line": 1152,
          "bound": null
        },
        {
          "cond": "err?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1162,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1164,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "true",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Ok(concat)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        48,
        61,
        64,
        67,
        68,
        69,
        70,
        71,
        72,
        75,
        78,
        87,
        96,
        97,
        99,
        100,
        107,
        108,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Ok(c)",
          "norm": null,
          "value": "false",
          "line": 1151,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "false",
          "line": 1152,
          "bound": null
        },
        {
          "cond": "err?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1162,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1164,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "false",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Err(\n                self.error(op_span, ast::ErrorKind::RepetitionCountInvalid)\n            )",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        48,
        61,
        64,
        67,
        68,
        69,
        70,
        71,
        72,
        75,
        78,
        87,
        96,
        97,
        99,
        100,
        107,
        108,
        114,
        115,
        116,
        117,
        118,
        119,
        121,
        122,
        123,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "err.kind\n                            == ast::ErrorKind::RepetitionCountDecimalEmpty",
          "norm": "ast::ErrorKind::RepetitionCountDecimalEmpty == err.kind",
          "value": "true",
          "line": 1153,
          "bound": null
        },
        {
          "cond": "self.parser().empty_min_range",
          "norm": null,
          "value": "true",
          "line": 1156,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Err/None",
          "line": 1164,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        50,
        52,
        53,
        54,
        56,
        57,
        60,
        69,
        70,
        71,
        72,
        74,
        76,
        77,
        138,
        139,
        144,
        145,
        146,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "err.kind\n                            == ast::ErrorKind::RepetitionCountDecimalEmpty",
          "norm": "ast::ErrorKind::RepetitionCountDecimalEmpty == err.kind",
          "value": "true",
          "line": 1153,
          "bound": null
        },
        {
          "cond": "self.parser().empty_min_range",
          "norm": null,
          "value": "true",
          "line": 1156,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1164,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1177,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(start, self.pos()),\n                ast::ErrorKind::RepetitionCountUnclosed,\n            ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        50,
        52,
        53,
        54,
        56,
        57,
        60,
        69,
        70,
        71,
        72,
        75,
        78,
        87,
        96,
        97,
        98,
        102,
        103,
        104,
        105,
        106,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "err.kind\n                            == ast::ErrorKind::RepetitionCountDecimalEmpty",
          "norm": "ast::ErrorKind::RepetitionCountDecimalEmpty == err.kind",
          "value": "true",
          "line": 1153,
          "bound": null
        },
        {
          "cond": "self.parser().empty_min_range",
          "norm": null,
          "value": "true",
          "line": 1156,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1164,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1177,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(start, self.pos()),\n                ast::ErrorKind::RepetitionCountUnclosed,\n            ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        50,
        52,
        53,
        54,
        56,
        57,
        60,
        69,
        70,
        71,
        72,
        75,
        78,
        87,
        96,
        97,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "err.kind\n                            == ast::ErrorKind::RepetitionCountDecimalEmpty",
          "norm": "ast::ErrorKind::RepetitionCountDecimalEmpty == err.kind",
          "value": "true",
          "line": 1153,
          "bound": null
        },
        {
          "cond": "self.parser().empty_min_range",
          "norm": null,
          "value": "true",
          "line": 1156,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1164,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "self.char() == '?'",
          "norm": "'?' == self.char()",
          "value": "false",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "true",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Ok(concat)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        50,
        52,
        53,
        54,
        56,
        57,
        60,
        69,
        70,
        71,
        72,
        75,
        78,
        87,
        96,
        97,
        99,
        100,
        107,
        108,
        109,
        110,
        111,
        112,
        116,
        117,
        118,
        119,
        120,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "err.kind\n                            == ast::ErrorKind::RepetitionCountDecimalEmpty",
          "norm": "ast::ErrorKind::RepetitionCountDecimalEmpty == err.kind",
          "value": "true",
          "line": 1153,
          "bound": null
        },
        {
          "cond": "self.parser().empty_min_range",
          "norm": null,
          "value": "true",
          "line": 1156,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1164,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "self.char() == '?'",
          "norm": "'?' == self.char()",
          "value": "false",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "false",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Err(\n                self.error(op_span, ast::ErrorKind::RepetitionCountInvalid)\n            )",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        50,
        52,
        53,
        54,
        56,
        57,
        60,
        69,
        70,
        71,
        72,
        75,
        78,
        87,
        96,
        97,
        99,
        100,
        107,
        108,
        109,
        110,
        111,
        112,
        116,
        117,
        118,
        119,
        121,
        122,
        123,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "err.kind\n                            == ast::ErrorKind::RepetitionCountDecimalEmpty",
          "norm": "ast::ErrorKind::RepetitionCountDecimalEmpty == err.kind",
          "value": "true",
          "line": 1153,
          "bound": null
        },
        {
          "cond": "self.parser().empty_min_range",
          "norm": null,
          "value": "true",
          "line": 1156,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1164,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "self.char() == '?'",
          "norm": "'?' == self.char()",
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "true",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Ok(concat)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        50,
        52,
        53,
        54,
        56,
        57,
        60,
        69,
        70,
        71,
        72,
        75,
        78,
        87,
        96,
        97,
        99,
        100,
        107,
        108,
        109,
        110,
        113,
        115,
        116,
        117,
        118,
        119,
        120,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "err.kind\n                            == ast::ErrorKind::RepetitionCountDecimalEmpty",
          "norm": "ast::ErrorKind::RepetitionCountDecimalEmpty == err.kind",
          "value": "true",
          "line": 1153,
          "bound": null
        },
        {
          "cond": "self.parser().empty_min_range",
          "norm": null,
          "value": "true",
          "line": 1156,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1164,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "self.char() == '?'",
          "norm": "'?' == self.char()",
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "false",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Err(\n                self.error(op_span, ast::ErrorKind::RepetitionCountInvalid)\n            )",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        50,
        52,
        53,
        54,
        56,
        57,
        60,
        69,
        70,
        71,
        72,
        75,
        78,
        87,
        96,
        97,
        99,
        100,
        107,
        108,
        109,
        110,
        113,
        115,
        116,
        117,
        118,
        119,
        121,
        122,
        123,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "err.kind\n                            == ast::ErrorKind::RepetitionCountDecimalEmpty",
          "norm": "ast::ErrorKind::RepetitionCountDecimalEmpty == err.kind",
          "value": "true",
          "line": 1153,
          "bound": null
        },
        {
          "cond": "self.parser().empty_min_range",
          "norm": null,
          "value": "true",
          "line": 1156,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1164,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "true",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Ok(concat)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        50,
        52,
        53,
        54,
        56,
        57,
        60,
        69,
        70,
        71,
        72,
        75,
        78,
        87,
        96,
        97,
        99,
        100,
        107,
        108,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "err.kind\n                            == ast::ErrorKind::RepetitionCountDecimalEmpty",
          "norm": "ast::ErrorKind::RepetitionCountDecimalEmpty == err.kind",
          "value": "true",
          "line": 1153,
          "bound": null
        },
        {
          "cond": "self.parser().empty_min_range",
          "norm": null,
          "value": "true",
          "line": 1156,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1164,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "false",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Err(\n                self.error(op_span, ast::ErrorKind::RepetitionCountInvalid)\n            )",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        50,
        52,
        53,
        54,
        56,
        57,
        60,
        69,
        70,
        71,
        72,
        75,
        78,
        87,
        96,
        97,
        99,
        100,
        107,
        108,
        114,
        115,
        116,
        117,
        118,
        119,
        121,
        122,
        123,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "err.kind\n                            == ast::ErrorKind::RepetitionCountDecimalEmpty",
          "norm": "ast::ErrorKind::RepetitionCountDecimalEmpty == err.kind",
          "value": "true",
          "line": 1153,
          "bound": null
        },
        {
          "cond": "self.parser().empty_min_range",
          "norm": null,
          "value": "false",
          "line": 1156,
          "bound": null
        }
      ],
      "ret": "Err(err)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        50,
        52,
        53,
        54,
        56,
        58,
        59,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "err.kind\n                            == ast::ErrorKind::RepetitionCountDecimalEmpty",
          "norm": "ast::ErrorKind::RepetitionCountDecimalEmpty == err.kind",
          "value": "false",
          "line": 1153,
          "bound": null
        },
        {
          "cond": "err?",
          "norm": null,
          "value": "Err/None",
          "line": 1162,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        50,
        52,
        53,
        55,
        48,
        61,
        63,
        65,
        66,
        140,
        141,
        142,
        144,
        145,
        146,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "err.kind\n                            == ast::ErrorKind::RepetitionCountDecimalEmpty",
          "norm": "ast::ErrorKind::RepetitionCountDecimalEmpty == err.kind",
          "value": "false",
          "line": 1153,
          "bound": null
        },
        {
          "cond": "err?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1162,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Err/None",
          "line": 1164,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        50,
        52,
        53,
        55,
        48,
        61,
        64,
        67,
        68,
        69,
        70,
        71,
        72,
        74,
        76,
        77,
        138,
        139,
        144,
        145,
        146,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "err.kind\n                            == ast::ErrorKind::RepetitionCountDecimalEmpty",
          "norm": "ast::ErrorKind::RepetitionCountDecimalEmpty == err.kind",
          "value": "false",
          "line": 1153,
          "bound": null
        },
        {
          "cond": "err?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1162,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1164,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1177,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(start, self.pos()),\n                ast::ErrorKind::RepetitionCountUnclosed,\n            ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        50,
        52,
        53,
        55,
        48,
        61,
        64,
        67,
        68,
        69,
        70,
        71,
        72,
        75,
        78,
        87,
        96,
        97,
        98,
        102,
        103,
        104,
        105,
        106,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "err.kind\n                            == ast::ErrorKind::RepetitionCountDecimalEmpty",
          "norm": "ast::ErrorKind::RepetitionCountDecimalEmpty == err.kind",
          "value": "false",
          "line": 1153,
          "bound": null
        },
        {
          "cond": "err?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1162,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1164,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1177,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(start, self.pos()),\n                ast::ErrorKind::RepetitionCountUnclosed,\n            ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        50,
        52,
        53,
        55,
        48,
        61,
        64,
        67,
        68,
        69,
        70,
        71,
        72,
        75,
        78,
        87,
        96,
        97,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "err.kind\n                            == ast::ErrorKind::RepetitionCountDecimalEmpty",
          "norm": "ast::ErrorKind::RepetitionCountDecimalEmpty == err.kind",
          "value": "false",
          "line": 1153,
          "bound": null
        },
        {
          "cond": "err?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1162,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1164,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "self.char() == '?'",
          "norm": "'?' == self.char()",
          "value": "false",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "true",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Ok(concat)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        50,
        52,
        53,
        55,
        48,
        61,
        64,
        67,
        68,
        69,
        70,
        71,
        72,
        75,
        78,
        87,
        96,
        97,
        99,
        100,
        107,
        108,
        109,
        110,
        111,
        112,
        116,
        117,
        118,
        119,
        120,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "err.kind\n                            == ast::ErrorKind::RepetitionCountDecimalEmpty",
          "norm": "ast::ErrorKind::RepetitionCountDecimalEmpty == err.kind",
          "value": "false",
          "line": 1153,
          "bound": null
        },
        {
          "cond": "err?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1162,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1164,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "self.char() == '?'",
          "norm": "'?' == self.char()",
          "value": "false",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "false",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Err(\n                self.error(op_span, ast::ErrorKind::RepetitionCountInvalid)\n            )",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        50,
        52,
        53,
        55,
        48,
        61,
        64,
        67,
        68,
        69,
        70,
        71,
        72,
        75,
        78,
        87,
        96,
        97,
        99,
        100,
        107,
        108,
        109,
        110,
        111,
        112,
        116,
        117,
        118,
        119,
        121,
        122,
        123,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "err.kind\n                            == ast::ErrorKind::RepetitionCountDecimalEmpty",
          "norm": "ast::ErrorKind::RepetitionCountDecimalEmpty == err.kind",
          "value": "false",
          "line": 1153,
          "bound": null
        },
        {
          "cond": "err?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1162,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1164,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "self.char() == '?'",
          "norm": "'?' == self.char()",
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "true",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Ok(concat)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        50,
        52,
        53,
        55,
        48,
        61,
        64,
        67,
        68,
        69,
        70,
        71,
        72,
        75,
        78,
        87,
        96,
        97,
        99,
        100,
        107,
        108,
        109,
        110,
        113,
        115,
        116,
        117,
        118,
        119,
        120,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 29,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "err.kind\n                            == ast::ErrorKind::RepetitionCountDecimalEmpty",
          "norm": "ast::ErrorKind::RepetitionCountDecimalEmpty == err.kind",
          "value": "false",
          "line": 1153,
          "bound": null
        },
        {
          "cond": "err?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1162,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1164,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "self.char() == '?'",
          "norm": "'?' == self.char()",
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "false",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Err(\n                self.error(op_span, ast::ErrorKind::RepetitionCountInvalid)\n            )",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        50,
        52,
        53,
        55,
        48,
        61,
        64,
        67,
        68,
        69,
        70,
        71,
        72,
        75,
        78,
        87,
        96,
        97,
        99,
        100,
        107,
        108,
        109,
        110,
        113,
        115,
        116,
        117,
        118,
        119,
        121,
        122,
        123,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 30,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "err.kind\n                            == ast::ErrorKind::RepetitionCountDecimalEmpty",
          "norm": "ast::ErrorKind::RepetitionCountDecimalEmpty == err.kind",
          "value": "false",
          "line": 1153,
          "bound": null
        },
        {
          "cond": "err?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1162,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1164,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "true",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Ok(concat)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        50,
        52,
        53,
        55,
        48,
        61,
        64,
        67,
        68,
        69,
        70,
        71,
        72,
        75,
        78,
        87,
        96,
        97,
        99,
        100,
        107,
        108,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 31,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "count_start matches Err(err)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "err.kind\n                            == ast::ErrorKind::RepetitionCountDecimalEmpty",
          "norm": "ast::ErrorKind::RepetitionCountDecimalEmpty == err.kind",
          "value": "false",
          "line": 1153,
          "bound": null
        },
        {
          "cond": "err?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1162,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1164,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "false",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Err(\n                self.error(op_span, ast::ErrorKind::RepetitionCountInvalid)\n            )",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        50,
        52,
        53,
        55,
        48,
        61,
        64,
        67,
        68,
        69,
        70,
        71,
        72,
        75,
        78,
        87,
        96,
        97,
        99,
        100,
        107,
        108,
        114,
        115,
        116,
        117,
        118,
        119,
        121,
        122,
        123,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 32,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Ok(c)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "count_start matches Ok(c)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Err/None",
          "line": 1164,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        49,
        51,
        69,
        70,
        71,
        72,
        74,
        76,
        77,
        138,
        139,
        144,
        145,
        146,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 33,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Ok(c)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "count_start matches Ok(c)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1164,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1177,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(start, self.pos()),\n                ast::ErrorKind::RepetitionCountUnclosed,\n            ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        49,
        51,
        69,
        70,
        71,
        72,
        75,
        78,
        87,
        96,
        97,
        98,
        102,
        103,
        104,
        105,
        106,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 34,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Ok(c)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "count_start matches Ok(c)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1164,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1177,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(start, self.pos()),\n                ast::ErrorKind::RepetitionCountUnclosed,\n            ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        49,
        51,
        69,
        70,
        71,
        72,
        75,
        78,
        87,
        96,
        97,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 35,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Ok(c)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "count_start matches Ok(c)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1164,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "self.char() == '?'",
          "norm": "'?' == self.char()",
          "value": "false",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "true",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Ok(concat)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        49,
        51,
        69,
        70,
        71,
        72,
        75,
        78,
        87,
        96,
        97,
        99,
        100,
        107,
        108,
        109,
        110,
        111,
        112,
        116,
        117,
        118,
        119,
        120,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 36,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Ok(c)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "count_start matches Ok(c)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1164,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "self.char() == '?'",
          "norm": "'?' == self.char()",
          "value": "false",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "false",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Err(\n                self.error(op_span, ast::ErrorKind::RepetitionCountInvalid)\n            )",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        49,
        51,
        69,
        70,
        71,
        72,
        75,
        78,
        87,
        96,
        97,
        99,
        100,
        107,
        108,
        109,
        110,
        111,
        112,
        116,
        117,
        118,
        119,
        121,
        122,
        123,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 37,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Ok(c)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "count_start matches Ok(c)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1164,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "self.char() == '?'",
          "norm": "'?' == self.char()",
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "true",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Ok(concat)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        49,
        51,
        69,
        70,
        71,
        72,
        75,
        78,
        87,
        96,
        97,
        99,
        100,
        107,
        108,
        109,
        110,
        113,
        115,
        116,
        117,
        118,
        119,
        120,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 38,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Ok(c)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "count_start matches Ok(c)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1164,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "self.char() == '?'",
          "norm": "'?' == self.char()",
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "false",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Err(\n                self.error(op_span, ast::ErrorKind::RepetitionCountInvalid)\n            )",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        49,
        51,
        69,
        70,
        71,
        72,
        75,
        78,
        87,
        96,
        97,
        99,
        100,
        107,
        108,
        109,
        110,
        113,
        115,
        116,
        117,
        118,
        119,
        121,
        122,
        123,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 39,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Ok(c)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "count_start matches Ok(c)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1164,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "true",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Ok(concat)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        49,
        51,
        69,
        70,
        71,
        72,
        75,
        78,
        87,
        96,
        97,
        99,
        100,
        107,
        108,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 40,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start matches Ok(c)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "count_start matches Ok(c)",
          "norm": null,
          "value": "true",
          "line": 1150,
          "bound": null
        },
        {
          "cond": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1164,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "false",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Err(\n                self.error(op_span, ast::ErrorKind::RepetitionCountInvalid)\n            )",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        47,
        49,
        51,
        69,
        70,
        71,
        72,
        75,
        78,
        87,
        96,
        97,
        99,
        100,
        107,
        108,
        114,
        115,
        116,
        117,
        118,
        119,
        121,
        122,
        123,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 41,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start?",
          "norm": null,
          "value": "Err/None",
          "line": 1171,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        79,
        80,
        82,
        84,
        85,
        136,
        137,
        145,
        146,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 42,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1171,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1177,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(start, self.pos()),\n                ast::ErrorKind::RepetitionCountUnclosed,\n            ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        79,
        80,
        83,
        86,
        87,
        96,
        97,
        98,
        102,
        103,
        104,
        105,
        106,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 43,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1171,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1177,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(start, self.pos()),\n                ast::ErrorKind::RepetitionCountUnclosed,\n            ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        79,
        80,
        83,
        86,
        87,
        96,
        97,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 44,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1171,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "self.char() == '?'",
          "norm": "'?' == self.char()",
          "value": "false",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "true",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Ok(concat)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        79,
        80,
        83,
        86,
        87,
        96,
        97,
        99,
        100,
        107,
        108,
        109,
        110,
        111,
        112,
        116,
        117,
        118,
        119,
        120,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 45,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1171,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "self.char() == '?'",
          "norm": "'?' == self.char()",
          "value": "false",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "false",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Err(\n                self.error(op_span, ast::ErrorKind::RepetitionCountInvalid)\n            )",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        79,
        80,
        83,
        86,
        87,
        96,
        97,
        99,
        100,
        107,
        108,
        109,
        110,
        111,
        112,
        116,
        117,
        118,
        119,
        121,
        122,
        123,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 46,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1171,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "self.char() == '?'",
          "norm": "'?' == self.char()",
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "true",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Ok(concat)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        79,
        80,
        83,
        86,
        87,
        96,
        97,
        99,
        100,
        107,
        108,
        109,
        110,
        113,
        115,
        116,
        117,
        118,
        119,
        120,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 47,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1171,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "self.char() == '?'",
          "norm": "'?' == self.char()",
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "false",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Err(\n                self.error(op_span, ast::ErrorKind::RepetitionCountInvalid)\n            )",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        79,
        80,
        83,
        86,
        87,
        96,
        97,
        99,
        100,
        107,
        108,
        109,
        110,
        113,
        115,
        116,
        117,
        118,
        119,
        121,
        122,
        123,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 48,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1171,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "true",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Ok(concat)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        79,
        80,
        83,
        86,
        87,
        96,
        97,
        99,
        100,
        107,
        108,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 49,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1143,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1149,
          "bound": null
        },
        {
          "cond": "count_start?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1171,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "false",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Err(\n                self.error(op_span, ast::ErrorKind::RepetitionCountInvalid)\n            )",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        40,
        46,
        79,
        80,
        83,
        86,
        87,
        96,
        97,
        99,
        100,
        107,
        108,
        114,
        115,
        116,
        117,
        118,
        119,
        121,
        122,
        123,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 50,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "false",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 1143,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                    Span::new(start, self.pos()),\n                    ast::ErrorKind::RepetitionCountUnclosed,\n                ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
        146,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 51,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "count_start?",
          "norm": null,
          "value": "Err/None",
          "line": 1174,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        88,
        89,
        91,
        93,
        94,
        134,
        135,
        146,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 52,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "count_start?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1174,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1177,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(start, self.pos()),\n                ast::ErrorKind::RepetitionCountUnclosed,\n            ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        88,
        89,
        92,
        95,
        96,
        97,
        98,
        102,
        103,
        104,
        105,
        106,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 53,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "count_start?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1174,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1177,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(start, self.pos()),\n                ast::ErrorKind::RepetitionCountUnclosed,\n            ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        88,
        89,
        92,
        95,
        96,
        97,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 54,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "count_start?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1174,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "self.char() == '?'",
          "norm": "'?' == self.char()",
          "value": "false",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "true",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Ok(concat)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        88,
        89,
        92,
        95,
        96,
        97,
        99,
        100,
        107,
        108,
        109,
        110,
        111,
        112,
        116,
        117,
        118,
        119,
        120,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 55,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "count_start?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1174,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "self.char() == '?'",
          "norm": "'?' == self.char()",
          "value": "false",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "false",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Err(\n                self.error(op_span, ast::ErrorKind::RepetitionCountInvalid)\n            )",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        88,
        89,
        92,
        95,
        96,
        97,
        99,
        100,
        107,
        108,
        109,
        110,
        111,
        112,
        116,
        117,
        118,
        119,
        121,
        122,
        123,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 56,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "count_start?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1174,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "self.char() == '?'",
          "norm": "'?' == self.char()",
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "true",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Ok(concat)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        88,
        89,
        92,
        95,
        96,
        97,
        99,
        100,
        107,
        108,
        109,
        110,
        113,
        115,
        116,
        117,
        118,
        119,
        120,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 57,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "count_start?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1174,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "self.char() == '?'",
          "norm": "'?' == self.char()",
          "value": "true",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "false",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Err(\n                self.error(op_span, ast::ErrorKind::RepetitionCountInvalid)\n            )",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        88,
        89,
        92,
        95,
        96,
        97,
        99,
        100,
        107,
        108,
        109,
        110,
        113,
        115,
        116,
        117,
        118,
        119,
        121,
        122,
        123,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 58,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "count_start?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1174,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "true",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Ok(concat)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        88,
        89,
        92,
        95,
        96,
        97,
        99,
        100,
        107,
        108,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        153
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 59,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1136,
          "bound": null
        },
        {
          "cond": "self.char() == ','",
          "norm": "',' == self.char()",
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "count_start?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1174,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1177,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 1185,
          "bound": null
        },
        {
          "cond": "range.is_valid()",
          "norm": null,
          "value": "false",
          "line": 1191,
          "bound": null
        }
      ],
      "ret": "Err(\n                self.error(op_span, ast::ErrorKind::RepetitionCountInvalid)\n            )",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        22,
        28,
        29,
        30,
        36,
        37,
        88,
        89,
        92,
        95,
        96,
        97,
        99,
        100,
        107,
        108,
        114,
        115,
        116,
        117,
        118,
        119,
        121,
        122,
        123,
        147,
        148,
        149,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 60,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "false",
          "line": 1118,
          "bound": null
        },
        {
          "cond": "ast matches _",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 1125,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(start, self.pos()),\n                ast::ErrorKind::RepetitionCountUnclosed,\n            ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        21,
        23,
        24,
        25,
        26,
        27,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 61,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Flags(_)",
          "norm": null,
          "value": "true",
          "line": 1117,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_) or Ast::Flags(_)",
          "norm": null,
          "value": "true",
          "line": 1117,
          "bound": null
        }
      ],
      "ret": "Err(\n                    self.error(self.span(), ast::ErrorKind::RepetitionMissing)\n                )",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        16,
        17,
        18,
        19,
        20,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 62,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches Some(ast)",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 1117,
          "bound": null
        },
        {
          "cond": "ast matches Ast::Empty(_) or Ast::Flags(_)",
          "norm": null,
          "value": "true",
          "line": 1117,
          "bound": null
        }
      ],
      "ret": "Err(\n                    self.error(self.span(), ast::ErrorKind::RepetitionMissing)\n                )",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        14,
        16,
        17,
        18,
        19,
        20,
        150,
        152,
        153
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 63,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "false",
          "line": 1107,
          "bound": null
        },
        {
          "cond": "concat.asts.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        }
      ],
      "ret": "Err(\n                    self.error(self.span(), ast::ErrorKind::RepetitionMissing)\n                )",
      "path": [
        0,
        1,
        2,
        4,
        5,
        8,
        11,
        12,
        13,
        151,
        152,
        153
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 64,
      "conds": [
        {
          "cond": "self.char() == '{'",
          "norm": "'{' == self.char()",
          "value": "true",
          "line": 1107,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        180,
        181
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}