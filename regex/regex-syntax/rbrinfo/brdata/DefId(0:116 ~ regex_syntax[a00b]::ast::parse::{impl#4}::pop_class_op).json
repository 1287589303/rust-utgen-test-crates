{
  "name": "regex_syntax::ast::parse::{impl#4}::pop_class_op",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:954:5:971:6",
  "doc": "/// Pop a character class set from the character class parser stack. If the\n/// top of the stack is just an item (not an operation), then return the\n/// given set unchanged. If the top of the stack is an operation, then the\n/// given set will be used as the rhs of the operation on the top of the\n/// stack. In that case, the binary operation is returned as a set.\n",
  "code": [
    "fn pop_class_op(&self, rhs: ast::ClassSet) -> ast::ClassSet {",
    "    let mut stack = self.parser().stack_class.borrow_mut();",
    "    let (kind, lhs) = match stack.pop() {",
    "        Some(ClassState::Op { kind, lhs }) => (kind, lhs),",
    "        Some(state @ ClassState::Open { .. }) => {",
    "            stack.push(state);",
    "            return rhs;",
    "        }",
    "        None => unreachable!(),",
    "    };",
    "    let span = Span::new(lhs.span().start, rhs.span().end);",
    "    ast::ClassSet::BinaryOp(ast::ClassSetBinaryOp {",
    "        span,",
    "        kind,",
    "        lhs: Box::new(lhs),",
    "        rhs: Box::new(rhs),",
    "    })",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "stack.pop() matches Some(ClassState::Op { kind, lhs }) or Some(state @ ClassState::Open { .. })",
          "norm": null,
          "value": "true",
          "line": 956,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(ClassState::Op { kind, lhs }) or Some(state @ ClassState::Open { .. })",
          "norm": null,
          "value": "true",
          "line": 956,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(ClassState::Op { kind, lhs })",
          "norm": null,
          "value": "true",
          "line": 956,
          "bound": null
        }
      ],
      "ret": "ast::ClassSet::BinaryOp(ast::ClassSetBinaryOp {\n            span,\n            kind,\n            lhs: Box::new(lhs),\n            rhs: Box::new(rhs),\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        10,
        11,
        12,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        31
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "stack.pop() matches Some(ClassState::Op { kind, lhs }) or Some(state @ ClassState::Open { .. })",
          "norm": null,
          "value": "true",
          "line": 956,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 956,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(state @ ClassState::Open { .. })",
          "norm": null,
          "value": "true",
          "line": 956,
          "bound": null
        }
      ],
      "ret": "rhs",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        13,
        14,
        15,
        28,
        29,
        30,
        31
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 956,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        9,
        42,
        43,
        44,
        45
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}