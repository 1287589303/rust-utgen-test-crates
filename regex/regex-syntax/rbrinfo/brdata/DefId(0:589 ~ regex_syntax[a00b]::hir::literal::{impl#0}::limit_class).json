{
  "name": "regex_syntax::hir::literal::{impl#0}::limit_class",
  "mod_info": {
    "name": "hir::literal",
    "loc": "regex-syntax/src/hir/mod.rs:42:1:42:17"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/literal.rs:255:5:258:6",
  "doc": "/// Configure a limit on the length of the sequence that is permitted for\n/// a character class. If a character class exceeds this limit, then the\n/// sequence returned for it is infinite.\n///\n/// This prevents classes like `[A-Z]` or `\\pL` from getting turned into\n/// huge and likely unproductive sequences of literals.\n///\n/// # Example\n///\n/// This example shows how this limit can be lowered to decrease the tolerance\n/// for character classes being turned into literal sequences.\n///\n/// ```\n/// use regex_syntax::{hir::literal::{Extractor, Seq}, parse};\n///\n/// let hir = parse(r\"[0-9]\")?;\n///\n/// let got = Extractor::new().extract(&hir);\n/// let expected = Seq::new([\n///     \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\",\n/// ]);\n/// assert_eq!(expected, got);\n///\n/// // Now let's shrink the limit and see how that changes things.\n/// let got = Extractor::new().limit_class(4).extract(&hir);\n/// let expected = Seq::infinite();\n/// assert_eq!(expected, got);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn limit_class(&mut self, limit: usize) -> &mut Extractor {",
    "    self.limit_class = limit;",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}