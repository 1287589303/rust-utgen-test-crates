{
  "name": "regex_syntax::hir::{impl#25}::static_explicit_captures_len",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:2204:5:2206:6",
  "doc": "/// Returns the total number of explicit capturing groups that appear in\n/// every possible match.\n///\n/// If the number of capture groups can vary depending on the match, then\n/// this returns `None`. That is, a value is only returned when the number\n/// of matching groups is invariant or \"static.\"\n///\n/// Note that this does not include the implicit capturing group\n/// corresponding to the entire match.\n///\n/// # Example\n///\n/// This shows a few cases where a static number of capture groups is\n/// available and a few cases where it is not.\n///\n/// ```\n/// use regex_syntax::parse;\n///\n/// let len = |pattern| {\n///     parse(pattern).map(|h| {\n///         h.properties().static_explicit_captures_len()\n///     })\n/// };\n///\n/// assert_eq!(Some(0), len(\"a\")?);\n/// assert_eq!(Some(1), len(\"(a)\")?);\n/// assert_eq!(Some(1), len(\"(a)|(b)\")?);\n/// assert_eq!(Some(2), len(\"(a)(b)|(c)(d)\")?);\n/// assert_eq!(None, len(\"(a)|b\")?);\n/// assert_eq!(None, len(\"a|(b)\")?);\n/// assert_eq!(None, len(\"(b)*\")?);\n/// assert_eq!(Some(1), len(\"(b)+\")?);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn static_explicit_captures_len(&self) -> Option<usize> {",
    "    self.0.static_explicit_captures_len",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self.0.static_explicit_captures_len",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}