{
  "name": "regex_syntax::hir::translate::{impl#5}::hir_perl_byte_class",
  "mod_info": {
    "name": "hir::translate",
    "loc": "regex-syntax/src/hir/mod.rs:44:1:44:19"
  },
  "visible": false,
  "loc": "regex-syntax/src/hir/translate.rs:1107:5:1131:6",
  "doc": "",
  "code": [
    "fn hir_perl_byte_class(",
    "    &self,",
    "    ast_class: &ast::ClassPerl,",
    ") -> Result<hir::ClassBytes> {",
    "    use crate::ast::ClassPerlKind::*;",
    "",
    "    assert!(!self.flags().unicode());",
    "    let mut class = match ast_class.kind {",
    "        Digit => hir_ascii_class_bytes(&ast::ClassAsciiKind::Digit),",
    "        Space => hir_ascii_class_bytes(&ast::ClassAsciiKind::Space),",
    "        Word => hir_ascii_class_bytes(&ast::ClassAsciiKind::Word),",
    "    };",
    "    // We needn't apply case folding here because the Perl ASCII classes",
    "    // are already closed (under ASCII case folding).",
    "    if ast_class.negated {",
    "        class.negate();",
    "    }",
    "    // Negating a Perl byte class is likely to cause it to match invalid",
    "    // UTF-8. That's only OK if the translator is configured to allow such",
    "    // things.",
    "    if self.trans().utf8 && !class.is_ascii() {",
    "        return Err(self.error(ast_class.span, ErrorKind::InvalidUtf8));",
    "    }",
    "    Ok(class)",
    "}"
  ],
  "size": {
    "chain": 19,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 1113,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        33
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 1113,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Word",
          "norm": null,
          "value": "true",
          "line": 1114,
          "bound": null
        },
        {
          "cond": "ast_class.negated",
          "norm": null,
          "value": "true",
          "line": 1121,
          "bound": null
        },
        {
          "cond": "self.trans().utf8",
          "norm": null,
          "value": "true",
          "line": 1127,
          "bound": null
        },
        {
          "cond": "class.is_ascii()",
          "norm": null,
          "value": "true",
          "line": 1127,
          "bound": null
        }
      ],
      "ret": "Ok(class)",
      "path": [
        0,
        1,
        2,
        4,
        8,
        13,
        14,
        15,
        16,
        18,
        19,
        20,
        21,
        22,
        27,
        28,
        29,
        31
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 1113,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Word",
          "norm": null,
          "value": "true",
          "line": 1114,
          "bound": null
        },
        {
          "cond": "ast_class.negated",
          "norm": null,
          "value": "true",
          "line": 1121,
          "bound": null
        },
        {
          "cond": "self.trans().utf8",
          "norm": null,
          "value": "true",
          "line": 1127,
          "bound": null
        },
        {
          "cond": "class.is_ascii()",
          "norm": null,
          "value": "false",
          "line": 1127,
          "bound": null
        }
      ],
      "ret": "Err(self.error(ast_class.span, ErrorKind::InvalidUtf8))",
      "path": [
        0,
        1,
        2,
        4,
        8,
        13,
        14,
        15,
        16,
        18,
        19,
        20,
        21,
        23,
        24,
        25,
        30,
        31
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 1113,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Word",
          "norm": null,
          "value": "true",
          "line": 1114,
          "bound": null
        },
        {
          "cond": "ast_class.negated",
          "norm": null,
          "value": "true",
          "line": 1121,
          "bound": null
        },
        {
          "cond": "self.trans().utf8",
          "norm": null,
          "value": "false",
          "line": 1127,
          "bound": null
        }
      ],
      "ret": "Ok(class)",
      "path": [
        0,
        1,
        2,
        4,
        8,
        13,
        14,
        15,
        16,
        18,
        19,
        26,
        27,
        28,
        29,
        31
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 1113,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Word",
          "norm": null,
          "value": "true",
          "line": 1114,
          "bound": null
        },
        {
          "cond": "ast_class.negated",
          "norm": null,
          "value": "false",
          "line": 1121,
          "bound": null
        },
        {
          "cond": "self.trans().utf8",
          "norm": null,
          "value": "true",
          "line": 1127,
          "bound": null
        },
        {
          "cond": "class.is_ascii()",
          "norm": null,
          "value": "true",
          "line": 1127,
          "bound": null
        }
      ],
      "ret": "Ok(class)",
      "path": [
        0,
        1,
        2,
        4,
        8,
        13,
        14,
        17,
        18,
        19,
        20,
        21,
        22,
        27,
        28,
        29,
        31
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 1113,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Word",
          "norm": null,
          "value": "true",
          "line": 1114,
          "bound": null
        },
        {
          "cond": "ast_class.negated",
          "norm": null,
          "value": "false",
          "line": 1121,
          "bound": null
        },
        {
          "cond": "self.trans().utf8",
          "norm": null,
          "value": "true",
          "line": 1127,
          "bound": null
        },
        {
          "cond": "class.is_ascii()",
          "norm": null,
          "value": "false",
          "line": 1127,
          "bound": null
        }
      ],
      "ret": "Err(self.error(ast_class.span, ErrorKind::InvalidUtf8))",
      "path": [
        0,
        1,
        2,
        4,
        8,
        13,
        14,
        17,
        18,
        19,
        20,
        21,
        23,
        24,
        25,
        30,
        31
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 1113,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Word",
          "norm": null,
          "value": "true",
          "line": 1114,
          "bound": null
        },
        {
          "cond": "ast_class.negated",
          "norm": null,
          "value": "false",
          "line": 1121,
          "bound": null
        },
        {
          "cond": "self.trans().utf8",
          "norm": null,
          "value": "false",
          "line": 1127,
          "bound": null
        }
      ],
      "ret": "Ok(class)",
      "path": [
        0,
        1,
        2,
        4,
        8,
        13,
        14,
        17,
        18,
        19,
        26,
        27,
        28,
        29,
        31
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 1113,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Space",
          "norm": null,
          "value": "true",
          "line": 1114,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Space",
          "norm": null,
          "value": "true",
          "line": 1114,
          "bound": null
        },
        {
          "cond": "ast_class.negated",
          "norm": null,
          "value": "true",
          "line": 1121,
          "bound": null
        },
        {
          "cond": "self.trans().utf8",
          "norm": null,
          "value": "true",
          "line": 1127,
          "bound": null
        },
        {
          "cond": "class.is_ascii()",
          "norm": null,
          "value": "true",
          "line": 1127,
          "bound": null
        }
      ],
      "ret": "Ok(class)",
      "path": [
        0,
        1,
        2,
        4,
        7,
        11,
        12,
        14,
        15,
        16,
        18,
        19,
        20,
        21,
        22,
        27,
        28,
        29,
        31
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 1113,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Space",
          "norm": null,
          "value": "true",
          "line": 1114,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Space",
          "norm": null,
          "value": "true",
          "line": 1114,
          "bound": null
        },
        {
          "cond": "ast_class.negated",
          "norm": null,
          "value": "true",
          "line": 1121,
          "bound": null
        },
        {
          "cond": "self.trans().utf8",
          "norm": null,
          "value": "true",
          "line": 1127,
          "bound": null
        },
        {
          "cond": "class.is_ascii()",
          "norm": null,
          "value": "false",
          "line": 1127,
          "bound": null
        }
      ],
      "ret": "Err(self.error(ast_class.span, ErrorKind::InvalidUtf8))",
      "path": [
        0,
        1,
        2,
        4,
        7,
        11,
        12,
        14,
        15,
        16,
        18,
        19,
        20,
        21,
        23,
        24,
        25,
        30,
        31
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 1113,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Space",
          "norm": null,
          "value": "true",
          "line": 1114,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Space",
          "norm": null,
          "value": "true",
          "line": 1114,
          "bound": null
        },
        {
          "cond": "ast_class.negated",
          "norm": null,
          "value": "true",
          "line": 1121,
          "bound": null
        },
        {
          "cond": "self.trans().utf8",
          "norm": null,
          "value": "false",
          "line": 1127,
          "bound": null
        }
      ],
      "ret": "Ok(class)",
      "path": [
        0,
        1,
        2,
        4,
        7,
        11,
        12,
        14,
        15,
        16,
        18,
        19,
        26,
        27,
        28,
        29,
        31
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 1113,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Space",
          "norm": null,
          "value": "true",
          "line": 1114,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Space",
          "norm": null,
          "value": "true",
          "line": 1114,
          "bound": null
        },
        {
          "cond": "ast_class.negated",
          "norm": null,
          "value": "false",
          "line": 1121,
          "bound": null
        },
        {
          "cond": "self.trans().utf8",
          "norm": null,
          "value": "true",
          "line": 1127,
          "bound": null
        },
        {
          "cond": "class.is_ascii()",
          "norm": null,
          "value": "true",
          "line": 1127,
          "bound": null
        }
      ],
      "ret": "Ok(class)",
      "path": [
        0,
        1,
        2,
        4,
        7,
        11,
        12,
        14,
        17,
        18,
        19,
        20,
        21,
        22,
        27,
        28,
        29,
        31
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 1113,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Space",
          "norm": null,
          "value": "true",
          "line": 1114,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Space",
          "norm": null,
          "value": "true",
          "line": 1114,
          "bound": null
        },
        {
          "cond": "ast_class.negated",
          "norm": null,
          "value": "false",
          "line": 1121,
          "bound": null
        },
        {
          "cond": "self.trans().utf8",
          "norm": null,
          "value": "true",
          "line": 1127,
          "bound": null
        },
        {
          "cond": "class.is_ascii()",
          "norm": null,
          "value": "false",
          "line": 1127,
          "bound": null
        }
      ],
      "ret": "Err(self.error(ast_class.span, ErrorKind::InvalidUtf8))",
      "path": [
        0,
        1,
        2,
        4,
        7,
        11,
        12,
        14,
        17,
        18,
        19,
        20,
        21,
        23,
        24,
        25,
        30,
        31
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 1113,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Space",
          "norm": null,
          "value": "true",
          "line": 1114,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Space",
          "norm": null,
          "value": "true",
          "line": 1114,
          "bound": null
        },
        {
          "cond": "ast_class.negated",
          "norm": null,
          "value": "false",
          "line": 1121,
          "bound": null
        },
        {
          "cond": "self.trans().utf8",
          "norm": null,
          "value": "false",
          "line": 1127,
          "bound": null
        }
      ],
      "ret": "Ok(class)",
      "path": [
        0,
        1,
        2,
        4,
        7,
        11,
        12,
        14,
        17,
        18,
        19,
        26,
        27,
        28,
        29,
        31
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 1113,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Digit",
          "norm": null,
          "value": "true",
          "line": 1114,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Digit",
          "norm": null,
          "value": "true",
          "line": 1114,
          "bound": null
        },
        {
          "cond": "ast_class.negated",
          "norm": null,
          "value": "true",
          "line": 1121,
          "bound": null
        },
        {
          "cond": "self.trans().utf8",
          "norm": null,
          "value": "true",
          "line": 1127,
          "bound": null
        },
        {
          "cond": "class.is_ascii()",
          "norm": null,
          "value": "true",
          "line": 1127,
          "bound": null
        }
      ],
      "ret": "Ok(class)",
      "path": [
        0,
        1,
        2,
        4,
        6,
        9,
        10,
        14,
        15,
        16,
        18,
        19,
        20,
        21,
        22,
        27,
        28,
        29,
        31
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 1113,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Digit",
          "norm": null,
          "value": "true",
          "line": 1114,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Digit",
          "norm": null,
          "value": "true",
          "line": 1114,
          "bound": null
        },
        {
          "cond": "ast_class.negated",
          "norm": null,
          "value": "true",
          "line": 1121,
          "bound": null
        },
        {
          "cond": "self.trans().utf8",
          "norm": null,
          "value": "true",
          "line": 1127,
          "bound": null
        },
        {
          "cond": "class.is_ascii()",
          "norm": null,
          "value": "false",
          "line": 1127,
          "bound": null
        }
      ],
      "ret": "Err(self.error(ast_class.span, ErrorKind::InvalidUtf8))",
      "path": [
        0,
        1,
        2,
        4,
        6,
        9,
        10,
        14,
        15,
        16,
        18,
        19,
        20,
        21,
        23,
        24,
        25,
        30,
        31
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 1113,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Digit",
          "norm": null,
          "value": "true",
          "line": 1114,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Digit",
          "norm": null,
          "value": "true",
          "line": 1114,
          "bound": null
        },
        {
          "cond": "ast_class.negated",
          "norm": null,
          "value": "true",
          "line": 1121,
          "bound": null
        },
        {
          "cond": "self.trans().utf8",
          "norm": null,
          "value": "false",
          "line": 1127,
          "bound": null
        }
      ],
      "ret": "Ok(class)",
      "path": [
        0,
        1,
        2,
        4,
        6,
        9,
        10,
        14,
        15,
        16,
        18,
        19,
        26,
        27,
        28,
        29,
        31
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 1113,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Digit",
          "norm": null,
          "value": "true",
          "line": 1114,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Digit",
          "norm": null,
          "value": "true",
          "line": 1114,
          "bound": null
        },
        {
          "cond": "ast_class.negated",
          "norm": null,
          "value": "false",
          "line": 1121,
          "bound": null
        },
        {
          "cond": "self.trans().utf8",
          "norm": null,
          "value": "true",
          "line": 1127,
          "bound": null
        },
        {
          "cond": "class.is_ascii()",
          "norm": null,
          "value": "true",
          "line": 1127,
          "bound": null
        }
      ],
      "ret": "Ok(class)",
      "path": [
        0,
        1,
        2,
        4,
        6,
        9,
        10,
        14,
        17,
        18,
        19,
        20,
        21,
        22,
        27,
        28,
        29,
        31
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 1113,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Digit",
          "norm": null,
          "value": "true",
          "line": 1114,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Digit",
          "norm": null,
          "value": "true",
          "line": 1114,
          "bound": null
        },
        {
          "cond": "ast_class.negated",
          "norm": null,
          "value": "false",
          "line": 1121,
          "bound": null
        },
        {
          "cond": "self.trans().utf8",
          "norm": null,
          "value": "true",
          "line": 1127,
          "bound": null
        },
        {
          "cond": "class.is_ascii()",
          "norm": null,
          "value": "false",
          "line": 1127,
          "bound": null
        }
      ],
      "ret": "Err(self.error(ast_class.span, ErrorKind::InvalidUtf8))",
      "path": [
        0,
        1,
        2,
        4,
        6,
        9,
        10,
        14,
        17,
        18,
        19,
        20,
        21,
        23,
        24,
        25,
        30,
        31
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 1113,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Digit",
          "norm": null,
          "value": "true",
          "line": 1114,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Digit",
          "norm": null,
          "value": "true",
          "line": 1114,
          "bound": null
        },
        {
          "cond": "ast_class.negated",
          "norm": null,
          "value": "false",
          "line": 1121,
          "bound": null
        },
        {
          "cond": "self.trans().utf8",
          "norm": null,
          "value": "false",
          "line": 1127,
          "bound": null
        }
      ],
      "ret": "Ok(class)",
      "path": [
        0,
        1,
        2,
        4,
        6,
        9,
        10,
        14,
        17,
        18,
        19,
        26,
        27,
        28,
        29,
        31
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}