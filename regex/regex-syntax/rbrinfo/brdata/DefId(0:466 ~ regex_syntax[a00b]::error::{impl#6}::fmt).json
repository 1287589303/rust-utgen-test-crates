{
  "name": "regex_syntax::error::{impl#6}::fmt",
  "mod_info": {
    "name": "error",
    "loc": "regex-syntax/src/lib.rs:189:1:189:11"
  },
  "visible": true,
  "loc": "regex-syntax/src/error.rs:90:5:123:6",
  "doc": "",
  "code": [
    "fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {",
    "    let spans = Spans::from_formatter(self);",
    "    if self.pattern.contains('\\n') {",
    "        let divider = repeat_char('~', 79);",
    "",
    "        writeln!(f, \"regex parse error:\")?;",
    "        writeln!(f, \"{}\", divider)?;",
    "        let notated = spans.notate();",
    "        write!(f, \"{}\", notated)?;",
    "        writeln!(f, \"{}\", divider)?;",
    "        // If we have error spans that cover multiple lines, then we just",
    "        // note the line numbers.",
    "        if !spans.multi_line.is_empty() {",
    "            let mut notes = vec![];",
    "            for span in &spans.multi_line {",
    "                notes.push(format!(",
    "                    \"on line {} (column {}) through line {} (column {})\",",
    "                    span.start.line,",
    "                    span.start.column,",
    "                    span.end.line,",
    "                    span.end.column - 1",
    "                ));",
    "            }",
    "            writeln!(f, \"{}\", notes.join(\"\\n\"))?;",
    "        }",
    "        write!(f, \"error: {}\", self.err)?;",
    "    } else {",
    "        writeln!(f, \"regex parse error:\")?;",
    "        let notated = Spans::from_formatter(self).notate();",
    "        write!(f, \"{}\", notated)?;",
    "        write!(f, \"error: {}\", self.err)?;",
    "    }",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 16,
    "contra": 3,
    "min_set": 12
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.pattern.contains('\\n')",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"regex parse error:\")?",
          "norm": null,
          "value": "Err/None",
          "line": 95,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        11,
        12,
        127,
        128,
        129,
        130,
        131
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.pattern.contains('\\n')",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"regex parse error:\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 95,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"{}\", divider)?",
          "norm": null,
          "value": "Err/None",
          "line": 96,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        13,
        14,
        15,
        16,
        18,
        20,
        21,
        127,
        128,
        129,
        130,
        131
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.pattern.contains('\\n')",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"regex parse error:\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 95,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"{}\", divider)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 96,
          "bound": null
        },
        {
          "cond": "write!(f, \"{}\", notated)?",
          "norm": null,
          "value": "Err/None",
          "line": 98,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        13,
        14,
        15,
        16,
        19,
        22,
        23,
        24,
        25,
        26,
        28,
        30,
        31,
        125,
        126,
        127,
        128,
        129,
        130,
        131
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.pattern.contains('\\n')",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"regex parse error:\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 95,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"{}\", divider)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 96,
          "bound": null
        },
        {
          "cond": "write!(f, \"{}\", notated)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 98,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"{}\", divider)?",
          "norm": null,
          "value": "Err/None",
          "line": 99,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        13,
        14,
        15,
        16,
        19,
        22,
        23,
        24,
        25,
        26,
        29,
        32,
        33,
        34,
        35,
        37,
        39,
        40,
        125,
        126,
        127,
        128,
        129,
        130,
        131
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.pattern.contains('\\n')",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"regex parse error:\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 95,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"{}\", divider)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 96,
          "bound": null
        },
        {
          "cond": "write!(f, \"{}\", notated)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 98,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"{}\", divider)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 99,
          "bound": null
        },
        {
          "cond": "spans.multi_line.is_empty()",
          "norm": null,
          "value": "true",
          "line": 102,
          "bound": null
        },
        {
          "cond": "write!(f, \"error: {}\", self.err)?",
          "norm": null,
          "value": "Err/None",
          "line": 115,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        13,
        14,
        15,
        16,
        19,
        22,
        23,
        24,
        25,
        26,
        29,
        32,
        33,
        34,
        35,
        38,
        41,
        42,
        76,
        77,
        78,
        79,
        80,
        82,
        84,
        85,
        125,
        126,
        127,
        128,
        129,
        130,
        131
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.pattern.contains('\\n')",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"regex parse error:\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 95,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"{}\", divider)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 96,
          "bound": null
        },
        {
          "cond": "write!(f, \"{}\", notated)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 98,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"{}\", divider)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 99,
          "bound": null
        },
        {
          "cond": "spans.multi_line.is_empty()",
          "norm": null,
          "value": "true",
          "line": 102,
          "bound": null
        },
        {
          "cond": "write!(f, \"error: {}\", self.err)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 115,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        13,
        14,
        15,
        16,
        19,
        22,
        23,
        24,
        25,
        26,
        29,
        32,
        33,
        34,
        35,
        38,
        41,
        42,
        76,
        77,
        78,
        79,
        80,
        83,
        86,
        87,
        119,
        120,
        131
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.pattern.contains('\\n')",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"regex parse error:\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 95,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"{}\", divider)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 96,
          "bound": null
        },
        {
          "cond": "write!(f, \"{}\", notated)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 98,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"{}\", divider)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 99,
          "bound": null
        },
        {
          "cond": "spans.multi_line.is_empty()",
          "norm": null,
          "value": "false",
          "line": 102,
          "bound": null
        },
        {
          "cond": "span in &spans.multi_line",
          "norm": null,
          "value": "true",
          "line": 104,
          "bound": null
        },
        {
          "cond": "span in &spans.multi_line",
          "norm": null,
          "value": "false",
          "line": 104,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"{}\", notes.join(\"\\n\"))?",
          "norm": null,
          "value": "Err/None",
          "line": 113,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        13,
        14,
        15,
        16,
        19,
        22,
        23,
        24,
        25,
        26,
        29,
        32,
        33,
        34,
        35,
        38,
        41,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        46,
        47,
        48,
        50,
        52,
        63,
        64,
        65,
        66,
        67,
        68,
        70,
        72,
        73,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.pattern.contains('\\n')",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"regex parse error:\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 95,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"{}\", divider)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 96,
          "bound": null
        },
        {
          "cond": "write!(f, \"{}\", notated)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 98,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"{}\", divider)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 99,
          "bound": null
        },
        {
          "cond": "spans.multi_line.is_empty()",
          "norm": null,
          "value": "false",
          "line": 102,
          "bound": null
        },
        {
          "cond": "span in &spans.multi_line",
          "norm": null,
          "value": "true",
          "line": 104,
          "bound": null
        },
        {
          "cond": "span in &spans.multi_line",
          "norm": null,
          "value": "false",
          "line": 104,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"{}\", notes.join(\"\\n\"))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 113,
          "bound": null
        },
        {
          "cond": "write!(f, \"error: {}\", self.err)?",
          "norm": null,
          "value": "Err/None",
          "line": 115,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        13,
        14,
        15,
        16,
        19,
        22,
        23,
        24,
        25,
        26,
        29,
        32,
        33,
        34,
        35,
        38,
        41,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        46,
        47,
        48,
        50,
        52,
        63,
        64,
        65,
        66,
        67,
        68,
        71,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        82,
        84,
        85,
        125,
        126,
        127,
        128,
        129,
        130,
        131
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.pattern.contains('\\n')",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"regex parse error:\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 95,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"{}\", divider)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 96,
          "bound": null
        },
        {
          "cond": "write!(f, \"{}\", notated)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 98,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"{}\", divider)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 99,
          "bound": null
        },
        {
          "cond": "spans.multi_line.is_empty()",
          "norm": null,
          "value": "false",
          "line": 102,
          "bound": null
        },
        {
          "cond": "span in &spans.multi_line",
          "norm": null,
          "value": "true",
          "line": 104,
          "bound": null
        },
        {
          "cond": "span in &spans.multi_line",
          "norm": null,
          "value": "false",
          "line": 104,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"{}\", notes.join(\"\\n\"))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 113,
          "bound": null
        },
        {
          "cond": "write!(f, \"error: {}\", self.err)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 115,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        13,
        14,
        15,
        16,
        19,
        22,
        23,
        24,
        25,
        26,
        29,
        32,
        33,
        34,
        35,
        38,
        41,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        46,
        47,
        48,
        50,
        52,
        63,
        64,
        65,
        66,
        67,
        68,
        71,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        83,
        86,
        87,
        119,
        120,
        131
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.pattern.contains('\\n')",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"regex parse error:\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 95,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"{}\", divider)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 96,
          "bound": null
        },
        {
          "cond": "write!(f, \"{}\", notated)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 98,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"{}\", divider)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 99,
          "bound": null
        },
        {
          "cond": "spans.multi_line.is_empty()",
          "norm": null,
          "value": "false",
          "line": 102,
          "bound": null
        },
        {
          "cond": "span in &spans.multi_line",
          "norm": null,
          "value": "false",
          "line": 104,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"{}\", notes.join(\"\\n\"))?",
          "norm": null,
          "value": "Err/None",
          "line": 113,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        13,
        14,
        15,
        16,
        19,
        22,
        23,
        24,
        25,
        26,
        29,
        32,
        33,
        34,
        35,
        38,
        41,
        43,
        44,
        45,
        46,
        47,
        48,
        50,
        52,
        63,
        64,
        65,
        66,
        67,
        68,
        70,
        72,
        73,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "self.pattern.contains('\\n')",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"regex parse error:\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 95,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"{}\", divider)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 96,
          "bound": null
        },
        {
          "cond": "write!(f, \"{}\", notated)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 98,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"{}\", divider)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 99,
          "bound": null
        },
        {
          "cond": "spans.multi_line.is_empty()",
          "norm": null,
          "value": "false",
          "line": 102,
          "bound": null
        },
        {
          "cond": "span in &spans.multi_line",
          "norm": null,
          "value": "false",
          "line": 104,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"{}\", notes.join(\"\\n\"))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 113,
          "bound": null
        },
        {
          "cond": "write!(f, \"error: {}\", self.err)?",
          "norm": null,
          "value": "Err/None",
          "line": 115,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        13,
        14,
        15,
        16,
        19,
        22,
        23,
        24,
        25,
        26,
        29,
        32,
        33,
        34,
        35,
        38,
        41,
        43,
        44,
        45,
        46,
        47,
        48,
        50,
        52,
        63,
        64,
        65,
        66,
        67,
        68,
        71,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        82,
        84,
        85,
        125,
        126,
        127,
        128,
        129,
        130,
        131
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "self.pattern.contains('\\n')",
          "norm": null,
          "value": "true",
          "line": 92,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"regex parse error:\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 95,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"{}\", divider)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 96,
          "bound": null
        },
        {
          "cond": "write!(f, \"{}\", notated)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 98,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"{}\", divider)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 99,
          "bound": null
        },
        {
          "cond": "spans.multi_line.is_empty()",
          "norm": null,
          "value": "false",
          "line": 102,
          "bound": null
        },
        {
          "cond": "span in &spans.multi_line",
          "norm": null,
          "value": "false",
          "line": 104,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"{}\", notes.join(\"\\n\"))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 113,
          "bound": null
        },
        {
          "cond": "write!(f, \"error: {}\", self.err)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 115,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        13,
        14,
        15,
        16,
        19,
        22,
        23,
        24,
        25,
        26,
        29,
        32,
        33,
        34,
        35,
        38,
        41,
        43,
        44,
        45,
        46,
        47,
        48,
        50,
        52,
        63,
        64,
        65,
        66,
        67,
        68,
        71,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        83,
        86,
        87,
        119,
        120,
        131
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "self.pattern.contains('\\n')",
          "norm": null,
          "value": "false",
          "line": 92,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"regex parse error:\")?",
          "norm": null,
          "value": "Err/None",
          "line": 117,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        88,
        89,
        90,
        91,
        93,
        95,
        96,
        129,
        130,
        131
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "self.pattern.contains('\\n')",
          "norm": null,
          "value": "false",
          "line": 92,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"regex parse error:\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 117,
          "bound": null
        },
        {
          "cond": "write!(f, \"{}\", notated)?",
          "norm": null,
          "value": "Err/None",
          "line": 119,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        88,
        89,
        90,
        91,
        94,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        105,
        107,
        108,
        121,
        122,
        129,
        130,
        131
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "self.pattern.contains('\\n')",
          "norm": null,
          "value": "false",
          "line": 92,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"regex parse error:\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 117,
          "bound": null
        },
        {
          "cond": "write!(f, \"{}\", notated)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 119,
          "bound": null
        },
        {
          "cond": "write!(f, \"error: {}\", self.err)?",
          "norm": null,
          "value": "Err/None",
          "line": 120,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        88,
        89,
        90,
        91,
        94,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        106,
        109,
        110,
        111,
        112,
        114,
        116,
        117,
        121,
        122,
        129,
        130,
        131
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "self.pattern.contains('\\n')",
          "norm": null,
          "value": "false",
          "line": 92,
          "bound": null
        },
        {
          "cond": "writeln!(f, \"regex parse error:\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 117,
          "bound": null
        },
        {
          "cond": "write!(f, \"{}\", notated)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 119,
          "bound": null
        },
        {
          "cond": "write!(f, \"error: {}\", self.err)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 120,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        88,
        89,
        90,
        91,
        94,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        106,
        109,
        110,
        111,
        112,
        115,
        118,
        119,
        120,
        131
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}