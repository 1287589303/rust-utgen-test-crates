{
  "name": "regex_syntax::unicode::canonical_gencat",
  "mod_info": {
    "name": "unicode",
    "loc": "regex-syntax/src/lib.rs:193:1:193:13"
  },
  "visible": false,
  "loc": "regex-syntax/src/unicode.rs:501:1:513:2",
  "doc": "",
  "code": [
    "fn canonical_gencat(",
    "    normalized_value: &str,",
    ") -> Result<Option<&'static str>, Error> {",
    "    Ok(match normalized_value {",
    "        \"any\" => Some(\"Any\"),",
    "        \"assigned\" => Some(\"Assigned\"),",
    "        \"ascii\" => Some(\"ASCII\"),",
    "        _ => {",
    "            let gencats = property_values(\"General_Category\")?.unwrap();",
    "            canonical_value(gencats, normalized_value)",
    "        }",
    "    })",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "normalized_value matches \"any\"",
          "norm": null,
          "value": "true",
          "line": 505,
          "bound": null
        },
        {
          "cond": "normalized_value matches \"any\"",
          "norm": null,
          "value": "true",
          "line": 504,
          "bound": null
        }
      ],
      "ret": "Ok(match normalized_value {\n        \"any\" => Some(\"Any\"),\n        \"assigned\" => Some(\"Assigned\"),\n        \"ascii\" => Some(\"ASCII\"),\n        _ => {\n            let gencats = property_values(\"General_Category\")?.unwrap();\n            canonical_value(gencats, normalized_value)\n        }\n    })",
      "path": [
        0,
        9,
        2,
        10,
        22,
        23
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "normalized_value matches \"any\"",
          "norm": null,
          "value": "false",
          "line": 505,
          "bound": null
        },
        {
          "cond": "normalized_value matches \"assigned\"",
          "norm": null,
          "value": "true",
          "line": 506,
          "bound": null
        },
        {
          "cond": "normalized_value matches \"assigned\"",
          "norm": null,
          "value": "true",
          "line": 504,
          "bound": null
        }
      ],
      "ret": "Ok(match normalized_value {\n        \"any\" => Some(\"Any\"),\n        \"assigned\" => Some(\"Assigned\"),\n        \"ascii\" => Some(\"ASCII\"),\n        _ => {\n            let gencats = property_values(\"General_Category\")?.unwrap();\n            canonical_value(gencats, normalized_value)\n        }\n    })",
      "path": [
        0,
        9,
        3,
        8,
        4,
        11,
        22,
        23
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "normalized_value matches \"any\"",
          "norm": null,
          "value": "false",
          "line": 505,
          "bound": null
        },
        {
          "cond": "normalized_value matches \"assigned\"",
          "norm": null,
          "value": "false",
          "line": 506,
          "bound": null
        },
        {
          "cond": "normalized_value matches \"ascii\"",
          "norm": null,
          "value": "true",
          "line": 507,
          "bound": null
        },
        {
          "cond": "normalized_value matches \"ascii\"",
          "norm": null,
          "value": "true",
          "line": 504,
          "bound": null
        }
      ],
      "ret": "Ok(match normalized_value {\n        \"any\" => Some(\"Any\"),\n        \"assigned\" => Some(\"Assigned\"),\n        \"ascii\" => Some(\"ASCII\"),\n        _ => {\n            let gencats = property_values(\"General_Category\")?.unwrap();\n            canonical_value(gencats, normalized_value)\n        }\n    })",
      "path": [
        0,
        9,
        3,
        8,
        5,
        7,
        6,
        12,
        22,
        23
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "normalized_value matches \"any\"",
          "norm": null,
          "value": "false",
          "line": 505,
          "bound": null
        },
        {
          "cond": "normalized_value matches \"assigned\"",
          "norm": null,
          "value": "false",
          "line": 506,
          "bound": null
        },
        {
          "cond": "normalized_value matches \"ascii\"",
          "norm": null,
          "value": "false",
          "line": 507,
          "bound": null
        },
        {
          "cond": "property_values(\"General_Category\")?",
          "norm": null,
          "value": "Err/None",
          "line": 509,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        9,
        3,
        8,
        5,
        7,
        1,
        13,
        14,
        16,
        18,
        19,
        23
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "normalized_value matches \"any\"",
          "norm": null,
          "value": "false",
          "line": 505,
          "bound": null
        },
        {
          "cond": "normalized_value matches \"assigned\"",
          "norm": null,
          "value": "false",
          "line": 506,
          "bound": null
        },
        {
          "cond": "normalized_value matches \"ascii\"",
          "norm": null,
          "value": "false",
          "line": 507,
          "bound": null
        },
        {
          "cond": "property_values(\"General_Category\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 509,
          "bound": null
        }
      ],
      "ret": "Ok(match normalized_value {\n        \"any\" => Some(\"Any\"),\n        \"assigned\" => Some(\"Assigned\"),\n        \"ascii\" => Some(\"ASCII\"),\n        _ => {\n            let gencats = property_values(\"General_Category\")?.unwrap();\n            canonical_value(gencats, normalized_value)\n        }\n    })",
      "path": [
        0,
        9,
        3,
        8,
        5,
        7,
        1,
        13,
        14,
        17,
        20,
        21,
        22,
        23
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}