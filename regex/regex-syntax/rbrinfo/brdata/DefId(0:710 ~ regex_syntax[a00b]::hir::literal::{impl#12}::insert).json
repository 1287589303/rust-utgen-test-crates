{
  "name": "regex_syntax::hir::literal::{impl#12}::insert",
  "mod_info": {
    "name": "hir::literal",
    "loc": "regex-syntax/src/hir/mod.rs:42:1:42:17"
  },
  "visible": false,
  "loc": "regex-syntax/src/hir/literal.rs:2268:5:2292:6",
  "doc": "/// Returns `Ok` if the given byte string is accepted into this trie and\n/// `Err` otherwise. The index for the success case corresponds to the\n/// index of the literal added. The index for the error case corresponds to\n/// the index of the literal already in the trie that prevented the given\n/// byte string from being added. (Which implies it is a prefix of the one\n/// given.)\n///\n/// In short, the byte string given is accepted into the trie if and only\n/// if it is possible for it to match when executing a preference order\n/// search.\n",
  "code": [
    "fn insert(&mut self, bytes: &[u8]) -> Result<usize, usize> {",
    "    let mut prev = self.root();",
    "    if let Some(idx) = self.matches[prev] {",
    "        return Err(idx.get());",
    "    }",
    "    for &b in bytes.iter() {",
    "        match self.states[prev].trans.binary_search_by_key(&b, |t| t.0) {",
    "            Ok(i) => {",
    "                prev = self.states[prev].trans[i].1;",
    "                if let Some(idx) = self.matches[prev] {",
    "                    return Err(idx.get());",
    "                }",
    "            }",
    "            Err(i) => {",
    "                let next = self.create_state();",
    "                self.states[prev].trans.insert(i, (b, next));",
    "                prev = next;",
    "            }",
    "        }",
    "    }",
    "    let idx = self.next_literal_index;",
    "    self.next_literal_index += 1;",
    "    self.matches[prev] = NonZeroUsize::new(idx);",
    "    Ok(idx)",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 2,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(idx) = self.matches[prev]",
          "norm": null,
          "value": "true",
          "line": 2270,
          "bound": null
        },
        {
          "cond": "&b in bytes.iter()",
          "norm": null,
          "value": "true",
          "line": 2273,
          "bound": null
        },
        {
          "cond": "self.states[prev].trans.binary_search_by_key(&b, |t| t.0) matches Err(i)",
          "norm": null,
          "value": "true",
          "line": 2274,
          "bound": null
        },
        {
          "cond": "&b in bytes.iter()",
          "norm": null,
          "value": "false",
          "line": 2273,
          "bound": null
        }
      ],
      "ret": "Ok(idx)",
      "path": [
        0,
        1,
        2,
        6,
        7,
        8,
        9,
        10,
        11,
        14,
        16,
        17,
        18,
        21,
        30,
        31,
        32,
        33,
        9,
        10,
        11,
        13,
        15,
        34,
        35,
        36,
        38
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(idx) = self.matches[prev]",
          "norm": null,
          "value": "true",
          "line": 2270,
          "bound": null
        },
        {
          "cond": "&b in bytes.iter()",
          "norm": null,
          "value": "true",
          "line": 2273,
          "bound": null
        },
        {
          "cond": "self.states[prev].trans.binary_search_by_key(&b, |t| t.0) matches Ok(i)",
          "norm": null,
          "value": "true",
          "line": 2274,
          "bound": null
        },
        {
          "cond": "self.states[prev].trans.binary_search_by_key(&b, |t| t.0) matches Ok(i)",
          "norm": null,
          "value": "true",
          "line": 2274,
          "bound": null
        },
        {
          "cond": "let Some(idx) = self.matches[prev]",
          "norm": null,
          "value": "true",
          "line": 2277,
          "bound": null
        },
        {
          "cond": "&b in bytes.iter()",
          "norm": null,
          "value": "false",
          "line": 2273,
          "bound": null
        }
      ],
      "ret": "Ok(idx)",
      "path": [
        0,
        1,
        2,
        6,
        7,
        8,
        9,
        10,
        11,
        14,
        16,
        17,
        18,
        20,
        22,
        23,
        24,
        25,
        29,
        33,
        9,
        10,
        11,
        13,
        15,
        34,
        35,
        36,
        38
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some(idx) = self.matches[prev]",
          "norm": null,
          "value": "true",
          "line": 2270,
          "bound": null
        },
        {
          "cond": "&b in bytes.iter()",
          "norm": null,
          "value": "true",
          "line": 2273,
          "bound": null
        },
        {
          "cond": "self.states[prev].trans.binary_search_by_key(&b, |t| t.0) matches Ok(i)",
          "norm": null,
          "value": "true",
          "line": 2274,
          "bound": null
        },
        {
          "cond": "self.states[prev].trans.binary_search_by_key(&b, |t| t.0) matches Ok(i)",
          "norm": null,
          "value": "true",
          "line": 2274,
          "bound": null
        },
        {
          "cond": "let Some(idx) = self.matches[prev]",
          "norm": null,
          "value": "true",
          "line": 2277,
          "bound": null
        }
      ],
      "ret": "Err(idx.get())",
      "path": [
        0,
        1,
        2,
        6,
        7,
        8,
        9,
        10,
        11,
        14,
        16,
        17,
        18,
        20,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        37,
        38
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "let Some(idx) = self.matches[prev]",
          "norm": null,
          "value": "true",
          "line": 2270,
          "bound": null
        },
        {
          "cond": "&b in bytes.iter()",
          "norm": null,
          "value": "false",
          "line": 2273,
          "bound": null
        }
      ],
      "ret": "Ok(idx)",
      "path": [
        0,
        1,
        2,
        6,
        7,
        8,
        9,
        10,
        11,
        13,
        15,
        34,
        35,
        36,
        38
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "let Some(idx) = self.matches[prev]",
          "norm": null,
          "value": "true",
          "line": 2270,
          "bound": null
        }
      ],
      "ret": "Err(idx.get())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        37,
        38
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}