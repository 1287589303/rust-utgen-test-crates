{
  "name": "regex_syntax::hir::literal::{impl#4}::cross_reverse",
  "mod_info": {
    "name": "hir::literal",
    "loc": "regex-syntax/src/hir/mod.rs:42:1:42:17"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/literal.rs:1098:5:1134:6",
  "doc": "/// Modify this sequence to contain the cross product between it and\n/// the sequence given, where the sequences are treated as suffixes\n/// instead of prefixes. Namely, the sequence `other` is *prepended*\n/// to `self` (as opposed to `other` being *appended* to `self` in\n/// [`Seq::cross_forward`]).\n///\n/// The cross product only considers literals in this sequence that are\n/// exact. That is, inexact literals are not extended.\n///\n/// The literals are always drained from `other`, even if none are used.\n/// This permits callers to reuse the sequence allocation elsewhere.\n///\n/// If this sequence is infinite, then this is a no-op, regardless of what\n/// `other` contains (and in this case, the literals are still drained from\n/// `other`). If `other` is infinite and this sequence is finite, then this\n/// is a no-op, unless this sequence contains a zero-length literal. In\n/// which case, the infiniteness of `other` infects this sequence, and this\n/// sequence is itself made infinite.\n///\n/// Like [`Seq::union`], this may attempt to deduplicate literals. See\n/// [`Seq::dedup`] for how deduplication deals with exact and inexact\n/// literals.\n///\n/// # Example\n///\n/// This example shows basic usage and how exact and inexact literals\n/// interact.\n///\n/// ```\n/// use regex_syntax::hir::literal::{Literal, Seq};\n///\n/// let mut seq1 = Seq::from_iter([\n///     Literal::exact(\"foo\"),\n///     Literal::inexact(\"bar\"),\n/// ]);\n/// let mut seq2 = Seq::from_iter([\n///     Literal::inexact(\"quux\"),\n///     Literal::exact(\"baz\"),\n/// ]);\n/// seq1.cross_reverse(&mut seq2);\n///\n/// // The literals are pulled out of seq2.\n/// assert_eq!(Some(0), seq2.len());\n///\n/// let expected = Seq::from_iter([\n///     Literal::inexact(\"quuxfoo\"),\n///     Literal::inexact(\"bar\"),\n///     Literal::exact(\"bazfoo\"),\n/// ]);\n/// assert_eq!(expected, seq1);\n/// ```\n///\n/// This example shows the behavior of when `other` is an infinite\n/// sequence.\n///\n/// ```\n/// use regex_syntax::hir::literal::{Literal, Seq};\n///\n/// let mut seq1 = Seq::from_iter([\n///     Literal::exact(\"foo\"),\n///     Literal::inexact(\"bar\"),\n/// ]);\n/// let mut seq2 = Seq::infinite();\n/// seq1.cross_reverse(&mut seq2);\n///\n/// // When seq2 is infinite, cross product doesn't add anything, but\n/// // ensures all members of seq1 are inexact.\n/// let expected = Seq::from_iter([\n///     Literal::inexact(\"foo\"),\n///     Literal::inexact(\"bar\"),\n/// ]);\n/// assert_eq!(expected, seq1);\n/// ```\n///\n/// This example is like the one above, but shows what happens when this\n/// sequence contains an empty string. In this case, an infinite `other`\n/// sequence infects this sequence (because the empty string means that\n/// there are no finite suffixes):\n///\n/// ```\n/// use regex_syntax::hir::literal::{Literal, Seq};\n///\n/// let mut seq1 = Seq::from_iter([\n///     Literal::exact(\"foo\"),\n///     Literal::exact(\"\"), // inexact provokes same behavior\n///     Literal::inexact(\"bar\"),\n/// ]);\n/// let mut seq2 = Seq::infinite();\n/// seq1.cross_reverse(&mut seq2);\n///\n/// // seq1 is now infinite!\n/// assert!(!seq1.is_finite());\n/// ```\n///\n/// This example shows the behavior when this sequence is infinite.\n///\n/// ```\n/// use regex_syntax::hir::literal::{Literal, Seq};\n///\n/// let mut seq1 = Seq::infinite();\n/// let mut seq2 = Seq::from_iter([\n///     Literal::exact(\"foo\"),\n///     Literal::inexact(\"bar\"),\n/// ]);\n/// seq1.cross_reverse(&mut seq2);\n///\n/// // seq1 remains unchanged.\n/// assert!(!seq1.is_finite());\n/// // Even though the literals in seq2 weren't used, it was still drained.\n/// assert_eq!(Some(0), seq2.len());\n/// ```\n",
  "code": [
    "pub fn cross_reverse(&mut self, other: &mut Seq) {",
    "    let (lits1, lits2) = match self.cross_preamble(other) {",
    "        None => return,",
    "        Some((lits1, lits2)) => (lits1, lits2),",
    "    };",
    "    // We basically proceed as we do in 'cross_forward' at this point,",
    "    // except that the outer loop is now 'other' and the inner loop is now",
    "    // 'self'. That's because 'self' corresponds to suffixes and 'other'",
    "    // corresponds to the sequence we want to *prepend* to the suffixes.",
    "    let newcap = lits1.len().saturating_mul(lits2.len());",
    "    let selflits = mem::replace(lits1, Vec::with_capacity(newcap));",
    "    for (i, otherlit) in lits2.drain(..).enumerate() {",
    "        for selflit in selflits.iter() {",
    "            if !selflit.is_exact() {",
    "                // If the suffix isn't exact, then we can't prepend",
    "                // anything to it. However, we still want to keep it. But",
    "                // we only want to keep one of them, to avoid duplication.",
    "                // (The duplication is okay from a correctness perspective,",
    "                // but wasteful.)",
    "                if i == 0 {",
    "                    lits1.push(selflit.clone());",
    "                }",
    "                continue;",
    "            }",
    "            let mut newlit = Literal::exact(Vec::with_capacity(",
    "                otherlit.len() + selflit.len(),",
    "            ));",
    "            newlit.extend(&otherlit);",
    "            newlit.extend(&selflit);",
    "            if !otherlit.is_exact() {",
    "                newlit.make_inexact();",
    "            }",
    "            lits1.push(newlit);",
    "        }",
    "    }",
    "    self.dedup();",
    "}"
  ],
  "size": {
    "chain": 7,
    "contra": 5,
    "min_set": 6
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.cross_preamble(other) matches Some((lits1, lits2))",
          "norm": null,
          "value": "true",
          "line": 1099,
          "bound": null
        },
        {
          "cond": "(i, otherlit) in lits2.drain(..).enumerate()",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "selflit in selflits.iter()",
          "norm": null,
          "value": "true",
          "line": 1110,
          "bound": null
        },
        {
          "cond": "selflit.is_exact()",
          "norm": null,
          "value": "true",
          "line": 1111,
          "bound": null
        },
        {
          "cond": "otherlit.is_exact()",
          "norm": null,
          "value": "true",
          "line": 1127,
          "bound": null
        },
        {
          "cond": "selflit in selflits.iter()",
          "norm": null,
          "value": "false",
          "line": 1110,
          "bound": null
        },
        {
          "cond": "(i, otherlit) in lits2.drain(..).enumerate()",
          "norm": null,
          "value": "false",
          "line": 1109,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        23,
        24,
        25,
        26,
        29,
        31,
        32,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        50,
        51,
        52,
        24,
        25,
        26,
        28,
        30,
        53,
        54,
        14,
        15,
        16,
        18,
        20,
        55,
        56,
        57,
        58,
        59,
        60
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.cross_preamble(other) matches Some((lits1, lits2))",
          "norm": null,
          "value": "true",
          "line": 1099,
          "bound": null
        },
        {
          "cond": "(i, otherlit) in lits2.drain(..).enumerate()",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "selflit in selflits.iter()",
          "norm": null,
          "value": "true",
          "line": 1110,
          "bound": null
        },
        {
          "cond": "selflit.is_exact()",
          "norm": null,
          "value": "true",
          "line": 1111,
          "bound": null
        },
        {
          "cond": "otherlit.is_exact()",
          "norm": null,
          "value": "false",
          "line": 1127,
          "bound": null
        },
        {
          "cond": "selflit in selflits.iter()",
          "norm": null,
          "value": "false",
          "line": 1110,
          "bound": null
        },
        {
          "cond": "(i, otherlit) in lits2.drain(..).enumerate()",
          "norm": null,
          "value": "false",
          "line": 1109,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        23,
        24,
        25,
        26,
        29,
        31,
        32,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        48,
        49,
        50,
        51,
        52,
        24,
        25,
        26,
        28,
        30,
        53,
        54,
        14,
        15,
        16,
        18,
        20,
        55,
        56,
        57,
        58,
        59,
        60
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.cross_preamble(other) matches Some((lits1, lits2))",
          "norm": null,
          "value": "true",
          "line": 1099,
          "bound": null
        },
        {
          "cond": "(i, otherlit) in lits2.drain(..).enumerate()",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "selflit in selflits.iter()",
          "norm": null,
          "value": "true",
          "line": 1110,
          "bound": null
        },
        {
          "cond": "selflit.is_exact()",
          "norm": null,
          "value": "false",
          "line": 1111,
          "bound": null
        },
        {
          "cond": "i == 0",
          "norm": "0 == i",
          "value": "false",
          "line": 1117,
          "bound": null
        },
        {
          "cond": "selflit in selflits.iter()",
          "norm": null,
          "value": "false",
          "line": 1110,
          "bound": null
        },
        {
          "cond": "(i, otherlit) in lits2.drain(..).enumerate()",
          "norm": null,
          "value": "false",
          "line": 1109,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        23,
        24,
        25,
        26,
        29,
        31,
        33,
        34,
        35,
        36,
        38,
        24,
        25,
        26,
        28,
        30,
        53,
        54,
        14,
        15,
        16,
        18,
        20,
        55,
        56,
        57,
        58,
        59,
        60
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.cross_preamble(other) matches Some((lits1, lits2))",
          "norm": null,
          "value": "true",
          "line": 1099,
          "bound": null
        },
        {
          "cond": "(i, otherlit) in lits2.drain(..).enumerate()",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "selflit in selflits.iter()",
          "norm": null,
          "value": "true",
          "line": 1110,
          "bound": null
        },
        {
          "cond": "selflit.is_exact()",
          "norm": null,
          "value": "false",
          "line": 1111,
          "bound": null
        },
        {
          "cond": "i == 0",
          "norm": "0 == i",
          "value": "true",
          "line": 1117,
          "bound": null
        },
        {
          "cond": "selflit in selflits.iter()",
          "norm": null,
          "value": "false",
          "line": 1110,
          "bound": null
        },
        {
          "cond": "(i, otherlit) in lits2.drain(..).enumerate()",
          "norm": null,
          "value": "false",
          "line": 1109,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        23,
        24,
        25,
        26,
        29,
        31,
        33,
        37,
        38,
        24,
        25,
        26,
        28,
        30,
        53,
        54,
        14,
        15,
        16,
        18,
        20,
        55,
        56,
        57,
        58,
        59,
        60
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.cross_preamble(other) matches Some((lits1, lits2))",
          "norm": null,
          "value": "true",
          "line": 1099,
          "bound": null
        },
        {
          "cond": "(i, otherlit) in lits2.drain(..).enumerate()",
          "norm": null,
          "value": "true",
          "line": 1109,
          "bound": null
        },
        {
          "cond": "selflit in selflits.iter()",
          "norm": null,
          "value": "false",
          "line": 1110,
          "bound": null
        },
        {
          "cond": "(i, otherlit) in lits2.drain(..).enumerate()",
          "norm": null,
          "value": "false",
          "line": 1109,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        22,
        23,
        24,
        25,
        26,
        28,
        30,
        53,
        54,
        14,
        15,
        16,
        18,
        20,
        55,
        56,
        57,
        58,
        59,
        60
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.cross_preamble(other) matches Some((lits1, lits2))",
          "norm": null,
          "value": "true",
          "line": 1099,
          "bound": null
        },
        {
          "cond": "(i, otherlit) in lits2.drain(..).enumerate()",
          "norm": null,
          "value": "false",
          "line": 1109,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        55,
        56,
        57,
        58,
        59,
        60
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.cross_preamble(other) matches None",
          "norm": null,
          "value": "true",
          "line": 1099,
          "bound": null
        },
        {
          "cond": "self.cross_preamble(other) matches None",
          "norm": null,
          "value": "true",
          "line": 1099,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        5,
        60
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}