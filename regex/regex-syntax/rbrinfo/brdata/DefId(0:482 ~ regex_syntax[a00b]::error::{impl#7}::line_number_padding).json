{
  "name": "regex_syntax::error::{impl#7}::line_number_padding",
  "mod_info": {
    "name": "error",
    "loc": "regex-syntax/src/lib.rs:189:1:189:11"
  },
  "visible": false,
  "loc": "regex-syntax/src/error.rs:259:5:265:6",
  "doc": "/// Return the line number padding beginning at the start of each line of\n/// the pattern.\n///\n/// If the pattern is only one line, then this returns a fixed padding\n/// for visual indentation.\n",
  "code": [
    "fn line_number_padding(&self) -> usize {",
    "    if self.line_number_width == 0 {",
    "        4",
    "    } else {",
    "        2 + self.line_number_width",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.line_number_width == 0",
          "norm": "0 == self.line_number_width",
          "value": "false",
          "line": 260,
          "bound": null
        }
      ],
      "ret": "4",
      "path": [
        0,
        1,
        4
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.line_number_width == 0",
          "norm": "0 == self.line_number_width",
          "value": "true",
          "line": 260,
          "bound": null
        }
      ],
      "ret": "2 + self.line_number_width",
      "path": [
        0,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}