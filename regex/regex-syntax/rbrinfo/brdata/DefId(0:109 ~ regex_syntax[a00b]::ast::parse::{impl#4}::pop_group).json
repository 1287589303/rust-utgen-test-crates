{
  "name": "regex_syntax::ast::parse::{impl#4}::pop_group",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:744:5:787:6",
  "doc": "/// Pop a group AST from the parser's internal stack and set the group's\n/// AST to the given concatenation. Return the concatenation containing\n/// the group.\n///\n/// This assumes that the parser is currently positioned on the closing\n/// parenthesis and advances the parser to the character following the `)`.\n///\n/// If no such group could be popped, then an unopened group error is\n/// returned.\n",
  "code": [
    "fn pop_group(&self, mut group_concat: ast::Concat) -> Result<ast::Concat> {",
    "    use self::GroupState::*;",
    "",
    "    assert_eq!(self.char(), ')');",
    "    let mut stack = self.parser().stack_group.borrow_mut();",
    "    let (mut prior_concat, mut group, ignore_whitespace, alt) = match stack",
    "        .pop()",
    "    {",
    "        Some(Group { concat, group, ignore_whitespace }) => {",
    "            (concat, group, ignore_whitespace, None)",
    "        }",
    "        Some(Alternation(alt)) => match stack.pop() {",
    "            Some(Group { concat, group, ignore_whitespace }) => {",
    "                (concat, group, ignore_whitespace, Some(alt))",
    "            }",
    "            None | Some(Alternation(_)) => {",
    "                return Err(self.error(",
    "                    self.span_char(),",
    "                    ast::ErrorKind::GroupUnopened,",
    "                ));",
    "            }",
    "        },",
    "        None => {",
    "            return Err(self",
    "                .error(self.span_char(), ast::ErrorKind::GroupUnopened));",
    "        }",
    "    };",
    "    self.parser().ignore_whitespace.set(ignore_whitespace);",
    "    group_concat.span.end = self.pos();",
    "    self.bump();",
    "    group.span.end = self.pos();",
    "    match alt {",
    "        Some(mut alt) => {",
    "            alt.span.end = group_concat.span.end;",
    "            alt.asts.push(group_concat.into_ast());",
    "            group.ast = Box::new(alt.into_ast());",
    "        }",
    "        None => {",
    "            group.ast = Box::new(group_concat.into_ast());",
    "        }",
    "    }",
    "    prior_concat.asts.push(Ast::group(group));",
    "    Ok(prior_concat)",
    "}"
  ],
  "size": {
    "chain": 8,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "stack\n            .pop() matches Some(Alternation(alt)) or Some(Group { concat, group, ignore_whitespace })",
          "norm": null,
          "value": "true",
          "line": 749,
          "bound": null
        },
        {
          "cond": "stack\n            .pop() matches Some(Alternation(alt)) or Some(Group { concat, group, ignore_whitespace })",
          "norm": null,
          "value": "true",
          "line": 749,
          "bound": null
        },
        {
          "cond": "stack\n            .pop() matches Some(Alternation(alt))",
          "norm": null,
          "value": "true",
          "line": 749,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(Alternation(_)) or Some(Group { concat, group, ignore_whitespace })",
          "norm": null,
          "value": "true",
          "line": 755,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(Alternation(_)) or Some(Group { concat, group, ignore_whitespace })",
          "norm": null,
          "value": "true",
          "line": 755,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                        self.span_char(),\n                        ast::ErrorKind::GroupUnopened,\n                    ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        9,
        11,
        19,
        20,
        21,
        23,
        25,
        33,
        34,
        35,
        74,
        75,
        76,
        77,
        78,
        79
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "stack\n            .pop() matches Some(Alternation(alt)) or Some(Group { concat, group, ignore_whitespace })",
          "norm": null,
          "value": "true",
          "line": 749,
          "bound": null
        },
        {
          "cond": "stack\n            .pop() matches Some(Alternation(alt)) or Some(Group { concat, group, ignore_whitespace })",
          "norm": null,
          "value": "true",
          "line": 749,
          "bound": null
        },
        {
          "cond": "stack\n            .pop() matches Some(Alternation(alt))",
          "norm": null,
          "value": "true",
          "line": 749,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(Alternation(_)) or Some(Group { concat, group, ignore_whitespace })",
          "norm": null,
          "value": "true",
          "line": 755,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 755,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(Group { concat, group, ignore_whitespace })",
          "norm": null,
          "value": "true",
          "line": 755,
          "bound": null
        },
        {
          "cond": "alt matches Some(mut alt)",
          "norm": null,
          "value": "true",
          "line": 775,
          "bound": null
        },
        {
          "cond": "alt matches Some(mut alt)",
          "norm": null,
          "value": "true",
          "line": 775,
          "bound": null
        }
      ],
      "ret": "Ok(prior_concat)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        9,
        11,
        19,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        36,
        37,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        50,
        52,
        53,
        54,
        55,
        56,
        57,
        59,
        60,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        79
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "stack\n            .pop() matches Some(Alternation(alt)) or Some(Group { concat, group, ignore_whitespace })",
          "norm": null,
          "value": "true",
          "line": 749,
          "bound": null
        },
        {
          "cond": "stack\n            .pop() matches Some(Alternation(alt)) or Some(Group { concat, group, ignore_whitespace })",
          "norm": null,
          "value": "true",
          "line": 749,
          "bound": null
        },
        {
          "cond": "stack\n            .pop() matches Some(Alternation(alt))",
          "norm": null,
          "value": "true",
          "line": 749,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(Alternation(_)) or Some(Group { concat, group, ignore_whitespace })",
          "norm": null,
          "value": "true",
          "line": 755,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 755,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(Group { concat, group, ignore_whitespace })",
          "norm": null,
          "value": "true",
          "line": 755,
          "bound": null
        },
        {
          "cond": "alt matches None",
          "norm": null,
          "value": "true",
          "line": 775,
          "bound": null
        }
      ],
      "ret": "Ok(prior_concat)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        9,
        11,
        19,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        36,
        37,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        79
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "stack\n            .pop() matches Some(Alternation(alt)) or Some(Group { concat, group, ignore_whitespace })",
          "norm": null,
          "value": "true",
          "line": 749,
          "bound": null
        },
        {
          "cond": "stack\n            .pop() matches Some(Alternation(alt)) or Some(Group { concat, group, ignore_whitespace })",
          "norm": null,
          "value": "true",
          "line": 749,
          "bound": null
        },
        {
          "cond": "stack\n            .pop() matches Some(Alternation(alt))",
          "norm": null,
          "value": "true",
          "line": 749,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 755,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                        self.span_char(),\n                        ast::ErrorKind::GroupUnopened,\n                    ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        9,
        11,
        19,
        20,
        21,
        25,
        33,
        34,
        35,
        74,
        75,
        76,
        77,
        78,
        79
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "stack\n            .pop() matches Some(Alternation(alt)) or Some(Group { concat, group, ignore_whitespace })",
          "norm": null,
          "value": "true",
          "line": 749,
          "bound": null
        },
        {
          "cond": "stack\n            .pop() matches None",
          "norm": null,
          "value": "true",
          "line": 749,
          "bound": null
        },
        {
          "cond": "stack\n            .pop() matches Some(Group { concat, group, ignore_whitespace })",
          "norm": null,
          "value": "true",
          "line": 749,
          "bound": null
        },
        {
          "cond": "alt matches Some(mut alt)",
          "norm": null,
          "value": "true",
          "line": 775,
          "bound": null
        },
        {
          "cond": "alt matches Some(mut alt)",
          "norm": null,
          "value": "true",
          "line": 775,
          "bound": null
        }
      ],
      "ret": "Ok(prior_concat)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        9,
        10,
        13,
        14,
        15,
        16,
        17,
        18,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        50,
        52,
        53,
        54,
        55,
        56,
        57,
        59,
        60,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        79
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "stack\n            .pop() matches Some(Alternation(alt)) or Some(Group { concat, group, ignore_whitespace })",
          "norm": null,
          "value": "true",
          "line": 749,
          "bound": null
        },
        {
          "cond": "stack\n            .pop() matches None",
          "norm": null,
          "value": "true",
          "line": 749,
          "bound": null
        },
        {
          "cond": "stack\n            .pop() matches Some(Group { concat, group, ignore_whitespace })",
          "norm": null,
          "value": "true",
          "line": 749,
          "bound": null
        },
        {
          "cond": "alt matches None",
          "norm": null,
          "value": "true",
          "line": 775,
          "bound": null
        }
      ],
      "ret": "Ok(prior_concat)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        9,
        10,
        13,
        14,
        15,
        16,
        17,
        18,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        51,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        79
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "stack\n            .pop() matches None",
          "norm": null,
          "value": "true",
          "line": 749,
          "bound": null
        }
      ],
      "ret": "Err(self\n                    .error(self.span_char(), ast::ErrorKind::GroupUnopened))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        12,
        38,
        39,
        40,
        76,
        77,
        78,
        79
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        106,
        107
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}