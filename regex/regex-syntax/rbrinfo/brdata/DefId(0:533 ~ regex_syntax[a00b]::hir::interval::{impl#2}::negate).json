{
  "name": "regex_syntax::hir::interval::{impl#2}::negate",
  "mod_info": {
    "name": "hir::interval",
    "loc": "regex-syntax/src/hir/mod.rs:41:1:41:14"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/interval.rs:296:5:340:6",
  "doc": "/// Negate this interval set.\n///\n/// For all `x` where `x` is any element, if `x` was in this set, then it\n/// will not be in this set after negation.\n",
  "code": [
    "pub fn negate(&mut self) {",
    "    if self.ranges.is_empty() {",
    "        let (min, max) = (I::Bound::min_value(), I::Bound::max_value());",
    "        self.ranges.push(I::create(min, max));",
    "        // The set containing everything must case folded.",
    "        self.folded = true;",
    "        return;",
    "    }",
    "",
    "    // There should be a way to do this in-place with constant memory,",
    "    // but I couldn't figure out a simple way to do it. So just append",
    "    // the negation to the end of this range, and then drain it before",
    "    // we're done.",
    "    let drain_end = self.ranges.len();",
    "",
    "    // We do checked arithmetic below because of the canonical ordering",
    "    // invariant.",
    "    if self.ranges[0].lower() > I::Bound::min_value() {",
    "        let upper = self.ranges[0].lower().decrement();",
    "        self.ranges.push(I::create(I::Bound::min_value(), upper));",
    "    }",
    "    for i in 1..drain_end {",
    "        let lower = self.ranges[i - 1].upper().increment();",
    "        let upper = self.ranges[i].lower().decrement();",
    "        self.ranges.push(I::create(lower, upper));",
    "    }",
    "    if self.ranges[drain_end - 1].upper() < I::Bound::max_value() {",
    "        let lower = self.ranges[drain_end - 1].upper().increment();",
    "        self.ranges.push(I::create(lower, I::Bound::max_value()));",
    "    }",
    "    self.ranges.drain(..drain_end);",
    "    // We don't need to update whether this set is folded or not, because",
    "    // it is conservatively preserved through negation. Namely, if a set",
    "    // is not folded, then it is possible that its negation is folded, for",
    "    // example, [^â˜ƒ]. But we're fine with assuming that the set is not",
    "    // folded in that case. (`folded` permits false negatives but not false",
    "    // positives.)",
    "    //",
    "    // But what about when a set is folded, is its negation also",
    "    // necessarily folded? Yes. Because if a set is folded, then for every",
    "    // character in the set, it necessarily included its equivalence class",
    "    // of case folded characters. Negating it in turn means that all",
    "    // equivalence classes in the set are negated, and any equivalence",
    "    // class that was previously not in the set is now entirely in the set.",
    "}"
  ],
  "size": {
    "chain": 9,
    "contra": 4,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "true",
          "line": 297,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        56
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 297,
          "bound": null
        },
        {
          "cond": "self.ranges[0].lower() > I::Bound::min_value()",
          "norm": "I::Bound::min_value() < self.ranges[0].lower()",
          "value": "true",
          "line": 313,
          "bound": null
        },
        {
          "cond": "i in 1..drain_end",
          "norm": null,
          "value": "true",
          "line": 317,
          "bound": null
        },
        {
          "cond": "i in 1..drain_end",
          "norm": null,
          "value": "false",
          "line": 317,
          "bound": null
        },
        {
          "cond": "self.ranges[drain_end - 1].upper() < I::Bound::max_value()",
          "norm": "I::Bound::max_value() > self.ranges[drain_end - 1].upper()",
          "value": "true",
          "line": 322,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        23,
        24,
        25,
        27,
        29,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        53,
        54,
        55,
        56
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 297,
          "bound": null
        },
        {
          "cond": "self.ranges[0].lower() > I::Bound::min_value()",
          "norm": "I::Bound::min_value() < self.ranges[0].lower()",
          "value": "true",
          "line": 313,
          "bound": null
        },
        {
          "cond": "i in 1..drain_end",
          "norm": null,
          "value": "true",
          "line": 317,
          "bound": null
        },
        {
          "cond": "i in 1..drain_end",
          "norm": null,
          "value": "false",
          "line": 317,
          "bound": null
        },
        {
          "cond": "self.ranges[drain_end - 1].upper() < I::Bound::max_value()",
          "norm": "I::Bound::max_value() > self.ranges[drain_end - 1].upper()",
          "value": "false",
          "line": 322,
          "bound": "self.ranges[drain_end - 1].upper() == I::Bound::max_value()"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        23,
        24,
        25,
        27,
        29,
        39,
        40,
        41,
        42,
        43,
        52,
        53,
        54,
        55,
        56
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 297,
          "bound": null
        },
        {
          "cond": "self.ranges[0].lower() > I::Bound::min_value()",
          "norm": "I::Bound::min_value() < self.ranges[0].lower()",
          "value": "true",
          "line": 313,
          "bound": null
        },
        {
          "cond": "i in 1..drain_end",
          "norm": null,
          "value": "false",
          "line": 317,
          "bound": null
        },
        {
          "cond": "self.ranges[drain_end - 1].upper() < I::Bound::max_value()",
          "norm": "I::Bound::max_value() > self.ranges[drain_end - 1].upper()",
          "value": "true",
          "line": 322,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        22,
        23,
        24,
        25,
        27,
        29,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        53,
        54,
        55,
        56
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 297,
          "bound": null
        },
        {
          "cond": "self.ranges[0].lower() > I::Bound::min_value()",
          "norm": "I::Bound::min_value() < self.ranges[0].lower()",
          "value": "true",
          "line": 313,
          "bound": null
        },
        {
          "cond": "i in 1..drain_end",
          "norm": null,
          "value": "false",
          "line": 317,
          "bound": null
        },
        {
          "cond": "self.ranges[drain_end - 1].upper() < I::Bound::max_value()",
          "norm": "I::Bound::max_value() > self.ranges[drain_end - 1].upper()",
          "value": "false",
          "line": 322,
          "bound": "self.ranges[drain_end - 1].upper() == I::Bound::max_value()"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        22,
        23,
        24,
        25,
        27,
        29,
        39,
        40,
        41,
        42,
        43,
        52,
        53,
        54,
        55,
        56
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 297,
          "bound": null
        },
        {
          "cond": "self.ranges[0].lower() > I::Bound::min_value()",
          "norm": "I::Bound::min_value() < self.ranges[0].lower()",
          "value": "false",
          "line": 313,
          "bound": "self.ranges[0].lower() == I::Bound::min_value()"
        },
        {
          "cond": "i in 1..drain_end",
          "norm": null,
          "value": "true",
          "line": 317,
          "bound": null
        },
        {
          "cond": "i in 1..drain_end",
          "norm": null,
          "value": "false",
          "line": 317,
          "bound": null
        },
        {
          "cond": "self.ranges[drain_end - 1].upper() < I::Bound::max_value()",
          "norm": "I::Bound::max_value() > self.ranges[drain_end - 1].upper()",
          "value": "true",
          "line": 322,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        7,
        8,
        9,
        10,
        11,
        12,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        23,
        24,
        25,
        27,
        29,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        53,
        54,
        55,
        56
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 297,
          "bound": null
        },
        {
          "cond": "self.ranges[0].lower() > I::Bound::min_value()",
          "norm": "I::Bound::min_value() < self.ranges[0].lower()",
          "value": "false",
          "line": 313,
          "bound": "self.ranges[0].lower() == I::Bound::min_value()"
        },
        {
          "cond": "i in 1..drain_end",
          "norm": null,
          "value": "true",
          "line": 317,
          "bound": null
        },
        {
          "cond": "i in 1..drain_end",
          "norm": null,
          "value": "false",
          "line": 317,
          "bound": null
        },
        {
          "cond": "self.ranges[drain_end - 1].upper() < I::Bound::max_value()",
          "norm": "I::Bound::max_value() > self.ranges[drain_end - 1].upper()",
          "value": "false",
          "line": 322,
          "bound": "self.ranges[drain_end - 1].upper() == I::Bound::max_value()"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        7,
        8,
        9,
        10,
        11,
        12,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        23,
        24,
        25,
        27,
        29,
        39,
        40,
        41,
        42,
        43,
        52,
        53,
        54,
        55,
        56
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 297,
          "bound": null
        },
        {
          "cond": "self.ranges[0].lower() > I::Bound::min_value()",
          "norm": "I::Bound::min_value() < self.ranges[0].lower()",
          "value": "false",
          "line": 313,
          "bound": "self.ranges[0].lower() == I::Bound::min_value()"
        },
        {
          "cond": "i in 1..drain_end",
          "norm": null,
          "value": "false",
          "line": 317,
          "bound": null
        },
        {
          "cond": "self.ranges[drain_end - 1].upper() < I::Bound::max_value()",
          "norm": "I::Bound::max_value() > self.ranges[drain_end - 1].upper()",
          "value": "true",
          "line": 322,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        7,
        8,
        9,
        10,
        11,
        12,
        20,
        21,
        22,
        23,
        24,
        25,
        27,
        29,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        53,
        54,
        55,
        56
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 297,
          "bound": null
        },
        {
          "cond": "self.ranges[0].lower() > I::Bound::min_value()",
          "norm": "I::Bound::min_value() < self.ranges[0].lower()",
          "value": "false",
          "line": 313,
          "bound": "self.ranges[0].lower() == I::Bound::min_value()"
        },
        {
          "cond": "i in 1..drain_end",
          "norm": null,
          "value": "false",
          "line": 317,
          "bound": null
        },
        {
          "cond": "self.ranges[drain_end - 1].upper() < I::Bound::max_value()",
          "norm": "I::Bound::max_value() > self.ranges[drain_end - 1].upper()",
          "value": "false",
          "line": 322,
          "bound": "self.ranges[drain_end - 1].upper() == I::Bound::max_value()"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        7,
        8,
        9,
        10,
        11,
        12,
        20,
        21,
        22,
        23,
        24,
        25,
        27,
        29,
        39,
        40,
        41,
        42,
        43,
        52,
        53,
        54,
        55,
        56
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}