{
  "name": "regex_syntax::hir::literal::{impl#0}::cross",
  "mod_info": {
    "name": "hir::literal",
    "loc": "regex-syntax/src/hir/mod.rs:42:1:42:17"
  },
  "visible": false,
  "loc": "regex-syntax/src/hir/literal.rs:559:5:572:6",
  "doc": "/// Compute the cross product of the two sequences if the result would be\n/// within configured limits. Otherwise, make `seq2` infinite and cross the\n/// infinite sequence with `seq1`.\n",
  "code": [
    "fn cross(&self, mut seq1: Seq, seq2: &mut Seq) -> Seq {",
    "    if seq1.max_cross_len(seq2).map_or(false, |len| len > self.limit_total)",
    "    {",
    "        seq2.make_infinite();",
    "    }",
    "    if let ExtractKind::Suffix = self.kind {",
    "        seq1.cross_reverse(seq2);",
    "    } else {",
    "        seq1.cross_forward(seq2);",
    "    }",
    "    assert!(seq1.len().map_or(true, |x| x <= self.limit_total));",
    "    self.enforce_literal_len(&mut seq1);",
    "    seq1",
    "}"
  ],
  "size": {
    "chain": 8,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "seq1.max_cross_len(seq2).map_or(false, |len| len > self.limit_total)",
          "norm": null,
          "value": "true",
          "line": 560,
          "bound": null
        },
        {
          "cond": "let ExtractKind::Suffix = self.kind",
          "norm": null,
          "value": "true",
          "line": 564,
          "bound": null
        },
        {
          "cond": "seq1.len().map_or(true, |x| x <= self.limit_total)",
          "norm": null,
          "value": "true",
          "line": 569,
          "bound": null
        }
      ],
      "ret": "seq1",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        10,
        11,
        12,
        13,
        14,
        15,
        17,
        18
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "seq1.max_cross_len(seq2).map_or(false, |len| len > self.limit_total)",
          "norm": null,
          "value": "true",
          "line": 560,
          "bound": null
        },
        {
          "cond": "let ExtractKind::Suffix = self.kind",
          "norm": null,
          "value": "true",
          "line": 564,
          "bound": null
        },
        {
          "cond": "seq1.len().map_or(true, |x| x <= self.limit_total)",
          "norm": null,
          "value": "false",
          "line": 569,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        10,
        11,
        12,
        13,
        14,
        16,
        19,
        20
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "seq1.max_cross_len(seq2).map_or(false, |len| len > self.limit_total)",
          "norm": null,
          "value": "true",
          "line": 560,
          "bound": null
        },
        {
          "cond": "let ExtractKind::Suffix = self.kind",
          "norm": null,
          "value": "true",
          "line": 564,
          "bound": null
        },
        {
          "cond": "seq1.len().map_or(true, |x| x <= self.limit_total)",
          "norm": null,
          "value": "true",
          "line": 569,
          "bound": null
        }
      ],
      "ret": "seq1",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        17,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "seq1.max_cross_len(seq2).map_or(false, |len| len > self.limit_total)",
          "norm": null,
          "value": "true",
          "line": 560,
          "bound": null
        },
        {
          "cond": "let ExtractKind::Suffix = self.kind",
          "norm": null,
          "value": "true",
          "line": 564,
          "bound": null
        },
        {
          "cond": "seq1.len().map_or(true, |x| x <= self.limit_total)",
          "norm": null,
          "value": "false",
          "line": 569,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        12,
        13,
        14,
        16,
        19,
        20
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "seq1.max_cross_len(seq2).map_or(false, |len| len > self.limit_total)",
          "norm": null,
          "value": "false",
          "line": 560,
          "bound": null
        },
        {
          "cond": "let ExtractKind::Suffix = self.kind",
          "norm": null,
          "value": "true",
          "line": 564,
          "bound": null
        },
        {
          "cond": "seq1.len().map_or(true, |x| x <= self.limit_total)",
          "norm": null,
          "value": "true",
          "line": 569,
          "bound": null
        }
      ],
      "ret": "seq1",
      "path": [
        0,
        1,
        2,
        5,
        6,
        10,
        11,
        12,
        13,
        14,
        15,
        17,
        18
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "seq1.max_cross_len(seq2).map_or(false, |len| len > self.limit_total)",
          "norm": null,
          "value": "false",
          "line": 560,
          "bound": null
        },
        {
          "cond": "let ExtractKind::Suffix = self.kind",
          "norm": null,
          "value": "true",
          "line": 564,
          "bound": null
        },
        {
          "cond": "seq1.len().map_or(true, |x| x <= self.limit_total)",
          "norm": null,
          "value": "false",
          "line": 569,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        10,
        11,
        12,
        13,
        14,
        16,
        19,
        20
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "seq1.max_cross_len(seq2).map_or(false, |len| len > self.limit_total)",
          "norm": null,
          "value": "false",
          "line": 560,
          "bound": null
        },
        {
          "cond": "let ExtractKind::Suffix = self.kind",
          "norm": null,
          "value": "true",
          "line": 564,
          "bound": null
        },
        {
          "cond": "seq1.len().map_or(true, |x| x <= self.limit_total)",
          "norm": null,
          "value": "true",
          "line": 569,
          "bound": null
        }
      ],
      "ret": "seq1",
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        17,
        18
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "seq1.max_cross_len(seq2).map_or(false, |len| len > self.limit_total)",
          "norm": null,
          "value": "false",
          "line": 560,
          "bound": null
        },
        {
          "cond": "let ExtractKind::Suffix = self.kind",
          "norm": null,
          "value": "true",
          "line": 564,
          "bound": null
        },
        {
          "cond": "seq1.len().map_or(true, |x| x <= self.limit_total)",
          "norm": null,
          "value": "false",
          "line": 569,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        12,
        13,
        14,
        16,
        19,
        20
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}