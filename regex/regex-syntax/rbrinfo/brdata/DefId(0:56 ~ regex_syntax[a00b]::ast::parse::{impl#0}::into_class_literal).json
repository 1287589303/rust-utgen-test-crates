{
  "name": "regex_syntax::ast::parse::{impl#0}::into_class_literal",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:89:5:99:6",
  "doc": "/// Convert this primitive into a literal in a character class. In\n/// particular, literals are the only valid items that can appear in\n/// ranges.\n///\n/// If this primitive is not a legal item (i.e., a class, assertion or a\n/// dot), then return an error.\n",
  "code": [
    "fn into_class_literal<P: Borrow<Parser>>(",
    "    self,",
    "    p: &ParserI<'_, P>,",
    ") -> Result<ast::Literal> {",
    "    use self::Primitive::*;",
    "",
    "    match self {",
    "        Literal(lit) => Ok(lit),",
    "        x => Err(p.error(*x.span(), ast::ErrorKind::ClassRangeLiteral)),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self matches Literal(lit)",
          "norm": null,
          "value": "false",
          "line": 96,
          "bound": null
        }
      ],
      "ret": "Err(p.error(*x.span(), ast::ErrorKind::ClassRangeLiteral))",
      "path": [
        0,
        1,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self matches Literal(lit)",
          "norm": null,
          "value": "true",
          "line": 95,
          "bound": null
        },
        {
          "cond": "self matches Literal(lit)",
          "norm": null,
          "value": "true",
          "line": 95,
          "bound": null
        }
      ],
      "ret": "Ok(lit)",
      "path": [
        0,
        2,
        3,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}