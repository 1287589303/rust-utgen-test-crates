{
  "name": "regex_syntax::ast::parse::{impl#4}::unclosed_class_error",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:917:5:926:6",
  "doc": "/// Return an \"unclosed class\" error whose span points to the most\n/// recently opened class.\n///\n/// This should only be called while parsing a character class.\n",
  "code": [
    "fn unclosed_class_error(&self) -> ast::Error {",
    "    for state in self.parser().stack_class.borrow().iter().rev() {",
    "        if let ClassState::Open { ref set, .. } = *state {",
    "            return self.error(set.span, ast::ErrorKind::ClassUnclosed);",
    "        }",
    "    }",
    "    // We are guaranteed to have a non-empty stack with at least",
    "    // one open bracket, so we should never get here.",
    "    panic!(\"no open character class found\")",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 1,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "state in self.parser().stack_class.borrow().iter().rev()",
          "norm": null,
          "value": "true",
          "line": 918,
          "bound": null
        },
        {
          "cond": "let ClassState::Open { ref set, .. } = *state",
          "norm": null,
          "value": "true",
          "line": 919,
          "bound": null
        },
        {
          "cond": "state in self.parser().stack_class.borrow().iter().rev()",
          "norm": null,
          "value": "false",
          "line": 918,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        18,
        8,
        9,
        10,
        12,
        14,
        19,
        20,
        23
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "state in self.parser().stack_class.borrow().iter().rev()",
          "norm": null,
          "value": "true",
          "line": 918,
          "bound": null
        },
        {
          "cond": "let ClassState::Open { ref set, .. } = *state",
          "norm": null,
          "value": "false",
          "line": 919,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        15,
        16,
        17,
        21
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "state in self.parser().stack_class.borrow().iter().rev()",
          "norm": null,
          "value": "false",
          "line": 918,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        14,
        19,
        20,
        23
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}