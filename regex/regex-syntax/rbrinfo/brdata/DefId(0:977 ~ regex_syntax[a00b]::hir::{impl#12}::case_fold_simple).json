{
  "name": "regex_syntax::hir::{impl#12}::case_fold_simple",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:1106:5:1110:6",
  "doc": "/// Expand this character class such that it contains all case folded\n/// characters, according to Unicode's \"simple\" mapping. For example, if\n/// this class consists of the range `a-z`, then applying case folding will\n/// result in the class containing both the ranges `a-z` and `A-Z`.\n///\n/// # Panics\n///\n/// This routine panics when the case mapping data necessary for this\n/// routine to complete is unavailable. This occurs when the `unicode-case`\n/// feature is not enabled.\n///\n/// Callers should prefer using `try_case_fold_simple` instead, which will\n/// return an error instead of panicking.\n",
  "code": [
    "pub fn case_fold_simple(&mut self) {",
    "    self.set",
    "        .case_fold_simple()",
    "        .expect(\"unicode-case feature must be enabled\");",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}