{
  "name": "regex_syntax::ast::parse::{impl#4}::push_or_add_alternation",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:675:5:687:6",
  "doc": "/// Pushes or adds the given branch of an alternation to the parser's\n/// internal stack of state.\n",
  "code": [
    "fn push_or_add_alternation(&self, concat: ast::Concat) {",
    "    use self::GroupState::*;",
    "",
    "    let mut stack = self.parser().stack_group.borrow_mut();",
    "    if let Some(&mut Alternation(ref mut alts)) = stack.last_mut() {",
    "        alts.asts.push(concat.into_ast());",
    "        return;",
    "    }",
    "    stack.push(Alternation(ast::Alternation {",
    "        span: Span::new(concat.span.start, self.pos()),",
    "        asts: vec![concat.into_ast()],",
    "    }));",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(&mut Alternation(ref mut alts)) = stack.last_mut()",
          "norm": null,
          "value": "true",
          "line": 679,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        26
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(&mut Alternation(ref mut alts)) = stack.last_mut()",
          "norm": null,
          "value": "true",
          "line": 679,
          "bound": null
        },
        {
          "cond": "let Some(&mut Alternation(ref mut alts)) = stack.last_mut()",
          "norm": null,
          "value": "true",
          "line": 679,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        26
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some(&mut Alternation(ref mut alts)) = stack.last_mut()",
          "norm": null,
          "value": "true",
          "line": 679,
          "bound": null
        },
        {
          "cond": "let Some(&mut Alternation(ref mut alts)) = stack.last_mut()",
          "norm": null,
          "value": "true",
          "line": 679,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        25,
        26
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}