{
  "name": "regex_syntax::ast::parse::{impl#5}::parse_primitive",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:1437:5:1471:6",
  "doc": "/// Parse a primitive AST. e.g., A literal, non-set character class or\n/// assertion.\n///\n/// This assumes that the parser expects a primitive at the current\n/// location. i.e., All other non-primitive cases have been handled.\n/// For example, if the parser's position is at `|`, then `|` will be\n/// treated as a literal (e.g., inside a character class).\n///\n/// This advances the parser to the first character immediately following\n/// the primitive.\n",
  "code": [
    "fn parse_primitive(&self) -> Result<Primitive> {",
    "    match self.char() {",
    "        '\\\\' => self.parse_escape(),",
    "        '.' => {",
    "            let ast = Primitive::Dot(self.span_char());",
    "            self.bump();",
    "            Ok(ast)",
    "        }",
    "        '^' => {",
    "            let ast = Primitive::Assertion(ast::Assertion {",
    "                span: self.span_char(),",
    "                kind: ast::AssertionKind::StartLine,",
    "            });",
    "            self.bump();",
    "            Ok(ast)",
    "        }",
    "        '$' => {",
    "            let ast = Primitive::Assertion(ast::Assertion {",
    "                span: self.span_char(),",
    "                kind: ast::AssertionKind::EndLine,",
    "            });",
    "            self.bump();",
    "            Ok(ast)",
    "        }",
    "        c => {",
    "            let ast = Primitive::Literal(ast::Literal {",
    "                span: self.span_char(),",
    "                kind: ast::LiteralKind::Verbatim,",
    "                c,",
    "            });",
    "            self.bump();",
    "            Ok(ast)",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.char() matches '.'",
          "norm": null,
          "value": "true",
          "line": 1440,
          "bound": null
        },
        {
          "cond": "self.char() matches '$'",
          "norm": null,
          "value": "true",
          "line": 1453,
          "bound": null
        },
        {
          "cond": "self.char() matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 1439,
          "bound": null
        },
        {
          "cond": "self.char() matches '^'",
          "norm": null,
          "value": "true",
          "line": 1445,
          "bound": null
        },
        {
          "cond": "self.char() matches c",
          "norm": null,
          "value": "true",
          "line": 1461,
          "bound": null
        }
      ],
      "ret": "Ok(ast)",
      "path": [
        0,
        1,
        2,
        24,
        25,
        26,
        27,
        28
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.char() matches '$'",
          "norm": null,
          "value": "true",
          "line": 1453,
          "bound": null
        },
        {
          "cond": "self.char() matches '$'",
          "norm": null,
          "value": "true",
          "line": 1438,
          "bound": null
        }
      ],
      "ret": "Ok(ast)",
      "path": [
        0,
        1,
        6,
        19,
        20,
        21,
        22,
        23,
        28
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.char() matches '^'",
          "norm": null,
          "value": "true",
          "line": 1445,
          "bound": null
        },
        {
          "cond": "self.char() matches '^'",
          "norm": null,
          "value": "true",
          "line": 1438,
          "bound": null
        }
      ],
      "ret": "Ok(ast)",
      "path": [
        0,
        1,
        5,
        14,
        15,
        16,
        17,
        18,
        28
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.char() matches '.'",
          "norm": null,
          "value": "true",
          "line": 1440,
          "bound": null
        },
        {
          "cond": "self.char() matches '.'",
          "norm": null,
          "value": "true",
          "line": 1438,
          "bound": null
        }
      ],
      "ret": "Ok(ast)",
      "path": [
        0,
        1,
        4,
        9,
        10,
        11,
        12,
        13,
        28
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.char() matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 1439,
          "bound": null
        },
        {
          "cond": "self.char() matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 1438,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        7,
        8,
        28
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}