{
  "name": "regex_syntax::hir::{impl#19}::case_fold_simple",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:1549:5:1564:6",
  "doc": "/// Apply simple case folding to this byte range. Only ASCII case mappings\n/// (for a-z) are applied.\n///\n/// Additional ranges are appended to the given vector. Canonical ordering\n/// is *not* maintained in the given vector.\n",
  "code": [
    "fn case_fold_simple(",
    "    &self,",
    "    ranges: &mut Vec<ClassBytesRange>,",
    ") -> Result<(), unicode::CaseFoldError> {",
    "    if !ClassBytesRange::new(b'a', b'z').is_intersection_empty(self) {",
    "        let lower = cmp::max(self.start, b'a');",
    "        let upper = cmp::min(self.end, b'z');",
    "        ranges.push(ClassBytesRange::new(lower - 32, upper - 32));",
    "    }",
    "    if !ClassBytesRange::new(b'A', b'Z').is_intersection_empty(self) {",
    "        let lower = cmp::max(self.start, b'A');",
    "        let upper = cmp::min(self.end, b'Z');",
    "        ranges.push(ClassBytesRange::new(lower + 32, upper + 32));",
    "    }",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "ClassBytesRange::new(b'a', b'z').is_intersection_empty(self)",
          "norm": null,
          "value": "true",
          "line": 1553,
          "bound": null
        },
        {
          "cond": "ClassBytesRange::new(b'A', b'Z').is_intersection_empty(self)",
          "norm": null,
          "value": "true",
          "line": 1558,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        11,
        12,
        13,
        14,
        22
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "ClassBytesRange::new(b'a', b'z').is_intersection_empty(self)",
          "norm": null,
          "value": "true",
          "line": 1553,
          "bound": null
        },
        {
          "cond": "ClassBytesRange::new(b'A', b'Z').is_intersection_empty(self)",
          "norm": null,
          "value": "false",
          "line": 1558,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        11,
        12,
        13,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "ClassBytesRange::new(b'a', b'z').is_intersection_empty(self)",
          "norm": null,
          "value": "false",
          "line": 1553,
          "bound": null
        },
        {
          "cond": "ClassBytesRange::new(b'A', b'Z').is_intersection_empty(self)",
          "norm": null,
          "value": "true",
          "line": 1558,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        22
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "ClassBytesRange::new(b'a', b'z').is_intersection_empty(self)",
          "norm": null,
          "value": "false",
          "line": 1553,
          "bound": null
        },
        {
          "cond": "ClassBytesRange::new(b'A', b'Z').is_intersection_empty(self)",
          "norm": null,
          "value": "false",
          "line": 1558,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}