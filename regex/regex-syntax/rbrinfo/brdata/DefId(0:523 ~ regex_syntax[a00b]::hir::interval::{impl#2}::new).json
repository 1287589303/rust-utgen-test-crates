{
  "name": "regex_syntax::hir::interval::{impl#2}::new",
  "mod_info": {
    "name": "hir::interval",
    "loc": "regex-syntax/src/hir/mod.rs:41:1:41:14"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/interval.rs:73:5:80:6",
  "doc": "/// Create a new set from a sequence of intervals. Each interval is\n/// specified as a pair of bounds, where both bounds are inclusive.\n///\n/// The given ranges do not need to be in any specific order, and ranges\n/// may overlap.\n",
  "code": [
    "pub fn new<T: IntoIterator<Item = I>>(intervals: T) -> IntervalSet<I> {",
    "    let ranges: Vec<I> = intervals.into_iter().collect();",
    "    // An empty set is case folded.",
    "    let folded = ranges.is_empty();",
    "    let mut set = IntervalSet { ranges, folded };",
    "    set.canonicalize();",
    "    set",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "set",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}