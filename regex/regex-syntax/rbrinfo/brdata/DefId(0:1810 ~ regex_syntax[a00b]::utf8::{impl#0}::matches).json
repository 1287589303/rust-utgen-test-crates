{
  "name": "regex_syntax::utf8::{impl#0}::matches",
  "mod_info": {
    "name": "utf8",
    "loc": "regex-syntax/src/lib.rs:195:1:195:14"
  },
  "visible": true,
  "loc": "regex-syntax/src/utf8.rs:180:5:190:6",
  "doc": "/// Returns true if and only if a prefix of `bytes` matches this sequence\n/// of byte ranges.\n",
  "code": [
    "pub fn matches(&self, bytes: &[u8]) -> bool {",
    "    if bytes.len() < self.len() {",
    "        return false;",
    "    }",
    "    for (&b, r) in bytes.iter().zip(self) {",
    "        if !r.matches(b) {",
    "            return false;",
    "        }",
    "    }",
    "    true",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 1,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "bytes.len() < self.len()",
          "norm": null,
          "value": "true",
          "line": 181,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        2,
        3,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "bytes.len() < self.len()",
          "norm": null,
          "value": "false",
          "line": 181,
          "bound": "bytes.len() == self.len()"
        },
        {
          "cond": "(&b, r) in bytes.iter().zip(self)",
          "norm": null,
          "value": "true",
          "line": 184,
          "bound": null
        },
        {
          "cond": "r.matches(b)",
          "norm": null,
          "value": "true",
          "line": 185,
          "bound": null
        },
        {
          "cond": "(&b, r) in bytes.iter().zip(self)",
          "norm": null,
          "value": "false",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "true",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        15,
        16,
        8,
        9,
        10,
        12,
        14,
        18
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "bytes.len() < self.len()",
          "norm": null,
          "value": "false",
          "line": 181,
          "bound": "bytes.len() == self.len()"
        },
        {
          "cond": "(&b, r) in bytes.iter().zip(self)",
          "norm": null,
          "value": "true",
          "line": 184,
          "bound": null
        },
        {
          "cond": "r.matches(b)",
          "norm": null,
          "value": "false",
          "line": 185,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        15,
        17,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "bytes.len() < self.len()",
          "norm": null,
          "value": "false",
          "line": 181,
          "bound": "bytes.len() == self.len()"
        },
        {
          "cond": "(&b, r) in bytes.iter().zip(self)",
          "norm": null,
          "value": "false",
          "line": 184,
          "bound": null
        }
      ],
      "ret": "true",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        14,
        18
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}