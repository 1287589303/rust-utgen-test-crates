{
  "name": "regex_syntax::hir::{impl#5}::class",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:359:5:367:6",
  "doc": "/// Creates a class HIR expression. The class may either be defined over\n/// ranges of Unicode codepoints or ranges of raw byte values.\n///\n/// Note that an empty class is permitted. An empty class is equivalent to\n/// `Hir::fail()`.\n",
  "code": [
    "pub fn class(class: Class) -> Hir {",
    "    if class.is_empty() {",
    "        return Hir::fail();",
    "    } else if let Some(bytes) = class.literal() {",
    "        return Hir::literal(bytes);",
    "    }",
    "    let props = Properties::class(&class);",
    "    Hir { kind: HirKind::Class(class), props }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "class.is_empty()",
          "norm": null,
          "value": "true",
          "line": 360,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        17,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "class.is_empty()",
          "norm": null,
          "value": "false",
          "line": 360,
          "bound": null
        },
        {
          "cond": "let Some(bytes) = class.literal()",
          "norm": null,
          "value": "true",
          "line": 362,
          "bound": null
        }
      ],
      "ret": "Hir { kind: HirKind::Class(class), props }",
      "path": [
        0,
        1,
        3,
        4,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        18
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "class.is_empty()",
          "norm": null,
          "value": "false",
          "line": 360,
          "bound": null
        },
        {
          "cond": "let Some(bytes) = class.literal()",
          "norm": null,
          "value": "true",
          "line": 362,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        15,
        16,
        17,
        18
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}