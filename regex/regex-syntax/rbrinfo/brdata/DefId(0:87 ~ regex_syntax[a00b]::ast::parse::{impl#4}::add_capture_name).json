{
  "name": "regex_syntax::ast::parse::{impl#4}::add_capture_name",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:452:5:466:6",
  "doc": "/// Adds the given capture name to this parser. If this capture name has\n/// already been used, then an error is returned.\n",
  "code": [
    "fn add_capture_name(&self, cap: &ast::CaptureName) -> Result<()> {",
    "    let mut names = self.parser().capture_names.borrow_mut();",
    "    match names",
    "        .binary_search_by_key(&cap.name.as_str(), |c| c.name.as_str())",
    "    {",
    "        Err(i) => {",
    "            names.insert(i, cap.clone());",
    "            Ok(())",
    "        }",
    "        Ok(i) => Err(self.error(",
    "            cap.span,",
    "            ast::ErrorKind::GroupNameDuplicate { original: names[i].span },",
    "        )),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "names\n            .binary_search_by_key(&cap.name.as_str(), |c| c.name.as_str()) matches Err(i)",
          "norm": null,
          "value": "true",
          "line": 454,
          "bound": null
        },
        {
          "cond": "names\n            .binary_search_by_key(&cap.name.as_str(), |c| c.name.as_str()) matches Err(i)",
          "norm": null,
          "value": "true",
          "line": 454,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        10,
        11,
        12,
        13,
        18,
        19
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "names\n            .binary_search_by_key(&cap.name.as_str(), |c| c.name.as_str()) matches Ok(i)",
          "norm": null,
          "value": "true",
          "line": 454,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                cap.span,\n                ast::ErrorKind::GroupNameDuplicate { original: names[i].span },\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        14,
        15,
        16,
        17,
        18,
        19
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}