{
  "name": "regex_syntax::hir::{impl#10}::minimum_len",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:950:5:955:6",
  "doc": "/// Returns the length, in bytes, of the smallest string matched by this\n/// character class.\n///\n/// For non-empty byte oriented classes, this always returns `1`. For\n/// non-empty Unicode oriented classes, this can return `1`, `2`, `3` or\n/// `4`. For empty classes, `None` is returned. It is impossible for `0` to\n/// be returned.\n///\n/// # Example\n///\n/// This example shows some examples of regexes and their corresponding\n/// minimum length, if any.\n///\n/// ```\n/// use regex_syntax::{hir::Properties, parse};\n///\n/// // The empty string has a min length of 0.\n/// let hir = parse(r\"\")?;\n/// assert_eq!(Some(0), hir.properties().minimum_len());\n/// // As do other types of regexes that only match the empty string.\n/// let hir = parse(r\"^$\\b\\B\")?;\n/// assert_eq!(Some(0), hir.properties().minimum_len());\n/// // A regex that can match the empty string but match more is still 0.\n/// let hir = parse(r\"a*\")?;\n/// assert_eq!(Some(0), hir.properties().minimum_len());\n/// // A regex that matches nothing has no minimum defined.\n/// let hir = parse(r\"[a&&b]\")?;\n/// assert_eq!(None, hir.properties().minimum_len());\n/// // Character classes usually have a minimum length of 1.\n/// let hir = parse(r\"\\w\")?;\n/// assert_eq!(Some(1), hir.properties().minimum_len());\n/// // But sometimes Unicode classes might be bigger!\n/// let hir = parse(r\"\\p{Cyrillic}\")?;\n/// assert_eq!(Some(2), hir.properties().minimum_len());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn minimum_len(&self) -> Option<usize> {",
    "    match *self {",
    "        Class::Unicode(ref x) => x.minimum_len(),",
    "        Class::Bytes(ref x) => x.minimum_len(),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*self matches Class::Bytes(ref x)",
          "norm": null,
          "value": "true",
          "line": 951,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*self matches Class::Unicode(ref x)",
          "norm": null,
          "value": "true",
          "line": 951,
          "bound": null
        },
        {
          "cond": "*self matches Class::Unicode(ref x)",
          "norm": null,
          "value": "true",
          "line": 951,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        4,
        5,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}