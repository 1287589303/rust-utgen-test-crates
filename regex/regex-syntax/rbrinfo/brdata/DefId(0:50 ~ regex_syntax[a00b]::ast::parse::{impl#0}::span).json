{
  "name": "regex_syntax::ast::parse::{impl#0}::span",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:43:5:51:6",
  "doc": "/// Return the span of this primitive.\n",
  "code": [
    "fn span(&self) -> &Span {",
    "    match *self {",
    "        Primitive::Literal(ref x) => &x.span,",
    "        Primitive::Assertion(ref x) => &x.span,",
    "        Primitive::Dot(ref span) => span,",
    "        Primitive::Perl(ref x) => &x.span,",
    "        Primitive::Unicode(ref x) => &x.span,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*self matches Primitive::Unicode(ref x)",
          "norm": null,
          "value": "true",
          "line": 44,
          "bound": null
        }
      ],
      "ret": "match *self {\n            Primitive::Literal(ref x) => &x.span,\n            Primitive::Assertion(ref x) => &x.span,\n            Primitive::Dot(ref span) => span,\n            Primitive::Perl(ref x) => &x.span,\n            Primitive::Unicode(ref x) => &x.span,\n        }",
      "path": [
        0,
        6,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*self matches Primitive::Perl(ref x)",
          "norm": null,
          "value": "true",
          "line": 44,
          "bound": null
        },
        {
          "cond": "*self matches Primitive::Perl(ref x)",
          "norm": null,
          "value": "true",
          "line": 44,
          "bound": null
        }
      ],
      "ret": "match *self {\n            Primitive::Literal(ref x) => &x.span,\n            Primitive::Assertion(ref x) => &x.span,\n            Primitive::Dot(ref span) => span,\n            Primitive::Perl(ref x) => &x.span,\n            Primitive::Unicode(ref x) => &x.span,\n        }",
      "path": [
        0,
        5,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "*self matches Primitive::Dot(ref span)",
          "norm": null,
          "value": "true",
          "line": 44,
          "bound": null
        },
        {
          "cond": "*self matches Primitive::Dot(ref span)",
          "norm": null,
          "value": "true",
          "line": 44,
          "bound": null
        }
      ],
      "ret": "match *self {\n            Primitive::Literal(ref x) => &x.span,\n            Primitive::Assertion(ref x) => &x.span,\n            Primitive::Dot(ref span) => span,\n            Primitive::Perl(ref x) => &x.span,\n            Primitive::Unicode(ref x) => &x.span,\n        }",
      "path": [
        0,
        4,
        9,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "*self matches Primitive::Assertion(ref x)",
          "norm": null,
          "value": "true",
          "line": 44,
          "bound": null
        },
        {
          "cond": "*self matches Primitive::Assertion(ref x)",
          "norm": null,
          "value": "true",
          "line": 44,
          "bound": null
        }
      ],
      "ret": "match *self {\n            Primitive::Literal(ref x) => &x.span,\n            Primitive::Assertion(ref x) => &x.span,\n            Primitive::Dot(ref span) => span,\n            Primitive::Perl(ref x) => &x.span,\n            Primitive::Unicode(ref x) => &x.span,\n        }",
      "path": [
        0,
        3,
        8,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "*self matches Primitive::Literal(ref x)",
          "norm": null,
          "value": "true",
          "line": 44,
          "bound": null
        },
        {
          "cond": "*self matches Primitive::Literal(ref x)",
          "norm": null,
          "value": "true",
          "line": 44,
          "bound": null
        }
      ],
      "ret": "match *self {\n            Primitive::Literal(ref x) => &x.span,\n            Primitive::Assertion(ref x) => &x.span,\n            Primitive::Dot(ref span) => span,\n            Primitive::Perl(ref x) => &x.span,\n            Primitive::Unicode(ref x) => &x.span,\n        }",
      "path": [
        0,
        2,
        7,
        11
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}