{
  "name": "regex_syntax::ast::visitor::{impl#0}::induct_class",
  "mod_info": {
    "name": "ast::visitor",
    "loc": "regex-syntax/src/ast/mod.rs:13:1:13:13"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/visitor.rs:388:5:415:6",
  "doc": "/// Build a stack frame for the given class node if one is needed (which\n/// occurs if and only if there are child nodes). Otherwise, return None.\n",
  "code": [
    "fn induct_class(&self, ast: &ClassInduct<'a>) -> Option<ClassFrame<'a>> {",
    "    match *ast {",
    "        ClassInduct::Item(&ast::ClassSetItem::Bracketed(ref x)) => {",
    "            match x.kind {",
    "                ast::ClassSet::Item(ref item) => {",
    "                    Some(ClassFrame::Union { head: item, tail: &[] })",
    "                }",
    "                ast::ClassSet::BinaryOp(ref op) => {",
    "                    Some(ClassFrame::Binary { op })",
    "                }",
    "            }",
    "        }",
    "        ClassInduct::Item(&ast::ClassSetItem::Union(ref x)) => {",
    "            if x.items.is_empty() {",
    "                None",
    "            } else {",
    "                Some(ClassFrame::Union {",
    "                    head: &x.items[0],",
    "                    tail: &x.items[1..],",
    "                })",
    "            }",
    "        }",
    "        ClassInduct::BinaryOp(op) => {",
    "            Some(ClassFrame::BinaryLHS { op, lhs: &op.lhs, rhs: &op.rhs })",
    "        }",
    "        _ => None,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 7,
    "contra": 0,
    "min_set": 6
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*ast matches ClassInduct::Item(&ast::ClassSetItem::Bracketed(ref x))",
          "norm": null,
          "value": "false",
          "line": 390,
          "bound": null
        },
        {
          "cond": "*ast matches ClassInduct::Item(&ast::ClassSetItem::Union(ref x))",
          "norm": null,
          "value": "false",
          "line": 400,
          "bound": null
        },
        {
          "cond": "*ast matches ClassInduct::BinaryOp(op)",
          "norm": null,
          "value": "false",
          "line": 410,
          "bound": null
        },
        {
          "cond": "*ast matches _",
          "norm": null,
          "value": "true",
          "line": 413,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        20
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*ast matches ClassInduct::BinaryOp(op)",
          "norm": null,
          "value": "true",
          "line": 389,
          "bound": null
        },
        {
          "cond": "*ast matches ClassInduct::BinaryOp(op)",
          "norm": null,
          "value": "true",
          "line": 389,
          "bound": null
        }
      ],
      "ret": "Some(ClassFrame::BinaryLHS { op, lhs: &op.lhs, rhs: &op.rhs })",
      "path": [
        0,
        5,
        19,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "*ast matches ClassInduct::Item(&ast::ClassSetItem::Bracketed(ref x)) or ClassInduct::Item(&ast::ClassSetItem::Union(ref x))",
          "norm": null,
          "value": "true",
          "line": 389,
          "bound": null
        },
        {
          "cond": "*ast matches ClassInduct::Item(&ast::ClassSetItem::Bracketed(ref x))",
          "norm": null,
          "value": "false",
          "line": 390,
          "bound": null
        },
        {
          "cond": "*ast matches ClassInduct::Item(&ast::ClassSetItem::Union(ref x))",
          "norm": null,
          "value": "false",
          "line": 400,
          "bound": null
        },
        {
          "cond": "*ast matches ClassInduct::BinaryOp(op)",
          "norm": null,
          "value": "false",
          "line": 410,
          "bound": null
        },
        {
          "cond": "*ast matches _",
          "norm": null,
          "value": "true",
          "line": 413,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        2,
        1,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "*ast matches ClassInduct::Item(&ast::ClassSetItem::Bracketed(ref x)) or ClassInduct::Item(&ast::ClassSetItem::Union(ref x))",
          "norm": null,
          "value": "true",
          "line": 389,
          "bound": null
        },
        {
          "cond": "*ast matches ",
          "norm": null,
          "value": "true",
          "line": 389,
          "bound": null
        },
        {
          "cond": "*ast matches ClassInduct::Item(&ast::ClassSetItem::Union(ref x))",
          "norm": null,
          "value": "true",
          "line": 389,
          "bound": null
        },
        {
          "cond": "x.items.is_empty()",
          "norm": null,
          "value": "true",
          "line": 401,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        2,
        4,
        12,
        13,
        14,
        18,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "*ast matches ClassInduct::Item(&ast::ClassSetItem::Bracketed(ref x)) or ClassInduct::Item(&ast::ClassSetItem::Union(ref x))",
          "norm": null,
          "value": "true",
          "line": 389,
          "bound": null
        },
        {
          "cond": "*ast matches ",
          "norm": null,
          "value": "true",
          "line": 389,
          "bound": null
        },
        {
          "cond": "*ast matches ClassInduct::Item(&ast::ClassSetItem::Union(ref x))",
          "norm": null,
          "value": "true",
          "line": 389,
          "bound": null
        },
        {
          "cond": "x.items.is_empty()",
          "norm": null,
          "value": "false",
          "line": 401,
          "bound": null
        }
      ],
      "ret": "Some(ClassFrame::Union {\n                        head: &x.items[0],\n                        tail: &x.items[1..],\n                    })",
      "path": [
        0,
        2,
        4,
        12,
        13,
        15,
        16,
        17,
        18,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "*ast matches ClassInduct::Item(&ast::ClassSetItem::Bracketed(ref x)) or ClassInduct::Item(&ast::ClassSetItem::Union(ref x))",
          "norm": null,
          "value": "true",
          "line": 389,
          "bound": null
        },
        {
          "cond": "*ast matches ",
          "norm": null,
          "value": "true",
          "line": 389,
          "bound": null
        },
        {
          "cond": "*ast matches ClassInduct::Item(&ast::ClassSetItem::Bracketed(ref x))",
          "norm": null,
          "value": "true",
          "line": 389,
          "bound": null
        },
        {
          "cond": "x.kind matches ast::ClassSet::BinaryOp(ref op)",
          "norm": null,
          "value": "true",
          "line": 391,
          "bound": null
        }
      ],
      "ret": "Some(ClassFrame::Binary { op })",
      "path": [
        0,
        2,
        3,
        6,
        9,
        11,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "*ast matches ClassInduct::Item(&ast::ClassSetItem::Bracketed(ref x)) or ClassInduct::Item(&ast::ClassSetItem::Union(ref x))",
          "norm": null,
          "value": "true",
          "line": 389,
          "bound": null
        },
        {
          "cond": "*ast matches ",
          "norm": null,
          "value": "true",
          "line": 389,
          "bound": null
        },
        {
          "cond": "*ast matches ClassInduct::Item(&ast::ClassSetItem::Bracketed(ref x))",
          "norm": null,
          "value": "true",
          "line": 389,
          "bound": null
        },
        {
          "cond": "x.kind matches ast::ClassSet::Item(ref item)",
          "norm": null,
          "value": "true",
          "line": 391,
          "bound": null
        },
        {
          "cond": "x.kind matches ast::ClassSet::Item(ref item)",
          "norm": null,
          "value": "true",
          "line": 391,
          "bound": null
        }
      ],
      "ret": "Some(ClassFrame::Union { head: item, tail: &[] })",
      "path": [
        0,
        2,
        3,
        6,
        8,
        10,
        11,
        20
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}