{
  "name": "regex_syntax::ast::parse::{impl#5}::parse_capture_name",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:1298:5:1342:6",
  "doc": "/// Parses a capture group name. Assumes that the parser is positioned at\n/// the first character in the name following the opening `<` (and may\n/// possibly be EOF). This advances the parser to the first character\n/// following the closing `>`.\n///\n/// The caller must provide the capture index of the group for this name.\n",
  "code": [
    "fn parse_capture_name(",
    "    &self,",
    "    capture_index: u32,",
    ") -> Result<ast::CaptureName> {",
    "    if self.is_eof() {",
    "        return Err(self",
    "            .error(self.span(), ast::ErrorKind::GroupNameUnexpectedEof));",
    "    }",
    "    let start = self.pos();",
    "    loop {",
    "        if self.char() == '>' {",
    "            break;",
    "        }",
    "        if !is_capture_char(self.char(), self.pos() == start) {",
    "            return Err(self.error(",
    "                self.span_char(),",
    "                ast::ErrorKind::GroupNameInvalid,",
    "            ));",
    "        }",
    "        if !self.bump() {",
    "            break;",
    "        }",
    "    }",
    "    let end = self.pos();",
    "    if self.is_eof() {",
    "        return Err(self",
    "            .error(self.span(), ast::ErrorKind::GroupNameUnexpectedEof));",
    "    }",
    "    assert_eq!(self.char(), '>');",
    "    self.bump();",
    "    let name = &self.pattern()[start.offset..end.offset];",
    "    if name.is_empty() {",
    "        return Err(self.error(",
    "            Span::new(start, start),",
    "            ast::ErrorKind::GroupNameEmpty,",
    "        ));",
    "    }",
    "    let capname = ast::CaptureName {",
    "        span: Span::new(start, end),",
    "        name: name.to_string(),",
    "        index: capture_index,",
    "    };",
    "    self.add_capture_name(&capname)?;",
    "    Ok(capname)",
    "}"
  ],
  "size": {
    "chain": 17,
    "contra": 5,
    "min_set": 8
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1302,
          "bound": null
        }
      ],
      "ret": "Err(self\n                .error(self.span(), ast::ErrorKind::GroupNameUnexpectedEof))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        64
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1302,
          "bound": null
        },
        {
          "cond": "self.char() == '>'",
          "norm": "'>' == self.char()",
          "value": "false",
          "line": 1308,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1322,
          "bound": null
        }
      ],
      "ret": "Err(self\n                .error(self.span(), ast::ErrorKind::GroupNameUnexpectedEof))",
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        11,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        62,
        63,
        64
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1302,
          "bound": null
        },
        {
          "cond": "self.char() == '>'",
          "norm": "'>' == self.char()",
          "value": "false",
          "line": 1308,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1322,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1329,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(start, start),\n                ast::ErrorKind::GroupNameEmpty,\n            ))",
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        11,
        25,
        26,
        27,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        61,
        62,
        63,
        64
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1302,
          "bound": null
        },
        {
          "cond": "self.char() == '>'",
          "norm": "'>' == self.char()",
          "value": "false",
          "line": 1308,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1322,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1329,
          "bound": null
        },
        {
          "cond": "self.add_capture_name(&capname)?",
          "norm": null,
          "value": "Err/None",
          "line": 1340,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        11,
        25,
        26,
        27,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        44,
        45,
        46,
        47,
        48,
        49,
        51,
        53,
        54,
        58,
        59,
        60,
        61,
        62,
        63,
        64
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1302,
          "bound": null
        },
        {
          "cond": "self.char() == '>'",
          "norm": "'>' == self.char()",
          "value": "false",
          "line": 1308,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1322,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1329,
          "bound": null
        },
        {
          "cond": "self.add_capture_name(&capname)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1340,
          "bound": null
        }
      ],
      "ret": "Ok(capname)",
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        11,
        25,
        26,
        27,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        44,
        45,
        46,
        47,
        48,
        49,
        52,
        55,
        56,
        57,
        64
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1302,
          "bound": null
        },
        {
          "cond": "self.char() == '>'",
          "norm": "'>' == self.char()",
          "value": "false",
          "line": 1308,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1322,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        11,
        25,
        26,
        27,
        32,
        33,
        35,
        70
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1302,
          "bound": null
        },
        {
          "cond": "self.char() == '>'",
          "norm": "'>' == self.char()",
          "value": "true",
          "line": 1308,
          "bound": null
        },
        {
          "cond": "is_capture_char(self.char(), self.pos() == start)",
          "norm": null,
          "value": "true",
          "line": 1311,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 1317,
          "bound": null
        },
        {
          "cond": "self.char() == '>'",
          "norm": "'>' == self.char()",
          "value": "false",
          "line": 1308,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1322,
          "bound": null
        }
      ],
      "ret": "Err(self\n                .error(self.span(), ast::ErrorKind::GroupNameUnexpectedEof))",
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        22,
        23,
        8,
        9,
        10,
        11,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        62,
        63,
        64
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1302,
          "bound": null
        },
        {
          "cond": "self.char() == '>'",
          "norm": "'>' == self.char()",
          "value": "true",
          "line": 1308,
          "bound": null
        },
        {
          "cond": "is_capture_char(self.char(), self.pos() == start)",
          "norm": null,
          "value": "true",
          "line": 1311,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 1317,
          "bound": null
        },
        {
          "cond": "self.char() == '>'",
          "norm": "'>' == self.char()",
          "value": "false",
          "line": 1308,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1322,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1329,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(start, start),\n                ast::ErrorKind::GroupNameEmpty,\n            ))",
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        22,
        23,
        8,
        9,
        10,
        11,
        25,
        26,
        27,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        61,
        62,
        63,
        64
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1302,
          "bound": null
        },
        {
          "cond": "self.char() == '>'",
          "norm": "'>' == self.char()",
          "value": "true",
          "line": 1308,
          "bound": null
        },
        {
          "cond": "is_capture_char(self.char(), self.pos() == start)",
          "norm": null,
          "value": "true",
          "line": 1311,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 1317,
          "bound": null
        },
        {
          "cond": "self.char() == '>'",
          "norm": "'>' == self.char()",
          "value": "false",
          "line": 1308,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1322,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1329,
          "bound": null
        },
        {
          "cond": "self.add_capture_name(&capname)?",
          "norm": null,
          "value": "Err/None",
          "line": 1340,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        22,
        23,
        8,
        9,
        10,
        11,
        25,
        26,
        27,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        44,
        45,
        46,
        47,
        48,
        49,
        51,
        53,
        54,
        58,
        59,
        60,
        61,
        62,
        63,
        64
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1302,
          "bound": null
        },
        {
          "cond": "self.char() == '>'",
          "norm": "'>' == self.char()",
          "value": "true",
          "line": 1308,
          "bound": null
        },
        {
          "cond": "is_capture_char(self.char(), self.pos() == start)",
          "norm": null,
          "value": "true",
          "line": 1311,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 1317,
          "bound": null
        },
        {
          "cond": "self.char() == '>'",
          "norm": "'>' == self.char()",
          "value": "false",
          "line": 1308,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1322,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1329,
          "bound": null
        },
        {
          "cond": "self.add_capture_name(&capname)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1340,
          "bound": null
        }
      ],
      "ret": "Ok(capname)",
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        22,
        23,
        8,
        9,
        10,
        11,
        25,
        26,
        27,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        44,
        45,
        46,
        47,
        48,
        49,
        52,
        55,
        56,
        57,
        64
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1302,
          "bound": null
        },
        {
          "cond": "self.char() == '>'",
          "norm": "'>' == self.char()",
          "value": "true",
          "line": 1308,
          "bound": null
        },
        {
          "cond": "is_capture_char(self.char(), self.pos() == start)",
          "norm": null,
          "value": "true",
          "line": 1311,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 1317,
          "bound": null
        },
        {
          "cond": "self.char() == '>'",
          "norm": "'>' == self.char()",
          "value": "false",
          "line": 1308,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1322,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        22,
        23,
        8,
        9,
        10,
        11,
        25,
        26,
        27,
        32,
        33,
        35,
        70
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1302,
          "bound": null
        },
        {
          "cond": "self.char() == '>'",
          "norm": "'>' == self.char()",
          "value": "true",
          "line": 1308,
          "bound": null
        },
        {
          "cond": "is_capture_char(self.char(), self.pos() == start)",
          "norm": null,
          "value": "true",
          "line": 1311,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "false",
          "line": 1317,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1322,
          "bound": null
        }
      ],
      "ret": "Err(self\n                .error(self.span(), ast::ErrorKind::GroupNameUnexpectedEof))",
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        62,
        63,
        64
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1302,
          "bound": null
        },
        {
          "cond": "self.char() == '>'",
          "norm": "'>' == self.char()",
          "value": "true",
          "line": 1308,
          "bound": null
        },
        {
          "cond": "is_capture_char(self.char(), self.pos() == start)",
          "norm": null,
          "value": "true",
          "line": 1311,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "false",
          "line": 1317,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1322,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1329,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(start, start),\n                ast::ErrorKind::GroupNameEmpty,\n            ))",
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        22,
        24,
        25,
        26,
        27,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        61,
        62,
        63,
        64
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1302,
          "bound": null
        },
        {
          "cond": "self.char() == '>'",
          "norm": "'>' == self.char()",
          "value": "true",
          "line": 1308,
          "bound": null
        },
        {
          "cond": "is_capture_char(self.char(), self.pos() == start)",
          "norm": null,
          "value": "true",
          "line": 1311,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "false",
          "line": 1317,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1322,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1329,
          "bound": null
        },
        {
          "cond": "self.add_capture_name(&capname)?",
          "norm": null,
          "value": "Err/None",
          "line": 1340,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        22,
        24,
        25,
        26,
        27,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        44,
        45,
        46,
        47,
        48,
        49,
        51,
        53,
        54,
        58,
        59,
        60,
        61,
        62,
        63,
        64
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1302,
          "bound": null
        },
        {
          "cond": "self.char() == '>'",
          "norm": "'>' == self.char()",
          "value": "true",
          "line": 1308,
          "bound": null
        },
        {
          "cond": "is_capture_char(self.char(), self.pos() == start)",
          "norm": null,
          "value": "true",
          "line": 1311,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "false",
          "line": 1317,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1322,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "name.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1329,
          "bound": null
        },
        {
          "cond": "self.add_capture_name(&capname)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1340,
          "bound": null
        }
      ],
      "ret": "Ok(capname)",
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        22,
        24,
        25,
        26,
        27,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        44,
        45,
        46,
        47,
        48,
        49,
        52,
        55,
        56,
        57,
        64
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1302,
          "bound": null
        },
        {
          "cond": "self.char() == '>'",
          "norm": "'>' == self.char()",
          "value": "true",
          "line": 1308,
          "bound": null
        },
        {
          "cond": "is_capture_char(self.char(), self.pos() == start)",
          "norm": null,
          "value": "true",
          "line": 1311,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "false",
          "line": 1317,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1322,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        22,
        24,
        25,
        26,
        27,
        32,
        33,
        35,
        70
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1302,
          "bound": null
        },
        {
          "cond": "self.char() == '>'",
          "norm": "'>' == self.char()",
          "value": "true",
          "line": 1308,
          "bound": null
        },
        {
          "cond": "is_capture_char(self.char(), self.pos() == start)",
          "norm": null,
          "value": "false",
          "line": 1311,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                    self.span_char(),\n                    ast::ErrorKind::GroupNameInvalid,\n                ))",
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        18,
        19,
        20,
        21,
        63,
        64
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}