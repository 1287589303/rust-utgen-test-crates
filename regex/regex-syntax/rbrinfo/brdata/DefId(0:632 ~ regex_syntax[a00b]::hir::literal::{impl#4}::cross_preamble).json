{
  "name": "regex_syntax::hir::literal::{impl#4}::cross_preamble",
  "mod_info": {
    "name": "hir::literal",
    "loc": "regex-syntax/src/hir/mod.rs:42:1:42:17"
  },
  "visible": false,
  "loc": "regex-syntax/src/hir/literal.rs:1140:5:1171:6",
  "doc": "/// A helper function the corresponds to the subtle preamble for both\n/// `cross_forward` and `cross_reverse`. In effect, it handles the cases\n/// of infinite sequences for both `self` and `other`, as well as ensuring\n/// that literals from `other` are drained even if they aren't used.\n",
  "code": [
    "fn cross_preamble<'a>(",
    "    &'a mut self,",
    "    other: &'a mut Seq,",
    ") -> Option<(&'a mut Vec<Literal>, &'a mut Vec<Literal>)> {",
    "    let lits2 = match other.literals {",
    "        None => {",
    "            // If our current seq contains the empty string and the seq",
    "            // we're adding matches any literal, then it follows that the",
    "            // current seq must now also match any literal.",
    "            //",
    "            // Otherwise, we just have to make sure everything in this",
    "            // sequence is inexact.",
    "            if self.min_literal_len() == Some(0) {",
    "                *self = Seq::infinite();",
    "            } else {",
    "                self.make_inexact();",
    "            }",
    "            return None;",
    "        }",
    "        Some(ref mut lits) => lits,",
    "    };",
    "    let lits1 = match self.literals {",
    "        None => {",
    "            // If we aren't going to make it to the end of this routine",
    "            // where lits2 is drained, then we need to do it now.",
    "            lits2.drain(..);",
    "            return None;",
    "        }",
    "        Some(ref mut lits) => lits,",
    "    };",
    "    Some((lits1, lits2))",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "other.literals matches Some(ref mut lits)",
          "norm": null,
          "value": "true",
          "line": 1144,
          "bound": null
        },
        {
          "cond": "self.literals matches Some(ref mut lits)",
          "norm": null,
          "value": "true",
          "line": 1161,
          "bound": null
        }
      ],
      "ret": "Some((lits1, lits2))",
      "path": [
        0,
        3,
        17,
        22
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "other.literals matches Some(ref mut lits)",
          "norm": null,
          "value": "true",
          "line": 1144,
          "bound": null
        },
        {
          "cond": "self.literals matches None",
          "norm": null,
          "value": "true",
          "line": 1161,
          "bound": null
        },
        {
          "cond": "self.literals matches None",
          "norm": null,
          "value": "true",
          "line": 1161,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        3,
        16,
        18,
        19,
        20,
        21,
        22
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "other.literals matches None",
          "norm": null,
          "value": "true",
          "line": 1144,
          "bound": null
        },
        {
          "cond": "other.literals matches None",
          "norm": null,
          "value": "true",
          "line": 1144,
          "bound": null
        },
        {
          "cond": "self.min_literal_len() == Some(0)",
          "norm": "Some(0) == self.min_literal_len()",
          "value": "true",
          "line": 1152,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        21,
        22
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "other.literals matches None",
          "norm": null,
          "value": "true",
          "line": 1144,
          "bound": null
        },
        {
          "cond": "other.literals matches None",
          "norm": null,
          "value": "true",
          "line": 1144,
          "bound": null
        },
        {
          "cond": "self.min_literal_len() == Some(0)",
          "norm": "Some(0) == self.min_literal_len()",
          "value": "false",
          "line": 1152,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        2,
        4,
        5,
        6,
        12,
        13,
        14,
        21,
        22
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}