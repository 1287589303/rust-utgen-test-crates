{
  "name": "regex_syntax::ast::parse::{impl#4}::push_alternate",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:665:5:671:6",
  "doc": "/// Parse and push a single alternation on to the parser's internal stack.\n/// If the top of the stack already has an alternation, then add to that\n/// instead of pushing a new one.\n///\n/// The concatenation given corresponds to a single alternation branch.\n/// The concatenation returned starts the next branch and is empty.\n///\n/// This assumes the parser is currently positioned at `|` and will advance\n/// the parser to the character following `|`.\n",
  "code": [
    "fn push_alternate(&self, mut concat: ast::Concat) -> Result<ast::Concat> {",
    "    assert_eq!(self.char(), '|');",
    "    concat.span.end = self.pos();",
    "    self.push_or_add_alternation(concat);",
    "    self.bump();",
    "    Ok(ast::Concat { span: self.span(), asts: vec![] })",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": "Ok(ast::Concat { span: self.span(), asts: vec![] })",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}