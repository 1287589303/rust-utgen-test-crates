{
  "name": "regex_syntax::hir::literal::{impl#0}::limit_literal_len",
  "mod_info": {
    "name": "hir::literal",
    "loc": "regex-syntax/src/hir/mod.rs:42:1:42:17"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/literal.rs:329:5:332:6",
  "doc": "/// Configure a limit on the maximum length of any literal in a sequence.\n///\n/// This is useful for limiting things like `(abcde){5}{5}{5}{5}`. While\n/// each repetition or literal in that regex is small, when all the\n/// repetitions are applied, one ends up with a literal of length `5^4 =\n/// 625`.\n///\n/// With this limit set, literals that exceed it will be made inexact and\n/// thus prevented from growing.\n///\n/// # Example\n///\n/// This shows how to decrease the limit and compares it with the default.\n///\n/// ```\n/// use regex_syntax::{hir::literal::{Extractor, Literal, Seq}, parse};\n///\n/// let hir = parse(r\"(abc){2}{2}{2}\")?;\n///\n/// let got = Extractor::new().extract(&hir);\n/// let expected = Seq::new([\"abcabcabcabcabcabcabcabc\"]);\n/// assert_eq!(expected, got);\n///\n/// // Now let's shrink the limit and see how that changes things.\n/// let got = Extractor::new().limit_literal_len(14).extract(&hir);\n/// let expected = Seq::from_iter([\n///     Literal::inexact(\"abcabcabcabcab\"),\n/// ]);\n/// assert_eq!(expected, got);\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn limit_literal_len(&mut self, limit: usize) -> &mut Extractor {",
    "    self.limit_literal_len = limit;",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}