{
  "name": "regex_syntax::parser::parse",
  "mod_info": {
    "name": "parser",
    "loc": "regex-syntax/src/lib.rs:191:1:191:12"
  },
  "visible": true,
  "loc": "regex-syntax/src/parser.rs:13:1:15:2",
  "doc": "/// A convenience routine for parsing a regex using default options.\n///\n/// This is equivalent to `Parser::new().parse(pattern)`.\n///\n/// If you need to set non-default options, then use a [`ParserBuilder`].\n///\n/// This routine returns an [`Hir`](hir::Hir) value. Namely, it automatically\n/// parses the pattern as an [`Ast`](ast::Ast) and then invokes the translator\n/// to convert the `Ast` into an `Hir`. If you need access to the `Ast`, then\n/// you should use a [`ast::parse::Parser`].\n",
  "code": [
    "pub fn parse(pattern: &str) -> Result<hir::Hir, Error> {",
    "    Parser::new().parse(pattern)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}