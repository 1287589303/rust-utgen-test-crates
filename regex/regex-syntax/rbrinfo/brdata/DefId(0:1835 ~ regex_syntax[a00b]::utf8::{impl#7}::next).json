{
  "name": "regex_syntax::utf8::{impl#7}::next",
  "mod_info": {
    "name": "utf8",
    "loc": "regex-syntax/src/lib.rs:195:1:195:14"
  },
  "visible": true,
  "loc": "regex-syntax/src/utf8.rs:339:5:387:6",
  "doc": "",
  "code": [
    "fn next(&mut self) -> Option<Self::Item> {",
    "    'TOP: while let Some(mut r) = self.range_stack.pop() {",
    "        'INNER: loop {",
    "            if let Some((r1, r2)) = r.split() {",
    "                self.push(r2.start, r2.end);",
    "                r.start = r1.start;",
    "                r.end = r1.end;",
    "                continue 'INNER;",
    "            }",
    "            if !r.is_valid() {",
    "                continue 'TOP;",
    "            }",
    "            for i in 1..MAX_UTF8_BYTES {",
    "                let max = max_scalar_value(i);",
    "                if r.start <= max && max < r.end {",
    "                    self.push(max + 1, r.end);",
    "                    r.end = max;",
    "                    continue 'INNER;",
    "                }",
    "            }",
    "            if let Some(ascii_range) = r.as_ascii() {",
    "                return Some(Utf8Sequence::One(ascii_range));",
    "            }",
    "            for i in 1..MAX_UTF8_BYTES {",
    "                let m = (1 << (6 * i)) - 1;",
    "                if (r.start & !m) != (r.end & !m) {",
    "                    if (r.start & m) != 0 {",
    "                        self.push((r.start | m) + 1, r.end);",
    "                        r.end = r.start | m;",
    "                        continue 'INNER;",
    "                    }",
    "                    if (r.end & m) != m {",
    "                        self.push(r.end & !m, r.end);",
    "                        r.end = (r.end & !m) - 1;",
    "                        continue 'INNER;",
    "                    }",
    "                }",
    "            }",
    "            let mut start = [0; MAX_UTF8_BYTES];",
    "            let mut end = [0; MAX_UTF8_BYTES];",
    "            let n = r.encode(&mut start, &mut end);",
    "            return Some(Utf8Sequence::from_encoded_range(",
    "                &start[0..n],",
    "                &end[0..n],",
    "            ));",
    "        }",
    "    }",
    "    None",
    "}"
  ],
  "size": {
    "chain": 27,
    "contra": 20,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(mut r) = self.range_stack.pop()",
          "norm": null,
          "value": "true",
          "line": 340,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        63,
        65
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(mut r) = self.range_stack.pop()",
          "norm": null,
          "value": "true",
          "line": 340,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "r.is_valid()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "true",
          "line": 351,
          "bound": null
        },
        {
          "cond": "r.start <= max",
          "norm": "max >= r.start",
          "value": "true",
          "line": 353,
          "bound": "r.start == max"
        },
        {
          "cond": "max < r.end",
          "norm": null,
          "value": "false",
          "line": 353,
          "bound": "max == r.end"
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 351,
          "bound": null
        },
        {
          "cond": "let Some(ascii_range) = r.as_ascii()",
          "norm": null,
          "value": "true",
          "line": 359,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "true",
          "line": 362,
          "bound": null
        },
        {
          "cond": "(r.start & !m) != (r.end & !m)",
          "norm": "(r.end & !m) != (r.start & !m)",
          "value": "true",
          "line": 364,
          "bound": null
        },
        {
          "cond": "(r.start & m) != 0",
          "norm": null,
          "value": "false",
          "line": 365,
          "bound": null
        },
        {
          "cond": "(r.end & m) != m",
          "norm": null,
          "value": "false",
          "line": 370,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 362,
          "bound": null
        }
      ],
      "ret": "Some(Utf8Sequence::from_encoded_range(\n                    &start[0..n],\n                    &end[0..n],\n                ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        22,
        24,
        25,
        29,
        31,
        17,
        18,
        19,
        21,
        23,
        32,
        35,
        36,
        37,
        38,
        39,
        42,
        44,
        45,
        46,
        47,
        51,
        53,
        57,
        37,
        38,
        39,
        41,
        43,
        58,
        59,
        60,
        61,
        64,
        65
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some(mut r) = self.range_stack.pop()",
          "norm": null,
          "value": "true",
          "line": 340,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "r.is_valid()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "true",
          "line": 351,
          "bound": null
        },
        {
          "cond": "r.start <= max",
          "norm": "max >= r.start",
          "value": "true",
          "line": 353,
          "bound": "r.start == max"
        },
        {
          "cond": "max < r.end",
          "norm": null,
          "value": "false",
          "line": 353,
          "bound": "max == r.end"
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 351,
          "bound": null
        },
        {
          "cond": "let Some(ascii_range) = r.as_ascii()",
          "norm": null,
          "value": "true",
          "line": 359,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "true",
          "line": 362,
          "bound": null
        },
        {
          "cond": "(r.start & !m) != (r.end & !m)",
          "norm": "(r.end & !m) != (r.start & !m)",
          "value": "false",
          "line": 364,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 362,
          "bound": null
        }
      ],
      "ret": "Some(Utf8Sequence::from_encoded_range(\n                    &start[0..n],\n                    &end[0..n],\n                ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        22,
        24,
        25,
        29,
        31,
        17,
        18,
        19,
        21,
        23,
        32,
        35,
        36,
        37,
        38,
        39,
        42,
        44,
        45,
        46,
        56,
        57,
        37,
        38,
        39,
        41,
        43,
        58,
        59,
        60,
        61,
        64,
        65
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "let Some(mut r) = self.range_stack.pop()",
          "norm": null,
          "value": "true",
          "line": 340,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "r.is_valid()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "true",
          "line": 351,
          "bound": null
        },
        {
          "cond": "r.start <= max",
          "norm": "max >= r.start",
          "value": "true",
          "line": 353,
          "bound": "r.start == max"
        },
        {
          "cond": "max < r.end",
          "norm": null,
          "value": "false",
          "line": 353,
          "bound": "max == r.end"
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 351,
          "bound": null
        },
        {
          "cond": "let Some(ascii_range) = r.as_ascii()",
          "norm": null,
          "value": "true",
          "line": 359,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 362,
          "bound": null
        }
      ],
      "ret": "Some(Utf8Sequence::from_encoded_range(\n                    &start[0..n],\n                    &end[0..n],\n                ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        22,
        24,
        25,
        29,
        31,
        17,
        18,
        19,
        21,
        23,
        32,
        35,
        36,
        37,
        38,
        39,
        41,
        43,
        58,
        59,
        60,
        61,
        64,
        65
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "let Some(mut r) = self.range_stack.pop()",
          "norm": null,
          "value": "true",
          "line": 340,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "r.is_valid()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "true",
          "line": 351,
          "bound": null
        },
        {
          "cond": "r.start <= max",
          "norm": "max >= r.start",
          "value": "true",
          "line": 353,
          "bound": "r.start == max"
        },
        {
          "cond": "max < r.end",
          "norm": null,
          "value": "false",
          "line": 353,
          "bound": "max == r.end"
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 351,
          "bound": null
        },
        {
          "cond": "let Some(ascii_range) = r.as_ascii()",
          "norm": null,
          "value": "true",
          "line": 359,
          "bound": null
        }
      ],
      "ret": "Some(Utf8Sequence::One(ascii_range))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        22,
        24,
        25,
        29,
        31,
        17,
        18,
        19,
        21,
        23,
        32,
        33,
        34,
        64,
        65
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "let Some(mut r) = self.range_stack.pop()",
          "norm": null,
          "value": "true",
          "line": 340,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "r.is_valid()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "true",
          "line": 351,
          "bound": null
        },
        {
          "cond": "r.start <= max",
          "norm": "max >= r.start",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 351,
          "bound": null
        },
        {
          "cond": "let Some(ascii_range) = r.as_ascii()",
          "norm": null,
          "value": "true",
          "line": 359,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "true",
          "line": 362,
          "bound": null
        },
        {
          "cond": "(r.start & !m) != (r.end & !m)",
          "norm": "(r.end & !m) != (r.start & !m)",
          "value": "true",
          "line": 364,
          "bound": null
        },
        {
          "cond": "(r.start & m) != 0",
          "norm": null,
          "value": "false",
          "line": 365,
          "bound": null
        },
        {
          "cond": "(r.end & m) != m",
          "norm": null,
          "value": "false",
          "line": 370,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 362,
          "bound": null
        }
      ],
      "ret": "Some(Utf8Sequence::from_encoded_range(\n                    &start[0..n],\n                    &end[0..n],\n                ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        22,
        24,
        30,
        31,
        17,
        18,
        19,
        21,
        23,
        32,
        35,
        36,
        37,
        38,
        39,
        42,
        44,
        45,
        46,
        47,
        51,
        53,
        57,
        37,
        38,
        39,
        41,
        43,
        58,
        59,
        60,
        61,
        64,
        65
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "let Some(mut r) = self.range_stack.pop()",
          "norm": null,
          "value": "true",
          "line": 340,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "r.is_valid()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "true",
          "line": 351,
          "bound": null
        },
        {
          "cond": "r.start <= max",
          "norm": "max >= r.start",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 351,
          "bound": null
        },
        {
          "cond": "let Some(ascii_range) = r.as_ascii()",
          "norm": null,
          "value": "true",
          "line": 359,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "true",
          "line": 362,
          "bound": null
        },
        {
          "cond": "(r.start & !m) != (r.end & !m)",
          "norm": "(r.end & !m) != (r.start & !m)",
          "value": "false",
          "line": 364,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 362,
          "bound": null
        }
      ],
      "ret": "Some(Utf8Sequence::from_encoded_range(\n                    &start[0..n],\n                    &end[0..n],\n                ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        22,
        24,
        30,
        31,
        17,
        18,
        19,
        21,
        23,
        32,
        35,
        36,
        37,
        38,
        39,
        42,
        44,
        45,
        46,
        56,
        57,
        37,
        38,
        39,
        41,
        43,
        58,
        59,
        60,
        61,
        64,
        65
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "let Some(mut r) = self.range_stack.pop()",
          "norm": null,
          "value": "true",
          "line": 340,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "r.is_valid()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "true",
          "line": 351,
          "bound": null
        },
        {
          "cond": "r.start <= max",
          "norm": "max >= r.start",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 351,
          "bound": null
        },
        {
          "cond": "let Some(ascii_range) = r.as_ascii()",
          "norm": null,
          "value": "true",
          "line": 359,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 362,
          "bound": null
        }
      ],
      "ret": "Some(Utf8Sequence::from_encoded_range(\n                    &start[0..n],\n                    &end[0..n],\n                ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        22,
        24,
        30,
        31,
        17,
        18,
        19,
        21,
        23,
        32,
        35,
        36,
        37,
        38,
        39,
        41,
        43,
        58,
        59,
        60,
        61,
        64,
        65
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "let Some(mut r) = self.range_stack.pop()",
          "norm": null,
          "value": "true",
          "line": 340,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "r.is_valid()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "true",
          "line": 351,
          "bound": null
        },
        {
          "cond": "r.start <= max",
          "norm": "max >= r.start",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 351,
          "bound": null
        },
        {
          "cond": "let Some(ascii_range) = r.as_ascii()",
          "norm": null,
          "value": "true",
          "line": 359,
          "bound": null
        }
      ],
      "ret": "Some(Utf8Sequence::One(ascii_range))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        22,
        24,
        30,
        31,
        17,
        18,
        19,
        21,
        23,
        32,
        33,
        34,
        64,
        65
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "let Some(mut r) = self.range_stack.pop()",
          "norm": null,
          "value": "true",
          "line": 340,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "r.is_valid()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 351,
          "bound": null
        },
        {
          "cond": "let Some(ascii_range) = r.as_ascii()",
          "norm": null,
          "value": "true",
          "line": 359,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "true",
          "line": 362,
          "bound": null
        },
        {
          "cond": "(r.start & !m) != (r.end & !m)",
          "norm": "(r.end & !m) != (r.start & !m)",
          "value": "true",
          "line": 364,
          "bound": null
        },
        {
          "cond": "(r.start & m) != 0",
          "norm": null,
          "value": "false",
          "line": 365,
          "bound": null
        },
        {
          "cond": "(r.end & m) != m",
          "norm": null,
          "value": "false",
          "line": 370,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 362,
          "bound": null
        }
      ],
      "ret": "Some(Utf8Sequence::from_encoded_range(\n                    &start[0..n],\n                    &end[0..n],\n                ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        21,
        23,
        32,
        35,
        36,
        37,
        38,
        39,
        42,
        44,
        45,
        46,
        47,
        51,
        53,
        57,
        37,
        38,
        39,
        41,
        43,
        58,
        59,
        60,
        61,
        64,
        65
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "let Some(mut r) = self.range_stack.pop()",
          "norm": null,
          "value": "true",
          "line": 340,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "r.is_valid()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 351,
          "bound": null
        },
        {
          "cond": "let Some(ascii_range) = r.as_ascii()",
          "norm": null,
          "value": "true",
          "line": 359,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "true",
          "line": 362,
          "bound": null
        },
        {
          "cond": "(r.start & !m) != (r.end & !m)",
          "norm": "(r.end & !m) != (r.start & !m)",
          "value": "false",
          "line": 364,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 362,
          "bound": null
        }
      ],
      "ret": "Some(Utf8Sequence::from_encoded_range(\n                    &start[0..n],\n                    &end[0..n],\n                ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        21,
        23,
        32,
        35,
        36,
        37,
        38,
        39,
        42,
        44,
        45,
        46,
        56,
        57,
        37,
        38,
        39,
        41,
        43,
        58,
        59,
        60,
        61,
        64,
        65
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "let Some(mut r) = self.range_stack.pop()",
          "norm": null,
          "value": "true",
          "line": 340,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "r.is_valid()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 351,
          "bound": null
        },
        {
          "cond": "let Some(ascii_range) = r.as_ascii()",
          "norm": null,
          "value": "true",
          "line": 359,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 362,
          "bound": null
        }
      ],
      "ret": "Some(Utf8Sequence::from_encoded_range(\n                    &start[0..n],\n                    &end[0..n],\n                ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        21,
        23,
        32,
        35,
        36,
        37,
        38,
        39,
        41,
        43,
        58,
        59,
        60,
        61,
        64,
        65
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "let Some(mut r) = self.range_stack.pop()",
          "norm": null,
          "value": "true",
          "line": 340,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "r.is_valid()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 351,
          "bound": null
        },
        {
          "cond": "let Some(ascii_range) = r.as_ascii()",
          "norm": null,
          "value": "true",
          "line": 359,
          "bound": null
        }
      ],
      "ret": "Some(Utf8Sequence::One(ascii_range))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        21,
        23,
        32,
        33,
        34,
        64,
        65
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "let Some(mut r) = self.range_stack.pop()",
          "norm": null,
          "value": "true",
          "line": 340,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "r.is_valid()",
          "norm": null,
          "value": "false",
          "line": 348,
          "bound": null
        },
        {
          "cond": "let Some(mut r) = self.range_stack.pop()",
          "norm": null,
          "value": "true",
          "line": 340,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        12,
        13,
        15,
        1,
        2,
        3,
        63,
        65
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "let Some(mut r) = self.range_stack.pop()",
          "norm": null,
          "value": "true",
          "line": 340,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "r.is_valid()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "true",
          "line": 351,
          "bound": null
        },
        {
          "cond": "r.start <= max",
          "norm": "max >= r.start",
          "value": "true",
          "line": 353,
          "bound": "r.start == max"
        },
        {
          "cond": "max < r.end",
          "norm": null,
          "value": "false",
          "line": 353,
          "bound": "max == r.end"
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 351,
          "bound": null
        },
        {
          "cond": "let Some(ascii_range) = r.as_ascii()",
          "norm": null,
          "value": "true",
          "line": 359,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "true",
          "line": 362,
          "bound": null
        },
        {
          "cond": "(r.start & !m) != (r.end & !m)",
          "norm": "(r.end & !m) != (r.start & !m)",
          "value": "true",
          "line": 364,
          "bound": null
        },
        {
          "cond": "(r.start & m) != 0",
          "norm": null,
          "value": "false",
          "line": 365,
          "bound": null
        },
        {
          "cond": "(r.end & m) != m",
          "norm": null,
          "value": "false",
          "line": 370,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 362,
          "bound": null
        }
      ],
      "ret": "Some(Utf8Sequence::from_encoded_range(\n                    &start[0..n],\n                    &end[0..n],\n                ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        6,
        7,
        8,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        22,
        24,
        25,
        29,
        31,
        17,
        18,
        19,
        21,
        23,
        32,
        35,
        36,
        37,
        38,
        39,
        42,
        44,
        45,
        46,
        47,
        51,
        53,
        57,
        37,
        38,
        39,
        41,
        43,
        58,
        59,
        60,
        61,
        64,
        65
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "let Some(mut r) = self.range_stack.pop()",
          "norm": null,
          "value": "true",
          "line": 340,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "r.is_valid()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "true",
          "line": 351,
          "bound": null
        },
        {
          "cond": "r.start <= max",
          "norm": "max >= r.start",
          "value": "true",
          "line": 353,
          "bound": "r.start == max"
        },
        {
          "cond": "max < r.end",
          "norm": null,
          "value": "false",
          "line": 353,
          "bound": "max == r.end"
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 351,
          "bound": null
        },
        {
          "cond": "let Some(ascii_range) = r.as_ascii()",
          "norm": null,
          "value": "true",
          "line": 359,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "true",
          "line": 362,
          "bound": null
        },
        {
          "cond": "(r.start & !m) != (r.end & !m)",
          "norm": "(r.end & !m) != (r.start & !m)",
          "value": "false",
          "line": 364,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 362,
          "bound": null
        }
      ],
      "ret": "Some(Utf8Sequence::from_encoded_range(\n                    &start[0..n],\n                    &end[0..n],\n                ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        6,
        7,
        8,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        22,
        24,
        25,
        29,
        31,
        17,
        18,
        19,
        21,
        23,
        32,
        35,
        36,
        37,
        38,
        39,
        42,
        44,
        45,
        46,
        56,
        57,
        37,
        38,
        39,
        41,
        43,
        58,
        59,
        60,
        61,
        64,
        65
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "let Some(mut r) = self.range_stack.pop()",
          "norm": null,
          "value": "true",
          "line": 340,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "r.is_valid()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "true",
          "line": 351,
          "bound": null
        },
        {
          "cond": "r.start <= max",
          "norm": "max >= r.start",
          "value": "true",
          "line": 353,
          "bound": "r.start == max"
        },
        {
          "cond": "max < r.end",
          "norm": null,
          "value": "false",
          "line": 353,
          "bound": "max == r.end"
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 351,
          "bound": null
        },
        {
          "cond": "let Some(ascii_range) = r.as_ascii()",
          "norm": null,
          "value": "true",
          "line": 359,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 362,
          "bound": null
        }
      ],
      "ret": "Some(Utf8Sequence::from_encoded_range(\n                    &start[0..n],\n                    &end[0..n],\n                ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        6,
        7,
        8,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        22,
        24,
        25,
        29,
        31,
        17,
        18,
        19,
        21,
        23,
        32,
        35,
        36,
        37,
        38,
        39,
        41,
        43,
        58,
        59,
        60,
        61,
        64,
        65
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "let Some(mut r) = self.range_stack.pop()",
          "norm": null,
          "value": "true",
          "line": 340,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "r.is_valid()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "true",
          "line": 351,
          "bound": null
        },
        {
          "cond": "r.start <= max",
          "norm": "max >= r.start",
          "value": "true",
          "line": 353,
          "bound": "r.start == max"
        },
        {
          "cond": "max < r.end",
          "norm": null,
          "value": "false",
          "line": 353,
          "bound": "max == r.end"
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 351,
          "bound": null
        },
        {
          "cond": "let Some(ascii_range) = r.as_ascii()",
          "norm": null,
          "value": "true",
          "line": 359,
          "bound": null
        }
      ],
      "ret": "Some(Utf8Sequence::One(ascii_range))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        6,
        7,
        8,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        22,
        24,
        25,
        29,
        31,
        17,
        18,
        19,
        21,
        23,
        32,
        33,
        34,
        64,
        65
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "let Some(mut r) = self.range_stack.pop()",
          "norm": null,
          "value": "true",
          "line": 340,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "r.is_valid()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "true",
          "line": 351,
          "bound": null
        },
        {
          "cond": "r.start <= max",
          "norm": "max >= r.start",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 351,
          "bound": null
        },
        {
          "cond": "let Some(ascii_range) = r.as_ascii()",
          "norm": null,
          "value": "true",
          "line": 359,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "true",
          "line": 362,
          "bound": null
        },
        {
          "cond": "(r.start & !m) != (r.end & !m)",
          "norm": "(r.end & !m) != (r.start & !m)",
          "value": "true",
          "line": 364,
          "bound": null
        },
        {
          "cond": "(r.start & m) != 0",
          "norm": null,
          "value": "false",
          "line": 365,
          "bound": null
        },
        {
          "cond": "(r.end & m) != m",
          "norm": null,
          "value": "false",
          "line": 370,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 362,
          "bound": null
        }
      ],
      "ret": "Some(Utf8Sequence::from_encoded_range(\n                    &start[0..n],\n                    &end[0..n],\n                ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        6,
        7,
        8,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        22,
        24,
        30,
        31,
        17,
        18,
        19,
        21,
        23,
        32,
        35,
        36,
        37,
        38,
        39,
        42,
        44,
        45,
        46,
        47,
        51,
        53,
        57,
        37,
        38,
        39,
        41,
        43,
        58,
        59,
        60,
        61,
        64,
        65
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "let Some(mut r) = self.range_stack.pop()",
          "norm": null,
          "value": "true",
          "line": 340,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "r.is_valid()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "true",
          "line": 351,
          "bound": null
        },
        {
          "cond": "r.start <= max",
          "norm": "max >= r.start",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 351,
          "bound": null
        },
        {
          "cond": "let Some(ascii_range) = r.as_ascii()",
          "norm": null,
          "value": "true",
          "line": 359,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "true",
          "line": 362,
          "bound": null
        },
        {
          "cond": "(r.start & !m) != (r.end & !m)",
          "norm": "(r.end & !m) != (r.start & !m)",
          "value": "false",
          "line": 364,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 362,
          "bound": null
        }
      ],
      "ret": "Some(Utf8Sequence::from_encoded_range(\n                    &start[0..n],\n                    &end[0..n],\n                ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        6,
        7,
        8,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        22,
        24,
        30,
        31,
        17,
        18,
        19,
        21,
        23,
        32,
        35,
        36,
        37,
        38,
        39,
        42,
        44,
        45,
        46,
        56,
        57,
        37,
        38,
        39,
        41,
        43,
        58,
        59,
        60,
        61,
        64,
        65
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "let Some(mut r) = self.range_stack.pop()",
          "norm": null,
          "value": "true",
          "line": 340,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "r.is_valid()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "true",
          "line": 351,
          "bound": null
        },
        {
          "cond": "r.start <= max",
          "norm": "max >= r.start",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 351,
          "bound": null
        },
        {
          "cond": "let Some(ascii_range) = r.as_ascii()",
          "norm": null,
          "value": "true",
          "line": 359,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 362,
          "bound": null
        }
      ],
      "ret": "Some(Utf8Sequence::from_encoded_range(\n                    &start[0..n],\n                    &end[0..n],\n                ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        6,
        7,
        8,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        22,
        24,
        30,
        31,
        17,
        18,
        19,
        21,
        23,
        32,
        35,
        36,
        37,
        38,
        39,
        41,
        43,
        58,
        59,
        60,
        61,
        64,
        65
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "let Some(mut r) = self.range_stack.pop()",
          "norm": null,
          "value": "true",
          "line": 340,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "r.is_valid()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "true",
          "line": 351,
          "bound": null
        },
        {
          "cond": "r.start <= max",
          "norm": "max >= r.start",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 351,
          "bound": null
        },
        {
          "cond": "let Some(ascii_range) = r.as_ascii()",
          "norm": null,
          "value": "true",
          "line": 359,
          "bound": null
        }
      ],
      "ret": "Some(Utf8Sequence::One(ascii_range))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        6,
        7,
        8,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        22,
        24,
        30,
        31,
        17,
        18,
        19,
        21,
        23,
        32,
        33,
        34,
        64,
        65
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "let Some(mut r) = self.range_stack.pop()",
          "norm": null,
          "value": "true",
          "line": 340,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "r.is_valid()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 351,
          "bound": null
        },
        {
          "cond": "let Some(ascii_range) = r.as_ascii()",
          "norm": null,
          "value": "true",
          "line": 359,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "true",
          "line": 362,
          "bound": null
        },
        {
          "cond": "(r.start & !m) != (r.end & !m)",
          "norm": "(r.end & !m) != (r.start & !m)",
          "value": "true",
          "line": 364,
          "bound": null
        },
        {
          "cond": "(r.start & m) != 0",
          "norm": null,
          "value": "false",
          "line": 365,
          "bound": null
        },
        {
          "cond": "(r.end & m) != m",
          "norm": null,
          "value": "false",
          "line": 370,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 362,
          "bound": null
        }
      ],
      "ret": "Some(Utf8Sequence::from_encoded_range(\n                    &start[0..n],\n                    &end[0..n],\n                ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        6,
        7,
        8,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        21,
        23,
        32,
        35,
        36,
        37,
        38,
        39,
        42,
        44,
        45,
        46,
        47,
        51,
        53,
        57,
        37,
        38,
        39,
        41,
        43,
        58,
        59,
        60,
        61,
        64,
        65
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "let Some(mut r) = self.range_stack.pop()",
          "norm": null,
          "value": "true",
          "line": 340,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "r.is_valid()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 351,
          "bound": null
        },
        {
          "cond": "let Some(ascii_range) = r.as_ascii()",
          "norm": null,
          "value": "true",
          "line": 359,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "true",
          "line": 362,
          "bound": null
        },
        {
          "cond": "(r.start & !m) != (r.end & !m)",
          "norm": "(r.end & !m) != (r.start & !m)",
          "value": "false",
          "line": 364,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 362,
          "bound": null
        }
      ],
      "ret": "Some(Utf8Sequence::from_encoded_range(\n                    &start[0..n],\n                    &end[0..n],\n                ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        6,
        7,
        8,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        21,
        23,
        32,
        35,
        36,
        37,
        38,
        39,
        42,
        44,
        45,
        46,
        56,
        57,
        37,
        38,
        39,
        41,
        43,
        58,
        59,
        60,
        61,
        64,
        65
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "let Some(mut r) = self.range_stack.pop()",
          "norm": null,
          "value": "true",
          "line": 340,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "r.is_valid()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 351,
          "bound": null
        },
        {
          "cond": "let Some(ascii_range) = r.as_ascii()",
          "norm": null,
          "value": "true",
          "line": 359,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 362,
          "bound": null
        }
      ],
      "ret": "Some(Utf8Sequence::from_encoded_range(\n                    &start[0..n],\n                    &end[0..n],\n                ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        6,
        7,
        8,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        21,
        23,
        32,
        35,
        36,
        37,
        38,
        39,
        41,
        43,
        58,
        59,
        60,
        61,
        64,
        65
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "let Some(mut r) = self.range_stack.pop()",
          "norm": null,
          "value": "true",
          "line": 340,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "r.is_valid()",
          "norm": null,
          "value": "true",
          "line": 348,
          "bound": null
        },
        {
          "cond": "i in 1..MAX_UTF8_BYTES",
          "norm": null,
          "value": "false",
          "line": 351,
          "bound": null
        },
        {
          "cond": "let Some(ascii_range) = r.as_ascii()",
          "norm": null,
          "value": "true",
          "line": 359,
          "bound": null
        }
      ],
      "ret": "Some(Utf8Sequence::One(ascii_range))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        6,
        7,
        8,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        21,
        23,
        32,
        33,
        34,
        64,
        65
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "let Some(mut r) = self.range_stack.pop()",
          "norm": null,
          "value": "true",
          "line": 340,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "let Some((r1, r2)) = r.split()",
          "norm": null,
          "value": "true",
          "line": 342,
          "bound": null
        },
        {
          "cond": "r.is_valid()",
          "norm": null,
          "value": "false",
          "line": 348,
          "bound": null
        },
        {
          "cond": "let Some(mut r) = self.range_stack.pop()",
          "norm": null,
          "value": "true",
          "line": 340,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        6,
        7,
        8,
        12,
        13,
        15,
        1,
        2,
        3,
        63,
        65
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}