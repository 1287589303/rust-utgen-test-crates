{
  "name": "regex_syntax::hir::translate::{impl#4}::visit_class_set_binary_op_post",
  "mod_info": {
    "name": "hir::translate",
    "loc": "regex-syntax/src/hir/mod.rs:44:1:44:19"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/translate.rs:620:5:668:6",
  "doc": "",
  "code": [
    "fn visit_class_set_binary_op_post(",
    "    &mut self,",
    "    op: &ast::ClassSetBinaryOp,",
    ") -> Result<()> {",
    "    use crate::ast::ClassSetBinaryOpKind::*;",
    "",
    "    if self.flags().unicode() {",
    "        let mut rhs = self.pop().unwrap().unwrap_class_unicode();",
    "        let mut lhs = self.pop().unwrap().unwrap_class_unicode();",
    "        let mut cls = self.pop().unwrap().unwrap_class_unicode();",
    "        if self.flags().case_insensitive() {",
    "            rhs.try_case_fold_simple().map_err(|_| {",
    "                self.error(",
    "                    op.rhs.span().clone(),",
    "                    ErrorKind::UnicodeCaseUnavailable,",
    "                )",
    "            })?;",
    "            lhs.try_case_fold_simple().map_err(|_| {",
    "                self.error(",
    "                    op.lhs.span().clone(),",
    "                    ErrorKind::UnicodeCaseUnavailable,",
    "                )",
    "            })?;",
    "        }",
    "        match op.kind {",
    "            Intersection => lhs.intersect(&rhs),",
    "            Difference => lhs.difference(&rhs),",
    "            SymmetricDifference => lhs.symmetric_difference(&rhs),",
    "        }",
    "        cls.union(&lhs);",
    "        self.push(HirFrame::ClassUnicode(cls));",
    "    } else {",
    "        let mut rhs = self.pop().unwrap().unwrap_class_bytes();",
    "        let mut lhs = self.pop().unwrap().unwrap_class_bytes();",
    "        let mut cls = self.pop().unwrap().unwrap_class_bytes();",
    "        if self.flags().case_insensitive() {",
    "            rhs.case_fold_simple();",
    "            lhs.case_fold_simple();",
    "        }",
    "        match op.kind {",
    "            Intersection => lhs.intersect(&rhs),",
    "            Difference => lhs.difference(&rhs),",
    "            SymmetricDifference => lhs.symmetric_difference(&rhs),",
    "        }",
    "        cls.union(&lhs);",
    "        self.push(HirFrame::ClassBytes(cls));",
    "    }",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 14,
    "contra": 0,
    "min_set": 8
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 626,
          "bound": null
        },
        {
          "cond": "self.flags().case_insensitive()",
          "norm": null,
          "value": "true",
          "line": 630,
          "bound": null
        },
        {
          "cond": "rhs.try_case_fold_simple().map_err(|_| {\n                    self.error(\n                        op.rhs.span().clone(),\n                        ErrorKind::UnicodeCaseUnavailable,\n                    )\n                })?",
          "norm": null,
          "value": "Err/None",
          "line": 631,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        22,
        23,
        88,
        89,
        90,
        91,
        92,
        93,
        94
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 626,
          "bound": null
        },
        {
          "cond": "self.flags().case_insensitive()",
          "norm": null,
          "value": "true",
          "line": 630,
          "bound": null
        },
        {
          "cond": "rhs.try_case_fold_simple().map_err(|_| {\n                    self.error(\n                        op.rhs.span().clone(),\n                        ErrorKind::UnicodeCaseUnavailable,\n                    )\n                })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 631,
          "bound": null
        },
        {
          "cond": "lhs.try_case_fold_simple().map_err(|_| {\n                    self.error(\n                        op.lhs.span().clone(),\n                        ErrorKind::UnicodeCaseUnavailable,\n                    )\n                })?",
          "norm": null,
          "value": "Err/None",
          "line": 637,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        24,
        25,
        26,
        27,
        29,
        31,
        32,
        86,
        87,
        90,
        91,
        92,
        93,
        94
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 626,
          "bound": null
        },
        {
          "cond": "self.flags().case_insensitive()",
          "norm": null,
          "value": "true",
          "line": 630,
          "bound": null
        },
        {
          "cond": "rhs.try_case_fold_simple().map_err(|_| {\n                    self.error(\n                        op.rhs.span().clone(),\n                        ErrorKind::UnicodeCaseUnavailable,\n                    )\n                })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 631,
          "bound": null
        },
        {
          "cond": "lhs.try_case_fold_simple().map_err(|_| {\n                    self.error(\n                        op.lhs.span().clone(),\n                        ErrorKind::UnicodeCaseUnavailable,\n                    )\n                })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 637,
          "bound": null
        },
        {
          "cond": "op.kind matches SymmetricDifference",
          "norm": null,
          "value": "true",
          "line": 644,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        24,
        25,
        26,
        27,
        30,
        33,
        35,
        39,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        85,
        94
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 626,
          "bound": null
        },
        {
          "cond": "self.flags().case_insensitive()",
          "norm": null,
          "value": "true",
          "line": 630,
          "bound": null
        },
        {
          "cond": "rhs.try_case_fold_simple().map_err(|_| {\n                    self.error(\n                        op.rhs.span().clone(),\n                        ErrorKind::UnicodeCaseUnavailable,\n                    )\n                })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 631,
          "bound": null
        },
        {
          "cond": "lhs.try_case_fold_simple().map_err(|_| {\n                    self.error(\n                        op.lhs.span().clone(),\n                        ErrorKind::UnicodeCaseUnavailable,\n                    )\n                })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 637,
          "bound": null
        },
        {
          "cond": "op.kind matches Difference",
          "norm": null,
          "value": "true",
          "line": 644,
          "bound": null
        },
        {
          "cond": "op.kind matches Difference",
          "norm": null,
          "value": "true",
          "line": 644,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        24,
        25,
        26,
        27,
        30,
        33,
        35,
        38,
        42,
        43,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        85,
        94
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 626,
          "bound": null
        },
        {
          "cond": "self.flags().case_insensitive()",
          "norm": null,
          "value": "true",
          "line": 630,
          "bound": null
        },
        {
          "cond": "rhs.try_case_fold_simple().map_err(|_| {\n                    self.error(\n                        op.rhs.span().clone(),\n                        ErrorKind::UnicodeCaseUnavailable,\n                    )\n                })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 631,
          "bound": null
        },
        {
          "cond": "lhs.try_case_fold_simple().map_err(|_| {\n                    self.error(\n                        op.lhs.span().clone(),\n                        ErrorKind::UnicodeCaseUnavailable,\n                    )\n                })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 637,
          "bound": null
        },
        {
          "cond": "op.kind matches Intersection",
          "norm": null,
          "value": "true",
          "line": 644,
          "bound": null
        },
        {
          "cond": "op.kind matches Intersection",
          "norm": null,
          "value": "true",
          "line": 644,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        24,
        25,
        26,
        27,
        30,
        33,
        35,
        37,
        40,
        41,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        85,
        94
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 626,
          "bound": null
        },
        {
          "cond": "self.flags().case_insensitive()",
          "norm": null,
          "value": "false",
          "line": 630,
          "bound": null
        },
        {
          "cond": "op.kind matches SymmetricDifference",
          "norm": null,
          "value": "true",
          "line": 644,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        34,
        35,
        39,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        85,
        94
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 626,
          "bound": null
        },
        {
          "cond": "self.flags().case_insensitive()",
          "norm": null,
          "value": "false",
          "line": 630,
          "bound": null
        },
        {
          "cond": "op.kind matches Difference",
          "norm": null,
          "value": "true",
          "line": 644,
          "bound": null
        },
        {
          "cond": "op.kind matches Difference",
          "norm": null,
          "value": "true",
          "line": 644,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        34,
        35,
        38,
        42,
        43,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        85,
        94
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 626,
          "bound": null
        },
        {
          "cond": "self.flags().case_insensitive()",
          "norm": null,
          "value": "false",
          "line": 630,
          "bound": null
        },
        {
          "cond": "op.kind matches Intersection",
          "norm": null,
          "value": "true",
          "line": 644,
          "bound": null
        },
        {
          "cond": "op.kind matches Intersection",
          "norm": null,
          "value": "true",
          "line": 644,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        34,
        35,
        37,
        40,
        41,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        85,
        94
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 626,
          "bound": null
        },
        {
          "cond": "self.flags().case_insensitive()",
          "norm": null,
          "value": "true",
          "line": 655,
          "bound": null
        },
        {
          "cond": "op.kind matches SymmetricDifference",
          "norm": null,
          "value": "true",
          "line": 659,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        68,
        72,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        94
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 626,
          "bound": null
        },
        {
          "cond": "self.flags().case_insensitive()",
          "norm": null,
          "value": "true",
          "line": 655,
          "bound": null
        },
        {
          "cond": "op.kind matches Difference",
          "norm": null,
          "value": "true",
          "line": 659,
          "bound": null
        },
        {
          "cond": "op.kind matches Difference",
          "norm": null,
          "value": "true",
          "line": 659,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        68,
        71,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        94
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 626,
          "bound": null
        },
        {
          "cond": "self.flags().case_insensitive()",
          "norm": null,
          "value": "true",
          "line": 655,
          "bound": null
        },
        {
          "cond": "op.kind matches Intersection",
          "norm": null,
          "value": "true",
          "line": 659,
          "bound": null
        },
        {
          "cond": "op.kind matches Intersection",
          "norm": null,
          "value": "true",
          "line": 659,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        68,
        70,
        73,
        74,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        94
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 626,
          "bound": null
        },
        {
          "cond": "self.flags().case_insensitive()",
          "norm": null,
          "value": "false",
          "line": 655,
          "bound": null
        },
        {
          "cond": "op.kind matches SymmetricDifference",
          "norm": null,
          "value": "true",
          "line": 659,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        67,
        68,
        72,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        94
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 626,
          "bound": null
        },
        {
          "cond": "self.flags().case_insensitive()",
          "norm": null,
          "value": "false",
          "line": 655,
          "bound": null
        },
        {
          "cond": "op.kind matches Difference",
          "norm": null,
          "value": "true",
          "line": 659,
          "bound": null
        },
        {
          "cond": "op.kind matches Difference",
          "norm": null,
          "value": "true",
          "line": 659,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        67,
        68,
        71,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        94
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 626,
          "bound": null
        },
        {
          "cond": "self.flags().case_insensitive()",
          "norm": null,
          "value": "false",
          "line": 655,
          "bound": null
        },
        {
          "cond": "op.kind matches Intersection",
          "norm": null,
          "value": "true",
          "line": 659,
          "bound": null
        },
        {
          "cond": "op.kind matches Intersection",
          "norm": null,
          "value": "true",
          "line": 659,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        67,
        68,
        70,
        73,
        74,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        94
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}