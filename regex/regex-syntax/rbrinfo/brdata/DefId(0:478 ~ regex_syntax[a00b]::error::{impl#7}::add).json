{
  "name": "regex_syntax::error::{impl#7}::add",
  "mod_info": {
    "name": "error",
    "loc": "regex-syntax/src/lib.rs:189:1:189:11"
  },
  "visible": false,
  "loc": "regex-syntax/src/error.rs:182:5:193:6",
  "doc": "/// Add the given span to this sequence, putting it in the right place.\n",
  "code": [
    "fn add(&mut self, span: ast::Span) {",
    "    // This is grossly inefficient since we sort after each add, but right",
    "    // now, we only ever add two spans at most.",
    "    if span.is_one_line() {",
    "        let i = span.start.line - 1; // because lines are 1-indexed",
    "        self.by_line[i].push(span);",
    "        self.by_line[i].sort();",
    "    } else {",
    "        self.multi_line.push(span);",
    "        self.multi_line.sort();",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "span.is_one_line()",
          "norm": null,
          "value": "true",
          "line": 185,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "span.is_one_line()",
          "norm": null,
          "value": "false",
          "line": 185,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        9,
        10,
        11,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}