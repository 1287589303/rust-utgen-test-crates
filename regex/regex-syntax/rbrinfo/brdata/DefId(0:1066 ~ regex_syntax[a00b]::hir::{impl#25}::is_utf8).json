{
  "name": "regex_syntax::hir::{impl#25}::is_utf8",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:2140:5:2142:6",
  "doc": "/// Return true if and only if the corresponding HIR will always match\n/// valid UTF-8.\n///\n/// When this returns false, then it is possible for this HIR expression to\n/// match invalid UTF-8, including by matching between the code units of\n/// a single UTF-8 encoded codepoint.\n///\n/// Note that this returns true even when the corresponding HIR can match\n/// the empty string. Since an empty string can technically appear between\n/// UTF-8 code units, it is possible for a match to be reported that splits\n/// a codepoint which could in turn be considered matching invalid UTF-8.\n/// However, it is generally assumed that such empty matches are handled\n/// specially by the search routine if it is absolutely required that\n/// matches not split a codepoint.\n///\n/// # Example\n///\n/// This code example shows the UTF-8 property of a variety of patterns.\n///\n/// ```\n/// use regex_syntax::{ParserBuilder, parse};\n///\n/// // Examples of 'is_utf8() == true'.\n/// assert!(parse(r\"a\")?.properties().is_utf8());\n/// assert!(parse(r\"[^a]\")?.properties().is_utf8());\n/// assert!(parse(r\".\")?.properties().is_utf8());\n/// assert!(parse(r\"\\W\")?.properties().is_utf8());\n/// assert!(parse(r\"\\b\")?.properties().is_utf8());\n/// assert!(parse(r\"\\B\")?.properties().is_utf8());\n/// assert!(parse(r\"(?-u)\\b\")?.properties().is_utf8());\n/// assert!(parse(r\"(?-u)\\B\")?.properties().is_utf8());\n/// // Unicode mode is enabled by default, and in\n/// // that mode, all \\x hex escapes are treated as\n/// // codepoints. So this actually matches the UTF-8\n/// // encoding of U+00FF.\n/// assert!(parse(r\"\\xFF\")?.properties().is_utf8());\n///\n/// // Now we show examples of 'is_utf8() == false'.\n/// // The only way to do this is to force the parser\n/// // to permit invalid UTF-8, otherwise all of these\n/// // would fail to parse!\n/// let parse = |pattern| {\n///     ParserBuilder::new().utf8(false).build().parse(pattern)\n/// };\n/// assert!(!parse(r\"(?-u)[^a]\")?.properties().is_utf8());\n/// assert!(!parse(r\"(?-u).\")?.properties().is_utf8());\n/// assert!(!parse(r\"(?-u)\\W\")?.properties().is_utf8());\n/// // Conversely to the equivalent example above,\n/// // when Unicode mode is disabled, \\x hex escapes\n/// // are treated as their raw byte values.\n/// assert!(!parse(r\"(?-u)\\xFF\")?.properties().is_utf8());\n/// // Note that just because we disabled UTF-8 in the\n/// // parser doesn't mean we still can't use Unicode.\n/// // It is enabled by default, so \\xFF is still\n/// // equivalent to matching the UTF-8 encoding of\n/// // U+00FF by default.\n/// assert!(parse(r\"\\xFF\")?.properties().is_utf8());\n/// // Even though we use raw bytes that individually\n/// // are not valid UTF-8, when combined together, the\n/// // overall expression *does* match valid UTF-8!\n/// assert!(parse(r\"(?-u)\\xE2\\x98\\x83\")?.properties().is_utf8());\n///\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n",
  "code": [
    "pub fn is_utf8(&self) -> bool {",
    "    self.0.utf8",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self.0.utf8",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}