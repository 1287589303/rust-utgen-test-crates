{
  "name": "regex_syntax::ast::{impl#3}::fmt",
  "mod_info": {
    "name": "ast",
    "loc": "regex-syntax/src/lib.rs:186:1:186:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/ast/mod.rs:202:5:310:6",
  "doc": "",
  "code": [
    "fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {",
    "    use self::ErrorKind::*;",
    "    match *self {",
    "        CaptureLimitExceeded => write!(",
    "            f,",
    "            \"exceeded the maximum number of \\",
    "             capturing groups ({})\",",
    "            u32::MAX",
    "        ),",
    "        ClassEscapeInvalid => {",
    "            write!(f, \"invalid escape sequence found in character class\")",
    "        }",
    "        ClassRangeInvalid => write!(",
    "            f,",
    "            \"invalid character class range, \\",
    "             the start must be <= the end\"",
    "        ),",
    "        ClassRangeLiteral => {",
    "            write!(f, \"invalid range boundary, must be a literal\")",
    "        }",
    "        ClassUnclosed => write!(f, \"unclosed character class\"),",
    "        DecimalEmpty => write!(f, \"decimal literal empty\"),",
    "        DecimalInvalid => write!(f, \"decimal literal invalid\"),",
    "        EscapeHexEmpty => write!(f, \"hexadecimal literal empty\"),",
    "        EscapeHexInvalid => {",
    "            write!(f, \"hexadecimal literal is not a Unicode scalar value\")",
    "        }",
    "        EscapeHexInvalidDigit => write!(f, \"invalid hexadecimal digit\"),",
    "        EscapeUnexpectedEof => write!(",
    "            f,",
    "            \"incomplete escape sequence, \\",
    "             reached end of pattern prematurely\"",
    "        ),",
    "        EscapeUnrecognized => write!(f, \"unrecognized escape sequence\"),",
    "        FlagDanglingNegation => {",
    "            write!(f, \"dangling flag negation operator\")",
    "        }",
    "        FlagDuplicate { .. } => write!(f, \"duplicate flag\"),",
    "        FlagRepeatedNegation { .. } => {",
    "            write!(f, \"flag negation operator repeated\")",
    "        }",
    "        FlagUnexpectedEof => {",
    "            write!(f, \"expected flag but got end of regex\")",
    "        }",
    "        FlagUnrecognized => write!(f, \"unrecognized flag\"),",
    "        GroupNameDuplicate { .. } => {",
    "            write!(f, \"duplicate capture group name\")",
    "        }",
    "        GroupNameEmpty => write!(f, \"empty capture group name\"),",
    "        GroupNameInvalid => write!(f, \"invalid capture group character\"),",
    "        GroupNameUnexpectedEof => write!(f, \"unclosed capture group name\"),",
    "        GroupUnclosed => write!(f, \"unclosed group\"),",
    "        GroupUnopened => write!(f, \"unopened group\"),",
    "        NestLimitExceeded(limit) => write!(",
    "            f,",
    "            \"exceed the maximum number of \\",
    "             nested parentheses/brackets ({})\",",
    "            limit",
    "        ),",
    "        RepetitionCountInvalid => write!(",
    "            f,",
    "            \"invalid repetition count range, \\",
    "             the start must be <= the end\"",
    "        ),",
    "        RepetitionCountDecimalEmpty => {",
    "            write!(f, \"repetition quantifier expects a valid decimal\")",
    "        }",
    "        RepetitionCountUnclosed => {",
    "            write!(f, \"unclosed counted repetition\")",
    "        }",
    "        RepetitionMissing => {",
    "            write!(f, \"repetition operator missing expression\")",
    "        }",
    "        SpecialWordBoundaryUnclosed => {",
    "            write!(",
    "                f,",
    "                \"special word boundary assertion is either \\",
    "                 unclosed or contains an invalid character\",",
    "            )",
    "        }",
    "        SpecialWordBoundaryUnrecognized => {",
    "            write!(",
    "                f,",
    "                \"unrecognized special word boundary assertion, \\",
    "                 valid choices are: start, end, start-half \\",
    "                 or end-half\",",
    "            )",
    "        }",
    "        SpecialWordOrRepetitionUnexpectedEof => {",
    "            write!(",
    "                f,",
    "                \"found either the beginning of a special word \\",
    "                 boundary or a bounded repetition on a \\\\b with \\",
    "                 an opening brace, but no closing brace\",",
    "            )",
    "        }",
    "        UnicodeClassInvalid => {",
    "            write!(f, \"invalid Unicode character class\")",
    "        }",
    "        UnsupportedBackreference => {",
    "            write!(f, \"backreferences are not supported\")",
    "        }",
    "        UnsupportedLookAround => write!(",
    "            f,",
    "            \"look-around, including look-ahead and look-behind, \\",
    "             is not supported\"",
    "        ),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 34,
    "contra": 0,
    "min_set": 34
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*self matches UnsupportedLookAround",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        35,
        137,
        138,
        139
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*self matches UnsupportedBackreference",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "*self matches UnsupportedBackreference",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        34,
        134,
        135,
        136,
        139
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "*self matches UnicodeClassInvalid",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "*self matches UnicodeClassInvalid",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        33,
        131,
        132,
        133,
        139
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "*self matches SpecialWordOrRepetitionUnexpectedEof",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "*self matches SpecialWordOrRepetitionUnexpectedEof",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        32,
        128,
        129,
        130,
        139
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "*self matches SpecialWordBoundaryUnrecognized",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "*self matches SpecialWordBoundaryUnrecognized",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        31,
        125,
        126,
        127,
        139
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "*self matches SpecialWordBoundaryUnclosed",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "*self matches SpecialWordBoundaryUnclosed",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        30,
        122,
        123,
        124,
        139
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "*self matches RepetitionMissing",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "*self matches RepetitionMissing",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        29,
        119,
        120,
        121,
        139
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "*self matches RepetitionCountUnclosed",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "*self matches RepetitionCountUnclosed",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        28,
        116,
        117,
        118,
        139
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "*self matches RepetitionCountDecimalEmpty",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "*self matches RepetitionCountDecimalEmpty",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        27,
        113,
        114,
        115,
        139
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "*self matches RepetitionCountInvalid",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "*self matches RepetitionCountInvalid",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        26,
        110,
        111,
        112,
        139
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "*self matches NestLimitExceeded(limit)",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "*self matches NestLimitExceeded(limit)",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        25,
        106,
        107,
        108,
        109,
        139
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "*self matches GroupUnopened",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "*self matches GroupUnopened",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        24,
        103,
        104,
        105,
        139
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "*self matches GroupUnclosed",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "*self matches GroupUnclosed",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        23,
        100,
        101,
        102,
        139
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "*self matches GroupNameUnexpectedEof",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "*self matches GroupNameUnexpectedEof",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        22,
        97,
        98,
        99,
        139
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "*self matches GroupNameInvalid",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "*self matches GroupNameInvalid",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        21,
        94,
        95,
        96,
        139
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "*self matches GroupNameEmpty",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "*self matches GroupNameEmpty",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        20,
        91,
        92,
        93,
        139
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "*self matches GroupNameDuplicate { .. }",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "*self matches GroupNameDuplicate { .. }",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        19,
        88,
        89,
        90,
        139
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "*self matches FlagUnrecognized",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "*self matches FlagUnrecognized",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        18,
        85,
        86,
        87,
        139
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "*self matches FlagUnexpectedEof",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "*self matches FlagUnexpectedEof",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        17,
        82,
        83,
        84,
        139
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "*self matches FlagRepeatedNegation { .. }",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "*self matches FlagRepeatedNegation { .. }",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        16,
        79,
        80,
        81,
        139
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "*self matches FlagDuplicate { .. }",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "*self matches FlagDuplicate { .. }",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        15,
        76,
        77,
        78,
        139
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "*self matches FlagDanglingNegation",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "*self matches FlagDanglingNegation",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        14,
        73,
        74,
        75,
        139
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "*self matches EscapeUnrecognized",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "*self matches EscapeUnrecognized",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        13,
        70,
        71,
        72,
        139
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "*self matches EscapeUnexpectedEof",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "*self matches EscapeUnexpectedEof",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        12,
        67,
        68,
        69,
        139
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "*self matches EscapeHexInvalidDigit",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "*self matches EscapeHexInvalidDigit",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        11,
        64,
        65,
        66,
        139
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "*self matches EscapeHexInvalid",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "*self matches EscapeHexInvalid",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        10,
        61,
        62,
        63,
        139
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "*self matches EscapeHexEmpty",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "*self matches EscapeHexEmpty",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        9,
        58,
        59,
        60,
        139
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "*self matches DecimalInvalid",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "*self matches DecimalInvalid",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        8,
        55,
        56,
        57,
        139
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 29,
      "conds": [
        {
          "cond": "*self matches DecimalEmpty",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "*self matches DecimalEmpty",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        7,
        52,
        53,
        54,
        139
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 30,
      "conds": [
        {
          "cond": "*self matches ClassUnclosed",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "*self matches ClassUnclosed",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        6,
        49,
        50,
        51,
        139
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 31,
      "conds": [
        {
          "cond": "*self matches ClassRangeLiteral",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "*self matches ClassRangeLiteral",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        46,
        47,
        48,
        139
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 32,
      "conds": [
        {
          "cond": "*self matches ClassRangeInvalid",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "*self matches ClassRangeInvalid",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        43,
        44,
        45,
        139
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 33,
      "conds": [
        {
          "cond": "*self matches ClassEscapeInvalid",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "*self matches ClassEscapeInvalid",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        40,
        41,
        42,
        139
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 34,
      "conds": [
        {
          "cond": "*self matches CaptureLimitExceeded",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "*self matches CaptureLimitExceeded",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        36,
        37,
        38,
        39,
        139
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}