{
  "name": "regex_syntax::hir::literal::{impl#0}::extract_concat",
  "mod_info": {
    "name": "hir::literal",
    "loc": "regex-syntax/src/hir/mod.rs:42:1:42:17"
  },
  "visible": false,
  "loc": "regex-syntax/src/hir/literal.rs:395:5:410:6",
  "doc": "/// Extract a sequence from the given concatenation. Sequences from each of\n/// the child HIR expressions are combined via cross product.\n///\n/// This short circuits once the cross product turns into a sequence\n/// containing only inexact literals.\n",
  "code": [
    "fn extract_concat<'a, I: Iterator<Item = &'a Hir>>(&self, it: I) -> Seq {",
    "    let mut seq = Seq::singleton(self::Literal::exact(vec![]));",
    "    for hir in it {",
    "        // If every element in the sequence is inexact, then a cross",
    "        // product will always be a no-op. Thus, there is nothing else we",
    "        // can add to it and can quit early. Note that this also includes",
    "        // infinite sequences.",
    "        if seq.is_inexact() {",
    "            break;",
    "        }",
    "        // Note that 'cross' also dispatches based on whether we're",
    "        // extracting prefixes or suffixes.",
    "        seq = self.cross(seq, &mut self.extract(hir));",
    "    }",
    "    seq",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 1,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "hir in it",
          "norm": null,
          "value": "true",
          "line": 397,
          "bound": null
        },
        {
          "cond": "seq.is_inexact()",
          "norm": null,
          "value": "true",
          "line": 402,
          "bound": null
        }
      ],
      "ret": "seq",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        12,
        13,
        21,
        22,
        23,
        24,
        25
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "hir in it",
          "norm": null,
          "value": "true",
          "line": 397,
          "bound": null
        },
        {
          "cond": "seq.is_inexact()",
          "norm": null,
          "value": "false",
          "line": 402,
          "bound": null
        },
        {
          "cond": "hir in it",
          "norm": null,
          "value": "false",
          "line": 397,
          "bound": null
        }
      ],
      "ret": "seq",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        12,
        14,
        15,
        16,
        17,
        19,
        20,
        5,
        6,
        7,
        9,
        11,
        21,
        22,
        23,
        24,
        25
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "hir in it",
          "norm": null,
          "value": "false",
          "line": 397,
          "bound": null
        }
      ],
      "ret": "seq",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        11,
        21,
        22,
        23,
        24,
        25
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}