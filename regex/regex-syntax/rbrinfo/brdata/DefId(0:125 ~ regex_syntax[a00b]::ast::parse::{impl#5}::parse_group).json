{
  "name": "regex_syntax::ast::parse::{impl#5}::parse_group",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:1227:5:1289:6",
  "doc": "/// Parse a group (which contains a sub-expression) or a set of flags.\n///\n/// If a group was found, then it is returned with an empty AST. If a set\n/// of flags is found, then that set is returned.\n///\n/// The parser should be positioned at the opening parenthesis.\n///\n/// This advances the parser to the character before the start of the\n/// sub-expression (in the case of a group) or to the closing parenthesis\n/// immediately following the set of flags.\n///\n/// # Errors\n///\n/// If flags are given and incorrectly specified, then a corresponding\n/// error is returned.\n///\n/// If a capture name is given and it is incorrectly specified, then a\n/// corresponding error is returned.\n",
  "code": [
    "fn parse_group(&self) -> Result<Either<ast::SetFlags, ast::Group>> {",
    "    assert_eq!(self.char(), '(');",
    "    let open_span = self.span_char();",
    "    self.bump();",
    "    self.bump_space();",
    "    if self.is_lookaround_prefix() {",
    "        return Err(self.error(",
    "            Span::new(open_span.start, self.span().end),",
    "            ast::ErrorKind::UnsupportedLookAround,",
    "        ));",
    "    }",
    "    let inner_span = self.span();",
    "    let mut starts_with_p = true;",
    "    if self.bump_if(\"?P<\") || {",
    "        starts_with_p = false;",
    "        self.bump_if(\"?<\")",
    "    } {",
    "        let capture_index = self.next_capture_index(open_span)?;",
    "        let name = self.parse_capture_name(capture_index)?;",
    "        Ok(Either::Right(ast::Group {",
    "            span: open_span,",
    "            kind: ast::GroupKind::CaptureName { starts_with_p, name },",
    "            ast: Box::new(Ast::empty(self.span())),",
    "        }))",
    "    } else if self.bump_if(\"?\") {",
    "        if self.is_eof() {",
    "            return Err(",
    "                self.error(open_span, ast::ErrorKind::GroupUnclosed)",
    "            );",
    "        }",
    "        let flags = self.parse_flags()?;",
    "        let char_end = self.char();",
    "        self.bump();",
    "        if char_end == ')' {",
    "            // We don't allow empty flags, e.g., `(?)`. We instead",
    "            // interpret it as a repetition operator missing its argument.",
    "            if flags.items.is_empty() {",
    "                return Err(self.error(",
    "                    inner_span,",
    "                    ast::ErrorKind::RepetitionMissing,",
    "                ));",
    "            }",
    "            Ok(Either::Left(ast::SetFlags {",
    "                span: Span { end: self.pos(), ..open_span },",
    "                flags,",
    "            }))",
    "        } else {",
    "            assert_eq!(char_end, ':');",
    "            Ok(Either::Right(ast::Group {",
    "                span: open_span,",
    "                kind: ast::GroupKind::NonCapturing(flags),",
    "                ast: Box::new(Ast::empty(self.span())),",
    "            }))",
    "        }",
    "    } else {",
    "        let capture_index = self.next_capture_index(open_span)?;",
    "        Ok(Either::Right(ast::Group {",
    "            span: open_span,",
    "            kind: ast::GroupKind::CaptureIndex(capture_index),",
    "            ast: Box::new(Ast::empty(self.span())),",
    "        }))",
    "    }",
    "}"
  ],
  "size": {
    "chain": 16,
    "contra": 1,
    "min_set": 12
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_lookaround_prefix()",
          "norm": null,
          "value": "true",
          "line": 1232,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(open_span.start, self.span().end),\n                ast::ErrorKind::UnsupportedLookAround,\n            ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        119,
        120
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_lookaround_prefix()",
          "norm": null,
          "value": "false",
          "line": 1232,
          "bound": null
        },
        {
          "cond": "self.bump_if(\"?P<\")",
          "norm": null,
          "value": "true",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "self.next_capture_index(open_span)?",
          "norm": null,
          "value": "Err/None",
          "line": 1244,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        13,
        14,
        15,
        16,
        20,
        21,
        22,
        24,
        26,
        27,
        115,
        116,
        117,
        118,
        119,
        120
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_lookaround_prefix()",
          "norm": null,
          "value": "false",
          "line": 1232,
          "bound": null
        },
        {
          "cond": "self.bump_if(\"?P<\")",
          "norm": null,
          "value": "true",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "self.next_capture_index(open_span)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1244,
          "bound": null
        },
        {
          "cond": "self.parse_capture_name(capture_index)?",
          "norm": null,
          "value": "Err/None",
          "line": 1245,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        13,
        14,
        15,
        16,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        32,
        34,
        35,
        113,
        114,
        117,
        118,
        119,
        120
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_lookaround_prefix()",
          "norm": null,
          "value": "false",
          "line": 1232,
          "bound": null
        },
        {
          "cond": "self.bump_if(\"?P<\")",
          "norm": null,
          "value": "true",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "self.next_capture_index(open_span)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1244,
          "bound": null
        },
        {
          "cond": "self.parse_capture_name(capture_index)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        }
      ],
      "ret": "Ok(Either::Right(ast::Group {\n                span: open_span,\n                kind: ast::GroupKind::CaptureName { starts_with_p, name },\n                ast: Box::new(Ast::empty(self.span())),\n            }))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        13,
        14,
        15,
        16,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        33,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        106,
        120
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_lookaround_prefix()",
          "norm": null,
          "value": "false",
          "line": 1232,
          "bound": null
        },
        {
          "cond": "self.bump_if(\"?P<\")",
          "norm": null,
          "value": "false",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "{\n            starts_with_p = false;\n            self.bump_if(\"?<\")\n        }",
          "norm": null,
          "value": "true",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "self.next_capture_index(open_span)?",
          "norm": null,
          "value": "Err/None",
          "line": 1244,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        21,
        22,
        24,
        26,
        27,
        115,
        116,
        117,
        118,
        119,
        120
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_lookaround_prefix()",
          "norm": null,
          "value": "false",
          "line": 1232,
          "bound": null
        },
        {
          "cond": "self.bump_if(\"?P<\")",
          "norm": null,
          "value": "false",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "{\n            starts_with_p = false;\n            self.bump_if(\"?<\")\n        }",
          "norm": null,
          "value": "true",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "self.next_capture_index(open_span)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1244,
          "bound": null
        },
        {
          "cond": "self.parse_capture_name(capture_index)?",
          "norm": null,
          "value": "Err/None",
          "line": 1245,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        32,
        34,
        35,
        113,
        114,
        117,
        118,
        119,
        120
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_lookaround_prefix()",
          "norm": null,
          "value": "false",
          "line": 1232,
          "bound": null
        },
        {
          "cond": "self.bump_if(\"?P<\")",
          "norm": null,
          "value": "false",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "{\n            starts_with_p = false;\n            self.bump_if(\"?<\")\n        }",
          "norm": null,
          "value": "true",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "self.next_capture_index(open_span)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1244,
          "bound": null
        },
        {
          "cond": "self.parse_capture_name(capture_index)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1245,
          "bound": null
        }
      ],
      "ret": "Ok(Either::Right(ast::Group {\n                span: open_span,\n                kind: ast::GroupKind::CaptureName { starts_with_p, name },\n                ast: Box::new(Ast::empty(self.span())),\n            }))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        21,
        22,
        25,
        28,
        29,
        30,
        33,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        106,
        120
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_lookaround_prefix()",
          "norm": null,
          "value": "false",
          "line": 1232,
          "bound": null
        },
        {
          "cond": "self.bump_if(\"?P<\")",
          "norm": null,
          "value": "false",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "{\n            starts_with_p = false;\n            self.bump_if(\"?<\")\n        }",
          "norm": null,
          "value": "false",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "self.bump_if(\"?\")",
          "norm": null,
          "value": "true",
          "line": 1251,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1252,
          "bound": null
        }
      ],
      "ret": "Err(\n                    self.error(open_span, ast::ErrorKind::GroupUnclosed)\n                )",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        13,
        14,
        15,
        17,
        18,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        112,
        118,
        119,
        120
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_lookaround_prefix()",
          "norm": null,
          "value": "false",
          "line": 1232,
          "bound": null
        },
        {
          "cond": "self.bump_if(\"?P<\")",
          "norm": null,
          "value": "false",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "{\n            starts_with_p = false;\n            self.bump_if(\"?<\")\n        }",
          "norm": null,
          "value": "false",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "self.bump_if(\"?\")",
          "norm": null,
          "value": "true",
          "line": 1251,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1252,
          "bound": null
        },
        {
          "cond": "self.parse_flags()?",
          "norm": null,
          "value": "Err/None",
          "line": 1257,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        13,
        14,
        15,
        17,
        18,
        47,
        48,
        49,
        50,
        54,
        55,
        56,
        58,
        60,
        61,
        109,
        110,
        111,
        112,
        118,
        119,
        120
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_lookaround_prefix()",
          "norm": null,
          "value": "false",
          "line": 1232,
          "bound": null
        },
        {
          "cond": "self.bump_if(\"?P<\")",
          "norm": null,
          "value": "false",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "{\n            starts_with_p = false;\n            self.bump_if(\"?<\")\n        }",
          "norm": null,
          "value": "false",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "self.bump_if(\"?\")",
          "norm": null,
          "value": "true",
          "line": 1251,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1252,
          "bound": null
        },
        {
          "cond": "self.parse_flags()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1257,
          "bound": null
        },
        {
          "cond": "char_end == ')'",
          "norm": "')' == char_end",
          "value": "false",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "flags.items.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1263,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                        inner_span,\n                        ast::ErrorKind::RepetitionMissing,\n                    ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        13,
        14,
        15,
        17,
        18,
        47,
        48,
        49,
        50,
        54,
        55,
        56,
        59,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        111,
        112,
        118,
        119,
        120
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_lookaround_prefix()",
          "norm": null,
          "value": "false",
          "line": 1232,
          "bound": null
        },
        {
          "cond": "self.bump_if(\"?P<\")",
          "norm": null,
          "value": "false",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "{\n            starts_with_p = false;\n            self.bump_if(\"?<\")\n        }",
          "norm": null,
          "value": "false",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "self.bump_if(\"?\")",
          "norm": null,
          "value": "true",
          "line": 1251,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1252,
          "bound": null
        },
        {
          "cond": "self.parse_flags()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1257,
          "bound": null
        },
        {
          "cond": "char_end == ')'",
          "norm": "')' == char_end",
          "value": "false",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "flags.items.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1263,
          "bound": null
        }
      ],
      "ret": "Ok(Either::Left(ast::SetFlags {\n                    span: Span { end: self.pos(), ..open_span },\n                    flags,\n                }))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        13,
        14,
        15,
        17,
        18,
        47,
        48,
        49,
        50,
        54,
        55,
        56,
        59,
        62,
        63,
        64,
        65,
        66,
        67,
        71,
        72,
        73,
        74,
        75,
        87,
        88,
        105,
        106,
        120
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_lookaround_prefix()",
          "norm": null,
          "value": "false",
          "line": 1232,
          "bound": null
        },
        {
          "cond": "self.bump_if(\"?P<\")",
          "norm": null,
          "value": "false",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "{\n            starts_with_p = false;\n            self.bump_if(\"?<\")\n        }",
          "norm": null,
          "value": "false",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "self.bump_if(\"?\")",
          "norm": null,
          "value": "true",
          "line": 1251,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1252,
          "bound": null
        },
        {
          "cond": "self.parse_flags()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1257,
          "bound": null
        },
        {
          "cond": "char_end == ')'",
          "norm": "')' == char_end",
          "value": "true",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": "Ok(Either::Right(ast::Group {\n                    span: open_span,\n                    kind: ast::GroupKind::NonCapturing(flags),\n                    ast: Box::new(Ast::empty(self.span())),\n                }))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        13,
        14,
        15,
        17,
        18,
        47,
        48,
        49,
        50,
        54,
        55,
        56,
        59,
        62,
        63,
        64,
        65,
        76,
        77,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        105,
        106,
        120
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_lookaround_prefix()",
          "norm": null,
          "value": "false",
          "line": 1232,
          "bound": null
        },
        {
          "cond": "self.bump_if(\"?P<\")",
          "norm": null,
          "value": "false",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "{\n            starts_with_p = false;\n            self.bump_if(\"?<\")\n        }",
          "norm": null,
          "value": "false",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "self.bump_if(\"?\")",
          "norm": null,
          "value": "true",
          "line": 1251,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1252,
          "bound": null
        },
        {
          "cond": "self.parse_flags()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1257,
          "bound": null
        },
        {
          "cond": "char_end == ')'",
          "norm": "')' == char_end",
          "value": "true",
          "line": 1260,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        13,
        14,
        15,
        17,
        18,
        47,
        48,
        49,
        50,
        54,
        55,
        56,
        59,
        62,
        63,
        64,
        65,
        76,
        78,
        137,
        156
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_lookaround_prefix()",
          "norm": null,
          "value": "false",
          "line": 1232,
          "bound": null
        },
        {
          "cond": "self.bump_if(\"?P<\")",
          "norm": null,
          "value": "false",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "{\n            starts_with_p = false;\n            self.bump_if(\"?<\")\n        }",
          "norm": null,
          "value": "false",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "self.bump_if(\"?\")",
          "norm": null,
          "value": "false",
          "line": 1251,
          "bound": null
        },
        {
          "cond": "self.next_capture_index(open_span)?",
          "norm": null,
          "value": "Err/None",
          "line": 1282,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        13,
        14,
        15,
        17,
        18,
        47,
        48,
        89,
        90,
        91,
        93,
        95,
        96,
        107,
        108,
        112,
        118,
        119,
        120
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.is_lookaround_prefix()",
          "norm": null,
          "value": "false",
          "line": 1232,
          "bound": null
        },
        {
          "cond": "self.bump_if(\"?P<\")",
          "norm": null,
          "value": "false",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "{\n            starts_with_p = false;\n            self.bump_if(\"?<\")\n        }",
          "norm": null,
          "value": "false",
          "line": 1240,
          "bound": null
        },
        {
          "cond": "self.bump_if(\"?\")",
          "norm": null,
          "value": "false",
          "line": 1251,
          "bound": null
        },
        {
          "cond": "self.next_capture_index(open_span)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1282,
          "bound": null
        }
      ],
      "ret": "Ok(Either::Right(ast::Group {\n                span: open_span,\n                kind: ast::GroupKind::CaptureIndex(capture_index),\n                ast: Box::new(Ast::empty(self.span())),\n            }))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        13,
        14,
        15,
        17,
        18,
        47,
        48,
        89,
        90,
        91,
        94,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        120
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        156
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}