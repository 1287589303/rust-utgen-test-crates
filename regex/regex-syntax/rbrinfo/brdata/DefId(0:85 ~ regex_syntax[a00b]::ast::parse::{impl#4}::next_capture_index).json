{
  "name": "regex_syntax::ast::parse::{impl#4}::next_capture_index",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:441:5:448:6",
  "doc": "/// Return the next capturing index. Each subsequent call increments the\n/// internal index.\n///\n/// The span given should correspond to the location of the opening\n/// parenthesis.\n///\n/// If the capture limit is exceeded, then an error is returned.\n",
  "code": [
    "fn next_capture_index(&self, span: Span) -> Result<u32> {",
    "    let current = self.parser().capture_index.get();",
    "    let i = current.checked_add(1).ok_or_else(|| {",
    "        self.error(span, ast::ErrorKind::CaptureLimitExceeded)",
    "    })?;",
    "    self.parser().capture_index.set(i);",
    "    Ok(i)",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "current.checked_add(1).ok_or_else(|| {\n            self.error(span, ast::ErrorKind::CaptureLimitExceeded)\n        })?",
          "norm": null,
          "value": "Err/None",
          "line": 443,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        10,
        14,
        15,
        16
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "current.checked_add(1).ok_or_else(|| {\n            self.error(span, ast::ErrorKind::CaptureLimitExceeded)\n        })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 443,
          "bound": null
        }
      ],
      "ret": "Ok(i)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        16
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}