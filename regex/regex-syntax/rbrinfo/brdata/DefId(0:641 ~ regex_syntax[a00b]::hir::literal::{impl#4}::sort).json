{
  "name": "regex_syntax::hir::literal::{impl#4}::sort",
  "mod_info": {
    "name": "hir::literal",
    "loc": "regex-syntax/src/hir/mod.rs:42:1:42:17"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/literal.rs:1378:5:1382:6",
  "doc": "/// Sorts this sequence of literals lexicographically.\n///\n/// Note that if, before sorting, if a literal that is a prefix of another\n/// literal appears after it, then after sorting, the sequence will not\n/// represent the same preference order match semantics. For example,\n/// sorting the sequence `[samwise, sam]` yields the sequence `[sam,\n/// samwise]`. Under preference order semantics, the latter sequence will\n/// never match `samwise` where as the first sequence can.\n///\n/// # Example\n///\n/// This example shows basic usage.\n///\n/// ```\n/// use regex_syntax::hir::literal::Seq;\n///\n/// let mut seq = Seq::new(&[\"foo\", \"quux\", \"bar\"]);\n/// seq.sort();\n///\n/// assert_eq!(Seq::new(&[\"bar\", \"foo\", \"quux\"]), seq);\n/// ```\n",
  "code": [
    "pub fn sort(&mut self) {",
    "    if let Some(ref mut lits) = self.literals {",
    "        lits.sort();",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(ref mut lits) = self.literals",
          "norm": null,
          "value": "true",
          "line": 1379,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(ref mut lits) = self.literals",
          "norm": null,
          "value": "true",
          "line": 1379,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}