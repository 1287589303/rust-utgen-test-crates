{
  "name": "regex_syntax::ast::parse::{impl#5}::parse_with_comments",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:982:5:1032:6",
  "doc": "/// Parse the regular expression and return an abstract syntax tree with\n/// all of the comments found in the pattern.\n",
  "code": [
    "fn parse_with_comments(&self) -> Result<ast::WithComments> {",
    "    assert_eq!(self.offset(), 0, \"parser can only be used once\");",
    "    self.parser().reset();",
    "    let mut concat = ast::Concat { span: self.span(), asts: vec![] };",
    "    loop {",
    "        self.bump_space();",
    "        if self.is_eof() {",
    "            break;",
    "        }",
    "        match self.char() {",
    "            '(' => concat = self.push_group(concat)?,",
    "            ')' => concat = self.pop_group(concat)?,",
    "            '|' => concat = self.push_alternate(concat)?,",
    "            '[' => {",
    "                let class = self.parse_set_class()?;",
    "                concat.asts.push(Ast::class_bracketed(class));",
    "            }",
    "            '?' => {",
    "                concat = self.parse_uncounted_repetition(",
    "                    concat,",
    "                    ast::RepetitionKind::ZeroOrOne,",
    "                )?;",
    "            }",
    "            '*' => {",
    "                concat = self.parse_uncounted_repetition(",
    "                    concat,",
    "                    ast::RepetitionKind::ZeroOrMore,",
    "                )?;",
    "            }",
    "            '+' => {",
    "                concat = self.parse_uncounted_repetition(",
    "                    concat,",
    "                    ast::RepetitionKind::OneOrMore,",
    "                )?;",
    "            }",
    "            '{' => {",
    "                concat = self.parse_counted_repetition(concat)?;",
    "            }",
    "            _ => concat.asts.push(self.parse_primitive()?.into_ast()),",
    "        }",
    "    }",
    "    let ast = self.pop_group_end(concat)?;",
    "    NestLimiter::new(self).check(&ast)?;",
    "    Ok(ast::WithComments {",
    "        ast,",
    "        comments: mem::replace(",
    "            &mut *self.parser().comments.borrow_mut(),",
    "            vec![],",
    "        ),",
    "    })",
    "}"
  ],
  "size": {
    "chain": 40,
    "contra": 27,
    "min_set": 22
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.pop_group_end(concat)?",
          "norm": null,
          "value": "Err/None",
          "line": 1023,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        142,
        143,
        145,
        147,
        148,
        173,
        174,
        175,
        195,
        196,
        197
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.pop_group_end(concat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1023,
          "bound": null
        },
        {
          "cond": "NestLimiter::new(self).check(&ast)?",
          "norm": null,
          "value": "Err/None",
          "line": 1024,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        142,
        143,
        146,
        149,
        150,
        151,
        152,
        153,
        155,
        157,
        158,
        171,
        172,
        175,
        195,
        196,
        197
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.pop_group_end(concat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1023,
          "bound": null
        },
        {
          "cond": "NestLimiter::new(self).check(&ast)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1024,
          "bound": null
        }
      ],
      "ret": "Ok(ast::WithComments {\n            ast,\n            comments: mem::replace(\n                &mut *self.parser().comments.borrow_mut(),\n                vec![],\n            ),\n        })",
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        142,
        143,
        146,
        149,
        150,
        151,
        152,
        153,
        156,
        159,
        160,
        161,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        197
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches '['",
          "norm": null,
          "value": "true",
          "line": 995,
          "bound": null
        },
        {
          "cond": "self.char() matches '+'",
          "norm": null,
          "value": "true",
          "line": 1011,
          "bound": null
        },
        {
          "cond": "self.char() matches '|'",
          "norm": null,
          "value": "true",
          "line": 994,
          "bound": null
        },
        {
          "cond": "self.char() matches '?'",
          "norm": null,
          "value": "true",
          "line": 999,
          "bound": null
        },
        {
          "cond": "self.char() matches '('",
          "norm": null,
          "value": "true",
          "line": 992,
          "bound": null
        },
        {
          "cond": "self.char() matches '{'",
          "norm": null,
          "value": "true",
          "line": 1017,
          "bound": null
        },
        {
          "cond": "self.char() matches '*'",
          "norm": null,
          "value": "true",
          "line": 1005,
          "bound": null
        },
        {
          "cond": "self.char() matches ')'",
          "norm": null,
          "value": "true",
          "line": 993,
          "bound": null
        },
        {
          "cond": "self.char() matches _",
          "norm": null,
          "value": "true",
          "line": 1020,
          "bound": null
        },
        {
          "cond": "self.parse_primitive()?",
          "norm": null,
          "value": "Err/None",
          "line": 1020,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        17,
        130,
        131,
        133,
        135,
        136,
        176,
        177,
        194,
        195,
        196,
        197
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches '['",
          "norm": null,
          "value": "true",
          "line": 995,
          "bound": null
        },
        {
          "cond": "self.char() matches '+'",
          "norm": null,
          "value": "true",
          "line": 1011,
          "bound": null
        },
        {
          "cond": "self.char() matches '|'",
          "norm": null,
          "value": "true",
          "line": 994,
          "bound": null
        },
        {
          "cond": "self.char() matches '?'",
          "norm": null,
          "value": "true",
          "line": 999,
          "bound": null
        },
        {
          "cond": "self.char() matches '('",
          "norm": null,
          "value": "true",
          "line": 992,
          "bound": null
        },
        {
          "cond": "self.char() matches '{'",
          "norm": null,
          "value": "true",
          "line": 1017,
          "bound": null
        },
        {
          "cond": "self.char() matches '*'",
          "norm": null,
          "value": "true",
          "line": 1005,
          "bound": null
        },
        {
          "cond": "self.char() matches ')'",
          "norm": null,
          "value": "true",
          "line": 993,
          "bound": null
        },
        {
          "cond": "self.char() matches _",
          "norm": null,
          "value": "true",
          "line": 1020,
          "bound": null
        },
        {
          "cond": "self.parse_primitive()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1020,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.pop_group_end(concat)?",
          "norm": null,
          "value": "Err/None",
          "line": 1023,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        17,
        130,
        131,
        134,
        137,
        138,
        139,
        140,
        141,
        10,
        11,
        12,
        13,
        14,
        142,
        143,
        145,
        147,
        148,
        173,
        174,
        175,
        195,
        196,
        197
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches '['",
          "norm": null,
          "value": "true",
          "line": 995,
          "bound": null
        },
        {
          "cond": "self.char() matches '+'",
          "norm": null,
          "value": "true",
          "line": 1011,
          "bound": null
        },
        {
          "cond": "self.char() matches '|'",
          "norm": null,
          "value": "true",
          "line": 994,
          "bound": null
        },
        {
          "cond": "self.char() matches '?'",
          "norm": null,
          "value": "true",
          "line": 999,
          "bound": null
        },
        {
          "cond": "self.char() matches '('",
          "norm": null,
          "value": "true",
          "line": 992,
          "bound": null
        },
        {
          "cond": "self.char() matches '{'",
          "norm": null,
          "value": "true",
          "line": 1017,
          "bound": null
        },
        {
          "cond": "self.char() matches '*'",
          "norm": null,
          "value": "true",
          "line": 1005,
          "bound": null
        },
        {
          "cond": "self.char() matches ')'",
          "norm": null,
          "value": "true",
          "line": 993,
          "bound": null
        },
        {
          "cond": "self.char() matches _",
          "norm": null,
          "value": "true",
          "line": 1020,
          "bound": null
        },
        {
          "cond": "self.parse_primitive()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1020,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.pop_group_end(concat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1023,
          "bound": null
        },
        {
          "cond": "NestLimiter::new(self).check(&ast)?",
          "norm": null,
          "value": "Err/None",
          "line": 1024,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        17,
        130,
        131,
        134,
        137,
        138,
        139,
        140,
        141,
        10,
        11,
        12,
        13,
        14,
        142,
        143,
        146,
        149,
        150,
        151,
        152,
        153,
        155,
        157,
        158,
        171,
        172,
        175,
        195,
        196,
        197
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches '['",
          "norm": null,
          "value": "true",
          "line": 995,
          "bound": null
        },
        {
          "cond": "self.char() matches '+'",
          "norm": null,
          "value": "true",
          "line": 1011,
          "bound": null
        },
        {
          "cond": "self.char() matches '|'",
          "norm": null,
          "value": "true",
          "line": 994,
          "bound": null
        },
        {
          "cond": "self.char() matches '?'",
          "norm": null,
          "value": "true",
          "line": 999,
          "bound": null
        },
        {
          "cond": "self.char() matches '('",
          "norm": null,
          "value": "true",
          "line": 992,
          "bound": null
        },
        {
          "cond": "self.char() matches '{'",
          "norm": null,
          "value": "true",
          "line": 1017,
          "bound": null
        },
        {
          "cond": "self.char() matches '*'",
          "norm": null,
          "value": "true",
          "line": 1005,
          "bound": null
        },
        {
          "cond": "self.char() matches ')'",
          "norm": null,
          "value": "true",
          "line": 993,
          "bound": null
        },
        {
          "cond": "self.char() matches _",
          "norm": null,
          "value": "true",
          "line": 1020,
          "bound": null
        },
        {
          "cond": "self.parse_primitive()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1020,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.pop_group_end(concat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1023,
          "bound": null
        },
        {
          "cond": "NestLimiter::new(self).check(&ast)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1024,
          "bound": null
        }
      ],
      "ret": "Ok(ast::WithComments {\n            ast,\n            comments: mem::replace(\n                &mut *self.parser().comments.borrow_mut(),\n                vec![],\n            ),\n        })",
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        17,
        130,
        131,
        134,
        137,
        138,
        139,
        140,
        141,
        10,
        11,
        12,
        13,
        14,
        142,
        143,
        146,
        149,
        150,
        151,
        152,
        153,
        156,
        159,
        160,
        161,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        197
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches '{'",
          "norm": null,
          "value": "true",
          "line": 1017,
          "bound": null
        },
        {
          "cond": "self.char() matches '{'",
          "norm": null,
          "value": "true",
          "line": 991,
          "bound": null
        },
        {
          "cond": "self.parse_counted_repetition(concat)?",
          "norm": null,
          "value": "Err/None",
          "line": 1018,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        25,
        117,
        118,
        119,
        121,
        123,
        124,
        178,
        179,
        194,
        195,
        196,
        197
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches '{'",
          "norm": null,
          "value": "true",
          "line": 1017,
          "bound": null
        },
        {
          "cond": "self.char() matches '{'",
          "norm": null,
          "value": "true",
          "line": 991,
          "bound": null
        },
        {
          "cond": "self.parse_counted_repetition(concat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1018,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.pop_group_end(concat)?",
          "norm": null,
          "value": "Err/None",
          "line": 1023,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        25,
        117,
        118,
        119,
        122,
        125,
        126,
        128,
        129,
        141,
        10,
        11,
        12,
        13,
        14,
        142,
        143,
        145,
        147,
        148,
        173,
        174,
        175,
        195,
        196,
        197
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches '{'",
          "norm": null,
          "value": "true",
          "line": 1017,
          "bound": null
        },
        {
          "cond": "self.char() matches '{'",
          "norm": null,
          "value": "true",
          "line": 991,
          "bound": null
        },
        {
          "cond": "self.parse_counted_repetition(concat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1018,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.pop_group_end(concat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1023,
          "bound": null
        },
        {
          "cond": "NestLimiter::new(self).check(&ast)?",
          "norm": null,
          "value": "Err/None",
          "line": 1024,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        25,
        117,
        118,
        119,
        122,
        125,
        126,
        128,
        129,
        141,
        10,
        11,
        12,
        13,
        14,
        142,
        143,
        146,
        149,
        150,
        151,
        152,
        153,
        155,
        157,
        158,
        171,
        172,
        175,
        195,
        196,
        197
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches '{'",
          "norm": null,
          "value": "true",
          "line": 1017,
          "bound": null
        },
        {
          "cond": "self.char() matches '{'",
          "norm": null,
          "value": "true",
          "line": 991,
          "bound": null
        },
        {
          "cond": "self.parse_counted_repetition(concat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1018,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.pop_group_end(concat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1023,
          "bound": null
        },
        {
          "cond": "NestLimiter::new(self).check(&ast)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1024,
          "bound": null
        }
      ],
      "ret": "Ok(ast::WithComments {\n            ast,\n            comments: mem::replace(\n                &mut *self.parser().comments.borrow_mut(),\n                vec![],\n            ),\n        })",
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        25,
        117,
        118,
        119,
        122,
        125,
        126,
        128,
        129,
        141,
        10,
        11,
        12,
        13,
        14,
        142,
        143,
        146,
        149,
        150,
        151,
        152,
        153,
        156,
        159,
        160,
        161,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        197
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches '+'",
          "norm": null,
          "value": "true",
          "line": 1011,
          "bound": null
        },
        {
          "cond": "self.char() matches '+'",
          "norm": null,
          "value": "true",
          "line": 991,
          "bound": null
        },
        {
          "cond": "self.parse_uncounted_repetition(\n                        concat,\n                        ast::RepetitionKind::OneOrMore,\n                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 1012,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        24,
        104,
        105,
        106,
        108,
        110,
        111,
        180,
        181,
        194,
        195,
        196,
        197
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches '+'",
          "norm": null,
          "value": "true",
          "line": 1011,
          "bound": null
        },
        {
          "cond": "self.char() matches '+'",
          "norm": null,
          "value": "true",
          "line": 991,
          "bound": null
        },
        {
          "cond": "self.parse_uncounted_repetition(\n                        concat,\n                        ast::RepetitionKind::OneOrMore,\n                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1012,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.pop_group_end(concat)?",
          "norm": null,
          "value": "Err/None",
          "line": 1023,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        24,
        104,
        105,
        106,
        109,
        112,
        113,
        115,
        116,
        141,
        10,
        11,
        12,
        13,
        14,
        142,
        143,
        145,
        147,
        148,
        173,
        174,
        175,
        195,
        196,
        197
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches '+'",
          "norm": null,
          "value": "true",
          "line": 1011,
          "bound": null
        },
        {
          "cond": "self.char() matches '+'",
          "norm": null,
          "value": "true",
          "line": 991,
          "bound": null
        },
        {
          "cond": "self.parse_uncounted_repetition(\n                        concat,\n                        ast::RepetitionKind::OneOrMore,\n                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1012,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.pop_group_end(concat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1023,
          "bound": null
        },
        {
          "cond": "NestLimiter::new(self).check(&ast)?",
          "norm": null,
          "value": "Err/None",
          "line": 1024,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        24,
        104,
        105,
        106,
        109,
        112,
        113,
        115,
        116,
        141,
        10,
        11,
        12,
        13,
        14,
        142,
        143,
        146,
        149,
        150,
        151,
        152,
        153,
        155,
        157,
        158,
        171,
        172,
        175,
        195,
        196,
        197
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches '+'",
          "norm": null,
          "value": "true",
          "line": 1011,
          "bound": null
        },
        {
          "cond": "self.char() matches '+'",
          "norm": null,
          "value": "true",
          "line": 991,
          "bound": null
        },
        {
          "cond": "self.parse_uncounted_repetition(\n                        concat,\n                        ast::RepetitionKind::OneOrMore,\n                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1012,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.pop_group_end(concat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1023,
          "bound": null
        },
        {
          "cond": "NestLimiter::new(self).check(&ast)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1024,
          "bound": null
        }
      ],
      "ret": "Ok(ast::WithComments {\n            ast,\n            comments: mem::replace(\n                &mut *self.parser().comments.borrow_mut(),\n                vec![],\n            ),\n        })",
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        24,
        104,
        105,
        106,
        109,
        112,
        113,
        115,
        116,
        141,
        10,
        11,
        12,
        13,
        14,
        142,
        143,
        146,
        149,
        150,
        151,
        152,
        153,
        156,
        159,
        160,
        161,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        197
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches '*'",
          "norm": null,
          "value": "true",
          "line": 1005,
          "bound": null
        },
        {
          "cond": "self.char() matches '*'",
          "norm": null,
          "value": "true",
          "line": 991,
          "bound": null
        },
        {
          "cond": "self.parse_uncounted_repetition(\n                        concat,\n                        ast::RepetitionKind::ZeroOrMore,\n                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 1006,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        23,
        91,
        92,
        93,
        95,
        97,
        98,
        182,
        183,
        194,
        195,
        196,
        197
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches '*'",
          "norm": null,
          "value": "true",
          "line": 1005,
          "bound": null
        },
        {
          "cond": "self.char() matches '*'",
          "norm": null,
          "value": "true",
          "line": 991,
          "bound": null
        },
        {
          "cond": "self.parse_uncounted_repetition(\n                        concat,\n                        ast::RepetitionKind::ZeroOrMore,\n                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1006,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.pop_group_end(concat)?",
          "norm": null,
          "value": "Err/None",
          "line": 1023,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        23,
        91,
        92,
        93,
        96,
        99,
        100,
        102,
        103,
        141,
        10,
        11,
        12,
        13,
        14,
        142,
        143,
        145,
        147,
        148,
        173,
        174,
        175,
        195,
        196,
        197
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches '*'",
          "norm": null,
          "value": "true",
          "line": 1005,
          "bound": null
        },
        {
          "cond": "self.char() matches '*'",
          "norm": null,
          "value": "true",
          "line": 991,
          "bound": null
        },
        {
          "cond": "self.parse_uncounted_repetition(\n                        concat,\n                        ast::RepetitionKind::ZeroOrMore,\n                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1006,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.pop_group_end(concat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1023,
          "bound": null
        },
        {
          "cond": "NestLimiter::new(self).check(&ast)?",
          "norm": null,
          "value": "Err/None",
          "line": 1024,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        23,
        91,
        92,
        93,
        96,
        99,
        100,
        102,
        103,
        141,
        10,
        11,
        12,
        13,
        14,
        142,
        143,
        146,
        149,
        150,
        151,
        152,
        153,
        155,
        157,
        158,
        171,
        172,
        175,
        195,
        196,
        197
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches '*'",
          "norm": null,
          "value": "true",
          "line": 1005,
          "bound": null
        },
        {
          "cond": "self.char() matches '*'",
          "norm": null,
          "value": "true",
          "line": 991,
          "bound": null
        },
        {
          "cond": "self.parse_uncounted_repetition(\n                        concat,\n                        ast::RepetitionKind::ZeroOrMore,\n                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1006,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.pop_group_end(concat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1023,
          "bound": null
        },
        {
          "cond": "NestLimiter::new(self).check(&ast)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1024,
          "bound": null
        }
      ],
      "ret": "Ok(ast::WithComments {\n            ast,\n            comments: mem::replace(\n                &mut *self.parser().comments.borrow_mut(),\n                vec![],\n            ),\n        })",
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        23,
        91,
        92,
        93,
        96,
        99,
        100,
        102,
        103,
        141,
        10,
        11,
        12,
        13,
        14,
        142,
        143,
        146,
        149,
        150,
        151,
        152,
        153,
        156,
        159,
        160,
        161,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        197
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches '?'",
          "norm": null,
          "value": "true",
          "line": 999,
          "bound": null
        },
        {
          "cond": "self.char() matches '?'",
          "norm": null,
          "value": "true",
          "line": 991,
          "bound": null
        },
        {
          "cond": "self.parse_uncounted_repetition(\n                        concat,\n                        ast::RepetitionKind::ZeroOrOne,\n                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 1000,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        22,
        78,
        79,
        80,
        82,
        84,
        85,
        184,
        185,
        194,
        195,
        196,
        197
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches '?'",
          "norm": null,
          "value": "true",
          "line": 999,
          "bound": null
        },
        {
          "cond": "self.char() matches '?'",
          "norm": null,
          "value": "true",
          "line": 991,
          "bound": null
        },
        {
          "cond": "self.parse_uncounted_repetition(\n                        concat,\n                        ast::RepetitionKind::ZeroOrOne,\n                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1000,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.pop_group_end(concat)?",
          "norm": null,
          "value": "Err/None",
          "line": 1023,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        22,
        78,
        79,
        80,
        83,
        86,
        87,
        89,
        90,
        141,
        10,
        11,
        12,
        13,
        14,
        142,
        143,
        145,
        147,
        148,
        173,
        174,
        175,
        195,
        196,
        197
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches '?'",
          "norm": null,
          "value": "true",
          "line": 999,
          "bound": null
        },
        {
          "cond": "self.char() matches '?'",
          "norm": null,
          "value": "true",
          "line": 991,
          "bound": null
        },
        {
          "cond": "self.parse_uncounted_repetition(\n                        concat,\n                        ast::RepetitionKind::ZeroOrOne,\n                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1000,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.pop_group_end(concat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1023,
          "bound": null
        },
        {
          "cond": "NestLimiter::new(self).check(&ast)?",
          "norm": null,
          "value": "Err/None",
          "line": 1024,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        22,
        78,
        79,
        80,
        83,
        86,
        87,
        89,
        90,
        141,
        10,
        11,
        12,
        13,
        14,
        142,
        143,
        146,
        149,
        150,
        151,
        152,
        153,
        155,
        157,
        158,
        171,
        172,
        175,
        195,
        196,
        197
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches '?'",
          "norm": null,
          "value": "true",
          "line": 999,
          "bound": null
        },
        {
          "cond": "self.char() matches '?'",
          "norm": null,
          "value": "true",
          "line": 991,
          "bound": null
        },
        {
          "cond": "self.parse_uncounted_repetition(\n                        concat,\n                        ast::RepetitionKind::ZeroOrOne,\n                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1000,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.pop_group_end(concat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1023,
          "bound": null
        },
        {
          "cond": "NestLimiter::new(self).check(&ast)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1024,
          "bound": null
        }
      ],
      "ret": "Ok(ast::WithComments {\n            ast,\n            comments: mem::replace(\n                &mut *self.parser().comments.borrow_mut(),\n                vec![],\n            ),\n        })",
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        22,
        78,
        79,
        80,
        83,
        86,
        87,
        89,
        90,
        141,
        10,
        11,
        12,
        13,
        14,
        142,
        143,
        146,
        149,
        150,
        151,
        152,
        153,
        156,
        159,
        160,
        161,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        197
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches '['",
          "norm": null,
          "value": "true",
          "line": 995,
          "bound": null
        },
        {
          "cond": "self.char() matches '['",
          "norm": null,
          "value": "true",
          "line": 991,
          "bound": null
        },
        {
          "cond": "self.parse_set_class()?",
          "norm": null,
          "value": "Err/None",
          "line": 996,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        21,
        65,
        66,
        67,
        69,
        71,
        72,
        186,
        187,
        194,
        195,
        196,
        197
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches '['",
          "norm": null,
          "value": "true",
          "line": 995,
          "bound": null
        },
        {
          "cond": "self.char() matches '['",
          "norm": null,
          "value": "true",
          "line": 991,
          "bound": null
        },
        {
          "cond": "self.parse_set_class()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 996,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.pop_group_end(concat)?",
          "norm": null,
          "value": "Err/None",
          "line": 1023,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        21,
        65,
        66,
        67,
        70,
        73,
        74,
        75,
        76,
        77,
        141,
        10,
        11,
        12,
        13,
        14,
        142,
        143,
        145,
        147,
        148,
        173,
        174,
        175,
        195,
        196,
        197
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches '['",
          "norm": null,
          "value": "true",
          "line": 995,
          "bound": null
        },
        {
          "cond": "self.char() matches '['",
          "norm": null,
          "value": "true",
          "line": 991,
          "bound": null
        },
        {
          "cond": "self.parse_set_class()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 996,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.pop_group_end(concat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1023,
          "bound": null
        },
        {
          "cond": "NestLimiter::new(self).check(&ast)?",
          "norm": null,
          "value": "Err/None",
          "line": 1024,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        21,
        65,
        66,
        67,
        70,
        73,
        74,
        75,
        76,
        77,
        141,
        10,
        11,
        12,
        13,
        14,
        142,
        143,
        146,
        149,
        150,
        151,
        152,
        153,
        155,
        157,
        158,
        171,
        172,
        175,
        195,
        196,
        197
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches '['",
          "norm": null,
          "value": "true",
          "line": 995,
          "bound": null
        },
        {
          "cond": "self.char() matches '['",
          "norm": null,
          "value": "true",
          "line": 991,
          "bound": null
        },
        {
          "cond": "self.parse_set_class()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 996,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.pop_group_end(concat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1023,
          "bound": null
        },
        {
          "cond": "NestLimiter::new(self).check(&ast)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1024,
          "bound": null
        }
      ],
      "ret": "Ok(ast::WithComments {\n            ast,\n            comments: mem::replace(\n                &mut *self.parser().comments.borrow_mut(),\n                vec![],\n            ),\n        })",
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        21,
        65,
        66,
        67,
        70,
        73,
        74,
        75,
        76,
        77,
        141,
        10,
        11,
        12,
        13,
        14,
        142,
        143,
        146,
        149,
        150,
        151,
        152,
        153,
        156,
        159,
        160,
        161,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        197
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches '|'",
          "norm": null,
          "value": "true",
          "line": 994,
          "bound": null
        },
        {
          "cond": "self.char() matches '|'",
          "norm": null,
          "value": "true",
          "line": 991,
          "bound": null
        },
        {
          "cond": "self.push_alternate(concat)?",
          "norm": null,
          "value": "Err/None",
          "line": 994,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        20,
        52,
        53,
        54,
        56,
        58,
        59,
        188,
        189,
        194,
        195,
        196,
        197
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 29,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches '|'",
          "norm": null,
          "value": "true",
          "line": 994,
          "bound": null
        },
        {
          "cond": "self.char() matches '|'",
          "norm": null,
          "value": "true",
          "line": 991,
          "bound": null
        },
        {
          "cond": "self.push_alternate(concat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 994,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.pop_group_end(concat)?",
          "norm": null,
          "value": "Err/None",
          "line": 1023,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        20,
        52,
        53,
        54,
        57,
        60,
        61,
        63,
        64,
        141,
        10,
        11,
        12,
        13,
        14,
        142,
        143,
        145,
        147,
        148,
        173,
        174,
        175,
        195,
        196,
        197
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 30,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches '|'",
          "norm": null,
          "value": "true",
          "line": 994,
          "bound": null
        },
        {
          "cond": "self.char() matches '|'",
          "norm": null,
          "value": "true",
          "line": 991,
          "bound": null
        },
        {
          "cond": "self.push_alternate(concat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 994,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.pop_group_end(concat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1023,
          "bound": null
        },
        {
          "cond": "NestLimiter::new(self).check(&ast)?",
          "norm": null,
          "value": "Err/None",
          "line": 1024,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        20,
        52,
        53,
        54,
        57,
        60,
        61,
        63,
        64,
        141,
        10,
        11,
        12,
        13,
        14,
        142,
        143,
        146,
        149,
        150,
        151,
        152,
        153,
        155,
        157,
        158,
        171,
        172,
        175,
        195,
        196,
        197
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 31,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches '|'",
          "norm": null,
          "value": "true",
          "line": 994,
          "bound": null
        },
        {
          "cond": "self.char() matches '|'",
          "norm": null,
          "value": "true",
          "line": 991,
          "bound": null
        },
        {
          "cond": "self.push_alternate(concat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 994,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.pop_group_end(concat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1023,
          "bound": null
        },
        {
          "cond": "NestLimiter::new(self).check(&ast)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1024,
          "bound": null
        }
      ],
      "ret": "Ok(ast::WithComments {\n            ast,\n            comments: mem::replace(\n                &mut *self.parser().comments.borrow_mut(),\n                vec![],\n            ),\n        })",
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        20,
        52,
        53,
        54,
        57,
        60,
        61,
        63,
        64,
        141,
        10,
        11,
        12,
        13,
        14,
        142,
        143,
        146,
        149,
        150,
        151,
        152,
        153,
        156,
        159,
        160,
        161,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        197
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 32,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches ')'",
          "norm": null,
          "value": "true",
          "line": 993,
          "bound": null
        },
        {
          "cond": "self.char() matches ')'",
          "norm": null,
          "value": "true",
          "line": 991,
          "bound": null
        },
        {
          "cond": "self.pop_group(concat)?",
          "norm": null,
          "value": "Err/None",
          "line": 993,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        19,
        39,
        40,
        41,
        43,
        45,
        46,
        190,
        191,
        194,
        195,
        196,
        197
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 33,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches ')'",
          "norm": null,
          "value": "true",
          "line": 993,
          "bound": null
        },
        {
          "cond": "self.char() matches ')'",
          "norm": null,
          "value": "true",
          "line": 991,
          "bound": null
        },
        {
          "cond": "self.pop_group(concat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 993,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.pop_group_end(concat)?",
          "norm": null,
          "value": "Err/None",
          "line": 1023,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        19,
        39,
        40,
        41,
        44,
        47,
        48,
        50,
        51,
        141,
        10,
        11,
        12,
        13,
        14,
        142,
        143,
        145,
        147,
        148,
        173,
        174,
        175,
        195,
        196,
        197
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 34,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches ')'",
          "norm": null,
          "value": "true",
          "line": 993,
          "bound": null
        },
        {
          "cond": "self.char() matches ')'",
          "norm": null,
          "value": "true",
          "line": 991,
          "bound": null
        },
        {
          "cond": "self.pop_group(concat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 993,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.pop_group_end(concat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1023,
          "bound": null
        },
        {
          "cond": "NestLimiter::new(self).check(&ast)?",
          "norm": null,
          "value": "Err/None",
          "line": 1024,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        19,
        39,
        40,
        41,
        44,
        47,
        48,
        50,
        51,
        141,
        10,
        11,
        12,
        13,
        14,
        142,
        143,
        146,
        149,
        150,
        151,
        152,
        153,
        155,
        157,
        158,
        171,
        172,
        175,
        195,
        196,
        197
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 35,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches ')'",
          "norm": null,
          "value": "true",
          "line": 993,
          "bound": null
        },
        {
          "cond": "self.char() matches ')'",
          "norm": null,
          "value": "true",
          "line": 991,
          "bound": null
        },
        {
          "cond": "self.pop_group(concat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 993,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.pop_group_end(concat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1023,
          "bound": null
        },
        {
          "cond": "NestLimiter::new(self).check(&ast)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1024,
          "bound": null
        }
      ],
      "ret": "Ok(ast::WithComments {\n            ast,\n            comments: mem::replace(\n                &mut *self.parser().comments.borrow_mut(),\n                vec![],\n            ),\n        })",
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        19,
        39,
        40,
        41,
        44,
        47,
        48,
        50,
        51,
        141,
        10,
        11,
        12,
        13,
        14,
        142,
        143,
        146,
        149,
        150,
        151,
        152,
        153,
        156,
        159,
        160,
        161,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        197
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 36,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches '('",
          "norm": null,
          "value": "true",
          "line": 992,
          "bound": null
        },
        {
          "cond": "self.char() matches '('",
          "norm": null,
          "value": "true",
          "line": 991,
          "bound": null
        },
        {
          "cond": "self.push_group(concat)?",
          "norm": null,
          "value": "Err/None",
          "line": 992,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        18,
        26,
        27,
        28,
        30,
        32,
        33,
        192,
        193,
        194,
        195,
        196,
        197
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 37,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches '('",
          "norm": null,
          "value": "true",
          "line": 992,
          "bound": null
        },
        {
          "cond": "self.char() matches '('",
          "norm": null,
          "value": "true",
          "line": 991,
          "bound": null
        },
        {
          "cond": "self.push_group(concat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 992,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.pop_group_end(concat)?",
          "norm": null,
          "value": "Err/None",
          "line": 1023,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        18,
        26,
        27,
        28,
        31,
        34,
        35,
        37,
        38,
        141,
        10,
        11,
        12,
        13,
        14,
        142,
        143,
        145,
        147,
        148,
        173,
        174,
        175,
        195,
        196,
        197
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 38,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches '('",
          "norm": null,
          "value": "true",
          "line": 992,
          "bound": null
        },
        {
          "cond": "self.char() matches '('",
          "norm": null,
          "value": "true",
          "line": 991,
          "bound": null
        },
        {
          "cond": "self.push_group(concat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 992,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.pop_group_end(concat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1023,
          "bound": null
        },
        {
          "cond": "NestLimiter::new(self).check(&ast)?",
          "norm": null,
          "value": "Err/None",
          "line": 1024,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        18,
        26,
        27,
        28,
        31,
        34,
        35,
        37,
        38,
        141,
        10,
        11,
        12,
        13,
        14,
        142,
        143,
        146,
        149,
        150,
        151,
        152,
        153,
        155,
        157,
        158,
        171,
        172,
        175,
        195,
        196,
        197
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 39,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.char() matches '('",
          "norm": null,
          "value": "true",
          "line": 992,
          "bound": null
        },
        {
          "cond": "self.char() matches '('",
          "norm": null,
          "value": "true",
          "line": 991,
          "bound": null
        },
        {
          "cond": "self.push_group(concat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 992,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 988,
          "bound": null
        },
        {
          "cond": "self.pop_group_end(concat)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1023,
          "bound": null
        },
        {
          "cond": "NestLimiter::new(self).check(&ast)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1024,
          "bound": null
        }
      ],
      "ret": "Ok(ast::WithComments {\n            ast,\n            comments: mem::replace(\n                &mut *self.parser().comments.borrow_mut(),\n                vec![],\n            ),\n        })",
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        18,
        26,
        27,
        28,
        31,
        34,
        35,
        37,
        38,
        141,
        10,
        11,
        12,
        13,
        14,
        142,
        143,
        146,
        149,
        150,
        151,
        152,
        153,
        156,
        159,
        160,
        161,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        197
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 40,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 53,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        265
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}