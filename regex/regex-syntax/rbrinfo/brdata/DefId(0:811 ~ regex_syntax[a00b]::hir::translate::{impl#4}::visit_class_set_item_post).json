{
  "name": "regex_syntax::hir::translate::{impl#4}::visit_class_set_item_post",
  "mod_info": {
    "name": "hir::translate",
    "loc": "regex-syntax/src/hir/mod.rs:44:1:44:19"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/translate.rs:498:5:590:6",
  "doc": "",
  "code": [
    "fn visit_class_set_item_post(",
    "    &mut self,",
    "    ast: &ast::ClassSetItem,",
    ") -> Result<()> {",
    "    match *ast {",
    "        ast::ClassSetItem::Empty(_) => {}",
    "        ast::ClassSetItem::Literal(ref x) => {",
    "            if self.flags().unicode() {",
    "                let mut cls = self.pop().unwrap().unwrap_class_unicode();",
    "                cls.push(hir::ClassUnicodeRange::new(x.c, x.c));",
    "                self.push(HirFrame::ClassUnicode(cls));",
    "            } else {",
    "                let mut cls = self.pop().unwrap().unwrap_class_bytes();",
    "                let byte = self.class_literal_byte(x)?;",
    "                cls.push(hir::ClassBytesRange::new(byte, byte));",
    "                self.push(HirFrame::ClassBytes(cls));",
    "            }",
    "        }",
    "        ast::ClassSetItem::Range(ref x) => {",
    "            if self.flags().unicode() {",
    "                let mut cls = self.pop().unwrap().unwrap_class_unicode();",
    "                cls.push(hir::ClassUnicodeRange::new(x.start.c, x.end.c));",
    "                self.push(HirFrame::ClassUnicode(cls));",
    "            } else {",
    "                let mut cls = self.pop().unwrap().unwrap_class_bytes();",
    "                let start = self.class_literal_byte(&x.start)?;",
    "                let end = self.class_literal_byte(&x.end)?;",
    "                cls.push(hir::ClassBytesRange::new(start, end));",
    "                self.push(HirFrame::ClassBytes(cls));",
    "            }",
    "        }",
    "        ast::ClassSetItem::Ascii(ref x) => {",
    "            if self.flags().unicode() {",
    "                let xcls = self.hir_ascii_unicode_class(x)?;",
    "                let mut cls = self.pop().unwrap().unwrap_class_unicode();",
    "                cls.union(&xcls);",
    "                self.push(HirFrame::ClassUnicode(cls));",
    "            } else {",
    "                let xcls = self.hir_ascii_byte_class(x)?;",
    "                let mut cls = self.pop().unwrap().unwrap_class_bytes();",
    "                cls.union(&xcls);",
    "                self.push(HirFrame::ClassBytes(cls));",
    "            }",
    "        }",
    "        ast::ClassSetItem::Unicode(ref x) => {",
    "            let xcls = self.hir_unicode_class(x)?;",
    "            let mut cls = self.pop().unwrap().unwrap_class_unicode();",
    "            cls.union(&xcls);",
    "            self.push(HirFrame::ClassUnicode(cls));",
    "        }",
    "        ast::ClassSetItem::Perl(ref x) => {",
    "            if self.flags().unicode() {",
    "                let xcls = self.hir_perl_unicode_class(x)?;",
    "                let mut cls = self.pop().unwrap().unwrap_class_unicode();",
    "                cls.union(&xcls);",
    "                self.push(HirFrame::ClassUnicode(cls));",
    "            } else {",
    "                let xcls = self.hir_perl_byte_class(x)?;",
    "                let mut cls = self.pop().unwrap().unwrap_class_bytes();",
    "                cls.union(&xcls);",
    "                self.push(HirFrame::ClassBytes(cls));",
    "            }",
    "        }",
    "        ast::ClassSetItem::Bracketed(ref ast) => {",
    "            if self.flags().unicode() {",
    "                let mut cls1 = self.pop().unwrap().unwrap_class_unicode();",
    "                self.unicode_fold_and_negate(",
    "                    &ast.span,",
    "                    ast.negated,",
    "                    &mut cls1,",
    "                )?;",
    "",
    "                let mut cls2 = self.pop().unwrap().unwrap_class_unicode();",
    "                cls2.union(&cls1);",
    "                self.push(HirFrame::ClassUnicode(cls2));",
    "            } else {",
    "                let mut cls1 = self.pop().unwrap().unwrap_class_bytes();",
    "                self.bytes_fold_and_negate(",
    "                    &ast.span,",
    "                    ast.negated,",
    "                    &mut cls1,",
    "                )?;",
    "",
    "                let mut cls2 = self.pop().unwrap().unwrap_class_bytes();",
    "                cls2.union(&cls1);",
    "                self.push(HirFrame::ClassBytes(cls2));",
    "            }",
    "        }",
    "        // This is handled automatically by the visitor.",
    "        ast::ClassSetItem::Union(_) => {}",
    "    }",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 23,
    "contra": 0,
    "min_set": 23
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*ast matches ast::ClassSetItem::Union(_)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        9,
        221,
        251
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*ast matches ast::ClassSetItem::Bracketed(ref ast)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "*ast matches ast::ClassSetItem::Bracketed(ref ast)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 562,
          "bound": null
        },
        {
          "cond": "self.unicode_fold_and_negate(\n                        &ast.span,\n                        ast.negated,\n                        &mut cls1,\n                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 564,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        8,
        177,
        178,
        179,
        180,
        181,
        182,
        183,
        184,
        185,
        187,
        189,
        190,
        225,
        226,
        227,
        228,
        250,
        251
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "*ast matches ast::ClassSetItem::Bracketed(ref ast)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "*ast matches ast::ClassSetItem::Bracketed(ref ast)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 562,
          "bound": null
        },
        {
          "cond": "self.unicode_fold_and_negate(\n                        &ast.span,\n                        ast.negated,\n                        &mut cls1,\n                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 564,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        8,
        177,
        178,
        179,
        180,
        181,
        182,
        183,
        184,
        185,
        188,
        191,
        192,
        193,
        194,
        195,
        196,
        197,
        198,
        199,
        220,
        221,
        251
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "*ast matches ast::ClassSetItem::Bracketed(ref ast)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "*ast matches ast::ClassSetItem::Bracketed(ref ast)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 562,
          "bound": null
        },
        {
          "cond": "self.bytes_fold_and_negate(\n                        &ast.span,\n                        ast.negated,\n                        &mut cls1,\n                    )?",
          "norm": null,
          "value": "Err/None",
          "line": 575,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        8,
        177,
        178,
        179,
        200,
        201,
        202,
        203,
        204,
        205,
        207,
        209,
        210,
        222,
        223,
        224,
        228,
        250,
        251
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "*ast matches ast::ClassSetItem::Bracketed(ref ast)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "*ast matches ast::ClassSetItem::Bracketed(ref ast)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 562,
          "bound": null
        },
        {
          "cond": "self.bytes_fold_and_negate(\n                        &ast.span,\n                        ast.negated,\n                        &mut cls1,\n                    )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 575,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        8,
        177,
        178,
        179,
        200,
        201,
        202,
        203,
        204,
        205,
        208,
        211,
        212,
        213,
        214,
        215,
        216,
        217,
        218,
        219,
        220,
        221,
        251
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "*ast matches ast::ClassSetItem::Perl(ref x)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "*ast matches ast::ClassSetItem::Perl(ref x)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 549,
          "bound": null
        },
        {
          "cond": "self.hir_perl_unicode_class(x)?",
          "norm": null,
          "value": "Err/None",
          "line": 550,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        7,
        137,
        138,
        139,
        140,
        141,
        142,
        144,
        146,
        147,
        231,
        232,
        233,
        250,
        251
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "*ast matches ast::ClassSetItem::Perl(ref x)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "*ast matches ast::ClassSetItem::Perl(ref x)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 549,
          "bound": null
        },
        {
          "cond": "self.hir_perl_unicode_class(x)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 550,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        7,
        137,
        138,
        139,
        140,
        141,
        142,
        145,
        148,
        149,
        150,
        151,
        152,
        153,
        154,
        155,
        156,
        157,
        176,
        221,
        251
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "*ast matches ast::ClassSetItem::Perl(ref x)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "*ast matches ast::ClassSetItem::Perl(ref x)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 549,
          "bound": null
        },
        {
          "cond": "self.hir_perl_byte_class(x)?",
          "norm": null,
          "value": "Err/None",
          "line": 555,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        7,
        137,
        138,
        139,
        158,
        159,
        160,
        162,
        164,
        165,
        229,
        230,
        233,
        250,
        251
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "*ast matches ast::ClassSetItem::Perl(ref x)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "*ast matches ast::ClassSetItem::Perl(ref x)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 549,
          "bound": null
        },
        {
          "cond": "self.hir_perl_byte_class(x)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 555,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        7,
        137,
        138,
        139,
        158,
        159,
        160,
        163,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        173,
        174,
        175,
        176,
        221,
        251
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "*ast matches ast::ClassSetItem::Unicode(ref x)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "*ast matches ast::ClassSetItem::Unicode(ref x)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "self.hir_unicode_class(x)?",
          "norm": null,
          "value": "Err/None",
          "line": 543,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        6,
        119,
        120,
        121,
        123,
        125,
        126,
        234,
        235,
        250,
        251
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "*ast matches ast::ClassSetItem::Unicode(ref x)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "*ast matches ast::ClassSetItem::Unicode(ref x)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "self.hir_unicode_class(x)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 543,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        6,
        119,
        120,
        121,
        124,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        221,
        251
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "*ast matches ast::ClassSetItem::Ascii(ref x)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "*ast matches ast::ClassSetItem::Ascii(ref x)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 530,
          "bound": null
        },
        {
          "cond": "self.hir_ascii_unicode_class(x)?",
          "norm": null,
          "value": "Err/None",
          "line": 531,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        79,
        80,
        81,
        82,
        83,
        84,
        86,
        88,
        89,
        238,
        239,
        240,
        250,
        251
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "*ast matches ast::ClassSetItem::Ascii(ref x)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "*ast matches ast::ClassSetItem::Ascii(ref x)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 530,
          "bound": null
        },
        {
          "cond": "self.hir_ascii_unicode_class(x)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 531,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        5,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        118,
        221,
        251
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "*ast matches ast::ClassSetItem::Ascii(ref x)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "*ast matches ast::ClassSetItem::Ascii(ref x)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 530,
          "bound": null
        },
        {
          "cond": "self.hir_ascii_byte_class(x)?",
          "norm": null,
          "value": "Err/None",
          "line": 536,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        79,
        80,
        81,
        100,
        101,
        102,
        104,
        106,
        107,
        236,
        237,
        240,
        250,
        251
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "*ast matches ast::ClassSetItem::Ascii(ref x)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "*ast matches ast::ClassSetItem::Ascii(ref x)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 530,
          "bound": null
        },
        {
          "cond": "self.hir_ascii_byte_class(x)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 536,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        5,
        79,
        80,
        81,
        100,
        101,
        102,
        105,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        221,
        251
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "*ast matches ast::ClassSetItem::Range(ref x)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "*ast matches ast::ClassSetItem::Range(ref x)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 517,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        4,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        78,
        221,
        251
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "*ast matches ast::ClassSetItem::Range(ref x)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "*ast matches ast::ClassSetItem::Range(ref x)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 517,
          "bound": null
        },
        {
          "cond": "self.class_literal_byte(&x.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 523,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        41,
        42,
        43,
        53,
        54,
        55,
        56,
        57,
        58,
        60,
        62,
        63,
        243,
        244,
        245,
        246,
        250,
        251
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "*ast matches ast::ClassSetItem::Range(ref x)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "*ast matches ast::ClassSetItem::Range(ref x)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 517,
          "bound": null
        },
        {
          "cond": "self.class_literal_byte(&x.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 523,
          "bound": null
        },
        {
          "cond": "self.class_literal_byte(&x.end)?",
          "norm": null,
          "value": "Err/None",
          "line": 524,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        41,
        42,
        43,
        53,
        54,
        55,
        56,
        57,
        58,
        61,
        64,
        65,
        66,
        68,
        70,
        71,
        241,
        242,
        245,
        246,
        250,
        251
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "*ast matches ast::ClassSetItem::Range(ref x)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "*ast matches ast::ClassSetItem::Range(ref x)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 517,
          "bound": null
        },
        {
          "cond": "self.class_literal_byte(&x.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 523,
          "bound": null
        },
        {
          "cond": "self.class_literal_byte(&x.end)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 524,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        4,
        41,
        42,
        43,
        53,
        54,
        55,
        56,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        221,
        251
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "*ast matches ast::ClassSetItem::Literal(ref x)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "*ast matches ast::ClassSetItem::Literal(ref x)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 505,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        3,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        40,
        221,
        251
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "*ast matches ast::ClassSetItem::Literal(ref x)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "*ast matches ast::ClassSetItem::Literal(ref x)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 505,
          "bound": null
        },
        {
          "cond": "self.class_literal_byte(x)?",
          "norm": null,
          "value": "Err/None",
          "line": 511,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        11,
        12,
        13,
        23,
        24,
        25,
        26,
        27,
        28,
        30,
        32,
        33,
        247,
        248,
        249,
        250,
        251
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "*ast matches ast::ClassSetItem::Literal(ref x)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "*ast matches ast::ClassSetItem::Literal(ref x)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 505,
          "bound": null
        },
        {
          "cond": "self.class_literal_byte(x)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 511,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        3,
        11,
        12,
        13,
        23,
        24,
        25,
        26,
        27,
        28,
        31,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        221,
        251
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "*ast matches ast::ClassSetItem::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        },
        {
          "cond": "*ast matches ast::ClassSetItem::Empty(_)",
          "norm": null,
          "value": "true",
          "line": 502,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        2,
        10,
        221,
        251
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}