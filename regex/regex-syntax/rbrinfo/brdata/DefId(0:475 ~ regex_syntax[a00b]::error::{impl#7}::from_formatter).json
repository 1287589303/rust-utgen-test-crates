{
  "name": "regex_syntax::error::{impl#7}::from_formatter",
  "mod_info": {
    "name": "error",
    "loc": "regex-syntax/src/lib.rs:189:1:189:11"
  },
  "visible": false,
  "loc": "regex-syntax/src/error.rs:156:5:179:6",
  "doc": "/// Build a sequence of spans from a formatter.\n",
  "code": [
    "fn from_formatter<'e, E: core::fmt::Display>(",
    "    fmter: &'p Formatter<'e, E>,",
    ") -> Spans<'p> {",
    "    let mut line_count = fmter.pattern.lines().count();",
    "    // If the pattern ends with a `\\n` literal, then our line count is",
    "    // off by one, since a span can occur immediately after the last `\\n`,",
    "    // which is consider to be an additional line.",
    "    if fmter.pattern.ends_with('\\n') {",
    "        line_count += 1;",
    "    }",
    "    let line_number_width =",
    "        if line_count <= 1 { 0 } else { line_count.to_string().len() };",
    "    let mut spans = Spans {",
    "        pattern: &fmter.pattern,",
    "        line_number_width,",
    "        by_line: vec![vec![]; line_count],",
    "        multi_line: vec![],",
    "    };",
    "    spans.add(fmter.span.clone());",
    "    if let Some(span) = fmter.aux_span {",
    "        spans.add(span.clone());",
    "    }",
    "    spans",
    "}"
  ],
  "size": {
    "chain": 8,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "fmter.pattern.ends_with('\\n')",
          "norm": null,
          "value": "true",
          "line": 163,
          "bound": null
        },
        {
          "cond": "line_count <= 1",
          "norm": "1 >= line_count",
          "value": "true",
          "line": 167,
          "bound": "line_count == 1"
        },
        {
          "cond": "let Some(span) = fmter.aux_span",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        }
      ],
      "ret": "spans",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        8,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        25,
        26,
        27
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "fmter.pattern.ends_with('\\n')",
          "norm": null,
          "value": "true",
          "line": 163,
          "bound": null
        },
        {
          "cond": "line_count <= 1",
          "norm": "1 >= line_count",
          "value": "true",
          "line": 167,
          "bound": "line_count == 1"
        },
        {
          "cond": "let Some(span) = fmter.aux_span",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        }
      ],
      "ret": "spans",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        8,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        26,
        27
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "fmter.pattern.ends_with('\\n')",
          "norm": null,
          "value": "true",
          "line": 163,
          "bound": null
        },
        {
          "cond": "line_count <= 1",
          "norm": "1 >= line_count",
          "value": "false",
          "line": 167,
          "bound": null
        },
        {
          "cond": "let Some(span) = fmter.aux_span",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        }
      ],
      "ret": "spans",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        25,
        26,
        27
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "fmter.pattern.ends_with('\\n')",
          "norm": null,
          "value": "true",
          "line": 163,
          "bound": null
        },
        {
          "cond": "line_count <= 1",
          "norm": "1 >= line_count",
          "value": "false",
          "line": 167,
          "bound": null
        },
        {
          "cond": "let Some(span) = fmter.aux_span",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        }
      ],
      "ret": "spans",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        26,
        27
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "fmter.pattern.ends_with('\\n')",
          "norm": null,
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "line_count <= 1",
          "norm": "1 >= line_count",
          "value": "true",
          "line": 167,
          "bound": "line_count == 1"
        },
        {
          "cond": "let Some(span) = fmter.aux_span",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        }
      ],
      "ret": "spans",
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        8,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        25,
        26,
        27
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "fmter.pattern.ends_with('\\n')",
          "norm": null,
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "line_count <= 1",
          "norm": "1 >= line_count",
          "value": "true",
          "line": 167,
          "bound": "line_count == 1"
        },
        {
          "cond": "let Some(span) = fmter.aux_span",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        }
      ],
      "ret": "spans",
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        8,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        26,
        27
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "fmter.pattern.ends_with('\\n')",
          "norm": null,
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "line_count <= 1",
          "norm": "1 >= line_count",
          "value": "false",
          "line": 167,
          "bound": null
        },
        {
          "cond": "let Some(span) = fmter.aux_span",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        }
      ],
      "ret": "spans",
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        25,
        26,
        27
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "fmter.pattern.ends_with('\\n')",
          "norm": null,
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "line_count <= 1",
          "norm": "1 >= line_count",
          "value": "false",
          "line": 167,
          "bound": null
        },
        {
          "cond": "let Some(span) = fmter.aux_span",
          "norm": null,
          "value": "true",
          "line": 175,
          "bound": null
        }
      ],
      "ret": "spans",
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        26,
        27
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}