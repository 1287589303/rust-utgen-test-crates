{
  "name": "regex_syntax::hir::translate::{impl#5}::unicode_fold_and_negate",
  "mod_info": {
    "name": "hir::translate",
    "loc": "regex-syntax/src/hir/mod.rs:44:1:44:19"
  },
  "visible": false,
  "loc": "regex-syntax/src/hir/translate.rs:1158:5:1177:6",
  "doc": "",
  "code": [
    "fn unicode_fold_and_negate(",
    "    &self,",
    "    span: &Span,",
    "    negated: bool,",
    "    class: &mut hir::ClassUnicode,",
    ") -> Result<()> {",
    "    // Note that we must apply case folding before negation!",
    "    // Consider `(?i)[^x]`. If we applied negation first, then",
    "    // the result would be the character class that matched any",
    "    // Unicode scalar value.",
    "    if self.flags().case_insensitive() {",
    "        class.try_case_fold_simple().map_err(|_| {",
    "            self.error(span.clone(), ErrorKind::UnicodeCaseUnavailable)",
    "        })?;",
    "    }",
    "    if negated {",
    "        class.negate();",
    "    }",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.flags().case_insensitive()",
          "norm": null,
          "value": "true",
          "line": 1168,
          "bound": null
        },
        {
          "cond": "class.try_case_fold_simple().map_err(|_| {\n                self.error(span.clone(), ErrorKind::UnicodeCaseUnavailable)\n            })?",
          "norm": null,
          "value": "Err/None",
          "line": 1169,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        10,
        11,
        19,
        20,
        21
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.flags().case_insensitive()",
          "norm": null,
          "value": "true",
          "line": 1168,
          "bound": null
        },
        {
          "cond": "class.try_case_fold_simple().map_err(|_| {\n                self.error(span.clone(), ErrorKind::UnicodeCaseUnavailable)\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1169,
          "bound": null
        },
        {
          "cond": "negated",
          "norm": null,
          "value": "true",
          "line": 1173,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        12,
        14,
        15,
        16,
        18,
        21
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.flags().case_insensitive()",
          "norm": null,
          "value": "true",
          "line": 1168,
          "bound": null
        },
        {
          "cond": "class.try_case_fold_simple().map_err(|_| {\n                self.error(span.clone(), ErrorKind::UnicodeCaseUnavailable)\n            })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1169,
          "bound": null
        },
        {
          "cond": "negated",
          "norm": null,
          "value": "false",
          "line": 1173,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        12,
        14,
        17,
        18,
        21
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.flags().case_insensitive()",
          "norm": null,
          "value": "false",
          "line": 1168,
          "bound": null
        },
        {
          "cond": "negated",
          "norm": null,
          "value": "true",
          "line": 1173,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        13,
        14,
        15,
        16,
        18,
        21
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.flags().case_insensitive()",
          "norm": null,
          "value": "false",
          "line": 1168,
          "bound": null
        },
        {
          "cond": "negated",
          "norm": null,
          "value": "false",
          "line": 1173,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        13,
        14,
        17,
        18,
        21
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}