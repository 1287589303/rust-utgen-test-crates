{
  "name": "regex_syntax::hir::{impl#4}::into_parts",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": false,
  "loc": "regex-syntax/src/hir/mod.rs:234:5:239:6",
  "doc": "/// Splits this HIR into its constituent parts.\n///\n/// This is useful because `let Hir { kind, props } = hir;` does not work\n/// because of `Hir`'s custom `Drop` implementation.\n",
  "code": [
    "fn into_parts(mut self) -> (HirKind, Properties) {",
    "    (",
    "        core::mem::replace(&mut self.kind, HirKind::Empty),",
    "        core::mem::replace(&mut self.props, Properties::empty()),",
    "    )",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "(\n            core::mem::replace(&mut self.kind, HirKind::Empty),\n            core::mem::replace(&mut self.props, Properties::empty()),\n        )",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}