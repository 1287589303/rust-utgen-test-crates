{
  "name": "regex_syntax::ast::parse::{impl#6}::increment_depth",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:2283:5:2299:6",
  "doc": "",
  "code": [
    "fn increment_depth(&mut self, span: &Span) -> Result<()> {",
    "    let new = self.depth.checked_add(1).ok_or_else(|| {",
    "        self.p.error(",
    "            span.clone(),",
    "            ast::ErrorKind::NestLimitExceeded(u32::MAX),",
    "        )",
    "    })?;",
    "    let limit = self.p.parser().nest_limit;",
    "    if new > limit {",
    "        return Err(self.p.error(",
    "            span.clone(),",
    "            ast::ErrorKind::NestLimitExceeded(limit),",
    "        ));",
    "    }",
    "    self.depth = new;",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.depth.checked_add(1).ok_or_else(|| {\n            self.p.error(\n                span.clone(),\n                ast::ErrorKind::NestLimitExceeded(u32::MAX),\n            )\n        })?",
          "norm": null,
          "value": "Err/None",
          "line": 2284,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        16,
        17,
        18,
        19
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.depth.checked_add(1).ok_or_else(|| {\n            self.p.error(\n                span.clone(),\n                ast::ErrorKind::NestLimitExceeded(u32::MAX),\n            )\n        })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2284,
          "bound": null
        },
        {
          "cond": "new > limit",
          "norm": "limit < new",
          "value": "true",
          "line": 2291,
          "bound": null
        }
      ],
      "ret": "Err(self.p.error(\n                span.clone(),\n                ast::ErrorKind::NestLimitExceeded(limit),\n            ))",
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        10,
        11,
        12,
        13,
        14,
        18,
        19
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.depth.checked_add(1).ok_or_else(|| {\n            self.p.error(\n                span.clone(),\n                ast::ErrorKind::NestLimitExceeded(u32::MAX),\n            )\n        })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2284,
          "bound": null
        },
        {
          "cond": "new > limit",
          "norm": "limit < new",
          "value": "false",
          "line": 2291,
          "bound": "new == limit"
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        10,
        15,
        19
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}