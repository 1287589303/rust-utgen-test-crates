{
  "name": "regex_syntax::unicode::symbolic_name_normalize",
  "mod_info": {
    "name": "unicode",
    "loc": "regex-syntax/src/lib.rs:193:1:193:13"
  },
  "visible": false,
  "loc": "regex-syntax/src/unicode.rs:879:1:890:2",
  "doc": "/// Like symbolic_name_normalize_bytes, but operates on a string.\n",
  "code": [
    "fn symbolic_name_normalize(x: &str) -> String {",
    "    let mut tmp = x.as_bytes().to_vec();",
    "    let len = symbolic_name_normalize_bytes(&mut tmp).len();",
    "    tmp.truncate(len);",
    "    // This should always succeed because `symbolic_name_normalize_bytes`",
    "    // guarantees that `&tmp[..len]` is always valid UTF-8.",
    "    //",
    "    // N.B. We could avoid the additional UTF-8 check here, but it's unlikely",
    "    // to be worth skipping the additional safety check. A benchmark must",
    "    // justify it first.",
    "    String::from_utf8(tmp).unwrap()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}