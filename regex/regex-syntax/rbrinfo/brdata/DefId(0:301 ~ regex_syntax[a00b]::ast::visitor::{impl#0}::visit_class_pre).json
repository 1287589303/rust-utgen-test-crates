{
  "name": "regex_syntax::ast::visitor::{impl#0}::visit_class_pre",
  "mod_info": {
    "name": "ast::visitor",
    "loc": "regex-syntax/src/ast/mod.rs:13:1:13:13"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/visitor.rs:353:5:367:6",
  "doc": "/// Call the appropriate `Visitor` methods given an inductive step.\n",
  "code": [
    "fn visit_class_pre<V: Visitor>(",
    "    &self,",
    "    ast: &ClassInduct<'a>,",
    "    visitor: &mut V,",
    ") -> Result<(), V::Err> {",
    "    match *ast {",
    "        ClassInduct::Item(item) => {",
    "            visitor.visit_class_set_item_pre(item)?;",
    "        }",
    "        ClassInduct::BinaryOp(op) => {",
    "            visitor.visit_class_set_binary_op_pre(op)?;",
    "        }",
    "    }",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*ast matches ClassInduct::BinaryOp(op)",
          "norm": null,
          "value": "true",
          "line": 358,
          "bound": null
        },
        {
          "cond": "visitor.visit_class_set_binary_op_pre(op)?",
          "norm": null,
          "value": "Err/None",
          "line": 363,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        13,
        14,
        16,
        18,
        19,
        22,
        23,
        26,
        27
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*ast matches ClassInduct::BinaryOp(op)",
          "norm": null,
          "value": "true",
          "line": 358,
          "bound": null
        },
        {
          "cond": "visitor.visit_class_set_binary_op_pre(op)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 363,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        3,
        13,
        14,
        17,
        20,
        21,
        27
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "*ast matches ClassInduct::Item(item)",
          "norm": null,
          "value": "true",
          "line": 358,
          "bound": null
        },
        {
          "cond": "*ast matches ClassInduct::Item(item)",
          "norm": null,
          "value": "true",
          "line": 358,
          "bound": null
        },
        {
          "cond": "visitor.visit_class_set_item_pre(item)?",
          "norm": null,
          "value": "Err/None",
          "line": 360,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        4,
        5,
        6,
        8,
        10,
        11,
        24,
        25,
        26,
        27
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "*ast matches ClassInduct::Item(item)",
          "norm": null,
          "value": "true",
          "line": 358,
          "bound": null
        },
        {
          "cond": "*ast matches ClassInduct::Item(item)",
          "norm": null,
          "value": "true",
          "line": 358,
          "bound": null
        },
        {
          "cond": "visitor.visit_class_set_item_pre(item)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 360,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        2,
        4,
        5,
        6,
        9,
        12,
        21,
        27
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}