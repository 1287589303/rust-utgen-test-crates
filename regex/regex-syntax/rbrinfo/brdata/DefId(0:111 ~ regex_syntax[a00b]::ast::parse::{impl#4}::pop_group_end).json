{
  "name": "regex_syntax::ast::parse::{impl#4}::pop_group_end",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:796:5:828:6",
  "doc": "/// Pop the last state from the parser's internal stack, if it exists, and\n/// add the given concatenation to it. There either must be no state or a\n/// single alternation item on the stack. Any other scenario produces an\n/// error.\n///\n/// This assumes that the parser has advanced to the end.\n",
  "code": [
    "fn pop_group_end(&self, mut concat: ast::Concat) -> Result<Ast> {",
    "    concat.span.end = self.pos();",
    "    let mut stack = self.parser().stack_group.borrow_mut();",
    "    let ast = match stack.pop() {",
    "        None => Ok(concat.into_ast()),",
    "        Some(GroupState::Alternation(mut alt)) => {",
    "            alt.span.end = self.pos();",
    "            alt.asts.push(concat.into_ast());",
    "            Ok(Ast::alternation(alt))",
    "        }",
    "        Some(GroupState::Group { group, .. }) => {",
    "            return Err(",
    "                self.error(group.span, ast::ErrorKind::GroupUnclosed)",
    "            );",
    "        }",
    "    };",
    "    // If we try to pop again, there should be nothing.",
    "    match stack.pop() {",
    "        None => ast,",
    "        Some(GroupState::Alternation(_)) => {",
    "            // This unreachable is unfortunate. This case can't happen",
    "            // because the only way we can be here is if there were two",
    "            // `GroupState::Alternation`s adjacent in the parser's stack,",
    "            // which we guarantee to never happen because we never push a",
    "            // `GroupState::Alternation` if one is already at the top of",
    "            // the stack.",
    "            unreachable!()",
    "        }",
    "        Some(GroupState::Group { group, .. }) => {",
    "            Err(self.error(group.span, ast::ErrorKind::GroupUnclosed))",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 7,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "stack.pop() matches Some(GroupState::Alternation(mut alt)) or Some(GroupState::Group { group, .. })",
          "norm": null,
          "value": "true",
          "line": 799,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(GroupState::Alternation(mut alt)) or Some(GroupState::Group { group, .. })",
          "norm": null,
          "value": "true",
          "line": 799,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(GroupState::Alternation(mut alt))",
          "norm": null,
          "value": "true",
          "line": 799,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(GroupState::Alternation(_)) or Some(GroupState::Group { group, .. })",
          "norm": null,
          "value": "true",
          "line": 813,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(GroupState::Alternation(_)) or Some(GroupState::Group { group, .. })",
          "norm": null,
          "value": "true",
          "line": 813,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(GroupState::Alternation(_))",
          "norm": null,
          "value": "true",
          "line": 813,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        9,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        23,
        24,
        25,
        26,
        29,
        30,
        33,
        46,
        47,
        48,
        58,
        59
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "stack.pop() matches Some(GroupState::Alternation(mut alt)) or Some(GroupState::Group { group, .. })",
          "norm": null,
          "value": "true",
          "line": 799,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(GroupState::Alternation(mut alt)) or Some(GroupState::Group { group, .. })",
          "norm": null,
          "value": "true",
          "line": 799,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(GroupState::Alternation(mut alt))",
          "norm": null,
          "value": "true",
          "line": 799,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(GroupState::Alternation(_)) or Some(GroupState::Group { group, .. })",
          "norm": null,
          "value": "true",
          "line": 813,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 813,
          "bound": null
        }
      ],
      "ret": "Err(self.error(group.span, ast::ErrorKind::GroupUnclosed))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        9,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        23,
        24,
        25,
        26,
        29,
        31,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        44
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "stack.pop() matches Some(GroupState::Alternation(mut alt)) or Some(GroupState::Group { group, .. })",
          "norm": null,
          "value": "true",
          "line": 799,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(GroupState::Alternation(mut alt)) or Some(GroupState::Group { group, .. })",
          "norm": null,
          "value": "true",
          "line": 799,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(GroupState::Alternation(mut alt))",
          "norm": null,
          "value": "true",
          "line": 799,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 813,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 813,
          "bound": null
        }
      ],
      "ret": "ast",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        9,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        23,
        24,
        25,
        26,
        28,
        32,
        37,
        38,
        39,
        40,
        44
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "stack.pop() matches Some(GroupState::Alternation(mut alt)) or Some(GroupState::Group { group, .. })",
          "norm": null,
          "value": "true",
          "line": 799,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 799,
          "bound": null
        }
      ],
      "ret": "Err(\n                    self.error(group.span, ast::ErrorKind::GroupUnclosed)\n                )",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        21,
        22,
        41,
        42,
        43,
        44
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 799,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 799,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(GroupState::Alternation(_)) or Some(GroupState::Group { group, .. })",
          "norm": null,
          "value": "true",
          "line": 813,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(GroupState::Alternation(_)) or Some(GroupState::Group { group, .. })",
          "norm": null,
          "value": "true",
          "line": 813,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(GroupState::Alternation(_))",
          "norm": null,
          "value": "true",
          "line": 813,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        11,
        12,
        13,
        23,
        24,
        25,
        26,
        29,
        30,
        33,
        46,
        47,
        48,
        58,
        59
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 799,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 799,
          "bound": null
        },
        {
          "cond": "stack.pop() matches Some(GroupState::Alternation(_)) or Some(GroupState::Group { group, .. })",
          "norm": null,
          "value": "true",
          "line": 813,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 813,
          "bound": null
        }
      ],
      "ret": "Err(self.error(group.span, ast::ErrorKind::GroupUnclosed))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        11,
        12,
        13,
        23,
        24,
        25,
        26,
        29,
        31,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        44
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 799,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 799,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 813,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 813,
          "bound": null
        }
      ],
      "ret": "ast",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        11,
        12,
        13,
        23,
        24,
        25,
        26,
        28,
        32,
        37,
        38,
        39,
        40,
        44
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}