{
  "name": "regex_syntax::hir::translate::{impl#5}::hir_capture",
  "mod_info": {
    "name": "hir::translate",
    "loc": "regex-syntax/src/hir/mod.rs:44:1:44:19"
  },
  "visible": false,
  "loc": "regex-syntax/src/hir/translate.rs:989:5:1000:6",
  "doc": "",
  "code": [
    "fn hir_capture(&self, group: &ast::Group, expr: Hir) -> Hir {",
    "    let (index, name) = match group.kind {",
    "        ast::GroupKind::CaptureIndex(index) => (index, None),",
    "        ast::GroupKind::CaptureName { ref name, .. } => {",
    "            (name.index, Some(name.name.clone().into_boxed_str()))",
    "        }",
    "        // The HIR doesn't need to use non-capturing groups, since the way",
    "        // in which the data type is defined handles this automatically.",
    "        ast::GroupKind::NonCapturing(_) => return expr,",
    "    };",
    "    Hir::capture(hir::Capture { index, name, sub: Box::new(expr) })",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "group.kind matches ast::GroupKind::NonCapturing(_)",
          "norm": null,
          "value": "true",
          "line": 990,
          "bound": null
        }
      ],
      "ret": "expr",
      "path": [
        0,
        4,
        19
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "group.kind matches ast::GroupKind::CaptureName { ref name, .. }",
          "norm": null,
          "value": "true",
          "line": 990,
          "bound": null
        },
        {
          "cond": "group.kind matches ast::GroupKind::CaptureName { ref name, .. }",
          "norm": null,
          "value": "true",
          "line": 990,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "group.kind matches ast::GroupKind::CaptureIndex(index)",
          "norm": null,
          "value": "true",
          "line": 990,
          "bound": null
        },
        {
          "cond": "group.kind matches ast::GroupKind::CaptureIndex(index)",
          "norm": null,
          "value": "true",
          "line": 990,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        5,
        6,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}