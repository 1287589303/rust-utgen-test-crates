{
  "name": "regex_syntax::hir::translate::{impl#5}::hir_unicode_class",
  "mod_info": {
    "name": "hir::translate",
    "loc": "regex-syntax/src/hir/mod.rs:44:1:44:19"
  },
  "visible": false,
  "loc": "regex-syntax/src/hir/translate.rs:1028:5:1059:6",
  "doc": "",
  "code": [
    "fn hir_unicode_class(",
    "    &self,",
    "    ast_class: &ast::ClassUnicode,",
    ") -> Result<hir::ClassUnicode> {",
    "    use crate::ast::ClassUnicodeKind::*;",
    "",
    "    if !self.flags().unicode() {",
    "        return Err(",
    "            self.error(ast_class.span, ErrorKind::UnicodeNotAllowed)",
    "        );",
    "    }",
    "    let query = match ast_class.kind {",
    "        OneLetter(name) => ClassQuery::OneLetter(name),",
    "        Named(ref name) => ClassQuery::Binary(name),",
    "        NamedValue { ref name, ref value, .. } => ClassQuery::ByValue {",
    "            property_name: name,",
    "            property_value: value,",
    "        },",
    "    };",
    "    let mut result = self.convert_unicode_class_error(",
    "        &ast_class.span,",
    "        unicode::class(query),",
    "    );",
    "    if let Ok(ref mut class) = result {",
    "        self.unicode_fold_and_negate(",
    "            &ast_class.span,",
    "            ast_class.negated,",
    "            class,",
    "        )?;",
    "    }",
    "    result",
    "}"
  ],
  "size": {
    "chain": 10,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 1034,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches NamedValue { ref name, ref value, .. }",
          "norm": null,
          "value": "true",
          "line": 1039,
          "bound": null
        },
        {
          "cond": "let Ok(ref mut class) = result",
          "norm": null,
          "value": "true",
          "line": 1051,
          "bound": null
        }
      ],
      "ret": "result",
      "path": [
        0,
        1,
        2,
        3,
        10,
        14,
        15,
        16,
        17,
        18,
        29,
        30,
        31,
        35
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 1034,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches NamedValue { ref name, ref value, .. }",
          "norm": null,
          "value": "true",
          "line": 1039,
          "bound": null
        },
        {
          "cond": "let Ok(ref mut class) = result",
          "norm": null,
          "value": "false",
          "line": 1051,
          "bound": null
        },
        {
          "cond": "self.unicode_fold_and_negate(\n                &ast_class.span,\n                ast_class.negated,\n                class,\n            )?",
          "norm": null,
          "value": "Err/None",
          "line": 1052,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        10,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        24,
        26,
        27,
        32,
        33,
        34,
        35
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 1034,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches NamedValue { ref name, ref value, .. }",
          "norm": null,
          "value": "true",
          "line": 1039,
          "bound": null
        },
        {
          "cond": "let Ok(ref mut class) = result",
          "norm": null,
          "value": "false",
          "line": 1051,
          "bound": null
        },
        {
          "cond": "self.unicode_fold_and_negate(\n                &ast_class.span,\n                ast_class.negated,\n                class,\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1052,
          "bound": null
        }
      ],
      "ret": "result",
      "path": [
        0,
        1,
        2,
        3,
        10,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        25,
        28,
        30,
        31,
        35
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 1034,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Named(ref name)",
          "norm": null,
          "value": "true",
          "line": 1039,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Named(ref name)",
          "norm": null,
          "value": "true",
          "line": 1039,
          "bound": null
        },
        {
          "cond": "let Ok(ref mut class) = result",
          "norm": null,
          "value": "true",
          "line": 1051,
          "bound": null
        }
      ],
      "ret": "result",
      "path": [
        0,
        1,
        2,
        3,
        9,
        12,
        13,
        16,
        17,
        18,
        29,
        30,
        31,
        35
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 1034,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Named(ref name)",
          "norm": null,
          "value": "true",
          "line": 1039,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Named(ref name)",
          "norm": null,
          "value": "true",
          "line": 1039,
          "bound": null
        },
        {
          "cond": "let Ok(ref mut class) = result",
          "norm": null,
          "value": "false",
          "line": 1051,
          "bound": null
        },
        {
          "cond": "self.unicode_fold_and_negate(\n                &ast_class.span,\n                ast_class.negated,\n                class,\n            )?",
          "norm": null,
          "value": "Err/None",
          "line": 1052,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        9,
        12,
        13,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        24,
        26,
        27,
        32,
        33,
        34,
        35
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 1034,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Named(ref name)",
          "norm": null,
          "value": "true",
          "line": 1039,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Named(ref name)",
          "norm": null,
          "value": "true",
          "line": 1039,
          "bound": null
        },
        {
          "cond": "let Ok(ref mut class) = result",
          "norm": null,
          "value": "false",
          "line": 1051,
          "bound": null
        },
        {
          "cond": "self.unicode_fold_and_negate(\n                &ast_class.span,\n                ast_class.negated,\n                class,\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1052,
          "bound": null
        }
      ],
      "ret": "result",
      "path": [
        0,
        1,
        2,
        3,
        9,
        12,
        13,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        25,
        28,
        30,
        31,
        35
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 1034,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches OneLetter(name)",
          "norm": null,
          "value": "true",
          "line": 1039,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches OneLetter(name)",
          "norm": null,
          "value": "true",
          "line": 1039,
          "bound": null
        },
        {
          "cond": "let Ok(ref mut class) = result",
          "norm": null,
          "value": "true",
          "line": 1051,
          "bound": null
        }
      ],
      "ret": "result",
      "path": [
        0,
        1,
        2,
        3,
        8,
        11,
        16,
        17,
        18,
        29,
        30,
        31,
        35
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 1034,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches OneLetter(name)",
          "norm": null,
          "value": "true",
          "line": 1039,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches OneLetter(name)",
          "norm": null,
          "value": "true",
          "line": 1039,
          "bound": null
        },
        {
          "cond": "let Ok(ref mut class) = result",
          "norm": null,
          "value": "false",
          "line": 1051,
          "bound": null
        },
        {
          "cond": "self.unicode_fold_and_negate(\n                &ast_class.span,\n                ast_class.negated,\n                class,\n            )?",
          "norm": null,
          "value": "Err/None",
          "line": 1052,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        8,
        11,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        24,
        26,
        27,
        32,
        33,
        34,
        35
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 1034,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches OneLetter(name)",
          "norm": null,
          "value": "true",
          "line": 1039,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches OneLetter(name)",
          "norm": null,
          "value": "true",
          "line": 1039,
          "bound": null
        },
        {
          "cond": "let Ok(ref mut class) = result",
          "norm": null,
          "value": "false",
          "line": 1051,
          "bound": null
        },
        {
          "cond": "self.unicode_fold_and_negate(\n                &ast_class.span,\n                ast_class.negated,\n                class,\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1052,
          "bound": null
        }
      ],
      "ret": "result",
      "path": [
        0,
        1,
        2,
        3,
        8,
        11,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        25,
        28,
        30,
        31,
        35
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 1034,
          "bound": null
        }
      ],
      "ret": "Err(\n                self.error(ast_class.span, ErrorKind::UnicodeNotAllowed)\n            )",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        35
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}