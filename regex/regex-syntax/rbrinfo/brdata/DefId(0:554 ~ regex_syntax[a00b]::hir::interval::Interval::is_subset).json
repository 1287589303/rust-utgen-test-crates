{
  "name": "regex_syntax::hir::interval::Interval::is_subset",
  "mod_info": {
    "name": "hir::interval",
    "loc": "regex-syntax/src/hir/mod.rs:41:1:41:14"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/interval.rs:502:5:507:6",
  "doc": "/// Returns true if and only if this range is a subset of the other range.\n",
  "code": [
    "fn is_subset(&self, other: &Self) -> bool {",
    "    let (lower1, upper1) = (self.lower(), self.upper());",
    "    let (lower2, upper2) = (other.lower(), other.upper());",
    "    (lower2 <= lower1 && lower1 <= upper2)",
    "        && (lower2 <= upper1 && upper1 <= upper2)",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "lower2 <= lower1",
          "norm": "lower1 >= lower2",
          "value": "true",
          "line": 505,
          "bound": "lower2 == lower1"
        },
        {
          "cond": "lower1 <= upper2",
          "norm": null,
          "value": "true",
          "line": 505,
          "bound": "lower1 == upper2"
        },
        {
          "cond": "lower2 <= upper1",
          "norm": null,
          "value": "true",
          "line": 506,
          "bound": "lower2 == upper1"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        12,
        13,
        15,
        16,
        17
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "lower2 <= lower1",
          "norm": "lower1 >= lower2",
          "value": "true",
          "line": 505,
          "bound": "lower2 == lower1"
        },
        {
          "cond": "lower1 <= upper2",
          "norm": null,
          "value": "true",
          "line": 505,
          "bound": "lower1 == upper2"
        },
        {
          "cond": "lower2 <= upper1",
          "norm": null,
          "value": "false",
          "line": 506,
          "bound": null
        }
      ],
      "ret": "(lower2 <= upper1 && upper1 <= upper2)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        12,
        14,
        16,
        17
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "lower2 <= lower1",
          "norm": "lower1 >= lower2",
          "value": "true",
          "line": 505,
          "bound": "lower2 == lower1"
        },
        {
          "cond": "lower1 <= upper2",
          "norm": null,
          "value": "false",
          "line": 505,
          "bound": null
        }
      ],
      "ret": "(lower2 <= lower1 && lower1 <= upper2)\n            && (lower2 <= upper1 && upper1 <= upper2)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        11,
        17
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "lower2 <= lower1",
          "norm": "lower1 >= lower2",
          "value": "false",
          "line": 505,
          "bound": null
        }
      ],
      "ret": "(lower2 <= lower1 && lower1 <= upper2)\n            && (lower2 <= upper1 && upper1 <= upper2)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        10,
        11,
        17
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}