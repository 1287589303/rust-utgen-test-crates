{
  "name": "regex_syntax::ast::print::{impl#4}::fmt_literal",
  "mod_info": {
    "name": "ast::print",
    "loc": "regex-syntax/src/ast/mod.rs:12:1:12:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/print.rs:208:5:253:6",
  "doc": "",
  "code": [
    "fn fmt_literal(&mut self, ast: &ast::Literal) -> fmt::Result {",
    "    use crate::ast::LiteralKind::*;",
    "",
    "    match ast.kind {",
    "        Verbatim => self.wtr.write_char(ast.c),",
    "        Meta | Superfluous => write!(self.wtr, r\"\\{}\", ast.c),",
    "        Octal => write!(self.wtr, r\"\\{:o}\", u32::from(ast.c)),",
    "        HexFixed(ast::HexLiteralKind::X) => {",
    "            write!(self.wtr, r\"\\x{:02X}\", u32::from(ast.c))",
    "        }",
    "        HexFixed(ast::HexLiteralKind::UnicodeShort) => {",
    "            write!(self.wtr, r\"\\u{:04X}\", u32::from(ast.c))",
    "        }",
    "        HexFixed(ast::HexLiteralKind::UnicodeLong) => {",
    "            write!(self.wtr, r\"\\U{:08X}\", u32::from(ast.c))",
    "        }",
    "        HexBrace(ast::HexLiteralKind::X) => {",
    "            write!(self.wtr, r\"\\x{{{:X}}}\", u32::from(ast.c))",
    "        }",
    "        HexBrace(ast::HexLiteralKind::UnicodeShort) => {",
    "            write!(self.wtr, r\"\\u{{{:X}}}\", u32::from(ast.c))",
    "        }",
    "        HexBrace(ast::HexLiteralKind::UnicodeLong) => {",
    "            write!(self.wtr, r\"\\U{{{:X}}}\", u32::from(ast.c))",
    "        }",
    "        Special(ast::SpecialLiteralKind::Bell) => {",
    "            self.wtr.write_str(r\"\\a\")",
    "        }",
    "        Special(ast::SpecialLiteralKind::FormFeed) => {",
    "            self.wtr.write_str(r\"\\f\")",
    "        }",
    "        Special(ast::SpecialLiteralKind::Tab) => self.wtr.write_str(r\"\\t\"),",
    "        Special(ast::SpecialLiteralKind::LineFeed) => {",
    "            self.wtr.write_str(r\"\\n\")",
    "        }",
    "        Special(ast::SpecialLiteralKind::CarriageReturn) => {",
    "            self.wtr.write_str(r\"\\r\")",
    "        }",
    "        Special(ast::SpecialLiteralKind::VerticalTab) => {",
    "            self.wtr.write_str(r\"\\v\")",
    "        }",
    "        Special(ast::SpecialLiteralKind::Space) => {",
    "            self.wtr.write_str(r\"\\ \")",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 17,
    "contra": 0,
    "min_set": 13
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "ast.kind matches Special(ast::SpecialLiteralKind::LineFeed) or Special(ast::SpecialLiteralKind::VerticalTab) or Special(ast::SpecialLiteralKind::Space) or Special(ast::SpecialLiteralKind::Bell) or Special(ast::SpecialLiteralKind::FormFeed) or Special(ast::SpecialLiteralKind::Tab) or Special(ast::SpecialLiteralKind::CarriageReturn)",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "ast.kind matches Special(ast::SpecialLiteralKind::LineFeed) or Special(ast::SpecialLiteralKind::VerticalTab) or Special(ast::SpecialLiteralKind::Space) or Special(ast::SpecialLiteralKind::Bell) or Special(ast::SpecialLiteralKind::FormFeed) or Special(ast::SpecialLiteralKind::Tab) or Special(ast::SpecialLiteralKind::CarriageReturn)",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        12,
        19,
        80,
        81
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "ast.kind matches Special(ast::SpecialLiteralKind::LineFeed) or Special(ast::SpecialLiteralKind::VerticalTab) or Special(ast::SpecialLiteralKind::Space) or Special(ast::SpecialLiteralKind::Bell) or Special(ast::SpecialLiteralKind::FormFeed) or Special(ast::SpecialLiteralKind::Tab) or Special(ast::SpecialLiteralKind::CarriageReturn)",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "ast.kind matches HexBrace(ast::HexLiteralKind::UnicodeLong) or HexBrace(ast::HexLiteralKind::UnicodeShort) or HexBrace(ast::HexLiteralKind::X)",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "ast.kind matches Special(ast::SpecialLiteralKind::VerticalTab)",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        12,
        18,
        78,
        79,
        81
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "ast.kind matches Special(ast::SpecialLiteralKind::LineFeed) or Special(ast::SpecialLiteralKind::VerticalTab) or Special(ast::SpecialLiteralKind::Space) or Special(ast::SpecialLiteralKind::Bell) or Special(ast::SpecialLiteralKind::FormFeed) or Special(ast::SpecialLiteralKind::Tab) or Special(ast::SpecialLiteralKind::CarriageReturn)",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "ast.kind matches HexFixed(ast::HexLiteralKind::UnicodeShort) or HexFixed(ast::HexLiteralKind::X) or HexFixed(ast::HexLiteralKind::UnicodeLong)",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "ast.kind matches Special(ast::SpecialLiteralKind::CarriageReturn)",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        12,
        17,
        76,
        77,
        81
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "ast.kind matches Special(ast::SpecialLiteralKind::LineFeed) or Special(ast::SpecialLiteralKind::VerticalTab) or Special(ast::SpecialLiteralKind::Space) or Special(ast::SpecialLiteralKind::Bell) or Special(ast::SpecialLiteralKind::FormFeed) or Special(ast::SpecialLiteralKind::Tab) or Special(ast::SpecialLiteralKind::CarriageReturn)",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "ast.kind matches Octal",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "ast.kind matches Special(ast::SpecialLiteralKind::LineFeed)",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        12,
        16,
        74,
        75,
        81
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "ast.kind matches Special(ast::SpecialLiteralKind::LineFeed) or Special(ast::SpecialLiteralKind::VerticalTab) or Special(ast::SpecialLiteralKind::Space) or Special(ast::SpecialLiteralKind::Bell) or Special(ast::SpecialLiteralKind::FormFeed) or Special(ast::SpecialLiteralKind::Tab) or Special(ast::SpecialLiteralKind::CarriageReturn)",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "ast.kind matches Superfluous",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "ast.kind matches Special(ast::SpecialLiteralKind::Tab)",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        12,
        15,
        72,
        73,
        81
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "ast.kind matches Special(ast::SpecialLiteralKind::LineFeed) or Special(ast::SpecialLiteralKind::VerticalTab) or Special(ast::SpecialLiteralKind::Space) or Special(ast::SpecialLiteralKind::Bell) or Special(ast::SpecialLiteralKind::FormFeed) or Special(ast::SpecialLiteralKind::Tab) or Special(ast::SpecialLiteralKind::CarriageReturn)",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "ast.kind matches Meta",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "ast.kind matches Special(ast::SpecialLiteralKind::FormFeed)",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        12,
        14,
        70,
        71,
        81
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "ast.kind matches Special(ast::SpecialLiteralKind::LineFeed) or Special(ast::SpecialLiteralKind::VerticalTab) or Special(ast::SpecialLiteralKind::Space) or Special(ast::SpecialLiteralKind::Bell) or Special(ast::SpecialLiteralKind::FormFeed) or Special(ast::SpecialLiteralKind::Tab) or Special(ast::SpecialLiteralKind::CarriageReturn)",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "ast.kind matches Verbatim",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "ast.kind matches Special(ast::SpecialLiteralKind::Bell)",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        12,
        13,
        68,
        69,
        81
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "ast.kind matches HexBrace(ast::HexLiteralKind::UnicodeLong) or HexBrace(ast::HexLiteralKind::UnicodeShort) or HexBrace(ast::HexLiteralKind::X)",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "ast.kind matches Superfluous",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "ast.kind matches HexBrace(ast::HexLiteralKind::UnicodeLong)",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        8,
        11,
        63,
        64,
        65,
        66,
        67,
        81
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "ast.kind matches HexBrace(ast::HexLiteralKind::UnicodeLong) or HexBrace(ast::HexLiteralKind::UnicodeShort) or HexBrace(ast::HexLiteralKind::X)",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "ast.kind matches Meta",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "ast.kind matches HexBrace(ast::HexLiteralKind::UnicodeShort)",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        8,
        10,
        58,
        59,
        60,
        61,
        62,
        81
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "ast.kind matches HexBrace(ast::HexLiteralKind::UnicodeLong) or HexBrace(ast::HexLiteralKind::UnicodeShort) or HexBrace(ast::HexLiteralKind::X)",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "ast.kind matches Verbatim",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "ast.kind matches HexBrace(ast::HexLiteralKind::X)",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        8,
        9,
        53,
        54,
        55,
        56,
        57,
        81
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "ast.kind matches HexFixed(ast::HexLiteralKind::UnicodeShort) or HexFixed(ast::HexLiteralKind::X) or HexFixed(ast::HexLiteralKind::UnicodeLong)",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "ast.kind matches Superfluous",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "ast.kind matches HexFixed(ast::HexLiteralKind::UnicodeLong)",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        7,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        81
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "ast.kind matches HexFixed(ast::HexLiteralKind::UnicodeShort) or HexFixed(ast::HexLiteralKind::X) or HexFixed(ast::HexLiteralKind::UnicodeLong)",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "ast.kind matches Meta",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "ast.kind matches HexFixed(ast::HexLiteralKind::UnicodeShort)",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        6,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        81
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "ast.kind matches HexFixed(ast::HexLiteralKind::UnicodeShort) or HexFixed(ast::HexLiteralKind::X) or HexFixed(ast::HexLiteralKind::UnicodeLong)",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "ast.kind matches Verbatim",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "ast.kind matches HexFixed(ast::HexLiteralKind::X)",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        5,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        81
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "ast.kind matches Octal",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "ast.kind matches Octal",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        27,
        28,
        29,
        30,
        31,
        81
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "ast.kind matches Superfluous",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "ast.kind matches Superfluous or Meta",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        20,
        23,
        24,
        25,
        26,
        81
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "ast.kind matches Meta",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "ast.kind matches Superfluous or Meta",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        20,
        23,
        24,
        25,
        26,
        81
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "ast.kind matches Verbatim",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        },
        {
          "cond": "ast.kind matches Verbatim",
          "norm": null,
          "value": "true",
          "line": 211,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        21,
        22,
        81
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}