{
  "name": "regex_syntax::unicode::{impl#4}::overlaps",
  "mod_info": {
    "name": "unicode",
    "loc": "regex-syntax/src/lib.rs:193:1:193:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/unicode.rs:178:5:193:6",
  "doc": "/// Returns true if and only if the given range overlaps with any region\n/// of the underlying case folding table. That is, when true, there exists\n/// at least one codepoint in the inclusive range `[start, end]` that has\n/// a non-trivial equivalence class of case folded codepoints. Conversely,\n/// when this returns false, all codepoints in the range `[start, end]`\n/// correspond to the trivial equivalence class of case folded codepoints,\n/// i.e., itself.\n///\n/// This is useful to call before iterating over the codepoints in the\n/// range and looking up the mapping for each. If you know none of the\n/// mappings will return anything, then you might be able to skip doing it\n/// altogether.\n///\n/// # Panics\n///\n/// This panics when `end < start`.\n",
  "code": [
    "pub fn overlaps(&self, start: char, end: char) -> bool {",
    "    use core::cmp::Ordering;",
    "",
    "    assert!(start <= end);",
    "    self.table",
    "        .binary_search_by(|&(c, _)| {",
    "            if start <= c && c <= end {",
    "                Ordering::Equal",
    "            } else if c > end {",
    "                Ordering::Greater",
    "            } else {",
    "                Ordering::Less",
    "            }",
    "        })",
    "        .is_ok()",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "start <= end",
          "norm": "end >= start",
          "value": "true",
          "line": 181,
          "bound": "start == end"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "start <= end",
          "norm": "end >= start",
          "value": "false",
          "line": 181,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}