{
  "name": "regex_syntax::hir::{impl#5}::alternation",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:572:5:632:6",
  "doc": "/// Returns the alternation of the given expressions.\n///\n/// This flattens and simplifies the alternation as appropriate. This may\n/// include factoring out common prefixes or even rewriting the alternation\n/// as a character class.\n///\n/// Note that an empty alternation is equivalent to `Hir::fail()`. (It\n/// is not possible for one to write an empty alternation, or even an\n/// alternation with a single sub-expression, in the concrete syntax of a\n/// regex.)\n///\n/// # Example\n///\n/// This is a simple example showing how an alternation might get\n/// simplified.\n///\n/// ```\n/// use regex_syntax::hir::{Hir, Class, ClassUnicode, ClassUnicodeRange};\n///\n/// let hir = Hir::alternation(vec![\n///     Hir::literal([b'a']),\n///     Hir::literal([b'b']),\n///     Hir::literal([b'c']),\n///     Hir::literal([b'd']),\n///     Hir::literal([b'e']),\n///     Hir::literal([b'f']),\n/// ]);\n/// let expected = Hir::class(Class::Unicode(ClassUnicode::new([\n///     ClassUnicodeRange::new('a', 'f'),\n/// ])));\n/// assert_eq!(expected, hir);\n/// ```\n///\n/// And another example showing how common prefixes might get factored\n/// out.\n///\n/// ```\n/// use regex_syntax::hir::{Hir, Class, ClassUnicode, ClassUnicodeRange};\n///\n/// let hir = Hir::alternation(vec![\n///     Hir::concat(vec![\n///         Hir::literal(\"abc\".as_bytes()),\n///         Hir::class(Class::Unicode(ClassUnicode::new([\n///             ClassUnicodeRange::new('A', 'Z'),\n///         ]))),\n///     ]),\n///     Hir::concat(vec![\n///         Hir::literal(\"abc\".as_bytes()),\n///         Hir::class(Class::Unicode(ClassUnicode::new([\n///             ClassUnicodeRange::new('a', 'z'),\n///         ]))),\n///     ]),\n/// ]);\n/// let expected = Hir::concat(vec![\n///     Hir::literal(\"abc\".as_bytes()),\n///     Hir::alternation(vec![\n///         Hir::class(Class::Unicode(ClassUnicode::new([\n///             ClassUnicodeRange::new('A', 'Z'),\n///         ]))),\n///         Hir::class(Class::Unicode(ClassUnicode::new([\n///             ClassUnicodeRange::new('a', 'z'),\n///         ]))),\n///     ]),\n/// ]);\n/// assert_eq!(expected, hir);\n/// ```\n///\n/// Note that these sorts of simplifications are not guaranteed.\n",
  "code": [
    "pub fn alternation(subs: Vec<Hir>) -> Hir {",
    "    // We rebuild the alternation by simplifying it. We proceed similarly",
    "    // as the concatenation case. But in this case, there's no literal",
    "    // simplification happening. We're just flattening alternations.",
    "    let mut new = Vec::with_capacity(subs.len());",
    "    for sub in subs {",
    "        let (kind, props) = sub.into_parts();",
    "        match kind {",
    "            HirKind::Alternation(subs2) => {",
    "                new.extend(subs2);",
    "            }",
    "            kind => {",
    "                new.push(Hir { kind, props });",
    "            }",
    "        }",
    "    }",
    "    if new.is_empty() {",
    "        return Hir::fail();",
    "    } else if new.len() == 1 {",
    "        return new.pop().unwrap();",
    "    }",
    "    // Now that it's completely flattened, look for the special case of",
    "    // 'char1|char2|...|charN' and collapse that into a class. Note that",
    "    // we look for 'char' first and then bytes. The issue here is that if",
    "    // we find both non-ASCII codepoints and non-ASCII singleton bytes,",
    "    // then it isn't actually possible to smush them into a single class.",
    "    // (Because classes are either \"all codepoints\" or \"all bytes.\" You",
    "    // can have a class that both matches non-ASCII but valid UTF-8 and",
    "    // invalid UTF-8.) So we look for all chars and then all bytes, and",
    "    // don't handle anything else.",
    "    if let Some(singletons) = singleton_chars(&new) {",
    "        let it = singletons",
    "            .into_iter()",
    "            .map(|ch| ClassUnicodeRange { start: ch, end: ch });",
    "        return Hir::class(Class::Unicode(ClassUnicode::new(it)));",
    "    }",
    "    if let Some(singletons) = singleton_bytes(&new) {",
    "        let it = singletons",
    "            .into_iter()",
    "            .map(|b| ClassBytesRange { start: b, end: b });",
    "        return Hir::class(Class::Bytes(ClassBytes::new(it)));",
    "    }",
    "    // Similar to singleton chars, we can also look for alternations of",
    "    // classes. Those can be smushed into a single class.",
    "    if let Some(cls) = class_chars(&new) {",
    "        return Hir::class(cls);",
    "    }",
    "    if let Some(cls) = class_bytes(&new) {",
    "        return Hir::class(cls);",
    "    }",
    "    // Factor out a common prefix if we can, which might potentially",
    "    // simplify the expression and unlock other optimizations downstream.",
    "    // It also might generally make NFA matching and DFA construction",
    "    // faster by reducing the scope of branching in the regex.",
    "    new = match lift_common_prefix(new) {",
    "        Ok(hir) => return hir,",
    "        Err(unchanged) => unchanged,",
    "    };",
    "    let props = Properties::alternation(&new);",
    "    Hir { kind: HirKind::Alternation(new), props }",
    "}"
  ],
  "size": {
    "chain": 24,
    "contra": 16,
    "min_set": 6
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 577,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Alternation(subs2)",
          "norm": null,
          "value": "false",
          "line": 580,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 577,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "true",
          "line": 588,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        12,
        13,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        4,
        5,
        6,
        8,
        10,
        27,
        28,
        29,
        30,
        31,
        103,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 577,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Alternation(subs2)",
          "norm": null,
          "value": "false",
          "line": 580,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 577,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 588,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "false",
          "line": 590,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        12,
        13,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        4,
        5,
        6,
        8,
        10,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        103,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 577,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Alternation(subs2)",
          "norm": null,
          "value": "false",
          "line": 580,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 577,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 588,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 590,
          "bound": null
        },
        {
          "cond": "let Some(singletons) = singleton_chars(&new)",
          "norm": null,
          "value": "true",
          "line": 602,
          "bound": null
        },
        {
          "cond": "let Some(singletons) = singleton_bytes(&new)",
          "norm": null,
          "value": "true",
          "line": 608,
          "bound": null
        },
        {
          "cond": "let Some(cls) = class_chars(&new)",
          "norm": null,
          "value": "true",
          "line": 616,
          "bound": null
        },
        {
          "cond": "let Some(cls) = class_bytes(&new)",
          "norm": null,
          "value": "true",
          "line": 619,
          "bound": null
        },
        {
          "cond": "lift_common_prefix(new) matches Err(unchanged)",
          "norm": null,
          "value": "true",
          "line": 626,
          "bound": null
        }
      ],
      "ret": "Hir { kind: HirKind::Alternation(new), props }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        12,
        13,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        4,
        5,
        6,
        8,
        10,
        27,
        28,
        29,
        30,
        32,
        33,
        37,
        38,
        39,
        47,
        48,
        49,
        50,
        58,
        59,
        60,
        61,
        65,
        66,
        67,
        68,
        72,
        73,
        74,
        77,
        79,
        80,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 577,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Alternation(subs2)",
          "norm": null,
          "value": "false",
          "line": 580,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 577,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 588,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 590,
          "bound": null
        },
        {
          "cond": "let Some(singletons) = singleton_chars(&new)",
          "norm": null,
          "value": "true",
          "line": 602,
          "bound": null
        },
        {
          "cond": "let Some(singletons) = singleton_bytes(&new)",
          "norm": null,
          "value": "true",
          "line": 608,
          "bound": null
        },
        {
          "cond": "let Some(cls) = class_chars(&new)",
          "norm": null,
          "value": "true",
          "line": 616,
          "bound": null
        },
        {
          "cond": "let Some(cls) = class_bytes(&new)",
          "norm": null,
          "value": "true",
          "line": 619,
          "bound": null
        },
        {
          "cond": "lift_common_prefix(new) matches Ok(hir)",
          "norm": null,
          "value": "true",
          "line": 626,
          "bound": null
        },
        {
          "cond": "lift_common_prefix(new) matches Ok(hir)",
          "norm": null,
          "value": "true",
          "line": 626,
          "bound": null
        }
      ],
      "ret": "hir",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        12,
        13,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        4,
        5,
        6,
        8,
        10,
        27,
        28,
        29,
        30,
        32,
        33,
        37,
        38,
        39,
        47,
        48,
        49,
        50,
        58,
        59,
        60,
        61,
        65,
        66,
        67,
        68,
        72,
        73,
        74,
        76,
        78,
        91,
        92,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 577,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Alternation(subs2)",
          "norm": null,
          "value": "false",
          "line": 580,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 577,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 588,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 590,
          "bound": null
        },
        {
          "cond": "let Some(singletons) = singleton_chars(&new)",
          "norm": null,
          "value": "true",
          "line": 602,
          "bound": null
        },
        {
          "cond": "let Some(singletons) = singleton_bytes(&new)",
          "norm": null,
          "value": "true",
          "line": 608,
          "bound": null
        },
        {
          "cond": "let Some(cls) = class_chars(&new)",
          "norm": null,
          "value": "true",
          "line": 616,
          "bound": null
        },
        {
          "cond": "let Some(cls) = class_bytes(&new)",
          "norm": null,
          "value": "true",
          "line": 619,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        12,
        13,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        4,
        5,
        6,
        8,
        10,
        27,
        28,
        29,
        30,
        32,
        33,
        37,
        38,
        39,
        47,
        48,
        49,
        50,
        58,
        59,
        60,
        61,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        93,
        94,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 577,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Alternation(subs2)",
          "norm": null,
          "value": "false",
          "line": 580,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 577,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 588,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 590,
          "bound": null
        },
        {
          "cond": "let Some(singletons) = singleton_chars(&new)",
          "norm": null,
          "value": "true",
          "line": 602,
          "bound": null
        },
        {
          "cond": "let Some(singletons) = singleton_bytes(&new)",
          "norm": null,
          "value": "true",
          "line": 608,
          "bound": null
        },
        {
          "cond": "let Some(cls) = class_chars(&new)",
          "norm": null,
          "value": "true",
          "line": 616,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        12,
        13,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        4,
        5,
        6,
        8,
        10,
        27,
        28,
        29,
        30,
        32,
        33,
        37,
        38,
        39,
        47,
        48,
        49,
        50,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        95,
        96,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 577,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Alternation(subs2)",
          "norm": null,
          "value": "false",
          "line": 580,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 577,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 588,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 590,
          "bound": null
        },
        {
          "cond": "let Some(singletons) = singleton_chars(&new)",
          "norm": null,
          "value": "true",
          "line": 602,
          "bound": null
        },
        {
          "cond": "let Some(singletons) = singleton_bytes(&new)",
          "norm": null,
          "value": "true",
          "line": 608,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        12,
        13,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        4,
        5,
        6,
        8,
        10,
        27,
        28,
        29,
        30,
        32,
        33,
        37,
        38,
        39,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        97,
        98,
        99,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 577,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Alternation(subs2)",
          "norm": null,
          "value": "false",
          "line": 580,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 577,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 588,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 590,
          "bound": null
        },
        {
          "cond": "let Some(singletons) = singleton_chars(&new)",
          "norm": null,
          "value": "true",
          "line": 602,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        12,
        13,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        4,
        5,
        6,
        8,
        10,
        27,
        28,
        29,
        30,
        32,
        33,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 577,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Alternation(subs2)",
          "norm": null,
          "value": "true",
          "line": 579,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Alternation(subs2)",
          "norm": null,
          "value": "true",
          "line": 579,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 577,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "true",
          "line": 588,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        12,
        14,
        15,
        16,
        17,
        22,
        23,
        24,
        25,
        26,
        4,
        5,
        6,
        8,
        10,
        27,
        28,
        29,
        30,
        31,
        103,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 577,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Alternation(subs2)",
          "norm": null,
          "value": "true",
          "line": 579,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Alternation(subs2)",
          "norm": null,
          "value": "true",
          "line": 579,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 577,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 588,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "false",
          "line": 590,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        12,
        14,
        15,
        16,
        17,
        22,
        23,
        24,
        25,
        26,
        4,
        5,
        6,
        8,
        10,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        103,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 577,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Alternation(subs2)",
          "norm": null,
          "value": "true",
          "line": 579,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Alternation(subs2)",
          "norm": null,
          "value": "true",
          "line": 579,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 577,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 588,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 590,
          "bound": null
        },
        {
          "cond": "let Some(singletons) = singleton_chars(&new)",
          "norm": null,
          "value": "true",
          "line": 602,
          "bound": null
        },
        {
          "cond": "let Some(singletons) = singleton_bytes(&new)",
          "norm": null,
          "value": "true",
          "line": 608,
          "bound": null
        },
        {
          "cond": "let Some(cls) = class_chars(&new)",
          "norm": null,
          "value": "true",
          "line": 616,
          "bound": null
        },
        {
          "cond": "let Some(cls) = class_bytes(&new)",
          "norm": null,
          "value": "true",
          "line": 619,
          "bound": null
        },
        {
          "cond": "lift_common_prefix(new) matches Err(unchanged)",
          "norm": null,
          "value": "true",
          "line": 626,
          "bound": null
        }
      ],
      "ret": "Hir { kind: HirKind::Alternation(new), props }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        12,
        14,
        15,
        16,
        17,
        22,
        23,
        24,
        25,
        26,
        4,
        5,
        6,
        8,
        10,
        27,
        28,
        29,
        30,
        32,
        33,
        37,
        38,
        39,
        47,
        48,
        49,
        50,
        58,
        59,
        60,
        61,
        65,
        66,
        67,
        68,
        72,
        73,
        74,
        77,
        79,
        80,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 577,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Alternation(subs2)",
          "norm": null,
          "value": "true",
          "line": 579,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Alternation(subs2)",
          "norm": null,
          "value": "true",
          "line": 579,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 577,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 588,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 590,
          "bound": null
        },
        {
          "cond": "let Some(singletons) = singleton_chars(&new)",
          "norm": null,
          "value": "true",
          "line": 602,
          "bound": null
        },
        {
          "cond": "let Some(singletons) = singleton_bytes(&new)",
          "norm": null,
          "value": "true",
          "line": 608,
          "bound": null
        },
        {
          "cond": "let Some(cls) = class_chars(&new)",
          "norm": null,
          "value": "true",
          "line": 616,
          "bound": null
        },
        {
          "cond": "let Some(cls) = class_bytes(&new)",
          "norm": null,
          "value": "true",
          "line": 619,
          "bound": null
        },
        {
          "cond": "lift_common_prefix(new) matches Ok(hir)",
          "norm": null,
          "value": "true",
          "line": 626,
          "bound": null
        },
        {
          "cond": "lift_common_prefix(new) matches Ok(hir)",
          "norm": null,
          "value": "true",
          "line": 626,
          "bound": null
        }
      ],
      "ret": "hir",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        12,
        14,
        15,
        16,
        17,
        22,
        23,
        24,
        25,
        26,
        4,
        5,
        6,
        8,
        10,
        27,
        28,
        29,
        30,
        32,
        33,
        37,
        38,
        39,
        47,
        48,
        49,
        50,
        58,
        59,
        60,
        61,
        65,
        66,
        67,
        68,
        72,
        73,
        74,
        76,
        78,
        91,
        92,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 577,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Alternation(subs2)",
          "norm": null,
          "value": "true",
          "line": 579,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Alternation(subs2)",
          "norm": null,
          "value": "true",
          "line": 579,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 577,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 588,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 590,
          "bound": null
        },
        {
          "cond": "let Some(singletons) = singleton_chars(&new)",
          "norm": null,
          "value": "true",
          "line": 602,
          "bound": null
        },
        {
          "cond": "let Some(singletons) = singleton_bytes(&new)",
          "norm": null,
          "value": "true",
          "line": 608,
          "bound": null
        },
        {
          "cond": "let Some(cls) = class_chars(&new)",
          "norm": null,
          "value": "true",
          "line": 616,
          "bound": null
        },
        {
          "cond": "let Some(cls) = class_bytes(&new)",
          "norm": null,
          "value": "true",
          "line": 619,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        12,
        14,
        15,
        16,
        17,
        22,
        23,
        24,
        25,
        26,
        4,
        5,
        6,
        8,
        10,
        27,
        28,
        29,
        30,
        32,
        33,
        37,
        38,
        39,
        47,
        48,
        49,
        50,
        58,
        59,
        60,
        61,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        93,
        94,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 577,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Alternation(subs2)",
          "norm": null,
          "value": "true",
          "line": 579,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Alternation(subs2)",
          "norm": null,
          "value": "true",
          "line": 579,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 577,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 588,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 590,
          "bound": null
        },
        {
          "cond": "let Some(singletons) = singleton_chars(&new)",
          "norm": null,
          "value": "true",
          "line": 602,
          "bound": null
        },
        {
          "cond": "let Some(singletons) = singleton_bytes(&new)",
          "norm": null,
          "value": "true",
          "line": 608,
          "bound": null
        },
        {
          "cond": "let Some(cls) = class_chars(&new)",
          "norm": null,
          "value": "true",
          "line": 616,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        12,
        14,
        15,
        16,
        17,
        22,
        23,
        24,
        25,
        26,
        4,
        5,
        6,
        8,
        10,
        27,
        28,
        29,
        30,
        32,
        33,
        37,
        38,
        39,
        47,
        48,
        49,
        50,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        95,
        96,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 577,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Alternation(subs2)",
          "norm": null,
          "value": "true",
          "line": 579,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Alternation(subs2)",
          "norm": null,
          "value": "true",
          "line": 579,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 577,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 588,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 590,
          "bound": null
        },
        {
          "cond": "let Some(singletons) = singleton_chars(&new)",
          "norm": null,
          "value": "true",
          "line": 602,
          "bound": null
        },
        {
          "cond": "let Some(singletons) = singleton_bytes(&new)",
          "norm": null,
          "value": "true",
          "line": 608,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        12,
        14,
        15,
        16,
        17,
        22,
        23,
        24,
        25,
        26,
        4,
        5,
        6,
        8,
        10,
        27,
        28,
        29,
        30,
        32,
        33,
        37,
        38,
        39,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        97,
        98,
        99,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "true",
          "line": 577,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Alternation(subs2)",
          "norm": null,
          "value": "true",
          "line": 579,
          "bound": null
        },
        {
          "cond": "kind matches HirKind::Alternation(subs2)",
          "norm": null,
          "value": "true",
          "line": 579,
          "bound": null
        },
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 577,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 588,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 590,
          "bound": null
        },
        {
          "cond": "let Some(singletons) = singleton_chars(&new)",
          "norm": null,
          "value": "true",
          "line": 602,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        12,
        14,
        15,
        16,
        17,
        22,
        23,
        24,
        25,
        26,
        4,
        5,
        6,
        8,
        10,
        27,
        28,
        29,
        30,
        32,
        33,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 577,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "true",
          "line": 588,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        10,
        27,
        28,
        29,
        30,
        31,
        103,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 577,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 588,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "false",
          "line": 590,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        10,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        103,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 577,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 588,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 590,
          "bound": null
        },
        {
          "cond": "let Some(singletons) = singleton_chars(&new)",
          "norm": null,
          "value": "true",
          "line": 602,
          "bound": null
        },
        {
          "cond": "let Some(singletons) = singleton_bytes(&new)",
          "norm": null,
          "value": "true",
          "line": 608,
          "bound": null
        },
        {
          "cond": "let Some(cls) = class_chars(&new)",
          "norm": null,
          "value": "true",
          "line": 616,
          "bound": null
        },
        {
          "cond": "let Some(cls) = class_bytes(&new)",
          "norm": null,
          "value": "true",
          "line": 619,
          "bound": null
        },
        {
          "cond": "lift_common_prefix(new) matches Err(unchanged)",
          "norm": null,
          "value": "true",
          "line": 626,
          "bound": null
        }
      ],
      "ret": "Hir { kind: HirKind::Alternation(new), props }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        10,
        27,
        28,
        29,
        30,
        32,
        33,
        37,
        38,
        39,
        47,
        48,
        49,
        50,
        58,
        59,
        60,
        61,
        65,
        66,
        67,
        68,
        72,
        73,
        74,
        77,
        79,
        80,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        106
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 577,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 588,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 590,
          "bound": null
        },
        {
          "cond": "let Some(singletons) = singleton_chars(&new)",
          "norm": null,
          "value": "true",
          "line": 602,
          "bound": null
        },
        {
          "cond": "let Some(singletons) = singleton_bytes(&new)",
          "norm": null,
          "value": "true",
          "line": 608,
          "bound": null
        },
        {
          "cond": "let Some(cls) = class_chars(&new)",
          "norm": null,
          "value": "true",
          "line": 616,
          "bound": null
        },
        {
          "cond": "let Some(cls) = class_bytes(&new)",
          "norm": null,
          "value": "true",
          "line": 619,
          "bound": null
        },
        {
          "cond": "lift_common_prefix(new) matches Ok(hir)",
          "norm": null,
          "value": "true",
          "line": 626,
          "bound": null
        },
        {
          "cond": "lift_common_prefix(new) matches Ok(hir)",
          "norm": null,
          "value": "true",
          "line": 626,
          "bound": null
        }
      ],
      "ret": "hir",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        10,
        27,
        28,
        29,
        30,
        32,
        33,
        37,
        38,
        39,
        47,
        48,
        49,
        50,
        58,
        59,
        60,
        61,
        65,
        66,
        67,
        68,
        72,
        73,
        74,
        76,
        78,
        91,
        92,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 577,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 588,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 590,
          "bound": null
        },
        {
          "cond": "let Some(singletons) = singleton_chars(&new)",
          "norm": null,
          "value": "true",
          "line": 602,
          "bound": null
        },
        {
          "cond": "let Some(singletons) = singleton_bytes(&new)",
          "norm": null,
          "value": "true",
          "line": 608,
          "bound": null
        },
        {
          "cond": "let Some(cls) = class_chars(&new)",
          "norm": null,
          "value": "true",
          "line": 616,
          "bound": null
        },
        {
          "cond": "let Some(cls) = class_bytes(&new)",
          "norm": null,
          "value": "true",
          "line": 619,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        10,
        27,
        28,
        29,
        30,
        32,
        33,
        37,
        38,
        39,
        47,
        48,
        49,
        50,
        58,
        59,
        60,
        61,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        93,
        94,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 577,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 588,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 590,
          "bound": null
        },
        {
          "cond": "let Some(singletons) = singleton_chars(&new)",
          "norm": null,
          "value": "true",
          "line": 602,
          "bound": null
        },
        {
          "cond": "let Some(singletons) = singleton_bytes(&new)",
          "norm": null,
          "value": "true",
          "line": 608,
          "bound": null
        },
        {
          "cond": "let Some(cls) = class_chars(&new)",
          "norm": null,
          "value": "true",
          "line": 616,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        10,
        27,
        28,
        29,
        30,
        32,
        33,
        37,
        38,
        39,
        47,
        48,
        49,
        50,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        95,
        96,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 577,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 588,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 590,
          "bound": null
        },
        {
          "cond": "let Some(singletons) = singleton_chars(&new)",
          "norm": null,
          "value": "true",
          "line": 602,
          "bound": null
        },
        {
          "cond": "let Some(singletons) = singleton_bytes(&new)",
          "norm": null,
          "value": "true",
          "line": 608,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        10,
        27,
        28,
        29,
        30,
        32,
        33,
        37,
        38,
        39,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        97,
        98,
        99,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "sub in subs",
          "norm": null,
          "value": "false",
          "line": 577,
          "bound": null
        },
        {
          "cond": "new.is_empty()",
          "norm": null,
          "value": "false",
          "line": 588,
          "bound": null
        },
        {
          "cond": "new.len() == 1",
          "norm": "1 == new.len()",
          "value": "true",
          "line": 590,
          "bound": null
        },
        {
          "cond": "let Some(singletons) = singleton_chars(&new)",
          "norm": null,
          "value": "true",
          "line": 602,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        10,
        27,
        28,
        29,
        30,
        32,
        33,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        100,
        101,
        102,
        104,
        105,
        106
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}