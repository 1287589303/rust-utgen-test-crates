{
  "name": "regex_syntax::hir::interval::{impl#2}::difference",
  "mod_info": {
    "name": "hir::interval",
    "loc": "regex-syntax/src/hir/mod.rs:41:1:41:14"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/interval.rs:185:5:275:6",
  "doc": "/// Subtract the given set from this set, in place.\n",
  "code": [
    "pub fn difference(&mut self, other: &IntervalSet<I>) {",
    "    if self.ranges.is_empty() || other.ranges.is_empty() {",
    "        return;",
    "    }",
    "",
    "    // This algorithm is (to me) surprisingly complex. A search of the",
    "    // interwebs indicate that this is a potentially interesting problem.",
    "    // Folks seem to suggest interval or segment trees, but I'd like to",
    "    // avoid the overhead (both runtime and conceptual) of that.",
    "    //",
    "    // The following is basically my Shitty First Draft. Therefore, in",
    "    // order to grok it, you probably need to read each line carefully.",
    "    // Simplifications are most welcome!",
    "    //",
    "    // Remember, we can assume the canonical format invariant here, which",
    "    // says that all ranges are sorted, not overlapping and not adjacent in",
    "    // each class.",
    "    let drain_end = self.ranges.len();",
    "    let (mut a, mut b) = (0, 0);",
    "    'LOOP: while a < drain_end && b < other.ranges.len() {",
    "        // Basically, the easy cases are when neither range overlaps with",
    "        // each other. If the `b` range is less than our current `a`",
    "        // range, then we can skip it and move on.",
    "        if other.ranges[b].upper() < self.ranges[a].lower() {",
    "            b += 1;",
    "            continue;",
    "        }",
    "        // ... similarly for the `a` range. If it's less than the smallest",
    "        // `b` range, then we can add it as-is.",
    "        if self.ranges[a].upper() < other.ranges[b].lower() {",
    "            let range = self.ranges[a];",
    "            self.ranges.push(range);",
    "            a += 1;",
    "            continue;",
    "        }",
    "        // Otherwise, we have overlapping ranges.",
    "        assert!(!self.ranges[a].is_intersection_empty(&other.ranges[b]));",
    "",
    "        // This part is tricky and was non-obvious to me without looking",
    "        // at explicit examples (see the tests). The trickiness stems from",
    "        // two things: 1) subtracting a range from another range could",
    "        // yield two ranges and 2) after subtracting a range, it's possible",
    "        // that future ranges can have an impact. The loop below advances",
    "        // the `b` ranges until they can't possible impact the current",
    "        // range.",
    "        //",
    "        // For example, if our `a` range is `a-t` and our next three `b`",
    "        // ranges are `a-c`, `g-i`, `r-t` and `x-z`, then we need to apply",
    "        // subtraction three times before moving on to the next `a` range.",
    "        let mut range = self.ranges[a];",
    "        while b < other.ranges.len()",
    "            && !range.is_intersection_empty(&other.ranges[b])",
    "        {",
    "            let old_range = range;",
    "            range = match range.difference(&other.ranges[b]) {",
    "                (None, None) => {",
    "                    // We lost the entire range, so move on to the next",
    "                    // without adding this one.",
    "                    a += 1;",
    "                    continue 'LOOP;",
    "                }",
    "                (Some(range1), None) | (None, Some(range1)) => range1,",
    "                (Some(range1), Some(range2)) => {",
    "                    self.ranges.push(range1);",
    "                    range2",
    "                }",
    "            };",
    "            // It's possible that the `b` range has more to contribute",
    "            // here. In particular, if it is greater than the original",
    "            // range, then it might impact the next `a` range *and* it",
    "            // has impacted the current `a` range as much as possible,",
    "            // so we can quit. We don't bump `b` so that the next `a`",
    "            // range can apply it.",
    "            if other.ranges[b].upper() > old_range.upper() {",
    "                break;",
    "            }",
    "            // Otherwise, the next `b` range might apply to the current",
    "            // `a` range.",
    "            b += 1;",
    "        }",
    "        self.ranges.push(range);",
    "        a += 1;",
    "    }",
    "    while a < drain_end {",
    "        let range = self.ranges[a];",
    "        self.ranges.push(range);",
    "        a += 1;",
    "    }",
    "    self.ranges.drain(..drain_end);",
    "    self.folded = self.folded && other.folded;",
    "}"
  ],
  "size": {
    "chain": 55,
    "contra": 48,
    "min_set": 12
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        6,
        90
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        90
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        77,
        9,
        10,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        78,
        79,
        84,
        85,
        86,
        87,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        77,
        9,
        10,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        78,
        79,
        84,
        85,
        86,
        88,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        77,
        9,
        10,
        75,
        76,
        78,
        79,
        84,
        85,
        86,
        87,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        77,
        9,
        10,
        75,
        76,
        78,
        79,
        84,
        85,
        86,
        88,
        89,
        90
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        77,
        9,
        10,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        78,
        79,
        84,
        85,
        86,
        87,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        77,
        9,
        10,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        78,
        79,
        84,
        85,
        86,
        88,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        77,
        9,
        10,
        75,
        76,
        78,
        79,
        84,
        85,
        86,
        87,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        77,
        9,
        10,
        75,
        76,
        78,
        79,
        84,
        85,
        86,
        88,
        89,
        90
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "true",
          "line": 221,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        35,
        91
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "range.is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        70,
        71,
        72,
        73,
        9,
        10,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        78,
        79,
        84,
        85,
        86,
        87,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "range.is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        70,
        71,
        72,
        73,
        9,
        10,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        78,
        79,
        84,
        85,
        86,
        88,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "range.is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        70,
        71,
        72,
        73,
        9,
        10,
        75,
        76,
        78,
        79,
        84,
        85,
        86,
        87,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "range.is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        70,
        71,
        72,
        73,
        9,
        10,
        75,
        76,
        78,
        79,
        84,
        85,
        86,
        88,
        89,
        90
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "range.is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 236,
          "bound": null
        },
        {
          "cond": "range.difference(&other.ranges[b]) matches (Some(range1), Some(range2))",
          "norm": null,
          "value": "true",
          "line": 247,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() > old_range.upper()",
          "norm": "old_range.upper() < other.ranges[b].upper()",
          "value": "true",
          "line": 258,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        45,
        46,
        47,
        52,
        54,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        71,
        72,
        73,
        9,
        10,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        78,
        79,
        84,
        85,
        86,
        87,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "range.is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 236,
          "bound": null
        },
        {
          "cond": "range.difference(&other.ranges[b]) matches (Some(range1), Some(range2))",
          "norm": null,
          "value": "true",
          "line": 247,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() > old_range.upper()",
          "norm": "old_range.upper() < other.ranges[b].upper()",
          "value": "true",
          "line": 258,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        45,
        46,
        47,
        52,
        54,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        71,
        72,
        73,
        9,
        10,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        78,
        79,
        84,
        85,
        86,
        88,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "range.is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 236,
          "bound": null
        },
        {
          "cond": "range.difference(&other.ranges[b]) matches (Some(range1), Some(range2))",
          "norm": null,
          "value": "true",
          "line": 247,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() > old_range.upper()",
          "norm": "old_range.upper() < other.ranges[b].upper()",
          "value": "true",
          "line": 258,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        45,
        46,
        47,
        52,
        54,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        71,
        72,
        73,
        9,
        10,
        75,
        76,
        78,
        79,
        84,
        85,
        86,
        87,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "range.is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 236,
          "bound": null
        },
        {
          "cond": "range.difference(&other.ranges[b]) matches (Some(range1), Some(range2))",
          "norm": null,
          "value": "true",
          "line": 247,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() > old_range.upper()",
          "norm": "old_range.upper() < other.ranges[b].upper()",
          "value": "true",
          "line": 258,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        45,
        46,
        47,
        52,
        54,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        71,
        72,
        73,
        9,
        10,
        75,
        76,
        78,
        79,
        84,
        85,
        86,
        88,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "range.is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 236,
          "bound": null
        },
        {
          "cond": "range.difference(&other.ranges[b]) matches (Some(range1), Some(range2))",
          "norm": null,
          "value": "true",
          "line": 247,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() > old_range.upper()",
          "norm": "old_range.upper() < other.ranges[b].upper()",
          "value": "false",
          "line": 258,
          "bound": "other.ranges[b].upper() == old_range.upper()"
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "false",
          "line": 235,
          "bound": "b == other.ranges.len()"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        45,
        46,
        47,
        52,
        54,
        60,
        61,
        62,
        63,
        64,
        65,
        67,
        68,
        38,
        39,
        40,
        69,
        70,
        71,
        72,
        73,
        9,
        10,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        78,
        79,
        84,
        85,
        86,
        87,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "range.is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 236,
          "bound": null
        },
        {
          "cond": "range.difference(&other.ranges[b]) matches (Some(range1), Some(range2))",
          "norm": null,
          "value": "true",
          "line": 247,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() > old_range.upper()",
          "norm": "old_range.upper() < other.ranges[b].upper()",
          "value": "false",
          "line": 258,
          "bound": "other.ranges[b].upper() == old_range.upper()"
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "false",
          "line": 235,
          "bound": "b == other.ranges.len()"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        45,
        46,
        47,
        52,
        54,
        60,
        61,
        62,
        63,
        64,
        65,
        67,
        68,
        38,
        39,
        40,
        69,
        70,
        71,
        72,
        73,
        9,
        10,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        78,
        79,
        84,
        85,
        86,
        88,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "range.is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 236,
          "bound": null
        },
        {
          "cond": "range.difference(&other.ranges[b]) matches (Some(range1), Some(range2))",
          "norm": null,
          "value": "true",
          "line": 247,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() > old_range.upper()",
          "norm": "old_range.upper() < other.ranges[b].upper()",
          "value": "false",
          "line": 258,
          "bound": "other.ranges[b].upper() == old_range.upper()"
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "false",
          "line": 235,
          "bound": "b == other.ranges.len()"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        45,
        46,
        47,
        52,
        54,
        60,
        61,
        62,
        63,
        64,
        65,
        67,
        68,
        38,
        39,
        40,
        69,
        70,
        71,
        72,
        73,
        9,
        10,
        75,
        76,
        78,
        79,
        84,
        85,
        86,
        87,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "range.is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 236,
          "bound": null
        },
        {
          "cond": "range.difference(&other.ranges[b]) matches (Some(range1), Some(range2))",
          "norm": null,
          "value": "true",
          "line": 247,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() > old_range.upper()",
          "norm": "old_range.upper() < other.ranges[b].upper()",
          "value": "false",
          "line": 258,
          "bound": "other.ranges[b].upper() == old_range.upper()"
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "false",
          "line": 235,
          "bound": "b == other.ranges.len()"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        45,
        46,
        47,
        52,
        54,
        60,
        61,
        62,
        63,
        64,
        65,
        67,
        68,
        38,
        39,
        40,
        69,
        70,
        71,
        72,
        73,
        9,
        10,
        75,
        76,
        78,
        79,
        84,
        85,
        86,
        88,
        89,
        90
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "range.is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 236,
          "bound": null
        },
        {
          "cond": "range.difference(&other.ranges[b]) matches (Some(range1), None)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() > old_range.upper()",
          "norm": "old_range.upper() < other.ranges[b].upper()",
          "value": "true",
          "line": 258,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        45,
        46,
        47,
        52,
        53,
        58,
        57,
        61,
        62,
        63,
        64,
        65,
        66,
        71,
        72,
        73,
        9,
        10,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        78,
        79,
        84,
        85,
        86,
        87,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "range.is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 236,
          "bound": null
        },
        {
          "cond": "range.difference(&other.ranges[b]) matches (Some(range1), None)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() > old_range.upper()",
          "norm": "old_range.upper() < other.ranges[b].upper()",
          "value": "true",
          "line": 258,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        45,
        46,
        47,
        52,
        53,
        58,
        57,
        61,
        62,
        63,
        64,
        65,
        66,
        71,
        72,
        73,
        9,
        10,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        78,
        79,
        84,
        85,
        86,
        88,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "range.is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 236,
          "bound": null
        },
        {
          "cond": "range.difference(&other.ranges[b]) matches (Some(range1), None)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() > old_range.upper()",
          "norm": "old_range.upper() < other.ranges[b].upper()",
          "value": "true",
          "line": 258,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        45,
        46,
        47,
        52,
        53,
        58,
        57,
        61,
        62,
        63,
        64,
        65,
        66,
        71,
        72,
        73,
        9,
        10,
        75,
        76,
        78,
        79,
        84,
        85,
        86,
        87,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "range.is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 236,
          "bound": null
        },
        {
          "cond": "range.difference(&other.ranges[b]) matches (Some(range1), None)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() > old_range.upper()",
          "norm": "old_range.upper() < other.ranges[b].upper()",
          "value": "true",
          "line": 258,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        45,
        46,
        47,
        52,
        53,
        58,
        57,
        61,
        62,
        63,
        64,
        65,
        66,
        71,
        72,
        73,
        9,
        10,
        75,
        76,
        78,
        79,
        84,
        85,
        86,
        88,
        89,
        90
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "range.is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 236,
          "bound": null
        },
        {
          "cond": "range.difference(&other.ranges[b]) matches (Some(range1), None)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() > old_range.upper()",
          "norm": "old_range.upper() < other.ranges[b].upper()",
          "value": "false",
          "line": 258,
          "bound": "other.ranges[b].upper() == old_range.upper()"
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "false",
          "line": 235,
          "bound": "b == other.ranges.len()"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        45,
        46,
        47,
        52,
        53,
        58,
        57,
        61,
        62,
        63,
        64,
        65,
        67,
        68,
        38,
        39,
        40,
        69,
        70,
        71,
        72,
        73,
        9,
        10,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        78,
        79,
        84,
        85,
        86,
        87,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 29,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "range.is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 236,
          "bound": null
        },
        {
          "cond": "range.difference(&other.ranges[b]) matches (Some(range1), None)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() > old_range.upper()",
          "norm": "old_range.upper() < other.ranges[b].upper()",
          "value": "false",
          "line": 258,
          "bound": "other.ranges[b].upper() == old_range.upper()"
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "false",
          "line": 235,
          "bound": "b == other.ranges.len()"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        45,
        46,
        47,
        52,
        53,
        58,
        57,
        61,
        62,
        63,
        64,
        65,
        67,
        68,
        38,
        39,
        40,
        69,
        70,
        71,
        72,
        73,
        9,
        10,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        78,
        79,
        84,
        85,
        86,
        88,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 30,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "range.is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 236,
          "bound": null
        },
        {
          "cond": "range.difference(&other.ranges[b]) matches (Some(range1), None)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() > old_range.upper()",
          "norm": "old_range.upper() < other.ranges[b].upper()",
          "value": "false",
          "line": 258,
          "bound": "other.ranges[b].upper() == old_range.upper()"
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "false",
          "line": 235,
          "bound": "b == other.ranges.len()"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        45,
        46,
        47,
        52,
        53,
        58,
        57,
        61,
        62,
        63,
        64,
        65,
        67,
        68,
        38,
        39,
        40,
        69,
        70,
        71,
        72,
        73,
        9,
        10,
        75,
        76,
        78,
        79,
        84,
        85,
        86,
        87,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 31,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "range.is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 236,
          "bound": null
        },
        {
          "cond": "range.difference(&other.ranges[b]) matches (Some(range1), None)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() > old_range.upper()",
          "norm": "old_range.upper() < other.ranges[b].upper()",
          "value": "false",
          "line": 258,
          "bound": "other.ranges[b].upper() == old_range.upper()"
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "false",
          "line": 235,
          "bound": "b == other.ranges.len()"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        45,
        46,
        47,
        52,
        53,
        58,
        57,
        61,
        62,
        63,
        64,
        65,
        67,
        68,
        38,
        39,
        40,
        69,
        70,
        71,
        72,
        73,
        9,
        10,
        75,
        76,
        78,
        79,
        84,
        85,
        86,
        88,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 32,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "range.is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 236,
          "bound": null
        },
        {
          "cond": "range.difference(&other.ranges[b]) matches (None, Some(range1))",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() > old_range.upper()",
          "norm": "old_range.upper() < other.ranges[b].upper()",
          "value": "true",
          "line": 258,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        45,
        46,
        47,
        49,
        51,
        59,
        57,
        61,
        62,
        63,
        64,
        65,
        66,
        71,
        72,
        73,
        9,
        10,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        78,
        79,
        84,
        85,
        86,
        87,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 33,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "range.is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 236,
          "bound": null
        },
        {
          "cond": "range.difference(&other.ranges[b]) matches (None, Some(range1))",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() > old_range.upper()",
          "norm": "old_range.upper() < other.ranges[b].upper()",
          "value": "true",
          "line": 258,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        45,
        46,
        47,
        49,
        51,
        59,
        57,
        61,
        62,
        63,
        64,
        65,
        66,
        71,
        72,
        73,
        9,
        10,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        78,
        79,
        84,
        85,
        86,
        88,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 34,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "range.is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 236,
          "bound": null
        },
        {
          "cond": "range.difference(&other.ranges[b]) matches (None, Some(range1))",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() > old_range.upper()",
          "norm": "old_range.upper() < other.ranges[b].upper()",
          "value": "true",
          "line": 258,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        45,
        46,
        47,
        49,
        51,
        59,
        57,
        61,
        62,
        63,
        64,
        65,
        66,
        71,
        72,
        73,
        9,
        10,
        75,
        76,
        78,
        79,
        84,
        85,
        86,
        87,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 35,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "range.is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 236,
          "bound": null
        },
        {
          "cond": "range.difference(&other.ranges[b]) matches (None, Some(range1))",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() > old_range.upper()",
          "norm": "old_range.upper() < other.ranges[b].upper()",
          "value": "true",
          "line": 258,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        45,
        46,
        47,
        49,
        51,
        59,
        57,
        61,
        62,
        63,
        64,
        65,
        66,
        71,
        72,
        73,
        9,
        10,
        75,
        76,
        78,
        79,
        84,
        85,
        86,
        88,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 36,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "range.is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 236,
          "bound": null
        },
        {
          "cond": "range.difference(&other.ranges[b]) matches (None, Some(range1))",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() > old_range.upper()",
          "norm": "old_range.upper() < other.ranges[b].upper()",
          "value": "false",
          "line": 258,
          "bound": "other.ranges[b].upper() == old_range.upper()"
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "false",
          "line": 235,
          "bound": "b == other.ranges.len()"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        45,
        46,
        47,
        49,
        51,
        59,
        57,
        61,
        62,
        63,
        64,
        65,
        67,
        68,
        38,
        39,
        40,
        69,
        70,
        71,
        72,
        73,
        9,
        10,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        78,
        79,
        84,
        85,
        86,
        87,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 37,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "range.is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 236,
          "bound": null
        },
        {
          "cond": "range.difference(&other.ranges[b]) matches (None, Some(range1))",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() > old_range.upper()",
          "norm": "old_range.upper() < other.ranges[b].upper()",
          "value": "false",
          "line": 258,
          "bound": "other.ranges[b].upper() == old_range.upper()"
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "false",
          "line": 235,
          "bound": "b == other.ranges.len()"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        45,
        46,
        47,
        49,
        51,
        59,
        57,
        61,
        62,
        63,
        64,
        65,
        67,
        68,
        38,
        39,
        40,
        69,
        70,
        71,
        72,
        73,
        9,
        10,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        78,
        79,
        84,
        85,
        86,
        88,
        89,
        90
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 38,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "range.is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 236,
          "bound": null
        },
        {
          "cond": "range.difference(&other.ranges[b]) matches (None, Some(range1))",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() > old_range.upper()",
          "norm": "old_range.upper() < other.ranges[b].upper()",
          "value": "false",
          "line": 258,
          "bound": "other.ranges[b].upper() == old_range.upper()"
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "false",
          "line": 235,
          "bound": "b == other.ranges.len()"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        45,
        46,
        47,
        49,
        51,
        59,
        57,
        61,
        62,
        63,
        64,
        65,
        67,
        68,
        38,
        39,
        40,
        69,
        70,
        71,
        72,
        73,
        9,
        10,
        75,
        76,
        78,
        79,
        84,
        85,
        86,
        87,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 39,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "range.is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 236,
          "bound": null
        },
        {
          "cond": "range.difference(&other.ranges[b]) matches (None, Some(range1))",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() > old_range.upper()",
          "norm": "old_range.upper() < other.ranges[b].upper()",
          "value": "false",
          "line": 258,
          "bound": "other.ranges[b].upper() == old_range.upper()"
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "false",
          "line": 235,
          "bound": "b == other.ranges.len()"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        45,
        46,
        47,
        49,
        51,
        59,
        57,
        61,
        62,
        63,
        64,
        65,
        67,
        68,
        38,
        39,
        40,
        69,
        70,
        71,
        72,
        73,
        9,
        10,
        75,
        76,
        78,
        79,
        84,
        85,
        86,
        88,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 40,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "range.is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 236,
          "bound": null
        },
        {
          "cond": "range.difference(&other.ranges[b]) matches (None, None)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        45,
        46,
        47,
        49,
        50,
        55,
        56,
        77,
        9,
        10,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        78,
        79,
        84,
        85,
        86,
        87,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 41,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "range.is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 236,
          "bound": null
        },
        {
          "cond": "range.difference(&other.ranges[b]) matches (None, None)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        45,
        46,
        47,
        49,
        50,
        55,
        56,
        77,
        9,
        10,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        78,
        79,
        84,
        85,
        86,
        88,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 42,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "range.is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 236,
          "bound": null
        },
        {
          "cond": "range.difference(&other.ranges[b]) matches (None, None)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        45,
        46,
        47,
        49,
        50,
        55,
        56,
        77,
        9,
        10,
        75,
        76,
        78,
        79,
        84,
        85,
        86,
        87,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 43,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 235,
          "bound": null
        },
        {
          "cond": "range.is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 236,
          "bound": null
        },
        {
          "cond": "range.difference(&other.ranges[b]) matches (None, None)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        45,
        46,
        47,
        49,
        50,
        55,
        56,
        77,
        9,
        10,
        75,
        76,
        78,
        79,
        84,
        85,
        86,
        88,
        89,
        90
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 44,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "false",
          "line": 235,
          "bound": "b == other.ranges.len()"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        69,
        70,
        71,
        72,
        73,
        9,
        10,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        78,
        79,
        84,
        85,
        86,
        87,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 45,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "false",
          "line": 235,
          "bound": "b == other.ranges.len()"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        69,
        70,
        71,
        72,
        73,
        9,
        10,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        78,
        79,
        84,
        85,
        86,
        88,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 46,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "false",
          "line": 235,
          "bound": "b == other.ranges.len()"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        69,
        70,
        71,
        72,
        73,
        9,
        10,
        75,
        76,
        78,
        79,
        84,
        85,
        86,
        87,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 47,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "other.ranges[b].upper() < self.ranges[a].lower()",
          "norm": null,
          "value": "false",
          "line": 208,
          "bound": "other.ranges[b].upper() == self.ranges[a].lower()"
        },
        {
          "cond": "self.ranges[a].upper() < other.ranges[b].lower()",
          "norm": "other.ranges[b].lower() > self.ranges[a].upper()",
          "value": "false",
          "line": 214,
          "bound": "self.ranges[a].upper() == other.ranges[b].lower()"
        },
        {
          "cond": "self.ranges[a].is_intersection_empty(&other.ranges[b])",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "false",
          "line": 235,
          "bound": "b == other.ranges.len()"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        69,
        70,
        71,
        72,
        73,
        9,
        10,
        75,
        76,
        78,
        79,
        84,
        85,
        86,
        88,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 48,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "b == other.ranges.len()"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        74,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        78,
        79,
        84,
        85,
        86,
        87,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 49,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "b == other.ranges.len()"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        74,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        78,
        79,
        84,
        85,
        86,
        88,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 50,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "b == other.ranges.len()"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        74,
        76,
        78,
        79,
        84,
        85,
        86,
        87,
        89,
        90
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 51,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        },
        {
          "cond": "b < other.ranges.len()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "b == other.ranges.len()"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        74,
        76,
        78,
        79,
        84,
        85,
        86,
        88,
        89,
        90
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 52,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        78,
        79,
        84,
        85,
        86,
        87,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 53,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        75,
        76,
        78,
        79,
        80,
        81,
        82,
        83,
        78,
        79,
        84,
        85,
        86,
        88,
        89,
        90
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 54,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "true",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        75,
        76,
        78,
        79,
        84,
        85,
        86,
        87,
        89,
        90
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 55,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "other.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": "a == drain_end"
        },
        {
          "cond": "a < drain_end",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": "a == drain_end"
        },
        {
          "cond": "self.folded",
          "norm": null,
          "value": "false",
          "line": 274,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        7,
        8,
        9,
        10,
        75,
        76,
        78,
        79,
        84,
        85,
        86,
        88,
        89,
        90
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}