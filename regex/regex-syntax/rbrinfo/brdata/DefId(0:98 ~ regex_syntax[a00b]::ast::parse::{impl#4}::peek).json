{
  "name": "regex_syntax::ast::parse::{impl#4}::peek",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:591:5:596:6",
  "doc": "/// Peek at the next character in the input without advancing the parser.\n///\n/// If the input has been exhausted, then this returns `None`.\n",
  "code": [
    "fn peek(&self) -> Option<char> {",
    "    if self.is_eof() {",
    "        return None;",
    "    }",
    "    self.pattern()[self.offset() + self.char().len_utf8()..].chars().next()",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 592,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        12
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 592,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}