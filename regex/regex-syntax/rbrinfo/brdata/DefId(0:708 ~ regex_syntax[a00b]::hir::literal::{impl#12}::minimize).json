{
  "name": "regex_syntax::hir::literal::{impl#12}::minimize",
  "mod_info": {
    "name": "hir::literal",
    "loc": "regex-syntax/src/hir/mod.rs:42:1:42:17"
  },
  "visible": false,
  "loc": "regex-syntax/src/hir/literal.rs:2237:5:2256:6",
  "doc": "/// Minimizes the given sequence of literals while preserving preference\n/// order semantics.\n///\n/// When `keep_exact` is true, the exactness of every literal retained is\n/// kept. This is useful when dealing with a fully extracted `Seq` that\n/// only contains exact literals. In that case, we can keep all retained\n/// literals as exact because we know we'll never need to match anything\n/// after them and because any removed literals are guaranteed to never\n/// match.\n",
  "code": [
    "fn minimize(literals: &mut Vec<Literal>, keep_exact: bool) {",
    "    let mut trie = PreferenceTrie {",
    "        states: vec![],",
    "        matches: vec![],",
    "        next_literal_index: 1,",
    "    };",
    "    let mut make_inexact = vec![];",
    "    literals.retain_mut(|lit| match trie.insert(lit.as_bytes()) {",
    "        Ok(_) => true,",
    "        Err(i) => {",
    "            if !keep_exact {",
    "                make_inexact.push(i.checked_sub(1).unwrap());",
    "            }",
    "            false",
    "        }",
    "    });",
    "    for i in make_inexact {",
    "        literals[i].make_inexact();",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 1,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "i in make_inexact",
          "norm": null,
          "value": "true",
          "line": 2253,
          "bound": null
        },
        {
          "cond": "i in make_inexact",
          "norm": null,
          "value": "false",
          "line": 2253,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        15,
        16,
        8,
        9,
        10,
        12,
        14,
        17,
        18,
        19,
        20
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "i in make_inexact",
          "norm": null,
          "value": "false",
          "line": 2253,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        14,
        17,
        18,
        19,
        20
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}