{
  "name": "regex_syntax::hir::literal::{impl#4}::union",
  "mod_info": {
    "name": "hir::literal",
    "loc": "regex-syntax/src/hir/mod.rs:42:1:42:17"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/literal.rs:1219:5:1235:6",
  "doc": "/// Unions the `other` sequence into this one.\n///\n/// The literals are always drained out of the given `other` sequence,\n/// even if they are being unioned into an infinite sequence. This permits\n/// the caller to reuse the `other` sequence in another context.\n///\n/// Some literal deduping may be performed. If any deduping happens,\n/// any leftmost-first or \"preference\" order match semantics will be\n/// preserved.\n///\n/// # Example\n///\n/// This example shows basic usage.\n///\n/// ```\n/// use regex_syntax::hir::literal::Seq;\n///\n/// let mut seq1 = Seq::new(&[\"foo\", \"bar\"]);\n/// let mut seq2 = Seq::new(&[\"bar\", \"quux\", \"foo\"]);\n/// seq1.union(&mut seq2);\n///\n/// // The literals are pulled out of seq2.\n/// assert_eq!(Some(0), seq2.len());\n///\n/// // Adjacent literals are deduped, but non-adjacent literals may not be.\n/// assert_eq!(Seq::new(&[\"foo\", \"bar\", \"quux\", \"foo\"]), seq1);\n/// ```\n///\n/// This example shows that literals are drained from `other` even when\n/// they aren't necessarily used.\n///\n/// ```\n/// use regex_syntax::hir::literal::Seq;\n///\n/// let mut seq1 = Seq::infinite();\n/// // Infinite sequences have no finite length.\n/// assert_eq!(None, seq1.len());\n///\n/// let mut seq2 = Seq::new(&[\"bar\", \"quux\", \"foo\"]);\n/// seq1.union(&mut seq2);\n///\n/// // seq1 is still infinite and seq2 has been drained.\n/// assert_eq!(None, seq1.len());\n/// assert_eq!(Some(0), seq2.len());\n/// ```\n",
  "code": [
    "pub fn union(&mut self, other: &mut Seq) {",
    "    let lits2 = match other.literals {",
    "        None => {",
    "            // Unioning with an infinite sequence always results in an",
    "            // infinite sequence.",
    "            self.make_infinite();",
    "            return;",
    "        }",
    "        Some(ref mut lits) => lits.drain(..),",
    "    };",
    "    let lits1 = match self.literals {",
    "        None => return,",
    "        Some(ref mut lits) => lits,",
    "    };",
    "    lits1.extend(lits2);",
    "    self.dedup();",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "other.literals matches Some(ref mut lits)",
          "norm": null,
          "value": "true",
          "line": 1220,
          "bound": null
        },
        {
          "cond": "self.literals matches Some(ref mut lits)",
          "norm": null,
          "value": "true",
          "line": 1229,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        6,
        9,
        11,
        12,
        13,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "other.literals matches Some(ref mut lits)",
          "norm": null,
          "value": "true",
          "line": 1220,
          "bound": null
        },
        {
          "cond": "self.literals matches None",
          "norm": null,
          "value": "true",
          "line": 1229,
          "bound": null
        },
        {
          "cond": "self.literals matches None",
          "norm": null,
          "value": "true",
          "line": 1229,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        6,
        8,
        10,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "other.literals matches None",
          "norm": null,
          "value": "true",
          "line": 1220,
          "bound": null
        },
        {
          "cond": "other.literals matches None",
          "norm": null,
          "value": "true",
          "line": 1220,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        4,
        5,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}