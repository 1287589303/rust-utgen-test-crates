{
  "name": "regex_syntax::hir::literal::{impl#0}::extract",
  "mod_info": {
    "name": "hir::literal",
    "loc": "regex-syntax/src/hir/mod.rs:42:1:42:17"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/literal.rs:171:5:199:6",
  "doc": "/// Execute the extractor and return a sequence of literals.\n",
  "code": [
    "pub fn extract(&self, hir: &Hir) -> Seq {",
    "    use crate::hir::HirKind::*;",
    "",
    "    match *hir.kind() {",
    "        Empty | Look(_) => Seq::singleton(self::Literal::exact(vec![])),",
    "        Literal(hir::Literal(ref bytes)) => {",
    "            let mut seq =",
    "                Seq::singleton(self::Literal::exact(bytes.to_vec()));",
    "            self.enforce_literal_len(&mut seq);",
    "            seq",
    "        }",
    "        Class(hir::Class::Unicode(ref cls)) => {",
    "            self.extract_class_unicode(cls)",
    "        }",
    "        Class(hir::Class::Bytes(ref cls)) => self.extract_class_bytes(cls),",
    "        Repetition(ref rep) => self.extract_repetition(rep),",
    "        Capture(hir::Capture { ref sub, .. }) => self.extract(sub),",
    "        Concat(ref hirs) => match self.kind {",
    "            ExtractKind::Prefix => self.extract_concat(hirs.iter()),",
    "            ExtractKind::Suffix => self.extract_concat(hirs.iter().rev()),",
    "        },",
    "        Alternation(ref hirs) => {",
    "            // Unlike concat, we always union starting from the beginning,",
    "            // since the beginning corresponds to the highest preference,",
    "            // which doesn't change based on forwards vs reverse.",
    "            self.extract_alternation(hirs.iter())",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 10,
    "contra": 0,
    "min_set": 8
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*hir.kind() matches Alternation(ref hirs)",
          "norm": null,
          "value": "true",
          "line": 174,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        10,
        43,
        44,
        45,
        46
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*hir.kind() matches Concat(ref hirs)",
          "norm": null,
          "value": "true",
          "line": 174,
          "bound": null
        },
        {
          "cond": "*hir.kind() matches Concat(ref hirs)",
          "norm": null,
          "value": "true",
          "line": 174,
          "bound": null
        },
        {
          "cond": "self.kind matches ExtractKind::Suffix",
          "norm": null,
          "value": "true",
          "line": 188,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        9,
        30,
        33,
        38,
        39,
        40,
        41,
        42,
        46
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "*hir.kind() matches Concat(ref hirs)",
          "norm": null,
          "value": "true",
          "line": 174,
          "bound": null
        },
        {
          "cond": "*hir.kind() matches Concat(ref hirs)",
          "norm": null,
          "value": "true",
          "line": 174,
          "bound": null
        },
        {
          "cond": "self.kind matches ExtractKind::Prefix",
          "norm": null,
          "value": "true",
          "line": 188,
          "bound": null
        },
        {
          "cond": "self.kind matches ExtractKind::Prefix",
          "norm": null,
          "value": "true",
          "line": 188,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        9,
        30,
        32,
        34,
        35,
        36,
        37,
        42,
        46
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "*hir.kind() matches Capture(hir::Capture { ref sub, .. })",
          "norm": null,
          "value": "true",
          "line": 174,
          "bound": null
        },
        {
          "cond": "*hir.kind() matches Capture(hir::Capture { ref sub, .. })",
          "norm": null,
          "value": "true",
          "line": 174,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        8,
        28,
        29,
        46
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "*hir.kind() matches Repetition(ref rep)",
          "norm": null,
          "value": "true",
          "line": 174,
          "bound": null
        },
        {
          "cond": "*hir.kind() matches Repetition(ref rep)",
          "norm": null,
          "value": "true",
          "line": 174,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        7,
        26,
        27,
        46
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "*hir.kind() matches Look(_)",
          "norm": null,
          "value": "true",
          "line": 174,
          "bound": null
        },
        {
          "cond": "*hir.kind() matches Empty or Look(_)",
          "norm": null,
          "value": "true",
          "line": 174,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        11,
        12,
        13,
        14,
        15,
        46
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "*hir.kind() matches Class(hir::Class::Bytes(ref cls)) or Class(hir::Class::Unicode(ref cls))",
          "norm": null,
          "value": "true",
          "line": 174,
          "bound": null
        },
        {
          "cond": "*hir.kind() matches Literal(hir::Literal(ref bytes))",
          "norm": null,
          "value": "true",
          "line": 174,
          "bound": null
        },
        {
          "cond": "*hir.kind() matches Class(hir::Class::Bytes(ref cls))",
          "norm": null,
          "value": "true",
          "line": 174,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        6,
        24,
        25,
        46
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "*hir.kind() matches Class(hir::Class::Bytes(ref cls)) or Class(hir::Class::Unicode(ref cls))",
          "norm": null,
          "value": "true",
          "line": 174,
          "bound": null
        },
        {
          "cond": "*hir.kind() matches Empty",
          "norm": null,
          "value": "true",
          "line": 174,
          "bound": null
        },
        {
          "cond": "*hir.kind() matches Class(hir::Class::Unicode(ref cls))",
          "norm": null,
          "value": "true",
          "line": 174,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        5,
        22,
        23,
        46
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "*hir.kind() matches Literal(hir::Literal(ref bytes))",
          "norm": null,
          "value": "true",
          "line": 174,
          "bound": null
        },
        {
          "cond": "*hir.kind() matches Literal(hir::Literal(ref bytes))",
          "norm": null,
          "value": "true",
          "line": 174,
          "bound": null
        }
      ],
      "ret": "seq",
      "path": [
        0,
        1,
        3,
        16,
        17,
        18,
        19,
        20,
        21,
        46
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "*hir.kind() matches Empty",
          "norm": null,
          "value": "true",
          "line": 174,
          "bound": null
        },
        {
          "cond": "*hir.kind() matches Empty or Look(_)",
          "norm": null,
          "value": "true",
          "line": 174,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        11,
        12,
        13,
        14,
        15,
        46
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}