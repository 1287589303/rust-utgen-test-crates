{
  "name": "regex_syntax::hir::{impl#25}::look_set_suffix_any",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:2071:5:2073:6",
  "doc": "/// Returns a set of all look-around assertions that appear as a _possible_\n/// suffix for this HIR value. That is, the set returned corresponds to the\n/// set of assertions that _may_ be passed before matching any bytes in a\n/// haystack.\n///\n/// For example, `hir.look_set_suffix_any().contains(Look::End)` returns\n/// true if and only if it's possible for the regex to match through a\n/// anchored assertion at the end of a match without consuming any input.\n",
  "code": [
    "pub fn look_set_suffix_any(&self) -> LookSet {",
    "    self.0.look_set_suffix_any",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self.0.look_set_suffix_any",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}