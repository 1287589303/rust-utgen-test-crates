{
  "name": "regex_syntax::utf8::{impl#9}::encode",
  "mod_info": {
    "name": "utf8",
    "loc": "regex-syntax/src/lib.rs:195:1:195:14"
  },
  "visible": false,
  "loc": "regex-syntax/src/utf8.rs:435:5:442:6",
  "doc": "/// encode writes the UTF-8 encoding of the start and end of this range\n/// to the corresponding destination slices, and returns the number of\n/// bytes written.\n///\n/// The slices should have room for at least `MAX_UTF8_BYTES`.\n",
  "code": [
    "fn encode(&self, start: &mut [u8], end: &mut [u8]) -> usize {",
    "    let cs = char::from_u32(self.start).unwrap();",
    "    let ce = char::from_u32(self.end).unwrap();",
    "    let ss = cs.encode_utf8(start);",
    "    let se = ce.encode_utf8(end);",
    "    assert_eq!(ss.len(), se.len());",
    "    ss.len()",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        10,
        12
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}