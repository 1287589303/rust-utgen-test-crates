{
  "name": "regex_syntax::hir::literal::{impl#4}::infinite",
  "mod_info": {
    "name": "hir::literal",
    "loc": "regex-syntax/src/hir/mod.rs:42:1:42:17"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/literal.rs:776:5:778:6",
  "doc": "/// Returns a sequence of literals without a finite size and may contain\n/// any literal.\n///\n/// A sequence without finite size does not reveal anything about the\n/// characteristics of the literals in its set. There are no fixed prefixes\n/// or suffixes, nor are lower or upper bounds on the length of the literals\n/// in the set known.\n///\n/// This is useful to represent constructs in a regex that are \"too big\"\n/// to useful represent as a sequence of literals. For example, `[A-Za-z]`.\n/// When sequences get too big, they lose their discriminating nature and\n/// are more likely to produce false positives, which in turn makes them\n/// less likely to speed up searches.\n///\n/// More pragmatically, for many regexes, enumerating all possible literals\n/// is itself not possible or might otherwise use too many resources. So\n/// constraining the size of sets during extraction is a practical trade\n/// off to make.\n",
  "code": [
    "pub fn infinite() -> Seq {",
    "    Seq { literals: None }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Seq { literals: None }",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}