{
  "name": "regex_syntax::ast::parse::{impl#5}::parse_set_class_item",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:1991:5:2003:6",
  "doc": "/// Parse a single item in a character class as a primitive, where the\n/// primitive either consists of a verbatim literal or a single escape\n/// sequence.\n///\n/// This assumes the parser is positioned at the beginning of a primitive,\n/// and advances the parser to the first position after the primitive if\n/// successful.\n///\n/// Note that it is the caller's responsibility to report an error if an\n/// illegal primitive was parsed.\n",
  "code": [
    "fn parse_set_class_item(&self) -> Result<Primitive> {",
    "    if self.char() == '\\\\' {",
    "        self.parse_escape()",
    "    } else {",
    "        let x = Primitive::Literal(ast::Literal {",
    "            span: self.span_char(),",
    "            kind: ast::LiteralKind::Verbatim,",
    "            c: self.char(),",
    "        });",
    "        self.bump();",
    "        Ok(x)",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.char() == '\\\\'",
          "norm": "'\\\\' == self.char()",
          "value": "false",
          "line": 1992,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        10
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.char() == '\\\\'",
          "norm": "'\\\\' == self.char()",
          "value": "true",
          "line": 1992,
          "bound": null
        }
      ],
      "ret": "Ok(x)",
      "path": [
        0,
        1,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}