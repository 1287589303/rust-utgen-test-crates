{
  "name": "regex_syntax::hir::{impl#17}::symmetric_difference",
  "mod_info": {
    "name": "hir",
    "loc": "regex-syntax/src/lib.rs:190:1:190:13"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/mod.rs:1433:5:1435:6",
  "doc": "/// Compute the symmetric difference of the given byte classes, in place.\n///\n/// This computes the symmetric difference of two byte classes. This\n/// removes all elements in this class that are also in the given class,\n/// but all adds all elements from the given class that aren't in this\n/// class. That is, the class will contain all elements in either class,\n/// but will not contain any elements that are in both classes.\n",
  "code": [
    "pub fn symmetric_difference(&mut self, other: &ClassBytes) {",
    "    self.set.symmetric_difference(&other.set);",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}