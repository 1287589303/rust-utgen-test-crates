{
  "name": "regex_syntax::ast::parse::specialize_err",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:2420:1:2434:2",
  "doc": "/// When the result is an error, transforms the ast::ErrorKind from the source\n/// Result into another one. This function is used to return clearer error\n/// messages when possible.\n",
  "code": [
    "fn specialize_err<T>(",
    "    result: Result<T>,",
    "    from: ast::ErrorKind,",
    "    to: ast::ErrorKind,",
    ") -> Result<T> {",
    "    if let Err(e) = result {",
    "        if e.kind == from {",
    "            Err(ast::Error { kind: to, pattern: e.pattern, span: e.span })",
    "        } else {",
    "            Err(e)",
    "        }",
    "    } else {",
    "        result",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Err(e) = result",
          "norm": null,
          "value": "true",
          "line": 2425,
          "bound": null
        }
      ],
      "ret": "result",
      "path": [
        0,
        10,
        12,
        13
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Err(e) = result",
          "norm": null,
          "value": "true",
          "line": 2425,
          "bound": null
        },
        {
          "cond": "e.kind == from",
          "norm": null,
          "value": "true",
          "line": 2426,
          "bound": null
        }
      ],
      "ret": "Err(ast::Error { kind: to, pattern: e.pattern, span: e.span })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        11,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Err(e) = result",
          "norm": null,
          "value": "true",
          "line": 2425,
          "bound": null
        },
        {
          "cond": "e.kind == from",
          "norm": null,
          "value": "false",
          "line": 2426,
          "bound": null
        }
      ],
      "ret": "Err(e)",
      "path": [
        0,
        1,
        2,
        3,
        7,
        8,
        9,
        11,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}