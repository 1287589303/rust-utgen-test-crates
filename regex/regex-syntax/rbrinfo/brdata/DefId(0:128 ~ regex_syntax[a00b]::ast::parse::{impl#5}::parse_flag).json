{
  "name": "regex_syntax::ast::parse::{impl#5}::parse_flag",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:1411:5:1425:6",
  "doc": "/// Parse the current character as a flag. Do not advance the parser.\n///\n/// # Errors\n///\n/// If the flag is not recognized, then an error is returned.\n",
  "code": [
    "fn parse_flag(&self) -> Result<ast::Flag> {",
    "    match self.char() {",
    "        'i' => Ok(ast::Flag::CaseInsensitive),",
    "        'm' => Ok(ast::Flag::MultiLine),",
    "        's' => Ok(ast::Flag::DotMatchesNewLine),",
    "        'U' => Ok(ast::Flag::SwapGreed),",
    "        'u' => Ok(ast::Flag::Unicode),",
    "        'R' => Ok(ast::Flag::CRLF),",
    "        'x' => Ok(ast::Flag::IgnoreWhitespace),",
    "        _ => {",
    "            Err(self",
    "                .error(self.span_char(), ast::ErrorKind::FlagUnrecognized))",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 8,
    "contra": 0,
    "min_set": 8
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.char() matches 'U'",
          "norm": null,
          "value": "true",
          "line": 1416,
          "bound": null
        },
        {
          "cond": "self.char() matches 'i'",
          "norm": null,
          "value": "true",
          "line": 1413,
          "bound": null
        },
        {
          "cond": "self.char() matches 'm'",
          "norm": null,
          "value": "true",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "self.char() matches 'u'",
          "norm": null,
          "value": "true",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "self.char() matches 'R'",
          "norm": null,
          "value": "true",
          "line": 1418,
          "bound": null
        },
        {
          "cond": "self.char() matches 's'",
          "norm": null,
          "value": "true",
          "line": 1415,
          "bound": null
        },
        {
          "cond": "self.char() matches 'x'",
          "norm": null,
          "value": "true",
          "line": 1419,
          "bound": null
        },
        {
          "cond": "self.char() matches _",
          "norm": null,
          "value": "true",
          "line": 1420,
          "bound": null
        }
      ],
      "ret": "Err(self\n                    .error(self.span_char(), ast::ErrorKind::FlagUnrecognized))",
      "path": [
        0,
        1,
        2,
        17,
        18,
        19,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.char() matches 'x'",
          "norm": null,
          "value": "true",
          "line": 1419,
          "bound": null
        },
        {
          "cond": "self.char() matches 'x'",
          "norm": null,
          "value": "true",
          "line": 1412,
          "bound": null
        }
      ],
      "ret": "Ok(ast::Flag::IgnoreWhitespace)",
      "path": [
        0,
        1,
        9,
        16,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.char() matches 'R'",
          "norm": null,
          "value": "true",
          "line": 1418,
          "bound": null
        },
        {
          "cond": "self.char() matches 'R'",
          "norm": null,
          "value": "true",
          "line": 1412,
          "bound": null
        }
      ],
      "ret": "Ok(ast::Flag::CRLF)",
      "path": [
        0,
        1,
        8,
        15,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.char() matches 'u'",
          "norm": null,
          "value": "true",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "self.char() matches 'u'",
          "norm": null,
          "value": "true",
          "line": 1412,
          "bound": null
        }
      ],
      "ret": "Ok(ast::Flag::Unicode)",
      "path": [
        0,
        1,
        7,
        14,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.char() matches 'U'",
          "norm": null,
          "value": "true",
          "line": 1416,
          "bound": null
        },
        {
          "cond": "self.char() matches 'U'",
          "norm": null,
          "value": "true",
          "line": 1412,
          "bound": null
        }
      ],
      "ret": "Ok(ast::Flag::SwapGreed)",
      "path": [
        0,
        1,
        6,
        13,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.char() matches 's'",
          "norm": null,
          "value": "true",
          "line": 1415,
          "bound": null
        },
        {
          "cond": "self.char() matches 's'",
          "norm": null,
          "value": "true",
          "line": 1412,
          "bound": null
        }
      ],
      "ret": "Ok(ast::Flag::DotMatchesNewLine)",
      "path": [
        0,
        1,
        5,
        12,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.char() matches 'm'",
          "norm": null,
          "value": "true",
          "line": 1414,
          "bound": null
        },
        {
          "cond": "self.char() matches 'm'",
          "norm": null,
          "value": "true",
          "line": 1412,
          "bound": null
        }
      ],
      "ret": "Ok(ast::Flag::MultiLine)",
      "path": [
        0,
        1,
        4,
        11,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.char() matches 'i'",
          "norm": null,
          "value": "true",
          "line": 1413,
          "bound": null
        },
        {
          "cond": "self.char() matches 'i'",
          "norm": null,
          "value": "true",
          "line": 1412,
          "bound": null
        }
      ],
      "ret": "Ok(ast::Flag::CaseInsensitive)",
      "path": [
        0,
        1,
        3,
        10,
        20
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}