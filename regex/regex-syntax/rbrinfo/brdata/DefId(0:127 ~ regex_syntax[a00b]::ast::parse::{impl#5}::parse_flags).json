{
  "name": "regex_syntax::ast::parse::{impl#5}::parse_flags",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:1359:5:1403:6",
  "doc": "/// Parse a sequence of flags starting at the current character.\n///\n/// This advances the parser to the character immediately following the\n/// flags, which is guaranteed to be either `:` or `)`.\n///\n/// # Errors\n///\n/// If any flags are duplicated, then an error is returned.\n///\n/// If the negation operator is used more than once, then an error is\n/// returned.\n///\n/// If no flags could be found or if the negation operation is not followed\n/// by any flags, then an error is returned.\n",
  "code": [
    "fn parse_flags(&self) -> Result<ast::Flags> {",
    "    let mut flags = ast::Flags { span: self.span(), items: vec![] };",
    "    let mut last_was_negation = None;",
    "    while self.char() != ':' && self.char() != ')' {",
    "        if self.char() == '-' {",
    "            last_was_negation = Some(self.span_char());",
    "            let item = ast::FlagsItem {",
    "                span: self.span_char(),",
    "                kind: ast::FlagsItemKind::Negation,",
    "            };",
    "            if let Some(i) = flags.add_item(item) {",
    "                return Err(self.error(",
    "                    self.span_char(),",
    "                    ast::ErrorKind::FlagRepeatedNegation {",
    "                        original: flags.items[i].span,",
    "                    },",
    "                ));",
    "            }",
    "        } else {",
    "            last_was_negation = None;",
    "            let item = ast::FlagsItem {",
    "                span: self.span_char(),",
    "                kind: ast::FlagsItemKind::Flag(self.parse_flag()?),",
    "            };",
    "            if let Some(i) = flags.add_item(item) {",
    "                return Err(self.error(",
    "                    self.span_char(),",
    "                    ast::ErrorKind::FlagDuplicate {",
    "                        original: flags.items[i].span,",
    "                    },",
    "                ));",
    "            }",
    "        }",
    "        if !self.bump() {",
    "            return Err(",
    "                self.error(self.span(), ast::ErrorKind::FlagUnexpectedEof)",
    "            );",
    "        }",
    "    }",
    "    if let Some(span) = last_was_negation {",
    "        return Err(self.error(span, ast::ErrorKind::FlagDanglingNegation));",
    "    }",
    "    flags.span.end = self.pos();",
    "    Ok(flags)",
    "}"
  ],
  "size": {
    "chain": 13,
    "contra": 4,
    "min_set": 6
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "true",
          "line": 1362,
          "bound": null
        },
        {
          "cond": "self.char() != ')'",
          "norm": "')' != self.char()",
          "value": "true",
          "line": 1362,
          "bound": null
        },
        {
          "cond": "self.char() == '-'",
          "norm": "'-' == self.char()",
          "value": "false",
          "line": 1363,
          "bound": null
        },
        {
          "cond": "let Some(i) = flags.add_item(item)",
          "norm": null,
          "value": "true",
          "line": 1369,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 1392,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 1362,
          "bound": null
        },
        {
          "cond": "let Some(span) = last_was_negation",
          "norm": null,
          "value": "true",
          "line": 1398,
          "bound": null
        }
      ],
      "ret": "Ok(flags)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        21,
        40,
        41,
        42,
        4,
        5,
        6,
        48,
        49,
        50,
        55,
        56,
        57,
        64
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "true",
          "line": 1362,
          "bound": null
        },
        {
          "cond": "self.char() != ')'",
          "norm": "')' != self.char()",
          "value": "true",
          "line": 1362,
          "bound": null
        },
        {
          "cond": "self.char() == '-'",
          "norm": "'-' == self.char()",
          "value": "false",
          "line": 1363,
          "bound": null
        },
        {
          "cond": "let Some(i) = flags.add_item(item)",
          "norm": null,
          "value": "true",
          "line": 1369,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 1392,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 1362,
          "bound": null
        },
        {
          "cond": "let Some(span) = last_was_negation",
          "norm": null,
          "value": "true",
          "line": 1398,
          "bound": null
        }
      ],
      "ret": "Err(self.error(span, ast::ErrorKind::FlagDanglingNegation))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        21,
        40,
        41,
        42,
        4,
        5,
        6,
        48,
        49,
        51,
        52,
        53,
        54,
        62,
        63,
        64
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "true",
          "line": 1362,
          "bound": null
        },
        {
          "cond": "self.char() != ')'",
          "norm": "')' != self.char()",
          "value": "true",
          "line": 1362,
          "bound": null
        },
        {
          "cond": "self.char() == '-'",
          "norm": "'-' == self.char()",
          "value": "false",
          "line": 1363,
          "bound": null
        },
        {
          "cond": "let Some(i) = flags.add_item(item)",
          "norm": null,
          "value": "true",
          "line": 1369,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "false",
          "line": 1392,
          "bound": null
        }
      ],
      "ret": "Err(\n                    self.error(self.span(), ast::ErrorKind::FlagUnexpectedEof)\n                )",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        21,
        40,
        41,
        43,
        44,
        45,
        46,
        61,
        62,
        63,
        64
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "true",
          "line": 1362,
          "bound": null
        },
        {
          "cond": "self.char() != ')'",
          "norm": "')' != self.char()",
          "value": "true",
          "line": 1362,
          "bound": null
        },
        {
          "cond": "self.char() == '-'",
          "norm": "'-' == self.char()",
          "value": "false",
          "line": 1363,
          "bound": null
        },
        {
          "cond": "let Some(i) = flags.add_item(item)",
          "norm": null,
          "value": "true",
          "line": 1369,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                        self.span_char(),\n                        ast::ErrorKind::FlagRepeatedNegation {\n                            original: flags.items[i].span,\n                        },\n                    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        60,
        61,
        62,
        63,
        64
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "true",
          "line": 1362,
          "bound": null
        },
        {
          "cond": "self.char() != ')'",
          "norm": "')' != self.char()",
          "value": "true",
          "line": 1362,
          "bound": null
        },
        {
          "cond": "self.char() == '-'",
          "norm": "'-' == self.char()",
          "value": "true",
          "line": 1363,
          "bound": null
        },
        {
          "cond": "self.parse_flag()?",
          "norm": null,
          "value": "Err/None",
          "line": 1381,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        22,
        23,
        24,
        25,
        27,
        29,
        30,
        58,
        59,
        60,
        61,
        62,
        63,
        64
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "true",
          "line": 1362,
          "bound": null
        },
        {
          "cond": "self.char() != ')'",
          "norm": "')' != self.char()",
          "value": "true",
          "line": 1362,
          "bound": null
        },
        {
          "cond": "self.char() == '-'",
          "norm": "'-' == self.char()",
          "value": "true",
          "line": 1363,
          "bound": null
        },
        {
          "cond": "self.parse_flag()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1381,
          "bound": null
        },
        {
          "cond": "let Some(i) = flags.add_item(item)",
          "norm": null,
          "value": "true",
          "line": 1383,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 1392,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 1362,
          "bound": null
        },
        {
          "cond": "let Some(span) = last_was_negation",
          "norm": null,
          "value": "true",
          "line": 1398,
          "bound": null
        }
      ],
      "ret": "Ok(flags)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        22,
        23,
        24,
        25,
        28,
        31,
        32,
        39,
        40,
        41,
        42,
        4,
        5,
        6,
        48,
        49,
        50,
        55,
        56,
        57,
        64
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "true",
          "line": 1362,
          "bound": null
        },
        {
          "cond": "self.char() != ')'",
          "norm": "')' != self.char()",
          "value": "true",
          "line": 1362,
          "bound": null
        },
        {
          "cond": "self.char() == '-'",
          "norm": "'-' == self.char()",
          "value": "true",
          "line": 1363,
          "bound": null
        },
        {
          "cond": "self.parse_flag()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1381,
          "bound": null
        },
        {
          "cond": "let Some(i) = flags.add_item(item)",
          "norm": null,
          "value": "true",
          "line": 1383,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "true",
          "line": 1392,
          "bound": null
        },
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 1362,
          "bound": null
        },
        {
          "cond": "let Some(span) = last_was_negation",
          "norm": null,
          "value": "true",
          "line": 1398,
          "bound": null
        }
      ],
      "ret": "Err(self.error(span, ast::ErrorKind::FlagDanglingNegation))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        22,
        23,
        24,
        25,
        28,
        31,
        32,
        39,
        40,
        41,
        42,
        4,
        5,
        6,
        48,
        49,
        51,
        52,
        53,
        54,
        62,
        63,
        64
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "true",
          "line": 1362,
          "bound": null
        },
        {
          "cond": "self.char() != ')'",
          "norm": "')' != self.char()",
          "value": "true",
          "line": 1362,
          "bound": null
        },
        {
          "cond": "self.char() == '-'",
          "norm": "'-' == self.char()",
          "value": "true",
          "line": 1363,
          "bound": null
        },
        {
          "cond": "self.parse_flag()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1381,
          "bound": null
        },
        {
          "cond": "let Some(i) = flags.add_item(item)",
          "norm": null,
          "value": "true",
          "line": 1383,
          "bound": null
        },
        {
          "cond": "self.bump()",
          "norm": null,
          "value": "false",
          "line": 1392,
          "bound": null
        }
      ],
      "ret": "Err(\n                    self.error(self.span(), ast::ErrorKind::FlagUnexpectedEof)\n                )",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        22,
        23,
        24,
        25,
        28,
        31,
        32,
        39,
        40,
        41,
        43,
        44,
        45,
        46,
        61,
        62,
        63,
        64
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "true",
          "line": 1362,
          "bound": null
        },
        {
          "cond": "self.char() != ')'",
          "norm": "')' != self.char()",
          "value": "true",
          "line": 1362,
          "bound": null
        },
        {
          "cond": "self.char() == '-'",
          "norm": "'-' == self.char()",
          "value": "true",
          "line": 1363,
          "bound": null
        },
        {
          "cond": "self.parse_flag()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1381,
          "bound": null
        },
        {
          "cond": "let Some(i) = flags.add_item(item)",
          "norm": null,
          "value": "true",
          "line": 1383,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                        self.span_char(),\n                        ast::ErrorKind::FlagDuplicate {\n                            original: flags.items[i].span,\n                        },\n                    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        22,
        23,
        24,
        25,
        28,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        60,
        61,
        62,
        63,
        64
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "true",
          "line": 1362,
          "bound": null
        },
        {
          "cond": "self.char() != ')'",
          "norm": "')' != self.char()",
          "value": "false",
          "line": 1362,
          "bound": null
        },
        {
          "cond": "let Some(span) = last_was_negation",
          "norm": null,
          "value": "true",
          "line": 1398,
          "bound": null
        }
      ],
      "ret": "Ok(flags)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        47,
        49,
        50,
        55,
        56,
        57,
        64
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "true",
          "line": 1362,
          "bound": null
        },
        {
          "cond": "self.char() != ')'",
          "norm": "')' != self.char()",
          "value": "false",
          "line": 1362,
          "bound": null
        },
        {
          "cond": "let Some(span) = last_was_negation",
          "norm": null,
          "value": "true",
          "line": 1398,
          "bound": null
        }
      ],
      "ret": "Err(self.error(span, ast::ErrorKind::FlagDanglingNegation))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        47,
        49,
        51,
        52,
        53,
        54,
        62,
        63,
        64
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 1362,
          "bound": null
        },
        {
          "cond": "let Some(span) = last_was_negation",
          "norm": null,
          "value": "true",
          "line": 1398,
          "bound": null
        }
      ],
      "ret": "Ok(flags)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        48,
        49,
        50,
        55,
        56,
        57,
        64
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "self.char() != ':'",
          "norm": "':' != self.char()",
          "value": "false",
          "line": 1362,
          "bound": null
        },
        {
          "cond": "let Some(span) = last_was_negation",
          "norm": null,
          "value": "true",
          "line": 1398,
          "bound": null
        }
      ],
      "ret": "Err(self.error(span, ast::ErrorKind::FlagDanglingNegation))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        48,
        49,
        51,
        52,
        53,
        54,
        62,
        63,
        64
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}