{
  "name": "regex_syntax::ast::parse::{impl#5}::maybe_parse_special_word_boundary",
  "mod_info": {
    "name": "ast::parse",
    "loc": "regex-syntax/src/ast/mod.rs:11:1:11:15"
  },
  "visible": false,
  "loc": "regex-syntax/src/ast/parse.rs:1617:5:1672:6",
  "doc": "/// Attempt to parse a specialty word boundary. That is, `\\b{start}`,\n/// `\\b{end}`, `\\b{start-half}` or `\\b{end-half}`.\n///\n/// This is similar to `maybe_parse_ascii_class` in that, in most cases,\n/// if it fails it will just return `None` with no error. This is done\n/// because `\\b{5}` is a valid expression and we want to let that be parsed\n/// by the existing counted repetition parsing code. (I thought about just\n/// invoking the counted repetition code from here, but it seemed a little\n/// ham-fisted.)\n///\n/// Unlike `maybe_parse_ascii_class` though, this can return an error.\n/// Namely, if we definitely know it isn't a counted repetition, then we\n/// return an error specific to the specialty word boundaries.\n///\n/// This assumes the parser is positioned at a `{` immediately following\n/// a `\\b`. When `None` is returned, the parser is returned to the position\n/// at which it started: pointing at a `{`.\n///\n/// The position given should correspond to the start of the `\\b`.\n",
  "code": [
    "fn maybe_parse_special_word_boundary(",
    "    &self,",
    "    wb_start: Position,",
    ") -> Result<Option<ast::AssertionKind>> {",
    "    assert_eq!(self.char(), '{');",
    "",
    "    let is_valid_char = |c| match c {",
    "        'A'..='Z' | 'a'..='z' | '-' => true,",
    "        _ => false,",
    "    };",
    "    let start = self.pos();",
    "    if !self.bump_and_bump_space() {",
    "        return Err(self.error(",
    "            Span::new(wb_start, self.pos()),",
    "            ast::ErrorKind::SpecialWordOrRepetitionUnexpectedEof,",
    "        ));",
    "    }",
    "    let start_contents = self.pos();",
    "    // This is one of the critical bits: if the first non-whitespace",
    "    // character isn't in [-A-Za-z] (i.e., this can't be a special word",
    "    // boundary), then we bail and let the counted repetition parser deal",
    "    // with this.",
    "    if !is_valid_char(self.char()) {",
    "        self.parser().pos.set(start);",
    "        return Ok(None);",
    "    }",
    "",
    "    // Now collect up our chars until we see a '}'.",
    "    let mut scratch = self.parser().scratch.borrow_mut();",
    "    scratch.clear();",
    "    while !self.is_eof() && is_valid_char(self.char()) {",
    "        scratch.push(self.char());",
    "        self.bump_and_bump_space();",
    "    }",
    "    if self.is_eof() || self.char() != '}' {",
    "        return Err(self.error(",
    "            Span::new(start, self.pos()),",
    "            ast::ErrorKind::SpecialWordBoundaryUnclosed,",
    "        ));",
    "    }",
    "    let end = self.pos();",
    "    self.bump();",
    "    let kind = match scratch.as_str() {",
    "        \"start\" => ast::AssertionKind::WordBoundaryStart,",
    "        \"end\" => ast::AssertionKind::WordBoundaryEnd,",
    "        \"start-half\" => ast::AssertionKind::WordBoundaryStartHalf,",
    "        \"end-half\" => ast::AssertionKind::WordBoundaryEndHalf,",
    "        _ => {",
    "            return Err(self.error(",
    "                Span::new(start_contents, end),",
    "                ast::ErrorKind::SpecialWordBoundaryUnrecognized,",
    "            ))",
    "        }",
    "    };",
    "    Ok(Some(kind))",
    "}"
  ],
  "size": {
    "chain": 24,
    "contra": 7,
    "min_set": 11
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1628,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "true",
          "line": 1639,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1651,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(start, self.pos()),\n                ast::ErrorKind::SpecialWordBoundaryUnclosed,\n            ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        13,
        14,
        15,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        36,
        37,
        38,
        42,
        43,
        44,
        45,
        46,
        73,
        74,
        75,
        76,
        77
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1628,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "true",
          "line": 1639,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1651,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(start, self.pos()),\n                ast::ErrorKind::SpecialWordBoundaryUnclosed,\n            ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        13,
        14,
        15,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        36,
        37,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        73,
        74,
        75,
        76,
        77
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1628,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "true",
          "line": 1639,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"start\"",
          "norm": null,
          "value": "true",
          "line": 1660,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"start\"",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        }
      ],
      "ret": "Ok(Some(kind))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        13,
        14,
        15,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        36,
        37,
        39,
        40,
        47,
        48,
        49,
        50,
        51,
        63,
        53,
        64,
        71,
        72,
        77
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1628,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "true",
          "line": 1639,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"start\"",
          "norm": null,
          "value": "false",
          "line": 1660,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"end\"",
          "norm": null,
          "value": "true",
          "line": 1661,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"end\"",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        }
      ],
      "ret": "Ok(Some(kind))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        13,
        14,
        15,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        36,
        37,
        39,
        40,
        47,
        48,
        49,
        50,
        51,
        63,
        54,
        62,
        55,
        65,
        71,
        72,
        77
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1628,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "true",
          "line": 1639,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"start\"",
          "norm": null,
          "value": "false",
          "line": 1660,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"end\"",
          "norm": null,
          "value": "false",
          "line": 1661,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"start-half\"",
          "norm": null,
          "value": "true",
          "line": 1662,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"start-half\"",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        }
      ],
      "ret": "Ok(Some(kind))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        13,
        14,
        15,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        36,
        37,
        39,
        40,
        47,
        48,
        49,
        50,
        51,
        63,
        54,
        62,
        56,
        61,
        57,
        66,
        71,
        72,
        77
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1628,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "true",
          "line": 1639,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"start\"",
          "norm": null,
          "value": "false",
          "line": 1660,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"end\"",
          "norm": null,
          "value": "false",
          "line": 1661,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"start-half\"",
          "norm": null,
          "value": "false",
          "line": 1662,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"end-half\"",
          "norm": null,
          "value": "true",
          "line": 1663,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"end-half\"",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        }
      ],
      "ret": "Ok(Some(kind))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        13,
        14,
        15,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        36,
        37,
        39,
        40,
        47,
        48,
        49,
        50,
        51,
        63,
        54,
        62,
        56,
        61,
        58,
        60,
        59,
        67,
        71,
        72,
        77
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1628,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "true",
          "line": 1639,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"start\"",
          "norm": null,
          "value": "false",
          "line": 1660,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"end\"",
          "norm": null,
          "value": "false",
          "line": 1661,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"start-half\"",
          "norm": null,
          "value": "false",
          "line": 1662,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"end-half\"",
          "norm": null,
          "value": "false",
          "line": 1663,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                    Span::new(start_contents, end),\n                    ast::ErrorKind::SpecialWordBoundaryUnrecognized,\n                ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        13,
        14,
        15,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        36,
        37,
        39,
        40,
        47,
        48,
        49,
        50,
        51,
        63,
        54,
        62,
        56,
        61,
        58,
        60,
        52,
        68,
        69,
        70,
        73,
        74,
        75,
        76,
        77
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1628,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "true",
          "line": 1639,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "true",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1651,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(start, self.pos()),\n                ast::ErrorKind::SpecialWordBoundaryUnclosed,\n            ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        13,
        14,
        15,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        23,
        24,
        25,
        26,
        36,
        37,
        38,
        42,
        43,
        44,
        45,
        46,
        73,
        74,
        75,
        76,
        77
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1628,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "true",
          "line": 1639,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "true",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1651,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(start, self.pos()),\n                ast::ErrorKind::SpecialWordBoundaryUnclosed,\n            ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        13,
        14,
        15,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        23,
        24,
        25,
        26,
        36,
        37,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        73,
        74,
        75,
        76,
        77
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1628,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "true",
          "line": 1639,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "true",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"start\"",
          "norm": null,
          "value": "true",
          "line": 1660,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"start\"",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        }
      ],
      "ret": "Ok(Some(kind))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        13,
        14,
        15,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        23,
        24,
        25,
        26,
        36,
        37,
        39,
        40,
        47,
        48,
        49,
        50,
        51,
        63,
        53,
        64,
        71,
        72,
        77
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1628,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "true",
          "line": 1639,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "true",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"start\"",
          "norm": null,
          "value": "false",
          "line": 1660,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"end\"",
          "norm": null,
          "value": "true",
          "line": 1661,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"end\"",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        }
      ],
      "ret": "Ok(Some(kind))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        13,
        14,
        15,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        23,
        24,
        25,
        26,
        36,
        37,
        39,
        40,
        47,
        48,
        49,
        50,
        51,
        63,
        54,
        62,
        55,
        65,
        71,
        72,
        77
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1628,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "true",
          "line": 1639,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "true",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"start\"",
          "norm": null,
          "value": "false",
          "line": 1660,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"end\"",
          "norm": null,
          "value": "false",
          "line": 1661,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"start-half\"",
          "norm": null,
          "value": "true",
          "line": 1662,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"start-half\"",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        }
      ],
      "ret": "Ok(Some(kind))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        13,
        14,
        15,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        23,
        24,
        25,
        26,
        36,
        37,
        39,
        40,
        47,
        48,
        49,
        50,
        51,
        63,
        54,
        62,
        56,
        61,
        57,
        66,
        71,
        72,
        77
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1628,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "true",
          "line": 1639,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "true",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"start\"",
          "norm": null,
          "value": "false",
          "line": 1660,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"end\"",
          "norm": null,
          "value": "false",
          "line": 1661,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"start-half\"",
          "norm": null,
          "value": "false",
          "line": 1662,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"end-half\"",
          "norm": null,
          "value": "true",
          "line": 1663,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"end-half\"",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        }
      ],
      "ret": "Ok(Some(kind))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        13,
        14,
        15,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        23,
        24,
        25,
        26,
        36,
        37,
        39,
        40,
        47,
        48,
        49,
        50,
        51,
        63,
        54,
        62,
        56,
        61,
        58,
        60,
        59,
        67,
        71,
        72,
        77
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1628,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "true",
          "line": 1639,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "true",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"start\"",
          "norm": null,
          "value": "false",
          "line": 1660,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"end\"",
          "norm": null,
          "value": "false",
          "line": 1661,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"start-half\"",
          "norm": null,
          "value": "false",
          "line": 1662,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"end-half\"",
          "norm": null,
          "value": "false",
          "line": 1663,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                    Span::new(start_contents, end),\n                    ast::ErrorKind::SpecialWordBoundaryUnrecognized,\n                ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        13,
        14,
        15,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        23,
        24,
        25,
        26,
        36,
        37,
        39,
        40,
        47,
        48,
        49,
        50,
        51,
        63,
        54,
        62,
        56,
        61,
        58,
        60,
        52,
        68,
        69,
        70,
        73,
        74,
        75,
        76,
        77
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1628,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "true",
          "line": 1639,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "false",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "true",
          "line": 1651,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(start, self.pos()),\n                ast::ErrorKind::SpecialWordBoundaryUnclosed,\n            ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        13,
        14,
        15,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        27,
        28,
        29,
        35,
        36,
        37,
        38,
        42,
        43,
        44,
        45,
        46,
        73,
        74,
        75,
        76,
        77
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1628,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "true",
          "line": 1639,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "false",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 1651,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(start, self.pos()),\n                ast::ErrorKind::SpecialWordBoundaryUnclosed,\n            ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        13,
        14,
        15,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        27,
        28,
        29,
        35,
        36,
        37,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        73,
        74,
        75,
        76,
        77
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1628,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "true",
          "line": 1639,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "false",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"start\"",
          "norm": null,
          "value": "true",
          "line": 1660,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"start\"",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        }
      ],
      "ret": "Ok(Some(kind))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        13,
        14,
        15,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        27,
        28,
        29,
        35,
        36,
        37,
        39,
        40,
        47,
        48,
        49,
        50,
        51,
        63,
        53,
        64,
        71,
        72,
        77
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1628,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "true",
          "line": 1639,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "false",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"start\"",
          "norm": null,
          "value": "false",
          "line": 1660,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"end\"",
          "norm": null,
          "value": "true",
          "line": 1661,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"end\"",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        }
      ],
      "ret": "Ok(Some(kind))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        13,
        14,
        15,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        27,
        28,
        29,
        35,
        36,
        37,
        39,
        40,
        47,
        48,
        49,
        50,
        51,
        63,
        54,
        62,
        55,
        65,
        71,
        72,
        77
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1628,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "true",
          "line": 1639,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "false",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"start\"",
          "norm": null,
          "value": "false",
          "line": 1660,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"end\"",
          "norm": null,
          "value": "false",
          "line": 1661,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"start-half\"",
          "norm": null,
          "value": "true",
          "line": 1662,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"start-half\"",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        }
      ],
      "ret": "Ok(Some(kind))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        13,
        14,
        15,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        27,
        28,
        29,
        35,
        36,
        37,
        39,
        40,
        47,
        48,
        49,
        50,
        51,
        63,
        54,
        62,
        56,
        61,
        57,
        66,
        71,
        72,
        77
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1628,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "true",
          "line": 1639,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "false",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"start\"",
          "norm": null,
          "value": "false",
          "line": 1660,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"end\"",
          "norm": null,
          "value": "false",
          "line": 1661,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"start-half\"",
          "norm": null,
          "value": "false",
          "line": 1662,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"end-half\"",
          "norm": null,
          "value": "true",
          "line": 1663,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"end-half\"",
          "norm": null,
          "value": "true",
          "line": 1659,
          "bound": null
        }
      ],
      "ret": "Ok(Some(kind))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        13,
        14,
        15,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        27,
        28,
        29,
        35,
        36,
        37,
        39,
        40,
        47,
        48,
        49,
        50,
        51,
        63,
        54,
        62,
        56,
        61,
        58,
        60,
        59,
        67,
        71,
        72,
        77
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1628,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "true",
          "line": 1639,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "false",
          "line": 1647,
          "bound": null
        },
        {
          "cond": "self.is_eof()",
          "norm": null,
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 1651,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"start\"",
          "norm": null,
          "value": "false",
          "line": 1660,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"end\"",
          "norm": null,
          "value": "false",
          "line": 1661,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"start-half\"",
          "norm": null,
          "value": "false",
          "line": 1662,
          "bound": null
        },
        {
          "cond": "scratch.as_str() matches \"end-half\"",
          "norm": null,
          "value": "false",
          "line": 1663,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                    Span::new(start_contents, end),\n                    ast::ErrorKind::SpecialWordBoundaryUnrecognized,\n                ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        13,
        14,
        15,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        27,
        28,
        29,
        35,
        36,
        37,
        39,
        40,
        47,
        48,
        49,
        50,
        51,
        63,
        54,
        62,
        56,
        61,
        58,
        60,
        52,
        68,
        69,
        70,
        73,
        74,
        75,
        76,
        77
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 1628,
          "bound": null
        },
        {
          "cond": "is_valid_char(self.char())",
          "norm": null,
          "value": "false",
          "line": 1639,
          "bound": null
        }
      ],
      "ret": "Ok(None)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        12,
        13,
        14,
        16,
        17,
        18,
        75,
        76,
        77
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 1628,
          "bound": null
        }
      ],
      "ret": "Err(self.error(\n                Span::new(wb_start, self.pos()),\n                ast::ErrorKind::SpecialWordOrRepetitionUnexpectedEof,\n            ))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        76,
        77
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        79
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}