{
  "name": "regex_syntax::hir::literal::{impl#0}::enforce_literal_len",
  "mod_info": {
    "name": "hir::literal",
    "loc": "regex-syntax/src/hir/mod.rs:42:1:42:17"
  },
  "visible": false,
  "loc": "regex-syntax/src/hir/literal.rs:620:5:626:6",
  "doc": "/// Applies the literal length limit to the given sequence. If none of the\n/// literals in the sequence exceed the limit, then this is a no-op.\n",
  "code": [
    "fn enforce_literal_len(&self, seq: &mut Seq) {",
    "    let len = self.limit_literal_len;",
    "    match self.kind {",
    "        ExtractKind::Prefix => seq.keep_first_bytes(len),",
    "        ExtractKind::Suffix => seq.keep_last_bytes(len),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.kind matches ExtractKind::Suffix",
          "norm": null,
          "value": "true",
          "line": 622,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.kind matches ExtractKind::Prefix",
          "norm": null,
          "value": "true",
          "line": 622,
          "bound": null
        },
        {
          "cond": "self.kind matches ExtractKind::Prefix",
          "norm": null,
          "value": "true",
          "line": 622,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        4,
        5,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}