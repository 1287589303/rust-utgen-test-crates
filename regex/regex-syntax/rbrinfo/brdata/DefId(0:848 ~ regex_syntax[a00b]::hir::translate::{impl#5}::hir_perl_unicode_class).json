{
  "name": "regex_syntax::hir::translate::{impl#5}::hir_perl_unicode_class",
  "mod_info": {
    "name": "hir::translate",
    "loc": "regex-syntax/src/hir/mod.rs:44:1:44:19"
  },
  "visible": false,
  "loc": "regex-syntax/src/hir/translate.rs:1085:5:1105:6",
  "doc": "",
  "code": [
    "fn hir_perl_unicode_class(",
    "    &self,",
    "    ast_class: &ast::ClassPerl,",
    ") -> Result<hir::ClassUnicode> {",
    "    use crate::ast::ClassPerlKind::*;",
    "",
    "    assert!(self.flags().unicode());",
    "    let result = match ast_class.kind {",
    "        Digit => unicode::perl_digit(),",
    "        Space => unicode::perl_space(),",
    "        Word => unicode::perl_word(),",
    "    };",
    "    let mut class =",
    "        self.convert_unicode_class_error(&ast_class.span, result)?;",
    "    // We needn't apply case folding here because the Perl Unicode classes",
    "    // are already closed under Unicode simple case folding.",
    "    if ast_class.negated {",
    "        class.negate();",
    "    }",
    "    Ok(class)",
    "}"
  ],
  "size": {
    "chain": 10,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 1091,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Word",
          "norm": null,
          "value": "true",
          "line": 1092,
          "bound": null
        },
        {
          "cond": "self.convert_unicode_class_error(&ast_class.span, result)?",
          "norm": null,
          "value": "Err/None",
          "line": 1098,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        8,
        11,
        12,
        13,
        15,
        17,
        18,
        28,
        29,
        30,
        31
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 1091,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Word",
          "norm": null,
          "value": "true",
          "line": 1092,
          "bound": null
        },
        {
          "cond": "self.convert_unicode_class_error(&ast_class.span, result)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1098,
          "bound": null
        },
        {
          "cond": "ast_class.negated",
          "norm": null,
          "value": "true",
          "line": 1101,
          "bound": null
        }
      ],
      "ret": "Ok(class)",
      "path": [
        0,
        1,
        2,
        3,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        31
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 1091,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Word",
          "norm": null,
          "value": "true",
          "line": 1092,
          "bound": null
        },
        {
          "cond": "self.convert_unicode_class_error(&ast_class.span, result)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1098,
          "bound": null
        },
        {
          "cond": "ast_class.negated",
          "norm": null,
          "value": "false",
          "line": 1101,
          "bound": null
        }
      ],
      "ret": "Ok(class)",
      "path": [
        0,
        1,
        2,
        3,
        8,
        11,
        12,
        13,
        16,
        19,
        20,
        23,
        24,
        25,
        26,
        27,
        31
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 1091,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Space",
          "norm": null,
          "value": "true",
          "line": 1092,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Space",
          "norm": null,
          "value": "true",
          "line": 1092,
          "bound": null
        },
        {
          "cond": "self.convert_unicode_class_error(&ast_class.span, result)?",
          "norm": null,
          "value": "Err/None",
          "line": 1098,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        7,
        10,
        11,
        12,
        13,
        15,
        17,
        18,
        28,
        29,
        30,
        31
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 1091,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Space",
          "norm": null,
          "value": "true",
          "line": 1092,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Space",
          "norm": null,
          "value": "true",
          "line": 1092,
          "bound": null
        },
        {
          "cond": "self.convert_unicode_class_error(&ast_class.span, result)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1098,
          "bound": null
        },
        {
          "cond": "ast_class.negated",
          "norm": null,
          "value": "true",
          "line": 1101,
          "bound": null
        }
      ],
      "ret": "Ok(class)",
      "path": [
        0,
        1,
        2,
        3,
        7,
        10,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        31
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 1091,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Space",
          "norm": null,
          "value": "true",
          "line": 1092,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Space",
          "norm": null,
          "value": "true",
          "line": 1092,
          "bound": null
        },
        {
          "cond": "self.convert_unicode_class_error(&ast_class.span, result)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1098,
          "bound": null
        },
        {
          "cond": "ast_class.negated",
          "norm": null,
          "value": "false",
          "line": 1101,
          "bound": null
        }
      ],
      "ret": "Ok(class)",
      "path": [
        0,
        1,
        2,
        3,
        7,
        10,
        11,
        12,
        13,
        16,
        19,
        20,
        23,
        24,
        25,
        26,
        27,
        31
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 1091,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Digit",
          "norm": null,
          "value": "true",
          "line": 1092,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Digit",
          "norm": null,
          "value": "true",
          "line": 1092,
          "bound": null
        },
        {
          "cond": "self.convert_unicode_class_error(&ast_class.span, result)?",
          "norm": null,
          "value": "Err/None",
          "line": 1098,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        11,
        12,
        13,
        15,
        17,
        18,
        28,
        29,
        30,
        31
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 1091,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Digit",
          "norm": null,
          "value": "true",
          "line": 1092,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Digit",
          "norm": null,
          "value": "true",
          "line": 1092,
          "bound": null
        },
        {
          "cond": "self.convert_unicode_class_error(&ast_class.span, result)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1098,
          "bound": null
        },
        {
          "cond": "ast_class.negated",
          "norm": null,
          "value": "true",
          "line": 1101,
          "bound": null
        }
      ],
      "ret": "Ok(class)",
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        31
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "true",
          "line": 1091,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Digit",
          "norm": null,
          "value": "true",
          "line": 1092,
          "bound": null
        },
        {
          "cond": "ast_class.kind matches Digit",
          "norm": null,
          "value": "true",
          "line": 1092,
          "bound": null
        },
        {
          "cond": "self.convert_unicode_class_error(&ast_class.span, result)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1098,
          "bound": null
        },
        {
          "cond": "ast_class.negated",
          "norm": null,
          "value": "false",
          "line": 1101,
          "bound": null
        }
      ],
      "ret": "Ok(class)",
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        11,
        12,
        13,
        16,
        19,
        20,
        23,
        24,
        25,
        26,
        27,
        31
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.flags().unicode()",
          "norm": null,
          "value": "false",
          "line": 1091,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        39
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}