{
  "name": "regex_syntax::hir::literal::{impl#4}::longest_common_prefix",
  "mod_info": {
    "name": "hir::literal",
    "loc": "regex-syntax/src/hir/mod.rs:42:1:42:17"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/literal.rs:1629:5:1653:6",
  "doc": "/// Returns the longest common prefix from this seq.\n///\n/// If the seq matches any literal or other contains no literals, then\n/// there is no meaningful prefix and this returns `None`.\n///\n/// # Example\n///\n/// This shows some example seqs and their longest common prefix.\n///\n/// ```\n/// use regex_syntax::hir::literal::Seq;\n///\n/// let seq = Seq::new(&[\"foo\", \"foobar\", \"fo\"]);\n/// assert_eq!(Some(&b\"fo\"[..]), seq.longest_common_prefix());\n/// let seq = Seq::new(&[\"foo\", \"foo\"]);\n/// assert_eq!(Some(&b\"foo\"[..]), seq.longest_common_prefix());\n/// let seq = Seq::new(&[\"foo\", \"bar\"]);\n/// assert_eq!(Some(&b\"\"[..]), seq.longest_common_prefix());\n/// let seq = Seq::new(&[\"\"]);\n/// assert_eq!(Some(&b\"\"[..]), seq.longest_common_prefix());\n///\n/// let seq = Seq::infinite();\n/// assert_eq!(None, seq.longest_common_prefix());\n/// let seq = Seq::empty();\n/// assert_eq!(None, seq.longest_common_prefix());\n/// ```\n",
  "code": [
    "pub fn longest_common_prefix(&self) -> Option<&[u8]> {",
    "    // If we match everything or match nothing, then there's no meaningful",
    "    // longest common prefix.",
    "    let lits = match self.literals {",
    "        None => return None,",
    "        Some(ref lits) => lits,",
    "    };",
    "    if lits.len() == 0 {",
    "        return None;",
    "    }",
    "    let base = lits[0].as_bytes();",
    "    let mut len = base.len();",
    "    for m in lits.iter().skip(1) {",
    "        len = m",
    "            .as_bytes()",
    "            .iter()",
    "            .zip(base[..len].iter())",
    "            .take_while(|&(a, b)| a == b)",
    "            .count();",
    "        if len == 0 {",
    "            return Some(&[]);",
    "        }",
    "    }",
    "    Some(&base[..len])",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 1,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.literals matches Some(ref lits)",
          "norm": null,
          "value": "true",
          "line": 1632,
          "bound": null
        },
        {
          "cond": "lits.len() == 0",
          "norm": "0 == lits.len()",
          "value": "false",
          "line": 1636,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        3,
        5,
        6,
        32,
        33
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.literals matches Some(ref lits)",
          "norm": null,
          "value": "true",
          "line": 1632,
          "bound": null
        },
        {
          "cond": "lits.len() == 0",
          "norm": "0 == lits.len()",
          "value": "true",
          "line": 1636,
          "bound": null
        },
        {
          "cond": "m in lits.iter().skip(1)",
          "norm": null,
          "value": "true",
          "line": 1641,
          "bound": null
        },
        {
          "cond": "len == 0",
          "norm": "0 == len",
          "value": "false",
          "line": 1648,
          "bound": null
        }
      ],
      "ret": "Some(&[])",
      "path": [
        0,
        3,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        33
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.literals matches Some(ref lits)",
          "norm": null,
          "value": "true",
          "line": 1632,
          "bound": null
        },
        {
          "cond": "lits.len() == 0",
          "norm": "0 == lits.len()",
          "value": "true",
          "line": 1636,
          "bound": null
        },
        {
          "cond": "m in lits.iter().skip(1)",
          "norm": null,
          "value": "true",
          "line": 1641,
          "bound": null
        },
        {
          "cond": "len == 0",
          "norm": "0 == len",
          "value": "true",
          "line": 1648,
          "bound": null
        },
        {
          "cond": "m in lits.iter().skip(1)",
          "norm": null,
          "value": "false",
          "line": 1641,
          "bound": null
        }
      ],
      "ret": "Some(&base[..len])",
      "path": [
        0,
        3,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        30,
        15,
        16,
        17,
        19,
        21,
        31,
        33
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.literals matches Some(ref lits)",
          "norm": null,
          "value": "true",
          "line": 1632,
          "bound": null
        },
        {
          "cond": "lits.len() == 0",
          "norm": "0 == lits.len()",
          "value": "true",
          "line": 1636,
          "bound": null
        },
        {
          "cond": "m in lits.iter().skip(1)",
          "norm": null,
          "value": "false",
          "line": 1641,
          "bound": null
        }
      ],
      "ret": "Some(&base[..len])",
      "path": [
        0,
        3,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        19,
        21,
        31,
        33
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.literals matches None",
          "norm": null,
          "value": "true",
          "line": 1632,
          "bound": null
        },
        {
          "cond": "self.literals matches None",
          "norm": null,
          "value": "true",
          "line": 1632,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        2,
        4,
        32,
        33
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}