{
  "name": "regex_syntax::hir::translate::{impl#1}::utf8",
  "mod_info": {
    "name": "hir::translate",
    "loc": "regex-syntax/src/hir/mod.rs:44:1:44:19"
  },
  "visible": true,
  "loc": "regex-syntax/src/hir/translate.rs:67:5:70:6",
  "doc": "/// When disabled, translation will permit the construction of a regular\n/// expression that may match invalid UTF-8.\n///\n/// When enabled (the default), the translator is guaranteed to produce an\n/// expression that, for non-empty matches, will only ever produce spans\n/// that are entirely valid UTF-8 (otherwise, the translator will return an\n/// error).\n///\n/// Perhaps surprisingly, when UTF-8 is enabled, an empty regex or even\n/// a negated ASCII word boundary (uttered as `(?-u:\\B)` in the concrete\n/// syntax) will be allowed even though they can produce matches that split\n/// a UTF-8 encoded codepoint. This only applies to zero-width or \"empty\"\n/// matches, and it is expected that the regex engine itself must handle\n/// these cases if necessary (perhaps by suppressing any zero-width matches\n/// that split a codepoint).\n",
  "code": [
    "pub fn utf8(&mut self, yes: bool) -> &mut TranslatorBuilder {",
    "    self.utf8 = yes;",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}