bb0
  0: StorageLive(_2)
    SourceInfo(regex-syntax/src/utf8.rs:198:9-198:24)
  1: StorageLive(_3)
    SourceInfo(regex-syntax/src/utf8.rs:198:9-198:24)
  2: StorageLive(_4)
    SourceInfo(regex-syntax/src/utf8.rs:198:9-198:13)
  3: _4 = &(*_1)
    SourceInfo(regex-syntax/src/utf8.rs:198:9-198:13)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:198:9-198:24)
      kind: _3 = utf8::Utf8Sequence::as_slice(move _4) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: _2 = &(*_3)
    SourceInfo(regex-syntax/src/utf8.rs:198:9-198:24)
  1: StorageDead(_4)
    SourceInfo(regex-syntax/src/utf8.rs:198:23-198:24)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:198:9-198:31)
      kind: _0 = core::slice::<impl [utf8::Utf8Range]>::iter(move _2) -> [return: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_2)
    SourceInfo(regex-syntax/src/utf8.rs:198:30-198:31)
  1: StorageDead(_3)
    SourceInfo(regex-syntax/src/utf8.rs:199:5-199:6)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:199:6-199:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:197:5-199:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

