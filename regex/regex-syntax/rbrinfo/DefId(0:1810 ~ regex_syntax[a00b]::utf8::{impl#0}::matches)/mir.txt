bb0
  0: StorageLive(_3)
    SourceInfo(regex-syntax/src/utf8.rs:181:9-183:10)
  1: StorageLive(_4)
    SourceInfo(regex-syntax/src/utf8.rs:181:12-181:36)
  2: StorageLive(_5)
    SourceInfo(regex-syntax/src/utf8.rs:181:12-181:23)
  3: StorageLive(_6)
    SourceInfo(regex-syntax/src/utf8.rs:181:12-181:17)
  4: _6 = &(*_2)
    SourceInfo(regex-syntax/src/utf8.rs:181:12-181:17)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:181:12-181:23)
      kind: _5 = core::slice::<impl [u8]>::len(move _6) -> [return: bb1, unwind: bb19]
  }
  preds []
  succs [bb1, bb19]

bb1
  0: StorageDead(_6)
    SourceInfo(regex-syntax/src/utf8.rs:181:22-181:23)
  1: StorageLive(_7)
    SourceInfo(regex-syntax/src/utf8.rs:181:26-181:36)
  2: StorageLive(_8)
    SourceInfo(regex-syntax/src/utf8.rs:181:26-181:30)
  3: _8 = &(*_1)
    SourceInfo(regex-syntax/src/utf8.rs:181:26-181:30)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:181:26-181:36)
      kind: _7 = utf8::Utf8Sequence::len(move _8) -> [return: bb2, unwind: bb19]
  }
  preds [bb0]
  succs [bb2, bb19]

bb2
  0: StorageDead(_8)
    SourceInfo(regex-syntax/src/utf8.rs:181:35-181:36)
  1: _4 = Lt(move _5, move _7)
    SourceInfo(regex-syntax/src/utf8.rs:181:12-181:36)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:181:12-181:36)
      kind: switchInt(move _4) -> [0: bb4, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: StorageDead(_7)
    SourceInfo(regex-syntax/src/utf8.rs:181:35-181:36)
  1: StorageDead(_5)
    SourceInfo(regex-syntax/src/utf8.rs:181:35-181:36)
  2: _0 = const false
    SourceInfo(regex-syntax/src/utf8.rs:182:20-182:25)
  3: StorageDead(_4)
    SourceInfo(regex-syntax/src/utf8.rs:183:9-183:10)
  4: StorageDead(_3)
    SourceInfo(regex-syntax/src/utf8.rs:183:9-183:10)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/lib.rs:1:1-1:1)
      kind: goto -> bb18
  }
  preds [bb2]
  succs [bb18]

bb4
  0: StorageDead(_7)
    SourceInfo(regex-syntax/src/utf8.rs:181:35-181:36)
  1: StorageDead(_5)
    SourceInfo(regex-syntax/src/utf8.rs:181:35-181:36)
  2: _3 = const ()
    SourceInfo(regex-syntax/src/utf8.rs:183:10-183:10)
  3: StorageDead(_4)
    SourceInfo(regex-syntax/src/utf8.rs:183:9-183:10)
  4: StorageDead(_3)
    SourceInfo(regex-syntax/src/utf8.rs:183:9-183:10)
  5: StorageLive(_10)
    SourceInfo(regex-syntax/src/utf8.rs:184:9-188:10)
  6: StorageLive(_11)
    SourceInfo(regex-syntax/src/utf8.rs:184:24-184:46)
  7: StorageLive(_12)
    SourceInfo(regex-syntax/src/utf8.rs:184:24-184:46)
  8: StorageLive(_13)
    SourceInfo(regex-syntax/src/utf8.rs:184:24-184:36)
  9: StorageLive(_14)
    SourceInfo(regex-syntax/src/utf8.rs:184:24-184:29)
  10: _14 = &(*_2)
    SourceInfo(regex-syntax/src/utf8.rs:184:24-184:29)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:184:24-184:36)
      kind: _13 = core::slice::<impl [u8]>::iter(move _14) -> [return: bb5, unwind: bb19]
  }
  preds [bb2]
  succs [bb5, bb19]

bb5
  0: StorageDead(_14)
    SourceInfo(regex-syntax/src/utf8.rs:184:35-184:36)
  1: StorageLive(_15)
    SourceInfo(regex-syntax/src/utf8.rs:184:41-184:45)
  2: _15 = _1
    SourceInfo(regex-syntax/src/utf8.rs:184:41-184:45)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:184:24-184:46)
      kind: _12 = <core::slice::Iter<'_, u8> as core::iter::Iterator>::zip::<&utf8::Utf8Sequence>(move _13, move _15) -> [return: bb6, unwind: bb19]
  }
  preds [bb4]
  succs [bb6, bb19]

bb6
  0: StorageDead(_15)
    SourceInfo(regex-syntax/src/utf8.rs:184:45-184:46)
  1: StorageDead(_13)
    SourceInfo(regex-syntax/src/utf8.rs:184:45-184:46)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:184:24-184:46)
      kind: _11 = <core::iter::Zip<core::slice::Iter<'_, u8>, core::slice::Iter<'_, utf8::Utf8Range>> as core::iter::IntoIterator>::into_iter(move _12) -> [return: bb7, unwind: bb19]
  }
  preds [bb5]
  succs [bb7, bb19]

bb7
  0: StorageDead(_12)
    SourceInfo(regex-syntax/src/utf8.rs:184:45-184:46)
  1: PlaceMention(_11)
    SourceInfo(regex-syntax/src/utf8.rs:184:24-184:46)
  2: StorageLive(_16)
    SourceInfo(regex-syntax/src/utf8.rs:184:24-184:46)
  3: _16 = move _11
    SourceInfo(regex-syntax/src/utf8.rs:184:24-184:46)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:184:9-188:10)
      kind: goto -> bb8
  }
  preds [bb6]
  succs [bb8]

bb8
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:184:9-188:10)
      kind: falseUnwind -> [real: bb9, unwind: bb19]
  }
  preds [bb7, bb16]
  succs [bb9, bb19]

bb9
  0: StorageLive(_18)
    SourceInfo(regex-syntax/src/utf8.rs:184:24-184:46)
  1: StorageLive(_19)
    SourceInfo(regex-syntax/src/utf8.rs:184:24-184:46)
  2: StorageLive(_20)
    SourceInfo(regex-syntax/src/utf8.rs:184:24-184:46)
  3: StorageLive(_21)
    SourceInfo(regex-syntax/src/utf8.rs:184:24-184:46)
  4: _21 = &mut _16
    SourceInfo(regex-syntax/src/utf8.rs:184:24-184:46)
  5: _20 = &mut (*_21)
    SourceInfo(regex-syntax/src/utf8.rs:184:24-184:46)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:184:24-184:46)
      kind: _19 = <core::iter::Zip<core::slice::Iter<'_, u8>, core::slice::Iter<'_, utf8::Utf8Range>> as core::iter::Iterator>::next(move _20) -> [return: bb10, unwind: bb19]
  }
  preds [bb8]
  succs [bb10, bb19]

bb10
  0: StorageDead(_20)
    SourceInfo(regex-syntax/src/utf8.rs:184:45-184:46)
  1: PlaceMention(_19)
    SourceInfo(regex-syntax/src/utf8.rs:184:24-184:46)
  2: _22 = discriminant(_19)
    SourceInfo(regex-syntax/src/utf8.rs:184:24-184:46)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:184:24-184:46)
      kind: switchInt(move _22) -> [0: bb12, 1: bb13, otherwise: bb11]
  }
  preds [bb9]
  succs [bb11, bb12, bb13]

bb11
  0: FakeRead(ForMatchedPlace(None), _19)
    SourceInfo(regex-syntax/src/utf8.rs:184:24-184:46)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:184:24-184:46)
      kind: unreachable
  }
  preds [bb10]
  succs []

bb12
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:184:9-188:10)
      kind: falseEdge -> [real: bb14, imaginary: bb13]
  }
  preds [bb10]
  succs [bb13, bb14]

bb13
  0: StorageLive(_24)
    SourceInfo(regex-syntax/src/utf8.rs:184:15-184:16)
  1: _24 = (*(((_19 as Some).0: (&u8, &utf8::Utf8Range)).0: &u8))
    SourceInfo(regex-syntax/src/utf8.rs:184:15-184:16)
  2: StorageLive(_25)
    SourceInfo(regex-syntax/src/utf8.rs:184:18-184:19)
  3: _25 = (((_19 as Some).0: (&u8, &utf8::Utf8Range)).1: &utf8::Utf8Range)
    SourceInfo(regex-syntax/src/utf8.rs:184:18-184:19)
  4: StorageLive(_26)
    SourceInfo(regex-syntax/src/utf8.rs:185:17-185:29)
  5: StorageLive(_27)
    SourceInfo(regex-syntax/src/utf8.rs:185:17-185:18)
  6: _27 = &(*_25)
    SourceInfo(regex-syntax/src/utf8.rs:185:17-185:18)
  7: StorageLive(_28)
    SourceInfo(regex-syntax/src/utf8.rs:185:27-185:28)
  8: _28 = _24
    SourceInfo(regex-syntax/src/utf8.rs:185:27-185:28)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:185:17-185:29)
      kind: _26 = utf8::Utf8Range::matches(move _27, move _28) -> [return: bb15, unwind: bb19]
  }
  preds [bb10, bb12]
  succs [bb15, bb19]

bb14
  0: _10 = const ()
    SourceInfo(regex-syntax/src/utf8.rs:184:9-188:10)
  1: StorageDead(_21)
    SourceInfo(regex-syntax/src/utf8.rs:188:9-188:10)
  2: StorageDead(_19)
    SourceInfo(regex-syntax/src/utf8.rs:188:9-188:10)
  3: StorageDead(_18)
    SourceInfo(regex-syntax/src/utf8.rs:188:9-188:10)
  4: StorageDead(_16)
    SourceInfo(regex-syntax/src/utf8.rs:188:9-188:10)
  5: StorageDead(_11)
    SourceInfo(regex-syntax/src/utf8.rs:188:9-188:10)
  6: StorageDead(_10)
    SourceInfo(regex-syntax/src/utf8.rs:188:9-188:10)
  7: _0 = const true
    SourceInfo(regex-syntax/src/utf8.rs:189:9-189:13)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:190:6-190:6)
      kind: goto -> bb18
  }
  preds [bb12]
  succs [bb18]

bb15
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:185:17-185:29)
      kind: switchInt(move _26) -> [0: bb17, otherwise: bb16]
  }
  preds [bb13]
  succs [bb16, bb17]

bb16
  0: StorageDead(_28)
    SourceInfo(regex-syntax/src/utf8.rs:185:28-185:29)
  1: StorageDead(_27)
    SourceInfo(regex-syntax/src/utf8.rs:185:28-185:29)
  2: _18 = const ()
    SourceInfo(regex-syntax/src/utf8.rs:187:14-187:14)
  3: StorageDead(_26)
    SourceInfo(regex-syntax/src/utf8.rs:187:13-187:14)
  4: StorageDead(_25)
    SourceInfo(regex-syntax/src/utf8.rs:188:9-188:10)
  5: StorageDead(_24)
    SourceInfo(regex-syntax/src/utf8.rs:188:9-188:10)
  6: StorageDead(_21)
    SourceInfo(regex-syntax/src/utf8.rs:188:9-188:10)
  7: StorageDead(_19)
    SourceInfo(regex-syntax/src/utf8.rs:188:9-188:10)
  8: StorageDead(_18)
    SourceInfo(regex-syntax/src/utf8.rs:188:9-188:10)
  9: _17 = const ()
    SourceInfo(regex-syntax/src/utf8.rs:184:9-188:10)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:184:9-188:10)
      kind: goto -> bb8
  }
  preds [bb15]
  succs [bb8]

bb17
  0: StorageDead(_28)
    SourceInfo(regex-syntax/src/utf8.rs:185:28-185:29)
  1: StorageDead(_27)
    SourceInfo(regex-syntax/src/utf8.rs:185:28-185:29)
  2: _0 = const false
    SourceInfo(regex-syntax/src/utf8.rs:186:24-186:29)
  3: StorageDead(_26)
    SourceInfo(regex-syntax/src/utf8.rs:187:13-187:14)
  4: StorageDead(_25)
    SourceInfo(regex-syntax/src/utf8.rs:188:9-188:10)
  5: StorageDead(_24)
    SourceInfo(regex-syntax/src/utf8.rs:188:9-188:10)
  6: StorageDead(_21)
    SourceInfo(regex-syntax/src/utf8.rs:188:9-188:10)
  7: StorageDead(_19)
    SourceInfo(regex-syntax/src/utf8.rs:188:9-188:10)
  8: StorageDead(_18)
    SourceInfo(regex-syntax/src/utf8.rs:188:9-188:10)
  9: StorageDead(_16)
    SourceInfo(regex-syntax/src/utf8.rs:188:9-188:10)
  10: StorageDead(_11)
    SourceInfo(regex-syntax/src/utf8.rs:188:9-188:10)
  11: StorageDead(_10)
    SourceInfo(regex-syntax/src/utf8.rs:188:9-188:10)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/lib.rs:1:1-1:1)
      kind: goto -> bb18
  }
  preds [bb15]
  succs [bb18]

bb18
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:190:6-190:6)
      kind: return
  }
  preds [bb3, bb14, bb17]
  succs []

bb19
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:180:5-190:6)
      kind: resume
  }
  preds [bb0, bb1, bb4, bb5, bb6, bb8, bb9, bb13]
  succs []

