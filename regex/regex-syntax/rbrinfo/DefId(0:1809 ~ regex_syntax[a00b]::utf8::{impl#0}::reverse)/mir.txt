bb0
  0: PlaceMention((*_1))
    SourceInfo(regex-syntax/src/utf8.rs:170:15-170:20)
  1: _2 = discriminant((*_1))
    SourceInfo(regex-syntax/src/utf8.rs:170:15-170:20)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:170:9-170:20)
      kind: switchInt(move _2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2, bb3, bb4, bb5]

bb1
  0: FakeRead(ForMatchedPlace(None), (*_1))
    SourceInfo(regex-syntax/src/utf8.rs:170:15-170:20)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:170:15-170:20)
      kind: unreachable
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:171:13-171:33)
      kind: falseEdge -> [real: bb6, imaginary: bb3]
  }
  preds [bb0]
  succs [bb3, bb6]

bb3
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:172:13-172:41)
      kind: falseEdge -> [real: bb7, imaginary: bb4]
  }
  preds [bb0, bb2]
  succs [bb4, bb7]

bb4
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:173:13-173:43)
      kind: falseEdge -> [real: bb9, imaginary: bb5]
  }
  preds [bb0, bb3]
  succs [bb5, bb9]

bb5
  0: StorageLive(_9)
    SourceInfo(regex-syntax/src/utf8.rs:174:32-174:41)
  1: _9 = &mut (((*_1) as Four).0: [utf8::Utf8Range; 4])
    SourceInfo(regex-syntax/src/utf8.rs:174:32-174:41)
  2: StorageLive(_10)
    SourceInfo(regex-syntax/src/utf8.rs:174:46-174:47)
  3: StorageLive(_11)
    SourceInfo(regex-syntax/src/utf8.rs:174:46-174:47)
  4: _11 = &mut (*_9)
    SourceInfo(regex-syntax/src/utf8.rs:174:46-174:47)
  5: _10 = move _11 as &mut [utf8::Utf8Range] (PointerCoercion(Unsize))
    SourceInfo(regex-syntax/src/utf8.rs:174:46-174:47)
  6: StorageDead(_11)
    SourceInfo(regex-syntax/src/utf8.rs:174:46-174:47)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:174:46-174:57)
      kind: _0 = core::slice::<impl [utf8::Utf8Range]>::reverse(move _10) -> [return: bb11, unwind: bb13]
  }
  preds [bb0, bb4]
  succs [bb11, bb13]

bb6
  0: _0 = const ()
    SourceInfo(regex-syntax/src/utf8.rs:171:37-171:39)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:171:37-171:39)
      kind: goto -> bb12
  }
  preds [bb2]
  succs [bb12]

bb7
  0: StorageLive(_3)
    SourceInfo(regex-syntax/src/utf8.rs:172:31-172:40)
  1: _3 = &mut (((*_1) as Two).0: [utf8::Utf8Range; 2])
    SourceInfo(regex-syntax/src/utf8.rs:172:31-172:40)
  2: StorageLive(_4)
    SourceInfo(regex-syntax/src/utf8.rs:172:45-172:46)
  3: StorageLive(_5)
    SourceInfo(regex-syntax/src/utf8.rs:172:45-172:46)
  4: _5 = &mut (*_3)
    SourceInfo(regex-syntax/src/utf8.rs:172:45-172:46)
  5: _4 = move _5 as &mut [utf8::Utf8Range] (PointerCoercion(Unsize))
    SourceInfo(regex-syntax/src/utf8.rs:172:45-172:46)
  6: StorageDead(_5)
    SourceInfo(regex-syntax/src/utf8.rs:172:45-172:46)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:172:45-172:56)
      kind: _0 = core::slice::<impl [utf8::Utf8Range]>::reverse(move _4) -> [return: bb8, unwind: bb13]
  }
  preds [bb3]
  succs [bb8, bb13]

bb8
  0: StorageDead(_4)
    SourceInfo(regex-syntax/src/utf8.rs:172:55-172:56)
  1: StorageDead(_3)
    SourceInfo(regex-syntax/src/utf8.rs:172:55-172:56)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:172:55-172:56)
      kind: goto -> bb12
  }
  preds [bb7]
  succs [bb12]

bb9
  0: StorageLive(_6)
    SourceInfo(regex-syntax/src/utf8.rs:173:33-173:42)
  1: _6 = &mut (((*_1) as Three).0: [utf8::Utf8Range; 3])
    SourceInfo(regex-syntax/src/utf8.rs:173:33-173:42)
  2: StorageLive(_7)
    SourceInfo(regex-syntax/src/utf8.rs:173:47-173:48)
  3: StorageLive(_8)
    SourceInfo(regex-syntax/src/utf8.rs:173:47-173:48)
  4: _8 = &mut (*_6)
    SourceInfo(regex-syntax/src/utf8.rs:173:47-173:48)
  5: _7 = move _8 as &mut [utf8::Utf8Range] (PointerCoercion(Unsize))
    SourceInfo(regex-syntax/src/utf8.rs:173:47-173:48)
  6: StorageDead(_8)
    SourceInfo(regex-syntax/src/utf8.rs:173:47-173:48)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:173:47-173:58)
      kind: _0 = core::slice::<impl [utf8::Utf8Range]>::reverse(move _7) -> [return: bb10, unwind: bb13]
  }
  preds [bb4]
  succs [bb10, bb13]

bb10
  0: StorageDead(_7)
    SourceInfo(regex-syntax/src/utf8.rs:173:57-173:58)
  1: StorageDead(_6)
    SourceInfo(regex-syntax/src/utf8.rs:173:57-173:58)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:173:57-173:58)
      kind: goto -> bb12
  }
  preds [bb9]
  succs [bb12]

bb11
  0: StorageDead(_10)
    SourceInfo(regex-syntax/src/utf8.rs:174:56-174:57)
  1: StorageDead(_9)
    SourceInfo(regex-syntax/src/utf8.rs:174:56-174:57)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:174:56-174:57)
      kind: goto -> bb12
  }
  preds [bb5]
  succs [bb12]

bb12
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:176:6-176:6)
      kind: return
  }
  preds [bb6, bb8, bb10, bb11]
  succs []

bb13
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:169:5-176:6)
      kind: resume
  }
  preds [bb5, bb7, bb9]
  succs []

