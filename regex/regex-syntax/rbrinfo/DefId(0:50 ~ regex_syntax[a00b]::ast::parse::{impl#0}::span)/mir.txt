bb0
  0: StorageLive(_2)
    SourceInfo(regex-syntax/src/ast/parse.rs:44:9-50:10)
  1: PlaceMention((*_1))
    SourceInfo(regex-syntax/src/ast/parse.rs:44:15-44:20)
  2: _3 = discriminant((*_1))
    SourceInfo(regex-syntax/src/ast/parse.rs:44:15-44:20)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:44:9-44:20)
      kind: switchInt(move _3) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb6, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2, bb3, bb4, bb5, bb6]

bb1
  0: FakeRead(ForMatchedPlace(None), (*_1))
    SourceInfo(regex-syntax/src/ast/parse.rs:44:15-44:20)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:44:15-44:20)
      kind: unreachable
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:45:13-45:38)
      kind: falseEdge -> [real: bb7, imaginary: bb3]
  }
  preds [bb0]
  succs [bb3, bb7]

bb3
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:46:13-46:40)
      kind: falseEdge -> [real: bb8, imaginary: bb4]
  }
  preds [bb0, bb2]
  succs [bb4, bb8]

bb4
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:47:13-47:37)
      kind: falseEdge -> [real: bb9, imaginary: bb5]
  }
  preds [bb0, bb3]
  succs [bb5, bb9]

bb5
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:48:13-48:35)
      kind: falseEdge -> [real: bb10, imaginary: bb6]
  }
  preds [bb0, bb4]
  succs [bb6, bb10]

bb6
  0: StorageLive(_11)
    SourceInfo(regex-syntax/src/ast/parse.rs:49:32-49:37)
  1: _11 = &(((*_1) as Unicode).0: ast::ClassUnicode)
    SourceInfo(regex-syntax/src/ast/parse.rs:49:32-49:37)
  2: StorageLive(_12)
    SourceInfo(regex-syntax/src/ast/parse.rs:49:42-49:49)
  3: _12 = &((*_11).0: ast::Span)
    SourceInfo(regex-syntax/src/ast/parse.rs:49:42-49:49)
  4: _2 = &(*_12)
    SourceInfo(regex-syntax/src/ast/parse.rs:49:42-49:49)
  5: StorageDead(_12)
    SourceInfo(regex-syntax/src/ast/parse.rs:49:48-49:49)
  6: StorageDead(_11)
    SourceInfo(regex-syntax/src/ast/parse.rs:49:48-49:49)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:49:48-49:49)
      kind: goto -> bb11
  }
  preds [bb0, bb5]
  succs [bb11]

bb7
  0: StorageLive(_4)
    SourceInfo(regex-syntax/src/ast/parse.rs:45:32-45:37)
  1: _4 = &(((*_1) as Literal).0: ast::Literal)
    SourceInfo(regex-syntax/src/ast/parse.rs:45:32-45:37)
  2: StorageLive(_5)
    SourceInfo(regex-syntax/src/ast/parse.rs:45:42-45:49)
  3: _5 = &((*_4).0: ast::Span)
    SourceInfo(regex-syntax/src/ast/parse.rs:45:42-45:49)
  4: _2 = &(*_5)
    SourceInfo(regex-syntax/src/ast/parse.rs:45:42-45:49)
  5: StorageDead(_5)
    SourceInfo(regex-syntax/src/ast/parse.rs:45:48-45:49)
  6: StorageDead(_4)
    SourceInfo(regex-syntax/src/ast/parse.rs:45:48-45:49)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:45:48-45:49)
      kind: goto -> bb11
  }
  preds [bb2]
  succs [bb11]

bb8
  0: StorageLive(_6)
    SourceInfo(regex-syntax/src/ast/parse.rs:46:34-46:39)
  1: _6 = &(((*_1) as Assertion).0: ast::Assertion)
    SourceInfo(regex-syntax/src/ast/parse.rs:46:34-46:39)
  2: StorageLive(_7)
    SourceInfo(regex-syntax/src/ast/parse.rs:46:44-46:51)
  3: _7 = &((*_6).0: ast::Span)
    SourceInfo(regex-syntax/src/ast/parse.rs:46:44-46:51)
  4: _2 = &(*_7)
    SourceInfo(regex-syntax/src/ast/parse.rs:46:44-46:51)
  5: StorageDead(_7)
    SourceInfo(regex-syntax/src/ast/parse.rs:46:50-46:51)
  6: StorageDead(_6)
    SourceInfo(regex-syntax/src/ast/parse.rs:46:50-46:51)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:46:50-46:51)
      kind: goto -> bb11
  }
  preds [bb3]
  succs [bb11]

bb9
  0: StorageLive(_8)
    SourceInfo(regex-syntax/src/ast/parse.rs:47:28-47:36)
  1: _8 = &(((*_1) as Dot).0: ast::Span)
    SourceInfo(regex-syntax/src/ast/parse.rs:47:28-47:36)
  2: _2 = &(*_8)
    SourceInfo(regex-syntax/src/ast/parse.rs:47:41-47:45)
  3: StorageDead(_8)
    SourceInfo(regex-syntax/src/ast/parse.rs:47:44-47:45)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:47:44-47:45)
      kind: goto -> bb11
  }
  preds [bb4]
  succs [bb11]

bb10
  0: StorageLive(_9)
    SourceInfo(regex-syntax/src/ast/parse.rs:48:29-48:34)
  1: _9 = &(((*_1) as Perl).0: ast::ClassPerl)
    SourceInfo(regex-syntax/src/ast/parse.rs:48:29-48:34)
  2: StorageLive(_10)
    SourceInfo(regex-syntax/src/ast/parse.rs:48:39-48:46)
  3: _10 = &((*_9).0: ast::Span)
    SourceInfo(regex-syntax/src/ast/parse.rs:48:39-48:46)
  4: _2 = &(*_10)
    SourceInfo(regex-syntax/src/ast/parse.rs:48:39-48:46)
  5: StorageDead(_10)
    SourceInfo(regex-syntax/src/ast/parse.rs:48:45-48:46)
  6: StorageDead(_9)
    SourceInfo(regex-syntax/src/ast/parse.rs:48:45-48:46)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:48:45-48:46)
      kind: goto -> bb11
  }
  preds [bb5]
  succs [bb11]

bb11
  0: _0 = &(*_2)
    SourceInfo(regex-syntax/src/ast/parse.rs:44:9-50:10)
  1: StorageDead(_2)
    SourceInfo(regex-syntax/src/ast/parse.rs:51:5-51:6)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:51:6-51:6)
      kind: return
  }
  preds [bb6, bb7, bb8, bb9, bb10]
  succs []

