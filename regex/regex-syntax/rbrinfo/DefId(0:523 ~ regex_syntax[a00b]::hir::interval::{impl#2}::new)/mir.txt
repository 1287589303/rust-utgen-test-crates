bb0
  0: StorageLive(_2)
    SourceInfo(regex-syntax/src/hir/interval.rs:74:13-74:19)
  1: StorageLive(_3)
    SourceInfo(regex-syntax/src/hir/interval.rs:74:30-74:51)
  2: StorageLive(_4)
    SourceInfo(regex-syntax/src/hir/interval.rs:74:30-74:39)
  3: _4 = move _1
    SourceInfo(regex-syntax/src/hir/interval.rs:74:30-74:39)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:74:30-74:51)
      kind: _3 = <T as core::iter::IntoIterator>::into_iter(move _4) -> [return: bb1, unwind: bb12]
  }
  preds []
  succs [bb1, bb12]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-syntax/src/hir/interval.rs:74:50-74:51)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:74:30-74:61)
      kind: _2 = <<T as core::iter::IntoIterator>::IntoIter as core::iter::Iterator>::collect::<std::vec::Vec<I>>(move _3) -> [return: bb2, unwind: bb11]
  }
  preds [bb0]
  succs [bb2, bb11]

bb2
  0: StorageDead(_3)
    SourceInfo(regex-syntax/src/hir/interval.rs:74:60-74:61)
  1: FakeRead(ForLet(None), _2)
    SourceInfo(regex-syntax/src/hir/interval.rs:74:13-74:19)
  2: AscribeUserType(_2, o, UserTypeProjection { base: UserType(1), projs: [] })
    SourceInfo(regex-syntax/src/hir/interval.rs:74:21-74:27)
  3: StorageLive(_5)
    SourceInfo(regex-syntax/src/hir/interval.rs:76:13-76:19)
  4: StorageLive(_6)
    SourceInfo(regex-syntax/src/hir/interval.rs:76:22-76:28)
  5: _6 = &_2
    SourceInfo(regex-syntax/src/hir/interval.rs:76:22-76:28)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:76:22-76:39)
      kind: _5 = std::vec::Vec::<I>::is_empty(move _6) -> [return: bb3, unwind: bb10]
  }
  preds [bb1]
  succs [bb3, bb10]

bb3
  0: StorageDead(_6)
    SourceInfo(regex-syntax/src/hir/interval.rs:76:38-76:39)
  1: FakeRead(ForLet(None), _5)
    SourceInfo(regex-syntax/src/hir/interval.rs:76:13-76:19)
  2: StorageLive(_7)
    SourceInfo(regex-syntax/src/hir/interval.rs:77:13-77:20)
  3: StorageLive(_8)
    SourceInfo(regex-syntax/src/hir/interval.rs:77:37-77:43)
  4: _8 = move _2
    SourceInfo(regex-syntax/src/hir/interval.rs:77:37-77:43)
  5: StorageLive(_9)
    SourceInfo(regex-syntax/src/hir/interval.rs:77:45-77:51)
  6: _9 = _5
    SourceInfo(regex-syntax/src/hir/interval.rs:77:45-77:51)
  7: _7 = hir::interval::IntervalSet::<I> { ranges: move _8, folded: move _9 }
    SourceInfo(regex-syntax/src/hir/interval.rs:77:23-77:53)
  8: StorageDead(_9)
    SourceInfo(regex-syntax/src/hir/interval.rs:77:52-77:53)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:77:52-77:53)
      kind: drop(_8) -> [return: bb4, unwind: bb10]
  }
  preds [bb2]
  succs [bb4, bb10]

bb4
  0: StorageDead(_8)
    SourceInfo(regex-syntax/src/hir/interval.rs:77:52-77:53)
  1: FakeRead(ForLet(None), _7)
    SourceInfo(regex-syntax/src/hir/interval.rs:77:13-77:20)
  2: StorageLive(_10)
    SourceInfo(regex-syntax/src/hir/interval.rs:78:9-78:27)
  3: StorageLive(_11)
    SourceInfo(regex-syntax/src/hir/interval.rs:78:9-78:12)
  4: _11 = &mut _7
    SourceInfo(regex-syntax/src/hir/interval.rs:78:9-78:12)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:78:9-78:27)
      kind: _10 = hir::interval::IntervalSet::<I>::canonicalize(move _11) -> [return: bb5, unwind: bb9]
  }
  preds [bb3]
  succs [bb5, bb9]

bb5
  0: StorageDead(_11)
    SourceInfo(regex-syntax/src/hir/interval.rs:78:26-78:27)
  1: StorageDead(_10)
    SourceInfo(regex-syntax/src/hir/interval.rs:78:27-78:28)
  2: _0 = move _7
    SourceInfo(regex-syntax/src/hir/interval.rs:79:9-79:12)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:80:5-80:6)
      kind: drop(_7) -> [return: bb6, unwind: bb10]
  }
  preds [bb4]
  succs [bb6, bb10]

bb6
  0: StorageDead(_7)
    SourceInfo(regex-syntax/src/hir/interval.rs:80:5-80:6)
  1: StorageDead(_5)
    SourceInfo(regex-syntax/src/hir/interval.rs:80:5-80:6)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:80:5-80:6)
      kind: drop(_2) -> [return: bb7, unwind: bb13]
  }
  preds [bb5]
  succs [bb7, bb13]

bb7
  0: StorageDead(_2)
    SourceInfo(regex-syntax/src/hir/interval.rs:80:5-80:6)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:80:5-80:6)
      kind: drop(_1) -> [return: bb8, unwind: bb14]
  }
  preds [bb6]
  succs [bb8, bb14]

bb8
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:80:6-80:6)
      kind: return
  }
  preds [bb7]
  succs []

bb9
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:80:5-80:6)
      kind: drop(_7) -> [return: bb10, unwind terminate(cleanup)]
  }
  preds [bb4]
  succs [bb10]

bb10
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:80:5-80:6)
      kind: drop(_2) -> [return: bb13, unwind terminate(cleanup)]
  }
  preds [bb2, bb3, bb5, bb9]
  succs [bb13]

bb11
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:74:60-74:61)
      kind: drop(_3) -> [return: bb13, unwind terminate(cleanup)]
  }
  preds [bb1]
  succs [bb13]

bb12
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:74:50-74:51)
      kind: drop(_4) -> [return: bb13, unwind terminate(cleanup)]
  }
  preds [bb0]
  succs [bb13]

bb13
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:80:5-80:6)
      kind: drop(_1) -> [return: bb14, unwind terminate(cleanup)]
  }
  preds [bb6, bb10, bb11, bb12]
  succs [bb14]

bb14
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:73:5-80:6)
      kind: resume
  }
  preds [bb7, bb13]
  succs []

