{
  "regex-syntax/src/hir/mod.rs:2370:17:2370:29": [
    {
      "Bool": {
        "Other": "min_poisoned"
      }
    }
  ],
  "regex-syntax/src/hir/mod.rs:2371:20:2371:52": [
    {
      "Bool": {
        "Other": "let Some(xmin) = p.minimum_len()"
      }
    }
  ],
  "regex-syntax/src/hir/mod.rs:2320:22:2320:41": [
    {
      "Bool": {
        "Other": "it.peek().is_none()"
      }
    }
  ],
  "regex-syntax/src/hir/mod.rs:2359:40:2359:51": [
    {
      "Bool": {
        "Other": "p.is_utf8()"
      }
    }
  ],
  "regex-syntax/src/hir/mod.rs:2382:24:2382:74": [
    {
      "Bool": {
        "Other": "props.maximum_len.map_or(true, |pmax| xmax > pmax)"
      }
    }
  ],
  "regex-syntax/src/hir/mod.rs:2359:26:2359:36": [
    {
      "Bool": {
        "Other": "props.utf8"
      }
    }
  ],
  "regex-syntax/src/hir/mod.rs:2363:16:2364:52": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "props.static_explicit_captures_len\n                != p.static_explicit_captures_len()",
          "lhs": "props.static_explicit_captures_len",
          "rhs": "p.static_explicit_captures_len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/hir/mod.rs:2381:20:2381:52": [
    {
      "Bool": {
        "Other": "let Some(xmax) = p.maximum_len()"
      }
    }
  ],
  "regex-syntax/src/hir/mod.rs:2369:46:2369:60": [
    {
      "Bool": {
        "Other": "p.is_literal()"
      }
    }
  ],
  "regex-syntax/src/hir/mod.rs:2352:21:2352:23": [
    {
      "For": {
        "iter_var": "prop",
        "iter_range": "it"
      }
    }
  ],
  "regex-syntax/src/hir/mod.rs:2380:17:2380:29": [
    {
      "Bool": {
        "Other": "max_poisoned"
      }
    }
  ],
  "regex-syntax/src/hir/mod.rs:2372:24:2372:74": [
    {
      "Bool": {
        "Other": "props.minimum_len.map_or(true, |pmin| xmin < pmin)"
      }
    }
  ],
  "regex-syntax/src/hir/mod.rs:2369:17:2369:42": [
    {
      "Bool": {
        "Other": "props.alternation_literal"
      }
    }
  ]
}