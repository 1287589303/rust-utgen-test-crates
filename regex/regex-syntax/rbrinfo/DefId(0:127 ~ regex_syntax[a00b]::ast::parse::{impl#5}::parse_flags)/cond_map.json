{
  "regex-syntax/src/ast/parse.rs:1363:16:1363:34": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.char() == '-'",
          "lhs": "self.char()",
          "rhs": "'-'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1381:52:1381:70": [
    {
      "Try": "self.parse_flag()?"
    }
  ],
  "regex-syntax/src/ast/parse.rs:1362:15:1362:33": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "self.char() != ':'",
          "lhs": "self.char()",
          "rhs": "':'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1383:20:1383:54": [
    {
      "Bool": {
        "Other": "let Some(i) = flags.add_item(item)"
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1392:17:1392:28": [
    {
      "Bool": {
        "Other": "self.bump()"
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1362:37:1362:55": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "self.char() != ')'",
          "lhs": "self.char()",
          "rhs": "')'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1398:12:1398:46": [
    {
      "Bool": {
        "Other": "let Some(span) = last_was_negation"
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1369:20:1369:54": [
    {
      "Bool": {
        "Other": "let Some(i) = flags.add_item(item)"
      }
    }
  ]
}