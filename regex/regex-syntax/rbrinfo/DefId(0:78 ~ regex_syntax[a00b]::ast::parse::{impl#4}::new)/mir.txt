bb0
  0: StorageLive(_3)
    SourceInfo(regex-syntax/src/ast/parse.rs:394:19-394:25)
  1: _3 = move _1
    SourceInfo(regex-syntax/src/ast/parse.rs:394:19-394:25)
  2: StorageLive(_4)
    SourceInfo(regex-syntax/src/ast/parse.rs:394:27-394:34)
  3: _4 = &(*_2)
    SourceInfo(regex-syntax/src/ast/parse.rs:394:27-394:34)
  4: _0 = ast::parse::ParserI::<'_, P> { parser: move _3, pattern: move _4 }
    SourceInfo(regex-syntax/src/ast/parse.rs:394:9-394:36)
  5: StorageDead(_4)
    SourceInfo(regex-syntax/src/ast/parse.rs:394:35-394:36)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:394:35-394:36)
      kind: drop(_3) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: StorageDead(_3)
    SourceInfo(regex-syntax/src/ast/parse.rs:394:35-394:36)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:395:5-395:6)
      kind: drop(_1) -> [return: bb2, unwind: bb4]
  }
  preds [bb0]
  succs [bb2, bb4]

bb2
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:395:6-395:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:395:5-395:6)
      kind: drop(_1) -> [return: bb4, unwind terminate(cleanup)]
  }
  preds [bb0]
  succs [bb4]

bb4
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:393:5-395:6)
      kind: resume
  }
  preds [bb1, bb3]
  succs []

