bb0
  0: PlaceMention(((*_1).1: ast::GroupKind))
    SourceInfo(regex-syntax/src/ast/mod.rs:1438:15-1438:24)
  1: _2 = discriminant(((*_1).1: ast::GroupKind))
    SourceInfo(regex-syntax/src/ast/mod.rs:1438:15-1438:24)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/mod.rs:1438:9-1438:24)
      kind: switchInt(move _2) -> [0: bb3, 1: bb3, 2: bb2, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2, bb3, bb3]

bb1
  0: FakeRead(ForMatchedPlace(None), ((*_1).1: ast::GroupKind))
    SourceInfo(regex-syntax/src/ast/mod.rs:1438:15-1438:24)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/mod.rs:1438:15-1438:24)
      kind: unreachable
  }
  preds [bb0]
  succs []

bb2
  0: _0 = const false
    SourceInfo(regex-syntax/src/ast/mod.rs:1440:43-1440:48)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/mod.rs:1440:43-1440:48)
      kind: goto -> bb5
  }
  preds [bb0, bb3]
  succs [bb5]

bb3
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/mod.rs:1439:13-1439:71)
      kind: falseEdge -> [real: bb4, imaginary: bb2]
  }
  preds [bb0, bb0]
  succs [bb2, bb4]

bb4
  0: _0 = const true
    SourceInfo(regex-syntax/src/ast/mod.rs:1439:75-1439:79)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/mod.rs:1439:75-1439:79)
      kind: goto -> bb5
  }
  preds [bb3]
  succs [bb5]

bb5
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/mod.rs:1442:6-1442:6)
      kind: return
  }
  preds [bb2, bb4]
  succs []

