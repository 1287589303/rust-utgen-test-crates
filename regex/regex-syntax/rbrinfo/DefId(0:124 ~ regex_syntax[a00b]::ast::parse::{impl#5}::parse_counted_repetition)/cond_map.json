{
  "regex-syntax/src/ast/parse.rs:1164:33:1168:19": [
    {
      "Try": "specialize_err(\n                    self.parse_decimal(),\n                    ast::ErrorKind::DecimalEmpty,\n                    ast::ErrorKind::RepetitionCountDecimalEmpty,\n                )?"
    }
  ],
  "regex-syntax/src/ast/parse.rs:1177:29:1177:47": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "self.char() != '}'",
          "lhs": "self.char()",
          "rhs": "'}'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1150:41:1150:52": [
    {
      "Match": {
        "match_source": "regex-syntax/src/ast/parse.rs:1150:41:1150:52",
        "match_str": "count_start",
        "match_kind": {
          "Enum": [
            "Ok",
            "Err"
          ]
        },
        "arms": {
          "regex-syntax/src/ast/parse.rs:1151:21:1151:26": {
            "pat": {
              "pat_str": "Ok(c)",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/ast/parse.rs:1151:30:1151:31"
          },
          "regex-syntax/src/ast/parse.rs:1152:21:1152:29": {
            "pat": {
              "pat_str": "Err(err)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": {
              "regex-syntax/src/ast/parse.rs:1153:28:1154:75": [
                {
                  "Bool": {
                    "Binary": {
                      "kind": "Eq",
                      "expr": "err.kind\n                            == ast::ErrorKind::RepetitionCountDecimalEmpty",
                      "lhs": "err.kind",
                      "rhs": "ast::ErrorKind::RepetitionCountDecimalEmpty",
                      "cmp_with_int": false
                    }
                  }
                }
              ]
            },
            "body_source": "regex-syntax/src/ast/parse.rs:1155:21:1161:22"
          },
          "regex-syntax/src/ast/parse.rs:1162:21:1162:24": {
            "pat": {
              "pat_str": "err",
              "kind": {
                "Other": null
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/ast/parse.rs:1162:28:1162:32"
          }
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1185:42:1185:60": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.char() == '?'",
          "lhs": "self.char()",
          "rhs": "'?'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1174:43:1174:55": [
    {
      "Try": "count_start?"
    }
  ],
  "regex-syntax/src/ast/parse.rs:1125:13:1125:39": [
    {
      "Bool": {
        "Other": "self.bump_and_bump_space()"
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1153:28:1154:75": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "err.kind\n                            == ast::ErrorKind::RepetitionCountDecimalEmpty",
          "lhs": "err.kind",
          "rhs": "ast::ErrorKind::RepetitionCountDecimalEmpty",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1171:47:1171:59": [
    {
      "Try": "count_start?"
    }
  ],
  "regex-syntax/src/ast/parse.rs:1191:13:1191:29": [
    {
      "Bool": {
        "Other": "range.is_valid()"
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1107:17:1107:35": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.char() == '{'",
          "lhs": "self.char()",
          "rhs": "'{'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1136:12:1136:25": [
    {
      "Bool": {
        "Other": "self.is_eof()"
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1185:12:1185:38": [
    {
      "Bool": {
        "Other": "self.bump_and_bump_space()"
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1149:16:1149:34": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "self.char() != '}'",
          "lhs": "self.char()",
          "rhs": "'}'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1177:12:1177:25": [
    {
      "Bool": {
        "Other": "self.is_eof()"
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1109:25:1109:42": [
    {
      "Match": {
        "match_source": "regex-syntax/src/ast/parse.rs:1109:25:1109:42",
        "match_str": "concat.asts.pop()",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-syntax/src/ast/parse.rs:1110:13:1110:22": {
            "pat": {
              "pat_str": "Some(ast)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/ast/parse.rs:1110:26:1110:29"
          },
          "regex-syntax/src/ast/parse.rs:1111:13:1111:17": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/ast/parse.rs:1111:21:1115:14"
          }
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1142:24:1142:42": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.char() == ','",
          "lhs": "self.char()",
          "rhs": "','",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1117:15:1117:18": [
    {
      "Match": {
        "match_source": "regex-syntax/src/ast/parse.rs:1117:15:1117:18",
        "match_str": "ast",
        "match_kind": {
          "Enum": [
            "Empty",
            "Flags",
            "Literal",
            "Dot",
            "Assertion",
            "ClassUnicode",
            "ClassPerl",
            "ClassBracketed",
            "Repetition",
            "Group",
            "Alternation",
            "Concat"
          ]
        },
        "arms": {
          "regex-syntax/src/ast/parse.rs:1118:13:1118:26": {
            "pat": {
              "pat_str": "Ast::Empty(_)",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/ast/parse.rs:1118:46:1122:14"
          },
          "regex-syntax/src/ast/parse.rs:1118:29:1118:42": {
            "pat": {
              "pat_str": "Ast::Flags(_)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/ast/parse.rs:1118:46:1122:14"
          },
          "regex-syntax/src/ast/parse.rs:1123:13:1123:14": {
            "pat": {
              "pat_str": "_",
              "kind": "Wild"
            },
            "guard": null,
            "body_source": "regex-syntax/src/ast/parse.rs:1123:18:1123:20"
          }
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1162:28:1162:32": [
    {
      "Try": "err?"
    }
  ],
  "regex-syntax/src/ast/parse.rs:1156:28:1156:57": [
    {
      "Bool": {
        "Other": "self.parser().empty_min_range"
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1143:17:1143:43": [
    {
      "Bool": {
        "Other": "self.bump_and_bump_space()"
      }
    }
  ]
}