bb0
  0: StorageLive(_2)
    SourceInfo(regex-syntax/src/utf8.rs:340:9-385:10)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:340:9-385:10)
      kind: goto -> bb1
  }
  preds []
  succs [bb1]

bb1
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:340:9-385:10)
      kind: falseUnwind -> [real: bb2, unwind: bb66]
  }
  preds [bb0, bb15]
  succs [bb2, bb66]

bb2
  0: StorageLive(_4)
    SourceInfo(regex-syntax/src/utf8.rs:340:39-340:61)
  1: StorageLive(_5)
    SourceInfo(regex-syntax/src/utf8.rs:340:39-340:55)
  2: _5 = &mut ((*_1).0: std::vec::Vec<utf8::ScalarRange>)
    SourceInfo(regex-syntax/src/utf8.rs:340:39-340:55)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:340:39-340:61)
      kind: _4 = std::vec::Vec::<utf8::ScalarRange>::pop(move _5) -> [return: bb3, unwind: bb66]
  }
  preds [bb1]
  succs [bb3, bb66]

bb3
  0: StorageDead(_5)
    SourceInfo(regex-syntax/src/utf8.rs:340:60-340:61)
  1: PlaceMention(_4)
    SourceInfo(regex-syntax/src/utf8.rs:340:39-340:61)
  2: _6 = discriminant(_4)
    SourceInfo(regex-syntax/src/utf8.rs:340:39-340:61)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:340:25-340:36)
      kind: switchInt(move _6) -> [1: bb4, otherwise: bb63]
  }
  preds [bb2]
  succs [bb4, bb63]

bb4
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:340:25-340:36)
      kind: falseEdge -> [real: bb5, imaginary: bb63]
  }
  preds [bb3]
  succs [bb5, bb63]

bb5
  0: StorageLive(_7)
    SourceInfo(regex-syntax/src/utf8.rs:340:30-340:35)
  1: _7 = move ((_4 as Some).0: utf8::ScalarRange)
    SourceInfo(regex-syntax/src/utf8.rs:340:30-340:35)
  2: StorageLive(_8)
    SourceInfo(regex-syntax/src/utf8.rs:341:13-384:14)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:341:13-384:14)
      kind: goto -> bb6
  }
  preds [bb4]
  succs [bb6]

bb6
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:341:13-384:14)
      kind: falseUnwind -> [real: bb7, unwind: bb66]
  }
  preds [bb5, bb11, bb28, bb62]
  succs [bb7, bb66]

bb7
  0: StorageLive(_9)
    SourceInfo(regex-syntax/src/utf8.rs:342:17-347:18)
  1: StorageLive(_10)
    SourceInfo(regex-syntax/src/utf8.rs:342:41-342:50)
  2: StorageLive(_11)
    SourceInfo(regex-syntax/src/utf8.rs:342:41-342:42)
  3: _11 = &_7
    SourceInfo(regex-syntax/src/utf8.rs:342:41-342:42)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:342:41-342:50)
      kind: _10 = utf8::ScalarRange::split(move _11) -> [return: bb8, unwind: bb66]
  }
  preds [bb6]
  succs [bb8, bb66]

bb8
  0: StorageDead(_11)
    SourceInfo(regex-syntax/src/utf8.rs:342:49-342:50)
  1: PlaceMention(_10)
    SourceInfo(regex-syntax/src/utf8.rs:342:41-342:50)
  2: _12 = discriminant(_10)
    SourceInfo(regex-syntax/src/utf8.rs:342:41-342:50)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:342:24-342:38)
      kind: switchInt(move _12) -> [1: bb9, otherwise: bb12]
  }
  preds [bb7]
  succs [bb9, bb12]

bb9
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:342:24-342:38)
      kind: falseEdge -> [real: bb10, imaginary: bb12]
  }
  preds [bb8]
  succs [bb10, bb12]

bb10
  0: StorageLive(_13)
    SourceInfo(regex-syntax/src/utf8.rs:342:30-342:32)
  1: _13 = move (((_10 as Some).0: (utf8::ScalarRange, utf8::ScalarRange)).0: utf8::ScalarRange)
    SourceInfo(regex-syntax/src/utf8.rs:342:30-342:32)
  2: StorageLive(_14)
    SourceInfo(regex-syntax/src/utf8.rs:342:34-342:36)
  3: _14 = move (((_10 as Some).0: (utf8::ScalarRange, utf8::ScalarRange)).1: utf8::ScalarRange)
    SourceInfo(regex-syntax/src/utf8.rs:342:34-342:36)
  4: StorageLive(_16)
    SourceInfo(regex-syntax/src/utf8.rs:343:21-343:48)
  5: StorageLive(_17)
    SourceInfo(regex-syntax/src/utf8.rs:343:21-343:25)
  6: _17 = &mut (*_1)
    SourceInfo(regex-syntax/src/utf8.rs:343:21-343:25)
  7: StorageLive(_18)
    SourceInfo(regex-syntax/src/utf8.rs:343:31-343:39)
  8: _18 = (_14.0: u32)
    SourceInfo(regex-syntax/src/utf8.rs:343:31-343:39)
  9: StorageLive(_19)
    SourceInfo(regex-syntax/src/utf8.rs:343:41-343:47)
  10: _19 = (_14.1: u32)
    SourceInfo(regex-syntax/src/utf8.rs:343:41-343:47)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:343:21-343:48)
      kind: _16 = utf8::Utf8Sequences::push(move _17, move _18, move _19) -> [return: bb11, unwind: bb66]
  }
  preds [bb9]
  succs [bb11, bb66]

bb11
  0: StorageDead(_19)
    SourceInfo(regex-syntax/src/utf8.rs:343:47-343:48)
  1: StorageDead(_18)
    SourceInfo(regex-syntax/src/utf8.rs:343:47-343:48)
  2: StorageDead(_17)
    SourceInfo(regex-syntax/src/utf8.rs:343:47-343:48)
  3: StorageDead(_16)
    SourceInfo(regex-syntax/src/utf8.rs:343:48-343:49)
  4: StorageLive(_20)
    SourceInfo(regex-syntax/src/utf8.rs:344:31-344:39)
  5: _20 = (_13.0: u32)
    SourceInfo(regex-syntax/src/utf8.rs:344:31-344:39)
  6: (_7.0: u32) = move _20
    SourceInfo(regex-syntax/src/utf8.rs:344:21-344:39)
  7: StorageDead(_20)
    SourceInfo(regex-syntax/src/utf8.rs:344:38-344:39)
  8: StorageLive(_21)
    SourceInfo(regex-syntax/src/utf8.rs:345:29-345:35)
  9: _21 = (_13.1: u32)
    SourceInfo(regex-syntax/src/utf8.rs:345:29-345:35)
  10: (_7.1: u32) = move _21
    SourceInfo(regex-syntax/src/utf8.rs:345:21-345:35)
  11: StorageDead(_21)
    SourceInfo(regex-syntax/src/utf8.rs:345:34-345:35)
  12: StorageDead(_14)
    SourceInfo(regex-syntax/src/utf8.rs:347:17-347:18)
  13: StorageDead(_13)
    SourceInfo(regex-syntax/src/utf8.rs:347:17-347:18)
  14: StorageDead(_10)
    SourceInfo(regex-syntax/src/utf8.rs:347:17-347:18)
  15: StorageDead(_9)
    SourceInfo(regex-syntax/src/utf8.rs:347:17-347:18)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/lib.rs:1:1-1:1)
      kind: goto -> bb6
  }
  preds [bb10]
  succs [bb6]

bb12
  0: _9 = const ()
    SourceInfo(regex-syntax/src/utf8.rs:347:18-347:18)
  1: StorageDead(_10)
    SourceInfo(regex-syntax/src/utf8.rs:347:17-347:18)
  2: StorageDead(_9)
    SourceInfo(regex-syntax/src/utf8.rs:347:17-347:18)
  3: StorageLive(_22)
    SourceInfo(regex-syntax/src/utf8.rs:348:17-350:18)
  4: StorageLive(_23)
    SourceInfo(regex-syntax/src/utf8.rs:348:21-348:33)
  5: StorageLive(_24)
    SourceInfo(regex-syntax/src/utf8.rs:348:21-348:22)
  6: _24 = &_7
    SourceInfo(regex-syntax/src/utf8.rs:348:21-348:22)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:348:21-348:33)
      kind: _23 = utf8::ScalarRange::is_valid(move _24) -> [return: bb13, unwind: bb66]
  }
  preds [bb8, bb9]
  succs [bb13, bb66]

bb13
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:348:21-348:33)
      kind: switchInt(move _23) -> [0: bb15, otherwise: bb14]
  }
  preds [bb12]
  succs [bb14, bb15]

bb14
  0: StorageDead(_24)
    SourceInfo(regex-syntax/src/utf8.rs:348:32-348:33)
  1: _22 = const ()
    SourceInfo(regex-syntax/src/utf8.rs:350:18-350:18)
  2: StorageDead(_23)
    SourceInfo(regex-syntax/src/utf8.rs:350:17-350:18)
  3: StorageDead(_22)
    SourceInfo(regex-syntax/src/utf8.rs:350:17-350:18)
  4: StorageLive(_26)
    SourceInfo(regex-syntax/src/utf8.rs:351:17-358:18)
  5: StorageLive(_27)
    SourceInfo(regex-syntax/src/utf8.rs:351:26-351:43)
  6: StorageLive(_28)
    SourceInfo(regex-syntax/src/utf8.rs:351:26-351:43)
  7: _28 = core::ops::Range::<usize> { start: const 1_usize, end: const utf8::MAX_UTF8_BYTES }
    SourceInfo(regex-syntax/src/utf8.rs:351:26-351:43)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:351:26-351:43)
      kind: _27 = <core::ops::Range<usize> as core::iter::IntoIterator>::into_iter(move _28) -> [return: bb16, unwind: bb66]
  }
  preds [bb13]
  succs [bb16, bb66]

bb15
  0: StorageDead(_24)
    SourceInfo(regex-syntax/src/utf8.rs:348:32-348:33)
  1: StorageDead(_23)
    SourceInfo(regex-syntax/src/utf8.rs:350:17-350:18)
  2: StorageDead(_22)
    SourceInfo(regex-syntax/src/utf8.rs:350:17-350:18)
  3: StorageDead(_8)
    SourceInfo(regex-syntax/src/utf8.rs:384:13-384:14)
  4: StorageDead(_7)
    SourceInfo(regex-syntax/src/utf8.rs:385:9-385:10)
  5: StorageDead(_4)
    SourceInfo(regex-syntax/src/utf8.rs:385:9-385:10)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/lib.rs:1:1-1:1)
      kind: goto -> bb1
  }
  preds [bb13]
  succs [bb1]

bb16
  0: StorageDead(_28)
    SourceInfo(regex-syntax/src/utf8.rs:351:42-351:43)
  1: PlaceMention(_27)
    SourceInfo(regex-syntax/src/utf8.rs:351:26-351:43)
  2: StorageLive(_29)
    SourceInfo(regex-syntax/src/utf8.rs:351:26-351:43)
  3: _29 = move _27
    SourceInfo(regex-syntax/src/utf8.rs:351:26-351:43)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:351:17-358:18)
      kind: goto -> bb17
  }
  preds [bb14]
  succs [bb17]

bb17
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:351:17-358:18)
      kind: falseUnwind -> [real: bb18, unwind: bb66]
  }
  preds [bb16, bb31]
  succs [bb18, bb66]

bb18
  0: StorageLive(_30)
    SourceInfo(regex-syntax/src/utf8.rs:351:26-351:43)
  1: StorageLive(_31)
    SourceInfo(regex-syntax/src/utf8.rs:351:26-351:43)
  2: StorageLive(_32)
    SourceInfo(regex-syntax/src/utf8.rs:351:26-351:43)
  3: StorageLive(_33)
    SourceInfo(regex-syntax/src/utf8.rs:351:26-351:43)
  4: _33 = &mut _29
    SourceInfo(regex-syntax/src/utf8.rs:351:26-351:43)
  5: _32 = &mut (*_33)
    SourceInfo(regex-syntax/src/utf8.rs:351:26-351:43)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:351:26-351:43)
      kind: _31 = <core::ops::Range<usize> as core::iter::Iterator>::next(move _32) -> [return: bb19, unwind: bb66]
  }
  preds [bb17]
  succs [bb19, bb66]

bb19
  0: StorageDead(_32)
    SourceInfo(regex-syntax/src/utf8.rs:351:42-351:43)
  1: PlaceMention(_31)
    SourceInfo(regex-syntax/src/utf8.rs:351:26-351:43)
  2: _34 = discriminant(_31)
    SourceInfo(regex-syntax/src/utf8.rs:351:26-351:43)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:351:26-351:43)
      kind: switchInt(move _34) -> [0: bb21, 1: bb22, otherwise: bb20]
  }
  preds [bb18]
  succs [bb20, bb21, bb22]

bb20
  0: FakeRead(ForMatchedPlace(None), _31)
    SourceInfo(regex-syntax/src/utf8.rs:351:26-351:43)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:351:26-351:43)
      kind: unreachable
  }
  preds [bb19]
  succs []

bb21
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:351:17-358:18)
      kind: falseEdge -> [real: bb23, imaginary: bb22]
  }
  preds [bb19]
  succs [bb22, bb23]

bb22
  0: StorageLive(_36)
    SourceInfo(regex-syntax/src/utf8.rs:351:21-351:22)
  1: _36 = ((_31 as Some).0: usize)
    SourceInfo(regex-syntax/src/utf8.rs:351:21-351:22)
  2: StorageLive(_37)
    SourceInfo(regex-syntax/src/utf8.rs:352:25-352:28)
  3: StorageLive(_38)
    SourceInfo(regex-syntax/src/utf8.rs:352:48-352:49)
  4: _38 = _36
    SourceInfo(regex-syntax/src/utf8.rs:352:48-352:49)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:352:31-352:50)
      kind: _37 = utf8::max_scalar_value(move _38) -> [return: bb24, unwind: bb66]
  }
  preds [bb19, bb21]
  succs [bb24, bb66]

bb23
  0: _26 = const ()
    SourceInfo(regex-syntax/src/utf8.rs:351:17-358:18)
  1: StorageDead(_33)
    SourceInfo(regex-syntax/src/utf8.rs:358:17-358:18)
  2: StorageDead(_31)
    SourceInfo(regex-syntax/src/utf8.rs:358:17-358:18)
  3: StorageDead(_30)
    SourceInfo(regex-syntax/src/utf8.rs:358:17-358:18)
  4: StorageDead(_29)
    SourceInfo(regex-syntax/src/utf8.rs:358:17-358:18)
  5: StorageDead(_27)
    SourceInfo(regex-syntax/src/utf8.rs:358:17-358:18)
  6: StorageDead(_26)
    SourceInfo(regex-syntax/src/utf8.rs:358:17-358:18)
  7: StorageLive(_53)
    SourceInfo(regex-syntax/src/utf8.rs:359:17-361:18)
  8: StorageLive(_54)
    SourceInfo(regex-syntax/src/utf8.rs:359:44-359:56)
  9: StorageLive(_55)
    SourceInfo(regex-syntax/src/utf8.rs:359:44-359:45)
  10: _55 = &_7
    SourceInfo(regex-syntax/src/utf8.rs:359:44-359:45)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:359:44-359:56)
      kind: _54 = utf8::ScalarRange::as_ascii(move _55) -> [return: bb32, unwind: bb66]
  }
  preds [bb21]
  succs [bb32, bb66]

bb24
  0: StorageDead(_38)
    SourceInfo(regex-syntax/src/utf8.rs:352:49-352:50)
  1: FakeRead(ForLet(None), _37)
    SourceInfo(regex-syntax/src/utf8.rs:352:25-352:28)
  2: StorageLive(_39)
    SourceInfo(regex-syntax/src/utf8.rs:353:24-353:38)
  3: StorageLive(_40)
    SourceInfo(regex-syntax/src/utf8.rs:353:24-353:31)
  4: _40 = (_7.0: u32)
    SourceInfo(regex-syntax/src/utf8.rs:353:24-353:31)
  5: StorageLive(_41)
    SourceInfo(regex-syntax/src/utf8.rs:353:35-353:38)
  6: _41 = _37
    SourceInfo(regex-syntax/src/utf8.rs:353:35-353:38)
  7: _39 = Le(move _40, move _41)
    SourceInfo(regex-syntax/src/utf8.rs:353:24-353:38)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:353:24-353:38)
      kind: switchInt(move _39) -> [0: bb30, otherwise: bb25]
  }
  preds [bb22]
  succs [bb25, bb30]

bb25
  0: StorageDead(_41)
    SourceInfo(regex-syntax/src/utf8.rs:353:37-353:38)
  1: StorageDead(_40)
    SourceInfo(regex-syntax/src/utf8.rs:353:37-353:38)
  2: StorageLive(_42)
    SourceInfo(regex-syntax/src/utf8.rs:353:42-353:53)
  3: StorageLive(_43)
    SourceInfo(regex-syntax/src/utf8.rs:353:42-353:45)
  4: _43 = _37
    SourceInfo(regex-syntax/src/utf8.rs:353:42-353:45)
  5: StorageLive(_44)
    SourceInfo(regex-syntax/src/utf8.rs:353:48-353:53)
  6: _44 = (_7.1: u32)
    SourceInfo(regex-syntax/src/utf8.rs:353:48-353:53)
  7: _42 = Lt(move _43, move _44)
    SourceInfo(regex-syntax/src/utf8.rs:353:42-353:53)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:353:42-353:53)
      kind: switchInt(move _42) -> [0: bb29, otherwise: bb26]
  }
  preds [bb24]
  succs [bb26, bb29]

bb26
  0: StorageDead(_44)
    SourceInfo(regex-syntax/src/utf8.rs:353:52-353:53)
  1: StorageDead(_43)
    SourceInfo(regex-syntax/src/utf8.rs:353:52-353:53)
  2: StorageLive(_46)
    SourceInfo(regex-syntax/src/utf8.rs:354:25-354:50)
  3: StorageLive(_47)
    SourceInfo(regex-syntax/src/utf8.rs:354:25-354:29)
  4: _47 = &mut (*_1)
    SourceInfo(regex-syntax/src/utf8.rs:354:25-354:29)
  5: StorageLive(_48)
    SourceInfo(regex-syntax/src/utf8.rs:354:35-354:42)
  6: StorageLive(_49)
    SourceInfo(regex-syntax/src/utf8.rs:354:35-354:38)
  7: _49 = _37
    SourceInfo(regex-syntax/src/utf8.rs:354:35-354:38)
  8: _50 = AddWithOverflow(_49, const 1_u32)
    SourceInfo(regex-syntax/src/utf8.rs:354:35-354:42)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:354:35-354:42)
      kind: assert(!move (_50.1: bool), "attempt to compute `{} + {}`, which would overflow", move _49, const 1_u32) -> [success: bb27, unwind: bb66]
  }
  preds [bb25]
  succs [bb27, bb66]

bb27
  0: _48 = move (_50.0: u32)
    SourceInfo(regex-syntax/src/utf8.rs:354:35-354:42)
  1: StorageDead(_49)
    SourceInfo(regex-syntax/src/utf8.rs:354:41-354:42)
  2: StorageLive(_51)
    SourceInfo(regex-syntax/src/utf8.rs:354:44-354:49)
  3: _51 = (_7.1: u32)
    SourceInfo(regex-syntax/src/utf8.rs:354:44-354:49)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:354:25-354:50)
      kind: _46 = utf8::Utf8Sequences::push(move _47, move _48, move _51) -> [return: bb28, unwind: bb66]
  }
  preds [bb26]
  succs [bb28, bb66]

bb28
  0: StorageDead(_51)
    SourceInfo(regex-syntax/src/utf8.rs:354:49-354:50)
  1: StorageDead(_48)
    SourceInfo(regex-syntax/src/utf8.rs:354:49-354:50)
  2: StorageDead(_47)
    SourceInfo(regex-syntax/src/utf8.rs:354:49-354:50)
  3: StorageDead(_46)
    SourceInfo(regex-syntax/src/utf8.rs:354:50-354:51)
  4: StorageLive(_52)
    SourceInfo(regex-syntax/src/utf8.rs:355:33-355:36)
  5: _52 = _37
    SourceInfo(regex-syntax/src/utf8.rs:355:33-355:36)
  6: (_7.1: u32) = move _52
    SourceInfo(regex-syntax/src/utf8.rs:355:25-355:36)
  7: StorageDead(_52)
    SourceInfo(regex-syntax/src/utf8.rs:355:35-355:36)
  8: StorageDead(_42)
    SourceInfo(regex-syntax/src/utf8.rs:357:21-357:22)
  9: StorageDead(_39)
    SourceInfo(regex-syntax/src/utf8.rs:357:21-357:22)
  10: StorageDead(_37)
    SourceInfo(regex-syntax/src/utf8.rs:358:17-358:18)
  11: StorageDead(_36)
    SourceInfo(regex-syntax/src/utf8.rs:358:17-358:18)
  12: StorageDead(_33)
    SourceInfo(regex-syntax/src/utf8.rs:358:17-358:18)
  13: StorageDead(_31)
    SourceInfo(regex-syntax/src/utf8.rs:358:17-358:18)
  14: StorageDead(_30)
    SourceInfo(regex-syntax/src/utf8.rs:358:17-358:18)
  15: StorageDead(_29)
    SourceInfo(regex-syntax/src/utf8.rs:358:17-358:18)
  16: StorageDead(_27)
    SourceInfo(regex-syntax/src/utf8.rs:358:17-358:18)
  17: StorageDead(_26)
    SourceInfo(regex-syntax/src/utf8.rs:358:17-358:18)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/lib.rs:1:1-1:1)
      kind: goto -> bb6
  }
  preds [bb27]
  succs [bb6]

bb29
  0: StorageDead(_44)
    SourceInfo(regex-syntax/src/utf8.rs:353:52-353:53)
  1: StorageDead(_43)
    SourceInfo(regex-syntax/src/utf8.rs:353:52-353:53)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/lib.rs:1:1-1:1)
      kind: goto -> bb31
  }
  preds [bb25]
  succs [bb31]

bb30
  0: StorageDead(_41)
    SourceInfo(regex-syntax/src/utf8.rs:353:37-353:38)
  1: StorageDead(_40)
    SourceInfo(regex-syntax/src/utf8.rs:353:37-353:38)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/lib.rs:1:1-1:1)
      kind: goto -> bb31
  }
  preds [bb24]
  succs [bb31]

bb31
  0: _30 = const ()
    SourceInfo(regex-syntax/src/utf8.rs:357:22-357:22)
  1: StorageDead(_42)
    SourceInfo(regex-syntax/src/utf8.rs:357:21-357:22)
  2: StorageDead(_39)
    SourceInfo(regex-syntax/src/utf8.rs:357:21-357:22)
  3: StorageDead(_37)
    SourceInfo(regex-syntax/src/utf8.rs:358:17-358:18)
  4: StorageDead(_36)
    SourceInfo(regex-syntax/src/utf8.rs:358:17-358:18)
  5: StorageDead(_33)
    SourceInfo(regex-syntax/src/utf8.rs:358:17-358:18)
  6: StorageDead(_31)
    SourceInfo(regex-syntax/src/utf8.rs:358:17-358:18)
  7: StorageDead(_30)
    SourceInfo(regex-syntax/src/utf8.rs:358:17-358:18)
  8: _3 = const ()
    SourceInfo(regex-syntax/src/utf8.rs:351:17-358:18)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:351:17-358:18)
      kind: goto -> bb17
  }
  preds [bb29, bb30]
  succs [bb17]

bb32
  0: StorageDead(_55)
    SourceInfo(regex-syntax/src/utf8.rs:359:55-359:56)
  1: PlaceMention(_54)
    SourceInfo(regex-syntax/src/utf8.rs:359:44-359:56)
  2: _56 = discriminant(_54)
    SourceInfo(regex-syntax/src/utf8.rs:359:44-359:56)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:359:24-359:41)
      kind: switchInt(move _56) -> [1: bb33, otherwise: bb35]
  }
  preds [bb23]
  succs [bb33, bb35]

bb33
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:359:24-359:41)
      kind: falseEdge -> [real: bb34, imaginary: bb35]
  }
  preds [bb32]
  succs [bb34, bb35]

bb34
  0: StorageLive(_57)
    SourceInfo(regex-syntax/src/utf8.rs:359:29-359:40)
  1: _57 = ((_54 as Some).0: utf8::Utf8Range)
    SourceInfo(regex-syntax/src/utf8.rs:359:29-359:40)
  2: StorageLive(_59)
    SourceInfo(regex-syntax/src/utf8.rs:360:33-360:63)
  3: StorageLive(_60)
    SourceInfo(regex-syntax/src/utf8.rs:360:51-360:62)
  4: _60 = _57
    SourceInfo(regex-syntax/src/utf8.rs:360:51-360:62)
  5: _59 = utf8::Utf8Sequence::One(move _60)
    SourceInfo(regex-syntax/src/utf8.rs:360:33-360:63)
  6: StorageDead(_60)
    SourceInfo(regex-syntax/src/utf8.rs:360:62-360:63)
  7: _0 = core::option::Option::<utf8::Utf8Sequence>::Some(move _59)
    SourceInfo(regex-syntax/src/utf8.rs:360:28-360:64)
  8: StorageDead(_59)
    SourceInfo(regex-syntax/src/utf8.rs:360:63-360:64)
  9: StorageDead(_57)
    SourceInfo(regex-syntax/src/utf8.rs:361:17-361:18)
  10: StorageDead(_54)
    SourceInfo(regex-syntax/src/utf8.rs:361:17-361:18)
  11: StorageDead(_53)
    SourceInfo(regex-syntax/src/utf8.rs:361:17-361:18)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/lib.rs:1:1-1:1)
      kind: goto -> bb64
  }
  preds [bb33]
  succs [bb64]

bb35
  0: _53 = const ()
    SourceInfo(regex-syntax/src/utf8.rs:361:18-361:18)
  1: StorageDead(_54)
    SourceInfo(regex-syntax/src/utf8.rs:361:17-361:18)
  2: StorageDead(_53)
    SourceInfo(regex-syntax/src/utf8.rs:361:17-361:18)
  3: StorageLive(_61)
    SourceInfo(regex-syntax/src/utf8.rs:362:17-376:18)
  4: StorageLive(_62)
    SourceInfo(regex-syntax/src/utf8.rs:362:26-362:43)
  5: StorageLive(_63)
    SourceInfo(regex-syntax/src/utf8.rs:362:26-362:43)
  6: _63 = core::ops::Range::<usize> { start: const 1_usize, end: const utf8::MAX_UTF8_BYTES }
    SourceInfo(regex-syntax/src/utf8.rs:362:26-362:43)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:362:26-362:43)
      kind: _62 = <core::ops::Range<usize> as core::iter::IntoIterator>::into_iter(move _63) -> [return: bb36, unwind: bb66]
  }
  preds [bb32, bb33]
  succs [bb36, bb66]

bb36
  0: StorageDead(_63)
    SourceInfo(regex-syntax/src/utf8.rs:362:42-362:43)
  1: PlaceMention(_62)
    SourceInfo(regex-syntax/src/utf8.rs:362:26-362:43)
  2: StorageLive(_64)
    SourceInfo(regex-syntax/src/utf8.rs:362:26-362:43)
  3: _64 = move _62
    SourceInfo(regex-syntax/src/utf8.rs:362:26-362:43)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:362:17-376:18)
      kind: goto -> bb37
  }
  preds [bb35]
  succs [bb37]

bb37
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:362:17-376:18)
      kind: falseUnwind -> [real: bb38, unwind: bb66]
  }
  preds [bb36, bb57]
  succs [bb38, bb66]

bb38
  0: StorageLive(_65)
    SourceInfo(regex-syntax/src/utf8.rs:362:26-362:43)
  1: StorageLive(_66)
    SourceInfo(regex-syntax/src/utf8.rs:362:26-362:43)
  2: StorageLive(_67)
    SourceInfo(regex-syntax/src/utf8.rs:362:26-362:43)
  3: StorageLive(_68)
    SourceInfo(regex-syntax/src/utf8.rs:362:26-362:43)
  4: _68 = &mut _64
    SourceInfo(regex-syntax/src/utf8.rs:362:26-362:43)
  5: _67 = &mut (*_68)
    SourceInfo(regex-syntax/src/utf8.rs:362:26-362:43)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:362:26-362:43)
      kind: _66 = <core::ops::Range<usize> as core::iter::Iterator>::next(move _67) -> [return: bb39, unwind: bb66]
  }
  preds [bb37]
  succs [bb39, bb66]

bb39
  0: StorageDead(_67)
    SourceInfo(regex-syntax/src/utf8.rs:362:42-362:43)
  1: PlaceMention(_66)
    SourceInfo(regex-syntax/src/utf8.rs:362:26-362:43)
  2: _69 = discriminant(_66)
    SourceInfo(regex-syntax/src/utf8.rs:362:26-362:43)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:362:26-362:43)
      kind: switchInt(move _69) -> [0: bb41, 1: bb42, otherwise: bb40]
  }
  preds [bb38]
  succs [bb40, bb41, bb42]

bb40
  0: FakeRead(ForMatchedPlace(None), _66)
    SourceInfo(regex-syntax/src/utf8.rs:362:26-362:43)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:362:26-362:43)
      kind: unreachable
  }
  preds [bb39]
  succs []

bb41
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:362:17-376:18)
      kind: falseEdge -> [real: bb43, imaginary: bb42]
  }
  preds [bb39]
  succs [bb42, bb43]

bb42
  0: StorageLive(_71)
    SourceInfo(regex-syntax/src/utf8.rs:362:21-362:22)
  1: _71 = ((_66 as Some).0: usize)
    SourceInfo(regex-syntax/src/utf8.rs:362:21-362:22)
  2: StorageLive(_72)
    SourceInfo(regex-syntax/src/utf8.rs:363:25-363:26)
  3: StorageLive(_73)
    SourceInfo(regex-syntax/src/utf8.rs:363:29-363:43)
  4: StorageLive(_74)
    SourceInfo(regex-syntax/src/utf8.rs:363:35-363:42)
  5: StorageLive(_75)
    SourceInfo(regex-syntax/src/utf8.rs:363:40-363:41)
  6: _75 = _71
    SourceInfo(regex-syntax/src/utf8.rs:363:40-363:41)
  7: _76 = MulWithOverflow(const 6_usize, _75)
    SourceInfo(regex-syntax/src/utf8.rs:363:35-363:42)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:363:35-363:42)
      kind: assert(!move (_76.1: bool), "attempt to compute `{} * {}`, which would overflow", const 6_usize, move _75) -> [success: bb44, unwind: bb66]
  }
  preds [bb39, bb41]
  succs [bb44, bb66]

bb43
  0: _61 = const ()
    SourceInfo(regex-syntax/src/utf8.rs:362:17-376:18)
  1: StorageDead(_68)
    SourceInfo(regex-syntax/src/utf8.rs:376:17-376:18)
  2: StorageDead(_66)
    SourceInfo(regex-syntax/src/utf8.rs:376:17-376:18)
  3: StorageDead(_65)
    SourceInfo(regex-syntax/src/utf8.rs:376:17-376:18)
  4: StorageDead(_64)
    SourceInfo(regex-syntax/src/utf8.rs:376:17-376:18)
  5: StorageDead(_62)
    SourceInfo(regex-syntax/src/utf8.rs:376:17-376:18)
  6: StorageDead(_61)
    SourceInfo(regex-syntax/src/utf8.rs:376:17-376:18)
  7: StorageLive(_122)
    SourceInfo(regex-syntax/src/utf8.rs:377:21-377:30)
  8: _122 = [const 0_u8; 4]
    SourceInfo(regex-syntax/src/utf8.rs:377:33-377:52)
  9: FakeRead(ForLet(None), _122)
    SourceInfo(regex-syntax/src/utf8.rs:377:21-377:30)
  10: StorageLive(_123)
    SourceInfo(regex-syntax/src/utf8.rs:378:21-378:28)
  11: _123 = [const 0_u8; 4]
    SourceInfo(regex-syntax/src/utf8.rs:378:31-378:50)
  12: FakeRead(ForLet(None), _123)
    SourceInfo(regex-syntax/src/utf8.rs:378:21-378:28)
  13: StorageLive(_124)
    SourceInfo(regex-syntax/src/utf8.rs:379:21-379:22)
  14: StorageLive(_125)
    SourceInfo(regex-syntax/src/utf8.rs:379:25-379:26)
  15: _125 = &_7
    SourceInfo(regex-syntax/src/utf8.rs:379:25-379:26)
  16: StorageLive(_126)
    SourceInfo(regex-syntax/src/utf8.rs:379:34-379:44)
  17: StorageLive(_127)
    SourceInfo(regex-syntax/src/utf8.rs:379:34-379:44)
  18: StorageLive(_128)
    SourceInfo(regex-syntax/src/utf8.rs:379:34-379:44)
  19: _128 = &mut _122
    SourceInfo(regex-syntax/src/utf8.rs:379:34-379:44)
  20: _127 = &mut (*_128)
    SourceInfo(regex-syntax/src/utf8.rs:379:34-379:44)
  21: _126 = move _127 as &mut [u8] (PointerCoercion(Unsize))
    SourceInfo(regex-syntax/src/utf8.rs:379:34-379:44)
  22: StorageDead(_127)
    SourceInfo(regex-syntax/src/utf8.rs:379:43-379:44)
  23: StorageLive(_129)
    SourceInfo(regex-syntax/src/utf8.rs:379:46-379:54)
  24: StorageLive(_130)
    SourceInfo(regex-syntax/src/utf8.rs:379:46-379:54)
  25: StorageLive(_131)
    SourceInfo(regex-syntax/src/utf8.rs:379:46-379:54)
  26: _131 = &mut _123
    SourceInfo(regex-syntax/src/utf8.rs:379:46-379:54)
  27: _130 = &mut (*_131)
    SourceInfo(regex-syntax/src/utf8.rs:379:46-379:54)
  28: _129 = move _130 as &mut [u8] (PointerCoercion(Unsize))
    SourceInfo(regex-syntax/src/utf8.rs:379:46-379:54)
  29: StorageDead(_130)
    SourceInfo(regex-syntax/src/utf8.rs:379:53-379:54)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:379:25-379:55)
      kind: _124 = utf8::ScalarRange::encode(move _125, move _126, move _129) -> [return: bb58, unwind: bb66]
  }
  preds [bb41]
  succs [bb58, bb66]

bb44
  0: _74 = move (_76.0: usize)
    SourceInfo(regex-syntax/src/utf8.rs:363:35-363:42)
  1: StorageDead(_75)
    SourceInfo(regex-syntax/src/utf8.rs:363:41-363:42)
  2: _77 = Lt(_74, const 32_usize)
    SourceInfo(regex-syntax/src/utf8.rs:363:29-363:43)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:363:29-363:43)
      kind: assert(move _77, "attempt to shift left by `{}`, which would overflow", _74) -> [success: bb45, unwind: bb66]
  }
  preds [bb42]
  succs [bb45, bb66]

bb45
  0: _73 = Shl(const 1_u32, move _74)
    SourceInfo(regex-syntax/src/utf8.rs:363:29-363:43)
  1: StorageDead(_74)
    SourceInfo(regex-syntax/src/utf8.rs:363:42-363:43)
  2: _78 = SubWithOverflow(_73, const 1_u32)
    SourceInfo(regex-syntax/src/utf8.rs:363:29-363:47)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:363:29-363:47)
      kind: assert(!move (_78.1: bool), "attempt to compute `{} - {}`, which would overflow", move _73, const 1_u32) -> [success: bb46, unwind: bb66]
  }
  preds [bb44]
  succs [bb46, bb66]

bb46
  0: _72 = move (_78.0: u32)
    SourceInfo(regex-syntax/src/utf8.rs:363:29-363:47)
  1: StorageDead(_73)
    SourceInfo(regex-syntax/src/utf8.rs:363:46-363:47)
  2: FakeRead(ForLet(None), _72)
    SourceInfo(regex-syntax/src/utf8.rs:363:25-363:26)
  3: StorageLive(_79)
    SourceInfo(regex-syntax/src/utf8.rs:364:24-364:54)
  4: StorageLive(_80)
    SourceInfo(regex-syntax/src/utf8.rs:364:24-364:38)
  5: StorageLive(_81)
    SourceInfo(regex-syntax/src/utf8.rs:364:25-364:32)
  6: _81 = (_7.0: u32)
    SourceInfo(regex-syntax/src/utf8.rs:364:25-364:32)
  7: StorageLive(_82)
    SourceInfo(regex-syntax/src/utf8.rs:364:35-364:37)
  8: StorageLive(_83)
    SourceInfo(regex-syntax/src/utf8.rs:364:36-364:37)
  9: _83 = _72
    SourceInfo(regex-syntax/src/utf8.rs:364:36-364:37)
  10: _82 = Not(move _83)
    SourceInfo(regex-syntax/src/utf8.rs:364:35-364:37)
  11: StorageDead(_83)
    SourceInfo(regex-syntax/src/utf8.rs:364:36-364:37)
  12: _80 = BitAnd(move _81, move _82)
    SourceInfo(regex-syntax/src/utf8.rs:364:24-364:38)
  13: StorageDead(_82)
    SourceInfo(regex-syntax/src/utf8.rs:364:37-364:38)
  14: StorageDead(_81)
    SourceInfo(regex-syntax/src/utf8.rs:364:37-364:38)
  15: StorageLive(_84)
    SourceInfo(regex-syntax/src/utf8.rs:364:42-364:54)
  16: StorageLive(_85)
    SourceInfo(regex-syntax/src/utf8.rs:364:43-364:48)
  17: _85 = (_7.1: u32)
    SourceInfo(regex-syntax/src/utf8.rs:364:43-364:48)
  18: StorageLive(_86)
    SourceInfo(regex-syntax/src/utf8.rs:364:51-364:53)
  19: StorageLive(_87)
    SourceInfo(regex-syntax/src/utf8.rs:364:52-364:53)
  20: _87 = _72
    SourceInfo(regex-syntax/src/utf8.rs:364:52-364:53)
  21: _86 = Not(move _87)
    SourceInfo(regex-syntax/src/utf8.rs:364:51-364:53)
  22: StorageDead(_87)
    SourceInfo(regex-syntax/src/utf8.rs:364:52-364:53)
  23: _84 = BitAnd(move _85, move _86)
    SourceInfo(regex-syntax/src/utf8.rs:364:42-364:54)
  24: StorageDead(_86)
    SourceInfo(regex-syntax/src/utf8.rs:364:53-364:54)
  25: StorageDead(_85)
    SourceInfo(regex-syntax/src/utf8.rs:364:53-364:54)
  26: _79 = Ne(move _80, move _84)
    SourceInfo(regex-syntax/src/utf8.rs:364:24-364:54)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:364:24-364:54)
      kind: switchInt(move _79) -> [0: bb56, otherwise: bb47]
  }
  preds [bb45]
  succs [bb47, bb56]

bb47
  0: StorageDead(_84)
    SourceInfo(regex-syntax/src/utf8.rs:364:53-364:54)
  1: StorageDead(_80)
    SourceInfo(regex-syntax/src/utf8.rs:364:53-364:54)
  2: StorageLive(_88)
    SourceInfo(regex-syntax/src/utf8.rs:365:25-369:26)
  3: StorageLive(_89)
    SourceInfo(regex-syntax/src/utf8.rs:365:28-365:46)
  4: StorageLive(_90)
    SourceInfo(regex-syntax/src/utf8.rs:365:28-365:41)
  5: StorageLive(_91)
    SourceInfo(regex-syntax/src/utf8.rs:365:29-365:36)
  6: _91 = (_7.0: u32)
    SourceInfo(regex-syntax/src/utf8.rs:365:29-365:36)
  7: StorageLive(_92)
    SourceInfo(regex-syntax/src/utf8.rs:365:39-365:40)
  8: _92 = _72
    SourceInfo(regex-syntax/src/utf8.rs:365:39-365:40)
  9: _90 = BitAnd(move _91, move _92)
    SourceInfo(regex-syntax/src/utf8.rs:365:28-365:41)
  10: StorageDead(_92)
    SourceInfo(regex-syntax/src/utf8.rs:365:40-365:41)
  11: StorageDead(_91)
    SourceInfo(regex-syntax/src/utf8.rs:365:40-365:41)
  12: _89 = Ne(move _90, const 0_u32)
    SourceInfo(regex-syntax/src/utf8.rs:365:28-365:46)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:365:28-365:46)
      kind: switchInt(move _89) -> [0: bb51, otherwise: bb48]
  }
  preds [bb46]
  succs [bb48, bb51]

bb48
  0: StorageDead(_90)
    SourceInfo(regex-syntax/src/utf8.rs:365:45-365:46)
  1: StorageLive(_94)
    SourceInfo(regex-syntax/src/utf8.rs:366:29-366:64)
  2: StorageLive(_95)
    SourceInfo(regex-syntax/src/utf8.rs:366:29-366:33)
  3: _95 = &mut (*_1)
    SourceInfo(regex-syntax/src/utf8.rs:366:29-366:33)
  4: StorageLive(_96)
    SourceInfo(regex-syntax/src/utf8.rs:366:39-366:56)
  5: StorageLive(_97)
    SourceInfo(regex-syntax/src/utf8.rs:366:39-366:52)
  6: StorageLive(_98)
    SourceInfo(regex-syntax/src/utf8.rs:366:40-366:47)
  7: _98 = (_7.0: u32)
    SourceInfo(regex-syntax/src/utf8.rs:366:40-366:47)
  8: StorageLive(_99)
    SourceInfo(regex-syntax/src/utf8.rs:366:50-366:51)
  9: _99 = _72
    SourceInfo(regex-syntax/src/utf8.rs:366:50-366:51)
  10: _97 = BitOr(move _98, move _99)
    SourceInfo(regex-syntax/src/utf8.rs:366:39-366:52)
  11: StorageDead(_99)
    SourceInfo(regex-syntax/src/utf8.rs:366:51-366:52)
  12: StorageDead(_98)
    SourceInfo(regex-syntax/src/utf8.rs:366:51-366:52)
  13: _100 = AddWithOverflow(_97, const 1_u32)
    SourceInfo(regex-syntax/src/utf8.rs:366:39-366:56)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:366:39-366:56)
      kind: assert(!move (_100.1: bool), "attempt to compute `{} + {}`, which would overflow", move _97, const 1_u32) -> [success: bb49, unwind: bb66]
  }
  preds [bb47]
  succs [bb49, bb66]

bb49
  0: _96 = move (_100.0: u32)
    SourceInfo(regex-syntax/src/utf8.rs:366:39-366:56)
  1: StorageDead(_97)
    SourceInfo(regex-syntax/src/utf8.rs:366:55-366:56)
  2: StorageLive(_101)
    SourceInfo(regex-syntax/src/utf8.rs:366:58-366:63)
  3: _101 = (_7.1: u32)
    SourceInfo(regex-syntax/src/utf8.rs:366:58-366:63)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:366:29-366:64)
      kind: _94 = utf8::Utf8Sequences::push(move _95, move _96, move _101) -> [return: bb50, unwind: bb66]
  }
  preds [bb48]
  succs [bb50, bb66]

bb50
  0: StorageDead(_101)
    SourceInfo(regex-syntax/src/utf8.rs:366:63-366:64)
  1: StorageDead(_96)
    SourceInfo(regex-syntax/src/utf8.rs:366:63-366:64)
  2: StorageDead(_95)
    SourceInfo(regex-syntax/src/utf8.rs:366:63-366:64)
  3: StorageDead(_94)
    SourceInfo(regex-syntax/src/utf8.rs:366:64-366:65)
  4: StorageLive(_102)
    SourceInfo(regex-syntax/src/utf8.rs:367:37-367:44)
  5: _102 = (_7.0: u32)
    SourceInfo(regex-syntax/src/utf8.rs:367:37-367:44)
  6: StorageLive(_103)
    SourceInfo(regex-syntax/src/utf8.rs:367:47-367:48)
  7: _103 = _72
    SourceInfo(regex-syntax/src/utf8.rs:367:47-367:48)
  8: (_7.1: u32) = BitOr(move _102, move _103)
    SourceInfo(regex-syntax/src/utf8.rs:367:29-367:48)
  9: StorageDead(_103)
    SourceInfo(regex-syntax/src/utf8.rs:367:47-367:48)
  10: StorageDead(_102)
    SourceInfo(regex-syntax/src/utf8.rs:367:47-367:48)
  11: StorageDead(_89)
    SourceInfo(regex-syntax/src/utf8.rs:369:25-369:26)
  12: StorageDead(_88)
    SourceInfo(regex-syntax/src/utf8.rs:369:25-369:26)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/lib.rs:1:1-1:1)
      kind: goto -> bb62
  }
  preds [bb49]
  succs [bb62]

bb51
  0: StorageDead(_90)
    SourceInfo(regex-syntax/src/utf8.rs:365:45-365:46)
  1: _88 = const ()
    SourceInfo(regex-syntax/src/utf8.rs:369:26-369:26)
  2: StorageDead(_89)
    SourceInfo(regex-syntax/src/utf8.rs:369:25-369:26)
  3: StorageDead(_88)
    SourceInfo(regex-syntax/src/utf8.rs:369:25-369:26)
  4: StorageLive(_104)
    SourceInfo(regex-syntax/src/utf8.rs:370:28-370:44)
  5: StorageLive(_105)
    SourceInfo(regex-syntax/src/utf8.rs:370:28-370:39)
  6: StorageLive(_106)
    SourceInfo(regex-syntax/src/utf8.rs:370:29-370:34)
  7: _106 = (_7.1: u32)
    SourceInfo(regex-syntax/src/utf8.rs:370:29-370:34)
  8: StorageLive(_107)
    SourceInfo(regex-syntax/src/utf8.rs:370:37-370:38)
  9: _107 = _72
    SourceInfo(regex-syntax/src/utf8.rs:370:37-370:38)
  10: _105 = BitAnd(move _106, move _107)
    SourceInfo(regex-syntax/src/utf8.rs:370:28-370:39)
  11: StorageDead(_107)
    SourceInfo(regex-syntax/src/utf8.rs:370:38-370:39)
  12: StorageDead(_106)
    SourceInfo(regex-syntax/src/utf8.rs:370:38-370:39)
  13: StorageLive(_108)
    SourceInfo(regex-syntax/src/utf8.rs:370:43-370:44)
  14: _108 = _72
    SourceInfo(regex-syntax/src/utf8.rs:370:43-370:44)
  15: _104 = Ne(move _105, move _108)
    SourceInfo(regex-syntax/src/utf8.rs:370:28-370:44)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:370:28-370:44)
      kind: switchInt(move _104) -> [0: bb53, otherwise: bb52]
  }
  preds [bb47]
  succs [bb52, bb53]

bb52
  0: StorageDead(_108)
    SourceInfo(regex-syntax/src/utf8.rs:370:43-370:44)
  1: StorageDead(_105)
    SourceInfo(regex-syntax/src/utf8.rs:370:43-370:44)
  2: StorageLive(_110)
    SourceInfo(regex-syntax/src/utf8.rs:371:29-371:57)
  3: StorageLive(_111)
    SourceInfo(regex-syntax/src/utf8.rs:371:29-371:33)
  4: _111 = &mut (*_1)
    SourceInfo(regex-syntax/src/utf8.rs:371:29-371:33)
  5: StorageLive(_112)
    SourceInfo(regex-syntax/src/utf8.rs:371:39-371:49)
  6: StorageLive(_113)
    SourceInfo(regex-syntax/src/utf8.rs:371:39-371:44)
  7: _113 = (_7.1: u32)
    SourceInfo(regex-syntax/src/utf8.rs:371:39-371:44)
  8: StorageLive(_114)
    SourceInfo(regex-syntax/src/utf8.rs:371:47-371:49)
  9: StorageLive(_115)
    SourceInfo(regex-syntax/src/utf8.rs:371:48-371:49)
  10: _115 = _72
    SourceInfo(regex-syntax/src/utf8.rs:371:48-371:49)
  11: _114 = Not(move _115)
    SourceInfo(regex-syntax/src/utf8.rs:371:47-371:49)
  12: StorageDead(_115)
    SourceInfo(regex-syntax/src/utf8.rs:371:48-371:49)
  13: _112 = BitAnd(move _113, move _114)
    SourceInfo(regex-syntax/src/utf8.rs:371:39-371:49)
  14: StorageDead(_114)
    SourceInfo(regex-syntax/src/utf8.rs:371:48-371:49)
  15: StorageDead(_113)
    SourceInfo(regex-syntax/src/utf8.rs:371:48-371:49)
  16: StorageLive(_116)
    SourceInfo(regex-syntax/src/utf8.rs:371:51-371:56)
  17: _116 = (_7.1: u32)
    SourceInfo(regex-syntax/src/utf8.rs:371:51-371:56)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:371:29-371:57)
      kind: _110 = utf8::Utf8Sequences::push(move _111, move _112, move _116) -> [return: bb54, unwind: bb66]
  }
  preds [bb51]
  succs [bb54, bb66]

bb53
  0: StorageDead(_108)
    SourceInfo(regex-syntax/src/utf8.rs:370:43-370:44)
  1: StorageDead(_105)
    SourceInfo(regex-syntax/src/utf8.rs:370:43-370:44)
  2: _65 = const ()
    SourceInfo(regex-syntax/src/utf8.rs:374:26-374:26)
  3: StorageDead(_104)
    SourceInfo(regex-syntax/src/utf8.rs:374:25-374:26)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:364:21-375:22)
      kind: goto -> bb57
  }
  preds [bb51]
  succs [bb57]

bb54
  0: StorageDead(_116)
    SourceInfo(regex-syntax/src/utf8.rs:371:56-371:57)
  1: StorageDead(_112)
    SourceInfo(regex-syntax/src/utf8.rs:371:56-371:57)
  2: StorageDead(_111)
    SourceInfo(regex-syntax/src/utf8.rs:371:56-371:57)
  3: StorageDead(_110)
    SourceInfo(regex-syntax/src/utf8.rs:371:57-371:58)
  4: StorageLive(_117)
    SourceInfo(regex-syntax/src/utf8.rs:372:37-372:49)
  5: StorageLive(_118)
    SourceInfo(regex-syntax/src/utf8.rs:372:38-372:43)
  6: _118 = (_7.1: u32)
    SourceInfo(regex-syntax/src/utf8.rs:372:38-372:43)
  7: StorageLive(_119)
    SourceInfo(regex-syntax/src/utf8.rs:372:46-372:48)
  8: StorageLive(_120)
    SourceInfo(regex-syntax/src/utf8.rs:372:47-372:48)
  9: _120 = _72
    SourceInfo(regex-syntax/src/utf8.rs:372:47-372:48)
  10: _119 = Not(move _120)
    SourceInfo(regex-syntax/src/utf8.rs:372:46-372:48)
  11: StorageDead(_120)
    SourceInfo(regex-syntax/src/utf8.rs:372:47-372:48)
  12: _117 = BitAnd(move _118, move _119)
    SourceInfo(regex-syntax/src/utf8.rs:372:37-372:49)
  13: StorageDead(_119)
    SourceInfo(regex-syntax/src/utf8.rs:372:48-372:49)
  14: StorageDead(_118)
    SourceInfo(regex-syntax/src/utf8.rs:372:48-372:49)
  15: _121 = SubWithOverflow(_117, const 1_u32)
    SourceInfo(regex-syntax/src/utf8.rs:372:37-372:53)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:372:37-372:53)
      kind: assert(!move (_121.1: bool), "attempt to compute `{} - {}`, which would overflow", move _117, const 1_u32) -> [success: bb55, unwind: bb66]
  }
  preds [bb52]
  succs [bb55, bb66]

bb55
  0: (_7.1: u32) = move (_121.0: u32)
    SourceInfo(regex-syntax/src/utf8.rs:372:29-372:53)
  1: StorageDead(_117)
    SourceInfo(regex-syntax/src/utf8.rs:372:52-372:53)
  2: StorageDead(_104)
    SourceInfo(regex-syntax/src/utf8.rs:374:25-374:26)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/lib.rs:1:1-1:1)
      kind: goto -> bb62
  }
  preds [bb54]
  succs [bb62]

bb56
  0: StorageDead(_84)
    SourceInfo(regex-syntax/src/utf8.rs:364:53-364:54)
  1: StorageDead(_80)
    SourceInfo(regex-syntax/src/utf8.rs:364:53-364:54)
  2: _65 = const ()
    SourceInfo(regex-syntax/src/utf8.rs:375:22-375:22)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:364:21-375:22)
      kind: goto -> bb57
  }
  preds [bb46]
  succs [bb57]

bb57
  0: StorageDead(_79)
    SourceInfo(regex-syntax/src/utf8.rs:375:21-375:22)
  1: StorageDead(_72)
    SourceInfo(regex-syntax/src/utf8.rs:376:17-376:18)
  2: StorageDead(_71)
    SourceInfo(regex-syntax/src/utf8.rs:376:17-376:18)
  3: StorageDead(_68)
    SourceInfo(regex-syntax/src/utf8.rs:376:17-376:18)
  4: StorageDead(_66)
    SourceInfo(regex-syntax/src/utf8.rs:376:17-376:18)
  5: StorageDead(_65)
    SourceInfo(regex-syntax/src/utf8.rs:376:17-376:18)
  6: _3 = const ()
    SourceInfo(regex-syntax/src/utf8.rs:362:17-376:18)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:362:17-376:18)
      kind: goto -> bb37
  }
  preds [bb53, bb56]
  succs [bb37]

bb58
  0: StorageDead(_129)
    SourceInfo(regex-syntax/src/utf8.rs:379:54-379:55)
  1: StorageDead(_126)
    SourceInfo(regex-syntax/src/utf8.rs:379:54-379:55)
  2: StorageDead(_125)
    SourceInfo(regex-syntax/src/utf8.rs:379:54-379:55)
  3: FakeRead(ForLet(None), _124)
    SourceInfo(regex-syntax/src/utf8.rs:379:21-379:22)
  4: StorageDead(_131)
    SourceInfo(regex-syntax/src/utf8.rs:379:55-379:56)
  5: StorageDead(_128)
    SourceInfo(regex-syntax/src/utf8.rs:379:55-379:56)
  6: StorageLive(_132)
    SourceInfo(regex-syntax/src/utf8.rs:380:29-383:18)
  7: StorageLive(_133)
    SourceInfo(regex-syntax/src/utf8.rs:381:21-381:33)
  8: StorageLive(_134)
    SourceInfo(regex-syntax/src/utf8.rs:381:21-381:33)
  9: StorageLive(_135)
    SourceInfo(regex-syntax/src/utf8.rs:381:27-381:33)
  10: StorageLive(_136)
    SourceInfo(regex-syntax/src/utf8.rs:381:22-381:27)
  11: _136 = &_122
    SourceInfo(regex-syntax/src/utf8.rs:381:22-381:27)
  12: StorageLive(_137)
    SourceInfo(regex-syntax/src/utf8.rs:381:28-381:32)
  13: StorageLive(_138)
    SourceInfo(regex-syntax/src/utf8.rs:381:31-381:32)
  14: _138 = _124
    SourceInfo(regex-syntax/src/utf8.rs:381:31-381:32)
  15: _137 = core::ops::Range::<usize> { start: const 0_usize, end: move _138 }
    SourceInfo(regex-syntax/src/utf8.rs:381:28-381:32)
  16: StorageDead(_138)
    SourceInfo(regex-syntax/src/utf8.rs:381:31-381:32)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:381:27-381:33)
      kind: _135 = <[u8; 4] as core::ops::Index<core::ops::Range<usize>>>::index(move _136, move _137) -> [return: bb59, unwind: bb66]
  }
  preds [bb43]
  succs [bb59, bb66]

bb59
  0: StorageDead(_137)
    SourceInfo(regex-syntax/src/utf8.rs:381:32-381:33)
  1: StorageDead(_136)
    SourceInfo(regex-syntax/src/utf8.rs:381:32-381:33)
  2: _134 = &(*_135)
    SourceInfo(regex-syntax/src/utf8.rs:381:21-381:33)
  3: _133 = &(*_134)
    SourceInfo(regex-syntax/src/utf8.rs:381:21-381:33)
  4: StorageLive(_139)
    SourceInfo(regex-syntax/src/utf8.rs:382:21-382:31)
  5: StorageLive(_140)
    SourceInfo(regex-syntax/src/utf8.rs:382:21-382:31)
  6: StorageLive(_141)
    SourceInfo(regex-syntax/src/utf8.rs:382:25-382:31)
  7: StorageLive(_142)
    SourceInfo(regex-syntax/src/utf8.rs:382:22-382:25)
  8: _142 = &_123
    SourceInfo(regex-syntax/src/utf8.rs:382:22-382:25)
  9: StorageLive(_143)
    SourceInfo(regex-syntax/src/utf8.rs:382:26-382:30)
  10: StorageLive(_144)
    SourceInfo(regex-syntax/src/utf8.rs:382:29-382:30)
  11: _144 = _124
    SourceInfo(regex-syntax/src/utf8.rs:382:29-382:30)
  12: _143 = core::ops::Range::<usize> { start: const 0_usize, end: move _144 }
    SourceInfo(regex-syntax/src/utf8.rs:382:26-382:30)
  13: StorageDead(_144)
    SourceInfo(regex-syntax/src/utf8.rs:382:29-382:30)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:382:25-382:31)
      kind: _141 = <[u8; 4] as core::ops::Index<core::ops::Range<usize>>>::index(move _142, move _143) -> [return: bb60, unwind: bb66]
  }
  preds [bb58]
  succs [bb60, bb66]

bb60
  0: StorageDead(_143)
    SourceInfo(regex-syntax/src/utf8.rs:382:30-382:31)
  1: StorageDead(_142)
    SourceInfo(regex-syntax/src/utf8.rs:382:30-382:31)
  2: _140 = &(*_141)
    SourceInfo(regex-syntax/src/utf8.rs:382:21-382:31)
  3: _139 = &(*_140)
    SourceInfo(regex-syntax/src/utf8.rs:382:21-382:31)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:380:29-383:18)
      kind: _132 = utf8::Utf8Sequence::from_encoded_range(move _133, move _139) -> [return: bb61, unwind: bb66]
  }
  preds [bb59]
  succs [bb61, bb66]

bb61
  0: StorageDead(_139)
    SourceInfo(regex-syntax/src/utf8.rs:383:17-383:18)
  1: StorageDead(_133)
    SourceInfo(regex-syntax/src/utf8.rs:383:17-383:18)
  2: _0 = core::option::Option::<utf8::Utf8Sequence>::Some(move _132)
    SourceInfo(regex-syntax/src/utf8.rs:380:24-383:19)
  3: StorageDead(_132)
    SourceInfo(regex-syntax/src/utf8.rs:383:18-383:19)
  4: StorageDead(_141)
    SourceInfo(regex-syntax/src/utf8.rs:383:19-383:20)
  5: StorageDead(_140)
    SourceInfo(regex-syntax/src/utf8.rs:383:19-383:20)
  6: StorageDead(_135)
    SourceInfo(regex-syntax/src/utf8.rs:383:19-383:20)
  7: StorageDead(_134)
    SourceInfo(regex-syntax/src/utf8.rs:383:19-383:20)
  8: StorageDead(_124)
    SourceInfo(regex-syntax/src/utf8.rs:384:13-384:14)
  9: StorageDead(_123)
    SourceInfo(regex-syntax/src/utf8.rs:384:13-384:14)
  10: StorageDead(_122)
    SourceInfo(regex-syntax/src/utf8.rs:384:13-384:14)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/lib.rs:1:1-1:1)
      kind: goto -> bb64
  }
  preds [bb60]
  succs [bb64]

bb62
  0: StorageDead(_79)
    SourceInfo(regex-syntax/src/utf8.rs:375:21-375:22)
  1: StorageDead(_72)
    SourceInfo(regex-syntax/src/utf8.rs:376:17-376:18)
  2: StorageDead(_71)
    SourceInfo(regex-syntax/src/utf8.rs:376:17-376:18)
  3: StorageDead(_68)
    SourceInfo(regex-syntax/src/utf8.rs:376:17-376:18)
  4: StorageDead(_66)
    SourceInfo(regex-syntax/src/utf8.rs:376:17-376:18)
  5: StorageDead(_65)
    SourceInfo(regex-syntax/src/utf8.rs:376:17-376:18)
  6: StorageDead(_64)
    SourceInfo(regex-syntax/src/utf8.rs:376:17-376:18)
  7: StorageDead(_62)
    SourceInfo(regex-syntax/src/utf8.rs:376:17-376:18)
  8: StorageDead(_61)
    SourceInfo(regex-syntax/src/utf8.rs:376:17-376:18)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/lib.rs:1:1-1:1)
      kind: goto -> bb6
  }
  preds [bb50, bb55]
  succs [bb6]

bb63
  0: StorageLive(_146)
    SourceInfo(regex-syntax/src/utf8.rs:340:9-385:10)
  1: _2 = const ()
    SourceInfo(regex-syntax/src/utf8.rs:340:9-385:10)
  2: StorageDead(_146)
    SourceInfo(regex-syntax/src/utf8.rs:385:9-385:10)
  3: StorageDead(_4)
    SourceInfo(regex-syntax/src/utf8.rs:385:9-385:10)
  4: StorageDead(_2)
    SourceInfo(regex-syntax/src/utf8.rs:385:9-385:10)
  5: _0 = core::option::Option::<utf8::Utf8Sequence>::None
    SourceInfo(regex-syntax/src/utf8.rs:386:9-386:13)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:387:6-387:6)
      kind: goto -> bb65
  }
  preds [bb3, bb4]
  succs [bb65]

bb64
  0: StorageDead(_8)
    SourceInfo(regex-syntax/src/utf8.rs:384:13-384:14)
  1: StorageDead(_7)
    SourceInfo(regex-syntax/src/utf8.rs:385:9-385:10)
  2: StorageDead(_4)
    SourceInfo(regex-syntax/src/utf8.rs:385:9-385:10)
  3: StorageDead(_2)
    SourceInfo(regex-syntax/src/utf8.rs:385:9-385:10)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:387:6-387:6)
      kind: goto -> bb65
  }
  preds [bb34, bb61]
  succs [bb65]

bb65
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:387:6-387:6)
      kind: return
  }
  preds [bb63, bb64]
  succs []

bb66
  Terminator {
      source_info: SourceInfo(regex-syntax/src/utf8.rs:339:5-387:6)
      kind: resume
  }
  preds [bb1, bb2, bb6, bb7, bb10, bb12, bb14, bb17, bb18, bb22, bb23, bb26, bb27, bb35, bb37, bb38, bb42, bb43, bb44, bb45, bb48, bb49, bb52, bb54, bb58, bb59, bb60]
  succs []

