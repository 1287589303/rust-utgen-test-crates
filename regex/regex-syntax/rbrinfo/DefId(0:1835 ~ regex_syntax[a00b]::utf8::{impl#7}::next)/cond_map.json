{
  "regex-syntax/src/utf8.rs:366:39:366:56": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(r.start | m) + 1",
          "lhs": "(r.start | m)",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/utf8.rs:370:28:370:39": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(r.end & m)",
          "lhs": "r.end",
          "rhs": "m",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/utf8.rs:364:24:364:38": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(r.start & !m)",
          "lhs": "r.start",
          "rhs": "!m",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/utf8.rs:364:24:364:54": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "(r.start & !m) != (r.end & !m)",
          "lhs": "(r.start & !m)",
          "rhs": "(r.end & !m)",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/utf8.rs:363:29:363:47": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(1 << (6 * i)) - 1",
          "lhs": "(1 << (6 * i))",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/utf8.rs:354:35:354:42": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "max + 1",
          "lhs": "max",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/utf8.rs:372:37:372:53": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(r.end & !m) - 1",
          "lhs": "(r.end & !m)",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/utf8.rs:365:28:365:41": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(r.start & m)",
          "lhs": "r.start",
          "rhs": "m",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/utf8.rs:371:39:371:49": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "r.end & !m",
          "lhs": "r.end",
          "rhs": "!m",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/utf8.rs:342:20:342:50": [
    {
      "Bool": {
        "Other": "let Some((r1, r2)) = r.split()"
      }
    }
  ],
  "regex-syntax/src/utf8.rs:348:21:348:33": [
    {
      "Bool": {
        "Other": "r.is_valid()"
      }
    }
  ],
  "regex-syntax/src/utf8.rs:372:37:372:49": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(r.end & !m)",
          "lhs": "r.end",
          "rhs": "!m",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/utf8.rs:351:26:351:43": [
    {
      "For": {
        "iter_var": "i",
        "iter_range": "1..MAX_UTF8_BYTES"
      }
    }
  ],
  "regex-syntax/src/utf8.rs:367:37:367:48": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "r.start | m",
          "lhs": "r.start",
          "rhs": "m",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/utf8.rs:340:21:340:61": [
    {
      "Bool": {
        "Other": "let Some(mut r) = self.range_stack.pop()"
      }
    }
  ],
  "regex-syntax/src/utf8.rs:364:42:364:54": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(r.end & !m)",
          "lhs": "r.end",
          "rhs": "!m",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/utf8.rs:362:26:362:43": [
    {
      "For": {
        "iter_var": "i",
        "iter_range": "1..MAX_UTF8_BYTES"
      }
    }
  ],
  "regex-syntax/src/utf8.rs:363:29:363:43": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(1 << (6 * i))",
          "lhs": "1",
          "rhs": "(6 * i)",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/utf8.rs:353:24:353:38": [
    {
      "Bool": {
        "Binary": {
          "kind": "Le",
          "expr": "r.start <= max",
          "lhs": "r.start",
          "rhs": "max",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/utf8.rs:365:28:365:46": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "(r.start & m) != 0",
          "lhs": "(r.start & m)",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/utf8.rs:370:28:370:44": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "(r.end & m) != m",
          "lhs": "(r.end & m)",
          "rhs": "m",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/utf8.rs:353:42:353:53": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "max < r.end",
          "lhs": "max",
          "rhs": "r.end",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/utf8.rs:366:39:366:52": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(r.start | m)",
          "lhs": "r.start",
          "rhs": "m",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/utf8.rs:359:20:359:56": [
    {
      "Bool": {
        "Other": "let Some(ascii_range) = r.as_ascii()"
      }
    }
  ],
  "regex-syntax/src/utf8.rs:363:35:363:42": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(6 * i)",
          "lhs": "6",
          "rhs": "i",
          "cmp_with_int": true
        }
      }
    }
  ]
}