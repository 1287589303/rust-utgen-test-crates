bb0
  0: StorageLive(_3)
    SourceInfo(regex-syntax/src/hir/mod.rs:1553:9-1557:10)
  1: StorageLive(_4)
    SourceInfo(regex-syntax/src/hir/mod.rs:1553:13-1553:73)
  2: StorageLive(_5)
    SourceInfo(regex-syntax/src/hir/mod.rs:1553:13-1553:45)
  3: StorageLive(_6)
    SourceInfo(regex-syntax/src/hir/mod.rs:1553:13-1553:45)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1553:13-1553:45)
      kind: _6 = hir::ClassBytesRange::new(const 97_u8, const 122_u8) -> [return: bb1, unwind: bb23]
  }
  preds []
  succs [bb1, bb23]

bb1
  0: _5 = &_6
    SourceInfo(regex-syntax/src/hir/mod.rs:1553:13-1553:45)
  1: StorageLive(_7)
    SourceInfo(regex-syntax/src/hir/mod.rs:1553:68-1553:72)
  2: _7 = &(*_1)
    SourceInfo(regex-syntax/src/hir/mod.rs:1553:68-1553:72)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1553:13-1553:73)
      kind: _4 = <hir::ClassBytesRange as hir::interval::Interval>::is_intersection_empty(move _5, move _7) -> [return: bb2, unwind: bb23]
  }
  preds [bb0]
  succs [bb2, bb23]

bb2
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1553:13-1553:73)
      kind: switchInt(move _4) -> [0: bb4, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: StorageDead(_7)
    SourceInfo(regex-syntax/src/hir/mod.rs:1553:72-1553:73)
  1: StorageDead(_5)
    SourceInfo(regex-syntax/src/hir/mod.rs:1553:72-1553:73)
  2: StorageDead(_6)
    SourceInfo(regex-syntax/src/hir/mod.rs:1553:72-1553:73)
  3: _3 = const ()
    SourceInfo(regex-syntax/src/hir/mod.rs:1557:10-1557:10)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1553:9-1557:10)
      kind: goto -> bb11
  }
  preds [bb2]
  succs [bb11]

bb4
  0: StorageDead(_7)
    SourceInfo(regex-syntax/src/hir/mod.rs:1553:72-1553:73)
  1: StorageDead(_5)
    SourceInfo(regex-syntax/src/hir/mod.rs:1553:72-1553:73)
  2: StorageDead(_6)
    SourceInfo(regex-syntax/src/hir/mod.rs:1553:72-1553:73)
  3: StorageLive(_8)
    SourceInfo(regex-syntax/src/hir/mod.rs:1554:17-1554:22)
  4: StorageLive(_9)
    SourceInfo(regex-syntax/src/hir/mod.rs:1554:34-1554:44)
  5: _9 = ((*_1).0: u8)
    SourceInfo(regex-syntax/src/hir/mod.rs:1554:34-1554:44)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1554:25-1554:51)
      kind: _8 = core::cmp::max::<u8>(move _9, const 97_u8) -> [return: bb5, unwind: bb23]
  }
  preds [bb2]
  succs [bb5, bb23]

bb5
  0: StorageDead(_9)
    SourceInfo(regex-syntax/src/hir/mod.rs:1554:50-1554:51)
  1: FakeRead(ForLet(None), _8)
    SourceInfo(regex-syntax/src/hir/mod.rs:1554:17-1554:22)
  2: StorageLive(_10)
    SourceInfo(regex-syntax/src/hir/mod.rs:1555:17-1555:22)
  3: StorageLive(_11)
    SourceInfo(regex-syntax/src/hir/mod.rs:1555:34-1555:42)
  4: _11 = ((*_1).1: u8)
    SourceInfo(regex-syntax/src/hir/mod.rs:1555:34-1555:42)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1555:25-1555:49)
      kind: _10 = core::cmp::min::<u8>(move _11, const 122_u8) -> [return: bb6, unwind: bb23]
  }
  preds [bb4]
  succs [bb6, bb23]

bb6
  0: StorageDead(_11)
    SourceInfo(regex-syntax/src/hir/mod.rs:1555:48-1555:49)
  1: FakeRead(ForLet(None), _10)
    SourceInfo(regex-syntax/src/hir/mod.rs:1555:17-1555:22)
  2: StorageLive(_12)
    SourceInfo(regex-syntax/src/hir/mod.rs:1556:13-1556:70)
  3: StorageLive(_13)
    SourceInfo(regex-syntax/src/hir/mod.rs:1556:13-1556:19)
  4: _13 = &mut (*_2)
    SourceInfo(regex-syntax/src/hir/mod.rs:1556:13-1556:19)
  5: StorageLive(_14)
    SourceInfo(regex-syntax/src/hir/mod.rs:1556:25-1556:69)
  6: StorageLive(_15)
    SourceInfo(regex-syntax/src/hir/mod.rs:1556:46-1556:56)
  7: StorageLive(_16)
    SourceInfo(regex-syntax/src/hir/mod.rs:1556:46-1556:51)
  8: _16 = _8
    SourceInfo(regex-syntax/src/hir/mod.rs:1556:46-1556:51)
  9: _17 = SubWithOverflow(_16, const 32_u8)
    SourceInfo(regex-syntax/src/hir/mod.rs:1556:46-1556:56)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1556:46-1556:56)
      kind: assert(!move (_17.1: bool), "attempt to compute `{} - {}`, which would overflow", move _16, const 32_u8) -> [success: bb7, unwind: bb23]
  }
  preds [bb5]
  succs [bb7, bb23]

bb7
  0: _15 = move (_17.0: u8)
    SourceInfo(regex-syntax/src/hir/mod.rs:1556:46-1556:56)
  1: StorageDead(_16)
    SourceInfo(regex-syntax/src/hir/mod.rs:1556:55-1556:56)
  2: StorageLive(_18)
    SourceInfo(regex-syntax/src/hir/mod.rs:1556:58-1556:68)
  3: StorageLive(_19)
    SourceInfo(regex-syntax/src/hir/mod.rs:1556:58-1556:63)
  4: _19 = _10
    SourceInfo(regex-syntax/src/hir/mod.rs:1556:58-1556:63)
  5: _20 = SubWithOverflow(_19, const 32_u8)
    SourceInfo(regex-syntax/src/hir/mod.rs:1556:58-1556:68)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1556:58-1556:68)
      kind: assert(!move (_20.1: bool), "attempt to compute `{} - {}`, which would overflow", move _19, const 32_u8) -> [success: bb8, unwind: bb23]
  }
  preds [bb6]
  succs [bb8, bb23]

bb8
  0: _18 = move (_20.0: u8)
    SourceInfo(regex-syntax/src/hir/mod.rs:1556:58-1556:68)
  1: StorageDead(_19)
    SourceInfo(regex-syntax/src/hir/mod.rs:1556:67-1556:68)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1556:25-1556:69)
      kind: _14 = hir::ClassBytesRange::new(move _15, move _18) -> [return: bb9, unwind: bb23]
  }
  preds [bb7]
  succs [bb9, bb23]

bb9
  0: StorageDead(_18)
    SourceInfo(regex-syntax/src/hir/mod.rs:1556:68-1556:69)
  1: StorageDead(_15)
    SourceInfo(regex-syntax/src/hir/mod.rs:1556:68-1556:69)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1556:13-1556:70)
      kind: _12 = std::vec::Vec::<hir::ClassBytesRange>::push(move _13, move _14) -> [return: bb10, unwind: bb23]
  }
  preds [bb8]
  succs [bb10, bb23]

bb10
  0: StorageDead(_14)
    SourceInfo(regex-syntax/src/hir/mod.rs:1556:69-1556:70)
  1: StorageDead(_13)
    SourceInfo(regex-syntax/src/hir/mod.rs:1556:69-1556:70)
  2: StorageDead(_12)
    SourceInfo(regex-syntax/src/hir/mod.rs:1556:70-1556:71)
  3: _3 = const ()
    SourceInfo(regex-syntax/src/hir/mod.rs:1553:74-1557:10)
  4: StorageDead(_10)
    SourceInfo(regex-syntax/src/hir/mod.rs:1557:9-1557:10)
  5: StorageDead(_8)
    SourceInfo(regex-syntax/src/hir/mod.rs:1557:9-1557:10)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1553:9-1557:10)
      kind: goto -> bb11
  }
  preds [bb9]
  succs [bb11]

bb11
  0: StorageDead(_4)
    SourceInfo(regex-syntax/src/hir/mod.rs:1557:9-1557:10)
  1: StorageDead(_3)
    SourceInfo(regex-syntax/src/hir/mod.rs:1557:9-1557:10)
  2: StorageLive(_21)
    SourceInfo(regex-syntax/src/hir/mod.rs:1558:9-1562:10)
  3: StorageLive(_22)
    SourceInfo(regex-syntax/src/hir/mod.rs:1558:13-1558:73)
  4: StorageLive(_23)
    SourceInfo(regex-syntax/src/hir/mod.rs:1558:13-1558:45)
  5: StorageLive(_24)
    SourceInfo(regex-syntax/src/hir/mod.rs:1558:13-1558:45)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1558:13-1558:45)
      kind: _24 = hir::ClassBytesRange::new(const 65_u8, const 90_u8) -> [return: bb12, unwind: bb23]
  }
  preds [bb3, bb10]
  succs [bb12, bb23]

bb12
  0: _23 = &_24
    SourceInfo(regex-syntax/src/hir/mod.rs:1558:13-1558:45)
  1: StorageLive(_25)
    SourceInfo(regex-syntax/src/hir/mod.rs:1558:68-1558:72)
  2: _25 = &(*_1)
    SourceInfo(regex-syntax/src/hir/mod.rs:1558:68-1558:72)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1558:13-1558:73)
      kind: _22 = <hir::ClassBytesRange as hir::interval::Interval>::is_intersection_empty(move _23, move _25) -> [return: bb13, unwind: bb23]
  }
  preds [bb11]
  succs [bb13, bb23]

bb13
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1558:13-1558:73)
      kind: switchInt(move _22) -> [0: bb15, otherwise: bb14]
  }
  preds [bb12]
  succs [bb14, bb15]

bb14
  0: StorageDead(_25)
    SourceInfo(regex-syntax/src/hir/mod.rs:1558:72-1558:73)
  1: StorageDead(_23)
    SourceInfo(regex-syntax/src/hir/mod.rs:1558:72-1558:73)
  2: StorageDead(_24)
    SourceInfo(regex-syntax/src/hir/mod.rs:1558:72-1558:73)
  3: _21 = const ()
    SourceInfo(regex-syntax/src/hir/mod.rs:1562:10-1562:10)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1558:9-1562:10)
      kind: goto -> bb22
  }
  preds [bb13]
  succs [bb22]

bb15
  0: StorageDead(_25)
    SourceInfo(regex-syntax/src/hir/mod.rs:1558:72-1558:73)
  1: StorageDead(_23)
    SourceInfo(regex-syntax/src/hir/mod.rs:1558:72-1558:73)
  2: StorageDead(_24)
    SourceInfo(regex-syntax/src/hir/mod.rs:1558:72-1558:73)
  3: StorageLive(_26)
    SourceInfo(regex-syntax/src/hir/mod.rs:1559:17-1559:22)
  4: StorageLive(_27)
    SourceInfo(regex-syntax/src/hir/mod.rs:1559:34-1559:44)
  5: _27 = ((*_1).0: u8)
    SourceInfo(regex-syntax/src/hir/mod.rs:1559:34-1559:44)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1559:25-1559:51)
      kind: _26 = core::cmp::max::<u8>(move _27, const 65_u8) -> [return: bb16, unwind: bb23]
  }
  preds [bb13]
  succs [bb16, bb23]

bb16
  0: StorageDead(_27)
    SourceInfo(regex-syntax/src/hir/mod.rs:1559:50-1559:51)
  1: FakeRead(ForLet(None), _26)
    SourceInfo(regex-syntax/src/hir/mod.rs:1559:17-1559:22)
  2: StorageLive(_28)
    SourceInfo(regex-syntax/src/hir/mod.rs:1560:17-1560:22)
  3: StorageLive(_29)
    SourceInfo(regex-syntax/src/hir/mod.rs:1560:34-1560:42)
  4: _29 = ((*_1).1: u8)
    SourceInfo(regex-syntax/src/hir/mod.rs:1560:34-1560:42)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1560:25-1560:49)
      kind: _28 = core::cmp::min::<u8>(move _29, const 90_u8) -> [return: bb17, unwind: bb23]
  }
  preds [bb15]
  succs [bb17, bb23]

bb17
  0: StorageDead(_29)
    SourceInfo(regex-syntax/src/hir/mod.rs:1560:48-1560:49)
  1: FakeRead(ForLet(None), _28)
    SourceInfo(regex-syntax/src/hir/mod.rs:1560:17-1560:22)
  2: StorageLive(_30)
    SourceInfo(regex-syntax/src/hir/mod.rs:1561:13-1561:70)
  3: StorageLive(_31)
    SourceInfo(regex-syntax/src/hir/mod.rs:1561:13-1561:19)
  4: _31 = &mut (*_2)
    SourceInfo(regex-syntax/src/hir/mod.rs:1561:13-1561:19)
  5: StorageLive(_32)
    SourceInfo(regex-syntax/src/hir/mod.rs:1561:25-1561:69)
  6: StorageLive(_33)
    SourceInfo(regex-syntax/src/hir/mod.rs:1561:46-1561:56)
  7: StorageLive(_34)
    SourceInfo(regex-syntax/src/hir/mod.rs:1561:46-1561:51)
  8: _34 = _26
    SourceInfo(regex-syntax/src/hir/mod.rs:1561:46-1561:51)
  9: _35 = AddWithOverflow(_34, const 32_u8)
    SourceInfo(regex-syntax/src/hir/mod.rs:1561:46-1561:56)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1561:46-1561:56)
      kind: assert(!move (_35.1: bool), "attempt to compute `{} + {}`, which would overflow", move _34, const 32_u8) -> [success: bb18, unwind: bb23]
  }
  preds [bb16]
  succs [bb18, bb23]

bb18
  0: _33 = move (_35.0: u8)
    SourceInfo(regex-syntax/src/hir/mod.rs:1561:46-1561:56)
  1: StorageDead(_34)
    SourceInfo(regex-syntax/src/hir/mod.rs:1561:55-1561:56)
  2: StorageLive(_36)
    SourceInfo(regex-syntax/src/hir/mod.rs:1561:58-1561:68)
  3: StorageLive(_37)
    SourceInfo(regex-syntax/src/hir/mod.rs:1561:58-1561:63)
  4: _37 = _28
    SourceInfo(regex-syntax/src/hir/mod.rs:1561:58-1561:63)
  5: _38 = AddWithOverflow(_37, const 32_u8)
    SourceInfo(regex-syntax/src/hir/mod.rs:1561:58-1561:68)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1561:58-1561:68)
      kind: assert(!move (_38.1: bool), "attempt to compute `{} + {}`, which would overflow", move _37, const 32_u8) -> [success: bb19, unwind: bb23]
  }
  preds [bb17]
  succs [bb19, bb23]

bb19
  0: _36 = move (_38.0: u8)
    SourceInfo(regex-syntax/src/hir/mod.rs:1561:58-1561:68)
  1: StorageDead(_37)
    SourceInfo(regex-syntax/src/hir/mod.rs:1561:67-1561:68)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1561:25-1561:69)
      kind: _32 = hir::ClassBytesRange::new(move _33, move _36) -> [return: bb20, unwind: bb23]
  }
  preds [bb18]
  succs [bb20, bb23]

bb20
  0: StorageDead(_36)
    SourceInfo(regex-syntax/src/hir/mod.rs:1561:68-1561:69)
  1: StorageDead(_33)
    SourceInfo(regex-syntax/src/hir/mod.rs:1561:68-1561:69)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1561:13-1561:70)
      kind: _30 = std::vec::Vec::<hir::ClassBytesRange>::push(move _31, move _32) -> [return: bb21, unwind: bb23]
  }
  preds [bb19]
  succs [bb21, bb23]

bb21
  0: StorageDead(_32)
    SourceInfo(regex-syntax/src/hir/mod.rs:1561:69-1561:70)
  1: StorageDead(_31)
    SourceInfo(regex-syntax/src/hir/mod.rs:1561:69-1561:70)
  2: StorageDead(_30)
    SourceInfo(regex-syntax/src/hir/mod.rs:1561:70-1561:71)
  3: _21 = const ()
    SourceInfo(regex-syntax/src/hir/mod.rs:1558:74-1562:10)
  4: StorageDead(_28)
    SourceInfo(regex-syntax/src/hir/mod.rs:1562:9-1562:10)
  5: StorageDead(_26)
    SourceInfo(regex-syntax/src/hir/mod.rs:1562:9-1562:10)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1558:9-1562:10)
      kind: goto -> bb22
  }
  preds [bb20]
  succs [bb22]

bb22
  0: StorageDead(_22)
    SourceInfo(regex-syntax/src/hir/mod.rs:1562:9-1562:10)
  1: StorageDead(_21)
    SourceInfo(regex-syntax/src/hir/mod.rs:1562:9-1562:10)
  2: StorageLive(_39)
    SourceInfo(regex-syntax/src/hir/mod.rs:1563:12-1563:14)
  3: _39 = ()
    SourceInfo(regex-syntax/src/hir/mod.rs:1563:12-1563:14)
  4: _0 = core::result::Result::<(), unicode::CaseFoldError>::Ok(move _39)
    SourceInfo(regex-syntax/src/hir/mod.rs:1563:9-1563:15)
  5: StorageDead(_39)
    SourceInfo(regex-syntax/src/hir/mod.rs:1563:14-1563:15)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1564:6-1564:6)
      kind: return
  }
  preds [bb14, bb21]
  succs []

bb23
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1549:5-1564:6)
      kind: resume
  }
  preds [bb0, bb1, bb4, bb5, bb6, bb7, bb8, bb9, bb11, bb12, bb15, bb16, bb17, bb18, bb19, bb20]
  succs []

