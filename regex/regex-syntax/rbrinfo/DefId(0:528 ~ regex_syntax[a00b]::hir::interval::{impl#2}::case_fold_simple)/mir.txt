bb0
  0: StorageLive(_2)
    SourceInfo(regex-syntax/src/hir/interval.rs:116:9-118:10)
  1: StorageLive(_3)
    SourceInfo(regex-syntax/src/hir/interval.rs:116:12-116:23)
  2: _3 = ((*_1).1: bool)
    SourceInfo(regex-syntax/src/hir/interval.rs:116:12-116:23)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:116:12-116:23)
      kind: switchInt(move _3) -> [0: bb2, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageLive(_5)
    SourceInfo(regex-syntax/src/hir/interval.rs:117:23-117:25)
  1: _5 = ()
    SourceInfo(regex-syntax/src/hir/interval.rs:117:23-117:25)
  2: _0 = core::result::Result::<(), unicode::CaseFoldError>::Ok(move _5)
    SourceInfo(regex-syntax/src/hir/interval.rs:117:20-117:26)
  3: StorageDead(_5)
    SourceInfo(regex-syntax/src/hir/interval.rs:117:25-117:26)
  4: StorageDead(_3)
    SourceInfo(regex-syntax/src/hir/interval.rs:118:9-118:10)
  5: StorageDead(_2)
    SourceInfo(regex-syntax/src/hir/interval.rs:118:9-118:10)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/lib.rs:1:1-1:1)
      kind: goto -> bb19
  }
  preds [bb0]
  succs [bb19]

bb2
  0: _2 = const ()
    SourceInfo(regex-syntax/src/hir/interval.rs:118:10-118:10)
  1: StorageDead(_3)
    SourceInfo(regex-syntax/src/hir/interval.rs:118:9-118:10)
  2: StorageDead(_2)
    SourceInfo(regex-syntax/src/hir/interval.rs:118:9-118:10)
  3: StorageLive(_6)
    SourceInfo(regex-syntax/src/hir/interval.rs:119:13-119:16)
  4: StorageLive(_7)
    SourceInfo(regex-syntax/src/hir/interval.rs:119:19-119:30)
  5: _7 = &((*_1).0: std::vec::Vec<I>)
    SourceInfo(regex-syntax/src/hir/interval.rs:119:19-119:30)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:119:19-119:36)
      kind: _6 = std::vec::Vec::<I>::len(move _7) -> [return: bb3, unwind: bb20]
  }
  preds [bb0]
  succs [bb3, bb20]

bb3
  0: StorageDead(_7)
    SourceInfo(regex-syntax/src/hir/interval.rs:119:35-119:36)
  1: FakeRead(ForLet(None), _6)
    SourceInfo(regex-syntax/src/hir/interval.rs:119:13-119:16)
  2: StorageLive(_8)
    SourceInfo(regex-syntax/src/hir/interval.rs:120:9-126:10)
  3: StorageLive(_9)
    SourceInfo(regex-syntax/src/hir/interval.rs:120:18-120:24)
  4: StorageLive(_10)
    SourceInfo(regex-syntax/src/hir/interval.rs:120:18-120:24)
  5: StorageLive(_11)
    SourceInfo(regex-syntax/src/hir/interval.rs:120:21-120:24)
  6: _11 = _6
    SourceInfo(regex-syntax/src/hir/interval.rs:120:21-120:24)
  7: _10 = core::ops::Range::<usize> { start: const 0_usize, end: move _11 }
    SourceInfo(regex-syntax/src/hir/interval.rs:120:18-120:24)
  8: StorageDead(_11)
    SourceInfo(regex-syntax/src/hir/interval.rs:120:23-120:24)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:120:18-120:24)
      kind: _9 = <core::ops::Range<usize> as core::iter::IntoIterator>::into_iter(move _10) -> [return: bb4, unwind: bb20]
  }
  preds [bb2]
  succs [bb4, bb20]

bb4
  0: StorageDead(_10)
    SourceInfo(regex-syntax/src/hir/interval.rs:120:23-120:24)
  1: PlaceMention(_9)
    SourceInfo(regex-syntax/src/hir/interval.rs:120:18-120:24)
  2: StorageLive(_12)
    SourceInfo(regex-syntax/src/hir/interval.rs:120:18-120:24)
  3: _12 = move _9
    SourceInfo(regex-syntax/src/hir/interval.rs:120:18-120:24)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:120:9-126:10)
      kind: goto -> bb5
  }
  preds [bb3]
  succs [bb5]

bb5
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:120:9-126:10)
      kind: falseUnwind -> [real: bb6, unwind: bb20]
  }
  preds [bb4, bb17]
  succs [bb6, bb20]

bb6
  0: StorageLive(_14)
    SourceInfo(regex-syntax/src/hir/interval.rs:120:18-120:24)
  1: StorageLive(_15)
    SourceInfo(regex-syntax/src/hir/interval.rs:120:18-120:24)
  2: StorageLive(_16)
    SourceInfo(regex-syntax/src/hir/interval.rs:120:18-120:24)
  3: StorageLive(_17)
    SourceInfo(regex-syntax/src/hir/interval.rs:120:18-120:24)
  4: _17 = &mut _12
    SourceInfo(regex-syntax/src/hir/interval.rs:120:18-120:24)
  5: _16 = &mut (*_17)
    SourceInfo(regex-syntax/src/hir/interval.rs:120:18-120:24)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:120:18-120:24)
      kind: _15 = <core::ops::Range<usize> as core::iter::Iterator>::next(move _16) -> [return: bb7, unwind: bb20]
  }
  preds [bb5]
  succs [bb7, bb20]

bb7
  0: StorageDead(_16)
    SourceInfo(regex-syntax/src/hir/interval.rs:120:23-120:24)
  1: PlaceMention(_15)
    SourceInfo(regex-syntax/src/hir/interval.rs:120:18-120:24)
  2: _18 = discriminant(_15)
    SourceInfo(regex-syntax/src/hir/interval.rs:120:18-120:24)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:120:18-120:24)
      kind: switchInt(move _18) -> [0: bb9, 1: bb10, otherwise: bb8]
  }
  preds [bb6]
  succs [bb8, bb9, bb10]

bb8
  0: FakeRead(ForMatchedPlace(None), _15)
    SourceInfo(regex-syntax/src/hir/interval.rs:120:18-120:24)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:120:18-120:24)
      kind: unreachable
  }
  preds [bb7]
  succs []

bb9
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:120:9-126:10)
      kind: falseEdge -> [real: bb11, imaginary: bb10]
  }
  preds [bb7]
  succs [bb10, bb11]

bb10
  0: StorageLive(_20)
    SourceInfo(regex-syntax/src/hir/interval.rs:120:13-120:14)
  1: _20 = ((_15 as Some).0: usize)
    SourceInfo(regex-syntax/src/hir/interval.rs:120:13-120:14)
  2: StorageLive(_21)
    SourceInfo(regex-syntax/src/hir/interval.rs:121:17-121:22)
  3: StorageLive(_22)
    SourceInfo(regex-syntax/src/hir/interval.rs:121:36-121:39)
  4: StorageLive(_23)
    SourceInfo(regex-syntax/src/hir/interval.rs:121:25-121:36)
  5: _23 = &((*_1).0: std::vec::Vec<I>)
    SourceInfo(regex-syntax/src/hir/interval.rs:121:25-121:36)
  6: StorageLive(_24)
    SourceInfo(regex-syntax/src/hir/interval.rs:121:37-121:38)
  7: _24 = _20
    SourceInfo(regex-syntax/src/hir/interval.rs:121:37-121:38)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:121:36-121:39)
      kind: _22 = <std::vec::Vec<I> as core::ops::Index<usize>>::index(move _23, move _24) -> [return: bb12, unwind: bb20]
  }
  preds [bb7, bb9]
  succs [bb12, bb20]

bb11
  0: _8 = const ()
    SourceInfo(regex-syntax/src/hir/interval.rs:120:9-126:10)
  1: StorageDead(_17)
    SourceInfo(regex-syntax/src/hir/interval.rs:126:9-126:10)
  2: StorageDead(_15)
    SourceInfo(regex-syntax/src/hir/interval.rs:126:9-126:10)
  3: StorageDead(_14)
    SourceInfo(regex-syntax/src/hir/interval.rs:126:9-126:10)
  4: StorageDead(_12)
    SourceInfo(regex-syntax/src/hir/interval.rs:126:9-126:10)
  5: StorageDead(_9)
    SourceInfo(regex-syntax/src/hir/interval.rs:126:9-126:10)
  6: StorageDead(_8)
    SourceInfo(regex-syntax/src/hir/interval.rs:126:9-126:10)
  7: StorageLive(_35)
    SourceInfo(regex-syntax/src/hir/interval.rs:127:9-127:28)
  8: StorageLive(_36)
    SourceInfo(regex-syntax/src/hir/interval.rs:127:9-127:13)
  9: _36 = &mut (*_1)
    SourceInfo(regex-syntax/src/hir/interval.rs:127:9-127:13)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:127:9-127:28)
      kind: _35 = hir::interval::IntervalSet::<I>::canonicalize(move _36) -> [return: bb18, unwind: bb20]
  }
  preds [bb9]
  succs [bb18, bb20]

bb12
  0: _21 = (*_22)
    SourceInfo(regex-syntax/src/hir/interval.rs:121:25-121:39)
  1: StorageDead(_24)
    SourceInfo(regex-syntax/src/hir/interval.rs:121:38-121:39)
  2: StorageDead(_23)
    SourceInfo(regex-syntax/src/hir/interval.rs:121:38-121:39)
  3: FakeRead(ForLet(None), _21)
    SourceInfo(regex-syntax/src/hir/interval.rs:121:17-121:22)
  4: StorageDead(_22)
    SourceInfo(regex-syntax/src/hir/interval.rs:121:39-121:40)
  5: StorageLive(_25)
    SourceInfo(regex-syntax/src/hir/interval.rs:122:31-122:71)
  6: StorageLive(_26)
    SourceInfo(regex-syntax/src/hir/interval.rs:122:31-122:36)
  7: _26 = &_21
    SourceInfo(regex-syntax/src/hir/interval.rs:122:31-122:36)
  8: StorageLive(_27)
    SourceInfo(regex-syntax/src/hir/interval.rs:122:54-122:70)
  9: StorageLive(_28)
    SourceInfo(regex-syntax/src/hir/interval.rs:122:54-122:70)
  10: _28 = &mut ((*_1).0: std::vec::Vec<I>)
    SourceInfo(regex-syntax/src/hir/interval.rs:122:54-122:70)
  11: _27 = &mut (*_28)
    SourceInfo(regex-syntax/src/hir/interval.rs:122:54-122:70)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:122:31-122:71)
      kind: _25 = <I as hir::interval::Interval>::case_fold_simple(move _26, move _27) -> [return: bb13, unwind: bb20]
  }
  preds [bb10]
  succs [bb13, bb20]

bb13
  0: StorageDead(_27)
    SourceInfo(regex-syntax/src/hir/interval.rs:122:70-122:71)
  1: StorageDead(_26)
    SourceInfo(regex-syntax/src/hir/interval.rs:122:70-122:71)
  2: PlaceMention(_25)
    SourceInfo(regex-syntax/src/hir/interval.rs:122:31-122:71)
  3: _29 = discriminant(_25)
    SourceInfo(regex-syntax/src/hir/interval.rs:122:31-122:71)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:122:20-122:28)
      kind: switchInt(move _29) -> [1: bb14, otherwise: bb17]
  }
  preds [bb12]
  succs [bb14, bb17]

bb14
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:122:20-122:28)
      kind: falseEdge -> [real: bb15, imaginary: bb17]
  }
  preds [bb13]
  succs [bb15, bb17]

bb15
  0: StorageLive(_30)
    SourceInfo(regex-syntax/src/hir/interval.rs:122:24-122:27)
  1: _30 = move ((_25 as Err).0: unicode::CaseFoldError)
    SourceInfo(regex-syntax/src/hir/interval.rs:122:24-122:27)
  2: StorageLive(_32)
    SourceInfo(regex-syntax/src/hir/interval.rs:123:17-123:36)
  3: StorageLive(_33)
    SourceInfo(regex-syntax/src/hir/interval.rs:123:17-123:21)
  4: _33 = &mut (*_1)
    SourceInfo(regex-syntax/src/hir/interval.rs:123:17-123:21)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:123:17-123:36)
      kind: _32 = hir::interval::IntervalSet::<I>::canonicalize(move _33) -> [return: bb16, unwind: bb20]
  }
  preds [bb14]
  succs [bb16, bb20]

bb16
  0: StorageDead(_33)
    SourceInfo(regex-syntax/src/hir/interval.rs:123:35-123:36)
  1: StorageDead(_32)
    SourceInfo(regex-syntax/src/hir/interval.rs:123:36-123:37)
  2: StorageLive(_34)
    SourceInfo(regex-syntax/src/hir/interval.rs:124:28-124:31)
  3: _34 = move _30
    SourceInfo(regex-syntax/src/hir/interval.rs:124:28-124:31)
  4: _0 = core::result::Result::<(), unicode::CaseFoldError>::Err(move _34)
    SourceInfo(regex-syntax/src/hir/interval.rs:124:24-124:32)
  5: StorageDead(_34)
    SourceInfo(regex-syntax/src/hir/interval.rs:124:31-124:32)
  6: StorageDead(_30)
    SourceInfo(regex-syntax/src/hir/interval.rs:125:13-125:14)
  7: StorageDead(_21)
    SourceInfo(regex-syntax/src/hir/interval.rs:126:9-126:10)
  8: StorageDead(_28)
    SourceInfo(regex-syntax/src/hir/interval.rs:126:9-126:10)
  9: StorageDead(_25)
    SourceInfo(regex-syntax/src/hir/interval.rs:126:9-126:10)
  10: StorageDead(_20)
    SourceInfo(regex-syntax/src/hir/interval.rs:126:9-126:10)
  11: StorageDead(_17)
    SourceInfo(regex-syntax/src/hir/interval.rs:126:9-126:10)
  12: StorageDead(_15)
    SourceInfo(regex-syntax/src/hir/interval.rs:126:9-126:10)
  13: StorageDead(_14)
    SourceInfo(regex-syntax/src/hir/interval.rs:126:9-126:10)
  14: StorageDead(_12)
    SourceInfo(regex-syntax/src/hir/interval.rs:126:9-126:10)
  15: StorageDead(_9)
    SourceInfo(regex-syntax/src/hir/interval.rs:126:9-126:10)
  16: StorageDead(_8)
    SourceInfo(regex-syntax/src/hir/interval.rs:126:9-126:10)
  17: StorageDead(_6)
    SourceInfo(regex-syntax/src/hir/interval.rs:130:5-130:6)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/lib.rs:1:1-1:1)
      kind: goto -> bb19
  }
  preds [bb15]
  succs [bb19]

bb17
  0: _14 = const ()
    SourceInfo(regex-syntax/src/hir/interval.rs:125:14-125:14)
  1: StorageDead(_21)
    SourceInfo(regex-syntax/src/hir/interval.rs:126:9-126:10)
  2: StorageDead(_28)
    SourceInfo(regex-syntax/src/hir/interval.rs:126:9-126:10)
  3: StorageDead(_25)
    SourceInfo(regex-syntax/src/hir/interval.rs:126:9-126:10)
  4: StorageDead(_20)
    SourceInfo(regex-syntax/src/hir/interval.rs:126:9-126:10)
  5: StorageDead(_17)
    SourceInfo(regex-syntax/src/hir/interval.rs:126:9-126:10)
  6: StorageDead(_15)
    SourceInfo(regex-syntax/src/hir/interval.rs:126:9-126:10)
  7: StorageDead(_14)
    SourceInfo(regex-syntax/src/hir/interval.rs:126:9-126:10)
  8: _13 = const ()
    SourceInfo(regex-syntax/src/hir/interval.rs:120:9-126:10)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:120:9-126:10)
      kind: goto -> bb5
  }
  preds [bb13, bb14]
  succs [bb5]

bb18
  0: StorageDead(_36)
    SourceInfo(regex-syntax/src/hir/interval.rs:127:27-127:28)
  1: StorageDead(_35)
    SourceInfo(regex-syntax/src/hir/interval.rs:127:28-127:29)
  2: ((*_1).1: bool) = const true
    SourceInfo(regex-syntax/src/hir/interval.rs:128:9-128:27)
  3: StorageLive(_37)
    SourceInfo(regex-syntax/src/hir/interval.rs:129:12-129:14)
  4: _37 = ()
    SourceInfo(regex-syntax/src/hir/interval.rs:129:12-129:14)
  5: _0 = core::result::Result::<(), unicode::CaseFoldError>::Ok(move _37)
    SourceInfo(regex-syntax/src/hir/interval.rs:129:9-129:15)
  6: StorageDead(_37)
    SourceInfo(regex-syntax/src/hir/interval.rs:129:14-129:15)
  7: StorageDead(_6)
    SourceInfo(regex-syntax/src/hir/interval.rs:130:5-130:6)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:130:6-130:6)
      kind: goto -> bb19
  }
  preds [bb11]
  succs [bb19]

bb19
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:130:6-130:6)
      kind: return
  }
  preds [bb1, bb16, bb18]
  succs []

bb20
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/interval.rs:115:5-130:6)
      kind: resume
  }
  preds [bb2, bb3, bb5, bb6, bb10, bb11, bb12, bb15]
  succs []

