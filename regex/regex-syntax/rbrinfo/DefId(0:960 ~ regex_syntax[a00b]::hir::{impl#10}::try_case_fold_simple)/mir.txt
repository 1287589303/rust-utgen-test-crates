bb0
  0: StorageLive(_2)
    SourceInfo(regex-syntax/src/hir/mod.rs:877:9-880:10)
  1: PlaceMention((*_1))
    SourceInfo(regex-syntax/src/hir/mod.rs:877:15-877:20)
  2: _3 = discriminant((*_1))
    SourceInfo(regex-syntax/src/hir/mod.rs:877:15-877:20)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:877:9-877:20)
      kind: switchInt(move _3) -> [0: bb2, 1: bb3, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2, bb3]

bb1
  0: FakeRead(ForMatchedPlace(None), (*_1))
    SourceInfo(regex-syntax/src/hir/mod.rs:877:15-877:20)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:877:15-877:20)
      kind: unreachable
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:878:13-878:38)
      kind: falseEdge -> [real: bb4, imaginary: bb3]
  }
  preds [bb0]
  succs [bb3, bb4]

bb3
  0: StorageLive(_13)
    SourceInfo(regex-syntax/src/hir/mod.rs:879:26-879:35)
  1: _13 = &mut (((*_1) as Bytes).0: hir::ClassBytes)
    SourceInfo(regex-syntax/src/hir/mod.rs:879:26-879:35)
  2: StorageLive(_14)
    SourceInfo(regex-syntax/src/hir/mod.rs:879:40-879:41)
  3: _14 = &mut (*_13)
    SourceInfo(regex-syntax/src/hir/mod.rs:879:40-879:41)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:879:40-879:60)
      kind: _2 = hir::ClassBytes::case_fold_simple(move _14) -> [return: bb12, unwind: bb15]
  }
  preds [bb0, bb2]
  succs [bb12, bb15]

bb4
  0: StorageLive(_4)
    SourceInfo(regex-syntax/src/hir/mod.rs:878:28-878:37)
  1: _4 = &mut (((*_1) as Unicode).0: hir::ClassUnicode)
    SourceInfo(regex-syntax/src/hir/mod.rs:878:28-878:37)
  2: StorageLive(_5)
    SourceInfo(regex-syntax/src/hir/mod.rs:878:42-878:67)
  3: StorageLive(_6)
    SourceInfo(regex-syntax/src/hir/mod.rs:878:42-878:66)
  4: StorageLive(_7)
    SourceInfo(regex-syntax/src/hir/mod.rs:878:42-878:43)
  5: _7 = &mut (*_4)
    SourceInfo(regex-syntax/src/hir/mod.rs:878:42-878:43)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:878:42-878:66)
      kind: _6 = hir::ClassUnicode::try_case_fold_simple(move _7) -> [return: bb5, unwind: bb15]
  }
  preds [bb2]
  succs [bb5, bb15]

bb5
  0: StorageDead(_7)
    SourceInfo(regex-syntax/src/hir/mod.rs:878:65-878:66)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:878:42-878:67)
      kind: _5 = <core::result::Result<(), unicode::CaseFoldError> as core::ops::Try>::branch(move _6) -> [return: bb6, unwind: bb15]
  }
  preds [bb4]
  succs [bb6, bb15]

bb6
  0: StorageDead(_6)
    SourceInfo(regex-syntax/src/hir/mod.rs:878:66-878:67)
  1: PlaceMention(_5)
    SourceInfo(regex-syntax/src/hir/mod.rs:878:42-878:67)
  2: _8 = discriminant(_5)
    SourceInfo(regex-syntax/src/hir/mod.rs:878:42-878:67)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:878:42-878:67)
      kind: switchInt(move _8) -> [0: bb9, 1: bb8, otherwise: bb7]
  }
  preds [bb5]
  succs [bb7, bb8, bb9]

bb7
  0: FakeRead(ForMatchedPlace(None), _5)
    SourceInfo(regex-syntax/src/hir/mod.rs:878:42-878:67)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:878:42-878:67)
      kind: unreachable
  }
  preds [bb6]
  succs []

bb8
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:878:66-878:67)
      kind: falseEdge -> [real: bb10, imaginary: bb9]
  }
  preds [bb6]
  succs [bb9, bb10]

bb9
  0: StorageLive(_12)
    SourceInfo(regex-syntax/src/hir/mod.rs:878:42-878:67)
  1: _12 = ((_5 as Continue).0: ())
    SourceInfo(regex-syntax/src/hir/mod.rs:878:42-878:67)
  2: _2 = _12
    SourceInfo(regex-syntax/src/hir/mod.rs:878:42-878:67)
  3: StorageDead(_12)
    SourceInfo(regex-syntax/src/hir/mod.rs:878:66-878:67)
  4: StorageDead(_5)
    SourceInfo(regex-syntax/src/hir/mod.rs:878:66-878:67)
  5: StorageDead(_4)
    SourceInfo(regex-syntax/src/hir/mod.rs:878:66-878:67)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:878:66-878:67)
      kind: goto -> bb13
  }
  preds [bb6, bb8]
  succs [bb13]

bb10
  0: StorageLive(_9)
    SourceInfo(regex-syntax/src/hir/mod.rs:878:66-878:67)
  1: _9 = move ((_5 as Break).0: core::result::Result<core::convert::Infallible, unicode::CaseFoldError>)
    SourceInfo(regex-syntax/src/hir/mod.rs:878:66-878:67)
  2: StorageLive(_11)
    SourceInfo(regex-syntax/src/hir/mod.rs:878:66-878:67)
  3: _11 = move _9
    SourceInfo(regex-syntax/src/hir/mod.rs:878:66-878:67)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:878:42-878:67)
      kind: _0 = <core::result::Result<(), unicode::CaseFoldError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, unicode::CaseFoldError>>>::from_residual(move _11) -> [return: bb11, unwind: bb15]
  }
  preds [bb8]
  succs [bb11, bb15]

bb11
  0: StorageDead(_11)
    SourceInfo(regex-syntax/src/hir/mod.rs:878:66-878:67)
  1: StorageDead(_9)
    SourceInfo(regex-syntax/src/hir/mod.rs:878:66-878:67)
  2: StorageDead(_5)
    SourceInfo(regex-syntax/src/hir/mod.rs:878:66-878:67)
  3: StorageDead(_4)
    SourceInfo(regex-syntax/src/hir/mod.rs:878:66-878:67)
  4: StorageDead(_2)
    SourceInfo(regex-syntax/src/hir/mod.rs:880:9-880:10)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:882:6-882:6)
      kind: goto -> bb14
  }
  preds [bb10]
  succs [bb14]

bb12
  0: StorageDead(_14)
    SourceInfo(regex-syntax/src/hir/mod.rs:879:59-879:60)
  1: StorageDead(_13)
    SourceInfo(regex-syntax/src/hir/mod.rs:879:59-879:60)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:879:59-879:60)
      kind: goto -> bb13
  }
  preds [bb3]
  succs [bb13]

bb13
  0: StorageDead(_2)
    SourceInfo(regex-syntax/src/hir/mod.rs:880:9-880:10)
  1: StorageLive(_15)
    SourceInfo(regex-syntax/src/hir/mod.rs:881:12-881:14)
  2: _15 = ()
    SourceInfo(regex-syntax/src/hir/mod.rs:881:12-881:14)
  3: _0 = core::result::Result::<(), unicode::CaseFoldError>::Ok(move _15)
    SourceInfo(regex-syntax/src/hir/mod.rs:881:9-881:15)
  4: StorageDead(_15)
    SourceInfo(regex-syntax/src/hir/mod.rs:881:14-881:15)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:882:6-882:6)
      kind: goto -> bb14
  }
  preds [bb9, bb12]
  succs [bb14]

bb14
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:882:6-882:6)
      kind: return
  }
  preds [bb11, bb13]
  succs []

bb15
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:874:5-882:6)
      kind: resume
  }
  preds [bb3, bb4, bb5, bb10]
  succs []

