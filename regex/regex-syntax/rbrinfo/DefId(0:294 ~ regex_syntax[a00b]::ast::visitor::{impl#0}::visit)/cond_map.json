{
  "regex-syntax/src/ast/visitor.rs:241:29:241:55": [
    {
      "Try": "visitor.visit_concat_in()?"
    }
  ],
  "regex-syntax/src/ast/visitor.rs:238:29:238:60": [
    {
      "Try": "visitor.visit_alternation_in()?"
    }
  ],
  "regex-syntax/src/ast/visitor.rs:236:27:236:28": [
    {
      "Match": {
        "match_source": "regex-syntax/src/ast/visitor.rs:236:27:236:28",
        "match_str": "x",
        "match_kind": {
          "Enum": [
            "Repetition",
            "Group",
            "Concat",
            "Alternation"
          ]
        },
        "arms": {
          "regex-syntax/src/ast/visitor.rs:240:25:240:45": {
            "pat": {
              "pat_str": "Frame::Concat { .. }",
              "kind": {
                "Enum": 2
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/ast/visitor.rs:240:49:242:26"
          },
          "regex-syntax/src/ast/visitor.rs:237:25:237:50": {
            "pat": {
              "pat_str": "Frame::Alternation { .. }",
              "kind": {
                "Enum": 3
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/ast/visitor.rs:237:54:239:26"
          },
          "regex-syntax/src/ast/visitor.rs:243:25:243:26": {
            "pat": {
              "pat_str": "_",
              "kind": "Wild"
            },
            "guard": null,
            "body_source": "regex-syntax/src/ast/visitor.rs:243:30:243:32"
          }
        }
      }
    }
  ],
  "regex-syntax/src/ast/visitor.rs:229:47:229:63": [
    {
      "Match": {
        "match_source": "regex-syntax/src/ast/visitor.rs:229:47:229:63",
        "match_str": "self.stack.pop()",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-syntax/src/ast/visitor.rs:230:21:230:25": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/ast/visitor.rs:230:29:230:52"
          },
          "regex-syntax/src/ast/visitor.rs:231:21:231:44": {
            "pat": {
              "pat_str": "Some((post_ast, frame))",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/ast/visitor.rs:231:48:231:65"
          }
        }
      }
    }
  ],
  "regex-syntax/src/ast/visitor.rs:215:13:215:36": [
    {
      "Try": "visitor.visit_pre(ast)?"
    }
  ],
  "regex-syntax/src/ast/visitor.rs:216:30:216:61": [
    {
      "Try": "self.induct(ast, &mut visitor)?"
    }
  ],
  "regex-syntax/src/ast/visitor.rs:224:13:224:37": [
    {
      "Try": "visitor.visit_post(ast)?"
    }
  ],
  "regex-syntax/src/ast/visitor.rs:216:16:216:61": [
    {
      "Bool": {
        "Other": "let Some(x) = self.induct(ast, &mut visitor)?"
      }
    }
  ],
  "regex-syntax/src/ast/visitor.rs:235:20:235:49": [
    {
      "Bool": {
        "Other": "let Some(x) = self.pop(frame)"
      }
    }
  ],
  "regex-syntax/src/ast/visitor.rs:251:17:251:46": [
    {
      "Try": "visitor.visit_post(post_ast)?"
    }
  ]
}