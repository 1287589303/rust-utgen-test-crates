bb0
  0: PlaceMention(((*_1).0: ast::ErrorKind))
    SourceInfo(regex-syntax/src/ast/mod.rs:59:15-59:24)
  1: _2 = discriminant(((*_1).0: ast::ErrorKind))
    SourceInfo(regex-syntax/src/ast/mod.rs:59:15-59:24)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/mod.rs:59:9-59:24)
      kind: switchInt(move _2) -> [13: bb2, 14: bb3, 17: bb4, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2, bb3, bb4]

bb1
  0: _0 = core::option::Option::<&ast::Span>::None
    SourceInfo(regex-syntax/src/ast/mod.rs:63:18-63:22)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/mod.rs:63:18-63:22)
      kind: goto -> bb8
  }
  preds [bb0, bb4]
  succs [bb8]

bb2
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/mod.rs:60:13-60:43)
      kind: falseEdge -> [real: bb5, imaginary: bb3]
  }
  preds [bb0]
  succs [bb3, bb5]

bb3
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/mod.rs:61:13-61:54)
      kind: falseEdge -> [real: bb6, imaginary: bb4]
  }
  preds [bb0, bb2]
  succs [bb4, bb6]

bb4
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/mod.rs:62:13-62:52)
      kind: falseEdge -> [real: bb7, imaginary: bb1]
  }
  preds [bb0, bb3]
  succs [bb1, bb7]

bb5
  0: StorageLive(_3)
    SourceInfo(regex-syntax/src/ast/mod.rs:60:29-60:41)
  1: _3 = &((((*_1).0: ast::ErrorKind) as FlagDuplicate).0: ast::Span)
    SourceInfo(regex-syntax/src/ast/mod.rs:60:29-60:41)
  2: StorageLive(_4)
    SourceInfo(regex-syntax/src/ast/mod.rs:60:52-60:60)
  3: _4 = &(*_3)
    SourceInfo(regex-syntax/src/ast/mod.rs:60:52-60:60)
  4: _0 = core::option::Option::<&ast::Span>::Some(move _4)
    SourceInfo(regex-syntax/src/ast/mod.rs:60:47-60:61)
  5: StorageDead(_4)
    SourceInfo(regex-syntax/src/ast/mod.rs:60:60-60:61)
  6: StorageDead(_3)
    SourceInfo(regex-syntax/src/ast/mod.rs:60:60-60:61)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/mod.rs:60:60-60:61)
      kind: goto -> bb8
  }
  preds [bb2]
  succs [bb8]

bb6
  0: StorageLive(_5)
    SourceInfo(regex-syntax/src/ast/mod.rs:61:36-61:48)
  1: _5 = &((((*_1).0: ast::ErrorKind) as FlagRepeatedNegation).0: ast::Span)
    SourceInfo(regex-syntax/src/ast/mod.rs:61:36-61:48)
  2: StorageLive(_6)
    SourceInfo(regex-syntax/src/ast/mod.rs:61:63-61:71)
  3: _6 = &(*_5)
    SourceInfo(regex-syntax/src/ast/mod.rs:61:63-61:71)
  4: _0 = core::option::Option::<&ast::Span>::Some(move _6)
    SourceInfo(regex-syntax/src/ast/mod.rs:61:58-61:72)
  5: StorageDead(_6)
    SourceInfo(regex-syntax/src/ast/mod.rs:61:71-61:72)
  6: StorageDead(_5)
    SourceInfo(regex-syntax/src/ast/mod.rs:61:71-61:72)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/mod.rs:61:71-61:72)
      kind: goto -> bb8
  }
  preds [bb3]
  succs [bb8]

bb7
  0: StorageLive(_7)
    SourceInfo(regex-syntax/src/ast/mod.rs:62:34-62:46)
  1: _7 = &((((*_1).0: ast::ErrorKind) as GroupNameDuplicate).0: ast::Span)
    SourceInfo(regex-syntax/src/ast/mod.rs:62:34-62:46)
  2: StorageLive(_8)
    SourceInfo(regex-syntax/src/ast/mod.rs:62:61-62:69)
  3: _8 = &(*_7)
    SourceInfo(regex-syntax/src/ast/mod.rs:62:61-62:69)
  4: _0 = core::option::Option::<&ast::Span>::Some(move _8)
    SourceInfo(regex-syntax/src/ast/mod.rs:62:56-62:70)
  5: StorageDead(_8)
    SourceInfo(regex-syntax/src/ast/mod.rs:62:69-62:70)
  6: StorageDead(_7)
    SourceInfo(regex-syntax/src/ast/mod.rs:62:69-62:70)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/mod.rs:62:69-62:70)
      kind: goto -> bb8
  }
  preds [bb4]
  succs [bb8]

bb8
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/mod.rs:65:6-65:6)
      kind: return
  }
  preds [bb1, bb5, bb6, bb7]
  succs []

