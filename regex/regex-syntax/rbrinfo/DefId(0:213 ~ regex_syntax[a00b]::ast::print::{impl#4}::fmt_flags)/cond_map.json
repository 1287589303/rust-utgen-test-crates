{
  "regex-syntax/src/ast/print.rs:286:56:286:61": [
    {
      "Match": {
        "match_source": "regex-syntax/src/ast/print.rs:286:56:286:61",
        "match_str": "*flag",
        "match_kind": {
          "Enum": [
            "CaseInsensitive",
            "MultiLine",
            "DotMatchesNewLine",
            "SwapGreed",
            "Unicode",
            "CRLF",
            "IgnoreWhitespace"
          ]
        },
        "arms": {
          "regex-syntax/src/ast/print.rs:292:21:292:31": {
            "pat": {
              "pat_str": "Flag::CRLF",
              "kind": {
                "Enum": 5
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/ast/print.rs:292:35:292:58"
          },
          "regex-syntax/src/ast/print.rs:291:21:291:34": {
            "pat": {
              "pat_str": "Flag::Unicode",
              "kind": {
                "Enum": 4
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/ast/print.rs:291:38:291:61"
          },
          "regex-syntax/src/ast/print.rs:293:21:293:43": {
            "pat": {
              "pat_str": "Flag::IgnoreWhitespace",
              "kind": {
                "Enum": 6
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/ast/print.rs:293:47:293:70"
          },
          "regex-syntax/src/ast/print.rs:289:21:289:44": {
            "pat": {
              "pat_str": "Flag::DotMatchesNewLine",
              "kind": {
                "Enum": 2
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/ast/print.rs:289:48:289:71"
          },
          "regex-syntax/src/ast/print.rs:290:21:290:36": {
            "pat": {
              "pat_str": "Flag::SwapGreed",
              "kind": {
                "Enum": 3
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/ast/print.rs:290:40:290:63"
          },
          "regex-syntax/src/ast/print.rs:288:21:288:36": {
            "pat": {
              "pat_str": "Flag::MultiLine",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/ast/print.rs:288:40:288:63"
          },
          "regex-syntax/src/ast/print.rs:287:21:287:42": {
            "pat": {
              "pat_str": "Flag::CaseInsensitive",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/ast/print.rs:287:46:287:69"
          }
        }
      }
    }
  ],
  "regex-syntax/src/ast/print.rs:284:19:284:28": [
    {
      "Match": {
        "match_source": "regex-syntax/src/ast/print.rs:284:19:284:28",
        "match_str": "item.kind",
        "match_kind": {
          "Enum": [
            "Negation",
            "Flag"
          ]
        },
        "arms": {
          "regex-syntax/src/ast/print.rs:285:17:285:40": {
            "pat": {
              "pat_str": "FlagsItemKind::Negation",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/ast/print.rs:285:44:285:67"
          },
          "regex-syntax/src/ast/print.rs:286:17:286:46": {
            "pat": {
              "pat_str": "FlagsItemKind::Flag(ref flag)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/ast/print.rs:286:50:294:18"
          }
        }
      }
    }
  ],
  "regex-syntax/src/ast/print.rs:283:21:283:31": [
    {
      "For": {
        "iter_var": "item",
        "iter_range": "&ast.items"
      }
    }
  ],
  "regex-syntax/src/ast/print.rs:284:13:295:15": [
    {
      "Try": "match item.kind {\n                FlagsItemKind::Negation => self.wtr.write_str(\"-\"),\n                FlagsItemKind::Flag(ref flag) => match *flag {\n                    Flag::CaseInsensitive => self.wtr.write_str(\"i\"),\n                    Flag::MultiLine => self.wtr.write_str(\"m\"),\n                    Flag::DotMatchesNewLine => self.wtr.write_str(\"s\"),\n                    Flag::SwapGreed => self.wtr.write_str(\"U\"),\n                    Flag::Unicode => self.wtr.write_str(\"u\"),\n                    Flag::CRLF => self.wtr.write_str(\"R\"),\n                    Flag::IgnoreWhitespace => self.wtr.write_str(\"x\"),\n                },\n            }?"
    }
  ]
}