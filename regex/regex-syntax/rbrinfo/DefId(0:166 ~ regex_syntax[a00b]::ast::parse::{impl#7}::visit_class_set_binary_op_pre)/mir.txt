bb0
  0: StorageLive(_3)
    SourceInfo(regex-syntax/src/ast/parse.rs:2405:9-2405:13)
  1: _3 = &mut (*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:2405:9-2405:13)
  2: StorageLive(_4)
    SourceInfo(regex-syntax/src/ast/parse.rs:2405:30-2405:39)
  3: StorageLive(_5)
    SourceInfo(regex-syntax/src/ast/parse.rs:2405:30-2405:39)
  4: _5 = &((*_2).0: ast::Span)
    SourceInfo(regex-syntax/src/ast/parse.rs:2405:30-2405:39)
  5: _4 = &(*_5)
    SourceInfo(regex-syntax/src/ast/parse.rs:2405:30-2405:39)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:2405:9-2405:40)
      kind: _0 = ast::parse::NestLimiter::<'_, '_, P>::increment_depth(move _3, move _4) -> [return: bb1, unwind: bb2]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-syntax/src/ast/parse.rs:2405:39-2405:40)
  1: StorageDead(_3)
    SourceInfo(regex-syntax/src/ast/parse.rs:2405:39-2405:40)
  2: StorageDead(_5)
    SourceInfo(regex-syntax/src/ast/parse.rs:2406:5-2406:6)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:2406:6-2406:6)
      kind: return
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:2401:5-2406:6)
      kind: resume
  }
  preds [bb0]
  succs []

