bb0
  0: PlaceMention(_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:95:15-95:19)
  1: _3 = discriminant(_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:95:15-95:19)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:95:9-95:19)
      kind: switchInt(move _3) -> [0: bb2, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageLive(_6)
    SourceInfo(regex-syntax/src/ast/parse.rs:97:13-97:14)
  1: _6 = move _1
    SourceInfo(regex-syntax/src/ast/parse.rs:97:13-97:14)
  2: StorageLive(_7)
    SourceInfo(regex-syntax/src/ast/parse.rs:97:22-97:75)
  3: StorageLive(_8)
    SourceInfo(regex-syntax/src/ast/parse.rs:97:22-97:23)
  4: _8 = &(*_2)
    SourceInfo(regex-syntax/src/ast/parse.rs:97:22-97:23)
  5: StorageLive(_9)
    SourceInfo(regex-syntax/src/ast/parse.rs:97:30-97:39)
  6: StorageLive(_10)
    SourceInfo(regex-syntax/src/ast/parse.rs:97:31-97:39)
  7: StorageLive(_11)
    SourceInfo(regex-syntax/src/ast/parse.rs:97:31-97:32)
  8: _11 = &_6
    SourceInfo(regex-syntax/src/ast/parse.rs:97:31-97:32)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:97:31-97:39)
      kind: _10 = ast::parse::Primitive::span(move _11) -> [return: bb4, unwind: bb10]
  }
  preds [bb0, bb2]
  succs [bb4, bb10]

bb2
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:96:13-96:25)
      kind: falseEdge -> [real: bb3, imaginary: bb1]
  }
  preds [bb0]
  succs [bb1, bb3]

bb3
  0: StorageLive(_4)
    SourceInfo(regex-syntax/src/ast/parse.rs:96:21-96:24)
  1: _4 = move ((_1 as Literal).0: ast::Literal)
    SourceInfo(regex-syntax/src/ast/parse.rs:96:21-96:24)
  2: StorageLive(_5)
    SourceInfo(regex-syntax/src/ast/parse.rs:96:32-96:35)
  3: _5 = move _4
    SourceInfo(regex-syntax/src/ast/parse.rs:96:32-96:35)
  4: _0 = core::result::Result::<ast::Literal, ast::Error>::Ok(move _5)
    SourceInfo(regex-syntax/src/ast/parse.rs:96:29-96:36)
  5: StorageDead(_5)
    SourceInfo(regex-syntax/src/ast/parse.rs:96:35-96:36)
  6: StorageDead(_4)
    SourceInfo(regex-syntax/src/ast/parse.rs:96:35-96:36)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:96:35-96:36)
      kind: goto -> bb8
  }
  preds [bb2]
  succs [bb8]

bb4
  0: StorageDead(_11)
    SourceInfo(regex-syntax/src/ast/parse.rs:97:38-97:39)
  1: _9 = (*_10)
    SourceInfo(regex-syntax/src/ast/parse.rs:97:30-97:39)
  2: StorageLive(_12)
    SourceInfo(regex-syntax/src/ast/parse.rs:97:41-97:74)
  3: _12 = ast::ErrorKind::ClassRangeLiteral
    SourceInfo(regex-syntax/src/ast/parse.rs:97:41-97:74)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:97:22-97:75)
      kind: _7 = ast::parse::ParserI::<'_, P>::error(move _8, move _9, move _12) -> [return: bb5, unwind: bb10]
  }
  preds [bb1]
  succs [bb5, bb10]

bb5
  0: StorageDead(_12)
    SourceInfo(regex-syntax/src/ast/parse.rs:97:74-97:75)
  1: StorageDead(_9)
    SourceInfo(regex-syntax/src/ast/parse.rs:97:74-97:75)
  2: StorageDead(_8)
    SourceInfo(regex-syntax/src/ast/parse.rs:97:74-97:75)
  3: _0 = core::result::Result::<ast::Literal, ast::Error>::Err(move _7)
    SourceInfo(regex-syntax/src/ast/parse.rs:97:18-97:76)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:97:75-97:76)
      kind: drop(_7) -> [return: bb6, unwind: bb10]
  }
  preds [bb4]
  succs [bb6, bb10]

bb6
  0: StorageDead(_7)
    SourceInfo(regex-syntax/src/ast/parse.rs:97:75-97:76)
  1: StorageDead(_10)
    SourceInfo(regex-syntax/src/ast/parse.rs:97:75-97:76)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:97:75-97:76)
      kind: drop(_6) -> [return: bb7, unwind: bb11]
  }
  preds [bb5]
  succs [bb7, bb11]

bb7
  0: StorageDead(_6)
    SourceInfo(regex-syntax/src/ast/parse.rs:97:75-97:76)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:97:75-97:76)
      kind: goto -> bb8
  }
  preds [bb6]
  succs [bb8]

bb8
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:99:5-99:6)
      kind: drop(_1) -> [return: bb9, unwind: bb12]
  }
  preds [bb3, bb7]
  succs [bb9, bb12]

bb9
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:99:6-99:6)
      kind: return
  }
  preds [bb8]
  succs []

bb10
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:97:75-97:76)
      kind: drop(_6) -> [return: bb11, unwind terminate(cleanup)]
  }
  preds [bb1, bb4, bb5]
  succs [bb11]

bb11
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:99:5-99:6)
      kind: drop(_1) -> [return: bb12, unwind terminate(cleanup)]
  }
  preds [bb6, bb10]
  succs [bb12]

bb12
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:89:5-99:6)
      kind: resume
  }
  preds [bb8, bb11]
  succs []

