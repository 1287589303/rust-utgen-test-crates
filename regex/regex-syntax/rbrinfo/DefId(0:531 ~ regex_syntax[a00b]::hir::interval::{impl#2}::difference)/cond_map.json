{
  "regex-syntax/src/hir/interval.rs:268:15:268:28": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "a < drain_end",
          "lhs": "a",
          "rhs": "drain_end",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/hir/interval.rs:214:16:214:64": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "self.ranges[a].upper() < other.ranges[b].lower()",
          "lhs": "self.ranges[a].upper()",
          "rhs": "other.ranges[b].lower()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/hir/interval.rs:208:16:208:64": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "other.ranges[b].upper() < self.ranges[a].lower()",
          "lhs": "other.ranges[b].upper()",
          "rhs": "self.ranges[a].lower()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/hir/interval.rs:274:38:274:50": [
    {
      "Bool": {
        "Other": "other.folded"
      }
    }
  ],
  "regex-syntax/src/hir/interval.rs:204:39:204:61": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "b < other.ranges.len()",
          "lhs": "b",
          "rhs": "other.ranges.len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/hir/interval.rs:186:12:186:34": [
    {
      "Bool": {
        "Other": "self.ranges.is_empty()"
      }
    }
  ],
  "regex-syntax/src/hir/interval.rs:204:22:204:35": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "a < drain_end",
          "lhs": "a",
          "rhs": "drain_end",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/hir/interval.rs:239:31:239:65": [
    {
      "Match": {
        "match_source": "regex-syntax/src/hir/interval.rs:239:31:239:65",
        "match_str": "range.difference(&other.ranges[b])",
        "match_kind": {
          "StructLike": null
        },
        "arms": {
          "regex-syntax/src/hir/interval.rs:240:21:240:33": {
            "pat": {
              "pat_str": "(None, None)",
              "kind": {
                "StructLike": {
                  "0": [
                    null,
                    "regex-syntax/src/hir/interval.rs:240:22:240:26"
                  ],
                  "1": [
                    null,
                    "regex-syntax/src/hir/interval.rs:240:28:240:32"
                  ]
                }
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/interval.rs:240:37:245:22"
          },
          "regex-syntax/src/hir/interval.rs:246:21:246:41": {
            "pat": {
              "pat_str": "(Some(range1), None)",
              "kind": {
                "StructLike": {
                  "0": [
                    null,
                    "regex-syntax/src/hir/interval.rs:246:22:246:34"
                  ],
                  "1": [
                    null,
                    "regex-syntax/src/hir/interval.rs:246:36:246:40"
                  ]
                }
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/interval.rs:246:68:246:74"
          },
          "regex-syntax/src/hir/interval.rs:246:44:246:64": {
            "pat": {
              "pat_str": "(None, Some(range1))",
              "kind": {
                "StructLike": {
                  "0": [
                    null,
                    "regex-syntax/src/hir/interval.rs:246:45:246:49"
                  ],
                  "1": [
                    null,
                    "regex-syntax/src/hir/interval.rs:246:51:246:63"
                  ]
                }
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/interval.rs:246:68:246:74"
          },
          "regex-syntax/src/hir/interval.rs:247:21:247:49": {
            "pat": {
              "pat_str": "(Some(range1), Some(range2))",
              "kind": {
                "StructLike": {
                  "0": [
                    null,
                    "regex-syntax/src/hir/interval.rs:247:22:247:34"
                  ],
                  "1": [
                    null,
                    "regex-syntax/src/hir/interval.rs:247:36:247:48"
                  ]
                }
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/interval.rs:247:53:250:22"
          }
        }
      }
    }
  ],
  "regex-syntax/src/hir/interval.rs:221:22:221:76": [
    {
      "Bool": {
        "Other": "self.ranges[a].is_intersection_empty(&other.ranges[b])"
      }
    }
  ],
  "regex-syntax/src/hir/interval.rs:235:19:235:41": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "b < other.ranges.len()",
          "lhs": "b",
          "rhs": "other.ranges.len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/hir/interval.rs:236:21:236:66": [
    {
      "Bool": {
        "Other": "range.is_intersection_empty(&other.ranges[b])"
      }
    }
  ],
  "regex-syntax/src/hir/interval.rs:274:23:274:34": [
    {
      "Bool": {
        "Other": "self.folded"
      }
    }
  ],
  "regex-syntax/src/hir/interval.rs:186:38:186:61": [
    {
      "Bool": {
        "Other": "other.ranges.is_empty()"
      }
    }
  ],
  "regex-syntax/src/hir/interval.rs:258:20:258:63": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "other.ranges[b].upper() > old_range.upper()",
          "lhs": "other.ranges[b].upper()",
          "rhs": "old_range.upper()",
          "cmp_with_int": false
        }
      }
    }
  ]
}