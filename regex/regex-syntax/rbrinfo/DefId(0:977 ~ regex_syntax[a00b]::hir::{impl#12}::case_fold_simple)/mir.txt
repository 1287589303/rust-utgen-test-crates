bb0
  0: StorageLive(_2)
    SourceInfo(regex-syntax/src/hir/mod.rs:1107:9-1109:60)
  1: StorageLive(_3)
    SourceInfo(regex-syntax/src/hir/mod.rs:1107:9-1108:32)
  2: StorageLive(_4)
    SourceInfo(regex-syntax/src/hir/mod.rs:1107:9-1107:17)
  3: _4 = &mut ((*_1).0: hir::interval::IntervalSet<hir::ClassUnicodeRange>)
    SourceInfo(regex-syntax/src/hir/mod.rs:1107:9-1107:17)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1107:9-1108:32)
      kind: _3 = hir::interval::IntervalSet::<hir::ClassUnicodeRange>::case_fold_simple(move _4) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-syntax/src/hir/mod.rs:1108:31-1108:32)
  1: StorageLive(_5)
    SourceInfo(regex-syntax/src/hir/mod.rs:1109:21-1109:59)
  2: StorageLive(_6)
    SourceInfo(regex-syntax/src/hir/mod.rs:1109:21-1109:59)
  3: _6 = const "unicode-case feature must be enabled"
    SourceInfo(regex-syntax/src/hir/mod.rs:1109:21-1109:59)
  4: _5 = &(*_6)
    SourceInfo(regex-syntax/src/hir/mod.rs:1109:21-1109:59)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1107:9-1109:60)
      kind: _2 = core::result::Result::<(), unicode::CaseFoldError>::expect(move _3, move _5) -> [return: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_5)
    SourceInfo(regex-syntax/src/hir/mod.rs:1109:59-1109:60)
  1: StorageDead(_3)
    SourceInfo(regex-syntax/src/hir/mod.rs:1109:59-1109:60)
  2: StorageDead(_6)
    SourceInfo(regex-syntax/src/hir/mod.rs:1109:60-1109:61)
  3: StorageDead(_2)
    SourceInfo(regex-syntax/src/hir/mod.rs:1109:60-1109:61)
  4: _0 = const ()
    SourceInfo(regex-syntax/src/hir/mod.rs:1106:40-1110:6)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1110:6-1110:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-syntax/src/hir/mod.rs:1106:5-1110:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

