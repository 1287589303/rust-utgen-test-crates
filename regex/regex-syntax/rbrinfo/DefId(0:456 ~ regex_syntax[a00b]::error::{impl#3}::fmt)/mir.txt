bb0
  0: PlaceMention((*_1))
    SourceInfo(regex-syntax/src/error.rs:42:15-42:20)
  1: _3 = discriminant((*_1))
    SourceInfo(regex-syntax/src/error.rs:42:15-42:20)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/error.rs:42:9-42:20)
      kind: switchInt(move _3) -> [0: bb2, 1: bb3, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2, bb3]

bb1
  0: FakeRead(ForMatchedPlace(None), (*_1))
    SourceInfo(regex-syntax/src/error.rs:42:15-42:20)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/error.rs:42:15-42:20)
      kind: unreachable
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-syntax/src/error.rs:43:13-43:32)
      kind: falseEdge -> [real: bb4, imaginary: bb3]
  }
  preds [bb0]
  succs [bb3, bb4]

bb3
  0: StorageLive(_7)
    SourceInfo(regex-syntax/src/error.rs:44:30-44:35)
  1: _7 = &(((*_1) as Translate).0: hir::Error)
    SourceInfo(regex-syntax/src/error.rs:44:30-44:35)
  2: StorageLive(_8)
    SourceInfo(regex-syntax/src/error.rs:44:40-44:41)
  3: _8 = &(*_7)
    SourceInfo(regex-syntax/src/error.rs:44:40-44:41)
  4: StorageLive(_9)
    SourceInfo(regex-syntax/src/error.rs:44:46-44:47)
  5: _9 = &mut (*_2)
    SourceInfo(regex-syntax/src/error.rs:44:46-44:47)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/error.rs:44:40-44:48)
      kind: _0 = <hir::Error as core::fmt::Display>::fmt(move _8, move _9) -> [return: bb6, unwind: bb8]
  }
  preds [bb0, bb2]
  succs [bb6, bb8]

bb4
  0: StorageLive(_4)
    SourceInfo(regex-syntax/src/error.rs:43:26-43:31)
  1: _4 = &(((*_1) as Parse).0: ast::Error)
    SourceInfo(regex-syntax/src/error.rs:43:26-43:31)
  2: StorageLive(_5)
    SourceInfo(regex-syntax/src/error.rs:43:36-43:37)
  3: _5 = &(*_4)
    SourceInfo(regex-syntax/src/error.rs:43:36-43:37)
  4: StorageLive(_6)
    SourceInfo(regex-syntax/src/error.rs:43:42-43:43)
  5: _6 = &mut (*_2)
    SourceInfo(regex-syntax/src/error.rs:43:42-43:43)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/error.rs:43:36-43:44)
      kind: _0 = <ast::Error as core::fmt::Display>::fmt(move _5, move _6) -> [return: bb5, unwind: bb8]
  }
  preds [bb2]
  succs [bb5, bb8]

bb5
  0: StorageDead(_6)
    SourceInfo(regex-syntax/src/error.rs:43:43-43:44)
  1: StorageDead(_5)
    SourceInfo(regex-syntax/src/error.rs:43:43-43:44)
  2: StorageDead(_4)
    SourceInfo(regex-syntax/src/error.rs:43:43-43:44)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/error.rs:43:43-43:44)
      kind: goto -> bb7
  }
  preds [bb4]
  succs [bb7]

bb6
  0: StorageDead(_9)
    SourceInfo(regex-syntax/src/error.rs:44:47-44:48)
  1: StorageDead(_8)
    SourceInfo(regex-syntax/src/error.rs:44:47-44:48)
  2: StorageDead(_7)
    SourceInfo(regex-syntax/src/error.rs:44:47-44:48)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/error.rs:44:47-44:48)
      kind: goto -> bb7
  }
  preds [bb3]
  succs [bb7]

bb7
  Terminator {
      source_info: SourceInfo(regex-syntax/src/error.rs:46:6-46:6)
      kind: return
  }
  preds [bb5, bb6]
  succs []

bb8
  Terminator {
      source_info: SourceInfo(regex-syntax/src/error.rs:41:5-46:6)
      kind: resume
  }
  preds [bb3, bb4]
  succs []

