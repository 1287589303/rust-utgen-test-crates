bb0
  0: StorageLive(_2)
    SourceInfo(regex-syntax/src/lib.rs:349:5-349:29)
  1: StorageLive(_3)
    SourceInfo(regex-syntax/src/lib.rs:349:27-349:28)
  2: _3 = _1
    SourceInfo(regex-syntax/src/lib.rs:349:27-349:28)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/lib.rs:349:5-349:29)
      kind: _2 = try_is_word_character(move _3) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: StorageDead(_3)
    SourceInfo(regex-syntax/src/lib.rs:349:28-349:29)
  1: StorageLive(_4)
    SourceInfo(regex-syntax/src/lib.rs:349:37-349:75)
  2: StorageLive(_5)
    SourceInfo(regex-syntax/src/lib.rs:349:37-349:75)
  3: _5 = const "unicode-perl feature must be enabled"
    SourceInfo(regex-syntax/src/lib.rs:349:37-349:75)
  4: _4 = &(*_5)
    SourceInfo(regex-syntax/src/lib.rs:349:37-349:75)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/lib.rs:349:5-349:76)
      kind: _0 = core::result::Result::<bool, unicode::UnicodeWordError>::expect(move _2, move _4) -> [return: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_4)
    SourceInfo(regex-syntax/src/lib.rs:349:75-349:76)
  1: StorageDead(_2)
    SourceInfo(regex-syntax/src/lib.rs:349:75-349:76)
  2: StorageDead(_5)
    SourceInfo(regex-syntax/src/lib.rs:350:1-350:2)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/lib.rs:350:2-350:2)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-syntax/src/lib.rs:348:1-350:2)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

