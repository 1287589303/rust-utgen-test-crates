{
  "regex-syntax/src/error.rs:115:13:115:46": [
    {
      "Try": "write!(f, \"error: {}\", self.err)?"
    }
  ],
  "regex-syntax/src/error.rs:98:13:98:38": [
    {
      "Try": "write!(f, \"{}\", notated)?"
    }
  ],
  "regex-syntax/src/error.rs:113:17:113:53": [
    {
      "Try": "writeln!(f, \"{}\", notes.join(\"\\n\"))?"
    }
  ],
  "regex-syntax/src/error.rs:99:13:99:40": [
    {
      "Try": "writeln!(f, \"{}\", divider)?"
    }
  ],
  "regex-syntax/src/error.rs:119:13:119:38": [
    {
      "Try": "write!(f, \"{}\", notated)?"
    }
  ],
  "regex-syntax/src/error.rs:102:17:102:44": [
    {
      "Bool": {
        "Other": "spans.multi_line.is_empty()"
      }
    }
  ],
  "regex-syntax/src/error.rs:117:13:117:47": [
    {
      "Try": "writeln!(f, \"regex parse error:\")?"
    }
  ],
  "regex-syntax/src/error.rs:96:13:96:40": [
    {
      "Try": "writeln!(f, \"{}\", divider)?"
    }
  ],
  "regex-syntax/src/error.rs:104:29:104:46": [
    {
      "For": {
        "iter_var": "span",
        "iter_range": "&spans.multi_line"
      }
    }
  ],
  "regex-syntax/src/error.rs:110:25:110:44": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "span.end.column - 1",
          "lhs": "span.end.column",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/error.rs:95:13:95:47": [
    {
      "Try": "writeln!(f, \"regex parse error:\")?"
    }
  ],
  "regex-syntax/src/error.rs:120:13:120:46": [
    {
      "Try": "write!(f, \"error: {}\", self.err)?"
    }
  ],
  "regex-syntax/src/error.rs:92:12:92:39": [
    {
      "Bool": {
        "Other": "self.pattern.contains('\\n')"
      }
    }
  ]
}