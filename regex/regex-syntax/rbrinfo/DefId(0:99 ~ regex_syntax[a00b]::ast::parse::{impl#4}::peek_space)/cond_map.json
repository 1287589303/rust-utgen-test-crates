{
  "regex-syntax/src/ast/parse.rs:604:12:604:25": [
    {
      "Bool": {
        "Other": "self.is_eof()"
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:612:38:612:46": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "c == '#'",
          "lhs": "c",
          "rhs": "'#'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:610:16:610:33": [
    {
      "Bool": {
        "Other": "c.is_whitespace()"
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:614:37:614:46": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "c == '\\n'",
          "lhs": "c",
          "rhs": "'\\n'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:612:24:612:34": [
    {
      "Bool": {
        "Other": "in_comment"
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:601:13:601:37": [
    {
      "Bool": {
        "Other": "self.ignore_whitespace()"
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:607:25:607:63": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.offset() + self.char().len_utf8()",
          "lhs": "self.offset()",
          "rhs": "self.char().len_utf8()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:614:23:614:33": [
    {
      "Bool": {
        "Other": "in_comment"
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:609:23:609:61": [
    {
      "For": {
        "iter_var": "(i, c)",
        "iter_range": "self.pattern()[start..].char_indices()"
      }
    }
  ]
}