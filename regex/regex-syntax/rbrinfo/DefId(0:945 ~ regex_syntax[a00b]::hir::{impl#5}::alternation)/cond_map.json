{
  "regex-syntax/src/hir/mod.rs:588:12:588:26": [
    {
      "Bool": {
        "Other": "new.is_empty()"
      }
    }
  ],
  "regex-syntax/src/hir/mod.rs:616:12:616:45": [
    {
      "Bool": {
        "Other": "let Some(cls) = class_chars(&new)"
      }
    }
  ],
  "regex-syntax/src/hir/mod.rs:626:21:626:44": [
    {
      "Match": {
        "match_source": "regex-syntax/src/hir/mod.rs:626:21:626:44",
        "match_str": "lift_common_prefix(new)",
        "match_kind": {
          "Enum": [
            "Ok",
            "Err"
          ]
        },
        "arms": {
          "regex-syntax/src/hir/mod.rs:627:13:627:20": {
            "pat": {
              "pat_str": "Ok(hir)",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/mod.rs:627:24:627:34"
          },
          "regex-syntax/src/hir/mod.rs:628:13:628:27": {
            "pat": {
              "pat_str": "Err(unchanged)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/mod.rs:628:31:628:40"
          }
        }
      }
    }
  ],
  "regex-syntax/src/hir/mod.rs:590:19:590:33": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "new.len() == 1",
          "lhs": "new.len()",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/hir/mod.rs:602:12:602:56": [
    {
      "Bool": {
        "Other": "let Some(singletons) = singleton_chars(&new)"
      }
    }
  ],
  "regex-syntax/src/hir/mod.rs:577:20:577:24": [
    {
      "For": {
        "iter_var": "sub",
        "iter_range": "subs"
      }
    }
  ],
  "regex-syntax/src/hir/mod.rs:579:19:579:23": [
    {
      "Match": {
        "match_source": "regex-syntax/src/hir/mod.rs:579:19:579:23",
        "match_str": "kind",
        "match_kind": {
          "Enum": [
            "Empty",
            "Literal",
            "Class",
            "Look",
            "Repetition",
            "Capture",
            "Concat",
            "Alternation"
          ]
        },
        "arms": {
          "regex-syntax/src/hir/mod.rs:583:17:583:21": {
            "pat": {
              "pat_str": "kind",
              "kind": {
                "Other": null
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/mod.rs:583:25:585:18"
          },
          "regex-syntax/src/hir/mod.rs:580:17:580:44": {
            "pat": {
              "pat_str": "HirKind::Alternation(subs2)",
              "kind": {
                "Enum": 7
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/mod.rs:580:48:582:18"
          }
        }
      }
    }
  ],
  "regex-syntax/src/hir/mod.rs:608:12:608:56": [
    {
      "Bool": {
        "Other": "let Some(singletons) = singleton_bytes(&new)"
      }
    }
  ],
  "regex-syntax/src/hir/mod.rs:619:12:619:45": [
    {
      "Bool": {
        "Other": "let Some(cls) = class_bytes(&new)"
      }
    }
  ]
}