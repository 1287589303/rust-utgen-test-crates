bb0
  0: StorageLive(_2)
    SourceInfo(regex-syntax/src/ast/parse.rs:643:13-643:21)
  1: StorageLive(_3)
    SourceInfo(regex-syntax/src/ast/parse.rs:644:21-644:79)
  2: StorageLive(_4)
    SourceInfo(regex-syntax/src/ast/parse.rs:644:21-644:70)
  3: StorageLive(_5)
    SourceInfo(regex-syntax/src/ast/parse.rs:644:21-644:34)
  4: StorageLive(_6)
    SourceInfo(regex-syntax/src/ast/parse.rs:644:21-644:25)
  5: _6 = &(*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:644:21-644:25)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:644:21-644:34)
      kind: _5 = ast::parse::ParserI::<'_, P>::offset(move _6) -> [return: bb1, unwind: bb17]
  }
  preds []
  succs [bb1, bb17]

bb1
  0: StorageDead(_6)
    SourceInfo(regex-syntax/src/ast/parse.rs:644:33-644:34)
  1: StorageLive(_7)
    SourceInfo(regex-syntax/src/ast/parse.rs:644:47-644:69)
  2: StorageLive(_8)
    SourceInfo(regex-syntax/src/ast/parse.rs:644:47-644:58)
  3: StorageLive(_9)
    SourceInfo(regex-syntax/src/ast/parse.rs:644:47-644:51)
  4: _9 = &(*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:644:47-644:51)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:644:47-644:58)
      kind: _8 = ast::parse::ParserI::<'_, P>::char(move _9) -> [return: bb2, unwind: bb17]
  }
  preds [bb0]
  succs [bb2, bb17]

bb2
  0: StorageDead(_9)
    SourceInfo(regex-syntax/src/ast/parse.rs:644:57-644:58)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:644:47-644:69)
      kind: _7 = core::char::methods::<impl char>::len_utf8(move _8) -> [return: bb3, unwind: bb17]
  }
  preds [bb1]
  succs [bb3, bb17]

bb3
  0: StorageDead(_8)
    SourceInfo(regex-syntax/src/ast/parse.rs:644:68-644:69)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:644:21-644:70)
      kind: _4 = core::num::<impl usize>::checked_add(move _5, move _7) -> [return: bb4, unwind: bb17]
  }
  preds [bb2]
  succs [bb4, bb17]

bb4
  0: StorageDead(_7)
    SourceInfo(regex-syntax/src/ast/parse.rs:644:69-644:70)
  1: StorageDead(_5)
    SourceInfo(regex-syntax/src/ast/parse.rs:644:69-644:70)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:644:21-644:79)
      kind: _3 = core::option::Option::<usize>::unwrap(move _4) -> [return: bb5, unwind: bb17]
  }
  preds [bb3]
  succs [bb5, bb17]

bb5
  0: StorageDead(_4)
    SourceInfo(regex-syntax/src/ast/parse.rs:644:78-644:79)
  1: StorageLive(_10)
    SourceInfo(regex-syntax/src/ast/parse.rs:645:19-645:30)
  2: StorageLive(_11)
    SourceInfo(regex-syntax/src/ast/parse.rs:645:19-645:23)
  3: _11 = &(*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:645:19-645:23)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:645:19-645:30)
      kind: _10 = ast::parse::ParserI::<'_, P>::line(move _11) -> [return: bb6, unwind: bb17]
  }
  preds [bb4]
  succs [bb6, bb17]

bb6
  0: StorageDead(_11)
    SourceInfo(regex-syntax/src/ast/parse.rs:645:29-645:30)
  1: StorageLive(_12)
    SourceInfo(regex-syntax/src/ast/parse.rs:646:21-646:58)
  2: StorageLive(_13)
    SourceInfo(regex-syntax/src/ast/parse.rs:646:21-646:49)
  3: StorageLive(_14)
    SourceInfo(regex-syntax/src/ast/parse.rs:646:21-646:34)
  4: StorageLive(_15)
    SourceInfo(regex-syntax/src/ast/parse.rs:646:21-646:25)
  5: _15 = &(*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:646:21-646:25)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:646:21-646:34)
      kind: _14 = ast::parse::ParserI::<'_, P>::column(move _15) -> [return: bb7, unwind: bb17]
  }
  preds [bb5]
  succs [bb7, bb17]

bb7
  0: StorageDead(_15)
    SourceInfo(regex-syntax/src/ast/parse.rs:646:33-646:34)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:646:21-646:49)
      kind: _13 = core::num::<impl usize>::checked_add(move _14, const 1_usize) -> [return: bb8, unwind: bb17]
  }
  preds [bb6]
  succs [bb8, bb17]

bb8
  0: StorageDead(_14)
    SourceInfo(regex-syntax/src/ast/parse.rs:646:48-646:49)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:646:21-646:58)
      kind: _12 = core::option::Option::<usize>::unwrap(move _13) -> [return: bb9, unwind: bb17]
  }
  preds [bb7]
  succs [bb9, bb17]

bb9
  0: StorageDead(_13)
    SourceInfo(regex-syntax/src/ast/parse.rs:646:57-646:58)
  1: _2 = ast::Position { offset: move _3, line: move _10, column: move _12 }
    SourceInfo(regex-syntax/src/ast/parse.rs:643:24-647:10)
  2: StorageDead(_12)
    SourceInfo(regex-syntax/src/ast/parse.rs:647:9-647:10)
  3: StorageDead(_10)
    SourceInfo(regex-syntax/src/ast/parse.rs:647:9-647:10)
  4: StorageDead(_3)
    SourceInfo(regex-syntax/src/ast/parse.rs:647:9-647:10)
  5: FakeRead(ForLet(None), _2)
    SourceInfo(regex-syntax/src/ast/parse.rs:643:13-643:21)
  6: StorageLive(_16)
    SourceInfo(regex-syntax/src/ast/parse.rs:648:9-651:10)
  7: StorageLive(_17)
    SourceInfo(regex-syntax/src/ast/parse.rs:648:12-648:31)
  8: StorageLive(_18)
    SourceInfo(regex-syntax/src/ast/parse.rs:648:12-648:23)
  9: StorageLive(_19)
    SourceInfo(regex-syntax/src/ast/parse.rs:648:12-648:16)
  10: _19 = &(*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:648:12-648:16)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:648:12-648:23)
      kind: _18 = ast::parse::ParserI::<'_, P>::char(move _19) -> [return: bb10, unwind: bb17]
  }
  preds [bb8]
  succs [bb10, bb17]

bb10
  0: StorageDead(_19)
    SourceInfo(regex-syntax/src/ast/parse.rs:648:22-648:23)
  1: _17 = Eq(move _18, const '\n')
    SourceInfo(regex-syntax/src/ast/parse.rs:648:12-648:31)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:648:12-648:31)
      kind: switchInt(move _17) -> [0: bb13, otherwise: bb11]
  }
  preds [bb9]
  succs [bb11, bb13]

bb11
  0: StorageDead(_18)
    SourceInfo(regex-syntax/src/ast/parse.rs:648:30-648:31)
  1: _20 = AddWithOverflow((_2.1: usize), const 1_usize)
    SourceInfo(regex-syntax/src/ast/parse.rs:649:13-649:27)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:649:13-649:27)
      kind: assert(!move (_20.1: bool), "attempt to compute `{} + {}`, which would overflow", (_2.1: usize), const 1_usize) -> [success: bb12, unwind: bb17]
  }
  preds [bb10]
  succs [bb12, bb17]

bb12
  0: (_2.1: usize) = move (_20.0: usize)
    SourceInfo(regex-syntax/src/ast/parse.rs:649:13-649:27)
  1: (_2.2: usize) = const 1_usize
    SourceInfo(regex-syntax/src/ast/parse.rs:650:13-650:28)
  2: _16 = const ()
    SourceInfo(regex-syntax/src/ast/parse.rs:648:32-651:10)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:648:9-651:10)
      kind: goto -> bb14
  }
  preds [bb11]
  succs [bb14]

bb13
  0: StorageDead(_18)
    SourceInfo(regex-syntax/src/ast/parse.rs:648:30-648:31)
  1: _16 = const ()
    SourceInfo(regex-syntax/src/ast/parse.rs:651:10-651:10)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:648:9-651:10)
      kind: goto -> bb14
  }
  preds [bb10]
  succs [bb14]

bb14
  0: StorageDead(_17)
    SourceInfo(regex-syntax/src/ast/parse.rs:651:9-651:10)
  1: StorageDead(_16)
    SourceInfo(regex-syntax/src/ast/parse.rs:651:9-651:10)
  2: StorageLive(_21)
    SourceInfo(regex-syntax/src/ast/parse.rs:652:19-652:29)
  3: StorageLive(_22)
    SourceInfo(regex-syntax/src/ast/parse.rs:652:19-652:23)
  4: _22 = &(*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:652:19-652:23)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:652:19-652:29)
      kind: _21 = ast::parse::ParserI::<'_, P>::pos(move _22) -> [return: bb15, unwind: bb17]
  }
  preds [bb12, bb13]
  succs [bb15, bb17]

bb15
  0: StorageDead(_22)
    SourceInfo(regex-syntax/src/ast/parse.rs:652:28-652:29)
  1: StorageLive(_23)
    SourceInfo(regex-syntax/src/ast/parse.rs:652:31-652:35)
  2: _23 = _2
    SourceInfo(regex-syntax/src/ast/parse.rs:652:31-652:35)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:652:9-652:36)
      kind: _0 = ast::Span::new(move _21, move _23) -> [return: bb16, unwind: bb17]
  }
  preds [bb14]
  succs [bb16, bb17]

bb16
  0: StorageDead(_23)
    SourceInfo(regex-syntax/src/ast/parse.rs:652:35-652:36)
  1: StorageDead(_21)
    SourceInfo(regex-syntax/src/ast/parse.rs:652:35-652:36)
  2: StorageDead(_2)
    SourceInfo(regex-syntax/src/ast/parse.rs:653:5-653:6)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:653:6-653:6)
      kind: return
  }
  preds [bb15]
  succs []

bb17
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:642:5-653:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb6, bb7, bb8, bb9, bb11, bb14, bb15]
  succs []

