{
  "regex-syntax/src/ast/parse.rs:1966:21:1966:49": [
    {
      "Try": "self.parse_set_class_item()?"
    }
  ],
  "regex-syntax/src/ast/parse.rs:1957:16:1957:46": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.peek_space() == Some('-')",
          "lhs": "self.peek_space()",
          "rhs": "Some('-')",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1945:21:1945:49": [
    {
      "Try": "self.parse_set_class_item()?"
    }
  ],
  "regex-syntax/src/ast/parse.rs:1970:18:1970:49": [
    {
      "Try": "prim2.into_class_literal(self)?"
    }
  ],
  "regex-syntax/src/ast/parse.rs:1969:20:1969:51": [
    {
      "Try": "prim1.into_class_literal(self)?"
    }
  ],
  "regex-syntax/src/ast/parse.rs:1947:12:1947:25": [
    {
      "Bool": {
        "Other": "self.is_eof()"
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1956:16:1956:46": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.peek_space() == Some(']')",
          "lhs": "self.peek_space()",
          "rhs": "Some(']')",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1972:13:1972:29": [
    {
      "Bool": {
        "Other": "range.is_valid()"
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1955:12:1955:30": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "self.char() != '-'",
          "lhs": "self.char()",
          "rhs": "'-'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1963:13:1963:39": [
    {
      "Bool": {
        "Other": "self.bump_and_bump_space()"
      }
    }
  ]
}