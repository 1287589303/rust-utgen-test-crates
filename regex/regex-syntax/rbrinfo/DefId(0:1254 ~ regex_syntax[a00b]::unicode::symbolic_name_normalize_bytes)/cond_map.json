{
  "regex-syntax/src/unicode.rs:938:8:938:22": [
    {
      "Bool": {
        "Other": "starts_with_is"
      }
    }
  ],
  "regex-syntax/src/unicode.rs:924:25:924:34": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "b == b'_'",
          "lhs": "b",
          "rhs": "b'_'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/unicode.rs:938:26:938:41": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "next_write == 1",
          "lhs": "next_write",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/unicode.rs:911:16:911:40": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "slice[0..2] == b\"IS\"[..]",
          "lhs": "slice[0..2]",
          "rhs": "b\"IS\"[..]",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/unicode.rs:910:26:910:50": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "slice[0..2] == b\"is\"[..]",
          "lhs": "slice[0..2]",
          "rhs": "b\"is\"[..]",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/unicode.rs:938:45:938:61": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "slice[0] == b'c'",
          "lhs": "slice[0]",
          "rhs": "b'c'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/unicode.rs:927:33:927:50": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "b + (b'a' - b'A')",
          "lhs": "b",
          "rhs": "(b'a' - b'A')",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/unicode.rs:913:16:913:40": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "slice[0..2] == b\"Is\"[..]",
          "lhs": "slice[0..2]",
          "rhs": "b\"Is\"[..]",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/unicode.rs:927:37:927:50": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(b'a' - b'A')",
          "lhs": "b'a'",
          "rhs": "b'A'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/unicode.rs:914:12:914:26": [
    {
      "Bool": {
        "Other": "starts_with_is"
      }
    }
  ],
  "regex-syntax/src/unicode.rs:926:32:926:41": [
    {
      "Bool": {
        "Binary": {
          "kind": "Le",
          "expr": "b <= b'Z'",
          "lhs": "b",
          "rhs": "b'Z'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/unicode.rs:926:19:926:28": [
    {
      "Bool": {
        "Binary": {
          "kind": "Le",
          "expr": "b'A' <= b",
          "lhs": "b'A'",
          "rhs": "b",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/unicode.rs:919:14:919:32": [
    {
      "For": {
        "iter_var": "i",
        "iter_range": "start..slice.len()"
      }
    }
  ],
  "regex-syntax/src/unicode.rs:924:38:924:47": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "b == b'-'",
          "lhs": "b",
          "rhs": "b'-'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/unicode.rs:929:19:929:28": [
    {
      "Bool": {
        "Binary": {
          "kind": "Le",
          "expr": "b <= 0x7F",
          "lhs": "b",
          "rhs": "0x7F",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/unicode.rs:924:12:924:21": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "b == b' '",
          "lhs": "b",
          "rhs": "b' '",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/unicode.rs:912:16:912:40": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "slice[0..2] == b\"iS\"[..]",
          "lhs": "slice[0..2]",
          "rhs": "b\"iS\"[..]",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/unicode.rs:908:8:908:24": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ge",
          "expr": "slice.len() >= 2",
          "lhs": "slice.len()",
          "rhs": "2",
          "cmp_with_int": true
        }
      }
    }
  ]
}