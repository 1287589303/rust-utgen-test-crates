{
  "regex-syntax/src/hir/print.rs:269:25:269:49": [
    {
      "Try": "self.wtr.write_str(\"*\")?"
    }
  ],
  "regex-syntax/src/hir/print.rs:297:17:297:42": [
    {
      "Try": "self.wtr.write_str(r\")\")?"
    }
  ],
  "regex-syntax/src/hir/print.rs:257:15:257:26": [
    {
      "Match": {
        "match_source": "regex-syntax/src/hir/print.rs:257:15:257:26",
        "match_str": "*hir.kind()",
        "match_kind": {
          "Enum": [
            "Empty",
            "Literal",
            "Class",
            "Look",
            "Repetition",
            "Capture",
            "Concat",
            "Alternation"
          ]
        },
        "arms": {
          "regex-syntax/src/hir/print.rs:260:15:260:34": {
            "pat": {
              "pat_str": "HirKind::Literal(_)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/print.rs:262:35:262:37"
          },
          "regex-syntax/src/hir/print.rs:263:13:263:39": {
            "pat": {
              "pat_str": "HirKind::Repetition(ref x)",
              "kind": {
                "Enum": 4
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/print.rs:263:43:293:14"
          },
          "regex-syntax/src/hir/print.rs:259:13:259:27": {
            "pat": {
              "pat_str": "HirKind::Empty",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/print.rs:262:35:262:37"
          },
          "regex-syntax/src/hir/print.rs:261:15:261:32": {
            "pat": {
              "pat_str": "HirKind::Class(_)",
              "kind": {
                "Enum": 2
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/print.rs:262:35:262:37"
          },
          "regex-syntax/src/hir/print.rs:295:15:295:33": {
            "pat": {
              "pat_str": "HirKind::Concat(_)",
              "kind": {
                "Enum": 6
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/print.rs:296:42:298:14"
          },
          "regex-syntax/src/hir/print.rs:294:13:294:32": {
            "pat": {
              "pat_str": "HirKind::Capture(_)",
              "kind": {
                "Enum": 5
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/print.rs:296:42:298:14"
          },
          "regex-syntax/src/hir/print.rs:262:15:262:31": {
            "pat": {
              "pat_str": "HirKind::Look(_)",
              "kind": {
                "Enum": 3
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/print.rs:262:35:262:37"
          },
          "regex-syntax/src/hir/print.rs:296:15:296:38": {
            "pat": {
              "pat_str": "HirKind::Alternation(_)",
              "kind": {
                "Enum": 7
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/print.rs:296:42:298:14"
          }
        }
      }
    }
  ],
  "regex-syntax/src/hir/print.rs:266:25:266:49": [
    {
      "Try": "self.wtr.write_str(\"?\")?"
    }
  ],
  "regex-syntax/src/hir/print.rs:264:23:264:37": [
    {
      "Match": {
        "match_source": "regex-syntax/src/hir/print.rs:264:23:264:37",
        "match_str": "(x.min, x.max)",
        "match_kind": {
          "StructLike": null
        },
        "arms": {
          "regex-syntax/src/hir/print.rs:281:21:281:33": {
            "pat": {
              "pat_str": "(m, Some(n))",
              "kind": {
                "StructLike": {
                  "0": [
                    null,
                    "regex-syntax/src/hir/print.rs:281:22:281:23"
                  ],
                  "1": [
                    null,
                    "regex-syntax/src/hir/print.rs:281:25:281:32"
                  ]
                }
              }
            },
            "guard": {
              "regex-syntax/src/hir/print.rs:281:37:281:43": [
                {
                  "Bool": {
                    "Binary": {
                      "kind": "Eq",
                      "expr": "m == n",
                      "lhs": "m",
                      "rhs": "n",
                      "cmp_with_int": false
                    }
                  }
                }
              ]
            },
            "body_source": "regex-syntax/src/hir/print.rs:281:47:285:22"
          },
          "regex-syntax/src/hir/print.rs:286:21:286:33": {
            "pat": {
              "pat_str": "(m, Some(n))",
              "kind": {
                "StructLike": {
                  "1": [
                    null,
                    "regex-syntax/src/hir/print.rs:286:25:286:32"
                  ],
                  "0": [
                    null,
                    "regex-syntax/src/hir/print.rs:286:22:286:23"
                  ]
                }
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/print.rs:286:37:288:22"
          },
          "regex-syntax/src/hir/print.rs:274:21:274:33": {
            "pat": {
              "pat_str": "(1, Some(1))",
              "kind": {
                "StructLike": {
                  "0": [
                    1,
                    "regex-syntax/src/hir/print.rs:274:22:274:23"
                  ],
                  "1": [
                    null,
                    "regex-syntax/src/hir/print.rs:274:25:274:32"
                  ]
                }
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/print.rs:274:37:277:22"
          },
          "regex-syntax/src/hir/print.rs:265:21:265:33": {
            "pat": {
              "pat_str": "(0, Some(1))",
              "kind": {
                "StructLike": {
                  "0": [
                    0,
                    "regex-syntax/src/hir/print.rs:265:22:265:23"
                  ],
                  "1": [
                    null,
                    "regex-syntax/src/hir/print.rs:265:25:265:32"
                  ]
                }
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/print.rs:265:37:267:22"
          },
          "regex-syntax/src/hir/print.rs:268:21:268:30": {
            "pat": {
              "pat_str": "(0, None)",
              "kind": {
                "StructLike": {
                  "1": [
                    null,
                    "regex-syntax/src/hir/print.rs:268:25:268:29"
                  ],
                  "0": [
                    0,
                    "regex-syntax/src/hir/print.rs:268:22:268:23"
                  ]
                }
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/print.rs:268:34:270:22"
          },
          "regex-syntax/src/hir/print.rs:271:21:271:30": {
            "pat": {
              "pat_str": "(1, None)",
              "kind": {
                "StructLike": {
                  "0": [
                    1,
                    "regex-syntax/src/hir/print.rs:271:22:271:23"
                  ],
                  "1": [
                    null,
                    "regex-syntax/src/hir/print.rs:271:25:271:29"
                  ]
                }
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/print.rs:271:34:273:22"
          },
          "regex-syntax/src/hir/print.rs:278:21:278:30": {
            "pat": {
              "pat_str": "(m, None)",
              "kind": {
                "StructLike": {
                  "1": [
                    null,
                    "regex-syntax/src/hir/print.rs:278:25:278:29"
                  ],
                  "0": [
                    null,
                    "regex-syntax/src/hir/print.rs:278:22:278:23"
                  ]
                }
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/print.rs:278:34:280:22"
          }
        }
      }
    }
  ],
  "regex-syntax/src/hir/print.rs:281:37:281:43": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "m == n",
          "lhs": "m",
          "rhs": "n",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-syntax/src/hir/print.rs:287:25:287:61": [
    {
      "Try": "write!(self.wtr, \"{{{},{}}}\", m, n)?"
    }
  ],
  "regex-syntax/src/hir/print.rs:291:21:291:45": [
    {
      "Try": "self.wtr.write_str(\"?\")?"
    }
  ],
  "regex-syntax/src/hir/print.rs:290:21:290:29": [
    {
      "Bool": {
        "Other": "x.greedy"
      }
    }
  ],
  "regex-syntax/src/hir/print.rs:279:25:279:56": [
    {
      "Try": "write!(self.wtr, \"{{{},}}\", m)?"
    }
  ],
  "regex-syntax/src/hir/print.rs:272:25:272:49": [
    {
      "Try": "self.wtr.write_str(\"+\")?"
    }
  ],
  "regex-syntax/src/hir/print.rs:282:25:282:55": [
    {
      "Try": "write!(self.wtr, \"{{{}}}\", m)?"
    }
  ]
}