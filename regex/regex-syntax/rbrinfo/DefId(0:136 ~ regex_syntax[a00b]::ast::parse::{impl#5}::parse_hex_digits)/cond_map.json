{
  "regex-syntax/src/ast/parse.rs:1752:16:1752:21": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "i > 0",
          "lhs": "i",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1752:26:1752:52": [
    {
      "Bool": {
        "Other": "self.bump_and_bump_space()"
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1751:18:1751:34": [
    {
      "For": {
        "iter_var": "i",
        "iter_range": "0..kind.digits()"
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1756:17:1756:36": [
    {
      "Bool": {
        "Other": "is_hex(self.char())"
      }
    }
  ],
  "regex-syntax/src/ast/parse.rs:1769:15:1769:73": [
    {
      "Match": {
        "match_source": "regex-syntax/src/ast/parse.rs:1769:15:1769:73",
        "match_str": "u32::from_str_radix(hex, 16).ok().and_then(char::from_u32)",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-syntax/src/ast/parse.rs:1774:13:1774:20": {
            "pat": {
              "pat_str": "Some(c)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/ast/parse.rs:1774:24:1778:15"
          },
          "regex-syntax/src/ast/parse.rs:1770:13:1770:17": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/ast/parse.rs:1770:21:1773:15"
          }
        }
      }
    }
  ]
}