bb0
  0: StorageLive(_4)
    SourceInfo(regex-syntax/src/unicode.rs:181:9-181:30)
  1: StorageLive(_5)
    SourceInfo(regex-syntax/src/unicode.rs:181:17-181:29)
  2: StorageLive(_6)
    SourceInfo(regex-syntax/src/unicode.rs:181:17-181:22)
  3: _6 = _2
    SourceInfo(regex-syntax/src/unicode.rs:181:17-181:22)
  4: StorageLive(_7)
    SourceInfo(regex-syntax/src/unicode.rs:181:26-181:29)
  5: _7 = _3
    SourceInfo(regex-syntax/src/unicode.rs:181:26-181:29)
  6: _5 = Le(move _6, move _7)
    SourceInfo(regex-syntax/src/unicode.rs:181:17-181:29)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/unicode.rs:181:17-181:29)
      kind: switchInt(move _5) -> [0: bb2, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_7)
    SourceInfo(regex-syntax/src/unicode.rs:181:28-181:29)
  1: StorageDead(_6)
    SourceInfo(regex-syntax/src/unicode.rs:181:28-181:29)
  2: _4 = const ()
    SourceInfo(regex-syntax/src/unicode.rs:181:30-181:30)
  3: StorageDead(_5)
    SourceInfo(regex-syntax/src/unicode.rs:181:29-181:30)
  4: StorageDead(_4)
    SourceInfo(regex-syntax/src/unicode.rs:181:29-181:30)
  5: StorageLive(_9)
    SourceInfo(regex-syntax/src/unicode.rs:182:9-191:15)
  6: StorageLive(_10)
    SourceInfo(regex-syntax/src/unicode.rs:182:9-191:15)
  7: StorageLive(_11)
    SourceInfo(regex-syntax/src/unicode.rs:182:9-182:19)
  8: _11 = &(*((*_1).0: &[(char, &[char])]))
    SourceInfo(regex-syntax/src/unicode.rs:182:9-182:19)
  9: StorageLive(_12)
    SourceInfo(regex-syntax/src/unicode.rs:183:31-191:14)
  10: StorageLive(_13)
    SourceInfo(regex-syntax/src/unicode.rs:183:31-191:14)
  11: _13 = &_2
    SourceInfo(regex-syntax/src/unicode.rs:183:31-191:14)
  12: StorageLive(_14)
    SourceInfo(regex-syntax/src/unicode.rs:183:31-191:14)
  13: _14 = &_3
    SourceInfo(regex-syntax/src/unicode.rs:183:31-191:14)
  14: _12 = {closure@regex-syntax/src/unicode.rs:183:31: 183:40} { start: move _13, end: move _14 }
    SourceInfo(regex-syntax/src/unicode.rs:183:31-191:14)
  15: StorageDead(_14)
    SourceInfo(regex-syntax/src/unicode.rs:183:39-183:40)
  16: StorageDead(_13)
    SourceInfo(regex-syntax/src/unicode.rs:183:39-183:40)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/unicode.rs:182:9-191:15)
      kind: _10 = core::slice::<impl [(char, &[char])]>::binary_search_by::<'_, {closure@regex-syntax/src/unicode.rs:183:31: 183:40}>(move _11, move _12) -> [return: bb3, unwind: bb5]
  }
  preds [bb0]
  succs [bb3, bb5]

bb2
  0: StorageDead(_7)
    SourceInfo(regex-syntax/src/unicode.rs:181:28-181:29)
  1: StorageDead(_6)
    SourceInfo(regex-syntax/src/unicode.rs:181:28-181:29)
  2: StorageLive(_8)
    SourceInfo(regex-syntax/src/unicode.rs:181:9-181:30)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/unicode.rs:181:9-181:30)
      kind: _8 = core::panicking::panic(const "assertion failed: start <= end") -> bb5
  }
  preds [bb0]
  succs [bb5]

bb3
  0: _9 = &_10
    SourceInfo(regex-syntax/src/unicode.rs:182:9-191:15)
  1: StorageDead(_12)
    SourceInfo(regex-syntax/src/unicode.rs:191:14-191:15)
  2: StorageDead(_11)
    SourceInfo(regex-syntax/src/unicode.rs:191:14-191:15)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/unicode.rs:182:9-192:21)
      kind: _0 = core::result::Result::<usize, usize>::is_ok(move _9) -> [return: bb4, unwind: bb5]
  }
  preds [bb1]
  succs [bb4, bb5]

bb4
  0: StorageDead(_9)
    SourceInfo(regex-syntax/src/unicode.rs:192:20-192:21)
  1: StorageDead(_10)
    SourceInfo(regex-syntax/src/unicode.rs:193:5-193:6)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/unicode.rs:193:6-193:6)
      kind: return
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(regex-syntax/src/unicode.rs:178:5-193:6)
      kind: resume
  }
  preds [bb1, bb2, bb3]
  succs []

