bb0
  0: StorageLive(_2)
    SourceInfo(regex-syntax/src/ast/parse.rs:626:9-626:22)
  1: StorageLive(_3)
    SourceInfo(regex-syntax/src/ast/parse.rs:626:9-626:13)
  2: _3 = &(*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:626:9-626:13)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:626:9-626:22)
      kind: _2 = ast::parse::ParserI::<'_, P>::offset(move _3) -> [return: bb1, unwind: bb4]
  }
  preds []
  succs [bb1, bb4]

bb1
  0: StorageDead(_3)
    SourceInfo(regex-syntax/src/ast/parse.rs:626:21-626:22)
  1: StorageLive(_4)
    SourceInfo(regex-syntax/src/ast/parse.rs:626:26-626:46)
  2: StorageLive(_5)
    SourceInfo(regex-syntax/src/ast/parse.rs:626:26-626:40)
  3: StorageLive(_6)
    SourceInfo(regex-syntax/src/ast/parse.rs:626:26-626:40)
  4: StorageLive(_7)
    SourceInfo(regex-syntax/src/ast/parse.rs:626:26-626:30)
  5: _7 = &(*_1)
    SourceInfo(regex-syntax/src/ast/parse.rs:626:26-626:30)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:626:26-626:40)
      kind: _6 = ast::parse::ParserI::<'_, P>::pattern(move _7) -> [return: bb2, unwind: bb4]
  }
  preds [bb0]
  succs [bb2, bb4]

bb2
  0: _5 = &(*_6)
    SourceInfo(regex-syntax/src/ast/parse.rs:626:26-626:40)
  1: StorageDead(_7)
    SourceInfo(regex-syntax/src/ast/parse.rs:626:39-626:40)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:626:26-626:46)
      kind: _4 = core::str::<impl str>::len(move _5) -> [return: bb3, unwind: bb4]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: StorageDead(_5)
    SourceInfo(regex-syntax/src/ast/parse.rs:626:45-626:46)
  1: _0 = Eq(move _2, move _4)
    SourceInfo(regex-syntax/src/ast/parse.rs:626:9-626:46)
  2: StorageDead(_4)
    SourceInfo(regex-syntax/src/ast/parse.rs:626:45-626:46)
  3: StorageDead(_2)
    SourceInfo(regex-syntax/src/ast/parse.rs:626:45-626:46)
  4: StorageDead(_6)
    SourceInfo(regex-syntax/src/ast/parse.rs:627:5-627:6)
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:627:6-627:6)
      kind: return
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(regex-syntax/src/ast/parse.rs:625:5-627:6)
      kind: resume
  }
  preds [bb0, bb1, bb2]
  succs []

