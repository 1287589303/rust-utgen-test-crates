{
  "regex-syntax/src/hir/visitor.rs:141:29:141:60": [
    {
      "Try": "visitor.visit_alternation_in()?"
    }
  ],
  "regex-syntax/src/hir/visitor.rs:138:20:138:49": [
    {
      "Bool": {
        "Other": "let Some(x) = self.pop(frame)"
      }
    }
  ],
  "regex-syntax/src/hir/visitor.rs:139:27:139:28": [
    {
      "Match": {
        "match_source": "regex-syntax/src/hir/visitor.rs:139:27:139:28",
        "match_str": "x",
        "match_kind": {
          "Enum": [
            "Repetition",
            "Capture",
            "Concat",
            "Alternation"
          ]
        },
        "arms": {
          "regex-syntax/src/hir/visitor.rs:140:25:140:50": {
            "pat": {
              "pat_str": "Frame::Alternation { .. }",
              "kind": {
                "Enum": 3
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/visitor.rs:140:54:142:26"
          },
          "regex-syntax/src/hir/visitor.rs:146:25:146:26": {
            "pat": {
              "pat_str": "_",
              "kind": "Wild"
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/visitor.rs:146:30:146:32"
          },
          "regex-syntax/src/hir/visitor.rs:143:25:143:45": {
            "pat": {
              "pat_str": "Frame::Concat { .. }",
              "kind": {
                "Enum": 2
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/visitor.rs:143:49:145:26"
          }
        }
      }
    }
  ],
  "regex-syntax/src/hir/visitor.rs:154:17:154:46": [
    {
      "Try": "visitor.visit_post(post_hir)?"
    }
  ],
  "regex-syntax/src/hir/visitor.rs:118:13:118:36": [
    {
      "Try": "visitor.visit_pre(hir)?"
    }
  ],
  "regex-syntax/src/hir/visitor.rs:127:13:127:37": [
    {
      "Try": "visitor.visit_post(hir)?"
    }
  ],
  "regex-syntax/src/hir/visitor.rs:144:29:144:55": [
    {
      "Try": "visitor.visit_concat_in()?"
    }
  ],
  "regex-syntax/src/hir/visitor.rs:119:16:119:46": [
    {
      "Bool": {
        "Other": "let Some(x) = self.induct(hir)"
      }
    }
  ],
  "regex-syntax/src/hir/visitor.rs:132:47:132:63": [
    {
      "Match": {
        "match_source": "regex-syntax/src/hir/visitor.rs:132:47:132:63",
        "match_str": "self.stack.pop()",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-syntax/src/hir/visitor.rs:133:21:133:25": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/visitor.rs:133:29:133:52"
          },
          "regex-syntax/src/hir/visitor.rs:134:21:134:44": {
            "pat": {
              "pat_str": "Some((post_hir, frame))",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-syntax/src/hir/visitor.rs:134:48:134:65"
          }
        }
      }
    }
  ]
}