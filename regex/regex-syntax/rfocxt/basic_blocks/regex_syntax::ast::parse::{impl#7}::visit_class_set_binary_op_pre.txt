[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = &mut (*_1),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &((*_2).0: ast::Span),
            _4 = &(*_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:2405:9: 2405:40 (#0),
                    scope: scope[0],
                },
                kind: _0 = ast::parse::NestLimiter::<'_, '_, P>::increment_depth(move _3, move _4) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:2406:6: 2406:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:2401:5: 2406:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:2404:10: 2404:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut ast::parse::NestLimiter<'{erased}, '{erased}, P/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:2402:9: 2402:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/ast/parse.rs:2403:14: 2403:36 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/ast/parse.rs:2403:9: 2403:12 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:2403:9: 2403:12 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} ast::ClassSetBinaryOp,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:2403:9: 2403:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/parse.rs:2405:9: 2405:40 (#0),
                },
            ),
        ),
        ty: &'{erased} mut ast::parse::NestLimiter<'{erased}, '{erased}, P/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:2405:9: 2405:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/parse.rs:2405:9: 2405:40 (#0),
                },
            ),
        ),
        ty: &'{erased} ast::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:2405:30: 2405:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/parse.rs:2405:9: 2405:40 (#0),
                },
            ),
        ),
        ty: &'{erased} ast::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:2405:30: 2405:39 (#0),
            scope: scope[0],
        },
    },
]