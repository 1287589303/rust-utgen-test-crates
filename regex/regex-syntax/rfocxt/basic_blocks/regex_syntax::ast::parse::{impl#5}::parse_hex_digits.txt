[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1747:27: 1747:40 (#0),
                    scope: scope[0],
                },
                kind: _5 = ast::parse::ParserI::<'_, P>::parser(move _6) -> [return: bb1, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            _4 = &((*_5).11: core::cell::RefCell<std::string::String>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1747:27: 1747:61 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::cell::RefCell::<std::string::String>::borrow_mut(move _4) -> [return: bb2, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageDead(_5),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &mut _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1748:9: 1748:24 (#0),
                    scope: scope[1],
                },
                kind: _9 = <core::cell::RefMut<'_, std::string::String> as core::ops::DerefMut>::deref_mut(move _10) -> [return: bb3, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = &mut (*_9),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1748:9: 1748:24 (#0),
                    scope: scope[1],
                },
                kind: _7 = std::string::String::clear(move _8) -> [return: bb4, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_9),
            StorageDead(_7),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1750:21: 1750:31 (#0),
                    scope: scope[1],
                },
                kind: _11 = ast::parse::ParserI::<'_, P>::pos(move _12) -> [return: bb5, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            FakeRead(ForLet(None), _11),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1751:21: 1751:34 (#0),
                    scope: scope[2],
                },
                kind: _16 = ast::HexLiteralKind::digits(move _17) -> [return: bb6, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            _15 = core::ops::Range::<u32> { start: const 0_u32, end: move _16 },
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1751:18: 1751:34 (#975),
                    scope: scope[2],
                },
                kind: _14 = <core::ops::Range<u32> as core::iter::IntoIterator>::into_iter(move _15) -> [return: bb7, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            PlaceMention(_14),
            StorageLive(_18),
            _18 = move _14,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1751:9: 1763:10 (#974),
                    scope: scope[3],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1751:9: 1763:10 (#974),
                    scope: scope[3],
                },
                kind: falseUnwind -> [real: bb9, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            _23 = &mut _18,
            _22 = &mut (*_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1751:18: 1751:34 (#975),
                    scope: scope[3],
                },
                kind: _21 = <core::ops::Range<u32> as core::iter::Iterator>::next(move _22) -> [return: bb10, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            PlaceMention(_21),
            _24 = discriminant(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1751:18: 1751:34 (#975),
                    scope: scope[3],
                },
                kind: switchInt(move _24) -> [0: bb12, 1: bb13, otherwise: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1751:18: 1751:34 (#975),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1751:9: 1763:10 (#974),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb14, imaginary: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_26),
            _26 = ((_21 as Some).0: u32),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            _29 = _26,
            _28 = Gt(move _29, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1752:16: 1752:21 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _28) -> [0: bb22, otherwise: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _13 = const (),
            StorageDead(_23),
            StorageDead(_21),
            StorageDead(_20),
            StorageDead(_18),
            StorageDead(_14),
            StorageDead(_13),
            StorageLive(_54),
            StorageLive(_55),
            _55 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1766:9: 1766:35 (#0),
                    scope: scope[2],
                },
                kind: _54 = ast::parse::ParserI::<'_, P>::bump_and_bump_space(move _55) -> [return: bb34, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageLive(_30),
            StorageLive(_31),
            _31 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1752:26: 1752:52 (#0),
                    scope: scope[4],
                },
                kind: _30 = ast::parse::ParserI::<'_, P>::bump_and_bump_space(move _31) -> [return: bb16, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1752:26: 1752:52 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _30) -> [0: bb18, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1752:53: 1755:14 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageLive(_33),
            StorageLive(_34),
            _34 = &(*_1),
            StorageLive(_35),
            StorageLive(_36),
            _36 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1754:28: 1754:39 (#0),
                    scope: scope[4],
                },
                kind: _35 = ast::parse::ParserI::<'_, P>::span(move _36) -> [return: bb19, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageLive(_37),
            _37 = ast::ErrorKind::EscapeUnexpectedEof,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1753:28: 1754:77 (#0),
                    scope: scope[4],
                },
                kind: _33 = ast::parse::ParserI::<'_, P>::error(move _34, move _35, move _37) -> [return: bb20, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageDead(_35),
            StorageDead(_34),
            _0 = core::result::Result::<ast::Literal, ast::Error>::Err(move _33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1754:77: 1754:78 (#0),
                    scope: scope[4],
                },
                kind: drop(_33) -> [return: bb21, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_30),
            StorageDead(_28),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[4],
                },
                kind: goto -> bb51,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[4],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _27 = const (),
            StorageDead(_30),
            StorageDead(_28),
            StorageDead(_27),
            StorageLive(_38),
            StorageLive(_39),
            StorageLive(_40),
            StorageLive(_41),
            _41 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1756:24: 1756:35 (#0),
                    scope: scope[4],
                },
                kind: _40 = ast::parse::ParserI::<'_, P>::char(move _41) -> [return: bb24, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1756:17: 1756:36 (#0),
                    scope: scope[4],
                },
                kind: _39 = ast::parse::is_hex(move _40) -> [return: bb25, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1756:17: 1756:36 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _39) -> [0: bb27, otherwise: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            _38 = const (),
            StorageDead(_39),
            StorageDead(_38),
            StorageLive(_48),
            StorageLive(_49),
            StorageLive(_50),
            StorageLive(_51),
            _51 = &mut _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1762:13: 1762:38 (#0),
                    scope: scope[4],
                },
                kind: _50 = <core::cell::RefMut<'_, std::string::String> as core::ops::DerefMut>::deref_mut(move _51) -> [return: bb31, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageLive(_43),
            StorageLive(_44),
            _44 = &(*_1),
            StorageLive(_45),
            StorageLive(_46),
            _46 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1758:21: 1758:37 (#0),
                    scope: scope[4],
                },
                kind: _45 = ast::parse::ParserI::<'_, P>::span_char(move _46) -> [return: bb28, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
            StorageLive(_47),
            _47 = ast::ErrorKind::EscapeHexInvalidDigit,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1757:28: 1760:18 (#0),
                    scope: scope[4],
                },
                kind: _43 = ast::parse::ParserI::<'_, P>::error(move _44, move _45, move _47) -> [return: bb29, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            StorageDead(_45),
            StorageDead(_44),
            _0 = core::result::Result::<ast::Literal, ast::Error>::Err(move _43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1760:18: 1760:19 (#0),
                    scope: scope[4],
                },
                kind: drop(_43) -> [return: bb30, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            StorageDead(_39),
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[4],
                },
                kind: goto -> bb51,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _49 = &mut (*_50),
            StorageDead(_51),
            StorageLive(_52),
            StorageLive(_53),
            _53 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1762:26: 1762:37 (#0),
                    scope: scope[4],
                },
                kind: _52 = ast::parse::ParserI::<'_, P>::char(move _53) -> [return: bb32, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_53),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1762:13: 1762:38 (#0),
                    scope: scope[4],
                },
                kind: _48 = std::string::String::push(move _49, move _52) -> [return: bb33, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            StorageDead(_49),
            StorageDead(_50),
            StorageDead(_48),
            _20 = const (),
            StorageDead(_26),
            StorageDead(_23),
            StorageDead(_21),
            StorageDead(_20),
            _19 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1751:9: 1763:10 (#974),
                    scope: scope[3],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_55),
            StorageDead(_54),
            StorageLive(_56),
            StorageLive(_57),
            _57 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1767:19: 1767:29 (#0),
                    scope: scope[2],
                },
                kind: _56 = ast::parse::ParserI::<'_, P>::pos(move _57) -> [return: bb35, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_57),
            FakeRead(ForLet(None), _56),
            StorageLive(_58),
            StorageLive(_59),
            StorageLive(_60),
            StorageLive(_61),
            _61 = &_3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1768:19: 1768:35 (#0),
                    scope: scope[5],
                },
                kind: _60 = <core::cell::RefMut<'_, std::string::String> as core::ops::Deref>::deref(move _61) -> [return: bb36, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _59 = &(*_60),
            StorageDead(_61),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1768:19: 1768:35 (#0),
                    scope: scope[5],
                },
                kind: _58 = std::string::String::as_str(move _59) -> [return: bb37, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
            FakeRead(ForLet(None), _58),
            StorageDead(_60),
            StorageLive(_62),
            StorageLive(_63),
            StorageLive(_64),
            StorageLive(_65),
            _65 = &(*_58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1769:15: 1769:43 (#0),
                    scope: scope[6],
                },
                kind: _64 = core::num::<impl u32>::from_str_radix(move _65, const 16_u32) -> [return: bb38, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_65),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1769:15: 1769:48 (#0),
                    scope: scope[6],
                },
                kind: _63 = core::result::Result::<u32, core::num::ParseIntError>::ok(move _64) -> [return: bb39, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1769:15: 1769:73 (#0),
                    scope: scope[6],
                },
                kind: _62 = core::option::Option::<u32>::and_then::<char, fn(u32) -> core::option::Option<char> {core::char::methods::<impl char>::from_u32}>(move _63, core::char::methods::<impl char>::from_u32) -> [return: bb40, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
            PlaceMention(_62),
            _66 = discriminant(_62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1769:9: 1769:73 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _66) -> [0: bb42, 1: bb43, otherwise: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1769:15: 1769:73 (#0),
                    scope: scope[6],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1770:13: 1770:17 (#0),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb44, imaginary: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_73),
            _73 = ((_62 as Some).0: char),
            StorageLive(_74),
            StorageLive(_75),
            StorageLive(_76),
            _76 = _11,
            StorageLive(_77),
            _77 = _56,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1775:23: 1775:44 (#0),
                    scope: scope[7],
                },
                kind: _75 = ast::Span::new(move _76, move _77) -> [return: bb48, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_67),
            StorageLive(_68),
            _68 = &(*_1),
            StorageLive(_69),
            StorageLive(_70),
            _70 = _11,
            StorageLive(_71),
            _71 = _56,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1771:17: 1771:38 (#0),
                    scope: scope[6],
                },
                kind: _69 = ast::Span::new(move _70, move _71) -> [return: bb45, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
            StorageDead(_70),
            StorageLive(_72),
            _72 = ast::ErrorKind::EscapeHexInvalid,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1770:25: 1773:14 (#0),
                    scope: scope[6],
                },
                kind: _67 = ast::parse::ParserI::<'_, P>::error(move _68, move _69, move _72) -> [return: bb46, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_72),
            StorageDead(_69),
            StorageDead(_68),
            _0 = core::result::Result::<ast::Literal, ast::Error>::Err(move _67),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1773:14: 1773:15 (#0),
                    scope: scope[6],
                },
                kind: drop(_67) -> [return: bb47, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_67),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1773:14: 1773:15 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb49,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_77),
            StorageDead(_76),
            StorageLive(_78),
            StorageLive(_79),
            _79 = move _2,
            _78 = ast::LiteralKind::HexFixed(move _79),
            StorageDead(_79),
            StorageLive(_80),
            _80 = _73,
            _74 = ast::Literal { span: move _75, kind: move _78, c: move _80 },
            StorageDead(_80),
            StorageDead(_78),
            StorageDead(_75),
            _0 = core::result::Result::<ast::Literal, ast::Error>::Ok(move _74),
            StorageDead(_74),
            StorageDead(_73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1778:14: 1778:15 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb49,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
            StorageDead(_56),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1780:5: 1780:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb50, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1780:6: 1780:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb53,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_23),
            StorageDead(_21),
            StorageDead(_20),
            StorageDead(_18),
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1780:5: 1780:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb52, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1780:6: 1780:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb53,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1780:6: 1780:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1780:5: 1780:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb55, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1743:5: 1780:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<ast::Literal, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1746:10: 1746:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1744:9: 1744:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/ast/parse.rs:1745:15: 1745:34 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/ast/parse.rs:1745:9: 1745:13 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:1745:9: 1745:13 (#0),
                    },
                ),
            ),
        ),
        ty: ast::HexLiteralKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1745:9: 1745:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/ast/parse.rs:1747:27: 1747:61 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:1747:13: 1747:24 (#0),
                    },
                ),
            ),
        ),
        ty: core::cell::RefMut<'{erased}, std::string::String>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1747:13: 1747:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::cell::RefCell<std::string::String>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1747:27: 1747:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::Parser,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1747:27: 1747:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1747:27: 1747:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1748:9: 1748:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1748:9: 1748:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1748:9: 1748:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::cell::RefMut<'{erased}, std::string::String>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1748:9: 1748:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/ast/parse.rs:1750:21: 1750:31 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:1750:13: 1750:18 (#0),
                    },
                ),
            ),
        ),
        ty: ast::Position,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1750:13: 1750:18 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1750:21: 1750:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1751:9: 1763:10 (#974),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1751:18: 1751:34 (#975),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1751:18: 1751:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1751:21: 1751:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::HexLiteralKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1751:21: 1751:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _14,
                                ),
                                regex-syntax/src/ast/parse.rs:1751:18: 1751:34 (#975),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:1751:18: 1751:34 (#975),
                    },
                ),
            ),
        ),
        ty: core::ops::Range<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1751:18: 1751:34 (#975),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1743:5: 1780:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1751:18: 1751:34 (#975),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1751:18: 1751:34 (#975),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1751:18: 1751:34 (#975),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1751:18: 1751:34 (#975),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1751:9: 1763:10 (#974),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1751:9: 1763:10 (#974),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _21,
                                ),
                                regex-syntax/src/ast/parse.rs:1751:18: 1751:34 (#975),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:1751:13: 1751:14 (#976),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1751:13: 1751:14 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1752:13: 1755:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1752:16: 1752:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1752:16: 1752:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1752:26: 1752:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1752:26: 1752:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1752:53: 1755:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: ast::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1753:28: 1754:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1753:28: 1753:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1754:28: 1754:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1754:28: 1754:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::ErrorKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1754:41: 1754:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1756:13: 1761:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1756:17: 1756:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1756:24: 1756:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1756:24: 1756:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1756:37: 1761:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: ast::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1757:28: 1760:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1757:28: 1757:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1758:21: 1758:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1758:21: 1758:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::ErrorKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1759:21: 1759:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1762:13: 1762:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1762:13: 1762:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1762:13: 1762:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::cell::RefMut<'{erased}, std::string::String>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1762:13: 1762:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1762:26: 1762:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1762:26: 1762:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1766:9: 1766:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1766:9: 1766:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/ast/parse.rs:1767:19: 1767:29 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:1767:13: 1767:16 (#0),
                    },
                ),
            ),
        ),
        ty: ast::Position,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1767:13: 1767:16 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1767:19: 1767:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/ast/parse.rs:1768:19: 1768:35 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:1768:13: 1768:16 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1768:13: 1768:16 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1768:19: 1768:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1768:19: 1768:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::cell::RefMut<'{erased}, std::string::String>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1768:19: 1768:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/parse.rs:1769:9: 1779:10 (#0),
                },
            ),
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1769:15: 1769:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/parse.rs:1769:9: 1779:10 (#0),
                },
            ),
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1769:15: 1769:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/parse.rs:1769:9: 1779:10 (#0),
                },
            ),
        ),
        ty: core::result::Result<u32, core::num::ParseIntError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1769:15: 1769:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/parse.rs:1769:9: 1779:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1769:35: 1769:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1770:13: 1770:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: ast::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1770:25: 1773:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/parse.rs:1769:9: 1779:10 (#0),
                },
            ),
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1770:25: 1770:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/parse.rs:1769:9: 1779:10 (#0),
                },
            ),
        ),
        ty: ast::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1771:17: 1771:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/parse.rs:1769:9: 1779:10 (#0),
                },
            ),
        ),
        ty: ast::Position,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1771:27: 1771:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/parse.rs:1769:9: 1779:10 (#0),
                },
            ),
        ),
        ty: ast::Position,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1771:34: 1771:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/parse.rs:1769:9: 1779:10 (#0),
                },
            ),
        ),
        ty: ast::ErrorKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1772:17: 1772:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _62,
                                ),
                                regex-syntax/src/ast/parse.rs:1769:15: 1769:73 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:1774:13: 1774:20 (#0),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1774:18: 1774:19 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: ast::Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1774:27: 1778:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: ast::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1775:23: 1775:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/parse.rs:1769:9: 1779:10 (#0),
                },
            ),
        ),
        ty: ast::Position,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1775:33: 1775:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/parse.rs:1769:9: 1779:10 (#0),
                },
            ),
        ),
        ty: ast::Position,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1775:40: 1775:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: ast::LiteralKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1776:23: 1776:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: ast::HexLiteralKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1776:50: 1776:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1777:17: 1777:18 (#0),
            scope: scope[0],
        },
    },
]