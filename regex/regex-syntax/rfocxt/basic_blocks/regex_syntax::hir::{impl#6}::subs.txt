[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            PlaceMention((*_1)),
            _3 = discriminant((*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:759:9: 759:20 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb6, 1: bb6, 2: bb6, 3: bb6, 4: bb2, 5: bb3, 6: bb4, 7: bb5, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), (*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:759:15: 759:20 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:764:13: 764:60 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb8, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:765:13: 765:54 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:766:13: 766:38 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb12, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = &(((*_1) as Alternation).0: std::vec::Vec<hir::Hir>),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &(*_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:759:9: 768:10 (#0),
                    scope: scope[4],
                },
                kind: _17 = <std::vec::Vec<hir::Hir> as core::ops::Deref>::deref(move _18) -> [return: bb14, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:760:13: 763:31 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb7, imaginary: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = [],
            _5 = &_6,
            _4 = &(*_5),
            _2 = move _4 as &[hir::Hir] (PointerCoercion(Unsize)),
            StorageDead(_4),
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:763:37: 763:38 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            _7 = &((((*_1) as Repetition).0: hir::Repetition).3: std::boxed::Box<hir::Hir>),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(*(*_7)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:764:64: 764:77 (#0),
                    scope: scope[1],
                },
                kind: _8 = core::slice::from_ref::<hir::Hir>(move _9) -> [return: bb9, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = &(*_8),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:764:76: 764:77 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = &((((*_1) as Capture).0: hir::Capture).2: std::boxed::Box<hir::Hir>),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &(*(*_10)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:765:58: 765:71 (#0),
                    scope: scope[2],
                },
                kind: _11 = core::slice::from_ref::<hir::Hir>(move _12) -> [return: bb11, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = &(*_11),
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:765:70: 765:71 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            _13 = &(((*_1) as Concat).0: std::vec::Vec<hir::Hir>),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &(*_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:759:9: 768:10 (#0),
                    scope: scope[3],
                },
                kind: _14 = <std::vec::Vec<hir::Hir> as core::ops::Deref>::deref(move _15) -> [return: bb13, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = &(*_14),
            StorageDead(_15),
            StorageDead(_14),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:766:45: 766:46 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = &(*_17),
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:767:50: 767:51 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = &(*_2),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:769:6: 769:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:756:5: 769:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:756:27: 756:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} hir::HirKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:756:17: 756:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/mod.rs:759:9: 768:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:759:9: 768:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:760:13: 760:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/mod.rs:759:9: 768:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [hir::Hir; 0_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:763:35: 763:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/mod.rs:759:9: 768:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [hir::Hir; 0_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:763:35: 763:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/mod.rs:759:9: 768:10 (#0),
                },
            ),
        ),
        ty: [hir::Hir; 0_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:763:36: 763:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-syntax/src/hir/mod.rs:759:15: 759:20 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:764:13: 764:60 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::boxed::Box<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:764:46: 764:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/mod.rs:759:9: 768:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:764:64: 764:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/mod.rs:759:9: 768:10 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:764:73: 764:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-syntax/src/hir/mod.rs:759:15: 759:20 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:765:13: 765:54 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::boxed::Box<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:765:40: 765:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/mod.rs:759:9: 768:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:765:58: 765:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/mod.rs:759:9: 768:10 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:765:67: 765:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-syntax/src/hir/mod.rs:759:15: 759:20 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:766:13: 766:38 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:766:29: 766:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/mod.rs:759:9: 768:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:759:9: 768:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/mod.rs:759:9: 768:10 (#0),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:766:42: 766:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-syntax/src/hir/mod.rs:759:15: 759:20 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:767:13: 767:43 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:767:34: 767:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/mod.rs:759:9: 768:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:759:9: 768:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/mod.rs:759:9: 768:10 (#0),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:767:47: 767:51 (#0),
            scope: scope[0],
        },
    },
]