[
    BasicBlockData {
        statements: [
            PlaceMention((((*_2).1: ast::RepetitionOp).1: ast::RepetitionKind)),
            _5 = discriminant((((*_2).1: ast::RepetitionOp).1: ast::RepetitionKind)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:179:9: 179:26 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _5) -> [0: bb2, 1: bb4, 2: bb6, 3: bb8, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), (((*_2).1: ast::RepetitionOp).1: ast::RepetitionKind)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:179:15: 179:26 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:180:13: 180:22 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb9, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:181:13: 181:22 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb13, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:182:13: 182:23 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb15, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:183:13: 183:23 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb19, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:184:13: 184:22 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb21, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:185:13: 185:22 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb25, imaginary: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_27),
            _27 = &(((((*_2).1: ast::RepetitionOp).1: ast::RepetitionKind) as Range).0: ast::RepetitionRange),
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            _31 = &mut (*_1),
            StorageLive(_32),
            _32 = &(*_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:187:17: 187:45 (#0),
                    scope: scope[1],
                },
                kind: _30 = ast::print::Writer::<W>::fmt_repetition_range(move _31, move _32) -> [return: bb27, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &fake shallow (((*_2).1: ast::RepetitionOp).1: ast::RepetitionKind),
            _4 = &fake shallow _2,
            StorageLive(_6),
            _6 = ((*_2).2: bool),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:180:26: 180:36 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [0: bb11, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            FakeRead(ForMatchGuard, _3),
            FakeRead(ForMatchGuard, _4),
            StorageLive(_7),
            _7 = &mut ((*_1).0: W),
            StorageLive(_8),
            StorageLive(_9),
            _9 = const "?",
            _8 = &(*_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:180:40: 180:63 (#0),
                    scope: scope[0],
                },
                kind: _0 = <W as core::fmt::Write>::write_str(move _7, move _8) -> [return: bb12, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:180:26: 180:36 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:180:62: 180:63 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb45,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = &mut ((*_1).0: W),
            StorageLive(_11),
            StorageLive(_12),
            _12 = const "??",
            _11 = &(*_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:181:26: 181:50 (#0),
                    scope: scope[0],
                },
                kind: _0 = <W as core::fmt::Write>::write_str(move _10, move _11) -> [return: bb14, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:181:49: 181:50 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb45,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &fake shallow (((*_2).1: ast::RepetitionOp).1: ast::RepetitionKind),
            _4 = &fake shallow _2,
            StorageLive(_13),
            _13 = ((*_2).2: bool),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:182:27: 182:37 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _13) -> [0: bb17, otherwise: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            FakeRead(ForMatchGuard, _3),
            FakeRead(ForMatchGuard, _4),
            StorageLive(_14),
            _14 = &mut ((*_1).0: W),
            StorageLive(_15),
            StorageLive(_16),
            _16 = const "*",
            _15 = &(*_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:182:41: 182:64 (#0),
                    scope: scope[0],
                },
                kind: _0 = <W as core::fmt::Write>::write_str(move _14, move _15) -> [return: bb18, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:182:27: 182:37 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_14),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:182:63: 182:64 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb45,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_17),
            _17 = &mut ((*_1).0: W),
            StorageLive(_18),
            StorageLive(_19),
            _19 = const "*?",
            _18 = &(*_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:183:27: 183:51 (#0),
                    scope: scope[0],
                },
                kind: _0 = <W as core::fmt::Write>::write_str(move _17, move _18) -> [return: bb20, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:183:50: 183:51 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb45,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &fake shallow (((*_2).1: ast::RepetitionOp).1: ast::RepetitionKind),
            _4 = &fake shallow _2,
            StorageLive(_20),
            _20 = ((*_2).2: bool),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:184:26: 184:36 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _20) -> [0: bb23, otherwise: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            FakeRead(ForMatchGuard, _3),
            FakeRead(ForMatchGuard, _4),
            StorageLive(_21),
            _21 = &mut ((*_1).0: W),
            StorageLive(_22),
            StorageLive(_23),
            _23 = const "+",
            _22 = &(*_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:184:40: 184:63 (#0),
                    scope: scope[0],
                },
                kind: _0 = <W as core::fmt::Write>::write_str(move _21, move _22) -> [return: bb24, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:184:26: 184:36 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_21),
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:184:62: 184:63 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb45,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_24),
            _24 = &mut ((*_1).0: W),
            StorageLive(_25),
            StorageLive(_26),
            _26 = const "+?",
            _25 = &(*_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:185:26: 185:50 (#0),
                    scope: scope[0],
                },
                kind: _0 = <W as core::fmt::Write>::write_str(move _24, move _25) -> [return: bb26, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_24),
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:185:49: 185:50 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb45,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:187:17: 187:46 (#1071),
                    scope: scope[1],
                },
                kind: _29 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _30) -> [return: bb28, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            PlaceMention(_29),
            _33 = discriminant(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:187:17: 187:46 (#1071),
                    scope: scope[1],
                },
                kind: switchInt(move _33) -> [0: bb31, 1: bb30, otherwise: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:187:17: 187:46 (#1071),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:187:45: 187:46 (#1072),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb32, imaginary: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_37),
            _37 = ((_29 as Continue).0: ()),
            _28 = _37,
            StorageDead(_37),
            StorageDead(_29),
            StorageDead(_28),
            StorageLive(_38),
            StorageLive(_39),
            _39 = ((*_2).2: bool),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:188:21: 188:31 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _39) -> [0: bb35, otherwise: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_34),
            _34 = ((_29 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_36),
            _36 = _34,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:187:17: 187:46 (#1071),
                    scope: scope[3],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _36) -> [return: bb33, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_34),
            StorageDead(_29),
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb44,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _38 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:188:17: 190:18 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb43,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_40),
            StorageLive(_41),
            StorageLive(_42),
            StorageLive(_43),
            _43 = &mut ((*_1).0: W),
            StorageLive(_44),
            StorageLive(_45),
            _45 = const "?",
            _44 = &(*_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:189:21: 189:44 (#0),
                    scope: scope[1],
                },
                kind: _42 = <W as core::fmt::Write>::write_str(move _43, move _44) -> [return: bb36, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            StorageDead(_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:189:21: 189:45 (#1074),
                    scope: scope[1],
                },
                kind: _41 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _42) -> [return: bb37, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
            PlaceMention(_41),
            _46 = discriminant(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:189:21: 189:45 (#1074),
                    scope: scope[1],
                },
                kind: switchInt(move _46) -> [0: bb40, 1: bb39, otherwise: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:189:21: 189:45 (#1074),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:189:44: 189:45 (#1075),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb41, imaginary: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_50),
            _50 = ((_41 as Continue).0: ()),
            _40 = _50,
            StorageDead(_50),
            StorageDead(_45),
            StorageDead(_41),
            StorageDead(_40),
            _38 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:188:17: 190:18 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb43,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_47),
            _47 = ((_41 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_49),
            _49 = _47,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:189:21: 189:45 (#1074),
                    scope: scope[7],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _49) -> [return: bb42, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_49),
            StorageDead(_47),
            StorageDead(_45),
            StorageDead(_41),
            StorageDead(_40),
            StorageDead(_39),
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb44,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            StorageDead(_38),
            StorageLive(_51),
            _51 = (),
            _0 = core::result::Result::<(), core::fmt::Error>::Ok(move _51),
            StorageDead(_51),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:192:13: 192:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb45,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:194:6: 194:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb45,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:194:6: 194:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:177:5: 194:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:177:60: 177:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut ast::print::Writer<W/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:177:23: 177:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/ast/print.rs:177:39: 177:55 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/ast/print.rs:177:34: 177:37 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/print.rs:177:34: 177:37 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} ast::Repetition,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:177:34: 177:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} ast::RepetitionKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:179:15: 179:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} &'{erased} ast::Repetition,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:179:15: 179:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:180:13: 180:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/print.rs:179:9: 193:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:180:26: 180:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/print.rs:179:9: 193:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:180:40: 180:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/print.rs:179:9: 193:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:180:59: 180:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/print.rs:179:9: 193:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:180:59: 180:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/print.rs:179:9: 193:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:181:26: 181:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/print.rs:179:9: 193:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:181:45: 181:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/print.rs:179:9: 193:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:181:45: 181:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/print.rs:179:9: 193:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:182:27: 182:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/print.rs:179:9: 193:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:182:41: 182:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/print.rs:179:9: 193:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:182:60: 182:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/print.rs:179:9: 193:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:182:60: 182:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/print.rs:179:9: 193:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:183:27: 183:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/print.rs:179:9: 193:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:183:46: 183:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/print.rs:179:9: 193:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:183:46: 183:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/print.rs:179:9: 193:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:184:26: 184:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/print.rs:179:9: 193:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:184:40: 184:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/print.rs:179:9: 193:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:184:59: 184:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/print.rs:179:9: 193:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:184:59: 184:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/print.rs:179:9: 193:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:185:26: 185:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/print.rs:179:9: 193:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:185:45: 185:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/print.rs:179:9: 193:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:185:45: 185:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (((*_2).1: ast::RepetitionOp).1: ast::RepetitionKind),
                                ),
                                regex-syntax/src/ast/print.rs:179:15: 179:26 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/print.rs:186:13: 186:25 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} ast::RepetitionRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:186:19: 186:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:187:17: 187:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:187:17: 187:46 (#1071),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:187:17: 187:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut ast::print::Writer<W/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:187:17: 187:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::RepetitionRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:187:43: 187:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:187:45: 187:46 (#1072),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _29,
                                ),
                                regex-syntax/src/ast/print.rs:187:17: 187:46 (#1071),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/print.rs:187:45: 187:46 (#1072),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:187:45: 187:46 (#1072),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:187:45: 187:46 (#1072),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:187:45: 187:46 (#1072),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _29,
                                ),
                                regex-syntax/src/ast/print.rs:187:17: 187:46 (#1071),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/print.rs:187:17: 187:46 (#1071),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:187:17: 187:46 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:188:17: 190:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:188:21: 188:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:189:21: 189:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:189:21: 189:45 (#1074),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:189:21: 189:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:189:21: 189:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:189:40: 189:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:189:40: 189:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:189:44: 189:45 (#1075),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _41,
                                ),
                                regex-syntax/src/ast/print.rs:189:21: 189:45 (#1074),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/print.rs:189:44: 189:45 (#1075),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:189:44: 189:45 (#1075),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:189:44: 189:45 (#1075),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:189:44: 189:45 (#1075),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _41,
                                ),
                                regex-syntax/src/ast/print.rs:189:21: 189:45 (#1074),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/print.rs:189:21: 189:45 (#1074),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:189:21: 189:45 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:191:20: 191:22 (#0),
            scope: scope[0],
        },
    },
]