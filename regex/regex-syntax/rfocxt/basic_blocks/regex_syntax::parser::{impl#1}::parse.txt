[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut ((*_1).0: ast::parse::Parser),
            StorageLive(_7),
            _7 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:250:19: 250:42 (#0),
                    scope: scope[0],
                },
                kind: _5 = ast::parse::Parser::parse(move _6, move _7) -> [return: bb1, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:250:19: 250:43 (#1780),
                    scope: scope[0],
                },
                kind: _4 = <core::result::Result<ast::Ast, ast::Error> as core::ops::Try>::branch(move _5) -> [return: bb2, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            PlaceMention(_4),
            _8 = discriminant(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:250:19: 250:43 (#1780),
                    scope: scope[0],
                },
                kind: switchInt(move _8) -> [0: bb5, 1: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:250:19: 250:43 (#1780),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:250:42: 250:43 (#1781),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            _12 = move ((_4 as Continue).0: ast::Ast),
            _3 = move _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:250:42: 250:43 (#0),
                    scope: scope[0],
                },
                kind: drop(_12) -> [return: bb8, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            _9 = move ((_4 as Break).0: core::result::Result<core::convert::Infallible, ast::Error>),
            StorageLive(_11),
            _11 = move _9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:250:19: 250:43 (#1780),
                    scope: scope[3],
                },
                kind: _0 = <core::result::Result<hir::Hir, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, ast::Error>>>::from_residual(move _11) -> [return: bb7, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:250:42: 250:43 (#1781),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb24, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            FakeRead(ForLet(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:250:43: 250:44 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb9, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &mut ((*_1).1: hir::translate::Translator),
            StorageLive(_17),
            _17 = &(*_2),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &_3,
            _18 = &(*_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:251:19: 251:52 (#0),
                    scope: scope[1],
                },
                kind: _15 = hir::translate::Translator::translate(move _16, move _17, move _18) -> [return: bb10, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:251:19: 251:53 (#1782),
                    scope: scope[1],
                },
                kind: _14 = <core::result::Result<hir::Hir, hir::Error> as core::ops::Try>::branch(move _15) -> [return: bb11, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            PlaceMention(_14),
            _20 = discriminant(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:251:19: 251:53 (#1782),
                    scope: scope[1],
                },
                kind: switchInt(move _20) -> [0: bb14, 1: bb13, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:251:19: 251:53 (#1782),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:251:52: 251:53 (#1783),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb15, imaginary: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_24),
            _24 = move ((_14 as Continue).0: hir::Hir),
            _13 = move _24,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:251:52: 251:53 (#0),
                    scope: scope[1],
                },
                kind: drop(_24) -> [return: bb17, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_21),
            _21 = move ((_14 as Break).0: core::result::Result<core::convert::Infallible, hir::Error>),
            StorageLive(_23),
            _23 = move _21,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:251:19: 251:53 (#1782),
                    scope: scope[8],
                },
                kind: _0 = <core::result::Result<hir::Hir, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, hir::Error>>>::from_residual(move _23) -> [return: bb16, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:251:52: 251:53 (#1783),
                    scope: scope[1],
                },
                kind: drop(_21) -> [return: bb22, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            FakeRead(ForLet(None), _13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:251:53: 251:54 (#0),
                    scope: scope[1],
                },
                kind: drop(_14) -> [return: bb18, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_14),
            StorageLive(_25),
            _25 = move _13,
            _0 = core::result::Result::<hir::Hir, error::Error>::Ok(move _25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:252:15: 252:16 (#0),
                    scope: scope[6],
                },
                kind: drop(_25) -> [return: bb19, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:253:5: 253:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_13) -> [return: bb20, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:253:5: 253:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb21, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:253:6: 253:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:251:53: 251:54 (#0),
                    scope: scope[1],
                },
                kind: drop(_14) -> [return: bb23, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_14),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:253:5: 253:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb26, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:250:43: 250:44 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb25, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb26,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:253:6: 253:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:253:6: 253:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:253:5: 253:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_13) -> [return: bb33, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:251:52: 251:53 (#1782),
                    scope: scope[8],
                },
                kind: drop(_23) -> [return: bb30, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:251:52: 251:53 (#1783),
                    scope: scope[1],
                },
                kind: drop(_21) -> [return: bb31, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:251:53: 251:54 (#0),
                    scope: scope[1],
                },
                kind: drop(_14) -> [return: bb33, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:251:52: 251:53 (#1782),
                    scope: scope[1],
                },
                kind: drop(_15) -> [return: bb33, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:253:5: 253:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb38, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:250:42: 250:43 (#1780),
                    scope: scope[3],
                },
                kind: drop(_11) -> [return: bb35, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:250:42: 250:43 (#1781),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb36, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:250:43: 250:44 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb38, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:250:42: 250:43 (#1780),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb38, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/parser.rs:249:5: 253:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<hir::Hir, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/parser.rs:249:47: 249:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut parser::Parser,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/parser.rs:249:18: 249:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/parser.rs:249:38: 249:42 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/parser.rs:249:29: 249:36 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/parser.rs:249:29: 249:36 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/parser.rs:249:29: 249:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/parser.rs:250:19: 250:43 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/parser.rs:250:13: 250:16 (#0),
                    },
                ),
            ),
        ),
        ty: ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/parser.rs:250:13: 250:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, ast::Error>, ast::Ast>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/parser.rs:250:19: 250:43 (#1780),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<ast::Ast, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/parser.rs:250:19: 250:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut ast::parse::Parser,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/parser.rs:250:19: 250:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/parser.rs:250:34: 250:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/parser.rs:250:42: 250:43 (#1781),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                regex-syntax/src/parser.rs:250:19: 250:43 (#1780),
                            ),
                        ),
                        pat_span: regex-syntax/src/parser.rs:250:42: 250:43 (#1781),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/parser.rs:250:42: 250:43 (#1781),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/parser.rs:250:42: 250:43 (#1781),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/parser.rs:250:42: 250:43 (#1781),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                regex-syntax/src/parser.rs:250:19: 250:43 (#1780),
                            ),
                        ),
                        pat_span: regex-syntax/src/parser.rs:250:19: 250:43 (#1780),
                    },
                ),
            ),
        ),
        ty: ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/parser.rs:250:19: 250:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/parser.rs:251:19: 251:53 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/parser.rs:251:13: 251:16 (#0),
                    },
                ),
            ),
        ),
        ty: hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/parser.rs:251:13: 251:16 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, hir::Error>, hir::Hir>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/parser.rs:251:19: 251:53 (#1782),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<hir::Hir, hir::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/parser.rs:251:19: 251:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hir::translate::Translator,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/parser.rs:251:19: 251:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/parser.rs:251:38: 251:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/parser.rs:251:47: 251:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/parser.rs:251:47: 251:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/parser.rs:251:52: 251:53 (#1783),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _14,
                                ),
                                regex-syntax/src/parser.rs:251:19: 251:53 (#1782),
                            ),
                        ),
                        pat_span: regex-syntax/src/parser.rs:251:52: 251:53 (#1783),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, hir::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/parser.rs:251:52: 251:53 (#1783),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/parser.rs:251:52: 251:53 (#1783),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, hir::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/parser.rs:251:52: 251:53 (#1783),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _14,
                                ),
                                regex-syntax/src/parser.rs:251:19: 251:53 (#1782),
                            ),
                        ),
                        pat_span: regex-syntax/src/parser.rs:251:19: 251:53 (#1782),
                    },
                ),
            ),
        ),
        ty: hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/parser.rs:251:19: 251:53 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/parser.rs:252:12: 252:15 (#0),
            scope: scope[0],
        },
    },
]