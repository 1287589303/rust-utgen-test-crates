[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1317:26: 1317:43 (#0),
                    scope: scope[0],
                },
                kind: _4 = hir::translate::ascii_class(move _5) -> [return: bb1, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_6),
            _6 = {closure@regex-syntax/src/hir/translate.rs:1318:14: 1318:22},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1317:26: 1318:55 (#0),
                    scope: scope[0],
                },
                kind: _3 = <impl core::iter::Iterator<Item = (u8, u8)> as core::iter::Iterator>::map::<hir::ClassBytesRange, {closure@regex-syntax/src/hir/translate.rs:1318:14: 1318:22}>(move _4, move _6) -> [return: bb2, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1317:26: 1319:19 (#0),
                    scope: scope[0],
                },
                kind: _2 = <core::iter::Map<impl core::iter::Iterator<Item = (u8, u8)>, {closure@regex-syntax/src/hir/translate.rs:1318:14: 1318:22}> as core::iter::Iterator>::collect::<std::vec::Vec<hir::ClassBytesRange>>(move _3) -> [return: bb3, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            AscribeUserType(_2, o, UserTypeProjection { base: UserType(1), projs: [] }),
            StorageLive(_7),
            _7 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1320:5: 1320:33 (#0),
                    scope: scope[1],
                },
                kind: _0 = hir::ClassBytes::new::<std::vec::Vec<hir::ClassBytesRange>>(move _7) -> [return: bb4, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1321:1: 1321:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb5, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1321:2: 1321:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1320:32: 1320:33 (#0),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1321:1: 1321:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1319:18: 1319:19 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1318:54: 1318:55 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1316:1: 1321:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::ClassBytes,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1316:57: 1316:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/hir/translate.rs:1316:32: 1316:52 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/translate.rs:1316:26: 1316:30 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/translate.rs:1316:26: 1316:30 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} ast::ClassAsciiKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1316:26: 1316:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/translate.rs:1317:26: 1319:19 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/translate.rs:1317:9: 1317:15 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<hir::ClassBytesRange, std::alloc::Global>,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(0),
                            projs: [],
                        },
                        regex-syntax/src/hir/translate.rs:1317:17: 1317:23 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1317:9: 1317:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Map<Alias(Opaque, AliasTy { args: [], def_id: DefId(0:3876 ~ regex_syntax[a00b]::hir::translate::ascii_class::{opaque#0}) }), Closure(DefId(0:868 ~ regex_syntax[a00b]::hir::translate::hir_ascii_class_bytes::{closure#0}), [i16, Binder { value: extern "RustCall" fn(((u8, u8),)) -> hir::ClassBytesRange, bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1317:26: 1318:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Opaque,
            AliasTy {
                args: [],
                def_id: DefId(0:3876 ~ regex_syntax[a00b]::hir::translate::ascii_class::{opaque#0}),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1317:26: 1317:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::ClassAsciiKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1317:38: 1317:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:868 ~ regex_syntax[a00b]::hir::translate::hir_ascii_class_bytes::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn(((u8, u8),)) -> hir::ClassBytesRange, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1318:14: 1318:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/translate.rs:1320:5: 1320:33 (#0),
                },
            ),
        ),
        ty: std::vec::Vec<hir::ClassBytesRange, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1320:26: 1320:32 (#0),
            scope: scope[0],
        },
    },
]