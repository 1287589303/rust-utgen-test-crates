[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &mut ((*_2).0: core::option::Option<std::vec::Vec<hir::literal::Literal>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1288:21: 1288:44 (#0),
                    scope: scope[0],
                },
                kind: _4 = core::option::Option::<std::vec::Vec<hir::literal::Literal>>::as_mut(move _5) -> [return: bb1, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_6),
            _6 = {closure@regex-syntax/src/hir/literal.rs:1288:49: 1288:55},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1288:21: 1288:71 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::option::Option::<&mut std::vec::Vec<hir::literal::Literal>>::map::<std::vec::Drain<'_, hir::literal::Literal>, {closure@regex-syntax/src/hir/literal.rs:1288:49: 1288:55}>(move _4, move _6) -> [return: bb2, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_7),
            PlaceMention(((*_1).0: core::option::Option<std::vec::Vec<hir::literal::Literal>>)),
            _8 = discriminant(((*_1).0: core::option::Option<std::vec::Vec<hir::literal::Literal>>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1289:21: 1289:40 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _8) -> [0: bb4, 1: bb5, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), ((*_1).0: core::option::Option<std::vec::Vec<hir::literal::Literal>>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1289:27: 1289:40 (#0),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1290:13: 1290:17 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = &mut ((((*_1).0: core::option::Option<std::vec::Vec<hir::literal::Literal>>) as Some).0: std::vec::Vec<hir::literal::Literal>),
            _7 = move _10,
            StorageDead(_10),
            FakeRead(ForLet(None), _7),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &(*_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1293:33: 1293:45 (#0),
                    scope: scope[2],
                },
                kind: _16 = <std::vec::Vec<hir::literal::Literal> as core::ops::Deref>::deref(move _17) -> [return: bb7, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1290:21: 1290:27 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _15 = &(*_16),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1293:33: 1293:45 (#0),
                    scope: scope[2],
                },
                kind: _14 = core::slice::<impl [hir::literal::Literal]>::iter(move _15) -> [return: bb8, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _13 = &mut _14,
            StorageDead(_15),
            StorageLive(_18),
            _18 = {closure@regex-syntax/src/hir/literal.rs:1293:55: 1293:58},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1293:33: 1293:72 (#0),
                    scope: scope[2],
                },
                kind: _12 = <core::slice::Iter<'_, hir::literal::Literal> as core::iter::Iterator>::position::<{closure@regex-syntax/src/hir/literal.rs:1293:55: 1293:58}>(move _13, move _18) -> [return: bb9, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_13),
            PlaceMention(_12),
            _19 = discriminant(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1293:27: 1293:72 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _19) -> [0: bb11, 1: bb12, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1293:33: 1293:72 (#0),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1294:13: 1294:17 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb13, imaginary: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_21),
            _21 = ((_12 as Some).0: usize),
            _11 = _21,
            StorageDead(_21),
            FakeRead(ForLet(None), _11),
            StorageDead(_16),
            StorageDead(_14),
            StorageDead(_12),
            StorageLive(_22),
            PlaceMention(_3),
            _23 = discriminant(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1297:21: 1297:32 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _23) -> [0: bb15, 1: bb16, otherwise: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
            StorageDead(_16),
            StorageDead(_14),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb28,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1297:27: 1297:32 (#0),
                    scope: scope[4],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1298:13: 1298:17 (#0),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb17, imaginary: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_26),
            _26 = move ((_3 as Some).0: std::vec::Drain<'_, hir::literal::Literal>),
            _22 = move _26,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1305:30: 1305:31 (#0),
                    scope: scope[4],
                },
                kind: drop(_26) -> [return: bb21, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_25),
            _25 = core::option::Option::<std::vec::Vec<hir::literal::Literal>>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1302:17: 1302:30 (#0),
                    scope: scope[4],
                },
                kind: drop(((*_1).0: core::option::Option<std::vec::Vec<hir::literal::Literal>>)) -> [return: bb18, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).0: core::option::Option<std::vec::Vec<hir::literal::Literal>>) = move _25,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1302:36: 1302:37 (#0),
                    scope: scope[4],
                },
                kind: drop(_25) -> [return: bb20, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).0: core::option::Option<std::vec::Vec<hir::literal::Literal>>) = move _25,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1302:36: 1302:37 (#0),
                    scope: scope[4],
                },
                kind: drop(_25) -> [return: bb34, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            _0 = const (),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[4],
                },
                kind: goto -> bb28,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            FakeRead(ForLet(None), _22),
            StorageLive(_27),
            StorageLive(_28),
            _28 = &mut (*_7),
            StorageLive(_29),
            _29 = {closure@regex-syntax/src/hir/literal.rs:1311:22: 1311:25},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1311:9: 1311:40 (#0),
                    scope: scope[6],
                },
                kind: _27 = std::vec::Vec::<hir::literal::Literal>::retain::<{closure@regex-syntax/src/hir/literal.rs:1311:22: 1311:25}>(move _28, move _29) -> [return: bb22, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_28),
            StorageDead(_27),
            StorageLive(_30),
            StorageLive(_31),
            _31 = &mut (*_7),
            StorageLive(_32),
            StorageLive(_33),
            _33 = _11,
            StorageLive(_34),
            _34 = _11,
            _32 = core::ops::Range::<usize> { start: move _33, end: move _34 },
            StorageDead(_34),
            StorageDead(_33),
            StorageLive(_35),
            _35 = move _22,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1312:9: 1312:54 (#0),
                    scope: scope[6],
                },
                kind: _30 = std::vec::Vec::<hir::literal::Literal>::splice::<core::ops::Range<usize>, std::vec::Drain<'_, hir::literal::Literal>>(move _31, move _32, move _35) -> [return: bb23, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            StorageDead(_32),
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1312:54: 1312:55 (#0),
                    scope: scope[6],
                },
                kind: drop(_30) -> [return: bb24, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageLive(_36),
            StorageLive(_37),
            _37 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1313:9: 1313:21 (#0),
                    scope: scope[6],
                },
                kind: _36 = hir::literal::Seq::dedup(move _37) -> [return: bb25, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageDead(_36),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1314:5: 1314:6 (#0),
                    scope: scope[4],
                },
                kind: drop(_22) -> [return: bb26, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_11),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1314:5: 1314:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb27, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1314:6: 1314:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1314:5: 1314:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb30, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1314:6: 1314:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1314:6: 1314:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1312:53: 1312:54 (#0),
                    scope: scope[6],
                },
                kind: drop(_35) -> [return: bb33, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1314:5: 1314:6 (#0),
                    scope: scope[4],
                },
                kind: drop(_22) -> [return: bb34, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1314:5: 1314:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb35, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1287:5: 1314:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1287:56: 1287:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut hir::literal::Seq,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1287:29: 1287:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/hir/literal.rs:1287:47: 1287:55 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/literal.rs:1287:40: 1287:45 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/literal.rs:1287:40: 1287:45 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut hir::literal::Seq,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1287:40: 1287:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/literal.rs:1288:21: 1288:71 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/literal.rs:1288:13: 1288:18 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<std::vec::Drain<'{erased}, hir::literal::Literal, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1288:13: 1288:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} mut std::vec::Vec<hir::literal::Literal, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1288:21: 1288:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::option::Option<std::vec::Vec<hir::literal::Literal, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1288:21: 1288:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:636 ~ regex_syntax[a00b]::hir::literal::{impl#4}::union_into_empty::{closure#0}),
            [
                i32,
                Binder { value: extern "RustCall" fn((&'{erased} mut std::vec::Vec<hir::literal::Literal, std::alloc::Global>,)) -> std::vec::Drain<'{erased}, hir::literal::Literal, std::alloc::Global>, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1288:49: 1288:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/literal.rs:1289:21: 1292:10 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/literal.rs:1289:13: 1289:18 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<hir::literal::Literal, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1289:13: 1289:18 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1290:13: 1290:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1290:21: 1290:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    ((*_1).0: core::option::Option<std::vec::Vec<hir::literal::Literal>>),
                                ),
                                regex-syntax/src/hir/literal.rs:1289:27: 1289:40 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/literal.rs:1291:13: 1291:31 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<hir::literal::Literal, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1291:18: 1291:30 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/literal.rs:1293:27: 1296:10 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/literal.rs:1293:13: 1293:24 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1293:13: 1293:24 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1293:33: 1293:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, hir::literal::Literal>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1293:33: 1293:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::Iter<'{erased}, hir::literal::Literal>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1293:33: 1293:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [hir::literal::Literal],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1293:33: 1293:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [hir::literal::Literal],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1293:33: 1293:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<hir::literal::Literal, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1293:33: 1293:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:637 ~ regex_syntax[a00b]::hir::literal::{impl#4}::union_into_empty::{closure#1}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'{erased} hir::literal::Literal,)) -> bool, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1293:55: 1293:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1294:13: 1294:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1294:21: 1294:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _12,
                                ),
                                regex-syntax/src/hir/literal.rs:1293:33: 1293:72 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/literal.rs:1295:13: 1295:20 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1295:18: 1295:19 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/literal.rs:1297:21: 1306:10 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/literal.rs:1297:13: 1297:18 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Drain<'{erased}, hir::literal::Literal, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1297:13: 1297:18 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1298:13: 1298:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1298:21: 1304:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<std::vec::Vec<hir::literal::Literal, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1302:33: 1302:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                regex-syntax/src/hir/literal.rs:1297:27: 1297:32 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/literal.rs:1305:13: 1305:23 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Drain<'{erased}, hir::literal::Literal, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1305:18: 1305:22 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1311:9: 1311:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<hir::literal::Literal, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1311:9: 1311:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:638 ~ regex_syntax[a00b]::hir::literal::{impl#4}::union_into_empty::{closure#2}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'^0 hir::literal::Literal,)) -> bool, bound_vars: [Region(BrAnon)] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1311:22: 1311:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::Splice<'{erased}, std::vec::Drain<'{erased}, hir::literal::Literal, std::alloc::Global>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1312:9: 1312:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<hir::literal::Literal, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1312:9: 1312:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1312:22: 1312:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1312:22: 1312:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1312:35: 1312:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::Drain<'{erased}, hir::literal::Literal, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1312:48: 1312:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1313:9: 1313:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hir::literal::Seq,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1313:9: 1313:13 (#0),
            scope: scope[0],
        },
    },
]