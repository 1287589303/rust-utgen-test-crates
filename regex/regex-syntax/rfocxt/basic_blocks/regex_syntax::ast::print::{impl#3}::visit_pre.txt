[
    BasicBlockData {
        statements: [
            PlaceMention((*_2)),
            _3 = discriminant((*_2)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:81:9: 81:19 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [7: bb3, 9: bb2, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = (),
            _0 = core::result::Result::<(), core::fmt::Error>::Ok(move _10),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:84:23: 84:24 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:82:13: 82:30 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:83:13: 83:39 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = &(((*_2) as Group).0: std::boxed::Box<ast::Group>),
            StorageLive(_5),
            _5 = &mut (*_1),
            StorageLive(_6),
            _6 = &(*(*_4)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:82:34: 82:55 (#0),
                    scope: scope[1],
                },
                kind: _0 = ast::print::Writer::<W>::fmt_group_pre(move _5, move _6) -> [return: bb5, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:82:54: 82:55 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            _7 = &(((*_2) as ClassBracketed).0: std::boxed::Box<ast::ClassBracketed>),
            StorageLive(_8),
            _8 = &mut (*_1),
            StorageLive(_9),
            _9 = &(*(*_7)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:83:43: 83:74 (#0),
                    scope: scope[2],
                },
                kind: _0 = ast::print::Writer::<W>::fmt_class_bracketed_pre(move _8, move _9) -> [return: bb7, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:83:73: 83:74 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:86:6: 86:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:80:5: 86:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:80:43: 80:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut ast::print::Writer<W/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:80:18: 80:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/ast/print.rs:80:34: 80:38 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/ast/print.rs:80:29: 80:32 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/print.rs:80:29: 80:32 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:80:29: 80:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:82:13: 82:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_2),
                                ),
                                regex-syntax/src/ast/print.rs:81:15: 81:19 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/print.rs:82:13: 82:30 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::boxed::Box<ast::Group, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:82:24: 82:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/print.rs:81:9: 85:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut ast::print::Writer<W/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:82:34: 82:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/print.rs:81:9: 85:10 (#0),
                },
            ),
        ),
        ty: &'{erased} ast::Group,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:82:53: 82:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_2),
                                ),
                                regex-syntax/src/ast/print.rs:81:15: 81:19 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/print.rs:83:13: 83:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::boxed::Box<ast::ClassBracketed, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:83:33: 83:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/print.rs:81:9: 85:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut ast::print::Writer<W/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:83:43: 83:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/print.rs:81:9: 85:10 (#0),
                },
            ),
        ),
        ty: &'{erased} ast::ClassBracketed,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:83:72: 83:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:84:21: 84:23 (#0),
            scope: scope[0],
        },
    },
]