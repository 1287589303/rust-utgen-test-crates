[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &_2,
            _6 = &(*_7),
            StorageLive(_8),
            _8 = {closure@regex-syntax/src/unicode.rs:579:50: 579:59},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:579:5: 579:62 (#0),
                    scope: scope[0],
                },
                kind: _4 = core::slice::<impl [(&str, &str)]>::binary_search_by_key::<'_, &str, {closure@regex-syntax/src/unicode.rs:579:50: 579:59}>(move _5, move _6, move _8) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:579:5: 580:14 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::result::Result::<usize, usize>::ok(move _4) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &(*_1),
            _9 = {closure@regex-syntax/src/unicode.rs:581:14: 581:17} { vals: move _10 },
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:579:5: 581:28 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::option::Option::<usize>::map::<&str, {closure@regex-syntax/src/unicode.rs:581:14: 581:17}>(move _3, move _9) -> [return: bb3, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_3),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:582:2: 582:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:575:1: 582:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:578:6: 578:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/unicode.rs:576:11: 576:25 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/unicode.rs:576:5: 576:9 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:576:5: 576:9 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [(&'{erased} str, &'{erased} str)],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:576:5: 576:9 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/unicode.rs:577:23: 577:27 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/unicode.rs:577:5: 577:21 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:577:5: 577:21 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:577:5: 577:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:579:5: 581:28 (#0),
                },
            ),
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:579:5: 580:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:579:5: 581:28 (#0),
                },
            ),
        ),
        ty: core::result::Result<usize, usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:579:5: 579:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:579:5: 581:28 (#0),
                },
            ),
        ),
        ty: &'{erased} [(&'{erased} str, &'{erased} str)],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:579:5: 579:9 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:579:5: 581:28 (#0),
                },
            ),
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:579:31: 579:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:579:5: 581:28 (#0),
                },
            ),
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:579:31: 579:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:579:5: 581:28 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1216 ~ regex_syntax[a00b]::unicode::canonical_value::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'{erased} (&'{erased} str, &'{erased} str),)) -> &'{erased} str, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:579:50: 579:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:579:5: 581:28 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1217 ~ regex_syntax[a00b]::unicode::canonical_value::{closure#1}),
            [
                i32,
                Binder { value: extern "RustCall" fn((usize,)) -> &'{erased} str, bound_vars: [] },
                (&'{erased} [(&'{erased} str, &'{erased} str)],),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:581:14: 581:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:579:5: 581:28 (#0),
                },
            ),
        ),
        ty: &'{erased} [(&'{erased} str, &'{erased} str)],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:581:14: 581:27 (#0),
            scope: scope[0],
        },
    },
]