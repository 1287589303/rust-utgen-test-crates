[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = &mut ((*_1).0: std::vec::Vec<(&ast::Ast, ast::visitor::Frame<'_>)>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:210:9: 210:27 (#0),
                    scope: scope[0],
                },
                kind: _4 = std::vec::Vec::<(&ast::Ast, ast::visitor::Frame<'_>)>::clear(move _5) -> [return: bb1, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &mut ((*_1).1: std::vec::Vec<(ast::visitor::ClassInduct<'_>, ast::visitor::ClassFrame<'_>)>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:211:9: 211:33 (#0),
                    scope: scope[0],
                },
                kind: _6 = std::vec::Vec::<(ast::visitor::ClassInduct<'_>, ast::visitor::ClassFrame<'_>)>::clear(move _7) -> [return: bb2, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &mut _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:213:9: 213:24 (#0),
                    scope: scope[0],
                },
                kind: _8 = <V as ast::visitor::Visitor>::start(move _9) -> [return: bb3, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            StorageLive(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:214:9: 253:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb4,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:214:9: 253:10 (#0),
                    scope: scope[0],
                },
                kind: falseUnwind -> [real: bb5, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &mut _3,
            StorageLive(_16),
            _16 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:215:13: 215:35 (#0),
                    scope: scope[0],
                },
                kind: _14 = <V as ast::visitor::Visitor>::visit_pre(move _15, move _16) -> [return: bb6, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:215:13: 215:36 (#1093),
                    scope: scope[0],
                },
                kind: _13 = <core::result::Result<(), <V as ast::visitor::Visitor>::Err> as core::ops::Try>::branch(move _14) -> [return: bb7, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            PlaceMention(_13),
            _17 = discriminant(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:215:13: 215:36 (#1093),
                    scope: scope[0],
                },
                kind: switchInt(move _17) -> [0: bb10, 1: bb9, otherwise: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:215:13: 215:36 (#1093),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:215:35: 215:36 (#1094),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb11, imaginary: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_21),
            _21 = ((_13 as Continue).0: ()),
            _12 = _21,
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:215:36: 215:37 (#0),
                    scope: scope[0],
                },
                kind: drop(_13) -> [return: bb13, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_18),
            _18 = move ((_13 as Break).0: core::result::Result<core::convert::Infallible, <V as ast::visitor::Visitor>::Err>),
            StorageLive(_20),
            _20 = move _18,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:215:13: 215:36 (#1093),
                    scope: scope[2],
                },
                kind: _0 = <core::result::Result<<V as ast::visitor::Visitor>::Output, <V as ast::visitor::Visitor>::Err> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, <V as ast::visitor::Visitor>::Err>>>::from_residual(move _20) -> [return: bb12, unwind: bb117],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:215:35: 215:36 (#1094),
                    scope: scope[0],
                },
                kind: drop(_18) -> [return: bb92, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            _26 = &mut (*_1),
            StorageLive(_27),
            _27 = &(*_2),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &mut _3,
            _28 = &mut (*_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:216:30: 216:60 (#0),
                    scope: scope[5],
                },
                kind: _25 = ast::visitor::HeapVisitor::<'_>::induct::<V>(move _26, move _27, move _28) -> [return: bb14, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_27),
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:216:30: 216:61 (#1095),
                    scope: scope[5],
                },
                kind: _24 = <core::result::Result<core::option::Option<ast::visitor::Frame<'_>>, <V as ast::visitor::Visitor>::Err> as core::ops::Try>::branch(move _25) -> [return: bb15, unwind: bb116],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            PlaceMention(_24),
            _30 = discriminant(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:216:30: 216:61 (#1095),
                    scope: scope[5],
                },
                kind: switchInt(move _30) -> [0: bb18, 1: bb17, otherwise: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:216:30: 216:61 (#1095),
                    scope: scope[5],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:216:60: 216:61 (#1096),
                    scope: scope[5],
                },
                kind: falseEdge -> [real: bb19, imaginary: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_34),
            _34 = move ((_24 as Continue).0: core::option::Option<ast::visitor::Frame<'_>>),
            _23 = move _34,
            StorageDead(_34),
            PlaceMention(_23),
            _35 = discriminant(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:216:20: 216:27 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _35) -> [1: bb22, otherwise: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_31),
            _31 = move ((_24 as Break).0: core::result::Result<core::convert::Infallible, <V as ast::visitor::Visitor>::Err>),
            StorageLive(_33),
            _33 = move _31,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:216:30: 216:61 (#1095),
                    scope: scope[7],
                },
                kind: _0 = <core::result::Result<<V as ast::visitor::Visitor>::Output, <V as ast::visitor::Visitor>::Err> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, <V as ast::visitor::Visitor>::Err>>>::from_residual(move _33) -> [return: bb20, unwind: bb113],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:216:60: 216:61 (#1096),
                    scope: scope[5],
                },
                kind: drop(_31) -> [return: bb90, unwind: bb115],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _22 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:221:13: 221:14 (#0),
                    scope: scope[0],
                },
                kind: drop(_24) -> [return: bb26, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:216:20: 216:27 (#0),
                    scope: scope[5],
                },
                kind: falseEdge -> [real: bb23, imaginary: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_36),
            _36 = move ((_23 as Some).0: ast::visitor::Frame<'_>),
            StorageLive(_38),
            StorageLive(_39),
            _39 = &_36,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:217:29: 217:38 (#0),
                    scope: scope[5],
                },
                kind: _38 = ast::visitor::Frame::<'_>::child(move _39) -> [return: bb24, unwind: bb115],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            FakeRead(ForLet(None), _38),
            StorageLive(_40),
            StorageLive(_41),
            _41 = &mut ((*_1).0: std::vec::Vec<(&ast::Ast, ast::visitor::Frame<'_>)>),
            StorageLive(_42),
            StorageLive(_43),
            _43 = _2,
            StorageLive(_44),
            _44 = move _36,
            _42 = (move _43, move _44),
            StorageDead(_44),
            StorageDead(_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:218:17: 218:42 (#0),
                    scope: scope[10],
                },
                kind: _40 = std::vec::Vec::<(&ast::Ast, ast::visitor::Frame<'_>)>::push(move _41, move _42) -> [return: bb25, unwind: bb115],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
            StorageDead(_41),
            StorageDead(_40),
            StorageLive(_45),
            _45 = &(*_38),
            _2 = move _45,
            StorageDead(_45),
            StorageDead(_38),
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:221:13: 221:14 (#0),
                    scope: scope[0],
                },
                kind: drop(_24) -> [return: bb79, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_24),
            StorageDead(_23),
            StorageDead(_22),
            StorageLive(_46),
            StorageLive(_47),
            StorageLive(_48),
            StorageLive(_49),
            _49 = &mut _3,
            StorageLive(_50),
            _50 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:224:13: 224:36 (#0),
                    scope: scope[0],
                },
                kind: _48 = <V as ast::visitor::Visitor>::visit_post(move _49, move _50) -> [return: bb27, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            StorageDead(_49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:224:13: 224:37 (#1097),
                    scope: scope[0],
                },
                kind: _47 = <core::result::Result<(), <V as ast::visitor::Visitor>::Err> as core::ops::Try>::branch(move _48) -> [return: bb28, unwind: bb112],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
            PlaceMention(_47),
            _51 = discriminant(_47),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:224:13: 224:37 (#1097),
                    scope: scope[0],
                },
                kind: switchInt(move _51) -> [0: bb31, 1: bb30, otherwise: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _47),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:224:13: 224:37 (#1097),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:224:36: 224:37 (#1098),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb32, imaginary: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_55),
            _55 = ((_47 as Continue).0: ()),
            _46 = _55,
            StorageDead(_55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:224:37: 224:38 (#0),
                    scope: scope[0],
                },
                kind: drop(_47) -> [return: bb34, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_52),
            _52 = move ((_47 as Break).0: core::result::Result<core::convert::Infallible, <V as ast::visitor::Visitor>::Err>),
            StorageLive(_54),
            _54 = move _52,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:224:13: 224:37 (#1097),
                    scope: scope[12],
                },
                kind: _0 = <core::result::Result<<V as ast::visitor::Visitor>::Output, <V as ast::visitor::Visitor>::Err> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, <V as ast::visitor::Visitor>::Err>>>::from_residual(move _54) -> [return: bb33, unwind: bb109],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:224:36: 224:37 (#1098),
                    scope: scope[0],
                },
                kind: drop(_52) -> [return: bb88, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            StorageDead(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:228:13: 252:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb35,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:228:13: 252:14 (#0),
                    scope: scope[0],
                },
                kind: falseUnwind -> [real: bb36, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_58),
            StorageLive(_59),
            StorageLive(_60),
            _60 = &mut ((*_1).0: std::vec::Vec<(&ast::Ast, ast::visitor::Frame<'_>)>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:229:47: 229:63 (#0),
                    scope: scope[0],
                },
                kind: _59 = std::vec::Vec::<(&ast::Ast, ast::visitor::Frame<'_>)>::pop(move _60) -> [return: bb37, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
            PlaceMention(_59),
            _61 = discriminant(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:229:41: 229:63 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _61) -> [0: bb39, 1: bb40, otherwise: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:229:47: 229:63 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:230:21: 230:25 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb41, imaginary: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_64),
            _64 = (((_59 as Some).0: (&ast::Ast, ast::visitor::Frame<'_>)).0: &ast::Ast),
            StorageLive(_65),
            _65 = move (((_59 as Some).0: (&ast::Ast, ast::visitor::Frame<'_>)).1: ast::visitor::Frame<'_>),
            StorageLive(_66),
            _66 = _64,
            StorageLive(_67),
            _67 = move _65,
            _58 = (move _66, move _67),
            StorageDead(_67),
            StorageDead(_66),
            StorageDead(_65),
            StorageDead(_64),
            PlaceMention(_58),
            StorageLive(_56),
            _56 = (_58.0: &ast::Ast),
            StorageLive(_57),
            _57 = move (_58.1: ast::visitor::Frame<'_>),
            StorageDead(_59),
            StorageDead(_58),
            StorageLive(_68),
            StorageLive(_69),
            StorageLive(_70),
            _70 = &(*_1),
            StorageLive(_71),
            _71 = move _57,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:235:34: 235:49 (#0),
                    scope: scope[17],
                },
                kind: _69 = ast::visitor::HeapVisitor::<'_>::pop(move _70, move _71) -> [return: bb43, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_63),
            _63 = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:230:36: 230:52 (#0),
                    scope: scope[0],
                },
                kind: _0 = <V as ast::visitor::Visitor>::finish(move _63) -> [return: bb42, unwind: bb108],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
            StorageDead(_59),
            StorageDead(_58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb94,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
            StorageDead(_70),
            PlaceMention(_69),
            _72 = discriminant(_69),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:235:24: 235:31 (#0),
                    scope: scope[17],
                },
                kind: switchInt(move _72) -> [1: bb44, otherwise: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:235:24: 235:31 (#0),
                    scope: scope[17],
                },
                kind: falseEdge -> [real: bb45, imaginary: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_73),
            _73 = move ((_69 as Some).0: ast::visitor::Frame<'_>),
            StorageLive(_75),
            PlaceMention(_73),
            _76 = discriminant(_73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:236:21: 236:28 (#0),
                    scope: scope[17],
                },
                kind: switchInt(move _76) -> [2: bb48, 3: bb47, otherwise: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _75 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:243:30: 243:32 (#0),
                    scope: scope[17],
                },
                kind: goto -> bb67,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:237:25: 237:50 (#0),
                    scope: scope[17],
                },
                kind: falseEdge -> [real: bb49, imaginary: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:240:25: 240:45 (#0),
                    scope: scope[17],
                },
                kind: falseEdge -> [real: bb58, imaginary: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_77),
            StorageLive(_78),
            StorageLive(_79),
            StorageLive(_80),
            _80 = &mut _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:238:29: 238:59 (#0),
                    scope: scope[17],
                },
                kind: _79 = <V as ast::visitor::Visitor>::visit_alternation_in(move _80) -> [return: bb50, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_80),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:238:29: 238:60 (#1099),
                    scope: scope[17],
                },
                kind: _78 = <core::result::Result<(), <V as ast::visitor::Visitor>::Err> as core::ops::Try>::branch(move _79) -> [return: bb51, unwind: bb107],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_79),
            PlaceMention(_78),
            _81 = discriminant(_78),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:238:29: 238:60 (#1099),
                    scope: scope[17],
                },
                kind: switchInt(move _81) -> [0: bb54, 1: bb53, otherwise: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _78),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:238:29: 238:60 (#1099),
                    scope: scope[17],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:238:59: 238:60 (#1100),
                    scope: scope[17],
                },
                kind: falseEdge -> [real: bb55, imaginary: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_85),
            _85 = ((_78 as Continue).0: ()),
            _77 = _85,
            StorageDead(_85),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:238:60: 238:61 (#0),
                    scope: scope[17],
                },
                kind: drop(_78) -> [return: bb57, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_82),
            _82 = move ((_78 as Break).0: core::result::Result<core::convert::Infallible, <V as ast::visitor::Visitor>::Err>),
            StorageLive(_84),
            _84 = move _82,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:238:29: 238:60 (#1099),
                    scope: scope[19],
                },
                kind: _0 = <core::result::Result<<V as ast::visitor::Visitor>::Output, <V as ast::visitor::Visitor>::Err> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, <V as ast::visitor::Visitor>::Err>>>::from_residual(move _84) -> [return: bb56, unwind: bb104],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_84),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:238:59: 238:60 (#1100),
                    scope: scope[17],
                },
                kind: drop(_82) -> [return: bb84, unwind: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_78),
            StorageDead(_77),
            _75 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:237:54: 239:26 (#0),
                    scope: scope[17],
                },
                kind: goto -> bb67,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_86),
            StorageLive(_87),
            StorageLive(_88),
            StorageLive(_89),
            _89 = &mut _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:241:29: 241:54 (#0),
                    scope: scope[17],
                },
                kind: _88 = <V as ast::visitor::Visitor>::visit_concat_in(move _89) -> [return: bb59, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_89),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:241:29: 241:55 (#1101),
                    scope: scope[17],
                },
                kind: _87 = <core::result::Result<(), <V as ast::visitor::Visitor>::Err> as core::ops::Try>::branch(move _88) -> [return: bb60, unwind: bb103],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_88),
            PlaceMention(_87),
            _90 = discriminant(_87),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:241:29: 241:55 (#1101),
                    scope: scope[17],
                },
                kind: switchInt(move _90) -> [0: bb63, 1: bb62, otherwise: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _87),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:241:29: 241:55 (#1101),
                    scope: scope[17],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:241:54: 241:55 (#1102),
                    scope: scope[17],
                },
                kind: falseEdge -> [real: bb64, imaginary: bb63],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_94),
            _94 = ((_87 as Continue).0: ()),
            _86 = _94,
            StorageDead(_94),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:241:55: 241:56 (#0),
                    scope: scope[17],
                },
                kind: drop(_87) -> [return: bb66, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_91),
            _91 = move ((_87 as Break).0: core::result::Result<core::convert::Infallible, <V as ast::visitor::Visitor>::Err>),
            StorageLive(_93),
            _93 = move _91,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:241:29: 241:55 (#1101),
                    scope: scope[23],
                },
                kind: _0 = <core::result::Result<<V as ast::visitor::Visitor>::Output, <V as ast::visitor::Visitor>::Err> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, <V as ast::visitor::Visitor>::Err>>>::from_residual(move _93) -> [return: bb65, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_93),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:241:54: 241:55 (#1102),
                    scope: scope[17],
                },
                kind: drop(_91) -> [return: bb82, unwind: bb102],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_87),
            StorageDead(_86),
            _75 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:240:49: 242:26 (#0),
                    scope: scope[17],
                },
                kind: goto -> bb67,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_75),
            StorageLive(_95),
            StorageLive(_96),
            StorageLive(_97),
            _97 = &_73,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:245:27: 245:36 (#0),
                    scope: scope[17],
                },
                kind: _96 = ast::visitor::Frame::<'_>::child(move _97) -> [return: bb68, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _95 = &(*_96),
            StorageDead(_97),
            _2 = move _95,
            StorageDead(_95),
            StorageDead(_96),
            StorageLive(_98),
            StorageLive(_99),
            _99 = &mut ((*_1).0: std::vec::Vec<(&ast::Ast, ast::visitor::Frame<'_>)>),
            StorageLive(_100),
            StorageLive(_101),
            _101 = &(*_56),
            StorageLive(_102),
            _102 = move _73,
            _100 = (move _101, move _102),
            StorageDead(_102),
            StorageDead(_101),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:246:21: 246:51 (#0),
                    scope: scope[17],
                },
                kind: _98 = std::vec::Vec::<(&ast::Ast, ast::visitor::Frame<'_>)>::push(move _99, move _100) -> [return: bb69, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_100),
            StorageDead(_99),
            StorageDead(_98),
            _11 = const (),
            StorageDead(_73),
            StorageDead(_69),
            StorageDead(_68),
            StorageDead(_57),
            StorageDead(_56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:214:9: 253:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb4,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _68 = const (),
            StorageDead(_69),
            StorageDead(_68),
            StorageLive(_103),
            StorageLive(_104),
            StorageLive(_105),
            StorageLive(_106),
            _106 = &mut _3,
            StorageLive(_107),
            _107 = &(*_56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:251:17: 251:45 (#0),
                    scope: scope[15],
                },
                kind: _105 = <V as ast::visitor::Visitor>::visit_post(move _106, move _107) -> [return: bb71, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_107),
            StorageDead(_106),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:251:17: 251:46 (#1103),
                    scope: scope[15],
                },
                kind: _104 = <core::result::Result<(), <V as ast::visitor::Visitor>::Err> as core::ops::Try>::branch(move _105) -> [return: bb72, unwind: bb99],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_105),
            PlaceMention(_104),
            _108 = discriminant(_104),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:251:17: 251:46 (#1103),
                    scope: scope[15],
                },
                kind: switchInt(move _108) -> [0: bb75, 1: bb74, otherwise: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _104),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:251:17: 251:46 (#1103),
                    scope: scope[15],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:251:45: 251:46 (#1104),
                    scope: scope[15],
                },
                kind: falseEdge -> [real: bb76, imaginary: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_112),
            _112 = ((_104 as Continue).0: ()),
            _103 = _112,
            StorageDead(_112),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:251:46: 251:47 (#0),
                    scope: scope[15],
                },
                kind: drop(_104) -> [return: bb78, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_109),
            _109 = move ((_104 as Break).0: core::result::Result<core::convert::Infallible, <V as ast::visitor::Visitor>::Err>),
            StorageLive(_111),
            _111 = move _109,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:251:17: 251:46 (#1103),
                    scope: scope[27],
                },
                kind: _0 = <core::result::Result<<V as ast::visitor::Visitor>::Output, <V as ast::visitor::Visitor>::Err> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, <V as ast::visitor::Visitor>::Err>>>::from_residual(move _111) -> [return: bb77, unwind: bb96],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_111),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:251:45: 251:46 (#1104),
                    scope: scope[15],
                },
                kind: drop(_109) -> [return: bb80, unwind: bb98],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_104),
            StorageDead(_103),
            _11 = const (),
            StorageDead(_57),
            StorageDead(_56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:228:13: 252:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb35,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_24),
            StorageDead(_23),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb4,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_109),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:251:46: 251:47 (#0),
                    scope: scope[15],
                },
                kind: drop(_104) -> [return: bb81, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_104),
            StorageDead(_103),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[15],
                },
                kind: goto -> bb87,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_91),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:241:55: 241:56 (#0),
                    scope: scope[17],
                },
                kind: drop(_87) -> [return: bb83, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_87),
            StorageDead(_86),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[17],
                },
                kind: goto -> bb86,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_82),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:238:60: 238:61 (#0),
                    scope: scope[17],
                },
                kind: drop(_78) -> [return: bb85, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_78),
            StorageDead(_77),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[17],
                },
                kind: goto -> bb86,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_75),
            StorageDead(_73),
            StorageDead(_69),
            StorageDead(_68),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[15],
                },
                kind: goto -> bb87,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_57),
            StorageDead(_56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb94,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:224:37: 224:38 (#0),
                    scope: scope[0],
                },
                kind: drop(_47) -> [return: bb89, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            StorageDead(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb94,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:221:13: 221:14 (#0),
                    scope: scope[0],
                },
                kind: drop(_24) -> [return: bb91, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_24),
            StorageDead(_23),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb94,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:215:36: 215:37 (#0),
                    scope: scope[0],
                },
                kind: drop(_13) -> [return: bb93, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb94,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:254:5: 254:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb95, unwind: bb122],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:254:6: 254:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:251:45: 251:46 (#1103),
                    scope: scope[27],
                },
                kind: drop(_111) -> [return: bb97, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:251:45: 251:46 (#1104),
                    scope: scope[15],
                },
                kind: drop(_109) -> [return: bb98, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:251:46: 251:47 (#0),
                    scope: scope[15],
                },
                kind: drop(_104) -> [return: bb121, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:251:45: 251:46 (#1103),
                    scope: scope[15],
                },
                kind: drop(_105) -> [return: bb121, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:241:54: 241:55 (#1101),
                    scope: scope[23],
                },
                kind: drop(_93) -> [return: bb101, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:241:54: 241:55 (#1102),
                    scope: scope[17],
                },
                kind: drop(_91) -> [return: bb102, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:241:55: 241:56 (#0),
                    scope: scope[17],
                },
                kind: drop(_87) -> [return: bb121, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:241:54: 241:55 (#1101),
                    scope: scope[17],
                },
                kind: drop(_88) -> [return: bb121, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:238:59: 238:60 (#1099),
                    scope: scope[19],
                },
                kind: drop(_84) -> [return: bb105, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:238:59: 238:60 (#1100),
                    scope: scope[17],
                },
                kind: drop(_82) -> [return: bb106, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:238:60: 238:61 (#0),
                    scope: scope[17],
                },
                kind: drop(_78) -> [return: bb121, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:238:59: 238:60 (#1099),
                    scope: scope[17],
                },
                kind: drop(_79) -> [return: bb121, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:230:51: 230:52 (#0),
                    scope: scope[0],
                },
                kind: drop(_63) -> [return: bb121, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:224:36: 224:37 (#1097),
                    scope: scope[12],
                },
                kind: drop(_54) -> [return: bb110, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:224:36: 224:37 (#1098),
                    scope: scope[0],
                },
                kind: drop(_52) -> [return: bb111, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:224:37: 224:38 (#0),
                    scope: scope[0],
                },
                kind: drop(_47) -> [return: bb121, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:224:36: 224:37 (#1097),
                    scope: scope[0],
                },
                kind: drop(_48) -> [return: bb121, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:216:60: 216:61 (#1095),
                    scope: scope[7],
                },
                kind: drop(_33) -> [return: bb114, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:216:60: 216:61 (#1096),
                    scope: scope[5],
                },
                kind: drop(_31) -> [return: bb115, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:221:13: 221:14 (#0),
                    scope: scope[0],
                },
                kind: drop(_24) -> [return: bb121, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:216:60: 216:61 (#1095),
                    scope: scope[5],
                },
                kind: drop(_25) -> [return: bb121, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:215:35: 215:36 (#1093),
                    scope: scope[2],
                },
                kind: drop(_20) -> [return: bb118, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:215:35: 215:36 (#1094),
                    scope: scope[0],
                },
                kind: drop(_18) -> [return: bb119, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:215:36: 215:37 (#0),
                    scope: scope[0],
                },
                kind: drop(_13) -> [return: bb121, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:215:35: 215:36 (#1093),
                    scope: scope[0],
                },
                kind: drop(_14) -> [return: bb121, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:254:5: 254:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb122, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:205:5: 254:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:236 ~ regex_syntax[a00b]::ast::visitor::Visitor::Output) }), Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:209:10: 209:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut ast::visitor::HeapVisitor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:206:9: 206:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/ast/visitor.rs:207:18: 207:25 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/ast/visitor.rs:207:9: 207:16 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:207:9: 207:16 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:207:9: 207:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/ast/visitor.rs:208:22: 208:23 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/ast/visitor.rs:208:9: 208:20 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:208:9: 208:20 (#0),
                    },
                ),
            ),
        ),
        ty: V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:208:9: 208:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:210:9: 210:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<(&'{erased} ast::Ast, ast::visitor::Frame<'{erased}>), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:210:9: 210:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:211:9: 211:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<(ast::visitor::ClassInduct<'{erased}>, ast::visitor::ClassFrame<'{erased}>), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:211:9: 211:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:213:9: 213:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:213:9: 213:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/visitor.rs:214:9: 253:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:214:9: 253:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:205:5: 254:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:215:13: 215:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:215:13: 215:36 (#1093),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:215:13: 215:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:215:13: 215:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:215:31: 215:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:215:35: 215:36 (#1094),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _13,
                                ),
                                regex-syntax/src/ast/visitor.rs:215:13: 215:36 (#1093),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:215:35: 215:36 (#1094),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:215:35: 215:36 (#1094),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:215:35: 215:36 (#1094),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:215:35: 215:36 (#1094),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _13,
                                ),
                                regex-syntax/src/ast/visitor.rs:215:13: 215:36 (#1093),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:215:13: 215:36 (#1093),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:215:13: 215:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:216:13: 221:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<ast::visitor::Frame<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:216:30: 216:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>, core::option::Option<ast::visitor::Frame<'{erased}>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:216:30: 216:61 (#1095),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::option::Option<ast::visitor::Frame<'{erased}>>, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:216:30: 216:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut ast::visitor::HeapVisitor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:216:30: 216:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:216:42: 216:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:216:47: 216:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:216:47: 216:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:216:60: 216:61 (#1096),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _24,
                                ),
                                regex-syntax/src/ast/visitor.rs:216:30: 216:61 (#1095),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:216:60: 216:61 (#1096),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:216:60: 216:61 (#1096),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:216:60: 216:61 (#1096),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:216:60: 216:61 (#1096),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _24,
                                ),
                                regex-syntax/src/ast/visitor.rs:216:30: 216:61 (#1095),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:216:30: 216:61 (#1095),
                    },
                ),
            ),
        ),
        ty: core::option::Option<ast::visitor::Frame<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:216:30: 216:61 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:216:20: 216:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _23,
                                ),
                                regex-syntax/src/ast/visitor.rs:216:30: 216:61 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:216:20: 216:27 (#0),
                    },
                ),
            ),
        ),
        ty: ast::visitor::Frame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:216:25: 216:26 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:216:62: 221:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/ast/visitor.rs:217:29: 217:38 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:217:21: 217:26 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:217:21: 217:26 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::visitor::Frame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:217:29: 217:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:218:17: 218:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<(&'{erased} ast::Ast, ast::visitor::Frame<'{erased}>), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:218:17: 218:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} ast::Ast, ast::visitor::Frame<'{erased}>),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:218:33: 218:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:218:34: 218:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::visitor::Frame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:218:39: 218:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:219:23: 219:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:224:13: 224:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:224:13: 224:37 (#1097),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:224:13: 224:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:224:13: 224:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:224:32: 224:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:224:36: 224:37 (#1098),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _47,
                                ),
                                regex-syntax/src/ast/visitor.rs:224:13: 224:37 (#1097),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:224:36: 224:37 (#1098),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:224:36: 224:37 (#1098),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:224:36: 224:37 (#1098),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:224:36: 224:37 (#1098),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _47,
                                ),
                                regex-syntax/src/ast/visitor.rs:224:13: 224:37 (#1097),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:224:13: 224:37 (#1097),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:224:13: 224:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _58,
                                ),
                                regex-syntax/src/ast/visitor.rs:229:41: 232:18 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:229:21: 229:38 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:229:22: 229:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _58,
                                ),
                                regex-syntax/src/ast/visitor.rs:229:41: 232:18 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:229:21: 229:38 (#0),
                    },
                ),
            ),
        ),
        ty: ast::visitor::Frame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:229:32: 229:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} ast::Ast, ast::visitor::Frame<'{erased}>),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:229:41: 232:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(&'{erased} ast::Ast, ast::visitor::Frame<'{erased}>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:229:47: 229:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<(&'{erased} ast::Ast, ast::visitor::Frame<'{erased}>), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:229:47: 229:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:230:21: 230:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:230:29: 230:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:230:36: 230:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _59,
                                ),
                                regex-syntax/src/ast/visitor.rs:229:47: 229:63 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:231:21: 231:44 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:231:27: 231:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _59,
                                ),
                                regex-syntax/src/ast/visitor.rs:229:47: 229:63 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:231:21: 231:44 (#0),
                    },
                ),
            ),
        ),
        ty: ast::visitor::Frame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:231:37: 231:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:231:49: 231:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::visitor::Frame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:231:59: 231:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:235:17: 248:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<ast::visitor::Frame<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:235:34: 235:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::visitor::HeapVisitor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:235:34: 235:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::visitor::Frame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:235:43: 235:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:235:24: 235:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _69,
                                ),
                                regex-syntax/src/ast/visitor.rs:235:34: 235:49 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:235:24: 235:31 (#0),
                    },
                ),
            ),
        ),
        ty: ast::visitor::Frame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:235:29: 235:30 (#0),
            scope: scope[17],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:235:50: 248:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:236:21: 244:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:237:25: 237:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:238:29: 238:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:238:29: 238:60 (#1099),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:238:29: 238:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:238:29: 238:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:238:59: 238:60 (#1100),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _78,
                                ),
                                regex-syntax/src/ast/visitor.rs:238:29: 238:60 (#1099),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:238:59: 238:60 (#1100),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:238:59: 238:60 (#1100),
            scope: scope[17],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:238:59: 238:60 (#1100),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:238:59: 238:60 (#1100),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _78,
                                ),
                                regex-syntax/src/ast/visitor.rs:238:29: 238:60 (#1099),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:238:29: 238:60 (#1099),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:238:29: 238:60 (#0),
            scope: scope[17],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:241:29: 241:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:241:29: 241:55 (#1101),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:241:29: 241:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:241:29: 241:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:241:54: 241:55 (#1102),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _87,
                                ),
                                regex-syntax/src/ast/visitor.rs:241:29: 241:55 (#1101),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:241:54: 241:55 (#1102),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:241:54: 241:55 (#1102),
            scope: scope[17],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:241:54: 241:55 (#1102),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:241:54: 241:55 (#1102),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _87,
                                ),
                                regex-syntax/src/ast/visitor.rs:241:29: 241:55 (#1101),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:241:29: 241:55 (#1101),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:241:29: 241:55 (#0),
            scope: scope[17],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:245:27: 245:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:245:27: 245:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::visitor::Frame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:245:27: 245:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:246:21: 246:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<(&'{erased} ast::Ast, ast::visitor::Frame<'{erased}>), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:246:21: 246:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} ast::Ast, ast::visitor::Frame<'{erased}>),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:246:37: 246:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:246:38: 246:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::visitor::Frame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:246:48: 246:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:251:17: 251:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:251:17: 251:46 (#1103),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:251:17: 251:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:251:17: 251:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:251:36: 251:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:251:45: 251:46 (#1104),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _104,
                                ),
                                regex-syntax/src/ast/visitor.rs:251:17: 251:46 (#1103),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:251:45: 251:46 (#1104),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:251:45: 251:46 (#1104),
            scope: scope[15],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:251:45: 251:46 (#1104),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:251:45: 251:46 (#1104),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _104,
                                ),
                                regex-syntax/src/ast/visitor.rs:251:17: 251:46 (#1103),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:251:17: 251:46 (#1103),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:251:17: 251:46 (#0),
            scope: scope[15],
        },
    },
]