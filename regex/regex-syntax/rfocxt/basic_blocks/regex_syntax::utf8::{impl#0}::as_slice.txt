[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            PlaceMention((*_1)),
            _3 = discriminant((*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:138:9: 138:20 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), (*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:138:15: 138:20 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:139:13: 139:23 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:140:13: 140:23 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb8, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:141:13: 141:25 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_17),
            _17 = &(((*_1) as Four).0: [utf8::Utf8Range; 4]),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = &(*_17),
            StorageLive(_21),
            _21 = core::ops::RangeFull,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:142:30: 142:34 (#0),
                    scope: scope[4],
                },
                kind: _19 = <[utf8::Utf8Range; 4] as core::ops::Index<core::ops::RangeFull>>::index(move _20, move _21) -> [return: bb12, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = &(((*_1) as One).0: utf8::Utf8Range),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:139:27: 139:45 (#0),
                    scope: scope[1],
                },
                kind: _5 = core::slice::from_ref::<utf8::Utf8Range>(move _6) -> [return: bb7, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = &(*_5),
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:139:44: 139:45 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            _7 = &(((*_1) as Two).0: [utf8::Utf8Range; 2]),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &(*_7),
            StorageLive(_11),
            _11 = core::ops::RangeFull,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:140:29: 140:33 (#0),
                    scope: scope[2],
                },
                kind: _9 = <[utf8::Utf8Range; 2] as core::ops::Index<core::ops::RangeFull>>::index(move _10, move _11) -> [return: bb9, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            _8 = &(*_9),
            _2 = &(*_8),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:140:32: 140:33 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            _12 = &(((*_1) as Three).0: [utf8::Utf8Range; 3]),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &(*_12),
            StorageLive(_16),
            _16 = core::ops::RangeFull,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:141:31: 141:35 (#0),
                    scope: scope[3],
                },
                kind: _14 = <[utf8::Utf8Range; 3] as core::ops::Index<core::ops::RangeFull>>::index(move _15, move _16) -> [return: bb11, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_15),
            _13 = &(*_14),
            _2 = &(*_13),
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:141:34: 141:35 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_20),
            _18 = &(*_19),
            _2 = &(*_18),
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:142:33: 142:34 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = &(*_2),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:144:6: 144:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:136:5: 144:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [utf8::Utf8Range],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:136:31: 136:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} utf8::Utf8Sequence,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:136:21: 136:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:138:9: 143:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [utf8::Utf8Range],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:138:9: 143:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:139:13: 139:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-syntax/src/utf8.rs:138:15: 138:20 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/utf8.rs:139:13: 139:23 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} utf8::Utf8Range,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:139:17: 139:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:138:9: 143:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [utf8::Utf8Range],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:139:27: 139:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:138:9: 143:10 (#0),
                },
            ),
        ),
        ty: &'{erased} utf8::Utf8Range,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:139:43: 139:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-syntax/src/utf8.rs:138:15: 138:20 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/utf8.rs:140:13: 140:23 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [utf8::Utf8Range; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:140:17: 140:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:138:9: 143:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [utf8::Utf8Range],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:140:27: 140:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:138:9: 143:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [utf8::Utf8Range],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:140:29: 140:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:138:9: 143:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [utf8::Utf8Range; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:140:28: 140:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:138:9: 143:10 (#0),
                },
            ),
        ),
        ty: core::ops::RangeFull,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:140:30: 140:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-syntax/src/utf8.rs:138:15: 138:20 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/utf8.rs:141:13: 141:25 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [utf8::Utf8Range; 3_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:141:19: 141:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:138:9: 143:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [utf8::Utf8Range],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:141:29: 141:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:138:9: 143:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [utf8::Utf8Range],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:141:31: 141:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:138:9: 143:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [utf8::Utf8Range; 3_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:141:30: 141:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:138:9: 143:10 (#0),
                },
            ),
        ),
        ty: core::ops::RangeFull,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:141:32: 141:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-syntax/src/utf8.rs:138:15: 138:20 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/utf8.rs:142:13: 142:24 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [utf8::Utf8Range; 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:142:18: 142:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:138:9: 143:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [utf8::Utf8Range],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:142:28: 142:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:138:9: 143:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [utf8::Utf8Range],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:142:30: 142:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:138:9: 143:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [utf8::Utf8Range; 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:142:29: 142:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:138:9: 143:10 (#0),
                },
            ),
        ),
        ty: core::ops::RangeFull,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:142:31: 142:33 (#0),
            scope: scope[0],
        },
    },
]