[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1790:27: 1790:40 (#0),
                    scope: scope[0],
                },
                kind: _5 = ast::parse::ParserI::<'_, P>::parser(move _6) -> [return: bb1, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            _4 = &((*_5).11: core::cell::RefCell<std::string::String>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1790:27: 1790:61 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::cell::RefCell::<std::string::String>::borrow_mut(move _4) -> [return: bb2, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageDead(_5),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &mut _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1791:9: 1791:24 (#0),
                    scope: scope[1],
                },
                kind: _9 = <core::cell::RefMut<'_, std::string::String> as core::ops::DerefMut>::deref_mut(move _10) -> [return: bb3, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = &mut (*_9),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1791:9: 1791:24 (#0),
                    scope: scope[1],
                },
                kind: _7 = std::string::String::clear(move _8) -> [return: bb4, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_9),
            StorageDead(_7),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1793:25: 1793:35 (#0),
                    scope: scope[1],
                },
                kind: _11 = ast::parse::ParserI::<'_, P>::pos(move _12) -> [return: bb5, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            FakeRead(ForLet(None), _11),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1794:21: 1794:37 (#0),
                    scope: scope[2],
                },
                kind: _14 = ast::parse::ParserI::<'_, P>::span_char(move _15) -> [return: bb6, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            _13 = (_14.1: ast::Position),
            FakeRead(ForLet(None), _13),
            StorageDead(_14),
            StorageLive(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1795:9: 1803:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1795:9: 1803:10 (#0),
                    scope: scope[3],
                },
                kind: falseUnwind -> [real: bb8, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_18),
            StorageLive(_19),
            _19 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1795:15: 1795:41 (#0),
                    scope: scope[3],
                },
                kind: _18 = ast::parse::ParserI::<'_, P>::bump_and_bump_space(move _19) -> [return: bb9, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1795:15: 1795:41 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _18) -> [0: bb24, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            _22 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1795:45: 1795:56 (#0),
                    scope: scope[3],
                },
                kind: _21 = ast::parse::ParserI::<'_, P>::char(move _22) -> [return: bb11, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            _20 = Ne(move _21, const '}'),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1795:45: 1795:63 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _20) -> [0: bb23, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            _26 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1796:24: 1796:35 (#0),
                    scope: scope[3],
                },
                kind: _25 = ast::parse::ParserI::<'_, P>::char(move _26) -> [return: bb13, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1796:17: 1796:36 (#0),
                    scope: scope[3],
                },
                kind: _24 = ast::parse::is_hex(move _25) -> [return: bb14, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1796:17: 1796:36 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _24) -> [0: bb16, otherwise: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            _23 = const (),
            StorageDead(_24),
            StorageDead(_23),
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            _36 = &mut _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1802:13: 1802:38 (#0),
                    scope: scope[3],
                },
                kind: _35 = <core::cell::RefMut<'_, std::string::String> as core::ops::DerefMut>::deref_mut(move _36) -> [return: bb20, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &(*_1),
            StorageLive(_30),
            StorageLive(_31),
            _31 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1798:21: 1798:37 (#0),
                    scope: scope[3],
                },
                kind: _30 = ast::parse::ParserI::<'_, P>::span_char(move _31) -> [return: bb17, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageLive(_32),
            _32 = ast::ErrorKind::EscapeHexInvalidDigit,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1797:28: 1800:18 (#0),
                    scope: scope[3],
                },
                kind: _28 = ast::parse::ParserI::<'_, P>::error(move _29, move _30, move _32) -> [return: bb18, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            StorageDead(_30),
            StorageDead(_29),
            _0 = core::result::Result::<ast::Literal, ast::Error>::Err(move _28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1800:18: 1800:19 (#0),
                    scope: scope[3],
                },
                kind: drop(_28) -> [return: bb19, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_24),
            StorageDead(_23),
            StorageDead(_20),
            StorageDead(_18),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb61,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _34 = &mut (*_35),
            StorageDead(_36),
            StorageLive(_37),
            StorageLive(_38),
            _38 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1802:26: 1802:37 (#0),
                    scope: scope[3],
                },
                kind: _37 = ast::parse::ParserI::<'_, P>::char(move _38) -> [return: bb21, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1802:13: 1802:38 (#0),
                    scope: scope[3],
                },
                kind: _33 = std::string::String::push(move _34, move _37) -> [return: bb22, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageDead(_34),
            StorageDead(_35),
            StorageDead(_33),
            _17 = const (),
            StorageDead(_20),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1795:9: 1803:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_40),
            _16 = const (),
            StorageDead(_40),
            StorageDead(_20),
            StorageDead(_18),
            StorageDead(_16),
            StorageLive(_42),
            StorageLive(_43),
            StorageLive(_44),
            _44 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1804:12: 1804:25 (#0),
                    scope: scope[3],
                },
                kind: _43 = ast::parse::ParserI::<'_, P>::is_eof(move _44) -> [return: bb26, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1804:12: 1804:25 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _43) -> [0: bb32, otherwise: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            StorageLive(_46),
            StorageLive(_47),
            _47 = &(*_1),
            StorageLive(_48),
            StorageLive(_49),
            _49 = _11,
            StorageLive(_50),
            StorageLive(_51),
            _51 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1806:38: 1806:48 (#0),
                    scope: scope[3],
                },
                kind: _50 = ast::parse::ParserI::<'_, P>::pos(move _51) -> [return: bb28, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1806:17: 1806:49 (#0),
                    scope: scope[3],
                },
                kind: _48 = ast::Span::new(move _49, move _50) -> [return: bb29, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            StorageDead(_49),
            StorageLive(_52),
            _52 = ast::ErrorKind::EscapeUnexpectedEof,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1805:24: 1808:14 (#0),
                    scope: scope[3],
                },
                kind: _46 = ast::parse::ParserI::<'_, P>::error(move _47, move _48, move _52) -> [return: bb30, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            StorageDead(_48),
            StorageDead(_47),
            _0 = core::result::Result::<ast::Literal, ast::Error>::Err(move _46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1808:14: 1808:15 (#0),
                    scope: scope[3],
                },
                kind: drop(_46) -> [return: bb31, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
            StorageDead(_43),
            StorageDead(_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb61,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            _42 = const (),
            StorageDead(_43),
            StorageDead(_42),
            StorageLive(_53),
            StorageLive(_54),
            _54 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1810:19: 1810:29 (#0),
                    scope: scope[3],
                },
                kind: _53 = ast::parse::ParserI::<'_, P>::pos(move _54) -> [return: bb33, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            FakeRead(ForLet(None), _53),
            StorageLive(_55),
            StorageLive(_56),
            StorageLive(_57),
            StorageLive(_58),
            _58 = &_3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1811:19: 1811:35 (#0),
                    scope: scope[4],
                },
                kind: _57 = <core::cell::RefMut<'_, std::string::String> as core::ops::Deref>::deref(move _58) -> [return: bb34, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _56 = &(*_57),
            StorageDead(_58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1811:19: 1811:35 (#0),
                    scope: scope[4],
                },
                kind: _55 = std::string::String::as_str(move _56) -> [return: bb35, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
            FakeRead(ForLet(None), _55),
            StorageDead(_57),
            StorageLive(_59),
            StorageLive(_60),
            StorageLive(_61),
            StorageLive(_62),
            StorageLive(_63),
            _63 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1812:20: 1812:31 (#0),
                    scope: scope[5],
                },
                kind: _62 = ast::parse::ParserI::<'_, P>::char(move _63) -> [return: bb36, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
            _61 = &_62,
            StorageLive(_64),
            StorageLive(_65),
            _65 = const '}',
            _64 = &_65,
            _60 = (move _61, move _64),
            StorageDead(_64),
            StorageDead(_61),
            PlaceMention(_60),
            StorageLive(_66),
            _66 = (_60.0: &char),
            StorageLive(_67),
            _67 = (_60.1: &char),
            StorageLive(_68),
            StorageLive(_69),
            _69 = (*_66),
            StorageLive(_70),
            _70 = (*_67),
            _68 = Eq(move _69, move _70),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46 (#74),
                    scope: scope[6],
                },
                kind: switchInt(move _68) -> [0: bb38, otherwise: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_70),
            StorageDead(_69),
            _59 = const (),
            StorageDead(_68),
            StorageDead(_67),
            StorageDead(_66),
            StorageDead(_65),
            StorageDead(_62),
            StorageDead(_60),
            StorageDead(_59),
            StorageLive(_80),
            StorageLive(_81),
            _81 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1813:9: 1813:35 (#0),
                    scope: scope[5],
                },
                kind: _80 = ast::parse::ParserI::<'_, P>::bump_and_bump_space(move _81) -> [return: bb39, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_70),
            StorageDead(_69),
            StorageLive(_72),
            _72 = core::panicking::AssertKind::Eq,
            FakeRead(ForLet(None), _72),
            StorageLive(_73),
            StorageLive(_74),
            _74 = move _72,
            StorageLive(_75),
            StorageLive(_76),
            _76 = &(*_66),
            _75 = &(*_76),
            StorageLive(_77),
            StorageLive(_78),
            _78 = &(*_67),
            _77 = &(*_78),
            StorageLive(_79),
            _79 = core::option::Option::<core::fmt::Arguments<'_>>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114 (#74),
                    scope: scope[7],
                },
                kind: _73 = core::panicking::assert_failed::<char, char>(move _74, move _75, move _77, move _79) -> bb64,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_81),
            StorageDead(_80),
            StorageLive(_82),
            StorageLive(_83),
            StorageLive(_84),
            _84 = &(*_55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1815:12: 1815:26 (#0),
                    scope: scope[5],
                },
                kind: _83 = core::str::<impl str>::is_empty(move _84) -> [return: bb40, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1815:12: 1815:26 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _83) -> [0: bb46, otherwise: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_84),
            StorageLive(_86),
            StorageLive(_87),
            _87 = &(*_1),
            StorageLive(_88),
            StorageLive(_89),
            _89 = _11,
            StorageLive(_90),
            StorageLive(_91),
            _91 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1817:38: 1817:48 (#0),
                    scope: scope[5],
                },
                kind: _90 = ast::parse::ParserI::<'_, P>::pos(move _91) -> [return: bb42, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_91),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1817:17: 1817:49 (#0),
                    scope: scope[5],
                },
                kind: _88 = ast::Span::new(move _89, move _90) -> [return: bb43, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_90),
            StorageDead(_89),
            StorageLive(_92),
            _92 = ast::ErrorKind::EscapeHexEmpty,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1816:24: 1819:14 (#0),
                    scope: scope[5],
                },
                kind: _86 = ast::parse::ParserI::<'_, P>::error(move _87, move _88, move _92) -> [return: bb44, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_92),
            StorageDead(_88),
            StorageDead(_87),
            _0 = core::result::Result::<ast::Literal, ast::Error>::Err(move _86),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1819:14: 1819:15 (#0),
                    scope: scope[5],
                },
                kind: drop(_86) -> [return: bb45, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_86),
            StorageDead(_83),
            StorageDead(_82),
            StorageDead(_55),
            StorageDead(_53),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb61,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_84),
            _82 = const (),
            StorageDead(_83),
            StorageDead(_82),
            StorageLive(_93),
            StorageLive(_94),
            StorageLive(_95),
            StorageLive(_96),
            _96 = &(*_55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1821:15: 1821:43 (#0),
                    scope: scope[5],
                },
                kind: _95 = core::num::<impl u32>::from_str_radix(move _96, const 16_u32) -> [return: bb47, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_96),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1821:15: 1821:48 (#0),
                    scope: scope[5],
                },
                kind: _94 = core::result::Result::<u32, core::num::ParseIntError>::ok(move _95) -> [return: bb48, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_95),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1821:15: 1821:73 (#0),
                    scope: scope[5],
                },
                kind: _93 = core::option::Option::<u32>::and_then::<char, fn(u32) -> core::option::Option<char> {core::char::methods::<impl char>::from_u32}>(move _94, core::char::methods::<impl char>::from_u32) -> [return: bb49, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_94),
            PlaceMention(_93),
            _97 = discriminant(_93),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1821:9: 1821:73 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _97) -> [0: bb51, 1: bb52, otherwise: bb50],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _93),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1821:15: 1821:73 (#0),
                    scope: scope[5],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1822:13: 1822:17 (#0),
                    scope: scope[5],
                },
                kind: falseEdge -> [real: bb53, imaginary: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_104),
            _104 = ((_93 as Some).0: char),
            StorageLive(_105),
            StorageLive(_106),
            StorageLive(_107),
            _107 = _13,
            StorageLive(_108),
            StorageLive(_109),
            _109 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1827:40: 1827:50 (#0),
                    scope: scope[8],
                },
                kind: _108 = ast::parse::ParserI::<'_, P>::pos(move _109) -> [return: bb57, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_98),
            StorageLive(_99),
            _99 = &(*_1),
            StorageLive(_100),
            StorageLive(_101),
            _101 = _13,
            StorageLive(_102),
            _102 = _53,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1823:17: 1823:38 (#0),
                    scope: scope[5],
                },
                kind: _100 = ast::Span::new(move _101, move _102) -> [return: bb54, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_102),
            StorageDead(_101),
            StorageLive(_103),
            _103 = ast::ErrorKind::EscapeHexInvalid,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1822:25: 1825:14 (#0),
                    scope: scope[5],
                },
                kind: _98 = ast::parse::ParserI::<'_, P>::error(move _99, move _100, move _103) -> [return: bb55, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_103),
            StorageDead(_100),
            StorageDead(_99),
            _0 = core::result::Result::<ast::Literal, ast::Error>::Err(move _98),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1825:14: 1825:15 (#0),
                    scope: scope[5],
                },
                kind: drop(_98) -> [return: bb56, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_98),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1825:14: 1825:15 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb59,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_109),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1827:23: 1827:51 (#0),
                    scope: scope[8],
                },
                kind: _106 = ast::Span::new(move _107, move _108) -> [return: bb58, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_108),
            StorageDead(_107),
            StorageLive(_110),
            StorageLive(_111),
            _111 = move _2,
            _110 = ast::LiteralKind::HexBrace(move _111),
            StorageDead(_111),
            StorageLive(_112),
            _112 = _104,
            _105 = ast::Literal { span: move _106, kind: move _110, c: move _112 },
            StorageDead(_112),
            StorageDead(_110),
            StorageDead(_106),
            _0 = core::result::Result::<ast::Literal, ast::Error>::Ok(move _105),
            StorageDead(_105),
            StorageDead(_104),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1830:14: 1830:15 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb59,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_55),
            StorageDead(_53),
            StorageDead(_13),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1832:5: 1832:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb60, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_93),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1832:6: 1832:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb63,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1832:5: 1832:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb62, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1832:6: 1832:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb63,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1832:6: 1832:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1832:5: 1832:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb65, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1786:5: 1832:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<ast::Literal, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1789:10: 1789:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1787:9: 1787:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/ast/parse.rs:1788:15: 1788:34 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/ast/parse.rs:1788:9: 1788:13 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:1788:9: 1788:13 (#0),
                    },
                ),
            ),
        ),
        ty: ast::HexLiteralKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1788:9: 1788:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/ast/parse.rs:1790:27: 1790:61 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:1790:13: 1790:24 (#0),
                    },
                ),
            ),
        ),
        ty: core::cell::RefMut<'{erased}, std::string::String>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1790:13: 1790:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::cell::RefCell<std::string::String>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1790:27: 1790:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::Parser,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1790:27: 1790:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1790:27: 1790:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1791:9: 1791:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1791:9: 1791:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1791:9: 1791:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::cell::RefMut<'{erased}, std::string::String>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1791:9: 1791:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/ast/parse.rs:1793:25: 1793:35 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:1793:13: 1793:22 (#0),
                    },
                ),
            ),
        ),
        ty: ast::Position,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1793:13: 1793:22 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1793:25: 1793:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/ast/parse.rs:1794:21: 1794:41 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:1794:13: 1794:18 (#0),
                    },
                ),
            ),
        ),
        ty: ast::Position,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1794:13: 1794:18 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1794:21: 1794:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1794:21: 1794:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1795:9: 1803:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1786:5: 1832:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:1795:9: 1803:10 (#979),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1795:15: 1795:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:1795:9: 1803:10 (#979),
                },
            ),
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1795:15: 1795:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:1795:9: 1803:10 (#979),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1795:45: 1795:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:1795:9: 1803:10 (#979),
                },
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1795:45: 1795:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:1795:9: 1803:10 (#979),
                },
            ),
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1795:45: 1795:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1796:13: 1801:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1796:17: 1796:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1796:24: 1796:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1796:24: 1796:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1796:37: 1801:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: ast::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1797:28: 1800:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1797:28: 1797:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1798:21: 1798:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1798:21: 1798:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::ErrorKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1799:21: 1799:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1802:13: 1802:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1802:13: 1802:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1802:13: 1802:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::cell::RefMut<'{erased}, std::string::String>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1802:13: 1802:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1802:26: 1802:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1802:26: 1802:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:1795:9: 1803:10 (#979),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1795:9: 1803:10 (#979),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1795:9: 1803:10 (#979),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1795:9: 1803:10 (#979),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1804:9: 1809:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1804:12: 1804:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1804:12: 1804:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1804:26: 1809:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: ast::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1805:24: 1808:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1805:24: 1805:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1806:17: 1806:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::Position,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1806:27: 1806:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::Position,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1806:38: 1806:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1806:38: 1806:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::ErrorKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1807:17: 1807:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/ast/parse.rs:1810:19: 1810:29 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:1810:13: 1810:16 (#0),
                    },
                ),
            ),
        ),
        ty: ast::Position,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1810:13: 1810:16 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1810:19: 1810:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/ast/parse.rs:1811:19: 1811:35 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:1811:13: 1811:16 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1811:13: 1811:16 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1811:19: 1811:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1811:19: 1811:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::cell::RefMut<'{erased}, std::string::String>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1811:19: 1811:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:9: 48:10 (#74),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} char, &'{erased} char),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32 (#74),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} char,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:16: 38:22 (#74),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1812:20: 1812:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1812:20: 1812:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} char,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31 (#74),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1812:33: 1812:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _60,
                                ),
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32 (#74),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:13: 39:34 (#74),
                    },
                ),
            ),
        ),
        ty: &'{erased} char,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14: 39:22 (#74),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _60,
                                ),
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32 (#74),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:13: 39:34 (#74),
                    },
                ),
            ),
        ),
        ty: &'{erased} char,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24: 39:33 (#74),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#74),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46 (#74),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#74),
                },
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:22: 40:31 (#74),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#74),
                },
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:35: 40:45 (#74),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#74),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:47: 46:18 (#74),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:32: 41:65 (#74),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29 (#74),
                    },
                ),
            ),
        ),
        ty: core::panicking::AssertKind,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29 (#74),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114 (#74),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::panicking::AssertKind,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:54: 45:58 (#74),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} char,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:60: 45:70 (#74),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} char,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:60: 45:70 (#74),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} char,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:72: 45:83 (#74),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} char,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:72: 45:83 (#74),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::fmt::Arguments<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:85: 45:113 (#74),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1813:9: 1813:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1813:9: 1813:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1815:9: 1820:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1815:12: 1815:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1815:12: 1815:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1815:27: 1820:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: ast::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1816:24: 1819:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1816:24: 1816:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1817:17: 1817:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::Position,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1817:27: 1817:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::Position,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1817:38: 1817:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1817:38: 1817:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::ErrorKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1818:17: 1818:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/parse.rs:1821:9: 1831:10 (#0),
                },
            ),
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1821:15: 1821:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/parse.rs:1821:9: 1831:10 (#0),
                },
            ),
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1821:15: 1821:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/parse.rs:1821:9: 1831:10 (#0),
                },
            ),
        ),
        ty: core::result::Result<u32, core::num::ParseIntError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1821:15: 1821:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/parse.rs:1821:9: 1831:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1821:35: 1821:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1822:13: 1822:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: ast::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1822:25: 1825:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/parse.rs:1821:9: 1831:10 (#0),
                },
            ),
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1822:25: 1822:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/parse.rs:1821:9: 1831:10 (#0),
                },
            ),
        ),
        ty: ast::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1823:17: 1823:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/parse.rs:1821:9: 1831:10 (#0),
                },
            ),
        ),
        ty: ast::Position,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1823:27: 1823:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/parse.rs:1821:9: 1831:10 (#0),
                },
            ),
        ),
        ty: ast::Position,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1823:34: 1823:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/parse.rs:1821:9: 1831:10 (#0),
                },
            ),
        ),
        ty: ast::ErrorKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1824:17: 1824:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _93,
                                ),
                                regex-syntax/src/ast/parse.rs:1821:15: 1821:73 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:1826:13: 1826:20 (#0),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1826:18: 1826:19 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: ast::Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1826:27: 1830:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: ast::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1827:23: 1827:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/parse.rs:1821:9: 1831:10 (#0),
                },
            ),
        ),
        ty: ast::Position,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1827:33: 1827:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/parse.rs:1821:9: 1831:10 (#0),
                },
            ),
        ),
        ty: ast::Position,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1827:40: 1827:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/parse.rs:1821:9: 1831:10 (#0),
                },
            ),
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1827:40: 1827:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: ast::LiteralKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1828:23: 1828:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: ast::HexLiteralKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1828:50: 1828:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1829:17: 1829:18 (#0),
            scope: scope[0],
        },
    },
]