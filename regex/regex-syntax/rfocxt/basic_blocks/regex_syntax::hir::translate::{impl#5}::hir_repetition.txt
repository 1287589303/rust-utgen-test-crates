[
    BasicBlockData {
        statements: [
            StorageLive(_6),
            PlaceMention((((*_2).1: ast::RepetitionOp).1: ast::RepetitionKind)),
            _8 = discriminant((((*_2).1: ast::RepetitionOp).1: ast::RepetitionKind)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1003:26: 1003:43 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _8) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), (((*_2).1: ast::RepetitionOp).1: ast::RepetitionKind)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1003:32: 1003:43 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1004:13: 1004:43 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb9, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1005:13: 1005:44 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1006:13: 1006:43 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb11, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = discriminant((((((*_2).1: ast::RepetitionOp).1: ast::RepetitionKind) as Range).0: ast::RepetitionRange)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1003:26: 1003:43 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _7) -> [0: bb6, 1: bb7, 2: bb8, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1007:13: 1007:73 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb12, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1010:13: 1010:73 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb13, imaginary: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_19),
            _19 = (((((((*_2).1: ast::RepetitionOp).1: ast::RepetitionKind) as Range).0: ast::RepetitionRange) as Bounded).0: u32),
            StorageLive(_20),
            _20 = (((((((*_2).1: ast::RepetitionOp).1: ast::RepetitionKind) as Range).0: ast::RepetitionRange) as Bounded).1: u32),
            StorageLive(_21),
            _21 = _19,
            StorageLive(_22),
            StorageLive(_23),
            _23 = _20,
            _22 = core::option::Option::<u32>::Some(move _23),
            StorageDead(_23),
            _6 = (move _21, move _22),
            StorageDead(_22),
            StorageDead(_21),
            StorageDead(_20),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1016:30: 1016:31 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            _9 = core::option::Option::<u32>::Some(const 1_u32),
            _6 = (const 0_u32, move _9),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1004:58: 1004:59 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = core::option::Option::<u32>::None,
            _6 = (const 0_u32, move _10),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1005:56: 1005:57 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            _11 = core::option::Option::<u32>::None,
            _6 = (const 1_u32, move _11),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1006:55: 1006:56 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            _12 = (((((((*_2).1: ast::RepetitionOp).1: ast::RepetitionKind) as Range).0: ast::RepetitionRange) as Exactly).0: u32),
            StorageLive(_13),
            _13 = _12,
            StorageLive(_14),
            StorageLive(_15),
            _15 = _12,
            _14 = core::option::Option::<u32>::Some(move _15),
            StorageDead(_15),
            _6 = (move _13, move _14),
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1009:13: 1009:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = (((((((*_2).1: ast::RepetitionOp).1: ast::RepetitionKind) as Range).0: ast::RepetitionRange) as AtLeast).0: u32),
            StorageLive(_17),
            _17 = _16,
            StorageLive(_18),
            _18 = core::option::Option::<u32>::None,
            _6 = (move _17, move _18),
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1012:13: 1012:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            PlaceMention(_6),
            StorageLive(_4),
            _4 = (_6.0: u32),
            StorageLive(_5),
            _5 = (_6.1: core::option::Option<u32>),
            StorageDead(_6),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            _28 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1019:16: 1019:28 (#0),
                    scope: scope[1],
                },
                kind: _27 = hir::translate::TranslatorI::<'_, '_>::flags(move _28) -> [return: bb15, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _26 = &_27,
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1019:16: 1019:41 (#0),
                    scope: scope[1],
                },
                kind: _25 = hir::translate::Flags::swap_greed(move _26) -> [return: bb16, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1019:16: 1019:41 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _25) -> [0: bb18, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_26),
            StorageLive(_29),
            _29 = ((*_2).2: bool),
            _24 = Not(move _29),
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1019:13: 1019:77 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_26),
            _24 = ((*_2).2: bool),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1019:13: 1019:77 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            FakeRead(ForLet(None), _24),
            StorageLive(_30),
            StorageLive(_31),
            _31 = _4,
            StorageLive(_32),
            _32 = _5,
            StorageLive(_33),
            _33 = _24,
            StorageLive(_34),
            StorageLive(_35),
            _35 = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1024:18: 1024:32 (#0),
                    scope: scope[5],
                },
                kind: _34 = std::boxed::Box::<hir::Hir>::new(move _35) -> [return: bb20, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            _30 = hir::Repetition { min: move _31, max: move _32, greedy: move _33, sub: move _34 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1025:9: 1025:10 (#0),
                    scope: scope[5],
                },
                kind: drop(_34) -> [return: bb21, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_33),
            StorageDead(_32),
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1020:9: 1025:11 (#0),
                    scope: scope[5],
                },
                kind: _0 = hir::Hir::repetition(move _30) -> [return: bb22, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_24),
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1026:5: 1026:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb23, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1026:6: 1026:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1025:10: 1025:11 (#0),
                    scope: scope[5],
                },
                kind: drop(_30) -> [return: bb26, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1024:31: 1024:32 (#0),
                    scope: scope[5],
                },
                kind: drop(_35) -> [return: bb26, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1026:5: 1026:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb27, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1002:5: 1026:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1002:67: 1002:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} hir::translate::TranslatorI<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1002:23: 1002:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/hir/translate.rs:1002:35: 1002:51 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/translate.rs:1002:30: 1002:33 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/translate.rs:1002:30: 1002:33 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} ast::Repetition,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1002:30: 1002:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/hir/translate.rs:1002:59: 1002:62 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/translate.rs:1002:53: 1002:57 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/translate.rs:1002:53: 1002:57 (#0),
                    },
                ),
            ),
        ),
        ty: hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1002:53: 1002:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                regex-syntax/src/hir/translate.rs:1003:26: 1017:10 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/translate.rs:1003:13: 1003:23 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1003:14: 1003:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                regex-syntax/src/hir/translate.rs:1003:26: 1017:10 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/translate.rs:1003:13: 1003:23 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1003:19: 1003:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, core::option::Option<u32>),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1003:26: 1017:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1007:40: 1007:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1004:13: 1004:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1004:51: 1004:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1005:52: 1005:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1006:51: 1006:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (((*_2).1: ast::RepetitionOp).1: ast::RepetitionKind),
                                ),
                                regex-syntax/src/hir/translate.rs:1003:32: 1003:43 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/translate.rs:1007:13: 1007:73 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1007:70: 1007:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/translate.rs:1008:17: 1008:29 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1008:18: 1008:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/translate.rs:1008:17: 1008:29 (#0),
                },
            ),
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1008:21: 1008:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1008:26: 1008:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (((*_2).1: ast::RepetitionOp).1: ast::RepetitionKind),
                                ),
                                regex-syntax/src/hir/translate.rs:1003:32: 1003:43 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/translate.rs:1010:13: 1010:73 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1010:70: 1010:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/translate.rs:1011:17: 1011:26 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1011:18: 1011:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/translate.rs:1011:17: 1011:26 (#0),
                },
            ),
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1011:21: 1011:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (((*_2).1: ast::RepetitionOp).1: ast::RepetitionKind),
                                ),
                                regex-syntax/src/hir/translate.rs:1003:32: 1003:43 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/translate.rs:1013:13: 1016:15 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1014:17: 1014:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (((*_2).1: ast::RepetitionOp).1: ast::RepetitionKind),
                                ),
                                regex-syntax/src/hir/translate.rs:1003:32: 1003:43 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/translate.rs:1013:13: 1016:15 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1015:17: 1015:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1016:20: 1016:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1016:23: 1016:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1016:28: 1016:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/translate.rs:1019:13: 1019:77 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/translate.rs:1018:13: 1018:19 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1018:13: 1018:19 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1019:16: 1019:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::translate::Flags,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1019:16: 1019:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: hir::translate::Flags,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1019:16: 1019:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::translate::TranslatorI<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1019:16: 1019:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/translate.rs:1019:44: 1019:55 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1019:45: 1019:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/translate.rs:1020:9: 1025:11 (#0),
                },
            ),
        ),
        ty: hir::Repetition,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1020:25: 1025:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1021:13: 1021:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1022:13: 1022:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1023:13: 1023:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::boxed::Box<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1024:18: 1024:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/translate.rs:1020:9: 1025:11 (#0),
                },
            ),
        ),
        ty: hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1024:27: 1024:31 (#0),
            scope: scope[0],
        },
    },
]