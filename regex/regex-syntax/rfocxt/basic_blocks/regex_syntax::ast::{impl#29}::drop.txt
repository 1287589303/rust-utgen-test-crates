[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            PlaceMention((*_1)),
            _5 = discriminant((*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1638:9: 1638:20 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _5) -> [0: bb6, 1: bb6, 2: bb6, 3: bb6, 4: bb6, 5: bb6, 6: bb6, 7: bb6, 8: bb2, 9: bb3, 10: bb4, 11: bb5, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = const (),
            StorageDead(_2),
            StorageLive(_27),
            _27 = {closure@regex-syntax/src/ast/mod.rs:1655:26: 1655:28},
            FakeRead(ForLet(None), _27),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &_27,
            _28 = {closure@regex-syntax/src/ast/mod.rs:1656:25: 1656:27} { empty_span: move _29 },
            StorageDead(_29),
            FakeRead(ForLet(None), _28),
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            _33 = SizeOf([ast::Ast; 1]),
            _34 = AlignOf([ast::Ast; 1]),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:13: 54:47 (#373),
                    scope: scope[6],
                },
                kind: _35 = alloc::alloc::exchange_malloc(move _33, move _34) -> [return: bb24, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1648:13: 1648:35 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb8, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1649:13: 1649:30 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb12, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1650:13: 1650:36 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb16, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1651:13: 1651:31 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb20, imaginary: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1639:13: 1647:37 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb7, imaginary: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1647:41: 1647:47 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb62,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            StorageLive(_7),
            _7 = &(((*_1) as Repetition).0: std::boxed::Box<ast::Repetition>),
            _8 = &_7,
            _3 = &fake shallow (*_1),
            _4 = &fake shallow _1,
            StorageLive(_9),
            StorageLive(_10),
            _10 = &(*((*(*(*_8))).3: std::boxed::Box<ast::Ast>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1648:40: 1648:60 (#0),
                    scope: scope[0],
                },
                kind: _9 = ast::Ast::has_subexprs(move _10) -> [return: bb9, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1648:40: 1648:60 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _9) -> [0: bb11, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_7),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1648:39: 1648:60 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb1, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            FakeRead(ForMatchGuard, _3),
            FakeRead(ForMatchGuard, _4),
            _0 = const (),
            StorageDead(_7),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb62,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            StorageLive(_12),
            _12 = &(((*_1) as Group).0: std::boxed::Box<ast::Group>),
            _13 = &_12,
            _3 = &fake shallow (*_1),
            _4 = &fake shallow _1,
            StorageLive(_14),
            StorageLive(_15),
            _15 = &(*((*(*(*_13))).2: std::boxed::Box<ast::Ast>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1649:35: 1649:55 (#0),
                    scope: scope[0],
                },
                kind: _14 = ast::Ast::has_subexprs(move _15) -> [return: bb13, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1649:35: 1649:55 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _14) -> [0: bb15, otherwise: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_14),
            StorageDead(_12),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1649:34: 1649:55 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb1, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_14),
            FakeRead(ForMatchGuard, _3),
            FakeRead(ForMatchGuard, _4),
            _0 = const (),
            StorageDead(_12),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb62,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_18),
            StorageLive(_17),
            _17 = &(((*_1) as Alternation).0: std::boxed::Box<ast::Alternation>),
            _18 = &_17,
            _3 = &fake shallow (*_1),
            _4 = &fake shallow _1,
            StorageLive(_19),
            StorageLive(_20),
            _20 = &((*(*(*_18))).1: std::vec::Vec<ast::Ast>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1650:40: 1650:57 (#0),
                    scope: scope[0],
                },
                kind: _19 = std::vec::Vec::<ast::Ast>::is_empty(move _20) -> [return: bb17, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1650:40: 1650:57 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _19) -> [0: bb19, otherwise: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
            FakeRead(ForMatchGuard, _3),
            FakeRead(ForMatchGuard, _4),
            _0 = const (),
            StorageDead(_17),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb62,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1650:40: 1650:57 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb1, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_23),
            StorageLive(_22),
            _22 = &(((*_1) as Concat).0: std::boxed::Box<ast::Concat>),
            _23 = &_22,
            _3 = &fake shallow (*_1),
            _4 = &fake shallow _1,
            StorageLive(_24),
            StorageLive(_25),
            _25 = &((*(*(*_23))).1: std::vec::Vec<ast::Ast>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1651:35: 1651:52 (#0),
                    scope: scope[0],
                },
                kind: _24 = std::vec::Vec::<ast::Ast>::is_empty(move _25) -> [return: bb21, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1651:35: 1651:52 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _24) -> [0: bb23, otherwise: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_24),
            FakeRead(ForMatchGuard, _3),
            FakeRead(ForMatchGuard, _4),
            _0 = const (),
            StorageDead(_22),
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb62,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_24),
            StorageDead(_22),
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1651:35: 1651:52 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb1, imaginary: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_36),
            _36 = ShallowInitBox(move _35, [ast::Ast; 1]),
            StorageLive(_37),
            StorageLive(_38),
            _38 = &mut (*_1),
            StorageLive(_39),
            StorageLive(_40),
            _40 = &_28,
            StorageLive(_41),
            _41 = (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1657:49: 1657:60 (#0),
                    scope: scope[6],
                },
                kind: _39 = <{closure@regex-syntax/src/ast/mod.rs:1656:25: 1656:27} as core::ops::Fn<()>>::call(move _40, move _41) -> [return: bb25, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            StorageDead(_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1657:30: 1657:61 (#0),
                    scope: scope[6],
                },
                kind: _37 = core::mem::replace::<ast::Ast>(move _38, move _39) -> [return: bb26, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            StorageDead(_38),
            (*_36) = [move _37],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:45: 54:46 (#373),
                    scope: scope[6],
                },
                kind: drop(_37) -> [return: bb27, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            _32 = move _36,
            _31 = move _32 as std::boxed::Box<[ast::Ast]> (PointerCoercion(Unsize)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:46: 54:47 (#373),
                    scope: scope[6],
                },
                kind: drop(_32) -> [return: bb28, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:46: 54:47 (#373),
                    scope: scope[6],
                },
                kind: drop(_36) -> [return: bb29, unwind: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:50:9: 55:10 (#373),
                    scope: scope[6],
                },
                kind: _30 = std::slice::<impl [ast::Ast]>::into_vec::<std::alloc::Global>(move _31) -> [return: bb30, unwind: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            FakeRead(ForLet(None), _30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1658:9: 1683:10 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1658:9: 1683:10 (#0),
                    scope: scope[7],
                },
                kind: falseUnwind -> [real: bb32, unwind: bb72],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_43),
            StorageLive(_44),
            _44 = &mut _30,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1658:35: 1658:46 (#0),
                    scope: scope[8],
                },
                kind: _43 = std::vec::Vec::<ast::Ast>::pop(move _44) -> [return: bb33, unwind: bb72],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            PlaceMention(_43),
            _45 = discriminant(_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1658:19: 1658:32 (#0),
                    scope: scope[8],
                },
                kind: switchInt(move _45) -> [1: bb34, otherwise: bb57],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1658:19: 1658:32 (#0),
                    scope: scope[8],
                },
                kind: falseEdge -> [real: bb35, imaginary: bb57],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_46),
            _46 = move ((_43 as Some).0: ast::Ast),
            PlaceMention(_46),
            _47 = discriminant(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1659:13: 1659:22 (#0),
                    scope: scope[8],
                },
                kind: switchInt(move _47) -> [0: bb41, 1: bb41, 2: bb41, 3: bb41, 4: bb41, 5: bb41, 6: bb41, 7: bb41, 8: bb37, 9: bb38, 10: bb39, 11: bb40, otherwise: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1659:19: 1659:22 (#0),
                    scope: scope[8],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1670:17: 1670:43 (#0),
                    scope: scope[8],
                },
                kind: falseEdge -> [real: bb43, imaginary: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1673:17: 1673:38 (#0),
                    scope: scope[8],
                },
                kind: falseEdge -> [real: bb47, imaginary: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1676:17: 1676:44 (#0),
                    scope: scope[8],
                },
                kind: falseEdge -> [real: bb51, imaginary: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_72),
            _72 = &mut ((_46 as Concat).0: std::boxed::Box<ast::Concat>),
            StorageLive(_73),
            StorageLive(_74),
            _74 = &mut _30,
            StorageLive(_75),
            StorageLive(_76),
            _76 = &mut ((*(*_72)).1: std::vec::Vec<ast::Ast>),
            StorageLive(_77),
            _77 = core::ops::RangeFull,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1680:34: 1680:50 (#0),
                    scope: scope[12],
                },
                kind: _75 = std::vec::Vec::<ast::Ast>::drain::<core::ops::RangeFull>(move _76, move _77) -> [return: bb54, unwind: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1660:17: 1669:41 (#0),
                    scope: scope[8],
                },
                kind: falseEdge -> [real: bb42, imaginary: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _42 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1669:45: 1669:47 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb56,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_48),
            _48 = &mut ((_46 as Repetition).0: std::boxed::Box<ast::Repetition>),
            StorageLive(_49),
            StorageLive(_50),
            _50 = &mut _30,
            StorageLive(_51),
            StorageLive(_52),
            StorageLive(_53),
            _53 = &mut ((*(*_48)).3: std::boxed::Box<ast::Ast>),
            _52 = &mut (*(*_53)),
            StorageLive(_54),
            StorageLive(_55),
            _55 = &_28,
            StorageLive(_56),
            _56 = (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1671:57: 1671:68 (#0),
                    scope: scope[9],
                },
                kind: _54 = <{closure@regex-syntax/src/ast/mod.rs:1656:25: 1656:27} as core::ops::Fn<()>>::call(move _55, move _56) -> [return: bb44, unwind: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
            StorageDead(_55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1671:32: 1671:69 (#0),
                    scope: scope[9],
                },
                kind: _51 = core::mem::replace::<ast::Ast>(move _52, move _54) -> [return: bb45, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            StorageDead(_52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1671:21: 1671:70 (#0),
                    scope: scope[9],
                },
                kind: _49 = std::vec::Vec::<ast::Ast>::push(move _50, move _51) -> [return: bb46, unwind: bb68],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
            StorageDead(_50),
            StorageDead(_53),
            StorageDead(_49),
            _42 = const (),
            StorageDead(_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1672:17: 1672:18 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb56,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_57),
            _57 = &mut ((_46 as Group).0: std::boxed::Box<ast::Group>),
            StorageLive(_58),
            StorageLive(_59),
            _59 = &mut _30,
            StorageLive(_60),
            StorageLive(_61),
            StorageLive(_62),
            _62 = &mut ((*(*_57)).2: std::boxed::Box<ast::Ast>),
            _61 = &mut (*(*_62)),
            StorageLive(_63),
            StorageLive(_64),
            _64 = &_28,
            StorageLive(_65),
            _65 = (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1674:57: 1674:68 (#0),
                    scope: scope[10],
                },
                kind: _63 = <{closure@regex-syntax/src/ast/mod.rs:1656:25: 1656:27} as core::ops::Fn<()>>::call(move _64, move _65) -> [return: bb48, unwind: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_65),
            StorageDead(_64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1674:32: 1674:69 (#0),
                    scope: scope[10],
                },
                kind: _60 = core::mem::replace::<ast::Ast>(move _61, move _63) -> [return: bb49, unwind: bb67],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
            StorageDead(_61),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1674:21: 1674:70 (#0),
                    scope: scope[10],
                },
                kind: _58 = std::vec::Vec::<ast::Ast>::push(move _59, move _60) -> [return: bb50, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
            StorageDead(_59),
            StorageDead(_62),
            StorageDead(_58),
            _42 = const (),
            StorageDead(_57),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1675:17: 1675:18 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb56,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_66),
            _66 = &mut ((_46 as Alternation).0: std::boxed::Box<ast::Alternation>),
            StorageLive(_67),
            StorageLive(_68),
            _68 = &mut _30,
            StorageLive(_69),
            StorageLive(_70),
            _70 = &mut ((*(*_66)).1: std::vec::Vec<ast::Ast>),
            StorageLive(_71),
            _71 = core::ops::RangeFull,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1677:34: 1677:50 (#0),
                    scope: scope[11],
                },
                kind: _69 = std::vec::Vec::<ast::Ast>::drain::<core::ops::RangeFull>(move _70, move _71) -> [return: bb52, unwind: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
            StorageDead(_70),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1677:21: 1677:51 (#0),
                    scope: scope[11],
                },
                kind: _67 = <std::vec::Vec<ast::Ast> as core::iter::Extend<ast::Ast>>::extend::<std::vec::Drain<'_, ast::Ast>>(move _68, move _69) -> [return: bb53, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_69),
            StorageDead(_68),
            StorageDead(_67),
            _42 = const (),
            StorageDead(_66),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1678:17: 1678:18 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb56,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_77),
            StorageDead(_76),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1680:21: 1680:51 (#0),
                    scope: scope[12],
                },
                kind: _73 = <std::vec::Vec<ast::Ast> as core::iter::Extend<ast::Ast>>::extend::<std::vec::Drain<'_, ast::Ast>>(move _74, move _75) -> [return: bb55, unwind: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_75),
            StorageDead(_74),
            StorageDead(_73),
            _42 = const (),
            StorageDead(_72),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1681:17: 1681:18 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb56,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1683:9: 1683:10 (#0),
                    scope: scope[7],
                },
                kind: drop(_46) -> [return: bb58, unwind: bb71],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_79),
            _0 = const (),
            StorageDead(_79),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1683:9: 1683:10 (#1135),
                    scope: scope[7],
                },
                kind: drop(_43) -> [return: bb60, unwind: bb72],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1683:9: 1683:10 (#1135),
                    scope: scope[7],
                },
                kind: drop(_43) -> [return: bb59, unwind: bb72],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1658:9: 1683:10 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1684:5: 1684:6 (#0),
                    scope: scope[6],
                },
                kind: drop(_30) -> [return: bb61, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_28),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1684:6: 1684:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb63,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1684:6: 1684:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb63,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1684:6: 1684:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1680:50: 1680:51 (#0),
                    scope: scope[12],
                },
                kind: drop(_75) -> [return: bb70, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1677:50: 1677:51 (#0),
                    scope: scope[11],
                },
                kind: drop(_69) -> [return: bb70, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1674:69: 1674:70 (#0),
                    scope: scope[10],
                },
                kind: drop(_60) -> [return: bb70, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1674:68: 1674:69 (#0),
                    scope: scope[10],
                },
                kind: drop(_63) -> [return: bb70, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1671:69: 1671:70 (#0),
                    scope: scope[9],
                },
                kind: drop(_51) -> [return: bb70, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1671:68: 1671:69 (#0),
                    scope: scope[9],
                },
                kind: drop(_54) -> [return: bb70, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1683:9: 1683:10 (#0),
                    scope: scope[7],
                },
                kind: drop(_46) -> [return: bb71, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1683:9: 1683:10 (#1135),
                    scope: scope[7],
                },
                kind: drop(_43) -> [return: bb72, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1684:5: 1684:6 (#0),
                    scope: scope[6],
                },
                kind: drop(_30) -> [return: bb77, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:46: 54:47 (#373),
                    scope: scope[6],
                },
                kind: drop(_36) -> [return: bb74, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:55:9: 55:10 (#373),
                    scope: scope[6],
                },
                kind: drop(_31) -> [return: bb77, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1657:60: 1657:61 (#0),
                    scope: scope[6],
                },
                kind: drop(_39) -> [return: bb76, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:46: 54:47 (#373),
                    scope: scope[6],
                },
                kind: drop(_36) -> [return: bb77, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1635:5: 1684:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1635:23: 1635:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1635:13: 1635:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1638:9: 1653:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1638:15: 1638:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} &'{erased} mut ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1638:15: 1638:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1639:13: 1639:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1647:41: 1647:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-syntax/src/ast/mod.rs:1638:15: 1638:20 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/mod.rs:1648:13: 1648:35 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::boxed::Box<ast::Repetition, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1648:29: 1648:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                RefForGuard,
            ),
        ),
        ty: &'{erased} &'{erased} std::boxed::Box<ast::Repetition, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1648:29: 1648:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1648:40: 1648:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1648:40: 1648:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1648:64: 1648:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-syntax/src/ast/mod.rs:1638:15: 1638:20 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/mod.rs:1649:13: 1649:30 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::boxed::Box<ast::Group, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1649:24: 1649:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                RefForGuard,
            ),
        ),
        ty: &'{erased} &'{erased} std::boxed::Box<ast::Group, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1649:24: 1649:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1649:35: 1649:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1649:35: 1649:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1649:59: 1649:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-syntax/src/ast/mod.rs:1638:15: 1638:20 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/mod.rs:1650:13: 1650:36 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::boxed::Box<ast::Alternation, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1650:30: 1650:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                RefForGuard,
            ),
        ),
        ty: &'{erased} &'{erased} std::boxed::Box<ast::Alternation, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1650:30: 1650:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1650:40: 1650:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<ast::Ast, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1650:40: 1650:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1650:61: 1650:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-syntax/src/ast/mod.rs:1638:15: 1638:20 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/mod.rs:1651:13: 1651:31 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::boxed::Box<ast::Concat, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1651:25: 1651:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                RefForGuard,
            ),
        ),
        ty: &'{erased} &'{erased} std::boxed::Box<ast::Concat, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1651:25: 1651:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1651:35: 1651:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<ast::Ast, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1651:35: 1651:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1651:56: 1651:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/ast/mod.rs:1655:26: 1655:64 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/mod.rs:1655:13: 1655:23 (#0),
                    },
                ),
            ),
        ),
        ty: Closure(
            DefId(0:415 ~ regex_syntax[a00b]::ast::{impl#29}::drop::{closure#0}),
            [
                i8,
                Binder { value: extern "RustCall" fn(()) -> ast::Span, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1655:13: 1655:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/ast/mod.rs:1656:25: 1656:52 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/mod.rs:1656:13: 1656:22 (#0),
                    },
                ),
            ),
        ),
        ty: Closure(
            DefId(0:416 ~ regex_syntax[a00b]::ast::{impl#29}::drop::{closure#1}),
            [
                i8,
                Binder { value: extern "RustCall" fn(()) -> ast::Ast, bound_vars: [] },
                (&'{erased} Closure(DefId(0:415 ~ regex_syntax[a00b]::ast::{impl#29}::drop::{closure#0}), [i8, Binder { value: extern "RustCall" fn(()) -> ast::Span, bound_vars: [] }, ()]),),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1656:13: 1656:22 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Closure(DefId(0:415 ~ regex_syntax[a00b]::ast::{impl#29}::drop::{closure#0}), [i8, Binder { value: extern "RustCall" fn(()) -> ast::Span, bound_vars: [] }, ()]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1656:25: 1656:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:50:9: 55:10 (#373),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/mod.rs:1657:13: 1657:22 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<ast::Ast, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1657:13: 1657:22 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::boxed::Box<[ast::Ast], std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:13: 54:47 (#373),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::boxed::Box<[ast::Ast; 1_usize], std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:13: 54:47 (#373),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:13: 54:47 (#373),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:13: 54:47 (#373),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:13: 54:47 (#373),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::boxed::Box<[ast::Ast; 1_usize], std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:13: 54:47 (#373),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1657:30: 1657:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1657:43: 1657:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1657:49: 1657:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Closure(DefId(0:416 ~ regex_syntax[a00b]::ast::{impl#29}::drop::{closure#1}), [i8, Binder { value: extern "RustCall" fn(()) -> ast::Ast, bound_vars: [] }, (&'{erased} Closure(DefId(0:415 ~ regex_syntax[a00b]::ast::{impl#29}::drop::{closure#0}), [i8, Binder { value: extern "RustCall" fn(()) -> ast::Span, bound_vars: [] }, ()]),)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1657:49: 1657:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1657:49: 1657:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1635:5: 1684:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/mod.rs:1658:9: 1683:10 (#1135),
                },
            ),
        ),
        ty: core::option::Option<ast::Ast>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1658:35: 1658:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/mod.rs:1658:9: 1683:10 (#1135),
                },
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<ast::Ast, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1658:35: 1658:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1658:19: 1658:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _43,
                                ),
                                regex-syntax/src/ast/mod.rs:1658:35: 1658:46 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/mod.rs:1658:19: 1658:32 (#0),
                    },
                ),
            ),
        ),
        ty: ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1658:24: 1658:31 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1660:17: 1660:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _46,
                                ),
                                regex-syntax/src/ast/mod.rs:1659:19: 1659:22 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/mod.rs:1670:17: 1670:43 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut std::boxed::Box<ast::Repetition, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1670:33: 1670:42 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1671:21: 1671:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<ast::Ast, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1671:21: 1671:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1671:32: 1671:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1671:45: 1671:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::boxed::Box<ast::Ast, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1671:45: 1671:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1671:57: 1671:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Closure(DefId(0:416 ~ regex_syntax[a00b]::ast::{impl#29}::drop::{closure#1}), [i8, Binder { value: extern "RustCall" fn(()) -> ast::Ast, bound_vars: [] }, (&'{erased} Closure(DefId(0:415 ~ regex_syntax[a00b]::ast::{impl#29}::drop::{closure#0}), [i8, Binder { value: extern "RustCall" fn(()) -> ast::Span, bound_vars: [] }, ()]),)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1671:57: 1671:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1671:57: 1671:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _46,
                                ),
                                regex-syntax/src/ast/mod.rs:1659:19: 1659:22 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/mod.rs:1673:17: 1673:38 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut std::boxed::Box<ast::Group, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1673:28: 1673:37 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1674:21: 1674:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<ast::Ast, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1674:21: 1674:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1674:32: 1674:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1674:45: 1674:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::boxed::Box<ast::Ast, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1674:45: 1674:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1674:57: 1674:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Closure(DefId(0:416 ~ regex_syntax[a00b]::ast::{impl#29}::drop::{closure#1}), [i8, Binder { value: extern "RustCall" fn(()) -> ast::Ast, bound_vars: [] }, (&'{erased} Closure(DefId(0:415 ~ regex_syntax[a00b]::ast::{impl#29}::drop::{closure#0}), [i8, Binder { value: extern "RustCall" fn(()) -> ast::Span, bound_vars: [] }, ()]),)]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1674:57: 1674:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1674:57: 1674:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _46,
                                ),
                                regex-syntax/src/ast/mod.rs:1659:19: 1659:22 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/mod.rs:1676:17: 1676:44 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut std::boxed::Box<ast::Alternation, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1676:34: 1676:43 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1677:21: 1677:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<ast::Ast, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1677:21: 1677:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::Drain<'{erased}, ast::Ast, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1677:34: 1677:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<ast::Ast, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1677:34: 1677:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeFull,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1677:47: 1677:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _46,
                                ),
                                regex-syntax/src/ast/mod.rs:1659:19: 1659:22 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/mod.rs:1679:17: 1679:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut std::boxed::Box<ast::Concat, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1679:29: 1679:38 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1680:21: 1680:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<ast::Ast, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1680:21: 1680:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::Drain<'{erased}, ast::Ast, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1680:34: 1680:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<ast::Ast, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1680:34: 1680:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeFull,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1680:47: 1680:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/mod.rs:1658:9: 1683:10 (#1135),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1658:9: 1683:10 (#1135),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1658:9: 1683:10 (#1135),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1658:9: 1683:10 (#1135),
            scope: scope[0],
        },
    },
]