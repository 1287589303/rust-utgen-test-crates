[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:2656:27: 2656:38 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::slice::<impl [hir::Hir]>::iter(move _4) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageLive(_5),
            _5 = {closure@regex-syntax/src/hir/mod.rs:2656:43: 2656:48},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:2656:27: 2656:66 (#0),
                    scope: scope[0],
                },
                kind: _2 = <core::slice::Iter<'_, hir::Hir> as core::iter::Iterator>::map::<&hir::Properties, {closure@regex-syntax/src/hir/mod.rs:2656:43: 2656:48}>(move _3, move _5) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:2656:9: 2656:67 (#0),
                    scope: scope[0],
                },
                kind: _0 = hir::Properties::union::<core::iter::Map<core::slice::Iter<'_, hir::Hir>, {closure@regex-syntax/src/hir/mod.rs:2656:43: 2656:48}>, &hir::Properties>(move _2) -> [return: bb3, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:2657:6: 2657:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:2655:5: 2657:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::Properties,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:2655:37: 2655:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/hir/mod.rs:2655:26: 2655:32 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/mod.rs:2655:20: 2655:24 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:2655:20: 2655:24 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:2655:20: 2655:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/mod.rs:2656:9: 2656:67 (#0),
                },
            ),
        ),
        ty: core::iter::Map<core::slice::Iter<'{erased}, hir::Hir>, Closure(DefId(0:1095 ~ regex_syntax[a00b]::hir::{impl#26}::alternation::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'{erased} hir::Hir,)) -> &'{erased} hir::Properties, bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:2656:27: 2656:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/mod.rs:2656:9: 2656:67 (#0),
                },
            ),
        ),
        ty: core::slice::Iter<'{erased}, hir::Hir>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:2656:27: 2656:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/mod.rs:2656:9: 2656:67 (#0),
                },
            ),
        ),
        ty: &'{erased} [hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:2656:27: 2656:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/mod.rs:2656:9: 2656:67 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1095 ~ regex_syntax[a00b]::hir::{impl#26}::alternation::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'{erased} hir::Hir,)) -> &'{erased} hir::Properties, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:2656:43: 2656:65 (#0),
            scope: scope[0],
        },
    },
]