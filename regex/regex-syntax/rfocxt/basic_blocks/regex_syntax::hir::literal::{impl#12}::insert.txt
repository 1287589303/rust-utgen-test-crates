[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2269:24: 2269:35 (#0),
                    scope: scope[0],
                },
                kind: _3 = hir::literal::PreferenceTrie::root(move _4) -> [return: bb1, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &((*_1).1: std::vec::Vec<core::option::Option<core::num::NonZero<usize>>>),
            StorageLive(_8),
            _8 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2270:40: 2270:46 (#0),
                    scope: scope[2],
                },
                kind: _6 = <std::vec::Vec<core::option::Option<core::num::NonZero<usize>>> as core::ops::Index<usize>>::index(move _7, move _8) -> [return: bb2, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            PlaceMention((*_6)),
            _9 = discriminant((*_6)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2270:16: 2270:25 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _9) -> [1: bb3, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2270:16: 2270:25 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = (((*_6) as Some).0: core::num::NonZero<usize>),
            StorageLive(_12),
            StorageLive(_13),
            _13 = _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2271:24: 2271:33 (#0),
                    scope: scope[2],
                },
                kind: _12 = core::num::NonZero::<usize>::get(move _13) -> [return: bb5, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            _0 = core::result::Result::<usize, usize>::Err(move _12),
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb37,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = const (),
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2273:19: 2273:31 (#0),
                    scope: scope[1],
                },
                kind: _16 = core::slice::<impl [u8]>::iter(move _17) -> [return: bb7, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2273:19: 2273:31 (#1389),
                    scope: scope[1],
                },
                kind: _15 = <core::slice::Iter<'_, u8> as core::iter::IntoIterator>::into_iter(move _16) -> [return: bb8, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            PlaceMention(_15),
            StorageLive(_18),
            _18 = move _15,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2273:9: 2287:10 (#1388),
                    scope: scope[3],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2273:9: 2287:10 (#1388),
                    scope: scope[3],
                },
                kind: falseUnwind -> [real: bb10, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            _23 = &mut _18,
            _22 = &mut (*_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2273:19: 2273:31 (#1389),
                    scope: scope[3],
                },
                kind: _21 = <core::slice::Iter<'_, u8> as core::iter::Iterator>::next(move _22) -> [return: bb11, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            PlaceMention(_21),
            _24 = discriminant(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2273:19: 2273:31 (#1389),
                    scope: scope[3],
                },
                kind: switchInt(move _24) -> [0: bb13, 1: bb14, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2273:19: 2273:31 (#1389),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2273:9: 2287:10 (#1388),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb15, imaginary: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_26),
            _26 = (*((_21 as Some).0: &u8)),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            _32 = &((*_1).0: std::vec::Vec<hir::literal::State>),
            StorageLive(_33),
            _33 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2274:30: 2274:36 (#0),
                    scope: scope[4],
                },
                kind: _31 = <std::vec::Vec<hir::literal::State> as core::ops::Index<usize>>::index(move _32, move _33) -> [return: bb16, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _14 = const (),
            StorageDead(_23),
            StorageDead(_21),
            StorageDead(_20),
            StorageDead(_18),
            StorageDead(_15),
            StorageDead(_14),
            StorageLive(_67),
            _67 = ((*_1).2: usize),
            FakeRead(ForLet(None), _67),
            _68 = AddWithOverflow(((*_1).2: usize), const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2289:9: 2289:37 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_68.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).2: usize), const 1_usize) -> [success: bb34, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_32),
            _30 = &((*_31).0: std::vec::Vec<(u8, usize)>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2274:19: 2274:76 (#0),
                    scope: scope[4],
                },
                kind: _29 = <std::vec::Vec<(u8, usize)> as core::ops::Deref>::deref(move _30) -> [return: bb17, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _28 = &(*_29),
            StorageDead(_30),
            StorageLive(_34),
            StorageLive(_35),
            _35 = &_26,
            _34 = &(*_35),
            StorageLive(_36),
            _36 = {closure@regex-syntax/src/hir/literal.rs:2274:68: 2274:71},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2274:19: 2274:76 (#0),
                    scope: scope[4],
                },
                kind: _27 = core::slice::<impl [(u8, usize)]>::binary_search_by_key::<'_, u8, {closure@regex-syntax/src/hir/literal.rs:2274:68: 2274:71}>(move _28, move _34, move _36) -> [return: bb18, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_34),
            StorageDead(_28),
            PlaceMention(_27),
            _37 = discriminant(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2274:13: 2274:76 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _37) -> [0: bb20, 1: bb21, otherwise: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2274:19: 2274:76 (#0),
                    scope: scope[4],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2275:17: 2275:22 (#0),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb22, imaginary: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_54),
            _54 = ((_27 as Err).0: usize),
            StorageLive(_55),
            StorageLive(_56),
            _56 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2282:32: 2282:51 (#0),
                    scope: scope[7],
                },
                kind: _55 = hir::literal::PreferenceTrie::create_state(move _56) -> [return: bb30, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_38),
            _38 = ((_27 as Ok).0: usize),
            StorageLive(_39),
            StorageLive(_40),
            StorageLive(_41),
            StorageLive(_42),
            StorageLive(_43),
            _43 = &((*_1).0: std::vec::Vec<hir::literal::State>),
            StorageLive(_44),
            _44 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2276:39: 2276:45 (#0),
                    scope: scope[5],
                },
                kind: _42 = <std::vec::Vec<hir::literal::State> as core::ops::Index<usize>>::index(move _43, move _44) -> [return: bb23, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            StorageDead(_43),
            _41 = &((*_42).0: std::vec::Vec<(u8, usize)>),
            StorageLive(_45),
            _45 = _38,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2276:51: 2276:54 (#0),
                    scope: scope[5],
                },
                kind: _40 = <std::vec::Vec<(u8, usize)> as core::ops::Index<usize>>::index(move _41, move _45) -> [return: bb24, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            StorageDead(_41),
            _39 = ((*_40).1: usize),
            _3 = move _39,
            StorageDead(_39),
            StorageDead(_42),
            StorageDead(_40),
            StorageLive(_46),
            StorageLive(_47),
            _47 = &((*_1).1: std::vec::Vec<core::option::Option<core::num::NonZero<usize>>>),
            StorageLive(_48),
            _48 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2277:52: 2277:58 (#0),
                    scope: scope[6],
                },
                kind: _46 = <std::vec::Vec<core::option::Option<core::num::NonZero<usize>>> as core::ops::Index<usize>>::index(move _47, move _48) -> [return: bb25, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
            StorageDead(_47),
            PlaceMention((*_46)),
            _49 = discriminant((*_46)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2277:28: 2277:37 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _49) -> [1: bb26, otherwise: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2277:28: 2277:37 (#0),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb27, imaginary: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_50),
            _50 = (((*_46) as Some).0: core::num::NonZero<usize>),
            StorageLive(_52),
            StorageLive(_53),
            _53 = _50,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2278:36: 2278:45 (#0),
                    scope: scope[6],
                },
                kind: _52 = core::num::NonZero::<usize>::get(move _53) -> [return: bb28, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_53),
            _0 = core::result::Result::<usize, usize>::Err(move _52),
            StorageDead(_52),
            StorageDead(_50),
            StorageDead(_46),
            StorageDead(_38),
            StorageDead(_35),
            StorageDead(_31),
            StorageDead(_29),
            StorageDead(_27),
            StorageDead(_26),
            StorageDead(_23),
            StorageDead(_21),
            StorageDead(_20),
            StorageDead(_18),
            StorageDead(_15),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb37,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _20 = const (),
            StorageDead(_46),
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2280:17: 2280:18 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb33,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
            FakeRead(ForLet(None), _55),
            StorageLive(_57),
            StorageLive(_58),
            StorageLive(_59),
            StorageLive(_60),
            _60 = &mut ((*_1).0: std::vec::Vec<hir::literal::State>),
            StorageLive(_61),
            _61 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2283:32: 2283:38 (#0),
                    scope: scope[8],
                },
                kind: _59 = <std::vec::Vec<hir::literal::State> as core::ops::IndexMut<usize>>::index_mut(move _60, move _61) -> [return: bb31, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_61),
            StorageDead(_60),
            _58 = &mut ((*_59).0: std::vec::Vec<(u8, usize)>),
            StorageLive(_62),
            _62 = _54,
            StorageLive(_63),
            StorageLive(_64),
            _64 = _26,
            StorageLive(_65),
            _65 = _55,
            _63 = (move _64, move _65),
            StorageDead(_65),
            StorageDead(_64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2283:21: 2283:65 (#0),
                    scope: scope[8],
                },
                kind: _57 = std::vec::Vec::<(u8, usize)>::insert(move _58, move _62, move _63) -> [return: bb32, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
            StorageDead(_62),
            StorageDead(_58),
            StorageDead(_59),
            StorageDead(_57),
            StorageLive(_66),
            _66 = _55,
            _3 = move _66,
            StorageDead(_66),
            _20 = const (),
            StorageDead(_55),
            StorageDead(_54),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2285:17: 2285:18 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb33,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            StorageDead(_31),
            StorageDead(_29),
            StorageDead(_27),
            StorageDead(_26),
            StorageDead(_23),
            StorageDead(_21),
            StorageDead(_20),
            _19 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2273:9: 2287:10 (#1388),
                    scope: scope[3],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).2: usize) = move (_68.0: usize),
            StorageLive(_69),
            StorageLive(_70),
            _70 = _67,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2290:30: 2290:52 (#0),
                    scope: scope[9],
                },
                kind: _69 = core::num::NonZero::<usize>::new(move _70) -> [return: bb35, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_70),
            StorageLive(_71),
            StorageLive(_72),
            _72 = &mut ((*_1).1: std::vec::Vec<core::option::Option<core::num::NonZero<usize>>>),
            StorageLive(_73),
            _73 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2290:21: 2290:27 (#0),
                    scope: scope[9],
                },
                kind: _71 = <std::vec::Vec<core::option::Option<core::num::NonZero<usize>>> as core::ops::IndexMut<usize>>::index_mut(move _72, move _73) -> [return: bb36, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_73),
            StorageDead(_72),
            (*_71) = move _69,
            StorageDead(_69),
            StorageDead(_71),
            StorageLive(_74),
            _74 = _67,
            _0 = core::result::Result::<usize, usize>::Ok(move _74),
            StorageDead(_74),
            StorageDead(_67),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2292:6: 2292:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb38,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2292:6: 2292:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb38,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2292:6: 2292:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2268:5: 2292:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<usize, usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2268:43: 2268:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut hir::literal::PreferenceTrie,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2268:15: 2268:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/hir/literal.rs:2268:33: 2268:38 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/literal.rs:2268:26: 2268:31 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/literal.rs:2268:26: 2268:31 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2268:26: 2268:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/literal.rs:2269:24: 2269:35 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/literal.rs:2269:13: 2269:21 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2269:13: 2269:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hir::literal::PreferenceTrie,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2269:24: 2269:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2270:9: 2272:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<core::num::NonZero<usize>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2270:40: 2270:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<core::option::Option<core::num::NonZero<usize>>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2270:28: 2270:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2270:41: 2270:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2270:16: 2270:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_6),
                                ),
                                regex-syntax/src/hir/literal.rs:2270:28: 2270:46 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/literal.rs:2270:16: 2270:25 (#0),
                    },
                ),
            ),
        ),
        ty: core::num::NonZero<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2270:21: 2270:24 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2270:47: 2272:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2271:24: 2271:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::num::NonZero<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2271:24: 2271:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2273:9: 2287:10 (#1388),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::Iter<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2273:19: 2273:31 (#1389),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::Iter<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2273:19: 2273:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2273:19: 2273:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _15,
                                ),
                                regex-syntax/src/hir/literal.rs:2273:19: 2273:31 (#1389),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/literal.rs:2273:19: 2273:31 (#1389),
                    },
                ),
            ),
        ),
        ty: core::slice::Iter<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2273:19: 2273:31 (#1389),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2268:5: 2292:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2273:19: 2273:31 (#1389),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2273:19: 2273:31 (#1389),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2273:19: 2273:31 (#1389),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2273:19: 2273:31 (#1389),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2273:9: 2287:10 (#1388),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2273:9: 2287:10 (#1388),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _21,
                                ),
                                regex-syntax/src/hir/literal.rs:2273:19: 2273:31 (#1389),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/literal.rs:2273:13: 2273:15 (#1390),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2273:14: 2273:15 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/literal.rs:2274:13: 2286:14 (#0),
                },
            ),
        ),
        ty: core::result::Result<usize, usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2274:19: 2274:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/literal.rs:2274:13: 2286:14 (#0),
                },
            ),
        ),
        ty: &'{erased} [(u8, usize)],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2274:19: 2274:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/literal.rs:2274:13: 2286:14 (#0),
                },
            ),
        ),
        ty: &'{erased} [(u8, usize)],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2274:19: 2274:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/literal.rs:2274:13: 2286:14 (#0),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<(u8, usize), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2274:19: 2274:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/literal.rs:2274:13: 2286:14 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::literal::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2274:30: 2274:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/literal.rs:2274:13: 2286:14 (#0),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<hir::literal::State, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2274:19: 2274:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/literal.rs:2274:13: 2286:14 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2274:31: 2274:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/literal.rs:2274:13: 2286:14 (#0),
                },
            ),
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2274:64: 2274:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/literal.rs:2274:13: 2286:14 (#0),
                },
            ),
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2274:64: 2274:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/literal.rs:2274:13: 2286:14 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:711 ~ regex_syntax[a00b]::hir::literal::{impl#12}::insert::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'{erased} (u8, usize),)) -> u8, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2274:68: 2274:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2275:17: 2275:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _27,
                                ),
                                regex-syntax/src/hir/literal.rs:2274:19: 2274:76 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/literal.rs:2275:17: 2275:22 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2275:20: 2275:21 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2276:28: 2276:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} (u8, usize),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2276:51: 2276:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<(u8, usize), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2276:28: 2276:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::literal::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2276:39: 2276:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<hir::literal::State, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2276:28: 2276:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2276:40: 2276:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2276:52: 2276:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/literal.rs:2277:21: 2279:22 (#0),
                },
            ),
        ),
        ty: &'{erased} core::option::Option<core::num::NonZero<usize>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2277:52: 2277:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/literal.rs:2277:21: 2279:22 (#0),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<core::option::Option<core::num::NonZero<usize>>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2277:40: 2277:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/literal.rs:2277:21: 2279:22 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2277:53: 2277:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2277:28: 2277:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_46),
                                ),
                                regex-syntax/src/hir/literal.rs:2277:40: 2277:58 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/literal.rs:2277:28: 2277:37 (#0),
                    },
                ),
            ),
        ),
        ty: core::num::NonZero<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2277:33: 2277:36 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/literal.rs:2277:21: 2279:22 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2277:59: 2279:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2278:36: 2278:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::num::NonZero<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2278:36: 2278:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _27,
                                ),
                                regex-syntax/src/hir/literal.rs:2274:19: 2274:76 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/literal.rs:2281:17: 2281:23 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2281:21: 2281:22 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/literal.rs:2282:32: 2282:51 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/literal.rs:2282:25: 2282:29 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2282:25: 2282:29 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hir::literal::PreferenceTrie,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2282:32: 2282:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2283:21: 2283:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<(u8, usize), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2283:21: 2283:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hir::literal::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2283:32: 2283:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<hir::literal::State, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2283:21: 2283:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2283:33: 2283:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2283:52: 2283:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, usize),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2283:55: 2283:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2283:56: 2283:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2283:59: 2283:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2284:28: 2284:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/literal.rs:2288:19: 2288:42 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/literal.rs:2288:13: 2288:16 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2288:13: 2288:16 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2289:9: 2289:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::num::NonZero<usize>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2290:30: 2290:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2290:48: 2290:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::option::Option<core::num::NonZero<usize>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2290:21: 2290:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<core::option::Option<core::num::NonZero<usize>>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2290:9: 2290:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2290:22: 2290:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2291:12: 2291:15 (#0),
            scope: scope[0],
        },
    },
]