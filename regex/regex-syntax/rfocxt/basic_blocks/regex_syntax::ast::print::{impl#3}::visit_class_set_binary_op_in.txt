[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = &mut (*_1),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &((*_2).1: ast::ClassSetBinaryOpKind),
            _4 = &(*_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:148:9: 148:53 (#0),
                    scope: scope[0],
                },
                kind: _0 = ast::print::Writer::<W>::fmt_class_set_binary_op_kind(move _3, move _4) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:149:6: 149:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:144:5: 149:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:147:10: 147:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut ast::print::Writer<W/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:145:9: 145:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/ast/print.rs:146:14: 146:36 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/ast/print.rs:146:9: 146:12 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/print.rs:146:9: 146:12 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} ast::ClassSetBinaryOp,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:146:9: 146:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/print.rs:148:9: 148:53 (#0),
                },
            ),
        ),
        ty: &'{erased} mut ast::print::Writer<W/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:148:9: 148:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/print.rs:148:9: 148:53 (#0),
                },
            ),
        ),
        ty: &'{erased} ast::ClassSetBinaryOpKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:148:43: 148:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/print.rs:148:9: 148:53 (#0),
                },
            ),
        ),
        ty: &'{erased} ast::ClassSetBinaryOpKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:148:43: 148:52 (#0),
            scope: scope[0],
        },
    },
]