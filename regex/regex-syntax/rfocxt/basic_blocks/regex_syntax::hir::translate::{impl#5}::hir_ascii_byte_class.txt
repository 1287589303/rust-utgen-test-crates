[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &((*_2).1: ast::ClassAsciiKind),
            _6 = &(*_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1078:13: 1078:35 (#0),
                    scope: scope[0],
                },
                kind: _5 = hir::translate::ascii_class(move _6) -> [return: bb1, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageLive(_8),
            _8 = {closure@regex-syntax/src/hir/translate.rs:1079:22: 1079:30},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1078:13: 1079:63 (#0),
                    scope: scope[0],
                },
                kind: _4 = <impl core::iter::Iterator<Item = (u8, u8)> as core::iter::Iterator>::map::<hir::ClassBytesRange, {closure@regex-syntax/src/hir/translate.rs:1079:22: 1079:30}>(move _5, move _8) -> [return: bb2, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1077:23: 1080:10 (#0),
                    scope: scope[0],
                },
                kind: _3 = hir::ClassBytes::new::<core::iter::Map<impl core::iter::Iterator<Item = (u8, u8)>, {closure@regex-syntax/src/hir/translate.rs:1079:22: 1079:30}>>(move _4) -> [return: bb3, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageDead(_7),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &(*_1),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &((*_2).0: ast::Span),
            _13 = &(*_14),
            StorageLive(_15),
            _15 = ((*_2).2: bool),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &mut _3,
            _16 = &mut (*_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1081:9: 1081:69 (#0),
                    scope: scope[1],
                },
                kind: _11 = hir::translate::TranslatorI::<'_, '_>::bytes_fold_and_negate(move _12, move _13, move _15, move _16) -> [return: bb4, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1081:9: 1081:70 (#1624),
                    scope: scope[1],
                },
                kind: _10 = <core::result::Result<(), hir::Error> as core::ops::Try>::branch(move _11) -> [return: bb5, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            PlaceMention(_10),
            _18 = discriminant(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1081:9: 1081:70 (#1624),
                    scope: scope[1],
                },
                kind: switchInt(move _18) -> [0: bb8, 1: bb7, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1081:9: 1081:70 (#1624),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1081:69: 1081:70 (#1625),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb9, imaginary: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            _22 = ((_10 as Continue).0: ()),
            _9 = _22,
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1081:70: 1081:71 (#0),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb11, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_19),
            _19 = move ((_10 as Break).0: core::result::Result<core::convert::Infallible, hir::Error>),
            StorageLive(_21),
            _21 = move _19,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1081:9: 1081:70 (#1624),
                    scope: scope[3],
                },
                kind: _0 = <core::result::Result<hir::ClassBytes, hir::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, hir::Error>>>::from_residual(move _21) -> [return: bb10, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1081:69: 1081:70 (#1625),
                    scope: scope[1],
                },
                kind: drop(_19) -> [return: bb14, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_14),
            StorageDead(_10),
            StorageDead(_9),
            StorageLive(_23),
            _23 = move _3,
            _0 = core::result::Result::<hir::ClassBytes, hir::Error>::Ok(move _23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1082:15: 1082:16 (#0),
                    scope: scope[1],
                },
                kind: drop(_23) -> [return: bb12, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1083:5: 1083:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb13, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1083:6: 1083:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1081:70: 1081:71 (#0),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb15, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_14),
            StorageDead(_10),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1083:5: 1083:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb16, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1083:6: 1083:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1083:6: 1083:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1081:69: 1081:70 (#1624),
                    scope: scope[3],
                },
                kind: drop(_21) -> [return: bb19, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1081:69: 1081:70 (#1625),
                    scope: scope[1],
                },
                kind: drop(_19) -> [return: bb20, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1081:70: 1081:71 (#0),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb22, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1081:69: 1081:70 (#1624),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb22, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1083:5: 1083:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb25, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1080:9: 1080:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb25, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1079:62: 1079:63 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb25, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1073:5: 1083:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<hir::ClassBytes, hir::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1076:10: 1076:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} hir::translate::TranslatorI<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1074:9: 1074:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/hir/translate.rs:1075:14: 1075:30 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/translate.rs:1075:9: 1075:12 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/translate.rs:1075:9: 1075:12 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} ast::ClassAscii,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1075:9: 1075:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/translate.rs:1077:23: 1080:10 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/translate.rs:1077:13: 1077:20 (#0),
                    },
                ),
            ),
        ),
        ty: hir::ClassBytes,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1077:13: 1077:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Map<Alias(Opaque, AliasTy { args: [], def_id: DefId(0:3876 ~ regex_syntax[a00b]::hir::translate::ascii_class::{opaque#0}) }), Closure(DefId(0:847 ~ regex_syntax[a00b]::hir::translate::{impl#5}::hir_ascii_byte_class::{closure#0}), ['{erased}, '{erased}, i16, Binder { value: extern "RustCall" fn(((u8, u8),)) -> hir::ClassBytesRange, bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1078:13: 1079:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Opaque,
            AliasTy {
                args: [],
                def_id: DefId(0:3876 ~ regex_syntax[a00b]::hir::translate::ascii_class::{opaque#0}),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1078:13: 1078:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::ClassAsciiKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1078:25: 1078:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::ClassAsciiKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1078:25: 1078:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:847 ~ regex_syntax[a00b]::hir::translate::{impl#5}::hir_ascii_byte_class::{closure#0}),
            [
                '{erased},
                '{erased},
                i16,
                Binder { value: extern "RustCall" fn(((u8, u8),)) -> hir::ClassBytesRange, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1079:22: 1079:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1081:9: 1081:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, hir::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1081:9: 1081:70 (#1624),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), hir::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1081:9: 1081:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::translate::TranslatorI<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1081:9: 1081:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1081:36: 1081:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1081:36: 1081:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1081:47: 1081:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hir::ClassBytes,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1081:60: 1081:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hir::ClassBytes,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1081:60: 1081:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1081:69: 1081:70 (#1625),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _10,
                                ),
                                regex-syntax/src/hir/translate.rs:1081:9: 1081:70 (#1624),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/translate.rs:1081:69: 1081:70 (#1625),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, hir::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1081:69: 1081:70 (#1625),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1081:69: 1081:70 (#1625),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, hir::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1081:69: 1081:70 (#1625),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _10,
                                ),
                                regex-syntax/src/hir/translate.rs:1081:9: 1081:70 (#1624),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/translate.rs:1081:9: 1081:70 (#1624),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1081:9: 1081:70 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: hir::ClassBytes,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1082:12: 1082:15 (#0),
            scope: scope[0],
        },
    },
]