[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:518:19: 518:44 (#0),
                    scope: scope[0],
                },
                kind: _5 = unicode::property_values(const "Script") -> [return: bb1, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:518:19: 518:45 (#1818),
                    scope: scope[0],
                },
                kind: _4 = <core::result::Result<core::option::Option<&[(&str, &str)]>, unicode::Error> as core::ops::Try>::branch(move _5) -> [return: bb2, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            PlaceMention(_4),
            _6 = discriminant(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:518:19: 518:45 (#1818),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [0: bb5, 1: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:518:19: 518:45 (#1818),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:518:44: 518:45 (#1819),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = ((_4 as Continue).0: core::option::Option<&[(&str, &str)]>),
            _3 = _10,
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:518:19: 518:54 (#0),
                    scope: scope[0],
                },
                kind: _2 = core::option::Option::<&[(&str, &str)]>::unwrap(move _3) -> [return: bb8, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            _7 = move ((_4 as Break).0: core::result::Result<core::convert::Infallible, unicode::Error>),
            StorageLive(_9),
            _9 = move _7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:518:19: 518:45 (#1818),
                    scope: scope[3],
                },
                kind: _0 = <core::result::Result<core::option::Option<&str>, unicode::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, unicode::Error>>>::from_residual(move _9) -> [return: bb7, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_7),
            StorageDead(_3),
            StorageDead(_4),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:520:2: 520:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageDead(_4),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &(*_2),
            StorageLive(_13),
            _13 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:519:8: 519:50 (#0),
                    scope: scope[1],
                },
                kind: _11 = unicode::canonical_value(move _12, move _13) -> [return: bb9, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            _0 = core::result::Result::<core::option::Option<&str>, unicode::Error>::Ok(move _11),
            StorageDead(_11),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:520:2: 520:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:520:2: 520:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:515:1: 520:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::option::Option<&'{erased} str>, unicode::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:517:6: 517:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/unicode.rs:516:23: 516:27 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/unicode.rs:516:5: 516:21 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:516:5: 516:21 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:516:5: 516:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/unicode.rs:518:19: 518:54 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:518:9: 518:16 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [(&'{erased} str, &'{erased} str)],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:518:9: 518:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} [(&'{erased} str, &'{erased} str)]>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:518:19: 518:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, unicode::Error>, core::option::Option<&'{erased} [(&'{erased} str, &'{erased} str)]>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:518:19: 518:45 (#1818),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::option::Option<&'{erased} [(&'{erased} str, &'{erased} str)]>, unicode::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:518:19: 518:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:518:44: 518:45 (#1819),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                regex-syntax/src/unicode.rs:518:19: 518:45 (#1818),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:518:44: 518:45 (#1819),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, unicode::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:518:44: 518:45 (#1819),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:518:44: 518:45 (#1819),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, unicode::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:518:44: 518:45 (#1819),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                regex-syntax/src/unicode.rs:518:19: 518:45 (#1818),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:518:19: 518:45 (#1818),
                    },
                ),
            ),
        ),
        ty: core::option::Option<&'{erased} [(&'{erased} str, &'{erased} str)]>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:518:19: 518:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:519:8: 519:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:519:5: 519:51 (#0),
                },
            ),
        ),
        ty: &'{erased} [(&'{erased} str, &'{erased} str)],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:519:24: 519:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:519:5: 519:51 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:519:33: 519:49 (#0),
            scope: scope[0],
        },
    },
]