[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
            StorageLive(_6),
            _6 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:427:13: 427:38 (#0),
                    scope: scope[0],
                },
                kind: _4 = <Self as hir::interval::Interval>::is_contiguous(move _5, move _6) -> [return: bb1, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:427:13: 427:38 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            _3 = const (),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:430:30: 430:42 (#0),
                    scope: scope[0],
                },
                kind: _9 = <Self as hir::interval::Interval>::lower(move _10) -> [return: bb4, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            _0 = core::option::Option::<Self>::None,
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:433:6: 433:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:430:44: 430:57 (#0),
                    scope: scope[0],
                },
                kind: _11 = <Self as hir::interval::Interval>::lower(move _12) -> [return: bb5, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:430:21: 430:58 (#0),
                    scope: scope[0],
                },
                kind: _8 = core::cmp::min::<<Self as hir::interval::Interval>::Bound>(move _9, move _11) -> [return: bb6, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_9),
            FakeRead(ForLet(None), _8),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:431:30: 431:42 (#0),
                    scope: scope[1],
                },
                kind: _14 = <Self as hir::interval::Interval>::upper(move _15) -> [return: bb7, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:431:44: 431:57 (#0),
                    scope: scope[1],
                },
                kind: _16 = <Self as hir::interval::Interval>::upper(move _17) -> [return: bb8, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:431:21: 431:58 (#0),
                    scope: scope[1],
                },
                kind: _13 = core::cmp::max::<<Self as hir::interval::Interval>::Bound>(move _14, move _16) -> [return: bb9, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_14),
            FakeRead(ForLet(None), _13),
            StorageLive(_18),
            StorageLive(_19),
            _19 = _8,
            StorageLive(_20),
            _20 = _13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:432:14: 432:40 (#0),
                    scope: scope[2],
                },
                kind: _18 = <Self as hir::interval::Interval>::create(move _19, move _20) -> [return: bb10, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
            _0 = core::option::Option::<Self>::Some(move _18),
            StorageDead(_18),
            StorageDead(_13),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:433:6: 433:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:433:6: 433:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:426:5: 433:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<Self/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:426:38: 426:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:426:14: 426:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/hir/interval.rs:426:28: 426:33 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/interval.rs:426:21: 426:26 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/interval.rs:426:21: 426:26 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:426:21: 426:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:427:9: 429:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:427:13: 427:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:427:13: 427:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:427:32: 427:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:427:39: 429:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/interval.rs:430:21: 430:58 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/interval.rs:430:13: 430:18 (#0),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    Self/#0,
                ],
                def_id: DefId(0:542 ~ regex_syntax[a00b]::hir::interval::Interval::Bound),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:430:13: 430:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    Self/#0,
                ],
                def_id: DefId(0:542 ~ regex_syntax[a00b]::hir::interval::Interval::Bound),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:430:30: 430:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:430:30: 430:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    Self/#0,
                ],
                def_id: DefId(0:542 ~ regex_syntax[a00b]::hir::interval::Interval::Bound),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:430:44: 430:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:430:44: 430:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/interval.rs:431:21: 431:58 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/interval.rs:431:13: 431:18 (#0),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    Self/#0,
                ],
                def_id: DefId(0:542 ~ regex_syntax[a00b]::hir::interval::Interval::Bound),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:431:13: 431:18 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    Self/#0,
                ],
                def_id: DefId(0:542 ~ regex_syntax[a00b]::hir::interval::Interval::Bound),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:431:30: 431:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:431:30: 431:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    Self/#0,
                ],
                def_id: DefId(0:542 ~ regex_syntax[a00b]::hir::interval::Interval::Bound),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:431:44: 431:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:431:44: 431:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:432:14: 432:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/interval.rs:432:9: 432:41 (#0),
                },
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    Self/#0,
                ],
                def_id: DefId(0:542 ~ regex_syntax[a00b]::hir::interval::Interval::Bound),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:432:27: 432:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/interval.rs:432:9: 432:41 (#0),
                },
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    Self/#0,
                ],
                def_id: DefId(0:542 ~ regex_syntax[a00b]::hir::interval::Interval::Bound),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:432:34: 432:39 (#0),
            scope: scope[0],
        },
    },
]