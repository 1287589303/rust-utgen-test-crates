[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:198:9: 198:24 (#0),
                    scope: scope[0],
                },
                kind: _3 = utf8::Utf8Sequence::as_slice(move _4) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = &(*_3),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:198:9: 198:31 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::slice::<impl [utf8::Utf8Range]>::iter(move _2) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:199:6: 199:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:197:5: 199:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::Iter<'{erased}, utf8::Utf8Range>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:197:27: 197:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: &'{erased} utf8::Utf8Sequence,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:197:18: 197:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:198:9: 198:31 (#0),
                },
            ),
        ),
        ty: &'{erased} [utf8::Utf8Range],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:198:9: 198:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:198:9: 198:31 (#0),
                },
            ),
        ),
        ty: &'{erased} [utf8::Utf8Range],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:198:9: 198:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:198:9: 198:31 (#0),
                },
            ),
        ),
        ty: &'{erased} utf8::Utf8Sequence,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:198:9: 198:13 (#0),
            scope: scope[0],
        },
    },
]