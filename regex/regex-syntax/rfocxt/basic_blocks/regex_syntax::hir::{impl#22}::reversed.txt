[
    BasicBlockData {
        statements: [
            PlaceMention(_1),
            _2 = discriminant(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1696:9: 1696:19 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _2) -> [1: bb2, 2: bb3, 4: bb4, 8: bb5, 16: bb6, 32: bb7, 64: bb8, 128: bb9, 256: bb10, 512: bb11, 1024: bb12, 2048: bb13, 4096: bb14, 8192: bb15, 16384: bb16, 32768: bb17, 65536: bb18, 131072: bb19, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1696:15: 1696:19 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1697:13: 1697:24 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb20, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1698:13: 1698:22 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb21, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1699:13: 1699:26 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb22, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1700:13: 1700:24 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb23, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1701:13: 1701:28 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb24, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1702:13: 1702:26 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb25, imaginary: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1703:13: 1703:28 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb26, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1704:13: 1704:34 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb27, imaginary: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1705:13: 1705:30 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb28, imaginary: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1706:13: 1706:36 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb29, imaginary: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1707:13: 1707:33 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb30, imaginary: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1708:13: 1708:31 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb31, imaginary: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1709:13: 1709:35 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb32, imaginary: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1710:13: 1710:33 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb33, imaginary: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1711:13: 1711:37 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb34, imaginary: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1712:13: 1712:35 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb35, imaginary: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1713:13: 1713:39 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb36, imaginary: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = hir::Look::WordStartHalfUnicode,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1714:41: 1714:67 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb37,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = hir::Look::End,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1697:28: 1697:37 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb37,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = hir::Look::Start,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1698:26: 1698:37 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb37,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = hir::Look::EndLF,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1699:30: 1699:41 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb37,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = hir::Look::StartLF,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1700:28: 1700:41 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb37,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = hir::Look::EndCRLF,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1701:32: 1701:45 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb37,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = hir::Look::StartCRLF,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1702:30: 1702:45 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb37,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = hir::Look::WordAscii,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1703:32: 1703:47 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb37,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = hir::Look::WordAsciiNegate,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1704:38: 1704:59 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb37,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = hir::Look::WordUnicode,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1705:34: 1705:51 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb37,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = hir::Look::WordUnicodeNegate,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1706:40: 1706:63 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb37,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = hir::Look::WordEndAscii,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1707:37: 1707:55 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb37,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = hir::Look::WordStartAscii,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1708:35: 1708:55 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb37,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = hir::Look::WordEndUnicode,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1709:39: 1709:59 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb37,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = hir::Look::WordStartUnicode,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1710:37: 1710:59 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb37,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = hir::Look::WordEndHalfAscii,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1711:41: 1711:63 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb37,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = hir::Look::WordStartHalfAscii,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1712:39: 1712:63 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb37,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = hir::Look::WordEndHalfUnicode,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1713:43: 1713:67 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb37,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1716:6: 1716:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::Look,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1695:36: 1695:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: hir::Look,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1695:27: 1695:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1697:13: 1697:24 (#0),
            scope: scope[0],
        },
    },
]