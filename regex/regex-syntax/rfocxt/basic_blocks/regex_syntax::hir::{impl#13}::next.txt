[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = &mut ((*_1).0: hir::interval::IntervalSetIter<'_, hir::ClassUnicodeRange>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1232:9: 1232:22 (#0),
                    scope: scope[0],
                },
                kind: _0 = <hir::interval::IntervalSetIter<'_, hir::ClassUnicodeRange> as core::iter::Iterator>::next(move _2) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1233:6: 1233:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1231:5: 1233:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} hir::ClassUnicodeRange>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1231:27: 1231:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut hir::ClassUnicodeIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1231:13: 1231:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/mod.rs:1232:9: 1232:22 (#0),
                },
            ),
        ),
        ty: &'{erased} mut hir::interval::IntervalSetIter<'{erased}, hir::ClassUnicodeRange>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1232:9: 1232:15 (#0),
            scope: scope[0],
        },
    },
]