[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/error.rs:81:22: 81:35 (#0),
                    scope: scope[0],
                },
                kind: _3 = hir::Error::pattern(move _4) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = &(*_3),
            StorageDead(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/error.rs:82:18: 82:28 (#0),
                    scope: scope[0],
                },
                kind: _6 = hir::Error::kind(move _7) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = &(*_6),
            StorageDead(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/error.rs:83:19: 83:29 (#0),
                    scope: scope[0],
                },
                kind: _9 = hir::Error::span(move _10) -> [return: bb3, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = &(*_9),
            StorageDead(_10),
            StorageLive(_11),
            _11 = core::option::Option::<&ast::Span>::None,
            _0 = error::Formatter::<'_, hir::ErrorKind> { pattern: move _2, err: move _5, span: move _8, aux_span: move _11 },
            StorageDead(_11),
            StorageDead(_8),
            StorageDead(_5),
            StorageDead(_2),
            StorageDead(_9),
            StorageDead(_6),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/error.rs:86:6: 86:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/error.rs:79:5: 86:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: error::Formatter<'{erased}, hir::ErrorKind>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/error.rs:79:37: 79:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/error.rs:79:18: 79:32 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/error.rs:79:13: 79:16 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/error.rs:79:13: 79:16 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} hir::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/error.rs:79:13: 79:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/error.rs:81:22: 81:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/error.rs:80:9: 85:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/error.rs:81:22: 81:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/error.rs:80:9: 85:10 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/error.rs:81:22: 81:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} hir::ErrorKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/error.rs:82:18: 82:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/error.rs:80:9: 85:10 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::ErrorKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/error.rs:82:18: 82:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/error.rs:80:9: 85:10 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/error.rs:82:18: 82:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} ast::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/error.rs:83:19: 83:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/error.rs:80:9: 85:10 (#0),
                },
            ),
        ),
        ty: &'{erased} ast::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/error.rs:83:19: 83:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/error.rs:80:9: 85:10 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/error.rs:83:19: 83:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<&'{erased} ast::Span>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/error.rs:84:23: 84:27 (#0),
            scope: scope[0],
        },
    },
]