[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &((*_1).0: std::vec::Vec<I>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:186:12: 186:34 (#0),
                    scope: scope[0],
                },
                kind: _4 = std::vec::Vec::<I>::is_empty(move _5) -> [return: bb1, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:186:12: 186:34 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:186:62: 188:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &((*_2).0: std::vec::Vec<I>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:186:38: 186:61 (#0),
                    scope: scope[0],
                },
                kind: _6 = std::vec::Vec::<I>::is_empty(move _7) -> [return: bb4, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:186:38: 186:61 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [0: bb7, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:186:62: 188:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
            StorageDead(_6),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:275:6: 275:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb90,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            _3 = const (),
            StorageDead(_6),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &((*_1).0: std::vec::Vec<I>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:202:25: 202:42 (#0),
                    scope: scope[0],
                },
                kind: _9 = std::vec::Vec::<I>::len(move _10) -> [return: bb8, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            FakeRead(ForLet(None), _9),
            StorageLive(_13),
            _13 = (const 0_usize, const 0_usize),
            PlaceMention(_13),
            StorageLive(_11),
            _11 = (_13.0: usize),
            StorageLive(_12),
            _12 = (_13.1: usize),
            StorageDead(_13),
            StorageLive(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:204:9: 267:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:204:9: 267:10 (#0),
                    scope: scope[2],
                },
                kind: falseUnwind -> [real: bb10, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            StorageLive(_17),
            _17 = _11,
            StorageLive(_18),
            _18 = _9,
            _16 = Lt(move _17, move _18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:204:22: 204:35 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _16) -> [0: bb75, otherwise: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
            StorageLive(_19),
            StorageLive(_20),
            _20 = _12,
            StorageLive(_21),
            StorageLive(_22),
            _22 = &((*_2).0: std::vec::Vec<I>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:204:43: 204:61 (#0),
                    scope: scope[2],
                },
                kind: _21 = std::vec::Vec::<I>::len(move _22) -> [return: bb12, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            _19 = Lt(move _20, move _21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:204:39: 204:61 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _19) -> [0: bb74, otherwise: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_20),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &((*_2).0: std::vec::Vec<I>),
            StorageLive(_30),
            _30 = _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:208:28: 208:31 (#0),
                    scope: scope[2],
                },
                kind: _28 = <std::vec::Vec<I> as core::ops::Index<usize>>::index(move _29, move _30) -> [return: bb14, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _27 = &(*_28),
            StorageDead(_30),
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:208:16: 208:39 (#0),
                    scope: scope[2],
                },
                kind: _26 = <I as hir::interval::Interval>::upper(move _27) -> [return: bb15, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _25 = &_26,
            StorageDead(_27),
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            _35 = &((*_1).0: std::vec::Vec<I>),
            StorageLive(_36),
            _36 = _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:208:53: 208:56 (#0),
                    scope: scope[2],
                },
                kind: _34 = <std::vec::Vec<I> as core::ops::Index<usize>>::index(move _35, move _36) -> [return: bb16, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _33 = &(*_34),
            StorageDead(_36),
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:208:42: 208:64 (#0),
                    scope: scope[2],
                },
                kind: _32 = <I as hir::interval::Interval>::lower(move _33) -> [return: bb17, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _31 = &_32,
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:208:16: 208:64 (#0),
                    scope: scope[2],
                },
                kind: _24 = <<I as hir::interval::Interval>::Bound as core::cmp::PartialOrd>::lt(move _25, move _31) -> [return: bb18, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:208:16: 208:64 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _24) -> [0: bb21, otherwise: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_32),
            StorageDead(_31),
            StorageDead(_28),
            StorageDead(_26),
            StorageDead(_25),
            _38 = AddWithOverflow(_12, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:209:17: 209:23 (#0),
                    scope: scope[2],
                },
                kind: assert(!move (_38.1: bool), "attempt to compute `{} + {}`, which would overflow", _12, const 1_usize) -> [success: bb20, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _12 = move (_38.0: usize),
            StorageDead(_24),
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb77,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_32),
            StorageDead(_31),
            StorageDead(_28),
            StorageDead(_26),
            StorageDead(_25),
            _23 = const (),
            StorageDead(_24),
            StorageDead(_23),
            StorageLive(_39),
            StorageLive(_40),
            StorageLive(_41),
            StorageLive(_42),
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            _45 = &((*_1).0: std::vec::Vec<I>),
            StorageLive(_46),
            _46 = _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:214:27: 214:30 (#0),
                    scope: scope[2],
                },
                kind: _44 = <std::vec::Vec<I> as core::ops::Index<usize>>::index(move _45, move _46) -> [return: bb22, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _43 = &(*_44),
            StorageDead(_46),
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:214:16: 214:38 (#0),
                    scope: scope[2],
                },
                kind: _42 = <I as hir::interval::Interval>::upper(move _43) -> [return: bb23, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _41 = &_42,
            StorageDead(_43),
            StorageLive(_47),
            StorageLive(_48),
            StorageLive(_49),
            StorageLive(_50),
            StorageLive(_51),
            _51 = &((*_2).0: std::vec::Vec<I>),
            StorageLive(_52),
            _52 = _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:214:53: 214:56 (#0),
                    scope: scope[2],
                },
                kind: _50 = <std::vec::Vec<I> as core::ops::Index<usize>>::index(move _51, move _52) -> [return: bb24, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _49 = &(*_50),
            StorageDead(_52),
            StorageDead(_51),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:214:41: 214:64 (#0),
                    scope: scope[2],
                },
                kind: _48 = <I as hir::interval::Interval>::lower(move _49) -> [return: bb25, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _47 = &_48,
            StorageDead(_49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:214:16: 214:64 (#0),
                    scope: scope[2],
                },
                kind: _40 = <<I as hir::interval::Interval>::Bound as core::cmp::PartialOrd>::lt(move _41, move _47) -> [return: bb26, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:214:16: 214:64 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _40) -> [0: bb31, otherwise: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            StorageDead(_48),
            StorageDead(_47),
            StorageDead(_44),
            StorageDead(_42),
            StorageDead(_41),
            StorageLive(_54),
            StorageLive(_55),
            StorageLive(_56),
            _56 = &((*_1).0: std::vec::Vec<I>),
            StorageLive(_57),
            _57 = _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:215:40: 215:43 (#0),
                    scope: scope[2],
                },
                kind: _55 = <std::vec::Vec<I> as core::ops::Index<usize>>::index(move _56, move _57) -> [return: bb28, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _54 = (*_55),
            StorageDead(_57),
            StorageDead(_56),
            FakeRead(ForLet(None), _54),
            StorageDead(_55),
            StorageLive(_58),
            StorageLive(_59),
            _59 = &mut ((*_1).0: std::vec::Vec<I>),
            StorageLive(_60),
            _60 = _54,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:216:17: 216:40 (#0),
                    scope: scope[3],
                },
                kind: _58 = std::vec::Vec::<I>::push(move _59, move _60) -> [return: bb29, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
            StorageDead(_59),
            StorageDead(_58),
            _61 = AddWithOverflow(_11, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:217:17: 217:23 (#0),
                    scope: scope[3],
                },
                kind: assert(!move (_61.1: bool), "attempt to compute `{} + {}`, which would overflow", _11, const 1_usize) -> [success: bb30, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _11 = move (_61.0: usize),
            StorageDead(_54),
            StorageDead(_40),
            StorageDead(_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb77,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            StorageDead(_48),
            StorageDead(_47),
            StorageDead(_44),
            StorageDead(_42),
            StorageDead(_41),
            _39 = const (),
            StorageDead(_40),
            StorageDead(_39),
            StorageLive(_62),
            StorageLive(_63),
            StorageLive(_64),
            StorageLive(_65),
            StorageLive(_66),
            _66 = &((*_1).0: std::vec::Vec<I>),
            StorageLive(_67),
            _67 = _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:221:33: 221:36 (#0),
                    scope: scope[2],
                },
                kind: _65 = <std::vec::Vec<I> as core::ops::Index<usize>>::index(move _66, move _67) -> [return: bb32, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _64 = &(*_65),
            StorageDead(_67),
            StorageDead(_66),
            StorageLive(_68),
            StorageLive(_69),
            StorageLive(_70),
            StorageLive(_71),
            _71 = &((*_2).0: std::vec::Vec<I>),
            StorageLive(_72),
            _72 = _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:221:72: 221:75 (#0),
                    scope: scope[2],
                },
                kind: _70 = <std::vec::Vec<I> as core::ops::Index<usize>>::index(move _71, move _72) -> [return: bb33, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_72),
            StorageDead(_71),
            _69 = &(*_70),
            _68 = &(*_69),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:221:22: 221:76 (#0),
                    scope: scope[2],
                },
                kind: _63 = <I as hir::interval::Interval>::is_intersection_empty(move _64, move _68) -> [return: bb34, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:221:22: 221:76 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _63) -> [0: bb36, otherwise: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_68),
            StorageDead(_64),
            StorageDead(_70),
            StorageDead(_69),
            StorageDead(_65),
            StorageLive(_73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:221:13: 221:77 (#426),
                    scope: scope[2],
                },
                kind: _73 = core::panicking::panic(const "assertion failed: !self.ranges[a].is_intersection_empty(&other.ranges[b])") -> bb91,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_68),
            StorageDead(_64),
            StorageDead(_70),
            StorageDead(_69),
            StorageDead(_65),
            _62 = const (),
            StorageDead(_63),
            StorageDead(_62),
            StorageLive(_74),
            StorageLive(_75),
            StorageLive(_76),
            _76 = &((*_1).0: std::vec::Vec<I>),
            StorageLive(_77),
            _77 = _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:234:40: 234:43 (#0),
                    scope: scope[2],
                },
                kind: _75 = <std::vec::Vec<I> as core::ops::Index<usize>>::index(move _76, move _77) -> [return: bb37, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _74 = (*_75),
            StorageDead(_77),
            StorageDead(_76),
            FakeRead(ForLet(None), _74),
            StorageDead(_75),
            StorageLive(_78),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:235:13: 264:14 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb38,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:235:13: 264:14 (#0),
                    scope: scope[4],
                },
                kind: falseUnwind -> [real: bb39, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_79),
            StorageLive(_80),
            _80 = _12,
            StorageLive(_81),
            StorageLive(_82),
            _82 = &((*_2).0: std::vec::Vec<I>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:235:23: 235:41 (#0),
                    scope: scope[4],
                },
                kind: _81 = std::vec::Vec::<I>::len(move _82) -> [return: bb40, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_82),
            _79 = Lt(move _80, move _81),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:235:19: 235:41 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _79) -> [0: bb69, otherwise: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_81),
            StorageDead(_80),
            StorageLive(_83),
            StorageLive(_84),
            _84 = &_74,
            StorageLive(_85),
            StorageLive(_86),
            StorageLive(_87),
            StorageLive(_88),
            _88 = &((*_2).0: std::vec::Vec<I>),
            StorageLive(_89),
            _89 = _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:236:62: 236:65 (#0),
                    scope: scope[4],
                },
                kind: _87 = <std::vec::Vec<I> as core::ops::Index<usize>>::index(move _88, move _89) -> [return: bb42, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_89),
            StorageDead(_88),
            _86 = &(*_87),
            _85 = &(*_86),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:236:21: 236:66 (#0),
                    scope: scope[4],
                },
                kind: _83 = <I as hir::interval::Interval>::is_intersection_empty(move _84, move _85) -> [return: bb43, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:236:21: 236:66 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _83) -> [0: bb45, otherwise: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_85),
            StorageDead(_84),
            StorageDead(_87),
            StorageDead(_86),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[4],
                },
                kind: goto -> bb70,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_85),
            StorageDead(_84),
            StorageDead(_87),
            StorageDead(_86),
            StorageLive(_90),
            _90 = _74,
            FakeRead(ForLet(None), _90),
            StorageLive(_91),
            StorageLive(_92),
            StorageLive(_93),
            _93 = &_74,
            StorageLive(_94),
            StorageLive(_95),
            StorageLive(_96),
            StorageLive(_97),
            _97 = &((*_2).0: std::vec::Vec<I>),
            StorageLive(_98),
            _98 = _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:239:61: 239:64 (#0),
                    scope: scope[5],
                },
                kind: _96 = <std::vec::Vec<I> as core::ops::Index<usize>>::index(move _97, move _98) -> [return: bb46, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_98),
            StorageDead(_97),
            _95 = &(*_96),
            _94 = &(*_95),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:239:31: 239:65 (#0),
                    scope: scope[5],
                },
                kind: _92 = <I as hir::interval::Interval>::difference(move _93, move _94) -> [return: bb47, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_94),
            StorageDead(_93),
            PlaceMention(_92),
            _101 = discriminant((_92.0: core::option::Option<I>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:239:25: 239:65 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _101) -> [0: bb49, 1: bb52, otherwise: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _92),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:239:31: 239:65 (#0),
                    scope: scope[5],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _99 = discriminant((_92.1: core::option::Option<I>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:239:25: 239:65 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _99) -> [0: bb50, 1: bb51, otherwise: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:240:21: 240:33 (#0),
                    scope: scope[5],
                },
                kind: falseEdge -> [real: bb55, imaginary: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:246:44: 246:64 (#0),
                    scope: scope[5],
                },
                kind: falseEdge -> [real: bb59, imaginary: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _100 = discriminant((_92.1: core::option::Option<I>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:239:25: 239:65 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _100) -> [0: bb53, 1: bb54, otherwise: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:246:21: 246:41 (#0),
                    scope: scope[5],
                },
                kind: falseEdge -> [real: bb58, imaginary: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_105),
            _105 = (((_92.0: core::option::Option<I>) as Some).0: I),
            StorageLive(_106),
            _106 = (((_92.1: core::option::Option<I>) as Some).0: I),
            StorageLive(_107),
            StorageLive(_108),
            _108 = &mut ((*_1).0: std::vec::Vec<I>),
            StorageLive(_109),
            _109 = _105,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:248:25: 248:49 (#0),
                    scope: scope[7],
                },
                kind: _107 = std::vec::Vec::<I>::push(move _108, move _109) -> [return: bb60, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _103 = AddWithOverflow(_11, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:243:25: 243:31 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_103.1: bool), "attempt to compute `{} + {}`, which would overflow", _11, const 1_usize) -> [success: bb56, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _11 = move (_103.0: usize),
            StorageDead(_91),
            StorageDead(_96),
            StorageDead(_95),
            StorageDead(_92),
            StorageDead(_90),
            StorageDead(_83),
            StorageDead(_79),
            StorageDead(_78),
            StorageDead(_74),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb77,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _91 = _104,
            StorageDead(_104),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:246:73: 246:74 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb61,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_104),
            _104 = (((_92.0: core::option::Option<I>) as Some).0: I),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:239:25: 251:18 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb57,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_104),
            _104 = (((_92.1: core::option::Option<I>) as Some).0: I),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:239:25: 251:18 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb57,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_109),
            StorageDead(_108),
            StorageDead(_107),
            _91 = _106,
            StorageDead(_106),
            StorageDead(_105),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:250:21: 250:22 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb61,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _74 = move _91,
            StorageDead(_91),
            StorageDead(_96),
            StorageDead(_95),
            StorageDead(_92),
            StorageLive(_110),
            StorageLive(_111),
            StorageLive(_112),
            StorageLive(_113),
            StorageLive(_114),
            StorageLive(_115),
            StorageLive(_116),
            _116 = &((*_2).0: std::vec::Vec<I>),
            StorageLive(_117),
            _117 = _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:258:32: 258:35 (#0),
                    scope: scope[5],
                },
                kind: _115 = <std::vec::Vec<I> as core::ops::Index<usize>>::index(move _116, move _117) -> [return: bb62, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _114 = &(*_115),
            StorageDead(_117),
            StorageDead(_116),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:258:20: 258:43 (#0),
                    scope: scope[5],
                },
                kind: _113 = <I as hir::interval::Interval>::upper(move _114) -> [return: bb63, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _112 = &_113,
            StorageDead(_114),
            StorageLive(_118),
            StorageLive(_119),
            StorageLive(_120),
            _120 = &_90,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:258:46: 258:63 (#0),
                    scope: scope[5],
                },
                kind: _119 = <I as hir::interval::Interval>::upper(move _120) -> [return: bb64, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _118 = &_119,
            StorageDead(_120),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:258:20: 258:63 (#0),
                    scope: scope[5],
                },
                kind: _111 = <<I as hir::interval::Interval>::Bound as core::cmp::PartialOrd>::gt(move _112, move _118) -> [return: bb65, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:258:20: 258:63 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _111) -> [0: bb67, otherwise: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_119),
            StorageDead(_118),
            StorageDead(_115),
            StorageDead(_113),
            StorageDead(_112),
            _78 = const (),
            StorageDead(_111),
            StorageDead(_110),
            StorageDead(_90),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[4],
                },
                kind: goto -> bb71,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_119),
            StorageDead(_118),
            StorageDead(_115),
            StorageDead(_113),
            StorageDead(_112),
            _110 = const (),
            StorageDead(_111),
            StorageDead(_110),
            _122 = AddWithOverflow(_12, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:263:17: 263:23 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_122.1: bool), "attempt to compute `{} + {}`, which would overflow", _12, const 1_usize) -> [success: bb68, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _12 = move (_122.0: usize),
            _15 = const (),
            StorageDead(_90),
            StorageDead(_83),
            StorageDead(_79),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:235:13: 264:14 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb38,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_81),
            StorageDead(_80),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[4],
                },
                kind: goto -> bb70,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_124),
            _78 = const (),
            StorageDead(_124),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[4],
                },
                kind: goto -> bb71,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_83),
            StorageDead(_79),
            StorageDead(_78),
            StorageLive(_126),
            StorageLive(_127),
            _127 = &mut ((*_1).0: std::vec::Vec<I>),
            StorageLive(_128),
            _128 = _74,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:265:13: 265:36 (#0),
                    scope: scope[4],
                },
                kind: _126 = std::vec::Vec::<I>::push(move _127, move _128) -> [return: bb72, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_128),
            StorageDead(_127),
            StorageDead(_126),
            _129 = AddWithOverflow(_11, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:266:13: 266:19 (#0),
                    scope: scope[4],
                },
                kind: assert(!move (_129.1: bool), "attempt to compute `{} + {}`, which would overflow", _11, const 1_usize) -> [success: bb73, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _11 = move (_129.0: usize),
            _15 = const (),
            StorageDead(_74),
            StorageDead(_19),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:204:9: 267:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb76,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb76,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_131),
            _14 = const (),
            StorageDead(_131),
            StorageDead(_19),
            StorageDead(_16),
            StorageDead(_14),
            StorageLive(_133),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:268:9: 272:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb78,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:268:9: 272:10 (#0),
                    scope: scope[2],
                },
                kind: falseUnwind -> [real: bb79, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_134),
            StorageLive(_135),
            _135 = _11,
            StorageLive(_136),
            _136 = _9,
            _134 = Lt(move _135, move _136),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:268:15: 268:28 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _134) -> [0: bb84, otherwise: bb80],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_136),
            StorageDead(_135),
            StorageLive(_137),
            StorageLive(_138),
            StorageLive(_139),
            _139 = &((*_1).0: std::vec::Vec<I>),
            StorageLive(_140),
            _140 = _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:269:36: 269:39 (#0),
                    scope: scope[2],
                },
                kind: _138 = <std::vec::Vec<I> as core::ops::Index<usize>>::index(move _139, move _140) -> [return: bb81, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _137 = (*_138),
            StorageDead(_140),
            StorageDead(_139),
            FakeRead(ForLet(None), _137),
            StorageDead(_138),
            StorageLive(_141),
            StorageLive(_142),
            _142 = &mut ((*_1).0: std::vec::Vec<I>),
            StorageLive(_143),
            _143 = _137,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:270:13: 270:36 (#0),
                    scope: scope[8],
                },
                kind: _141 = std::vec::Vec::<I>::push(move _142, move _143) -> [return: bb82, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_143),
            StorageDead(_142),
            StorageDead(_141),
            _144 = AddWithOverflow(_11, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:271:13: 271:19 (#0),
                    scope: scope[8],
                },
                kind: assert(!move (_144.1: bool), "attempt to compute `{} + {}`, which would overflow", _11, const 1_usize) -> [success: bb83, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _11 = move (_144.0: usize),
            _15 = const (),
            StorageDead(_137),
            StorageDead(_134),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:268:9: 272:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb78,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_136),
            StorageDead(_135),
            StorageLive(_146),
            _133 = const (),
            StorageDead(_146),
            StorageDead(_134),
            StorageDead(_133),
            StorageLive(_148),
            StorageLive(_149),
            _149 = &mut ((*_1).0: std::vec::Vec<I>),
            StorageLive(_150),
            StorageLive(_151),
            _151 = _9,
            _150 = core::ops::RangeTo::<usize> { end: move _151 },
            StorageDead(_151),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:273:9: 273:39 (#0),
                    scope: scope[2],
                },
                kind: _148 = std::vec::Vec::<I>::drain::<core::ops::RangeTo<usize>>(move _149, move _150) -> [return: bb85, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_150),
            StorageDead(_149),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:273:39: 273:40 (#0),
                    scope: scope[2],
                },
                kind: drop(_148) -> [return: bb86, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_148),
            StorageLive(_152),
            StorageLive(_153),
            _153 = ((*_1).1: bool),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:274:23: 274:34 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _153) -> [0: bb88, otherwise: bb87],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _152 = ((*_2).1: bool),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:274:23: 274:50 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb89,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _152 = const false,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:274:23: 274:50 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb89,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_153),
            ((*_1).1: bool) = move _152,
            StorageDead(_152),
            _0 = const (),
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:275:6: 275:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb90,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:275:6: 275:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:185:5: 275:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:185:57: 185:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut hir::interval::IntervalSet<I/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:185:23: 185:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/hir/interval.rs:185:41: 185:56 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/interval.rs:185:34: 185:39 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/interval.rs:185:34: 185:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} hir::interval::IntervalSet<I/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:185:34: 185:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:186:9: 188:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:186:12: 186:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:186:12: 186:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:186:38: 186:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:186:38: 186:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:186:62: 188:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/interval.rs:202:25: 202:42 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/interval.rs:202:13: 202:22 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:202:13: 202:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:202:25: 202:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _13,
                                ),
                                regex-syntax/src/hir/interval.rs:203:30: 203:36 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/interval.rs:203:13: 203:27 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:203:14: 203:19 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _13,
                                ),
                                regex-syntax/src/hir/interval.rs:203:30: 203:36 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/interval.rs:203:13: 203:27 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:203:21: 203:26 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, usize),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:203:30: 203:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:204:9: 267:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:185:5: 275:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:204:9: 267:10 (#1217),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:204:22: 204:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:204:9: 267:10 (#1217),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:204:22: 204:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:204:9: 267:10 (#1217),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:204:26: 204:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:204:9: 267:10 (#1217),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:204:39: 204:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:204:9: 267:10 (#1217),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:204:39: 204:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:204:9: 267:10 (#1217),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:204:43: 204:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:204:9: 267:10 (#1217),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:204:43: 204:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:208:13: 211:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:208:16: 208:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Alias(Projection, AliasTy { args: [I/#0], def_id: DefId(0:542 ~ regex_syntax[a00b]::hir::interval::Interval::Bound) }),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:208:16: 208:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    I/#0,
                ],
                def_id: DefId(0:542 ~ regex_syntax[a00b]::hir::interval::Interval::Bound),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:208:16: 208:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:208:16: 208:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:208:28: 208:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:208:16: 208:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:208:29: 208:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Alias(Projection, AliasTy { args: [I/#0], def_id: DefId(0:542 ~ regex_syntax[a00b]::hir::interval::Interval::Bound) }),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:208:42: 208:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    I/#0,
                ],
                def_id: DefId(0:542 ~ regex_syntax[a00b]::hir::interval::Interval::Bound),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:208:42: 208:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:208:42: 208:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:208:53: 208:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:208:42: 208:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:208:54: 208:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:208:65: 211:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:209:17: 209:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:214:13: 219:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:214:16: 214:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Alias(Projection, AliasTy { args: [I/#0], def_id: DefId(0:542 ~ regex_syntax[a00b]::hir::interval::Interval::Bound) }),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:214:16: 214:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    I/#0,
                ],
                def_id: DefId(0:542 ~ regex_syntax[a00b]::hir::interval::Interval::Bound),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:214:16: 214:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:214:16: 214:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:214:27: 214:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:214:16: 214:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:214:28: 214:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Alias(Projection, AliasTy { args: [I/#0], def_id: DefId(0:542 ~ regex_syntax[a00b]::hir::interval::Interval::Bound) }),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:214:41: 214:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    I/#0,
                ],
                def_id: DefId(0:542 ~ regex_syntax[a00b]::hir::interval::Interval::Bound),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:214:41: 214:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:214:41: 214:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:214:53: 214:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:214:41: 214:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:214:54: 214:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:214:65: 219:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/interval.rs:215:29: 215:43 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/interval.rs:215:21: 215:26 (#0),
                    },
                ),
            ),
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:215:21: 215:26 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:215:40: 215:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:215:29: 215:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:215:41: 215:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:216:17: 216:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:216:17: 216:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:216:34: 216:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:217:17: 217:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:221:13: 221:77 (#426),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:221:22: 221:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:221:22: 221:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:221:33: 221:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:221:22: 221:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:221:34: 221:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:221:59: 221:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:221:59: 221:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:221:72: 221:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:221:60: 221:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:221:73: 221:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:221:13: 221:77 (#426),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:221:13: 221:77 (#426),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/interval.rs:234:29: 234:43 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/interval.rs:234:17: 234:26 (#0),
                    },
                ),
            ),
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:234:17: 234:26 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:234:40: 234:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:234:29: 234:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:234:41: 234:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:235:13: 264:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:235:13: 264:14 (#1222),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:235:19: 235:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:235:13: 264:14 (#1222),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:235:19: 235:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:235:13: 264:14 (#1222),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:235:23: 235:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:235:13: 264:14 (#1222),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:235:23: 235:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:235:13: 264:14 (#1222),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:236:21: 236:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:235:13: 264:14 (#1222),
                },
            ),
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:236:21: 236:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:235:13: 264:14 (#1222),
                },
            ),
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:236:49: 236:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:235:13: 264:14 (#1222),
                },
            ),
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:236:49: 236:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:235:13: 264:14 (#1222),
                },
            ),
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:236:62: 236:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:235:13: 264:14 (#1222),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:236:50: 236:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:235:13: 264:14 (#1222),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:236:63: 236:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/interval.rs:238:33: 238:38 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/interval.rs:238:21: 238:30 (#0),
                    },
                ),
            ),
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:238:21: 238:30 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:239:25: 251:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (core::option::Option<I/#0>, core::option::Option<I/#0>),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:239:31: 239:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:239:31: 239:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:239:48: 239:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:239:48: 239:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:239:61: 239:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:239:49: 239:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:239:62: 239:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:240:28: 240:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:246:36: 246:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:240:22: 240:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:240:37: 245:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:243:25: 243:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _92,
                                ),
                                regex-syntax/src/hir/interval.rs:239:31: 239:65 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/interval.rs:246:21: 246:64 (#0),
                    },
                ),
            ),
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:246:27: 246:33 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _92,
                                ),
                                regex-syntax/src/hir/interval.rs:239:31: 239:65 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/interval.rs:247:21: 247:49 (#0),
                    },
                ),
            ),
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:247:27: 247:33 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _92,
                                ),
                                regex-syntax/src/hir/interval.rs:239:31: 239:65 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/interval.rs:247:21: 247:49 (#0),
                    },
                ),
            ),
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:247:41: 247:47 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:248:25: 248:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:248:25: 248:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:248:42: 248:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:258:17: 260:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:258:20: 258:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Alias(Projection, AliasTy { args: [I/#0], def_id: DefId(0:542 ~ regex_syntax[a00b]::hir::interval::Interval::Bound) }),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:258:20: 258:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    I/#0,
                ],
                def_id: DefId(0:542 ~ regex_syntax[a00b]::hir::interval::Interval::Bound),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:258:20: 258:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:258:20: 258:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:258:32: 258:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:258:20: 258:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:258:33: 258:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Alias(Projection, AliasTy { args: [I/#0], def_id: DefId(0:542 ~ regex_syntax[a00b]::hir::interval::Interval::Bound) }),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:258:46: 258:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    I/#0,
                ],
                def_id: DefId(0:542 ~ regex_syntax[a00b]::hir::interval::Interval::Bound),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:258:46: 258:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:258:46: 258:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:258:64: 260:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:263:17: 263:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:235:13: 264:14 (#1222),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:235:13: 264:14 (#1222),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:235:13: 264:14 (#1222),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:235:13: 264:14 (#1222),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:265:13: 265:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:265:13: 265:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:265:30: 265:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:266:13: 266:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:204:9: 267:10 (#1217),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:204:9: 267:10 (#1217),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:204:9: 267:10 (#1217),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:204:9: 267:10 (#1217),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:268:9: 272:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:268:9: 272:10 (#1225),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:268:15: 268:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:268:9: 272:10 (#1225),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:268:15: 268:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:268:9: 272:10 (#1225),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:268:19: 268:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/interval.rs:269:25: 269:39 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/interval.rs:269:17: 269:22 (#0),
                    },
                ),
            ),
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:269:17: 269:22 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:269:36: 269:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:269:25: 269:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:269:37: 269:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:270:13: 270:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:270:13: 270:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:270:30: 270:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:271:13: 271:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:268:9: 272:10 (#1225),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:268:9: 272:10 (#1225),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:268:9: 272:10 (#1225),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:268:9: 272:10 (#1225),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::Drain<'{erased}, I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:273:9: 273:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:273:9: 273:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeTo<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:273:27: 273:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:273:29: 273:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:274:23: 274:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:274:23: 274:34 (#0),
            scope: scope[0],
        },
    },
]