[
    BasicBlockData {
        statements: [
            PlaceMention((*_2)),
            _3 = discriminant((*_2)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:113:9: 113:19 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [6: bb2, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            _7 = (),
            _0 = core::result::Result::<(), core::fmt::Error>::Ok(move _7),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:117:23: 117:24 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:114:13: 114:48 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb3, imaginary: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = &(((*_2) as Bracketed).0: std::boxed::Box<ast::ClassBracketed>),
            StorageLive(_5),
            _5 = &mut (*_1),
            StorageLive(_6),
            _6 = &(*(*_4)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:115:17: 115:48 (#0),
                    scope: scope[1],
                },
                kind: _0 = ast::print::Writer::<W>::fmt_class_bracketed_pre(move _5, move _6) -> [return: bb4, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:116:13: 116:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:119:6: 119:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/print.rs:109:5: 119:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:112:10: 112:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut ast::print::Writer<W/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:110:9: 110:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/ast/print.rs:111:14: 111:32 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/ast/print.rs:111:9: 111:12 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/print.rs:111:9: 111:12 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} ast::ClassSetItem,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:111:9: 111:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:114:13: 114:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_2),
                                ),
                                regex-syntax/src/ast/print.rs:113:15: 113:19 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/print.rs:114:13: 114:48 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::boxed::Box<ast::ClassBracketed, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:114:42: 114:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/print.rs:115:17: 115:48 (#0),
                },
            ),
        ),
        ty: &'{erased} mut ast::print::Writer<W/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:115:17: 115:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/print.rs:115:17: 115:48 (#0),
                },
            ),
        ),
        ty: &'{erased} ast::ClassBracketed,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:115:46: 115:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/print.rs:117:21: 117:23 (#0),
            scope: scope[0],
        },
    },
]