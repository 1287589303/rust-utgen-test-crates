[
    BasicBlockData {
        statements: [
            PlaceMention(_2),
            _3 = discriminant(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:289:9: 289:21 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:289:15: 289:21 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:290:13: 290:33 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:291:13: 291:28 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb7, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:292:13: 292:39 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb8, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_18),
            _18 = ((_2 as Alternation).1: &[ast::Ast]),
            StorageLive(_19),
            StorageLive(_20),
            _20 = &(*_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:300:20: 300:35 (#0),
                    scope: scope[2],
                },
                kind: _19 = core::slice::<impl [ast::Ast]>::is_empty(move _20) -> [return: bb15, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::option::Option::<ast::visitor::Frame<'_>>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:290:37: 290:41 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::option::Option::<ast::visitor::Frame<'_>>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:291:32: 291:36 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = ((_2 as Concat).1: &[ast::Ast]),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:293:20: 293:35 (#0),
                    scope: scope[1],
                },
                kind: _5 = core::slice::<impl [ast::Ast]>::is_empty(move _6) -> [return: bb9, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:293:20: 293:35 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _5) -> [0: bb11, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            _0 = core::option::Option::<ast::visitor::Frame<'_>>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:293:17: 297:18 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = const 0_usize,
            _11 = Len((*_4)),
            _12 = Lt(_10, _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:296:49: 296:56 (#0),
                    scope: scope[1],
                },
                kind: assert(move _12, "index out of bounds: the length is {} but the index is {}", move _11, _10) -> [success: bb12, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _9 = &(*_4)[_10],
            _8 = &(*_9),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &(*_4),
            StorageLive(_17),
            _17 = core::ops::RangeFrom::<usize> { start: const 1_usize },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:296:69: 296:74 (#0),
                    scope: scope[1],
                },
                kind: _15 = <[ast::Ast] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _16, move _17) -> [return: bb13, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
            _14 = &(*_15),
            _13 = &(*_14),
            _7 = ast::visitor::Frame::<'_>::Concat { head: move _8, tail: move _13 },
            StorageDead(_13),
            StorageDead(_8),
            _0 = core::option::Option::<ast::visitor::Frame<'_>>::Some(move _7),
            StorageDead(_7),
            StorageDead(_15),
            StorageDead(_14),
            StorageDead(_10),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:293:17: 297:18 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:298:13: 298:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:300:20: 300:35 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _19) -> [0: bb17, otherwise: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            _0 = core::option::Option::<ast::visitor::Frame<'_>>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:300:17: 307:18 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            _24 = const 0_usize,
            _25 = Len((*_18)),
            _26 = Lt(_24, _25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:304:32: 304:39 (#0),
                    scope: scope[2],
                },
                kind: assert(move _26, "index out of bounds: the length is {} but the index is {}", move _25, _24) -> [success: bb18, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _23 = &(*_18)[_24],
            _22 = &(*_23),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            _30 = &(*_18),
            StorageLive(_31),
            _31 = core::ops::RangeFrom::<usize> { start: const 1_usize },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:305:36: 305:41 (#0),
                    scope: scope[2],
                },
                kind: _29 = <[ast::Ast] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _30, move _31) -> [return: bb19, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_30),
            _28 = &(*_29),
            _27 = &(*_28),
            _21 = ast::visitor::Frame::<'_>::Alternation { head: move _22, tail: move _27 },
            StorageDead(_27),
            StorageDead(_22),
            _0 = core::option::Option::<ast::visitor::Frame<'_>>::Some(move _21),
            StorageDead(_21),
            StorageDead(_29),
            StorageDead(_28),
            StorageDead(_24),
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:300:17: 307:18 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:308:13: 308:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:310:6: 310:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:288:5: 310:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<ast::visitor::Frame<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:288:41: 288:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} ast::visitor::HeapVisitor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:288:12: 288:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/ast/visitor.rs:288:27: 288:36 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/ast/visitor.rs:288:19: 288:25 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:288:19: 288:25 (#0),
                    },
                ),
            ),
        ),
        ty: ast::visitor::Frame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:288:19: 288:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:290:13: 290:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                regex-syntax/src/ast/visitor.rs:289:15: 289:21 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:292:13: 292:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [ast::Ast],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:292:29: 292:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/visitor.rs:293:17: 297:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:293:20: 293:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/visitor.rs:293:17: 297:18 (#0),
                },
            ),
        ),
        ty: &'{erased} [ast::Ast],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:293:20: 293:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: ast::visitor::Frame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:296:26: 296:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:296:48: 296:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/visitor.rs:296:21: 296:77 (#0),
                },
            ),
        ),
        ty: &'{erased} ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:296:48: 296:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/visitor.rs:296:21: 296:77 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:296:54: 296:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:296:49: 296:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:296:49: 296:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} [ast::Ast],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:296:64: 296:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/visitor.rs:296:21: 296:77 (#0),
                },
            ),
        ),
        ty: &'{erased} [ast::Ast],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:296:64: 296:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/visitor.rs:296:21: 296:77 (#0),
                },
            ),
        ),
        ty: &'{erased} [ast::Ast],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:296:69: 296:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/visitor.rs:296:21: 296:77 (#0),
                },
            ),
        ),
        ty: &'{erased} [ast::Ast],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:296:65: 296:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/visitor.rs:296:21: 296:77 (#0),
                },
            ),
        ),
        ty: core::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:296:70: 296:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                regex-syntax/src/ast/visitor.rs:289:15: 289:21 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:299:13: 299:44 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [ast::Ast],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:299:34: 299:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/visitor.rs:300:17: 307:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:300:20: 300:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/visitor.rs:300:17: 307:18 (#0),
                },
            ),
        ),
        ty: &'{erased} [ast::Ast],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:300:20: 300:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: ast::visitor::Frame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:303:26: 306:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:304:31: 304:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/visitor.rs:303:21: 306:23 (#0),
                },
            ),
        ),
        ty: &'{erased} ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:304:31: 304:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/visitor.rs:303:21: 306:23 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:304:37: 304:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:304:32: 304:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:304:32: 304:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} [ast::Ast],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:305:31: 305:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/visitor.rs:303:21: 306:23 (#0),
                },
            ),
        ),
        ty: &'{erased} [ast::Ast],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:305:31: 305:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/visitor.rs:303:21: 306:23 (#0),
                },
            ),
        ),
        ty: &'{erased} [ast::Ast],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:305:36: 305:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/visitor.rs:303:21: 306:23 (#0),
                },
            ),
        ),
        ty: &'{erased} [ast::Ast],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:305:32: 305:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/visitor.rs:303:21: 306:23 (#0),
                },
            ),
        ),
        ty: core::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:305:37: 305:40 (#0),
            scope: scope[0],
        },
    },
]