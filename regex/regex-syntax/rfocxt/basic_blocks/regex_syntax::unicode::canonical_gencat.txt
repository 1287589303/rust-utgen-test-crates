[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            PlaceMention(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:505:9: 505:14 (#0),
                    scope: scope[0],
                },
                kind: _5 = <str as core::cmp::PartialEq>::eq(_1, const "any") -> [return: bb9, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:509:27: 509:62 (#0),
                    scope: scope[0],
                },
                kind: _15 = unicode::property_values(const "General_Category") -> [return: bb13, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:505:9: 505:14 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:506:9: 506:19 (#0),
                    scope: scope[0],
                },
                kind: _4 = <str as core::cmp::PartialEq>::eq(_1, const "assigned") -> [return: bb8, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:506:9: 506:19 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb11, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:507:9: 507:16 (#0),
                    scope: scope[0],
                },
                kind: _3 = <str as core::cmp::PartialEq>::eq(_1, const "ascii") -> [return: bb7, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:507:9: 507:16 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb12, imaginary: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:507:9: 507:16 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb1, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:506:9: 506:19 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb5, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:505:9: 505:14 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _5) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            StorageLive(_7),
            _7 = const "Any",
            _6 = &(*_7),
            _2 = core::option::Option::<&str>::Some(move _6),
            StorageDead(_6),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:505:28: 505:29 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb22,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            StorageLive(_9),
            _9 = const "Assigned",
            _8 = &(*_9),
            _2 = core::option::Option::<&str>::Some(move _8),
            StorageDead(_8),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:506:38: 506:39 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb22,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            StorageLive(_11),
            _11 = const "ASCII",
            _10 = &(*_11),
            _2 = core::option::Option::<&str>::Some(move _10),
            StorageDead(_10),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:507:32: 507:33 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb22,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:509:27: 509:63 (#1816),
                    scope: scope[0],
                },
                kind: _14 = <core::result::Result<core::option::Option<&[(&str, &str)]>, unicode::Error> as core::ops::Try>::branch(move _15) -> [return: bb14, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            PlaceMention(_14),
            _16 = discriminant(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:509:27: 509:63 (#1816),
                    scope: scope[0],
                },
                kind: switchInt(move _16) -> [0: bb17, 1: bb16, otherwise: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:509:27: 509:63 (#1816),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:509:62: 509:63 (#1817),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb18, imaginary: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_20),
            _20 = ((_14 as Continue).0: core::option::Option<&[(&str, &str)]>),
            _13 = _20,
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:509:27: 509:72 (#0),
                    scope: scope[0],
                },
                kind: _12 = core::option::Option::<&[(&str, &str)]>::unwrap(move _13) -> [return: bb20, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_17),
            _17 = move ((_14 as Break).0: core::result::Result<core::convert::Infallible, unicode::Error>),
            StorageLive(_19),
            _19 = move _17,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:509:27: 509:63 (#1816),
                    scope: scope[3],
                },
                kind: _0 = <core::result::Result<core::option::Option<&str>, unicode::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, unicode::Error>>>::from_residual(move _19) -> [return: bb19, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_13),
            StorageDead(_14),
            StorageDead(_12),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:513:2: 513:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            FakeRead(ForLet(None), _12),
            StorageDead(_14),
            StorageLive(_21),
            _21 = &(*_12),
            StorageLive(_22),
            _22 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:510:13: 510:55 (#0),
                    scope: scope[1],
                },
                kind: _2 = unicode::canonical_value(move _21, move _22) -> [return: bb21, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_21),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:511:9: 511:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb22,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::result::Result::<core::option::Option<&str>, unicode::Error>::Ok(move _2),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:513:2: 513:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:513:2: 513:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:501:1: 513:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::option::Option<&'{erased} str>, unicode::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:503:6: 503:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/unicode.rs:502:23: 502:27 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/unicode.rs:502:5: 502:21 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:502:5: 502:21 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:502:5: 502:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:504:8: 512:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:507:9: 507:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:506:9: 506:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:505:9: 505:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:505:23: 505:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:504:5: 512:7 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:505:23: 505:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:506:28: 506:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:504:5: 512:7 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:506:28: 506:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:507:25: 507:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:504:5: 512:7 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:507:25: 507:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/unicode.rs:509:27: 509:72 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:509:17: 509:24 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [(&'{erased} str, &'{erased} str)],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:509:17: 509:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} [(&'{erased} str, &'{erased} str)]>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:509:27: 509:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, unicode::Error>, core::option::Option<&'{erased} [(&'{erased} str, &'{erased} str)]>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:509:27: 509:63 (#1816),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::option::Option<&'{erased} [(&'{erased} str, &'{erased} str)]>, unicode::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:509:27: 509:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:509:62: 509:63 (#1817),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _14,
                                ),
                                regex-syntax/src/unicode.rs:509:27: 509:63 (#1816),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:509:62: 509:63 (#1817),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, unicode::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:509:62: 509:63 (#1817),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:509:62: 509:63 (#1817),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, unicode::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:509:62: 509:63 (#1817),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _14,
                                ),
                                regex-syntax/src/unicode.rs:509:27: 509:63 (#1816),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:509:27: 509:63 (#1816),
                    },
                ),
            ),
        ),
        ty: core::option::Option<&'{erased} [(&'{erased} str, &'{erased} str)]>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:509:27: 509:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:510:13: 510:55 (#0),
                },
            ),
        ),
        ty: &'{erased} [(&'{erased} str, &'{erased} str)],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:510:29: 510:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:510:13: 510:55 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:510:38: 510:54 (#0),
            scope: scope[0],
        },
    },
]