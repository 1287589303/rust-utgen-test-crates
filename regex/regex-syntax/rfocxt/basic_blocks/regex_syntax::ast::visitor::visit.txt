[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:119:5: 119:23 (#0),
                    scope: scope[0],
                },
                kind: _4 = ast::visitor::HeapVisitor::<'_>::new() -> [return: bb1, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &mut _4,
            StorageLive(_5),
            _5 = &(*_1),
            StorageLive(_6),
            _6 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:119:5: 119:43 (#0),
                    scope: scope[0],
                },
                kind: _0 = ast::visitor::HeapVisitor::<'_>::visit::<V>(move _3, move _5, move _6) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:120:1: 120:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb3, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:120:1: 120:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb4, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:120:2: 120:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:119:42: 119:43 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:120:1: 120:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:120:1: 120:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:118:1: 120:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<Alias(Projection, AliasTy { args: [V/#0], def_id: DefId(0:236 ~ regex_syntax[a00b]::ast::visitor::Visitor::Output) }), Alias(Projection, AliasTy { args: [V/#0], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:118:52: 118:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/ast/visitor.rs:118:31: 118:35 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/ast/visitor.rs:118:26: 118:29 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:118:26: 118:29 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:118:26: 118:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/ast/visitor.rs:118:46: 118:47 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/ast/visitor.rs:118:37: 118:44 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:118:37: 118:44 (#0),
                    },
                ),
            ),
        ),
        ty: V/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:118:37: 118:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/visitor.rs:119:5: 119:43 (#0),
                },
            ),
        ),
        ty: &'{erased} mut ast::visitor::HeapVisitor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:119:5: 119:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/visitor.rs:119:5: 119:43 (#0),
                },
            ),
        ),
        ty: ast::visitor::HeapVisitor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:119:5: 119:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/visitor.rs:119:5: 119:43 (#0),
                },
            ),
        ),
        ty: &'{erased} ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:119:30: 119:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/visitor.rs:119:5: 119:43 (#0),
                },
            ),
        ),
        ty: V/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:119:35: 119:42 (#0),
            scope: scope[0],
        },
    },
]