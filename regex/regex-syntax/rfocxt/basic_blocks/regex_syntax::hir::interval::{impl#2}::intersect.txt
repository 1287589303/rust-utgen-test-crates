[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &((*_1).0: std::vec::Vec<I>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:145:12: 145:34 (#0),
                    scope: scope[0],
                },
                kind: _4 = std::vec::Vec::<I>::is_empty(move _5) -> [return: bb1, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:145:12: 145:34 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            _0 = const (),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb42,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            _3 = const (),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &((*_2).0: std::vec::Vec<I>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:148:12: 148:35 (#0),
                    scope: scope[0],
                },
                kind: _8 = std::vec::Vec::<I>::is_empty(move _9) -> [return: bb4, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:148:12: 148:35 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _8) -> [0: bb7, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &mut ((*_1).0: std::vec::Vec<I>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:149:13: 149:32 (#0),
                    scope: scope[0],
                },
                kind: _11 = std::vec::Vec::<I>::clear(move _12) -> [return: bb6, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            ((*_1).1: bool) = const true,
            _0 = const (),
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb42,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            _7 = const (),
            StorageDead(_8),
            StorageDead(_7),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &((*_1).0: std::vec::Vec<I>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:159:25: 159:42 (#0),
                    scope: scope[0],
                },
                kind: _13 = std::vec::Vec::<I>::len(move _14) -> [return: bb8, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            FakeRead(ForLet(None), _13),
            StorageLive(_15),
            StorageLive(_16),
            _16 = _13,
            _15 = core::ops::Range::<usize> { start: const 0_usize, end: move _16 },
            StorageDead(_16),
            FakeRead(ForLet(None), _15),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &((*_2).0: std::vec::Vec<I>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:162:26: 162:44 (#0),
                    scope: scope[2],
                },
                kind: _18 = std::vec::Vec::<I>::len(move _19) -> [return: bb9, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            _17 = core::ops::Range::<usize> { start: const 0_usize, end: move _18 },
            StorageDead(_18),
            FakeRead(ForLet(None), _17),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            _22 = &mut _15,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:163:21: 163:31 (#0),
                    scope: scope[3],
                },
                kind: _21 = <core::ops::Range<usize> as core::iter::Iterator>::next(move _22) -> [return: bb10, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:163:21: 163:40 (#0),
                    scope: scope[3],
                },
                kind: _20 = core::option::Option::<usize>::unwrap(move _21) -> [return: bb11, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            FakeRead(ForLet(None), _20),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            _25 = &mut _17,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:164:21: 164:31 (#0),
                    scope: scope[4],
                },
                kind: _24 = <core::ops::Range<usize> as core::iter::Iterator>::next(move _25) -> [return: bb12, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:164:21: 164:40 (#0),
                    scope: scope[4],
                },
                kind: _23 = core::option::Option::<usize>::unwrap(move _24) -> [return: bb13, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            FakeRead(ForLet(None), _23),
            StorageLive(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:165:9: 179:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:165:9: 179:10 (#0),
                    scope: scope[5],
                },
                kind: falseUnwind -> [real: bb15, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            _32 = &((*_1).0: std::vec::Vec<I>),
            StorageLive(_33),
            _33 = _20,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:166:42: 166:45 (#0),
                    scope: scope[6],
                },
                kind: _31 = <std::vec::Vec<I> as core::ops::Index<usize>>::index(move _32, move _33) -> [return: bb16, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _30 = &(*_31),
            StorageDead(_33),
            StorageDead(_32),
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            StorageLive(_37),
            _37 = &((*_2).0: std::vec::Vec<I>),
            StorageLive(_38),
            _38 = _23,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:166:69: 166:72 (#0),
                    scope: scope[6],
                },
                kind: _36 = <std::vec::Vec<I> as core::ops::Index<usize>>::index(move _37, move _38) -> [return: bb17, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            StorageDead(_37),
            _35 = &(*_36),
            _34 = &(*_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:166:31: 166:73 (#0),
                    scope: scope[6],
                },
                kind: _29 = <I as hir::interval::Interval>::intersect(move _30, move _34) -> [return: bb18, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_30),
            PlaceMention(_29),
            _39 = discriminant(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:166:20: 166:28 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _39) -> [1: bb19, otherwise: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:166:20: 166:28 (#0),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb20, imaginary: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_40),
            _40 = ((_29 as Some).0: I),
            StorageLive(_41),
            StorageLive(_42),
            _42 = &mut ((*_1).0: std::vec::Vec<I>),
            StorageLive(_43),
            _43 = _40,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:167:17: 167:37 (#0),
                    scope: scope[6],
                },
                kind: _41 = std::vec::Vec::<I>::push(move _42, move _43) -> [return: bb21, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            StorageDead(_42),
            StorageDead(_41),
            _28 = const (),
            StorageDead(_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:166:13: 168:14 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _28 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:166:13: 168:14 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_35),
            StorageDead(_31),
            StorageDead(_29),
            StorageDead(_28),
            StorageLive(_46),
            StorageLive(_47),
            StorageLive(_48),
            StorageLive(_49),
            StorageLive(_50),
            StorageLive(_51),
            StorageLive(_52),
            _52 = &((*_1).0: std::vec::Vec<I>),
            StorageLive(_53),
            _53 = _20,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:170:31: 170:34 (#0),
                    scope: scope[5],
                },
                kind: _51 = <std::vec::Vec<I> as core::ops::Index<usize>>::index(move _52, move _53) -> [return: bb24, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _50 = &(*_51),
            StorageDead(_53),
            StorageDead(_52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:170:20: 170:42 (#0),
                    scope: scope[5],
                },
                kind: _49 = <I as hir::interval::Interval>::upper(move _50) -> [return: bb25, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _48 = &_49,
            StorageDead(_50),
            StorageLive(_54),
            StorageLive(_55),
            StorageLive(_56),
            StorageLive(_57),
            StorageLive(_58),
            _58 = &((*_2).0: std::vec::Vec<I>),
            StorageLive(_59),
            _59 = _23,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:170:57: 170:60 (#0),
                    scope: scope[5],
                },
                kind: _57 = <std::vec::Vec<I> as core::ops::Index<usize>>::index(move _58, move _59) -> [return: bb26, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _56 = &(*_57),
            StorageDead(_59),
            StorageDead(_58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:170:45: 170:68 (#0),
                    scope: scope[5],
                },
                kind: _55 = <I as hir::interval::Interval>::upper(move _56) -> [return: bb27, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _54 = &_55,
            StorageDead(_56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:170:20: 170:68 (#0),
                    scope: scope[5],
                },
                kind: _47 = <<I as hir::interval::Interval>::Bound as core::cmp::PartialOrd>::lt(move _48, move _54) -> [return: bb28, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:170:20: 170:68 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _47) -> [0: bb30, otherwise: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_57),
            StorageDead(_55),
            StorageDead(_54),
            StorageDead(_51),
            StorageDead(_49),
            StorageDead(_48),
            StorageLive(_60),
            _60 = &mut _15,
            StorageLive(_61),
            _61 = &mut _20,
            _46 = (move _60, move _61),
            StorageDead(_61),
            StorageDead(_60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:170:17: 174:18 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_57),
            StorageDead(_55),
            StorageDead(_54),
            StorageDead(_51),
            StorageDead(_49),
            StorageDead(_48),
            StorageLive(_62),
            _62 = &mut _17,
            StorageLive(_63),
            _63 = &mut _23,
            _46 = (move _62, move _63),
            StorageDead(_63),
            StorageDead(_62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:170:17: 174:18 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            PlaceMention(_46),
            StorageLive(_44),
            _44 = move (_46.0: &mut core::ops::Range<usize>),
            StorageLive(_45),
            _45 = move (_46.1: &mut usize),
            StorageDead(_46),
            StorageLive(_64),
            StorageLive(_65),
            _65 = &mut (*_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:175:19: 175:28 (#0),
                    scope: scope[7],
                },
                kind: _64 = <core::ops::Range<usize> as core::iter::Iterator>::next(move _65) -> [return: bb32, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_65),
            PlaceMention(_64),
            _66 = discriminant(_64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:175:13: 175:28 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _66) -> [0: bb35, 1: bb34, otherwise: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:175:19: 175:28 (#0),
                    scope: scope[7],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:176:17: 176:24 (#0),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb36, imaginary: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _26 = const (),
            StorageDead(_45),
            StorageDead(_44),
            StorageDead(_64),
            StorageDead(_26),
            StorageLive(_70),
            StorageLive(_71),
            _71 = &mut ((*_1).0: std::vec::Vec<I>),
            StorageLive(_72),
            StorageLive(_73),
            _73 = _13,
            _72 = core::ops::RangeTo::<usize> { end: move _73 },
            StorageDead(_73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:180:9: 180:39 (#0),
                    scope: scope[5],
                },
                kind: _70 = std::vec::Vec::<I>::drain::<core::ops::RangeTo<usize>>(move _71, move _72) -> [return: bb37, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_67),
            _67 = ((_64 as Some).0: usize),
            StorageLive(_68),
            _68 = _67,
            (*_45) = move _68,
            _27 = const (),
            StorageDead(_68),
            StorageDead(_67),
            StorageDead(_45),
            StorageDead(_44),
            StorageDead(_64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:165:9: 179:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_72),
            StorageDead(_71),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:180:39: 180:40 (#0),
                    scope: scope[5],
                },
                kind: drop(_70) -> [return: bb38, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_70),
            StorageLive(_74),
            StorageLive(_75),
            _75 = ((*_1).1: bool),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:181:23: 181:34 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _75) -> [0: bb40, otherwise: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _74 = ((*_2).1: bool),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:181:23: 181:50 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb41,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _74 = const false,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:181:23: 181:50 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb41,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_75),
            ((*_1).1: bool) = move _74,
            StorageDead(_74),
            _0 = const (),
            StorageDead(_23),
            StorageDead(_20),
            StorageDead(_17),
            StorageDead(_15),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:182:6: 182:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb42,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:182:6: 182:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:144:5: 182:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:144:56: 144:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut hir::interval::IntervalSet<I/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:144:22: 144:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/hir/interval.rs:144:40: 144:55 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/interval.rs:144:33: 144:38 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/interval.rs:144:33: 144:38 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} hir::interval::IntervalSet<I/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:144:33: 144:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:145:9: 147:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:145:12: 145:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:145:12: 145:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:145:35: 147:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:148:9: 153:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:148:12: 148:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:148:12: 148:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:148:36: 153:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:149:13: 149:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:149:13: 149:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/interval.rs:159:25: 159:42 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/interval.rs:159:13: 159:22 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:159:13: 159:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:159:25: 159:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/interval.rs:161:23: 161:35 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/interval.rs:161:13: 161:20 (#0),
                    },
                ),
            ),
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:161:13: 161:20 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:161:26: 161:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/interval.rs:162:23: 162:44 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/interval.rs:162:13: 162:20 (#0),
                    },
                ),
            ),
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:162:13: 162:20 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:162:26: 162:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:162:26: 162:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/interval.rs:163:21: 163:40 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/interval.rs:163:13: 163:18 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:163:13: 163:18 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:163:21: 163:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:163:21: 163:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/interval.rs:164:21: 164:40 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/interval.rs:164:13: 164:18 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:164:13: 164:18 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:164:21: 164:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:164:21: 164:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:165:9: 179:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:144:5: 182:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:166:13: 168:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<I/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:166:31: 166:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:166:31: 166:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:166:42: 166:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:166:31: 166:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:166:43: 166:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:166:56: 166:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:166:56: 166:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:166:69: 166:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:166:57: 166:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:166:70: 166:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:166:20: 166:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _29,
                                ),
                                regex-syntax/src/hir/interval.rs:166:31: 166:73 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/interval.rs:166:20: 166:28 (#0),
                    },
                ),
            ),
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:166:25: 166:27 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:167:17: 167:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:167:17: 167:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:167:34: 167:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _46,
                                ),
                                regex-syntax/src/hir/interval.rs:170:17: 174:18 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/interval.rs:169:17: 169:27 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:169:18: 169:20 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _46,
                                ),
                                regex-syntax/src/hir/interval.rs:170:17: 174:18 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/interval.rs:169:17: 169:27 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:169:22: 169:26 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} mut core::ops::Range<usize>, &'{erased} mut usize),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:170:17: 174:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:170:20: 170:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Alias(Projection, AliasTy { args: [I/#0], def_id: DefId(0:542 ~ regex_syntax[a00b]::hir::interval::Interval::Bound) }),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:170:20: 170:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    I/#0,
                ],
                def_id: DefId(0:542 ~ regex_syntax[a00b]::hir::interval::Interval::Bound),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:170:20: 170:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:170:20: 170:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:170:31: 170:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:170:20: 170:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:170:32: 170:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Alias(Projection, AliasTy { args: [I/#0], def_id: DefId(0:542 ~ regex_syntax[a00b]::hir::interval::Interval::Bound) }),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:170:45: 170:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    I/#0,
                ],
                def_id: DefId(0:542 ~ regex_syntax[a00b]::hir::interval::Interval::Bound),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:170:45: 170:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:170:45: 170:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:170:57: 170:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:170:45: 170:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:170:58: 170:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/interval.rs:171:21: 171:39 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:171:22: 171:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/interval.rs:171:21: 171:39 (#0),
                },
            ),
        ),
        ty: &'{erased} mut usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:171:32: 171:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/interval.rs:173:21: 173:39 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:173:22: 173:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/interval.rs:173:21: 173:39 (#0),
                },
            ),
        ),
        ty: &'{erased} mut usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:173:32: 173:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:175:13: 178:14 (#0),
                },
            ),
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:175:19: 175:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:175:13: 178:14 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:175:19: 175:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:176:17: 176:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _64,
                                ),
                                regex-syntax/src/hir/interval.rs:175:19: 175:28 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/interval.rs:176:17: 176:24 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:176:22: 176:23 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:175:13: 178:14 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:176:36: 176:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:175:13: 178:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:177:25: 177:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::Drain<'{erased}, I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:180:9: 180:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:180:9: 180:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeTo<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:180:27: 180:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:180:29: 180:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:181:23: 181:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:181:23: 181:34 (#0),
            scope: scope[0],
        },
    },
]