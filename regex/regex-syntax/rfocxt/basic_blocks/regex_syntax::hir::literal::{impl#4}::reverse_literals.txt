[
    BasicBlockData {
        statements: [
            PlaceMention(((*_1).0: core::option::Option<std::vec::Vec<hir::literal::Literal>>)),
            _2 = discriminant(((*_1).0: core::option::Option<std::vec::Vec<hir::literal::Literal>>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1401:16: 1401:34 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _2) -> [1: bb1, otherwise: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1401:16: 1401:34 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb2, imaginary: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = &mut ((((*_1).0: core::option::Option<std::vec::Vec<hir::literal::Literal>>) as Some).0: std::vec::Vec<hir::literal::Literal>),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &mut (*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1402:24: 1402:39 (#0),
                    scope: scope[1],
                },
                kind: _7 = <std::vec::Vec<hir::literal::Literal> as core::ops::DerefMut>::deref_mut(move _8) -> [return: bb3, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = &mut (*_7),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1402:24: 1402:39 (#0),
                    scope: scope[1],
                },
                kind: _5 = core::slice::<impl [hir::literal::Literal]>::iter_mut(move _6) -> [return: bb4, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1402:24: 1402:39 (#1326),
                    scope: scope[1],
                },
                kind: _4 = <core::slice::IterMut<'_, hir::literal::Literal> as core::iter::IntoIterator>::into_iter(move _5) -> [return: bb5, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            PlaceMention(_4),
            StorageLive(_9),
            _9 = move _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1402:13: 1404:14 (#1325),
                    scope: scope[2],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1402:13: 1404:14 (#1325),
                    scope: scope[2],
                },
                kind: falseUnwind -> [real: bb7, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &mut _9,
            _13 = &mut (*_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1402:24: 1402:39 (#1326),
                    scope: scope[2],
                },
                kind: _12 = <core::slice::IterMut<'_, hir::literal::Literal> as core::iter::Iterator>::next(move _13) -> [return: bb8, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            PlaceMention(_12),
            _15 = discriminant(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1402:24: 1402:39 (#1326),
                    scope: scope[2],
                },
                kind: switchInt(move _15) -> [0: bb10, 1: bb11, otherwise: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1402:24: 1402:39 (#1326),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1402:13: 1404:14 (#1325),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb12, imaginary: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_17),
            _17 = move ((_12 as Some).0: &mut hir::literal::Literal),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &mut (*_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1403:17: 1403:30 (#0),
                    scope: scope[3],
                },
                kind: _18 = hir::literal::Literal::reverse(move _19) -> [return: bb13, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
            StorageDead(_14),
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_7),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1401:9: 1405:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            _11 = const (),
            StorageDead(_17),
            StorageDead(_14),
            StorageDead(_12),
            StorageDead(_11),
            _10 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1402:13: 1404:14 (#1325),
                    scope: scope[2],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1401:9: 1405:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1406:6: 1406:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1400:5: 1406:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1400:39: 1400:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut hir::literal::Seq,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1400:29: 1400:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1401:16: 1401:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    ((*_1).0: core::option::Option<std::vec::Vec<hir::literal::Literal>>),
                                ),
                                regex-syntax/src/hir/literal.rs:1401:37: 1401:50 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/literal.rs:1401:16: 1401:34 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<hir::literal::Literal, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1401:21: 1401:33 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/literal.rs:1402:13: 1404:14 (#1325),
                },
            ),
        ),
        ty: core::slice::IterMut<'{erased}, hir::literal::Literal>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1402:24: 1402:39 (#1326),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/literal.rs:1402:13: 1404:14 (#1325),
                },
            ),
        ),
        ty: core::slice::IterMut<'{erased}, hir::literal::Literal>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1402:24: 1402:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/literal.rs:1402:13: 1404:14 (#1325),
                },
            ),
        ),
        ty: &'{erased} mut [hir::literal::Literal],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1402:24: 1402:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/literal.rs:1402:13: 1404:14 (#1325),
                },
            ),
        ),
        ty: &'{erased} mut [hir::literal::Literal],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1402:24: 1402:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/literal.rs:1402:13: 1404:14 (#1325),
                },
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<hir::literal::Literal, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1402:24: 1402:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                regex-syntax/src/hir/literal.rs:1402:24: 1402:39 (#1326),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/literal.rs:1402:24: 1402:39 (#1326),
                    },
                ),
            ),
        ),
        ty: core::slice::IterMut<'{erased}, hir::literal::Literal>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1402:24: 1402:39 (#1326),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1400:5: 1406:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1402:24: 1402:39 (#1326),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} mut hir::literal::Literal>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1402:24: 1402:39 (#1326),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::IterMut<'{erased}, hir::literal::Literal>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1402:24: 1402:39 (#1326),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::IterMut<'{erased}, hir::literal::Literal>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1402:24: 1402:39 (#1326),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1402:13: 1404:14 (#1325),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1402:13: 1404:14 (#1325),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _12,
                                ),
                                regex-syntax/src/hir/literal.rs:1402:24: 1402:39 (#1326),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/literal.rs:1402:17: 1402:20 (#1327),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut hir::literal::Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1402:17: 1402:20 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1403:17: 1403:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hir::literal::Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1403:17: 1403:20 (#0),
            scope: scope[0],
        },
    },
]