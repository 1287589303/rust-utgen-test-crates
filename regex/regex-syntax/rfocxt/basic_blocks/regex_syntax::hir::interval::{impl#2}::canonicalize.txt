[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:344:12: 344:31 (#0),
                    scope: scope[0],
                },
                kind: _3 = hir::interval::IntervalSet::<I>::is_canonical(move _4) -> [return: bb1, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:344:12: 344:31 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            _0 = const (),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:368:6: 368:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb34,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            _2 = const (),
            StorageDead(_3),
            StorageDead(_2),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &mut ((*_1).0: std::vec::Vec<I>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:347:9: 347:27 (#0),
                    scope: scope[0],
                },
                kind: _8 = <std::vec::Vec<I> as core::ops::DerefMut>::deref_mut(move _9) -> [return: bb4, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = &mut (*_8),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:347:9: 347:27 (#0),
                    scope: scope[0],
                },
                kind: _6 = std::slice::<impl [I]>::sort(move _7) -> [return: bb5, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_8),
            StorageDead(_6),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &((*_1).0: std::vec::Vec<I>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:348:18: 348:40 (#0),
                    scope: scope[0],
                },
                kind: _11 = std::vec::Vec::<I>::is_empty(move _12) -> [return: bb6, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:348:18: 348:40 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _11) -> [0: bb8, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageLive(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:348:9: 348:41 (#428),
                    scope: scope[0],
                },
                kind: _13 = core::panicking::panic(const "assertion failed: !self.ranges.is_empty()") -> bb35,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            _10 = const (),
            StorageDead(_11),
            StorageDead(_10),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &((*_1).0: std::vec::Vec<I>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:353:25: 353:42 (#0),
                    scope: scope[0],
                },
                kind: _14 = std::vec::Vec::<I>::len(move _15) -> [return: bb9, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            FakeRead(ForLet(None), _14),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = _14,
            _18 = core::ops::Range::<usize> { start: const 0_usize, end: move _19 },
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:354:21: 354:33 (#1236),
                    scope: scope[1],
                },
                kind: _17 = <core::ops::Range<usize> as core::iter::IntoIterator>::into_iter(move _18) -> [return: bb10, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            PlaceMention(_17),
            StorageLive(_20),
            _20 = move _17,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:354:9: 366:10 (#1235),
                    scope: scope[2],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:354:9: 366:10 (#1235),
                    scope: scope[2],
                },
                kind: falseUnwind -> [real: bb12, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            _25 = &mut _20,
            _24 = &mut (*_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:354:21: 354:33 (#1236),
                    scope: scope[2],
                },
                kind: _23 = <core::ops::Range<usize> as core::iter::Iterator>::next(move _24) -> [return: bb13, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            PlaceMention(_23),
            _26 = discriminant(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:354:21: 354:33 (#1236),
                    scope: scope[2],
                },
                kind: switchInt(move _26) -> [0: bb15, 1: bb16, otherwise: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:354:21: 354:33 (#1236),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:354:9: 366:10 (#1235),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb17, imaginary: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_28),
            _28 = ((_23 as Some).0: usize),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            _32 = &((*_1).0: std::vec::Vec<I>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:357:16: 357:33 (#0),
                    scope: scope[3],
                },
                kind: _31 = std::vec::Vec::<I>::len(move _32) -> [return: bb18, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _16 = const (),
            StorageDead(_25),
            StorageDead(_23),
            StorageDead(_22),
            StorageDead(_20),
            StorageDead(_17),
            StorageDead(_16),
            StorageLive(_59),
            StorageLive(_60),
            _60 = &mut ((*_1).0: std::vec::Vec<I>),
            StorageLive(_61),
            StorageLive(_62),
            _62 = _14,
            _61 = core::ops::RangeTo::<usize> { end: move _62 },
            StorageDead(_62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:367:9: 367:39 (#0),
                    scope: scope[1],
                },
                kind: _59 = std::vec::Vec::<I>::drain::<core::ops::RangeTo<usize>>(move _60, move _61) -> [return: bb32, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            StorageLive(_33),
            _33 = _14,
            _30 = Gt(move _31, move _33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:357:16: 357:45 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _30) -> [0: bb28, otherwise: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_31),
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            StorageLive(_39),
            StorageLive(_40),
            _40 = &mut ((*_1).0: std::vec::Vec<I>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:358:36: 358:64 (#0),
                    scope: scope[3],
                },
                kind: _39 = <std::vec::Vec<I> as core::ops::DerefMut>::deref_mut(move _40) -> [return: bb20, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _38 = &mut (*_39),
            StorageDead(_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:358:36: 358:64 (#0),
                    scope: scope[3],
                },
                kind: _37 = core::slice::<impl [I]>::split_last_mut(move _38) -> [return: bb21, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:358:36: 358:73 (#0),
                    scope: scope[3],
                },
                kind: _36 = core::option::Option::<(&mut I, &mut [I])>::unwrap(move _37) -> [return: bb22, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            PlaceMention(_36),
            StorageLive(_34),
            _34 = move (_36.0: &mut I),
            StorageLive(_35),
            _35 = move (_36.1: &mut [I]),
            StorageDead(_39),
            StorageDead(_36),
            StorageLive(_41),
            StorageLive(_42),
            _42 = &(*_34),
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            _45 = _28,
            _46 = Len((*_35)),
            _47 = Lt(_45, _46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:359:50: 359:60 (#0),
                    scope: scope[5],
                },
                kind: assert(move _47, "index out of bounds: the length is {} but the index is {}", move _46, _45) -> [success: bb23, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _44 = &(*_35)[_45],
            _43 = &(*_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:359:38: 359:61 (#0),
                    scope: scope[5],
                },
                kind: _41 = <I as hir::interval::Interval>::union(move _42, move _43) -> [return: bb24, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            StorageDead(_42),
            PlaceMention(_41),
            _48 = discriminant(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:359:24: 359:35 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _48) -> [1: bb25, otherwise: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:359:24: 359:35 (#0),
                    scope: scope[5],
                },
                kind: falseEdge -> [real: bb26, imaginary: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_49),
            _49 = ((_41 as Some).0: I),
            StorageLive(_51),
            _51 = _49,
            (*_34) = move _51,
            StorageDead(_51),
            StorageDead(_49),
            StorageDead(_35),
            StorageDead(_34),
            StorageDead(_45),
            StorageDead(_44),
            StorageDead(_41),
            StorageDead(_30),
            StorageDead(_29),
            StorageDead(_28),
            StorageDead(_25),
            StorageDead(_23),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _29 = const (),
            StorageDead(_35),
            StorageDead(_34),
            StorageDead(_45),
            StorageDead(_44),
            StorageDead(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:357:13: 363:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_31),
            _29 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:357:13: 363:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_29),
            StorageLive(_52),
            StorageLive(_53),
            StorageLive(_54),
            _54 = &((*_1).0: std::vec::Vec<I>),
            StorageLive(_55),
            _55 = _28,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:364:36: 364:42 (#0),
                    scope: scope[3],
                },
                kind: _53 = <std::vec::Vec<I> as core::ops::Index<usize>>::index(move _54, move _55) -> [return: bb30, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _52 = (*_53),
            StorageDead(_55),
            StorageDead(_54),
            FakeRead(ForLet(None), _52),
            StorageDead(_53),
            StorageLive(_56),
            StorageLive(_57),
            _57 = &mut ((*_1).0: std::vec::Vec<I>),
            StorageLive(_58),
            _58 = _52,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:365:13: 365:36 (#0),
                    scope: scope[6],
                },
                kind: _56 = std::vec::Vec::<I>::push(move _57, move _58) -> [return: bb31, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
            StorageDead(_57),
            StorageDead(_56),
            _22 = const (),
            StorageDead(_52),
            StorageDead(_28),
            StorageDead(_25),
            StorageDead(_23),
            StorageDead(_22),
            _21 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:354:9: 366:10 (#1235),
                    scope: scope[2],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_61),
            StorageDead(_60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:367:39: 367:40 (#0),
                    scope: scope[1],
                },
                kind: drop(_59) -> [return: bb33, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
            _0 = const (),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:368:6: 368:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb34,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:368:6: 368:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:343:5: 368:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:343:31: 343:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut hir::interval::IntervalSet<I/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:343:21: 343:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:344:9: 346:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:344:12: 344:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::interval::IntervalSet<I/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:344:12: 344:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:344:32: 346:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:347:9: 347:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [I/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:347:9: 347:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [I/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:347:9: 347:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:347:9: 347:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:348:9: 348:41 (#428),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:348:18: 348:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:348:18: 348:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:348:9: 348:41 (#428),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:348:9: 348:41 (#428),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/interval.rs:353:25: 353:42 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/interval.rs:353:13: 353:22 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:353:13: 353:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:353:25: 353:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:354:9: 366:10 (#1235),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:354:21: 354:33 (#1236),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:354:21: 354:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:354:24: 354:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _17,
                                ),
                                regex-syntax/src/hir/interval.rs:354:21: 354:33 (#1236),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/interval.rs:354:21: 354:33 (#1236),
                    },
                ),
            ),
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:354:21: 354:33 (#1236),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:343:5: 368:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:354:21: 354:33 (#1236),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:354:21: 354:33 (#1236),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:354:21: 354:33 (#1236),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:354:21: 354:33 (#1236),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:354:9: 366:10 (#1235),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:354:9: 366:10 (#1235),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _23,
                                ),
                                regex-syntax/src/hir/interval.rs:354:21: 354:33 (#1236),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/interval.rs:354:13: 354:17 (#1237),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:354:13: 354:17 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:357:13: 363:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:357:16: 357:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:357:16: 357:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:357:16: 357:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:357:36: 357:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _36,
                                ),
                                regex-syntax/src/hir/interval.rs:358:36: 358:73 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/interval.rs:358:21: 358:33 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:358:22: 358:26 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _36,
                                ),
                                regex-syntax/src/hir/interval.rs:358:36: 358:73 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/interval.rs:358:21: 358:33 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [I/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:358:28: 358:32 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} mut I/#0, &'{erased} mut [I/#0]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:358:36: 358:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(&'{erased} mut I/#0, &'{erased} mut [I/#0])>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:358:36: 358:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [I/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:358:36: 358:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [I/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:358:36: 358:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:358:36: 358:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:359:17: 362:18 (#0),
                },
            ),
        ),
        ty: core::option::Option<I/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:359:38: 359:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:359:17: 362:18 (#0),
                },
            ),
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:359:38: 359:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:359:17: 362:18 (#0),
                },
            ),
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:359:49: 359:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:359:17: 362:18 (#0),
                },
            ),
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:359:49: 359:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:359:17: 362:18 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:359:55: 359:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:359:50: 359:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:359:50: 359:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:359:24: 359:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _41,
                                ),
                                regex-syntax/src/hir/interval.rs:359:38: 359:61 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/interval.rs:359:24: 359:35 (#0),
                    },
                ),
            ),
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:359:29: 359:34 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/interval.rs:359:17: 362:18 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:359:62: 362:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:360:29: 360:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/interval.rs:364:25: 364:42 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/interval.rs:364:17: 364:22 (#0),
                    },
                ),
            ),
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:364:17: 364:22 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:364:36: 364:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:364:25: 364:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:364:37: 364:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:365:13: 365:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:365:13: 365:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:365:30: 365:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::Drain<'{erased}, I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:367:9: 367:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<I/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:367:9: 367:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeTo<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:367:27: 367:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:367:29: 367:38 (#0),
            scope: scope[0],
        },
    },
]