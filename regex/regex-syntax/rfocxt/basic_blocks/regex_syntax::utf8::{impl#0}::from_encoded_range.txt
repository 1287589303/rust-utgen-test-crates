[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:114:20: 114:31 (#0),
                    scope: scope[0],
                },
                kind: _6 = core::slice::<impl [u8]>::len(move _7) -> [return: bb1, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            _5 = &_6,
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:114:33: 114:42 (#0),
                    scope: scope[0],
                },
                kind: _9 = core::slice::<impl [u8]>::len(move _10) -> [return: bb2, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            _8 = &_9,
            _4 = (move _5, move _8),
            StorageDead(_8),
            StorageDead(_5),
            PlaceMention(_4),
            StorageLive(_11),
            _11 = (_4.0: &usize),
            StorageLive(_12),
            _12 = (_4.1: &usize),
            StorageLive(_13),
            StorageLive(_14),
            _14 = (*_11),
            StorageLive(_15),
            _15 = (*_12),
            _13 = Eq(move _14, move _15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46 (#769),
                    scope: scope[1],
                },
                kind: switchInt(move _13) -> [0: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_14),
            _3 = const (),
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_6),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_25),
            StorageLive(_26),
            _26 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:115:15: 115:26 (#0),
                    scope: scope[0],
                },
                kind: _25 = core::slice::<impl [u8]>::len(move _26) -> [return: bb5, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_14),
            StorageLive(_17),
            _17 = core::panicking::AssertKind::Eq,
            FakeRead(ForLet(None), _17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = move _17,
            StorageLive(_20),
            StorageLive(_21),
            _21 = &(*_11),
            _20 = &(*_21),
            StorageLive(_22),
            StorageLive(_23),
            _23 = &(*_12),
            _22 = &(*_23),
            StorageLive(_24),
            _24 = core::option::Option::<core::fmt::Arguments<'_>>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114 (#769),
                    scope: scope[2],
                },
                kind: _18 = core::panicking::assert_failed::<usize, usize>(move _19, move _20, move _22, move _24) -> bb43,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            PlaceMention(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:115:9: 115:26 (#0),
                    scope: scope[0],
                },
                kind: switchInt(_25) -> [2: bb7, 3: bb8, 4: bb9, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_111),
            _111 = _25,
            StorageLive(_113),
            StorageLive(_114),
            StorageLive(_115),
            StorageLive(_116),
            StorageLive(_117),
            _117 = [const "internal error: entered unreachable code: invalid encoded length: "],
            _116 = &_117,
            _115 = &(*_116),
            StorageLive(_118),
            StorageLive(_119),
            StorageLive(_120),
            StorageLive(_121),
            StorageLive(_122),
            StorageLive(_123),
            _123 = &_111,
            _122 = &(*_123),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:131:56: 131:58 (#776),
                    scope: scope[3],
                },
                kind: _121 = core::fmt::rt::Argument::<'_>::new_display::<usize>(move _122) -> [return: bb40, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:116:13: 116:14 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:120:13: 120:14 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb17, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:125:13: 125:14 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb27, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            _30 = const 0_usize,
            _31 = Len((*_1)),
            _32 = Lt(_30, _31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:117:32: 117:40 (#0),
                    scope: scope[0],
                },
                kind: assert(move _32, "index out of bounds: the length is {} but the index is {}", move _31, _30) -> [success: bb11, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _29 = (*_1)[_30],
            StorageLive(_33),
            StorageLive(_34),
            _34 = const 0_usize,
            _35 = Len((*_2)),
            _36 = Lt(_34, _35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:117:42: 117:48 (#0),
                    scope: scope[0],
                },
                kind: assert(move _36, "index out of bounds: the length is {} but the index is {}", move _35, _34) -> [success: bb12, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _33 = (*_2)[_34],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:117:17: 117:49 (#0),
                    scope: scope[0],
                },
                kind: _28 = utf8::Utf8Range::new(move _29, move _33) -> [return: bb13, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_29),
            StorageLive(_37),
            StorageLive(_38),
            StorageLive(_39),
            _39 = const 1_usize,
            _40 = Len((*_1)),
            _41 = Lt(_39, _40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:118:32: 118:40 (#0),
                    scope: scope[0],
                },
                kind: assert(move _41, "index out of bounds: the length is {} but the index is {}", move _40, _39) -> [success: bb14, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _38 = (*_1)[_39],
            StorageLive(_42),
            StorageLive(_43),
            _43 = const 1_usize,
            _44 = Len((*_2)),
            _45 = Lt(_43, _44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:118:42: 118:48 (#0),
                    scope: scope[0],
                },
                kind: assert(move _45, "index out of bounds: the length is {} but the index is {}", move _44, _43) -> [success: bb15, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _42 = (*_2)[_43],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:118:17: 118:49 (#0),
                    scope: scope[0],
                },
                kind: _37 = utf8::Utf8Range::new(move _38, move _42) -> [return: bb16, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
            StorageDead(_38),
            _27 = [move _28, move _37],
            StorageDead(_37),
            StorageDead(_28),
            _0 = utf8::Utf8Sequence::Two(move _27),
            StorageDead(_27),
            StorageDead(_43),
            StorageDead(_39),
            StorageDead(_34),
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:119:14: 119:15 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb42,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_46),
            StorageLive(_47),
            StorageLive(_48),
            StorageLive(_49),
            _49 = const 0_usize,
            _50 = Len((*_1)),
            _51 = Lt(_49, _50),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:121:32: 121:40 (#0),
                    scope: scope[0],
                },
                kind: assert(move _51, "index out of bounds: the length is {} but the index is {}", move _50, _49) -> [success: bb18, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _48 = (*_1)[_49],
            StorageLive(_52),
            StorageLive(_53),
            _53 = const 0_usize,
            _54 = Len((*_2)),
            _55 = Lt(_53, _54),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:121:42: 121:48 (#0),
                    scope: scope[0],
                },
                kind: assert(move _55, "index out of bounds: the length is {} but the index is {}", move _54, _53) -> [success: bb19, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _52 = (*_2)[_53],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:121:17: 121:49 (#0),
                    scope: scope[0],
                },
                kind: _47 = utf8::Utf8Range::new(move _48, move _52) -> [return: bb20, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            StorageDead(_48),
            StorageLive(_56),
            StorageLive(_57),
            StorageLive(_58),
            _58 = const 1_usize,
            _59 = Len((*_1)),
            _60 = Lt(_58, _59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:122:32: 122:40 (#0),
                    scope: scope[0],
                },
                kind: assert(move _60, "index out of bounds: the length is {} but the index is {}", move _59, _58) -> [success: bb21, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _57 = (*_1)[_58],
            StorageLive(_61),
            StorageLive(_62),
            _62 = const 1_usize,
            _63 = Len((*_2)),
            _64 = Lt(_62, _63),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:122:42: 122:48 (#0),
                    scope: scope[0],
                },
                kind: assert(move _64, "index out of bounds: the length is {} but the index is {}", move _63, _62) -> [success: bb22, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _61 = (*_2)[_62],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:122:17: 122:49 (#0),
                    scope: scope[0],
                },
                kind: _56 = utf8::Utf8Range::new(move _57, move _61) -> [return: bb23, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_61),
            StorageDead(_57),
            StorageLive(_65),
            StorageLive(_66),
            StorageLive(_67),
            _67 = const 2_usize,
            _68 = Len((*_1)),
            _69 = Lt(_67, _68),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:123:32: 123:40 (#0),
                    scope: scope[0],
                },
                kind: assert(move _69, "index out of bounds: the length is {} but the index is {}", move _68, _67) -> [success: bb24, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _66 = (*_1)[_67],
            StorageLive(_70),
            StorageLive(_71),
            _71 = const 2_usize,
            _72 = Len((*_2)),
            _73 = Lt(_71, _72),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:123:42: 123:48 (#0),
                    scope: scope[0],
                },
                kind: assert(move _73, "index out of bounds: the length is {} but the index is {}", move _72, _71) -> [success: bb25, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _70 = (*_2)[_71],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:123:17: 123:49 (#0),
                    scope: scope[0],
                },
                kind: _65 = utf8::Utf8Range::new(move _66, move _70) -> [return: bb26, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_70),
            StorageDead(_66),
            _46 = [move _47, move _56, move _65],
            StorageDead(_65),
            StorageDead(_56),
            StorageDead(_47),
            _0 = utf8::Utf8Sequence::Three(move _46),
            StorageDead(_46),
            StorageDead(_71),
            StorageDead(_67),
            StorageDead(_62),
            StorageDead(_58),
            StorageDead(_53),
            StorageDead(_49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:124:14: 124:15 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb42,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_74),
            StorageLive(_75),
            StorageLive(_76),
            StorageLive(_77),
            _77 = const 0_usize,
            _78 = Len((*_1)),
            _79 = Lt(_77, _78),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:126:32: 126:40 (#0),
                    scope: scope[0],
                },
                kind: assert(move _79, "index out of bounds: the length is {} but the index is {}", move _78, _77) -> [success: bb28, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _76 = (*_1)[_77],
            StorageLive(_80),
            StorageLive(_81),
            _81 = const 0_usize,
            _82 = Len((*_2)),
            _83 = Lt(_81, _82),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:126:42: 126:48 (#0),
                    scope: scope[0],
                },
                kind: assert(move _83, "index out of bounds: the length is {} but the index is {}", move _82, _81) -> [success: bb29, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _80 = (*_2)[_81],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:126:17: 126:49 (#0),
                    scope: scope[0],
                },
                kind: _75 = utf8::Utf8Range::new(move _76, move _80) -> [return: bb30, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_80),
            StorageDead(_76),
            StorageLive(_84),
            StorageLive(_85),
            StorageLive(_86),
            _86 = const 1_usize,
            _87 = Len((*_1)),
            _88 = Lt(_86, _87),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:127:32: 127:40 (#0),
                    scope: scope[0],
                },
                kind: assert(move _88, "index out of bounds: the length is {} but the index is {}", move _87, _86) -> [success: bb31, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _85 = (*_1)[_86],
            StorageLive(_89),
            StorageLive(_90),
            _90 = const 1_usize,
            _91 = Len((*_2)),
            _92 = Lt(_90, _91),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:127:42: 127:48 (#0),
                    scope: scope[0],
                },
                kind: assert(move _92, "index out of bounds: the length is {} but the index is {}", move _91, _90) -> [success: bb32, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _89 = (*_2)[_90],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:127:17: 127:49 (#0),
                    scope: scope[0],
                },
                kind: _84 = utf8::Utf8Range::new(move _85, move _89) -> [return: bb33, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_89),
            StorageDead(_85),
            StorageLive(_93),
            StorageLive(_94),
            StorageLive(_95),
            _95 = const 2_usize,
            _96 = Len((*_1)),
            _97 = Lt(_95, _96),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:128:32: 128:40 (#0),
                    scope: scope[0],
                },
                kind: assert(move _97, "index out of bounds: the length is {} but the index is {}", move _96, _95) -> [success: bb34, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _94 = (*_1)[_95],
            StorageLive(_98),
            StorageLive(_99),
            _99 = const 2_usize,
            _100 = Len((*_2)),
            _101 = Lt(_99, _100),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:128:42: 128:48 (#0),
                    scope: scope[0],
                },
                kind: assert(move _101, "index out of bounds: the length is {} but the index is {}", move _100, _99) -> [success: bb35, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _98 = (*_2)[_99],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:128:17: 128:49 (#0),
                    scope: scope[0],
                },
                kind: _93 = utf8::Utf8Range::new(move _94, move _98) -> [return: bb36, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_98),
            StorageDead(_94),
            StorageLive(_102),
            StorageLive(_103),
            StorageLive(_104),
            _104 = const 3_usize,
            _105 = Len((*_1)),
            _106 = Lt(_104, _105),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:129:32: 129:40 (#0),
                    scope: scope[0],
                },
                kind: assert(move _106, "index out of bounds: the length is {} but the index is {}", move _105, _104) -> [success: bb37, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _103 = (*_1)[_104],
            StorageLive(_107),
            StorageLive(_108),
            _108 = const 3_usize,
            _109 = Len((*_2)),
            _110 = Lt(_108, _109),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:129:42: 129:48 (#0),
                    scope: scope[0],
                },
                kind: assert(move _110, "index out of bounds: the length is {} but the index is {}", move _109, _108) -> [success: bb38, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _107 = (*_2)[_108],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:129:17: 129:49 (#0),
                    scope: scope[0],
                },
                kind: _102 = utf8::Utf8Range::new(move _103, move _107) -> [return: bb39, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_107),
            StorageDead(_103),
            _74 = [move _75, move _84, move _93, move _102],
            StorageDead(_102),
            StorageDead(_93),
            StorageDead(_84),
            StorageDead(_75),
            _0 = utf8::Utf8Sequence::Four(move _74),
            StorageDead(_74),
            StorageDead(_108),
            StorageDead(_104),
            StorageDead(_99),
            StorageDead(_95),
            StorageDead(_90),
            StorageDead(_86),
            StorageDead(_81),
            StorageDead(_77),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:130:14: 130:15 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb42,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_122),
            _120 = [move _121],
            StorageDead(_121),
            _119 = &_120,
            _118 = &(*_119),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38: 108:72 (#776),
                    scope: scope[3],
                },
                kind: _114 = core::fmt::Arguments::<'_>::new_v1::<1, 1>(move _115, move _118) -> [return: bb41, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_118),
            StorageDead(_115),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9: 108:73 (#775),
                    scope: scope[3],
                },
                kind: _113 = core::panicking::panic_fmt(move _114) -> bb43,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:133:6: 133:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:113:5: 133:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: utf8::Utf8Sequence,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:113:56: 113:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/utf8.rs:113:34: 113:39 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/utf8.rs:113:27: 113:32 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/utf8.rs:113:27: 113:32 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:113:27: 113:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/utf8.rs:113:46: 113:51 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/utf8.rs:113:41: 113:44 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/utf8.rs:113:41: 113:44 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:113:41: 113:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:9: 48:10 (#769),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} usize, &'{erased} usize),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32 (#769),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:16: 38:22 (#769),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:114:20: 114:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:114:20: 114:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31 (#769),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:114:33: 114:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:114:33: 114:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32 (#769),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:13: 39:34 (#769),
                    },
                ),
            ),
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14: 39:22 (#769),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32 (#769),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:13: 39:34 (#769),
                    },
                ),
            ),
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24: 39:33 (#769),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#769),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46 (#769),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#769),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:22: 40:31 (#769),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#769),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:35: 40:45 (#769),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#769),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:47: 46:18 (#769),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:32: 41:65 (#769),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29 (#769),
                    },
                ),
            ),
        ),
        ty: core::panicking::AssertKind,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29 (#769),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114 (#769),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::panicking::AssertKind,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:54: 45:58 (#769),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:60: 45:70 (#769),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:60: 45:70 (#769),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:72: 45:83 (#769),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:72: 45:83 (#769),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::fmt::Arguments<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:85: 45:113 (#769),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:115:15: 115:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:115:15: 115:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: [utf8::Utf8Range; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:116:36: 119:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: utf8::Utf8Range,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:117:17: 117:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:117:32: 117:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:117:38: 117:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:117:32: 117:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:117:32: 117:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:117:42: 117:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:117:46: 117:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:117:42: 117:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:117:42: 117:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: utf8::Utf8Range,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:118:17: 118:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:118:32: 118:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:118:38: 118:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:118:32: 118:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:118:32: 118:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:118:42: 118:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:118:46: 118:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:118:42: 118:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:118:42: 118:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: [utf8::Utf8Range; 3_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:120:38: 124:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: utf8::Utf8Range,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:121:17: 121:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:121:32: 121:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:121:38: 121:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:121:32: 121:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:121:32: 121:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:121:42: 121:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:121:46: 121:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:121:42: 121:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:121:42: 121:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: utf8::Utf8Range,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:122:17: 122:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:122:32: 122:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:122:38: 122:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:122:32: 122:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:122:32: 122:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:122:42: 122:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:122:46: 122:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:122:42: 122:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:122:42: 122:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: utf8::Utf8Range,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:123:17: 123:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:123:32: 123:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:123:38: 123:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:123:32: 123:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:123:32: 123:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:123:42: 123:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:123:46: 123:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:123:42: 123:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:123:42: 123:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: [utf8::Utf8Range; 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:125:37: 130:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: utf8::Utf8Range,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:126:17: 126:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:126:32: 126:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:126:38: 126:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:126:32: 126:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:126:32: 126:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:126:42: 126:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:126:46: 126:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:126:42: 126:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:126:42: 126:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: utf8::Utf8Range,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:127:17: 127:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:127:32: 127:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:127:38: 127:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:127:32: 127:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:127:32: 127:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:127:42: 127:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:127:46: 127:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:127:42: 127:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:127:42: 127:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: utf8::Utf8Range,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:128:17: 128:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:128:32: 128:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:128:38: 128:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:128:32: 128:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:128:32: 128:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:128:42: 128:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:128:46: 128:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:128:42: 128:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:128:42: 128:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: utf8::Utf8Range,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:129:17: 129:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:129:32: 129:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:129:38: 129:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:129:32: 129:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:129:32: 129:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:129:42: 129:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:129:46: 129:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:129:42: 129:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:129:42: 129:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _25,
                                ),
                                regex-syntax/src/utf8.rs:115:15: 115:26 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/utf8.rs:131:13: 131:14 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:131:13: 131:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/utf8.rs:115:9: 132:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:105:21: 109:6 (#775),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9: 108:73 (#775),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::fmt::Arguments<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38: 108:72 (#776),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:140:24: 140:70 (#772),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:140:24: 140:70 (#772),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [&'{erased} str; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:140:24: 140:70 (#772),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::fmt::rt::Argument<'{erased}>; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38: 108:72 (#776),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::fmt::rt::Argument<'{erased}>; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38: 108:72 (#776),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [core::fmt::rt::Argument<'{erased}>; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38: 108:72 (#776),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::fmt::rt::Argument<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:131:56: 131:58 (#776),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:131:61: 131:62 (#776),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:131:61: 131:62 (#776),
            scope: scope[0],
        },
    },
]