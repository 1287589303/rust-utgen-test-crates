[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:91:16: 91:26 (#0),
                    scope: scope[0],
                },
                kind: _4 = hir::Hir::kind(move _5) -> [return: bb1, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            PlaceMention((*_4)),
            _7 = discriminant((*_4)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:91:9: 91:26 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _7) -> [0: bb3, 1: bb5, 2: bb6, 3: bb9, 4: bb4, 5: bb10, 6: bb11, 7: bb11, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), (*_4)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:91:15: 91:26 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:92:13: 92:27 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb12, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:101:13: 101:35 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb20, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:102:13: 102:54 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb21, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = discriminant((((*_4) as Class).0: hir::Class)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:91:9: 91:26 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [0: bb7, 1: bb8, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:134:13: 134:57 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb82, imaginary: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:155:13: 155:55 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb171, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:174:13: 174:36 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb258, imaginary: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:230:13: 230:60 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb422, imaginary: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_579),
            StorageLive(_580),
            StorageLive(_581),
            StorageLive(_582),
            _582 = &mut ((*_1).0: W),
            StorageLive(_583),
            StorageLive(_584),
            _584 = const "(?:",
            _583 = &(*_584),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:250:17: 250:43 (#0),
                    scope: scope[0],
                },
                kind: _581 = <W as core::fmt::Write>::write_str(move _582, move _583) -> [return: bb443, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &mut ((*_1).0: W),
            StorageLive(_12),
            StorageLive(_13),
            _13 = const "(?:)",
            _12 = &(*_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:98:17: 98:44 (#0),
                    scope: scope[0],
                },
                kind: _10 = <W as core::fmt::Write>::write_str(move _11, move _12) -> [return: bb13, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:98:17: 98:45 (#1392),
                    scope: scope[0],
                },
                kind: _9 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _10) -> [return: bb14, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            PlaceMention(_9),
            _14 = discriminant(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:98:17: 98:45 (#1392),
                    scope: scope[0],
                },
                kind: switchInt(move _14) -> [0: bb17, 1: bb16, otherwise: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:98:17: 98:45 (#1392),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:98:44: 98:45 (#1393),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb18, imaginary: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_18),
            _18 = ((_9 as Continue).0: ()),
            _8 = _18,
            StorageDead(_18),
            StorageDead(_13),
            StorageDead(_9),
            StorageDead(_8),
            _3 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:92:31: 99:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb450,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_15),
            _15 = ((_9 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_17),
            _17 = _15,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:98:17: 98:45 (#1392),
                    scope: scope[2],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _17) -> [return: bb19, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb461,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:101:39: 101:41 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb450,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_19),
            _19 = &((((*_4) as Literal).0: hir::Literal).0: std::boxed::Box<[u8]>),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &(*(*_19)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:113:30: 113:57 (#0),
                    scope: scope[5],
                },
                kind: _20 = core::str::from_utf8(move _21) -> [return: bb22, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            FakeRead(ForLet(None), _20),
            StorageLive(_22),
            StorageLive(_23),
            _23 = _20,
            StorageLive(_24),
            StorageLive(_25),
            _25 = &(*(*_19)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:114:41: 114:52 (#0),
                    scope: scope[6],
                },
                kind: _24 = core::slice::<impl [u8]>::len(move _25) -> [return: bb23, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageLive(_26),
            _26 = {closure@regex-syntax/src/hir/print.rs:114:54: 114:57},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:114:27: 114:76 (#0),
                    scope: scope[6],
                },
                kind: _22 = core::result::Result::<&str, core::str::Utf8Error>::map_or::<usize, {closure@regex-syntax/src/hir/print.rs:114:54: 114:57}>(move _23, move _24, move _26) -> [return: bb24, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_24),
            StorageDead(_23),
            FakeRead(ForLet(None), _22),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            _29 = _22,
            _28 = Gt(move _29, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:115:20: 115:27 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _28) -> [0: bb33, otherwise: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            _33 = &mut ((*_1).0: W),
            StorageLive(_34),
            StorageLive(_35),
            _35 = const "(?:",
            _34 = &(*_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:116:21: 116:47 (#0),
                    scope: scope[7],
                },
                kind: _32 = <W as core::fmt::Write>::write_str(move _33, move _34) -> [return: bb26, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:116:21: 116:48 (#1395),
                    scope: scope[7],
                },
                kind: _31 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _32) -> [return: bb27, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            PlaceMention(_31),
            _36 = discriminant(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:116:21: 116:48 (#1395),
                    scope: scope[7],
                },
                kind: switchInt(move _36) -> [0: bb30, 1: bb29, otherwise: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:116:21: 116:48 (#1395),
                    scope: scope[7],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:116:47: 116:48 (#1396),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb31, imaginary: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_40),
            _40 = ((_31 as Continue).0: ()),
            _30 = _40,
            StorageDead(_40),
            StorageDead(_35),
            StorageDead(_31),
            StorageDead(_30),
            _27 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:115:17: 117:18 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb34,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_37),
            _37 = ((_31 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_39),
            _39 = _37,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:116:21: 116:48 (#1395),
                    scope: scope[9],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _39) -> [return: bb32, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            StorageDead(_37),
            StorageDead(_35),
            StorageDead(_31),
            StorageDead(_30),
            StorageDead(_28),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb460,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            _27 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:115:17: 117:18 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb34,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_27),
            StorageLive(_41),
            PlaceMention(_20),
            _42 = discriminant(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:118:17: 118:29 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _42) -> [0: bb36, 1: bb37, otherwise: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:118:23: 118:29 (#0),
                    scope: scope[7],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:119:21: 119:31 (#0),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb38, imaginary: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_66),
            StorageLive(_67),
            StorageLive(_68),
            _68 = &(*(*_19)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:125:35: 125:47 (#0),
                    scope: scope[7],
                },
                kind: _67 = core::slice::<impl [u8]>::iter(move _68) -> [return: bb55, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_43),
            _43 = ((_20 as Ok).0: &str),
            StorageLive(_44),
            StorageLive(_45),
            StorageLive(_46),
            _46 = &(*_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:120:34: 120:48 (#0),
                    scope: scope[12],
                },
                kind: _45 = core::str::<impl str>::chars(move _46) -> [return: bb39, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:120:34: 120:48 (#1398),
                    scope: scope[12],
                },
                kind: _44 = <core::str::Chars<'_> as core::iter::IntoIterator>::into_iter(move _45) -> [return: bb40, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            PlaceMention(_44),
            StorageLive(_47),
            _47 = move _44,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:120:25: 122:26 (#1397),
                    scope: scope[13],
                },
                kind: goto -> bb41,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:120:25: 122:26 (#1397),
                    scope: scope[13],
                },
                kind: falseUnwind -> [real: bb42, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_49),
            StorageLive(_50),
            StorageLive(_51),
            StorageLive(_52),
            _52 = &mut _47,
            _51 = &mut (*_52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:120:34: 120:48 (#1398),
                    scope: scope[13],
                },
                kind: _50 = <core::str::Chars<'_> as core::iter::Iterator>::next(move _51) -> [return: bb43, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
            PlaceMention(_50),
            _53 = discriminant(_50),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:120:34: 120:48 (#1398),
                    scope: scope[13],
                },
                kind: switchInt(move _53) -> [0: bb45, 1: bb46, otherwise: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _50),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:120:34: 120:48 (#1398),
                    scope: scope[13],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:120:25: 122:26 (#1397),
                    scope: scope[13],
                },
                kind: falseEdge -> [real: bb47, imaginary: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_55),
            _55 = ((_50 as Some).0: char),
            StorageLive(_56),
            StorageLive(_57),
            StorageLive(_58),
            StorageLive(_59),
            _59 = &mut (*_1),
            StorageLive(_60),
            _60 = _55,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:121:29: 121:55 (#0),
                    scope: scope[14],
                },
                kind: _58 = hir::print::Writer::<W>::write_literal_char(move _59, move _60) -> [return: bb48, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _41 = const (),
            StorageDead(_52),
            StorageDead(_50),
            StorageDead(_49),
            StorageDead(_47),
            StorageDead(_44),
            StorageDead(_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:123:21: 123:22 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb71,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
            StorageDead(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:121:29: 121:56 (#1400),
                    scope: scope[14],
                },
                kind: _57 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _58) -> [return: bb49, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
            PlaceMention(_57),
            _61 = discriminant(_57),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:121:29: 121:56 (#1400),
                    scope: scope[14],
                },
                kind: switchInt(move _61) -> [0: bb52, 1: bb51, otherwise: bb50],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _57),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:121:29: 121:56 (#1400),
                    scope: scope[14],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:121:55: 121:56 (#1401),
                    scope: scope[14],
                },
                kind: falseEdge -> [real: bb53, imaginary: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_65),
            _65 = ((_57 as Continue).0: ()),
            _56 = _65,
            StorageDead(_65),
            StorageDead(_57),
            StorageDead(_56),
            _49 = const (),
            StorageDead(_55),
            StorageDead(_52),
            StorageDead(_50),
            StorageDead(_49),
            _48 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:120:25: 122:26 (#1397),
                    scope: scope[13],
                },
                kind: goto -> bb41,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_62),
            _62 = ((_57 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_64),
            _64 = _62,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:121:29: 121:56 (#1400),
                    scope: scope[16],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _64) -> [return: bb54, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
            StorageDead(_62),
            StorageDead(_57),
            StorageDead(_56),
            StorageDead(_55),
            StorageDead(_52),
            StorageDead(_50),
            StorageDead(_49),
            StorageDead(_47),
            StorageDead(_44),
            StorageDead(_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb459,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_68),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:125:35: 125:47 (#1403),
                    scope: scope[7],
                },
                kind: _66 = <core::slice::Iter<'_, u8> as core::iter::IntoIterator>::into_iter(move _67) -> [return: bb56, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_67),
            PlaceMention(_66),
            StorageLive(_69),
            _69 = move _66,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:125:25: 127:26 (#1402),
                    scope: scope[19],
                },
                kind: goto -> bb57,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:125:25: 127:26 (#1402),
                    scope: scope[19],
                },
                kind: falseUnwind -> [real: bb58, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_70),
            StorageLive(_71),
            StorageLive(_72),
            StorageLive(_73),
            _73 = &mut _69,
            _72 = &mut (*_73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:125:35: 125:47 (#1403),
                    scope: scope[19],
                },
                kind: _71 = <core::slice::Iter<'_, u8> as core::iter::Iterator>::next(move _72) -> [return: bb59, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_72),
            PlaceMention(_71),
            _74 = discriminant(_71),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:125:35: 125:47 (#1403),
                    scope: scope[19],
                },
                kind: switchInt(move _74) -> [0: bb61, 1: bb62, otherwise: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _71),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:125:35: 125:47 (#1403),
                    scope: scope[19],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:125:25: 127:26 (#1402),
                    scope: scope[19],
                },
                kind: falseEdge -> [real: bb63, imaginary: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_76),
            _76 = (*((_71 as Some).0: &u8)),
            StorageLive(_77),
            StorageLive(_78),
            StorageLive(_79),
            StorageLive(_80),
            _80 = &mut (*_1),
            StorageLive(_81),
            _81 = _76,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:126:29: 126:55 (#0),
                    scope: scope[20],
                },
                kind: _79 = hir::print::Writer::<W>::write_literal_byte(move _80, move _81) -> [return: bb64, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _41 = const (),
            StorageDead(_73),
            StorageDead(_71),
            StorageDead(_70),
            StorageDead(_69),
            StorageDead(_66),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:127:25: 127:26 (#1402),
                    scope: scope[7],
                },
                kind: goto -> bb71,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_81),
            StorageDead(_80),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:126:29: 126:56 (#1405),
                    scope: scope[20],
                },
                kind: _78 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _79) -> [return: bb65, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_79),
            PlaceMention(_78),
            _82 = discriminant(_78),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:126:29: 126:56 (#1405),
                    scope: scope[20],
                },
                kind: switchInt(move _82) -> [0: bb68, 1: bb67, otherwise: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _78),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:126:29: 126:56 (#1405),
                    scope: scope[20],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:126:55: 126:56 (#1406),
                    scope: scope[20],
                },
                kind: falseEdge -> [real: bb69, imaginary: bb68],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_86),
            _86 = ((_78 as Continue).0: ()),
            _77 = _86,
            StorageDead(_86),
            StorageDead(_78),
            StorageDead(_77),
            _70 = const (),
            StorageDead(_76),
            StorageDead(_73),
            StorageDead(_71),
            StorageDead(_70),
            _48 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:125:25: 127:26 (#1402),
                    scope: scope[19],
                },
                kind: goto -> bb57,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_83),
            _83 = ((_78 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_85),
            _85 = _83,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:126:29: 126:56 (#1405),
                    scope: scope[22],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _85) -> [return: bb70, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_85),
            StorageDead(_83),
            StorageDead(_78),
            StorageDead(_77),
            StorageDead(_76),
            StorageDead(_73),
            StorageDead(_71),
            StorageDead(_70),
            StorageDead(_69),
            StorageDead(_66),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb459,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            StorageLive(_87),
            StorageLive(_88),
            _88 = _22,
            _87 = Gt(move _88, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:130:20: 130:27 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _87) -> [0: bb80, otherwise: bb72],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_88),
            StorageLive(_89),
            StorageLive(_90),
            StorageLive(_91),
            StorageLive(_92),
            _92 = &mut ((*_1).0: W),
            StorageLive(_93),
            StorageLive(_94),
            _94 = const ")",
            _93 = &(*_94),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:131:21: 131:45 (#0),
                    scope: scope[7],
                },
                kind: _91 = <W as core::fmt::Write>::write_str(move _92, move _93) -> [return: bb73, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_93),
            StorageDead(_92),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:131:21: 131:46 (#1408),
                    scope: scope[7],
                },
                kind: _90 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _91) -> [return: bb74, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_91),
            PlaceMention(_90),
            _95 = discriminant(_90),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:131:21: 131:46 (#1408),
                    scope: scope[7],
                },
                kind: switchInt(move _95) -> [0: bb77, 1: bb76, otherwise: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _90),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:131:21: 131:46 (#1408),
                    scope: scope[7],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:131:45: 131:46 (#1409),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb78, imaginary: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_99),
            _99 = ((_90 as Continue).0: ()),
            _89 = _99,
            StorageDead(_99),
            StorageDead(_94),
            StorageDead(_90),
            StorageDead(_89),
            _3 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:130:17: 132:18 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb81,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_96),
            _96 = ((_90 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_98),
            _98 = _96,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:131:21: 131:46 (#1408),
                    scope: scope[26],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _98) -> [return: bb79, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_98),
            StorageDead(_96),
            StorageDead(_94),
            StorageDead(_90),
            StorageDead(_89),
            StorageDead(_87),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb460,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_88),
            _3 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:130:17: 132:18 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb81,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_87),
            StorageDead(_22),
            StorageDead(_20),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:133:13: 133:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb450,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_100),
            _100 = &(((((*_4) as Class).0: hir::Class) as Unicode).0: hir::ClassUnicode),
            StorageLive(_101),
            StorageLive(_102),
            StorageLive(_103),
            StorageLive(_104),
            StorageLive(_105),
            _105 = &(*_100),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:135:20: 135:32 (#0),
                    scope: scope[29],
                },
                kind: _104 = hir::ClassUnicode::ranges(move _105) -> [return: bb83, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _103 = &(*_104),
            StorageDead(_105),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:135:20: 135:43 (#0),
                    scope: scope[29],
                },
                kind: _102 = core::slice::<impl [hir::ClassUnicodeRange]>::is_empty(move _103) -> [return: bb84, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:135:20: 135:43 (#0),
                    scope: scope[29],
                },
                kind: switchInt(move _102) -> [0: bb87, otherwise: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_104),
            StorageDead(_103),
            StorageLive(_107),
            _107 = &mut ((*_1).0: W),
            StorageLive(_108),
            StorageLive(_109),
            _109 = const "[a&&b]",
            _108 = &(*_109),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:136:28: 136:56 (#0),
                    scope: scope[29],
                },
                kind: _0 = <W as core::fmt::Write>::write_str(move _107, move _108) -> [return: bb86, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_108),
            StorageDead(_107),
            StorageDead(_109),
            StorageDead(_102),
            StorageDead(_101),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[29],
                },
                kind: goto -> bb458,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_104),
            StorageDead(_103),
            _101 = const (),
            StorageDead(_102),
            StorageDead(_101),
            StorageLive(_110),
            StorageLive(_111),
            StorageLive(_112),
            StorageLive(_113),
            _113 = &mut ((*_1).0: W),
            StorageLive(_114),
            StorageLive(_115),
            _115 = const "[",
            _114 = &(*_115),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:138:17: 138:40 (#0),
                    scope: scope[29],
                },
                kind: _112 = <W as core::fmt::Write>::write_str(move _113, move _114) -> [return: bb88, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_114),
            StorageDead(_113),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:138:17: 138:41 (#1411),
                    scope: scope[29],
                },
                kind: _111 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _112) -> [return: bb89, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_112),
            PlaceMention(_111),
            _116 = discriminant(_111),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:138:17: 138:41 (#1411),
                    scope: scope[29],
                },
                kind: switchInt(move _116) -> [0: bb92, 1: bb91, otherwise: bb90],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _111),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:138:17: 138:41 (#1411),
                    scope: scope[29],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:138:40: 138:41 (#1412),
                    scope: scope[29],
                },
                kind: falseEdge -> [real: bb93, imaginary: bb92],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_120),
            _120 = ((_111 as Continue).0: ()),
            _110 = _120,
            StorageDead(_120),
            StorageDead(_115),
            StorageDead(_111),
            StorageDead(_110),
            StorageLive(_121),
            StorageLive(_122),
            StorageLive(_123),
            StorageLive(_124),
            _124 = &(*_100),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:139:30: 139:40 (#0),
                    scope: scope[29],
                },
                kind: _123 = hir::ClassUnicode::iter(move _124) -> [return: bb95, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_117),
            _117 = ((_111 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_119),
            _119 = _117,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:138:17: 138:41 (#1411),
                    scope: scope[31],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _119) -> [return: bb94, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_119),
            StorageDead(_117),
            StorageDead(_115),
            StorageDead(_111),
            StorageDead(_110),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[29],
                },
                kind: goto -> bb458,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_124),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:139:30: 139:40 (#1414),
                    scope: scope[29],
                },
                kind: _122 = <hir::ClassUnicodeIter<'_> as core::iter::IntoIterator>::into_iter(move _123) -> [return: bb96, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_123),
            PlaceMention(_122),
            StorageLive(_125),
            _125 = move _122,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:139:17: 152:18 (#1413),
                    scope: scope[34],
                },
                kind: goto -> bb97,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:139:17: 152:18 (#1413),
                    scope: scope[34],
                },
                kind: falseUnwind -> [real: bb98, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_126),
            StorageLive(_127),
            StorageLive(_128),
            StorageLive(_129),
            _129 = &mut _125,
            _128 = &mut (*_129),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:139:30: 139:40 (#1414),
                    scope: scope[34],
                },
                kind: _127 = <hir::ClassUnicodeIter<'_> as core::iter::Iterator>::next(move _128) -> [return: bb99, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_128),
            PlaceMention(_127),
            _130 = discriminant(_127),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:139:30: 139:40 (#1414),
                    scope: scope[34],
                },
                kind: switchInt(move _130) -> [0: bb101, 1: bb102, otherwise: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _127),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:139:30: 139:40 (#1414),
                    scope: scope[34],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:139:17: 152:18 (#1413),
                    scope: scope[34],
                },
                kind: falseEdge -> [real: bb103, imaginary: bb102],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_132),
            _132 = ((_127 as Some).0: &hir::ClassUnicodeRange),
            StorageLive(_133),
            StorageLive(_134),
            StorageLive(_135),
            _135 = &(*_132),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:140:24: 140:37 (#0),
                    scope: scope[35],
                },
                kind: _134 = hir::ClassUnicodeRange::start(move _135) -> [return: bb104, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _121 = const (),
            StorageDead(_129),
            StorageDead(_127),
            StorageDead(_126),
            StorageDead(_125),
            StorageDead(_122),
            StorageDead(_121),
            StorageLive(_213),
            StorageLive(_214),
            StorageLive(_215),
            StorageLive(_216),
            _216 = &mut ((*_1).0: W),
            StorageLive(_217),
            StorageLive(_218),
            _218 = const "]",
            _217 = &(*_218),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:153:17: 153:40 (#0),
                    scope: scope[29],
                },
                kind: _215 = <W as core::fmt::Write>::write_str(move _216, move _217) -> [return: bb164, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_135),
            StorageLive(_136),
            StorageLive(_137),
            _137 = &(*_132),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:140:41: 140:52 (#0),
                    scope: scope[35],
                },
                kind: _136 = hir::ClassUnicodeRange::end(move _137) -> [return: bb105, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_137),
            _133 = Eq(move _134, move _136),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:140:24: 140:52 (#0),
                    scope: scope[35],
                },
                kind: switchInt(move _133) -> [0: bb115, otherwise: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_136),
            StorageDead(_134),
            StorageLive(_138),
            StorageLive(_139),
            StorageLive(_140),
            StorageLive(_141),
            _141 = &mut (*_1),
            StorageLive(_142),
            StorageLive(_143),
            _143 = &(*_132),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:141:49: 141:62 (#0),
                    scope: scope[35],
                },
                kind: _142 = hir::ClassUnicodeRange::start(move _143) -> [return: bb107, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_143),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:141:25: 141:63 (#0),
                    scope: scope[35],
                },
                kind: _140 = hir::print::Writer::<W>::write_literal_char(move _141, move _142) -> [return: bb108, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_142),
            StorageDead(_141),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:141:25: 141:64 (#1417),
                    scope: scope[35],
                },
                kind: _139 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _140) -> [return: bb109, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_140),
            PlaceMention(_139),
            _144 = discriminant(_139),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:141:25: 141:64 (#1417),
                    scope: scope[35],
                },
                kind: switchInt(move _144) -> [0: bb112, 1: bb111, otherwise: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _139),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:141:25: 141:64 (#1417),
                    scope: scope[35],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:141:63: 141:64 (#1418),
                    scope: scope[35],
                },
                kind: falseEdge -> [real: bb113, imaginary: bb112],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_148),
            _148 = ((_139 as Continue).0: ()),
            _138 = _148,
            StorageDead(_148),
            StorageDead(_139),
            StorageDead(_138),
            _126 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:140:21: 151:22 (#0),
                    scope: scope[35],
                },
                kind: goto -> bb163,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_145),
            _145 = ((_139 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_147),
            _147 = _145,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:141:25: 141:64 (#1417),
                    scope: scope[37],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _147) -> [return: bb114, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_147),
            StorageDead(_145),
            StorageDead(_139),
            StorageDead(_138),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[35],
                },
                kind: goto -> bb457,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_136),
            StorageDead(_134),
            StorageLive(_149),
            StorageLive(_150),
            StorageLive(_151),
            StorageLive(_152),
            StorageLive(_153),
            _153 = &(*_132),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:142:41: 142:54 (#0),
                    scope: scope[35],
                },
                kind: _152 = hir::ClassUnicodeRange::start(move _153) -> [return: bb116, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_153),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:142:31: 142:55 (#0),
                    scope: scope[35],
                },
                kind: _151 = <u32 as core::convert::From<char>>::from(move _152) -> [return: bb117, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_152),
            _154 = AddWithOverflow(_151, const 1_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:142:31: 142:59 (#0),
                    scope: scope[35],
                },
                kind: assert(!move (_154.1: bool), "attempt to compute `{} + {}`, which would overflow", move _151, const 1_u32) -> [success: bb118, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _150 = move (_154.0: u32),
            StorageDead(_151),
            StorageLive(_155),
            StorageLive(_156),
            StorageLive(_157),
            _157 = &(*_132),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:143:38: 143:49 (#0),
                    scope: scope[35],
                },
                kind: _156 = hir::ClassUnicodeRange::end(move _157) -> [return: bb119, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_157),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:143:28: 143:50 (#0),
                    scope: scope[35],
                },
                kind: _155 = <u32 as core::convert::From<char>>::from(move _156) -> [return: bb120, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_156),
            _149 = Eq(move _150, move _155),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:142:31: 143:50 (#0),
                    scope: scope[35],
                },
                kind: switchInt(move _149) -> [0: bb138, otherwise: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_155),
            StorageDead(_150),
            StorageLive(_158),
            StorageLive(_159),
            StorageLive(_160),
            StorageLive(_161),
            _161 = &mut (*_1),
            StorageLive(_162),
            StorageLive(_163),
            _163 = &(*_132),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:145:49: 145:62 (#0),
                    scope: scope[35],
                },
                kind: _162 = hir::ClassUnicodeRange::start(move _163) -> [return: bb122, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_163),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:145:25: 145:63 (#0),
                    scope: scope[35],
                },
                kind: _160 = hir::print::Writer::<W>::write_literal_char(move _161, move _162) -> [return: bb123, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_162),
            StorageDead(_161),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:145:25: 145:64 (#1420),
                    scope: scope[35],
                },
                kind: _159 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _160) -> [return: bb124, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_160),
            PlaceMention(_159),
            _164 = discriminant(_159),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:145:25: 145:64 (#1420),
                    scope: scope[35],
                },
                kind: switchInt(move _164) -> [0: bb127, 1: bb126, otherwise: bb125],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _159),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:145:25: 145:64 (#1420),
                    scope: scope[35],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:145:63: 145:64 (#1421),
                    scope: scope[35],
                },
                kind: falseEdge -> [real: bb128, imaginary: bb127],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_168),
            _168 = ((_159 as Continue).0: ()),
            _158 = _168,
            StorageDead(_168),
            StorageDead(_159),
            StorageDead(_158),
            StorageLive(_169),
            StorageLive(_170),
            StorageLive(_171),
            StorageLive(_172),
            _172 = &mut (*_1),
            StorageLive(_173),
            StorageLive(_174),
            _174 = &(*_132),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:146:49: 146:60 (#0),
                    scope: scope[35],
                },
                kind: _173 = hir::ClassUnicodeRange::end(move _174) -> [return: bb130, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_165),
            _165 = ((_159 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_167),
            _167 = _165,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:145:25: 145:64 (#1420),
                    scope: scope[41],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _167) -> [return: bb129, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_167),
            StorageDead(_165),
            StorageDead(_159),
            StorageDead(_158),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[35],
                },
                kind: goto -> bb456,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_174),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:146:25: 146:61 (#0),
                    scope: scope[35],
                },
                kind: _171 = hir::print::Writer::<W>::write_literal_char(move _172, move _173) -> [return: bb131, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_173),
            StorageDead(_172),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:146:25: 146:62 (#1422),
                    scope: scope[35],
                },
                kind: _170 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _171) -> [return: bb132, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_171),
            PlaceMention(_170),
            _175 = discriminant(_170),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:146:25: 146:62 (#1422),
                    scope: scope[35],
                },
                kind: switchInt(move _175) -> [0: bb135, 1: bb134, otherwise: bb133],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _170),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:146:25: 146:62 (#1422),
                    scope: scope[35],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:146:61: 146:62 (#1423),
                    scope: scope[35],
                },
                kind: falseEdge -> [real: bb136, imaginary: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_179),
            _179 = ((_170 as Continue).0: ()),
            _169 = _179,
            StorageDead(_179),
            StorageDead(_170),
            StorageDead(_169),
            _126 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:142:28: 151:22 (#0),
                    scope: scope[35],
                },
                kind: goto -> bb162,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_176),
            _176 = ((_170 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_178),
            _178 = _176,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:146:25: 146:62 (#1422),
                    scope: scope[45],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _178) -> [return: bb137, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_178),
            StorageDead(_176),
            StorageDead(_170),
            StorageDead(_169),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[35],
                },
                kind: goto -> bb456,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_155),
            StorageDead(_150),
            StorageLive(_180),
            StorageLive(_181),
            StorageLive(_182),
            StorageLive(_183),
            _183 = &mut (*_1),
            StorageLive(_184),
            StorageLive(_185),
            _185 = &(*_132),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:148:49: 148:62 (#0),
                    scope: scope[35],
                },
                kind: _184 = hir::ClassUnicodeRange::start(move _185) -> [return: bb139, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_185),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:148:25: 148:63 (#0),
                    scope: scope[35],
                },
                kind: _182 = hir::print::Writer::<W>::write_literal_char(move _183, move _184) -> [return: bb140, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_184),
            StorageDead(_183),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:148:25: 148:64 (#1424),
                    scope: scope[35],
                },
                kind: _181 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _182) -> [return: bb141, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_182),
            PlaceMention(_181),
            _186 = discriminant(_181),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:148:25: 148:64 (#1424),
                    scope: scope[35],
                },
                kind: switchInt(move _186) -> [0: bb144, 1: bb143, otherwise: bb142],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _181),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:148:25: 148:64 (#1424),
                    scope: scope[35],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:148:63: 148:64 (#1425),
                    scope: scope[35],
                },
                kind: falseEdge -> [real: bb145, imaginary: bb144],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_190),
            _190 = ((_181 as Continue).0: ()),
            _180 = _190,
            StorageDead(_190),
            StorageDead(_181),
            StorageDead(_180),
            StorageLive(_191),
            StorageLive(_192),
            StorageLive(_193),
            StorageLive(_194),
            _194 = &mut ((*_1).0: W),
            StorageLive(_195),
            StorageLive(_196),
            _196 = const "-",
            _195 = &(*_196),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:149:25: 149:48 (#0),
                    scope: scope[35],
                },
                kind: _193 = <W as core::fmt::Write>::write_str(move _194, move _195) -> [return: bb147, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_187),
            _187 = ((_181 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_189),
            _189 = _187,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:148:25: 148:64 (#1424),
                    scope: scope[49],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _189) -> [return: bb146, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_189),
            StorageDead(_187),
            StorageDead(_181),
            StorageDead(_180),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[35],
                },
                kind: goto -> bb456,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_195),
            StorageDead(_194),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:149:25: 149:49 (#1426),
                    scope: scope[35],
                },
                kind: _192 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _193) -> [return: bb148, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_193),
            PlaceMention(_192),
            _197 = discriminant(_192),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:149:25: 149:49 (#1426),
                    scope: scope[35],
                },
                kind: switchInt(move _197) -> [0: bb151, 1: bb150, otherwise: bb149],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _192),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:149:25: 149:49 (#1426),
                    scope: scope[35],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:149:48: 149:49 (#1427),
                    scope: scope[35],
                },
                kind: falseEdge -> [real: bb152, imaginary: bb151],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_201),
            _201 = ((_192 as Continue).0: ()),
            _191 = _201,
            StorageDead(_201),
            StorageDead(_196),
            StorageDead(_192),
            StorageDead(_191),
            StorageLive(_202),
            StorageLive(_203),
            StorageLive(_204),
            StorageLive(_205),
            _205 = &mut (*_1),
            StorageLive(_206),
            StorageLive(_207),
            _207 = &(*_132),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:150:49: 150:60 (#0),
                    scope: scope[35],
                },
                kind: _206 = hir::ClassUnicodeRange::end(move _207) -> [return: bb154, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_198),
            _198 = ((_192 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_200),
            _200 = _198,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:149:25: 149:49 (#1426),
                    scope: scope[53],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _200) -> [return: bb153, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_200),
            StorageDead(_198),
            StorageDead(_196),
            StorageDead(_192),
            StorageDead(_191),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[35],
                },
                kind: goto -> bb456,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_207),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:150:25: 150:61 (#0),
                    scope: scope[35],
                },
                kind: _204 = hir::print::Writer::<W>::write_literal_char(move _205, move _206) -> [return: bb155, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_206),
            StorageDead(_205),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:150:25: 150:62 (#1428),
                    scope: scope[35],
                },
                kind: _203 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _204) -> [return: bb156, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_204),
            PlaceMention(_203),
            _208 = discriminant(_203),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:150:25: 150:62 (#1428),
                    scope: scope[35],
                },
                kind: switchInt(move _208) -> [0: bb159, 1: bb158, otherwise: bb157],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _203),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:150:25: 150:62 (#1428),
                    scope: scope[35],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:150:61: 150:62 (#1429),
                    scope: scope[35],
                },
                kind: falseEdge -> [real: bb160, imaginary: bb159],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_212),
            _212 = ((_203 as Continue).0: ()),
            _202 = _212,
            StorageDead(_212),
            StorageDead(_203),
            StorageDead(_202),
            _126 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:142:28: 151:22 (#0),
                    scope: scope[35],
                },
                kind: goto -> bb162,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_209),
            _209 = ((_203 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_211),
            _211 = _209,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:150:25: 150:62 (#1428),
                    scope: scope[57],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _211) -> [return: bb161, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_211),
            StorageDead(_209),
            StorageDead(_203),
            StorageDead(_202),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[35],
                },
                kind: goto -> bb456,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_149),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:140:21: 151:22 (#0),
                    scope: scope[35],
                },
                kind: goto -> bb163,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_133),
            StorageDead(_132),
            StorageDead(_129),
            StorageDead(_127),
            StorageDead(_126),
            _48 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:139:17: 152:18 (#1413),
                    scope: scope[34],
                },
                kind: goto -> bb97,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_217),
            StorageDead(_216),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:153:17: 153:41 (#1430),
                    scope: scope[29],
                },
                kind: _214 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _215) -> [return: bb165, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_215),
            PlaceMention(_214),
            _219 = discriminant(_214),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:153:17: 153:41 (#1430),
                    scope: scope[29],
                },
                kind: switchInt(move _219) -> [0: bb168, 1: bb167, otherwise: bb166],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _214),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:153:17: 153:41 (#1430),
                    scope: scope[29],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:153:40: 153:41 (#1431),
                    scope: scope[29],
                },
                kind: falseEdge -> [real: bb169, imaginary: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_223),
            _223 = ((_214 as Continue).0: ()),
            _213 = _223,
            StorageDead(_223),
            StorageDead(_218),
            StorageDead(_214),
            StorageDead(_213),
            _3 = const (),
            StorageDead(_100),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:154:13: 154:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb450,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_220),
            _220 = ((_214 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_222),
            _222 = _220,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:153:17: 153:41 (#1430),
                    scope: scope[61],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _222) -> [return: bb170, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_222),
            StorageDead(_220),
            StorageDead(_218),
            StorageDead(_214),
            StorageDead(_213),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[29],
                },
                kind: goto -> bb458,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_224),
            _224 = &(((((*_4) as Class).0: hir::Class) as Bytes).0: hir::ClassBytes),
            StorageLive(_225),
            StorageLive(_226),
            StorageLive(_227),
            StorageLive(_228),
            StorageLive(_229),
            _229 = &(*_224),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:156:20: 156:32 (#0),
                    scope: scope[64],
                },
                kind: _228 = hir::ClassBytes::ranges(move _229) -> [return: bb172, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _227 = &(*_228),
            StorageDead(_229),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:156:20: 156:43 (#0),
                    scope: scope[64],
                },
                kind: _226 = core::slice::<impl [hir::ClassBytesRange]>::is_empty(move _227) -> [return: bb173, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:156:20: 156:43 (#0),
                    scope: scope[64],
                },
                kind: switchInt(move _226) -> [0: bb176, otherwise: bb174],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_228),
            StorageDead(_227),
            StorageLive(_231),
            _231 = &mut ((*_1).0: W),
            StorageLive(_232),
            StorageLive(_233),
            _233 = const "[a&&b]",
            _232 = &(*_233),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:157:28: 157:56 (#0),
                    scope: scope[64],
                },
                kind: _0 = <W as core::fmt::Write>::write_str(move _231, move _232) -> [return: bb175, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_232),
            StorageDead(_231),
            StorageDead(_233),
            StorageDead(_226),
            StorageDead(_225),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[64],
                },
                kind: goto -> bb455,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_228),
            StorageDead(_227),
            _225 = const (),
            StorageDead(_226),
            StorageDead(_225),
            StorageLive(_234),
            StorageLive(_235),
            StorageLive(_236),
            StorageLive(_237),
            _237 = &mut ((*_1).0: W),
            StorageLive(_238),
            StorageLive(_239),
            _239 = const "(?-u:[",
            _238 = &(*_239),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:159:17: 159:45 (#0),
                    scope: scope[64],
                },
                kind: _236 = <W as core::fmt::Write>::write_str(move _237, move _238) -> [return: bb177, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_238),
            StorageDead(_237),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:159:17: 159:46 (#1433),
                    scope: scope[64],
                },
                kind: _235 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _236) -> [return: bb178, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_236),
            PlaceMention(_235),
            _240 = discriminant(_235),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:159:17: 159:46 (#1433),
                    scope: scope[64],
                },
                kind: switchInt(move _240) -> [0: bb181, 1: bb180, otherwise: bb179],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _235),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:159:17: 159:46 (#1433),
                    scope: scope[64],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:159:45: 159:46 (#1434),
                    scope: scope[64],
                },
                kind: falseEdge -> [real: bb182, imaginary: bb181],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_244),
            _244 = ((_235 as Continue).0: ()),
            _234 = _244,
            StorageDead(_244),
            StorageDead(_239),
            StorageDead(_235),
            StorageDead(_234),
            StorageLive(_245),
            StorageLive(_246),
            StorageLive(_247),
            StorageLive(_248),
            _248 = &(*_224),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:160:30: 160:40 (#0),
                    scope: scope[64],
                },
                kind: _247 = hir::ClassBytes::iter(move _248) -> [return: bb184, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_241),
            _241 = ((_235 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_243),
            _243 = _241,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:159:17: 159:46 (#1433),
                    scope: scope[66],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _243) -> [return: bb183, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_243),
            StorageDead(_241),
            StorageDead(_239),
            StorageDead(_235),
            StorageDead(_234),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[64],
                },
                kind: goto -> bb455,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_248),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:160:30: 160:40 (#1436),
                    scope: scope[64],
                },
                kind: _246 = <hir::ClassBytesIter<'_> as core::iter::IntoIterator>::into_iter(move _247) -> [return: bb185, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_247),
            PlaceMention(_246),
            StorageLive(_249),
            _249 = move _246,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:160:17: 171:18 (#1435),
                    scope: scope[69],
                },
                kind: goto -> bb186,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:160:17: 171:18 (#1435),
                    scope: scope[69],
                },
                kind: falseUnwind -> [real: bb187, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_250),
            StorageLive(_251),
            StorageLive(_252),
            StorageLive(_253),
            _253 = &mut _249,
            _252 = &mut (*_253),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:160:30: 160:40 (#1436),
                    scope: scope[69],
                },
                kind: _251 = <hir::ClassBytesIter<'_> as core::iter::Iterator>::next(move _252) -> [return: bb188, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_252),
            PlaceMention(_251),
            _254 = discriminant(_251),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:160:30: 160:40 (#1436),
                    scope: scope[69],
                },
                kind: switchInt(move _254) -> [0: bb190, 1: bb191, otherwise: bb189],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _251),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:160:30: 160:40 (#1436),
                    scope: scope[69],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:160:17: 171:18 (#1435),
                    scope: scope[69],
                },
                kind: falseEdge -> [real: bb192, imaginary: bb191],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_256),
            _256 = ((_251 as Some).0: &hir::ClassBytesRange),
            StorageLive(_257),
            StorageLive(_258),
            StorageLive(_259),
            _259 = &(*_256),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:161:24: 161:37 (#0),
                    scope: scope[70],
                },
                kind: _258 = hir::ClassBytesRange::start(move _259) -> [return: bb193, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _245 = const (),
            StorageDead(_253),
            StorageDead(_251),
            StorageDead(_250),
            StorageDead(_249),
            StorageDead(_246),
            StorageDead(_245),
            StorageLive(_335),
            StorageLive(_336),
            StorageLive(_337),
            StorageLive(_338),
            _338 = &mut ((*_1).0: W),
            StorageLive(_339),
            StorageLive(_340),
            _340 = const "])",
            _339 = &(*_340),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:172:17: 172:41 (#0),
                    scope: scope[64],
                },
                kind: _337 = <W as core::fmt::Write>::write_str(move _338, move _339) -> [return: bb251, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_259),
            StorageLive(_260),
            StorageLive(_261),
            _261 = &(*_256),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:161:41: 161:52 (#0),
                    scope: scope[70],
                },
                kind: _260 = hir::ClassBytesRange::end(move _261) -> [return: bb194, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_261),
            _257 = Eq(move _258, move _260),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:161:24: 161:52 (#0),
                    scope: scope[70],
                },
                kind: switchInt(move _257) -> [0: bb204, otherwise: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_260),
            StorageDead(_258),
            StorageLive(_262),
            StorageLive(_263),
            StorageLive(_264),
            StorageLive(_265),
            _265 = &mut (*_1),
            StorageLive(_266),
            StorageLive(_267),
            _267 = &(*_256),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:162:55: 162:68 (#0),
                    scope: scope[70],
                },
                kind: _266 = hir::ClassBytesRange::start(move _267) -> [return: bb196, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_267),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:162:25: 162:69 (#0),
                    scope: scope[70],
                },
                kind: _264 = hir::print::Writer::<W>::write_literal_class_byte(move _265, move _266) -> [return: bb197, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_266),
            StorageDead(_265),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:162:25: 162:70 (#1439),
                    scope: scope[70],
                },
                kind: _263 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _264) -> [return: bb198, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_264),
            PlaceMention(_263),
            _268 = discriminant(_263),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:162:25: 162:70 (#1439),
                    scope: scope[70],
                },
                kind: switchInt(move _268) -> [0: bb201, 1: bb200, otherwise: bb199],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _263),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:162:25: 162:70 (#1439),
                    scope: scope[70],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:162:69: 162:70 (#1440),
                    scope: scope[70],
                },
                kind: falseEdge -> [real: bb202, imaginary: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_272),
            _272 = ((_263 as Continue).0: ()),
            _262 = _272,
            StorageDead(_272),
            StorageDead(_263),
            StorageDead(_262),
            _250 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:161:21: 170:22 (#0),
                    scope: scope[70],
                },
                kind: goto -> bb250,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_269),
            _269 = ((_263 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_271),
            _271 = _269,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:162:25: 162:70 (#1439),
                    scope: scope[72],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _271) -> [return: bb203, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_271),
            StorageDead(_269),
            StorageDead(_263),
            StorageDead(_262),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[70],
                },
                kind: goto -> bb454,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_260),
            StorageDead(_258),
            StorageLive(_273),
            StorageLive(_274),
            StorageLive(_275),
            StorageLive(_276),
            _276 = &(*_256),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:163:31: 163:44 (#0),
                    scope: scope[70],
                },
                kind: _275 = hir::ClassBytesRange::start(move _276) -> [return: bb205, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_276),
            _277 = AddWithOverflow(_275, const 1_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:163:31: 163:48 (#0),
                    scope: scope[70],
                },
                kind: assert(!move (_277.1: bool), "attempt to compute `{} + {}`, which would overflow", move _275, const 1_u8) -> [success: bb206, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _274 = move (_277.0: u8),
            StorageDead(_275),
            StorageLive(_278),
            StorageLive(_279),
            _279 = &(*_256),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:163:52: 163:63 (#0),
                    scope: scope[70],
                },
                kind: _278 = hir::ClassBytesRange::end(move _279) -> [return: bb207, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_279),
            _273 = Eq(move _274, move _278),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:163:31: 163:63 (#0),
                    scope: scope[70],
                },
                kind: switchInt(move _273) -> [0: bb225, otherwise: bb208],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_278),
            StorageDead(_274),
            StorageLive(_280),
            StorageLive(_281),
            StorageLive(_282),
            StorageLive(_283),
            _283 = &mut (*_1),
            StorageLive(_284),
            StorageLive(_285),
            _285 = &(*_256),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:164:55: 164:68 (#0),
                    scope: scope[70],
                },
                kind: _284 = hir::ClassBytesRange::start(move _285) -> [return: bb209, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_285),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:164:25: 164:69 (#0),
                    scope: scope[70],
                },
                kind: _282 = hir::print::Writer::<W>::write_literal_class_byte(move _283, move _284) -> [return: bb210, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_284),
            StorageDead(_283),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:164:25: 164:70 (#1442),
                    scope: scope[70],
                },
                kind: _281 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _282) -> [return: bb211, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_282),
            PlaceMention(_281),
            _286 = discriminant(_281),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:164:25: 164:70 (#1442),
                    scope: scope[70],
                },
                kind: switchInt(move _286) -> [0: bb214, 1: bb213, otherwise: bb212],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _281),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:164:25: 164:70 (#1442),
                    scope: scope[70],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:164:69: 164:70 (#1443),
                    scope: scope[70],
                },
                kind: falseEdge -> [real: bb215, imaginary: bb214],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_290),
            _290 = ((_281 as Continue).0: ()),
            _280 = _290,
            StorageDead(_290),
            StorageDead(_281),
            StorageDead(_280),
            StorageLive(_291),
            StorageLive(_292),
            StorageLive(_293),
            StorageLive(_294),
            _294 = &mut (*_1),
            StorageLive(_295),
            StorageLive(_296),
            _296 = &(*_256),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:165:55: 165:66 (#0),
                    scope: scope[70],
                },
                kind: _295 = hir::ClassBytesRange::end(move _296) -> [return: bb217, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_287),
            _287 = ((_281 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_289),
            _289 = _287,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:164:25: 164:70 (#1442),
                    scope: scope[76],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _289) -> [return: bb216, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_289),
            StorageDead(_287),
            StorageDead(_281),
            StorageDead(_280),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[70],
                },
                kind: goto -> bb453,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_296),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:165:25: 165:67 (#0),
                    scope: scope[70],
                },
                kind: _293 = hir::print::Writer::<W>::write_literal_class_byte(move _294, move _295) -> [return: bb218, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_295),
            StorageDead(_294),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:165:25: 165:68 (#1444),
                    scope: scope[70],
                },
                kind: _292 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _293) -> [return: bb219, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_293),
            PlaceMention(_292),
            _297 = discriminant(_292),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:165:25: 165:68 (#1444),
                    scope: scope[70],
                },
                kind: switchInt(move _297) -> [0: bb222, 1: bb221, otherwise: bb220],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _292),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:165:25: 165:68 (#1444),
                    scope: scope[70],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:165:67: 165:68 (#1445),
                    scope: scope[70],
                },
                kind: falseEdge -> [real: bb223, imaginary: bb222],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_301),
            _301 = ((_292 as Continue).0: ()),
            _291 = _301,
            StorageDead(_301),
            StorageDead(_292),
            StorageDead(_291),
            _250 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:163:28: 170:22 (#0),
                    scope: scope[70],
                },
                kind: goto -> bb249,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_298),
            _298 = ((_292 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_300),
            _300 = _298,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:165:25: 165:68 (#1444),
                    scope: scope[80],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _300) -> [return: bb224, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_300),
            StorageDead(_298),
            StorageDead(_292),
            StorageDead(_291),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[70],
                },
                kind: goto -> bb453,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_278),
            StorageDead(_274),
            StorageLive(_302),
            StorageLive(_303),
            StorageLive(_304),
            StorageLive(_305),
            _305 = &mut (*_1),
            StorageLive(_306),
            StorageLive(_307),
            _307 = &(*_256),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:167:55: 167:68 (#0),
                    scope: scope[70],
                },
                kind: _306 = hir::ClassBytesRange::start(move _307) -> [return: bb226, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_307),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:167:25: 167:69 (#0),
                    scope: scope[70],
                },
                kind: _304 = hir::print::Writer::<W>::write_literal_class_byte(move _305, move _306) -> [return: bb227, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_306),
            StorageDead(_305),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:167:25: 167:70 (#1446),
                    scope: scope[70],
                },
                kind: _303 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _304) -> [return: bb228, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_304),
            PlaceMention(_303),
            _308 = discriminant(_303),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:167:25: 167:70 (#1446),
                    scope: scope[70],
                },
                kind: switchInt(move _308) -> [0: bb231, 1: bb230, otherwise: bb229],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _303),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:167:25: 167:70 (#1446),
                    scope: scope[70],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:167:69: 167:70 (#1447),
                    scope: scope[70],
                },
                kind: falseEdge -> [real: bb232, imaginary: bb231],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_312),
            _312 = ((_303 as Continue).0: ()),
            _302 = _312,
            StorageDead(_312),
            StorageDead(_303),
            StorageDead(_302),
            StorageLive(_313),
            StorageLive(_314),
            StorageLive(_315),
            StorageLive(_316),
            _316 = &mut ((*_1).0: W),
            StorageLive(_317),
            StorageLive(_318),
            _318 = const "-",
            _317 = &(*_318),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:168:25: 168:48 (#0),
                    scope: scope[70],
                },
                kind: _315 = <W as core::fmt::Write>::write_str(move _316, move _317) -> [return: bb234, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_309),
            _309 = ((_303 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_311),
            _311 = _309,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:167:25: 167:70 (#1446),
                    scope: scope[84],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _311) -> [return: bb233, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_311),
            StorageDead(_309),
            StorageDead(_303),
            StorageDead(_302),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[70],
                },
                kind: goto -> bb453,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_317),
            StorageDead(_316),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:168:25: 168:49 (#1448),
                    scope: scope[70],
                },
                kind: _314 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _315) -> [return: bb235, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_315),
            PlaceMention(_314),
            _319 = discriminant(_314),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:168:25: 168:49 (#1448),
                    scope: scope[70],
                },
                kind: switchInt(move _319) -> [0: bb238, 1: bb237, otherwise: bb236],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _314),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:168:25: 168:49 (#1448),
                    scope: scope[70],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:168:48: 168:49 (#1449),
                    scope: scope[70],
                },
                kind: falseEdge -> [real: bb239, imaginary: bb238],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_323),
            _323 = ((_314 as Continue).0: ()),
            _313 = _323,
            StorageDead(_323),
            StorageDead(_318),
            StorageDead(_314),
            StorageDead(_313),
            StorageLive(_324),
            StorageLive(_325),
            StorageLive(_326),
            StorageLive(_327),
            _327 = &mut (*_1),
            StorageLive(_328),
            StorageLive(_329),
            _329 = &(*_256),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:169:55: 169:66 (#0),
                    scope: scope[70],
                },
                kind: _328 = hir::ClassBytesRange::end(move _329) -> [return: bb241, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_320),
            _320 = ((_314 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_322),
            _322 = _320,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:168:25: 168:49 (#1448),
                    scope: scope[88],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _322) -> [return: bb240, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_322),
            StorageDead(_320),
            StorageDead(_318),
            StorageDead(_314),
            StorageDead(_313),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[70],
                },
                kind: goto -> bb453,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_329),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:169:25: 169:67 (#0),
                    scope: scope[70],
                },
                kind: _326 = hir::print::Writer::<W>::write_literal_class_byte(move _327, move _328) -> [return: bb242, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_328),
            StorageDead(_327),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:169:25: 169:68 (#1450),
                    scope: scope[70],
                },
                kind: _325 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _326) -> [return: bb243, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_326),
            PlaceMention(_325),
            _330 = discriminant(_325),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:169:25: 169:68 (#1450),
                    scope: scope[70],
                },
                kind: switchInt(move _330) -> [0: bb246, 1: bb245, otherwise: bb244],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _325),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:169:25: 169:68 (#1450),
                    scope: scope[70],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:169:67: 169:68 (#1451),
                    scope: scope[70],
                },
                kind: falseEdge -> [real: bb247, imaginary: bb246],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_334),
            _334 = ((_325 as Continue).0: ()),
            _324 = _334,
            StorageDead(_334),
            StorageDead(_325),
            StorageDead(_324),
            _250 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:163:28: 170:22 (#0),
                    scope: scope[70],
                },
                kind: goto -> bb249,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_331),
            _331 = ((_325 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_333),
            _333 = _331,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:169:25: 169:68 (#1450),
                    scope: scope[92],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _333) -> [return: bb248, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_333),
            StorageDead(_331),
            StorageDead(_325),
            StorageDead(_324),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[70],
                },
                kind: goto -> bb453,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_273),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:161:21: 170:22 (#0),
                    scope: scope[70],
                },
                kind: goto -> bb250,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_257),
            StorageDead(_256),
            StorageDead(_253),
            StorageDead(_251),
            StorageDead(_250),
            _48 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:160:17: 171:18 (#1435),
                    scope: scope[69],
                },
                kind: goto -> bb186,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_339),
            StorageDead(_338),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:172:17: 172:42 (#1452),
                    scope: scope[64],
                },
                kind: _336 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _337) -> [return: bb252, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_337),
            PlaceMention(_336),
            _341 = discriminant(_336),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:172:17: 172:42 (#1452),
                    scope: scope[64],
                },
                kind: switchInt(move _341) -> [0: bb255, 1: bb254, otherwise: bb253],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _336),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:172:17: 172:42 (#1452),
                    scope: scope[64],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:172:41: 172:42 (#1453),
                    scope: scope[64],
                },
                kind: falseEdge -> [real: bb256, imaginary: bb255],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_345),
            _345 = ((_336 as Continue).0: ()),
            _335 = _345,
            StorageDead(_345),
            StorageDead(_340),
            StorageDead(_336),
            StorageDead(_335),
            _3 = const (),
            StorageDead(_224),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:173:13: 173:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb450,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_342),
            _342 = ((_336 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_344),
            _344 = _342,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:172:17: 172:42 (#1452),
                    scope: scope[96],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _344) -> [return: bb257, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_344),
            StorageDead(_342),
            StorageDead(_340),
            StorageDead(_336),
            StorageDead(_335),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[64],
                },
                kind: goto -> bb455,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_346),
            _346 = &(((*_4) as Look).0: hir::Look),
            PlaceMention((*_346)),
            _347 = discriminant((*_346)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:174:40: 174:51 (#0),
                    scope: scope[99],
                },
                kind: switchInt(move _347) -> [1: bb260, 2: bb261, 4: bb262, 8: bb263, 16: bb264, 32: bb265, 64: bb266, 128: bb267, 256: bb268, 512: bb269, 1024: bb270, 2048: bb271, 4096: bb272, 8192: bb273, 16384: bb274, 32768: bb275, 65536: bb276, 131072: bb277, otherwise: bb259],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), (*_346)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:174:46: 174:51 (#0),
                    scope: scope[99],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:175:17: 175:33 (#0),
                    scope: scope[99],
                },
                kind: falseEdge -> [real: bb278, imaginary: bb261],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:178:17: 178:31 (#0),
                    scope: scope[99],
                },
                kind: falseEdge -> [real: bb286, imaginary: bb262],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:181:17: 181:35 (#0),
                    scope: scope[99],
                },
                kind: falseEdge -> [real: bb294, imaginary: bb263],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:184:17: 184:33 (#0),
                    scope: scope[99],
                },
                kind: falseEdge -> [real: bb302, imaginary: bb264],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:187:17: 187:37 (#0),
                    scope: scope[99],
                },
                kind: falseEdge -> [real: bb310, imaginary: bb265],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:190:17: 190:35 (#0),
                    scope: scope[99],
                },
                kind: falseEdge -> [real: bb318, imaginary: bb266],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:193:17: 193:37 (#0),
                    scope: scope[99],
                },
                kind: falseEdge -> [real: bb326, imaginary: bb267],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:196:17: 196:43 (#0),
                    scope: scope[99],
                },
                kind: falseEdge -> [real: bb334, imaginary: bb268],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:199:17: 199:39 (#0),
                    scope: scope[99],
                },
                kind: falseEdge -> [real: bb342, imaginary: bb269],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:202:17: 202:45 (#0),
                    scope: scope[99],
                },
                kind: falseEdge -> [real: bb350, imaginary: bb270],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:205:17: 205:42 (#0),
                    scope: scope[99],
                },
                kind: falseEdge -> [real: bb358, imaginary: bb271],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:208:17: 208:40 (#0),
                    scope: scope[99],
                },
                kind: falseEdge -> [real: bb366, imaginary: bb272],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:211:17: 211:44 (#0),
                    scope: scope[99],
                },
                kind: falseEdge -> [real: bb374, imaginary: bb273],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:214:17: 214:42 (#0),
                    scope: scope[99],
                },
                kind: falseEdge -> [real: bb382, imaginary: bb274],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:217:17: 217:46 (#0),
                    scope: scope[99],
                },
                kind: falseEdge -> [real: bb390, imaginary: bb275],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:220:17: 220:44 (#0),
                    scope: scope[99],
                },
                kind: falseEdge -> [real: bb398, imaginary: bb276],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:223:17: 223:48 (#0),
                    scope: scope[99],
                },
                kind: falseEdge -> [real: bb406, imaginary: bb277],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_535),
            StorageLive(_536),
            StorageLive(_537),
            StorageLive(_538),
            _538 = &mut ((*_1).0: W),
            StorageLive(_539),
            StorageLive(_540),
            _540 = const "\\b{end-half}",
            _539 = &(*_540),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:227:21: 227:56 (#0),
                    scope: scope[99],
                },
                kind: _537 = <W as core::fmt::Write>::write_str(move _538, move _539) -> [return: bb414, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_348),
            StorageLive(_349),
            StorageLive(_350),
            StorageLive(_351),
            _351 = &mut ((*_1).0: W),
            StorageLive(_352),
            StorageLive(_353),
            _353 = const "\\A",
            _352 = &(*_353),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:176:21: 176:46 (#0),
                    scope: scope[99],
                },
                kind: _350 = <W as core::fmt::Write>::write_str(move _351, move _352) -> [return: bb279, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_352),
            StorageDead(_351),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:176:21: 176:47 (#1454),
                    scope: scope[99],
                },
                kind: _349 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _350) -> [return: bb280, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_350),
            PlaceMention(_349),
            _354 = discriminant(_349),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:176:21: 176:47 (#1454),
                    scope: scope[99],
                },
                kind: switchInt(move _354) -> [0: bb283, 1: bb282, otherwise: bb281],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _349),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:176:21: 176:47 (#1454),
                    scope: scope[99],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:176:46: 176:47 (#1455),
                    scope: scope[99],
                },
                kind: falseEdge -> [real: bb284, imaginary: bb283],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_358),
            _358 = ((_349 as Continue).0: ()),
            _348 = _358,
            StorageDead(_358),
            StorageDead(_353),
            StorageDead(_349),
            StorageDead(_348),
            _3 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:175:37: 177:18 (#0),
                    scope: scope[99],
                },
                kind: goto -> bb421,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_355),
            _355 = ((_349 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_357),
            _357 = _355,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:176:21: 176:47 (#1454),
                    scope: scope[101],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _357) -> [return: bb285, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_357),
            StorageDead(_355),
            StorageDead(_353),
            StorageDead(_349),
            StorageDead(_348),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[99],
                },
                kind: goto -> bb452,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_359),
            StorageLive(_360),
            StorageLive(_361),
            StorageLive(_362),
            _362 = &mut ((*_1).0: W),
            StorageLive(_363),
            StorageLive(_364),
            _364 = const "\\z",
            _363 = &(*_364),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:179:21: 179:46 (#0),
                    scope: scope[99],
                },
                kind: _361 = <W as core::fmt::Write>::write_str(move _362, move _363) -> [return: bb287, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_363),
            StorageDead(_362),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:179:21: 179:47 (#1456),
                    scope: scope[99],
                },
                kind: _360 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _361) -> [return: bb288, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_361),
            PlaceMention(_360),
            _365 = discriminant(_360),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:179:21: 179:47 (#1456),
                    scope: scope[99],
                },
                kind: switchInt(move _365) -> [0: bb291, 1: bb290, otherwise: bb289],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _360),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:179:21: 179:47 (#1456),
                    scope: scope[99],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:179:46: 179:47 (#1457),
                    scope: scope[99],
                },
                kind: falseEdge -> [real: bb292, imaginary: bb291],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_369),
            _369 = ((_360 as Continue).0: ()),
            _359 = _369,
            StorageDead(_369),
            StorageDead(_364),
            StorageDead(_360),
            StorageDead(_359),
            _3 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:178:35: 180:18 (#0),
                    scope: scope[99],
                },
                kind: goto -> bb421,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_366),
            _366 = ((_360 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_368),
            _368 = _366,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:179:21: 179:47 (#1456),
                    scope: scope[105],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _368) -> [return: bb293, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_368),
            StorageDead(_366),
            StorageDead(_364),
            StorageDead(_360),
            StorageDead(_359),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[99],
                },
                kind: goto -> bb452,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_370),
            StorageLive(_371),
            StorageLive(_372),
            StorageLive(_373),
            _373 = &mut ((*_1).0: W),
            StorageLive(_374),
            StorageLive(_375),
            _375 = const "(?m:^)",
            _374 = &(*_375),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:182:21: 182:49 (#0),
                    scope: scope[99],
                },
                kind: _372 = <W as core::fmt::Write>::write_str(move _373, move _374) -> [return: bb295, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_374),
            StorageDead(_373),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:182:21: 182:50 (#1458),
                    scope: scope[99],
                },
                kind: _371 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _372) -> [return: bb296, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_372),
            PlaceMention(_371),
            _376 = discriminant(_371),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:182:21: 182:50 (#1458),
                    scope: scope[99],
                },
                kind: switchInt(move _376) -> [0: bb299, 1: bb298, otherwise: bb297],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _371),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:182:21: 182:50 (#1458),
                    scope: scope[99],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:182:49: 182:50 (#1459),
                    scope: scope[99],
                },
                kind: falseEdge -> [real: bb300, imaginary: bb299],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_380),
            _380 = ((_371 as Continue).0: ()),
            _370 = _380,
            StorageDead(_380),
            StorageDead(_375),
            StorageDead(_371),
            StorageDead(_370),
            _3 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:181:39: 183:18 (#0),
                    scope: scope[99],
                },
                kind: goto -> bb421,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_377),
            _377 = ((_371 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_379),
            _379 = _377,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:182:21: 182:50 (#1458),
                    scope: scope[109],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _379) -> [return: bb301, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_379),
            StorageDead(_377),
            StorageDead(_375),
            StorageDead(_371),
            StorageDead(_370),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[99],
                },
                kind: goto -> bb452,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_381),
            StorageLive(_382),
            StorageLive(_383),
            StorageLive(_384),
            _384 = &mut ((*_1).0: W),
            StorageLive(_385),
            StorageLive(_386),
            _386 = const "(?m:$)",
            _385 = &(*_386),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:185:21: 185:49 (#0),
                    scope: scope[99],
                },
                kind: _383 = <W as core::fmt::Write>::write_str(move _384, move _385) -> [return: bb303, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_385),
            StorageDead(_384),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:185:21: 185:50 (#1460),
                    scope: scope[99],
                },
                kind: _382 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _383) -> [return: bb304, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_383),
            PlaceMention(_382),
            _387 = discriminant(_382),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:185:21: 185:50 (#1460),
                    scope: scope[99],
                },
                kind: switchInt(move _387) -> [0: bb307, 1: bb306, otherwise: bb305],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _382),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:185:21: 185:50 (#1460),
                    scope: scope[99],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:185:49: 185:50 (#1461),
                    scope: scope[99],
                },
                kind: falseEdge -> [real: bb308, imaginary: bb307],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_391),
            _391 = ((_382 as Continue).0: ()),
            _381 = _391,
            StorageDead(_391),
            StorageDead(_386),
            StorageDead(_382),
            StorageDead(_381),
            _3 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:184:37: 186:18 (#0),
                    scope: scope[99],
                },
                kind: goto -> bb421,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_388),
            _388 = ((_382 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_390),
            _390 = _388,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:185:21: 185:50 (#1460),
                    scope: scope[113],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _390) -> [return: bb309, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_390),
            StorageDead(_388),
            StorageDead(_386),
            StorageDead(_382),
            StorageDead(_381),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[99],
                },
                kind: goto -> bb452,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_392),
            StorageLive(_393),
            StorageLive(_394),
            StorageLive(_395),
            _395 = &mut ((*_1).0: W),
            StorageLive(_396),
            StorageLive(_397),
            _397 = const "(?mR:^)",
            _396 = &(*_397),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:188:21: 188:50 (#0),
                    scope: scope[99],
                },
                kind: _394 = <W as core::fmt::Write>::write_str(move _395, move _396) -> [return: bb311, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_396),
            StorageDead(_395),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:188:21: 188:51 (#1462),
                    scope: scope[99],
                },
                kind: _393 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _394) -> [return: bb312, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_394),
            PlaceMention(_393),
            _398 = discriminant(_393),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:188:21: 188:51 (#1462),
                    scope: scope[99],
                },
                kind: switchInt(move _398) -> [0: bb315, 1: bb314, otherwise: bb313],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _393),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:188:21: 188:51 (#1462),
                    scope: scope[99],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:188:50: 188:51 (#1463),
                    scope: scope[99],
                },
                kind: falseEdge -> [real: bb316, imaginary: bb315],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_402),
            _402 = ((_393 as Continue).0: ()),
            _392 = _402,
            StorageDead(_402),
            StorageDead(_397),
            StorageDead(_393),
            StorageDead(_392),
            _3 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:187:41: 189:18 (#0),
                    scope: scope[99],
                },
                kind: goto -> bb421,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_399),
            _399 = ((_393 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_401),
            _401 = _399,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:188:21: 188:51 (#1462),
                    scope: scope[117],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _401) -> [return: bb317, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_401),
            StorageDead(_399),
            StorageDead(_397),
            StorageDead(_393),
            StorageDead(_392),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[99],
                },
                kind: goto -> bb452,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_403),
            StorageLive(_404),
            StorageLive(_405),
            StorageLive(_406),
            _406 = &mut ((*_1).0: W),
            StorageLive(_407),
            StorageLive(_408),
            _408 = const "(?mR:$)",
            _407 = &(*_408),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:191:21: 191:50 (#0),
                    scope: scope[99],
                },
                kind: _405 = <W as core::fmt::Write>::write_str(move _406, move _407) -> [return: bb319, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_407),
            StorageDead(_406),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:191:21: 191:51 (#1464),
                    scope: scope[99],
                },
                kind: _404 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _405) -> [return: bb320, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_405),
            PlaceMention(_404),
            _409 = discriminant(_404),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:191:21: 191:51 (#1464),
                    scope: scope[99],
                },
                kind: switchInt(move _409) -> [0: bb323, 1: bb322, otherwise: bb321],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _404),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:191:21: 191:51 (#1464),
                    scope: scope[99],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:191:50: 191:51 (#1465),
                    scope: scope[99],
                },
                kind: falseEdge -> [real: bb324, imaginary: bb323],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_413),
            _413 = ((_404 as Continue).0: ()),
            _403 = _413,
            StorageDead(_413),
            StorageDead(_408),
            StorageDead(_404),
            StorageDead(_403),
            _3 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:190:39: 192:18 (#0),
                    scope: scope[99],
                },
                kind: goto -> bb421,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_410),
            _410 = ((_404 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_412),
            _412 = _410,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:191:21: 191:51 (#1464),
                    scope: scope[121],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _412) -> [return: bb325, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_412),
            StorageDead(_410),
            StorageDead(_408),
            StorageDead(_404),
            StorageDead(_403),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[99],
                },
                kind: goto -> bb452,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_414),
            StorageLive(_415),
            StorageLive(_416),
            StorageLive(_417),
            _417 = &mut ((*_1).0: W),
            StorageLive(_418),
            StorageLive(_419),
            _419 = const "(?-u:\\b)",
            _418 = &(*_419),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:194:21: 194:52 (#0),
                    scope: scope[99],
                },
                kind: _416 = <W as core::fmt::Write>::write_str(move _417, move _418) -> [return: bb327, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_418),
            StorageDead(_417),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:194:21: 194:53 (#1466),
                    scope: scope[99],
                },
                kind: _415 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _416) -> [return: bb328, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_416),
            PlaceMention(_415),
            _420 = discriminant(_415),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:194:21: 194:53 (#1466),
                    scope: scope[99],
                },
                kind: switchInt(move _420) -> [0: bb331, 1: bb330, otherwise: bb329],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _415),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:194:21: 194:53 (#1466),
                    scope: scope[99],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:194:52: 194:53 (#1467),
                    scope: scope[99],
                },
                kind: falseEdge -> [real: bb332, imaginary: bb331],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_424),
            _424 = ((_415 as Continue).0: ()),
            _414 = _424,
            StorageDead(_424),
            StorageDead(_419),
            StorageDead(_415),
            StorageDead(_414),
            _3 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:193:41: 195:18 (#0),
                    scope: scope[99],
                },
                kind: goto -> bb421,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_421),
            _421 = ((_415 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_423),
            _423 = _421,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:194:21: 194:53 (#1466),
                    scope: scope[125],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _423) -> [return: bb333, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_423),
            StorageDead(_421),
            StorageDead(_419),
            StorageDead(_415),
            StorageDead(_414),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[99],
                },
                kind: goto -> bb452,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_425),
            StorageLive(_426),
            StorageLive(_427),
            StorageLive(_428),
            _428 = &mut ((*_1).0: W),
            StorageLive(_429),
            StorageLive(_430),
            _430 = const "(?-u:\\B)",
            _429 = &(*_430),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:197:21: 197:52 (#0),
                    scope: scope[99],
                },
                kind: _427 = <W as core::fmt::Write>::write_str(move _428, move _429) -> [return: bb335, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_429),
            StorageDead(_428),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:197:21: 197:53 (#1468),
                    scope: scope[99],
                },
                kind: _426 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _427) -> [return: bb336, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_427),
            PlaceMention(_426),
            _431 = discriminant(_426),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:197:21: 197:53 (#1468),
                    scope: scope[99],
                },
                kind: switchInt(move _431) -> [0: bb339, 1: bb338, otherwise: bb337],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _426),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:197:21: 197:53 (#1468),
                    scope: scope[99],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:197:52: 197:53 (#1469),
                    scope: scope[99],
                },
                kind: falseEdge -> [real: bb340, imaginary: bb339],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_435),
            _435 = ((_426 as Continue).0: ()),
            _425 = _435,
            StorageDead(_435),
            StorageDead(_430),
            StorageDead(_426),
            StorageDead(_425),
            _3 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:196:47: 198:18 (#0),
                    scope: scope[99],
                },
                kind: goto -> bb421,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_432),
            _432 = ((_426 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_434),
            _434 = _432,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:197:21: 197:53 (#1468),
                    scope: scope[129],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _434) -> [return: bb341, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_434),
            StorageDead(_432),
            StorageDead(_430),
            StorageDead(_426),
            StorageDead(_425),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[99],
                },
                kind: goto -> bb452,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_436),
            StorageLive(_437),
            StorageLive(_438),
            StorageLive(_439),
            _439 = &mut ((*_1).0: W),
            StorageLive(_440),
            StorageLive(_441),
            _441 = const "\\b",
            _440 = &(*_441),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:200:21: 200:46 (#0),
                    scope: scope[99],
                },
                kind: _438 = <W as core::fmt::Write>::write_str(move _439, move _440) -> [return: bb343, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_440),
            StorageDead(_439),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:200:21: 200:47 (#1470),
                    scope: scope[99],
                },
                kind: _437 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _438) -> [return: bb344, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_438),
            PlaceMention(_437),
            _442 = discriminant(_437),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:200:21: 200:47 (#1470),
                    scope: scope[99],
                },
                kind: switchInt(move _442) -> [0: bb347, 1: bb346, otherwise: bb345],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _437),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:200:21: 200:47 (#1470),
                    scope: scope[99],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:200:46: 200:47 (#1471),
                    scope: scope[99],
                },
                kind: falseEdge -> [real: bb348, imaginary: bb347],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_446),
            _446 = ((_437 as Continue).0: ()),
            _436 = _446,
            StorageDead(_446),
            StorageDead(_441),
            StorageDead(_437),
            StorageDead(_436),
            _3 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:199:43: 201:18 (#0),
                    scope: scope[99],
                },
                kind: goto -> bb421,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_443),
            _443 = ((_437 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_445),
            _445 = _443,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:200:21: 200:47 (#1470),
                    scope: scope[133],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _445) -> [return: bb349, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_445),
            StorageDead(_443),
            StorageDead(_441),
            StorageDead(_437),
            StorageDead(_436),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[99],
                },
                kind: goto -> bb452,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_447),
            StorageLive(_448),
            StorageLive(_449),
            StorageLive(_450),
            _450 = &mut ((*_1).0: W),
            StorageLive(_451),
            StorageLive(_452),
            _452 = const "\\B",
            _451 = &(*_452),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:203:21: 203:46 (#0),
                    scope: scope[99],
                },
                kind: _449 = <W as core::fmt::Write>::write_str(move _450, move _451) -> [return: bb351, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_451),
            StorageDead(_450),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:203:21: 203:47 (#1472),
                    scope: scope[99],
                },
                kind: _448 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _449) -> [return: bb352, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_449),
            PlaceMention(_448),
            _453 = discriminant(_448),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:203:21: 203:47 (#1472),
                    scope: scope[99],
                },
                kind: switchInt(move _453) -> [0: bb355, 1: bb354, otherwise: bb353],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _448),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:203:21: 203:47 (#1472),
                    scope: scope[99],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:203:46: 203:47 (#1473),
                    scope: scope[99],
                },
                kind: falseEdge -> [real: bb356, imaginary: bb355],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_457),
            _457 = ((_448 as Continue).0: ()),
            _447 = _457,
            StorageDead(_457),
            StorageDead(_452),
            StorageDead(_448),
            StorageDead(_447),
            _3 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:202:49: 204:18 (#0),
                    scope: scope[99],
                },
                kind: goto -> bb421,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_454),
            _454 = ((_448 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_456),
            _456 = _454,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:203:21: 203:47 (#1472),
                    scope: scope[137],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _456) -> [return: bb357, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_456),
            StorageDead(_454),
            StorageDead(_452),
            StorageDead(_448),
            StorageDead(_447),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[99],
                },
                kind: goto -> bb452,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_458),
            StorageLive(_459),
            StorageLive(_460),
            StorageLive(_461),
            _461 = &mut ((*_1).0: W),
            StorageLive(_462),
            StorageLive(_463),
            _463 = const "(?-u:\\b{start})",
            _462 = &(*_463),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:206:21: 206:59 (#0),
                    scope: scope[99],
                },
                kind: _460 = <W as core::fmt::Write>::write_str(move _461, move _462) -> [return: bb359, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_462),
            StorageDead(_461),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:206:21: 206:60 (#1474),
                    scope: scope[99],
                },
                kind: _459 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _460) -> [return: bb360, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_460),
            PlaceMention(_459),
            _464 = discriminant(_459),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:206:21: 206:60 (#1474),
                    scope: scope[99],
                },
                kind: switchInt(move _464) -> [0: bb363, 1: bb362, otherwise: bb361],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _459),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:206:21: 206:60 (#1474),
                    scope: scope[99],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:206:59: 206:60 (#1475),
                    scope: scope[99],
                },
                kind: falseEdge -> [real: bb364, imaginary: bb363],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_468),
            _468 = ((_459 as Continue).0: ()),
            _458 = _468,
            StorageDead(_468),
            StorageDead(_463),
            StorageDead(_459),
            StorageDead(_458),
            _3 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:205:46: 207:18 (#0),
                    scope: scope[99],
                },
                kind: goto -> bb421,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_465),
            _465 = ((_459 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_467),
            _467 = _465,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:206:21: 206:60 (#1474),
                    scope: scope[141],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _467) -> [return: bb365, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_467),
            StorageDead(_465),
            StorageDead(_463),
            StorageDead(_459),
            StorageDead(_458),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[99],
                },
                kind: goto -> bb452,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_469),
            StorageLive(_470),
            StorageLive(_471),
            StorageLive(_472),
            _472 = &mut ((*_1).0: W),
            StorageLive(_473),
            StorageLive(_474),
            _474 = const "(?-u:\\b{end})",
            _473 = &(*_474),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:209:21: 209:57 (#0),
                    scope: scope[99],
                },
                kind: _471 = <W as core::fmt::Write>::write_str(move _472, move _473) -> [return: bb367, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_473),
            StorageDead(_472),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:209:21: 209:58 (#1476),
                    scope: scope[99],
                },
                kind: _470 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _471) -> [return: bb368, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_471),
            PlaceMention(_470),
            _475 = discriminant(_470),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:209:21: 209:58 (#1476),
                    scope: scope[99],
                },
                kind: switchInt(move _475) -> [0: bb371, 1: bb370, otherwise: bb369],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _470),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:209:21: 209:58 (#1476),
                    scope: scope[99],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:209:57: 209:58 (#1477),
                    scope: scope[99],
                },
                kind: falseEdge -> [real: bb372, imaginary: bb371],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_479),
            _479 = ((_470 as Continue).0: ()),
            _469 = _479,
            StorageDead(_479),
            StorageDead(_474),
            StorageDead(_470),
            StorageDead(_469),
            _3 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:208:44: 210:18 (#0),
                    scope: scope[99],
                },
                kind: goto -> bb421,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_476),
            _476 = ((_470 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_478),
            _478 = _476,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:209:21: 209:58 (#1476),
                    scope: scope[145],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _478) -> [return: bb373, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_478),
            StorageDead(_476),
            StorageDead(_474),
            StorageDead(_470),
            StorageDead(_469),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[99],
                },
                kind: goto -> bb452,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_480),
            StorageLive(_481),
            StorageLive(_482),
            StorageLive(_483),
            _483 = &mut ((*_1).0: W),
            StorageLive(_484),
            StorageLive(_485),
            _485 = const "\\b{start}",
            _484 = &(*_485),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:212:21: 212:53 (#0),
                    scope: scope[99],
                },
                kind: _482 = <W as core::fmt::Write>::write_str(move _483, move _484) -> [return: bb375, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_484),
            StorageDead(_483),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:212:21: 212:54 (#1478),
                    scope: scope[99],
                },
                kind: _481 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _482) -> [return: bb376, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_482),
            PlaceMention(_481),
            _486 = discriminant(_481),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:212:21: 212:54 (#1478),
                    scope: scope[99],
                },
                kind: switchInt(move _486) -> [0: bb379, 1: bb378, otherwise: bb377],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _481),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:212:21: 212:54 (#1478),
                    scope: scope[99],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:212:53: 212:54 (#1479),
                    scope: scope[99],
                },
                kind: falseEdge -> [real: bb380, imaginary: bb379],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_490),
            _490 = ((_481 as Continue).0: ()),
            _480 = _490,
            StorageDead(_490),
            StorageDead(_485),
            StorageDead(_481),
            StorageDead(_480),
            _3 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:211:48: 213:18 (#0),
                    scope: scope[99],
                },
                kind: goto -> bb421,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_487),
            _487 = ((_481 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_489),
            _489 = _487,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:212:21: 212:54 (#1478),
                    scope: scope[149],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _489) -> [return: bb381, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_489),
            StorageDead(_487),
            StorageDead(_485),
            StorageDead(_481),
            StorageDead(_480),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[99],
                },
                kind: goto -> bb452,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_491),
            StorageLive(_492),
            StorageLive(_493),
            StorageLive(_494),
            _494 = &mut ((*_1).0: W),
            StorageLive(_495),
            StorageLive(_496),
            _496 = const "\\b{end}",
            _495 = &(*_496),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:215:21: 215:51 (#0),
                    scope: scope[99],
                },
                kind: _493 = <W as core::fmt::Write>::write_str(move _494, move _495) -> [return: bb383, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_495),
            StorageDead(_494),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:215:21: 215:52 (#1480),
                    scope: scope[99],
                },
                kind: _492 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _493) -> [return: bb384, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_493),
            PlaceMention(_492),
            _497 = discriminant(_492),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:215:21: 215:52 (#1480),
                    scope: scope[99],
                },
                kind: switchInt(move _497) -> [0: bb387, 1: bb386, otherwise: bb385],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _492),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:215:21: 215:52 (#1480),
                    scope: scope[99],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:215:51: 215:52 (#1481),
                    scope: scope[99],
                },
                kind: falseEdge -> [real: bb388, imaginary: bb387],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_501),
            _501 = ((_492 as Continue).0: ()),
            _491 = _501,
            StorageDead(_501),
            StorageDead(_496),
            StorageDead(_492),
            StorageDead(_491),
            _3 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:214:46: 216:18 (#0),
                    scope: scope[99],
                },
                kind: goto -> bb421,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_498),
            _498 = ((_492 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_500),
            _500 = _498,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:215:21: 215:52 (#1480),
                    scope: scope[153],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _500) -> [return: bb389, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_500),
            StorageDead(_498),
            StorageDead(_496),
            StorageDead(_492),
            StorageDead(_491),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[99],
                },
                kind: goto -> bb452,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_502),
            StorageLive(_503),
            StorageLive(_504),
            StorageLive(_505),
            _505 = &mut ((*_1).0: W),
            StorageLive(_506),
            StorageLive(_507),
            _507 = const "(?-u:\\b{start-half})",
            _506 = &(*_507),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:218:21: 218:64 (#0),
                    scope: scope[99],
                },
                kind: _504 = <W as core::fmt::Write>::write_str(move _505, move _506) -> [return: bb391, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_506),
            StorageDead(_505),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:218:21: 218:65 (#1482),
                    scope: scope[99],
                },
                kind: _503 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _504) -> [return: bb392, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_504),
            PlaceMention(_503),
            _508 = discriminant(_503),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:218:21: 218:65 (#1482),
                    scope: scope[99],
                },
                kind: switchInt(move _508) -> [0: bb395, 1: bb394, otherwise: bb393],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _503),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:218:21: 218:65 (#1482),
                    scope: scope[99],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:218:64: 218:65 (#1483),
                    scope: scope[99],
                },
                kind: falseEdge -> [real: bb396, imaginary: bb395],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_512),
            _512 = ((_503 as Continue).0: ()),
            _502 = _512,
            StorageDead(_512),
            StorageDead(_507),
            StorageDead(_503),
            StorageDead(_502),
            _3 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:217:50: 219:18 (#0),
                    scope: scope[99],
                },
                kind: goto -> bb421,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_509),
            _509 = ((_503 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_511),
            _511 = _509,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:218:21: 218:65 (#1482),
                    scope: scope[157],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _511) -> [return: bb397, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_511),
            StorageDead(_509),
            StorageDead(_507),
            StorageDead(_503),
            StorageDead(_502),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[99],
                },
                kind: goto -> bb452,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_513),
            StorageLive(_514),
            StorageLive(_515),
            StorageLive(_516),
            _516 = &mut ((*_1).0: W),
            StorageLive(_517),
            StorageLive(_518),
            _518 = const "(?-u:\\b{end-half})",
            _517 = &(*_518),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:221:21: 221:62 (#0),
                    scope: scope[99],
                },
                kind: _515 = <W as core::fmt::Write>::write_str(move _516, move _517) -> [return: bb399, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_517),
            StorageDead(_516),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:221:21: 221:63 (#1484),
                    scope: scope[99],
                },
                kind: _514 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _515) -> [return: bb400, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_515),
            PlaceMention(_514),
            _519 = discriminant(_514),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:221:21: 221:63 (#1484),
                    scope: scope[99],
                },
                kind: switchInt(move _519) -> [0: bb403, 1: bb402, otherwise: bb401],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _514),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:221:21: 221:63 (#1484),
                    scope: scope[99],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:221:62: 221:63 (#1485),
                    scope: scope[99],
                },
                kind: falseEdge -> [real: bb404, imaginary: bb403],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_523),
            _523 = ((_514 as Continue).0: ()),
            _513 = _523,
            StorageDead(_523),
            StorageDead(_518),
            StorageDead(_514),
            StorageDead(_513),
            _3 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:220:48: 222:18 (#0),
                    scope: scope[99],
                },
                kind: goto -> bb421,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_520),
            _520 = ((_514 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_522),
            _522 = _520,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:221:21: 221:63 (#1484),
                    scope: scope[161],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _522) -> [return: bb405, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_522),
            StorageDead(_520),
            StorageDead(_518),
            StorageDead(_514),
            StorageDead(_513),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[99],
                },
                kind: goto -> bb452,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_524),
            StorageLive(_525),
            StorageLive(_526),
            StorageLive(_527),
            _527 = &mut ((*_1).0: W),
            StorageLive(_528),
            StorageLive(_529),
            _529 = const "\\b{start-half}",
            _528 = &(*_529),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:224:21: 224:58 (#0),
                    scope: scope[99],
                },
                kind: _526 = <W as core::fmt::Write>::write_str(move _527, move _528) -> [return: bb407, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_528),
            StorageDead(_527),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:224:21: 224:59 (#1486),
                    scope: scope[99],
                },
                kind: _525 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _526) -> [return: bb408, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_526),
            PlaceMention(_525),
            _530 = discriminant(_525),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:224:21: 224:59 (#1486),
                    scope: scope[99],
                },
                kind: switchInt(move _530) -> [0: bb411, 1: bb410, otherwise: bb409],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _525),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:224:21: 224:59 (#1486),
                    scope: scope[99],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:224:58: 224:59 (#1487),
                    scope: scope[99],
                },
                kind: falseEdge -> [real: bb412, imaginary: bb411],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_534),
            _534 = ((_525 as Continue).0: ()),
            _524 = _534,
            StorageDead(_534),
            StorageDead(_529),
            StorageDead(_525),
            StorageDead(_524),
            _3 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:223:52: 225:18 (#0),
                    scope: scope[99],
                },
                kind: goto -> bb421,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_531),
            _531 = ((_525 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_533),
            _533 = _531,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:224:21: 224:59 (#1486),
                    scope: scope[165],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _533) -> [return: bb413, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_533),
            StorageDead(_531),
            StorageDead(_529),
            StorageDead(_525),
            StorageDead(_524),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[99],
                },
                kind: goto -> bb452,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_539),
            StorageDead(_538),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:227:21: 227:57 (#1488),
                    scope: scope[99],
                },
                kind: _536 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _537) -> [return: bb415, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_537),
            PlaceMention(_536),
            _541 = discriminant(_536),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:227:21: 227:57 (#1488),
                    scope: scope[99],
                },
                kind: switchInt(move _541) -> [0: bb418, 1: bb417, otherwise: bb416],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _536),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:227:21: 227:57 (#1488),
                    scope: scope[99],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:227:56: 227:57 (#1489),
                    scope: scope[99],
                },
                kind: falseEdge -> [real: bb419, imaginary: bb418],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_545),
            _545 = ((_536 as Continue).0: ()),
            _535 = _545,
            StorageDead(_545),
            StorageDead(_540),
            StorageDead(_536),
            StorageDead(_535),
            _3 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:226:50: 228:18 (#0),
                    scope: scope[99],
                },
                kind: goto -> bb421,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_542),
            _542 = ((_536 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_544),
            _544 = _542,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:227:21: 227:57 (#1488),
                    scope: scope[169],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _544) -> [return: bb420, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_544),
            StorageDead(_542),
            StorageDead(_540),
            StorageDead(_536),
            StorageDead(_535),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[99],
                },
                kind: goto -> bb452,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_346),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:229:13: 229:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb450,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_546),
            _546 = &((((*_4) as Capture).0: hir::Capture).1: core::option::Option<std::boxed::Box<str>>),
            StorageLive(_547),
            StorageLive(_548),
            StorageLive(_549),
            StorageLive(_550),
            _550 = &mut ((*_1).0: W),
            StorageLive(_551),
            StorageLive(_552),
            _552 = const "(",
            _551 = &(*_552),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:231:17: 231:40 (#0),
                    scope: scope[172],
                },
                kind: _549 = <W as core::fmt::Write>::write_str(move _550, move _551) -> [return: bb423, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_551),
            StorageDead(_550),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:231:17: 231:41 (#1490),
                    scope: scope[172],
                },
                kind: _548 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _549) -> [return: bb424, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_549),
            PlaceMention(_548),
            _553 = discriminant(_548),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:231:17: 231:41 (#1490),
                    scope: scope[172],
                },
                kind: switchInt(move _553) -> [0: bb427, 1: bb426, otherwise: bb425],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _548),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:231:17: 231:41 (#1490),
                    scope: scope[172],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:231:40: 231:41 (#1491),
                    scope: scope[172],
                },
                kind: falseEdge -> [real: bb428, imaginary: bb427],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_557),
            _557 = ((_548 as Continue).0: ()),
            _547 = _557,
            StorageDead(_557),
            StorageDead(_552),
            StorageDead(_548),
            StorageDead(_547),
            PlaceMention((*_546)),
            _558 = discriminant((*_546)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:232:24: 232:38 (#0),
                    scope: scope[177],
                },
                kind: switchInt(move _558) -> [1: bb431, otherwise: bb430],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_554),
            _554 = ((_548 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_556),
            _556 = _554,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:231:17: 231:41 (#1490),
                    scope: scope[174],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _556) -> [return: bb429, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_556),
            StorageDead(_554),
            StorageDead(_552),
            StorageDead(_548),
            StorageDead(_547),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[172],
                },
                kind: goto -> bb451,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:232:17: 234:18 (#0),
                    scope: scope[172],
                },
                kind: goto -> bb442,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:232:24: 232:38 (#0),
                    scope: scope[177],
                },
                kind: falseEdge -> [real: bb432, imaginary: bb430],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_559),
            _559 = &(((*_546) as Some).0: std::boxed::Box<str>),
            StorageLive(_560),
            StorageLive(_561),
            StorageLive(_562),
            StorageLive(_563),
            _563 = &mut ((*_1).0: W),
            StorageLive(_564),
            StorageLive(_565),
            StorageLive(_566),
            StorageLive(_567),
            _567 = [const "?P<", const ">"],
            _566 = &_567,
            _565 = &(*_566),
            StorageLive(_568),
            StorageLive(_569),
            StorageLive(_570),
            StorageLive(_571),
            StorageLive(_572),
            StorageLive(_573),
            _573 = &_559,
            _572 = &(*_573),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:233:42: 233:44 (#479),
                    scope: scope[177],
                },
                kind: _571 = core::fmt::rt::Argument::<'_>::new_display::<&std::boxed::Box<str>>(move _572) -> [return: bb433, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_572),
            _570 = [move _571],
            StorageDead(_571),
            _569 = &_570,
            _568 = &(*_569),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:632:24: 632:54 (#479),
                    scope: scope[177],
                },
                kind: _564 = core::fmt::Arguments::<'_>::new_v1::<2, 1>(move _565, move _568) -> [return: bb434, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_568),
            StorageDead(_565),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:632:9: 632:55 (#478),
                    scope: scope[177],
                },
                kind: _562 = <W as core::fmt::Write>::write_fmt(move _563, move _564) -> [return: bb435, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_564),
            StorageDead(_563),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:233:21: 233:54 (#1492),
                    scope: scope[177],
                },
                kind: _561 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _562) -> [return: bb436, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_562),
            PlaceMention(_561),
            _574 = discriminant(_561),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:233:21: 233:54 (#1492),
                    scope: scope[177],
                },
                kind: switchInt(move _574) -> [0: bb439, 1: bb438, otherwise: bb437],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _561),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:233:21: 233:54 (#1492),
                    scope: scope[177],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:233:53: 233:54 (#1493),
                    scope: scope[177],
                },
                kind: falseEdge -> [real: bb440, imaginary: bb439],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_578),
            _578 = ((_561 as Continue).0: ()),
            _560 = _578,
            StorageDead(_578),
            StorageDead(_573),
            StorageDead(_570),
            StorageDead(_569),
            StorageDead(_567),
            StorageDead(_566),
            StorageDead(_561),
            StorageDead(_560),
            _3 = const (),
            StorageDead(_559),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:232:17: 234:18 (#0),
                    scope: scope[172],
                },
                kind: goto -> bb442,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_575),
            _575 = ((_561 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_577),
            _577 = _575,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:233:21: 233:54 (#1492),
                    scope: scope[179],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _577) -> [return: bb441, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_577),
            StorageDead(_575),
            StorageDead(_573),
            StorageDead(_570),
            StorageDead(_569),
            StorageDead(_567),
            StorageDead(_566),
            StorageDead(_561),
            StorageDead(_560),
            StorageDead(_559),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[172],
                },
                kind: goto -> bb451,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_546),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:235:13: 235:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb450,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_583),
            StorageDead(_582),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:250:17: 250:44 (#1494),
                    scope: scope[0],
                },
                kind: _580 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _581) -> [return: bb444, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_581),
            PlaceMention(_580),
            _585 = discriminant(_580),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:250:17: 250:44 (#1494),
                    scope: scope[0],
                },
                kind: switchInt(move _585) -> [0: bb447, 1: bb446, otherwise: bb445],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _580),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:250:17: 250:44 (#1494),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:250:43: 250:44 (#1495),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb448, imaginary: bb447],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_589),
            _589 = ((_580 as Continue).0: ()),
            _579 = _589,
            StorageDead(_589),
            StorageDead(_584),
            StorageDead(_580),
            StorageDead(_579),
            _3 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:249:61: 251:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb450,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_586),
            _586 = ((_580 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_588),
            _588 = _586,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:250:17: 250:44 (#1494),
                    scope: scope[183],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _588) -> [return: bb449, unwind: bb463],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_588),
            StorageDead(_586),
            StorageDead(_584),
            StorageDead(_580),
            StorageDead(_579),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb461,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_590),
            _590 = (),
            _0 = core::result::Result::<(), core::fmt::Error>::Ok(move _590),
            StorageDead(_590),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:254:6: 254:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb462,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_546),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb461,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_346),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb461,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_273),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[70],
                },
                kind: goto -> bb454,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_257),
            StorageDead(_256),
            StorageDead(_253),
            StorageDead(_251),
            StorageDead(_250),
            StorageDead(_249),
            StorageDead(_246),
            StorageDead(_245),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[64],
                },
                kind: goto -> bb455,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_224),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb461,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_149),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[35],
                },
                kind: goto -> bb457,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_133),
            StorageDead(_132),
            StorageDead(_129),
            StorageDead(_127),
            StorageDead(_126),
            StorageDead(_125),
            StorageDead(_122),
            StorageDead(_121),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[29],
                },
                kind: goto -> bb458,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_100),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb461,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb460,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_20),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb461,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:254:6: 254:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb462,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:254:6: 254:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/print.rs:90:5: 254:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:90:43: 90:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut hir::print::Writer<W/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:90:18: 90:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/hir/print.rs:90:34: 90:38 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/print.rs:90:29: 90:32 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:90:29: 90:32 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:90:29: 90:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:91:9: 252:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::HirKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:91:16: 91:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:91:16: 91:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:134:28: 134:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:92:13: 92:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:98:17: 98:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:98:17: 98:45 (#1392),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:98:17: 98:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:98:17: 98:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:98:36: 98:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:98:36: 98:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:98:44: 98:45 (#1393),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _9,
                                ),
                                regex-syntax/src/hir/print.rs:98:17: 98:45 (#1392),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:98:44: 98:45 (#1393),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:98:44: 98:45 (#1393),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:98:44: 98:45 (#1393),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:98:44: 98:45 (#1393),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _9,
                                ),
                                regex-syntax/src/hir/print.rs:98:17: 98:45 (#1392),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:98:17: 98:45 (#1392),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:98:17: 98:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_4),
                                ),
                                regex-syntax/src/hir/print.rs:91:15: 91:26 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:102:13: 102:54 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::boxed::Box<[u8], std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:102:43: 102:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/print.rs:113:30: 113:57 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:113:21: 113:27 (#0),
                    },
                ),
            ),
        ),
        ty: core::result::Result<&'{erased} str, core::str::Utf8Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:113:21: 113:27 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:113:51: 113:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/print.rs:114:27: 114:76 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:114:21: 114:24 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:114:21: 114:24 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<&'{erased} str, core::str::Utf8Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:114:27: 114:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:114:41: 114:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:114:41: 114:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:741 ~ regex_syntax[a00b]::hir::print::{impl#3}::visit_pre::{closure#0}),
            [
                W/#0,
                i32,
                Binder { value: extern "RustCall" fn((&'{erased} str,)) -> usize, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:114:54: 114:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:115:17: 117:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:115:20: 115:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:115:20: 115:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:116:21: 116:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:116:21: 116:48 (#1395),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:116:21: 116:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:116:21: 116:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:116:40: 116:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:116:40: 116:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:116:47: 116:48 (#1396),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _31,
                                ),
                                regex-syntax/src/hir/print.rs:116:21: 116:48 (#1395),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:116:47: 116:48 (#1396),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:116:47: 116:48 (#1396),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:116:47: 116:48 (#1396),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:116:47: 116:48 (#1396),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _31,
                                ),
                                regex-syntax/src/hir/print.rs:116:21: 116:48 (#1395),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:116:21: 116:48 (#1395),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:116:21: 116:48 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:118:17: 129:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:119:21: 119:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _20,
                                ),
                                regex-syntax/src/hir/print.rs:118:23: 118:29 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:119:21: 119:31 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:119:24: 119:30 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/print.rs:120:25: 122:26 (#1397),
                },
            ),
        ),
        ty: core::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:120:34: 120:48 (#1398),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/print.rs:120:25: 122:26 (#1397),
                },
            ),
        ),
        ty: core::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:120:34: 120:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/print.rs:120:25: 122:26 (#1397),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:120:34: 120:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _44,
                                ),
                                regex-syntax/src/hir/print.rs:120:34: 120:48 (#1398),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:120:34: 120:48 (#1398),
                    },
                ),
            ),
        ),
        ty: core::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:120:34: 120:48 (#1398),
            scope: scope[12],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:90:5: 254:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:120:34: 120:48 (#1398),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:120:34: 120:48 (#1398),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:120:34: 120:48 (#1398),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:120:34: 120:48 (#1398),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:120:25: 122:26 (#1397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:120:25: 122:26 (#1397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _50,
                                ),
                                regex-syntax/src/hir/print.rs:120:34: 120:48 (#1398),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:120:29: 120:30 (#1399),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:120:29: 120:30 (#0),
            scope: scope[13],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:121:29: 121:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:121:29: 121:56 (#1400),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:121:29: 121:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hir::print::Writer<W/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:121:29: 121:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:121:53: 121:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:121:55: 121:56 (#1401),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _57,
                                ),
                                regex-syntax/src/hir/print.rs:121:29: 121:56 (#1400),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:121:55: 121:56 (#1401),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:121:55: 121:56 (#1401),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:121:55: 121:56 (#1401),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:121:55: 121:56 (#1401),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _57,
                                ),
                                regex-syntax/src/hir/print.rs:121:29: 121:56 (#1400),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:121:29: 121:56 (#1400),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:121:29: 121:56 (#0),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/print.rs:125:25: 127:26 (#1402),
                },
            ),
        ),
        ty: core::slice::Iter<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:125:35: 125:47 (#1403),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/print.rs:125:25: 127:26 (#1402),
                },
            ),
        ),
        ty: core::slice::Iter<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:125:35: 125:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/print.rs:125:25: 127:26 (#1402),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:125:35: 125:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _66,
                                ),
                                regex-syntax/src/hir/print.rs:125:35: 125:47 (#1403),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:125:35: 125:47 (#1403),
                    },
                ),
            ),
        ),
        ty: core::slice::Iter<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:125:35: 125:47 (#1403),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:125:35: 125:47 (#1403),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:125:35: 125:47 (#1403),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:125:35: 125:47 (#1403),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:125:35: 125:47 (#1403),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:125:25: 127:26 (#1402),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:125:25: 127:26 (#1402),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _71,
                                ),
                                regex-syntax/src/hir/print.rs:125:35: 125:47 (#1403),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:125:29: 125:31 (#1404),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:125:30: 125:31 (#0),
            scope: scope[19],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:126:29: 126:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:126:29: 126:56 (#1405),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:126:29: 126:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hir::print::Writer<W/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:126:29: 126:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:126:53: 126:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:126:55: 126:56 (#1406),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _78,
                                ),
                                regex-syntax/src/hir/print.rs:126:29: 126:56 (#1405),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:126:55: 126:56 (#1406),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:126:55: 126:56 (#1406),
            scope: scope[20],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:126:55: 126:56 (#1406),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:126:55: 126:56 (#1406),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _78,
                                ),
                                regex-syntax/src/hir/print.rs:126:29: 126:56 (#1405),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:126:29: 126:56 (#1405),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:126:29: 126:56 (#0),
            scope: scope[20],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/print.rs:130:17: 132:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:130:20: 130:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/print.rs:130:17: 132:18 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:130:20: 130:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:131:21: 131:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:131:21: 131:46 (#1408),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:131:21: 131:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:131:21: 131:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:131:40: 131:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:131:40: 131:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:131:45: 131:46 (#1409),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _90,
                                ),
                                regex-syntax/src/hir/print.rs:131:21: 131:46 (#1408),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:131:45: 131:46 (#1409),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:131:45: 131:46 (#1409),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:131:45: 131:46 (#1409),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:131:45: 131:46 (#1409),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _90,
                                ),
                                regex-syntax/src/hir/print.rs:131:21: 131:46 (#1408),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:131:21: 131:46 (#1408),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:131:21: 131:46 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_4),
                                ),
                                regex-syntax/src/hir/print.rs:91:15: 91:26 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:134:13: 134:57 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} hir::ClassUnicode,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:134:48: 134:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:135:17: 137:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:135:20: 135:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [hir::ClassUnicodeRange],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:135:20: 135:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [hir::ClassUnicodeRange],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:135:20: 135:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::ClassUnicode,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:135:20: 135:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:135:44: 137:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:136:28: 136:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:136:47: 136:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:136:47: 136:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:138:17: 138:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:138:17: 138:41 (#1411),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:138:17: 138:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:138:17: 138:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:138:36: 138:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:138:36: 138:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:138:40: 138:41 (#1412),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _111,
                                ),
                                regex-syntax/src/hir/print.rs:138:17: 138:41 (#1411),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:138:40: 138:41 (#1412),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:138:40: 138:41 (#1412),
            scope: scope[29],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:138:40: 138:41 (#1412),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:138:40: 138:41 (#1412),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _111,
                                ),
                                regex-syntax/src/hir/print.rs:138:17: 138:41 (#1411),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:138:17: 138:41 (#1411),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:138:17: 138:41 (#0),
            scope: scope[29],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:139:17: 152:18 (#1413),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::ClassUnicodeIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:139:30: 139:40 (#1414),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::ClassUnicodeIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:139:30: 139:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::ClassUnicode,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:139:30: 139:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _122,
                                ),
                                regex-syntax/src/hir/print.rs:139:30: 139:40 (#1414),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:139:30: 139:40 (#1414),
                    },
                ),
            ),
        ),
        ty: hir::ClassUnicodeIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:139:30: 139:40 (#1414),
            scope: scope[29],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:139:30: 139:40 (#1414),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} hir::ClassUnicodeRange>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:139:30: 139:40 (#1414),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hir::ClassUnicodeIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:139:30: 139:40 (#1414),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hir::ClassUnicodeIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:139:30: 139:40 (#1414),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:139:17: 152:18 (#1413),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:139:17: 152:18 (#1413),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _127,
                                ),
                                regex-syntax/src/hir/print.rs:139:30: 139:40 (#1414),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:139:21: 139:26 (#1415),
                    },
                ),
            ),
        ),
        ty: &'{erased} hir::ClassUnicodeRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:139:21: 139:26 (#0),
            scope: scope[34],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/print.rs:140:21: 151:22 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:140:24: 140:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/print.rs:140:21: 151:22 (#0),
                },
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:140:24: 140:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/print.rs:140:21: 151:22 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::ClassUnicodeRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:140:24: 140:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/print.rs:140:21: 151:22 (#0),
                },
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:140:41: 140:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/print.rs:140:21: 151:22 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::ClassUnicodeRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:140:41: 140:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:141:25: 141:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:141:25: 141:64 (#1417),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:141:25: 141:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hir::print::Writer<W/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:141:25: 141:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:141:49: 141:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::ClassUnicodeRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:141:49: 141:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:141:63: 141:64 (#1418),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _139,
                                ),
                                regex-syntax/src/hir/print.rs:141:25: 141:64 (#1417),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:141:63: 141:64 (#1418),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:141:63: 141:64 (#1418),
            scope: scope[35],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:141:63: 141:64 (#1418),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:141:63: 141:64 (#1418),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _139,
                                ),
                                regex-syntax/src/hir/print.rs:141:25: 141:64 (#1417),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:141:25: 141:64 (#1417),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:141:25: 141:64 (#0),
            scope: scope[35],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/print.rs:140:21: 151:22 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:142:31: 143:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/print.rs:140:21: 151:22 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:142:31: 142:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/print.rs:140:21: 151:22 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:142:31: 142:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/print.rs:140:21: 151:22 (#0),
                },
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:142:41: 142:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/print.rs:140:21: 151:22 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::ClassUnicodeRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:142:41: 142:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:142:31: 142:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/print.rs:140:21: 151:22 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:143:28: 143:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/print.rs:140:21: 151:22 (#0),
                },
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:143:38: 143:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/print.rs:140:21: 151:22 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::ClassUnicodeRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:143:38: 143:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:145:25: 145:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:145:25: 145:64 (#1420),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:145:25: 145:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hir::print::Writer<W/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:145:25: 145:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:145:49: 145:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::ClassUnicodeRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:145:49: 145:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:145:63: 145:64 (#1421),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _159,
                                ),
                                regex-syntax/src/hir/print.rs:145:25: 145:64 (#1420),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:145:63: 145:64 (#1421),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:145:63: 145:64 (#1421),
            scope: scope[35],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:145:63: 145:64 (#1421),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:145:63: 145:64 (#1421),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _159,
                                ),
                                regex-syntax/src/hir/print.rs:145:25: 145:64 (#1420),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:145:25: 145:64 (#1420),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:145:25: 145:64 (#0),
            scope: scope[35],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:146:25: 146:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:146:25: 146:62 (#1422),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:146:25: 146:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hir::print::Writer<W/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:146:25: 146:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:146:49: 146:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::ClassUnicodeRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:146:49: 146:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:146:61: 146:62 (#1423),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _170,
                                ),
                                regex-syntax/src/hir/print.rs:146:25: 146:62 (#1422),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:146:61: 146:62 (#1423),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:146:61: 146:62 (#1423),
            scope: scope[35],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:146:61: 146:62 (#1423),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:146:61: 146:62 (#1423),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _170,
                                ),
                                regex-syntax/src/hir/print.rs:146:25: 146:62 (#1422),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:146:25: 146:62 (#1422),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:146:25: 146:62 (#0),
            scope: scope[35],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:148:25: 148:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:148:25: 148:64 (#1424),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:148:25: 148:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hir::print::Writer<W/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:148:25: 148:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:148:49: 148:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::ClassUnicodeRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:148:49: 148:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:148:63: 148:64 (#1425),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _181,
                                ),
                                regex-syntax/src/hir/print.rs:148:25: 148:64 (#1424),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:148:63: 148:64 (#1425),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:148:63: 148:64 (#1425),
            scope: scope[35],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:148:63: 148:64 (#1425),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:148:63: 148:64 (#1425),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _181,
                                ),
                                regex-syntax/src/hir/print.rs:148:25: 148:64 (#1424),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:148:25: 148:64 (#1424),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:148:25: 148:64 (#0),
            scope: scope[35],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:149:25: 149:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:149:25: 149:49 (#1426),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:149:25: 149:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:149:25: 149:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:149:44: 149:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:149:44: 149:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:149:48: 149:49 (#1427),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _192,
                                ),
                                regex-syntax/src/hir/print.rs:149:25: 149:49 (#1426),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:149:48: 149:49 (#1427),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:149:48: 149:49 (#1427),
            scope: scope[35],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:149:48: 149:49 (#1427),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:149:48: 149:49 (#1427),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _192,
                                ),
                                regex-syntax/src/hir/print.rs:149:25: 149:49 (#1426),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:149:25: 149:49 (#1426),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:149:25: 149:49 (#0),
            scope: scope[35],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:150:25: 150:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:150:25: 150:62 (#1428),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:150:25: 150:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hir::print::Writer<W/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:150:25: 150:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:150:49: 150:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::ClassUnicodeRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:150:49: 150:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:150:61: 150:62 (#1429),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _203,
                                ),
                                regex-syntax/src/hir/print.rs:150:25: 150:62 (#1428),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:150:61: 150:62 (#1429),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:150:61: 150:62 (#1429),
            scope: scope[35],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:150:61: 150:62 (#1429),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:150:61: 150:62 (#1429),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _203,
                                ),
                                regex-syntax/src/hir/print.rs:150:25: 150:62 (#1428),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:150:25: 150:62 (#1428),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:150:25: 150:62 (#0),
            scope: scope[35],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:153:17: 153:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:153:17: 153:41 (#1430),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:153:17: 153:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:153:17: 153:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:153:36: 153:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:153:36: 153:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:153:40: 153:41 (#1431),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _214,
                                ),
                                regex-syntax/src/hir/print.rs:153:17: 153:41 (#1430),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:153:40: 153:41 (#1431),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:153:40: 153:41 (#1431),
            scope: scope[29],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:153:40: 153:41 (#1431),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:153:40: 153:41 (#1431),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _214,
                                ),
                                regex-syntax/src/hir/print.rs:153:17: 153:41 (#1430),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:153:17: 153:41 (#1430),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:153:17: 153:41 (#0),
            scope: scope[29],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_4),
                                ),
                                regex-syntax/src/hir/print.rs:91:15: 91:26 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:155:13: 155:55 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} hir::ClassBytes,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:155:46: 155:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:156:17: 158:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:156:20: 156:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [hir::ClassBytesRange],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:156:20: 156:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [hir::ClassBytesRange],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:156:20: 156:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::ClassBytes,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:156:20: 156:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:156:44: 158:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:157:28: 157:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:157:47: 157:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:157:47: 157:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:159:17: 159:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:159:17: 159:46 (#1433),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:159:17: 159:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:159:17: 159:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:159:36: 159:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:159:36: 159:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:159:45: 159:46 (#1434),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _235,
                                ),
                                regex-syntax/src/hir/print.rs:159:17: 159:46 (#1433),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:159:45: 159:46 (#1434),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:159:45: 159:46 (#1434),
            scope: scope[64],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:159:45: 159:46 (#1434),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:159:45: 159:46 (#1434),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _235,
                                ),
                                regex-syntax/src/hir/print.rs:159:17: 159:46 (#1433),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:159:17: 159:46 (#1433),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:159:17: 159:46 (#0),
            scope: scope[64],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:160:17: 171:18 (#1435),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::ClassBytesIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:160:30: 160:40 (#1436),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::ClassBytesIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:160:30: 160:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::ClassBytes,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:160:30: 160:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _246,
                                ),
                                regex-syntax/src/hir/print.rs:160:30: 160:40 (#1436),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:160:30: 160:40 (#1436),
                    },
                ),
            ),
        ),
        ty: hir::ClassBytesIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:160:30: 160:40 (#1436),
            scope: scope[64],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:160:30: 160:40 (#1436),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} hir::ClassBytesRange>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:160:30: 160:40 (#1436),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hir::ClassBytesIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:160:30: 160:40 (#1436),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hir::ClassBytesIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:160:30: 160:40 (#1436),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:160:17: 171:18 (#1435),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:160:17: 171:18 (#1435),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _251,
                                ),
                                regex-syntax/src/hir/print.rs:160:30: 160:40 (#1436),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:160:21: 160:26 (#1437),
                    },
                ),
            ),
        ),
        ty: &'{erased} hir::ClassBytesRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:160:21: 160:26 (#0),
            scope: scope[69],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/print.rs:161:21: 170:22 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:161:24: 161:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/print.rs:161:21: 170:22 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:161:24: 161:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/print.rs:161:21: 170:22 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::ClassBytesRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:161:24: 161:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/print.rs:161:21: 170:22 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:161:41: 161:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/print.rs:161:21: 170:22 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::ClassBytesRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:161:41: 161:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:162:25: 162:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:162:25: 162:70 (#1439),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:162:25: 162:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hir::print::Writer<W/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:162:25: 162:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:162:55: 162:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::ClassBytesRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:162:55: 162:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:162:69: 162:70 (#1440),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _263,
                                ),
                                regex-syntax/src/hir/print.rs:162:25: 162:70 (#1439),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:162:69: 162:70 (#1440),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:162:69: 162:70 (#1440),
            scope: scope[70],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:162:69: 162:70 (#1440),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:162:69: 162:70 (#1440),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _263,
                                ),
                                regex-syntax/src/hir/print.rs:162:25: 162:70 (#1439),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:162:25: 162:70 (#1439),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:162:25: 162:70 (#0),
            scope: scope[70],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/print.rs:161:21: 170:22 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:163:31: 163:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/print.rs:161:21: 170:22 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:163:31: 163:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/print.rs:161:21: 170:22 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:163:31: 163:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/print.rs:161:21: 170:22 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::ClassBytesRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:163:31: 163:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:163:31: 163:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/print.rs:161:21: 170:22 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:163:52: 163:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/print.rs:161:21: 170:22 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::ClassBytesRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:163:52: 163:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:164:25: 164:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:164:25: 164:70 (#1442),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:164:25: 164:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hir::print::Writer<W/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:164:25: 164:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:164:55: 164:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::ClassBytesRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:164:55: 164:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:164:69: 164:70 (#1443),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _281,
                                ),
                                regex-syntax/src/hir/print.rs:164:25: 164:70 (#1442),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:164:69: 164:70 (#1443),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:164:69: 164:70 (#1443),
            scope: scope[70],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:164:69: 164:70 (#1443),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:164:69: 164:70 (#1443),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _281,
                                ),
                                regex-syntax/src/hir/print.rs:164:25: 164:70 (#1442),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:164:25: 164:70 (#1442),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:164:25: 164:70 (#0),
            scope: scope[70],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:165:25: 165:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:165:25: 165:68 (#1444),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:165:25: 165:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hir::print::Writer<W/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:165:25: 165:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:165:55: 165:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::ClassBytesRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:165:55: 165:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:165:67: 165:68 (#1445),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _292,
                                ),
                                regex-syntax/src/hir/print.rs:165:25: 165:68 (#1444),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:165:67: 165:68 (#1445),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:165:67: 165:68 (#1445),
            scope: scope[70],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:165:67: 165:68 (#1445),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:165:67: 165:68 (#1445),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _292,
                                ),
                                regex-syntax/src/hir/print.rs:165:25: 165:68 (#1444),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:165:25: 165:68 (#1444),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:165:25: 165:68 (#0),
            scope: scope[70],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:167:25: 167:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:167:25: 167:70 (#1446),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:167:25: 167:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hir::print::Writer<W/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:167:25: 167:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:167:55: 167:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::ClassBytesRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:167:55: 167:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:167:69: 167:70 (#1447),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _303,
                                ),
                                regex-syntax/src/hir/print.rs:167:25: 167:70 (#1446),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:167:69: 167:70 (#1447),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:167:69: 167:70 (#1447),
            scope: scope[70],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:167:69: 167:70 (#1447),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:167:69: 167:70 (#1447),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _303,
                                ),
                                regex-syntax/src/hir/print.rs:167:25: 167:70 (#1446),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:167:25: 167:70 (#1446),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:167:25: 167:70 (#0),
            scope: scope[70],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:168:25: 168:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:168:25: 168:49 (#1448),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:168:25: 168:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:168:25: 168:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:168:44: 168:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:168:44: 168:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:168:48: 168:49 (#1449),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _314,
                                ),
                                regex-syntax/src/hir/print.rs:168:25: 168:49 (#1448),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:168:48: 168:49 (#1449),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:168:48: 168:49 (#1449),
            scope: scope[70],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:168:48: 168:49 (#1449),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:168:48: 168:49 (#1449),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _314,
                                ),
                                regex-syntax/src/hir/print.rs:168:25: 168:49 (#1448),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:168:25: 168:49 (#1448),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:168:25: 168:49 (#0),
            scope: scope[70],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:169:25: 169:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:169:25: 169:68 (#1450),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:169:25: 169:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hir::print::Writer<W/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:169:25: 169:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:169:55: 169:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::ClassBytesRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:169:55: 169:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:169:67: 169:68 (#1451),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _325,
                                ),
                                regex-syntax/src/hir/print.rs:169:25: 169:68 (#1450),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:169:67: 169:68 (#1451),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:169:67: 169:68 (#1451),
            scope: scope[70],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:169:67: 169:68 (#1451),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:169:67: 169:68 (#1451),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _325,
                                ),
                                regex-syntax/src/hir/print.rs:169:25: 169:68 (#1450),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:169:25: 169:68 (#1450),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:169:25: 169:68 (#0),
            scope: scope[70],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:172:17: 172:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:172:17: 172:42 (#1452),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:172:17: 172:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:172:17: 172:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:172:36: 172:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:172:36: 172:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:172:41: 172:42 (#1453),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _336,
                                ),
                                regex-syntax/src/hir/print.rs:172:17: 172:42 (#1452),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:172:41: 172:42 (#1453),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:172:41: 172:42 (#1453),
            scope: scope[64],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:172:41: 172:42 (#1453),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:172:41: 172:42 (#1453),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _336,
                                ),
                                regex-syntax/src/hir/print.rs:172:17: 172:42 (#1452),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:172:17: 172:42 (#1452),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:172:17: 172:42 (#0),
            scope: scope[64],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_4),
                                ),
                                regex-syntax/src/hir/print.rs:91:15: 91:26 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:174:13: 174:36 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} hir::Look,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:174:27: 174:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:175:17: 175:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:176:21: 176:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:176:21: 176:47 (#1454),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:176:21: 176:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:176:21: 176:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:176:40: 176:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:176:40: 176:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:176:46: 176:47 (#1455),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _349,
                                ),
                                regex-syntax/src/hir/print.rs:176:21: 176:47 (#1454),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:176:46: 176:47 (#1455),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:176:46: 176:47 (#1455),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:176:46: 176:47 (#1455),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:176:46: 176:47 (#1455),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _349,
                                ),
                                regex-syntax/src/hir/print.rs:176:21: 176:47 (#1454),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:176:21: 176:47 (#1454),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:176:21: 176:47 (#0),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:179:21: 179:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:179:21: 179:47 (#1456),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:179:21: 179:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:179:21: 179:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:179:40: 179:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:179:40: 179:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:179:46: 179:47 (#1457),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _360,
                                ),
                                regex-syntax/src/hir/print.rs:179:21: 179:47 (#1456),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:179:46: 179:47 (#1457),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:179:46: 179:47 (#1457),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:179:46: 179:47 (#1457),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:179:46: 179:47 (#1457),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _360,
                                ),
                                regex-syntax/src/hir/print.rs:179:21: 179:47 (#1456),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:179:21: 179:47 (#1456),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:179:21: 179:47 (#0),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:182:21: 182:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:182:21: 182:50 (#1458),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:182:21: 182:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:182:21: 182:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:182:40: 182:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:182:40: 182:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:182:49: 182:50 (#1459),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _371,
                                ),
                                regex-syntax/src/hir/print.rs:182:21: 182:50 (#1458),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:182:49: 182:50 (#1459),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:182:49: 182:50 (#1459),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:182:49: 182:50 (#1459),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:182:49: 182:50 (#1459),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _371,
                                ),
                                regex-syntax/src/hir/print.rs:182:21: 182:50 (#1458),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:182:21: 182:50 (#1458),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:182:21: 182:50 (#0),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:185:21: 185:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:185:21: 185:50 (#1460),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:185:21: 185:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:185:21: 185:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:185:40: 185:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:185:40: 185:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:185:49: 185:50 (#1461),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _382,
                                ),
                                regex-syntax/src/hir/print.rs:185:21: 185:50 (#1460),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:185:49: 185:50 (#1461),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:185:49: 185:50 (#1461),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:185:49: 185:50 (#1461),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:185:49: 185:50 (#1461),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _382,
                                ),
                                regex-syntax/src/hir/print.rs:185:21: 185:50 (#1460),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:185:21: 185:50 (#1460),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:185:21: 185:50 (#0),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:188:21: 188:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:188:21: 188:51 (#1462),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:188:21: 188:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:188:21: 188:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:188:40: 188:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:188:40: 188:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:188:50: 188:51 (#1463),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _393,
                                ),
                                regex-syntax/src/hir/print.rs:188:21: 188:51 (#1462),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:188:50: 188:51 (#1463),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:188:50: 188:51 (#1463),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:188:50: 188:51 (#1463),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:188:50: 188:51 (#1463),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _393,
                                ),
                                regex-syntax/src/hir/print.rs:188:21: 188:51 (#1462),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:188:21: 188:51 (#1462),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:188:21: 188:51 (#0),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:191:21: 191:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:191:21: 191:51 (#1464),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:191:21: 191:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:191:21: 191:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:191:40: 191:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:191:40: 191:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:191:50: 191:51 (#1465),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _404,
                                ),
                                regex-syntax/src/hir/print.rs:191:21: 191:51 (#1464),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:191:50: 191:51 (#1465),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:191:50: 191:51 (#1465),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:191:50: 191:51 (#1465),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:191:50: 191:51 (#1465),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _404,
                                ),
                                regex-syntax/src/hir/print.rs:191:21: 191:51 (#1464),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:191:21: 191:51 (#1464),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:191:21: 191:51 (#0),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:194:21: 194:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:194:21: 194:53 (#1466),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:194:21: 194:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:194:21: 194:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:194:40: 194:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:194:40: 194:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:194:52: 194:53 (#1467),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _415,
                                ),
                                regex-syntax/src/hir/print.rs:194:21: 194:53 (#1466),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:194:52: 194:53 (#1467),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:194:52: 194:53 (#1467),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:194:52: 194:53 (#1467),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:194:52: 194:53 (#1467),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _415,
                                ),
                                regex-syntax/src/hir/print.rs:194:21: 194:53 (#1466),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:194:21: 194:53 (#1466),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:194:21: 194:53 (#0),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:197:21: 197:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:197:21: 197:53 (#1468),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:197:21: 197:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:197:21: 197:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:197:40: 197:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:197:40: 197:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:197:52: 197:53 (#1469),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _426,
                                ),
                                regex-syntax/src/hir/print.rs:197:21: 197:53 (#1468),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:197:52: 197:53 (#1469),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:197:52: 197:53 (#1469),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:197:52: 197:53 (#1469),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:197:52: 197:53 (#1469),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _426,
                                ),
                                regex-syntax/src/hir/print.rs:197:21: 197:53 (#1468),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:197:21: 197:53 (#1468),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:197:21: 197:53 (#0),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:200:21: 200:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:200:21: 200:47 (#1470),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:200:21: 200:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:200:21: 200:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:200:40: 200:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:200:40: 200:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:200:46: 200:47 (#1471),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _437,
                                ),
                                regex-syntax/src/hir/print.rs:200:21: 200:47 (#1470),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:200:46: 200:47 (#1471),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:200:46: 200:47 (#1471),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:200:46: 200:47 (#1471),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:200:46: 200:47 (#1471),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _437,
                                ),
                                regex-syntax/src/hir/print.rs:200:21: 200:47 (#1470),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:200:21: 200:47 (#1470),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:200:21: 200:47 (#0),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:203:21: 203:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:203:21: 203:47 (#1472),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:203:21: 203:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:203:21: 203:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:203:40: 203:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:203:40: 203:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:203:46: 203:47 (#1473),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _448,
                                ),
                                regex-syntax/src/hir/print.rs:203:21: 203:47 (#1472),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:203:46: 203:47 (#1473),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:203:46: 203:47 (#1473),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:203:46: 203:47 (#1473),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:203:46: 203:47 (#1473),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _448,
                                ),
                                regex-syntax/src/hir/print.rs:203:21: 203:47 (#1472),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:203:21: 203:47 (#1472),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:203:21: 203:47 (#0),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:206:21: 206:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:206:21: 206:60 (#1474),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:206:21: 206:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:206:21: 206:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:206:40: 206:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:206:40: 206:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:206:59: 206:60 (#1475),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _459,
                                ),
                                regex-syntax/src/hir/print.rs:206:21: 206:60 (#1474),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:206:59: 206:60 (#1475),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:206:59: 206:60 (#1475),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:206:59: 206:60 (#1475),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:206:59: 206:60 (#1475),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _459,
                                ),
                                regex-syntax/src/hir/print.rs:206:21: 206:60 (#1474),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:206:21: 206:60 (#1474),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:206:21: 206:60 (#0),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:209:21: 209:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:209:21: 209:58 (#1476),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:209:21: 209:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:209:21: 209:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:209:40: 209:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:209:40: 209:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:209:57: 209:58 (#1477),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _470,
                                ),
                                regex-syntax/src/hir/print.rs:209:21: 209:58 (#1476),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:209:57: 209:58 (#1477),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:209:57: 209:58 (#1477),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:209:57: 209:58 (#1477),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:209:57: 209:58 (#1477),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _470,
                                ),
                                regex-syntax/src/hir/print.rs:209:21: 209:58 (#1476),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:209:21: 209:58 (#1476),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:209:21: 209:58 (#0),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:212:21: 212:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:212:21: 212:54 (#1478),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:212:21: 212:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:212:21: 212:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:212:40: 212:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:212:40: 212:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:212:53: 212:54 (#1479),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _481,
                                ),
                                regex-syntax/src/hir/print.rs:212:21: 212:54 (#1478),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:212:53: 212:54 (#1479),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:212:53: 212:54 (#1479),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:212:53: 212:54 (#1479),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:212:53: 212:54 (#1479),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _481,
                                ),
                                regex-syntax/src/hir/print.rs:212:21: 212:54 (#1478),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:212:21: 212:54 (#1478),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:212:21: 212:54 (#0),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:215:21: 215:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:215:21: 215:52 (#1480),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:215:21: 215:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:215:21: 215:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:215:40: 215:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:215:40: 215:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:215:51: 215:52 (#1481),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _492,
                                ),
                                regex-syntax/src/hir/print.rs:215:21: 215:52 (#1480),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:215:51: 215:52 (#1481),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:215:51: 215:52 (#1481),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:215:51: 215:52 (#1481),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:215:51: 215:52 (#1481),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _492,
                                ),
                                regex-syntax/src/hir/print.rs:215:21: 215:52 (#1480),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:215:21: 215:52 (#1480),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:215:21: 215:52 (#0),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:218:21: 218:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:218:21: 218:65 (#1482),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:218:21: 218:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:218:21: 218:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:218:40: 218:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:218:40: 218:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:218:64: 218:65 (#1483),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _503,
                                ),
                                regex-syntax/src/hir/print.rs:218:21: 218:65 (#1482),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:218:64: 218:65 (#1483),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:218:64: 218:65 (#1483),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:218:64: 218:65 (#1483),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:218:64: 218:65 (#1483),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _503,
                                ),
                                regex-syntax/src/hir/print.rs:218:21: 218:65 (#1482),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:218:21: 218:65 (#1482),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:218:21: 218:65 (#0),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:221:21: 221:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:221:21: 221:63 (#1484),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:221:21: 221:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:221:21: 221:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:221:40: 221:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:221:40: 221:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:221:62: 221:63 (#1485),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _514,
                                ),
                                regex-syntax/src/hir/print.rs:221:21: 221:63 (#1484),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:221:62: 221:63 (#1485),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:221:62: 221:63 (#1485),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:221:62: 221:63 (#1485),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:221:62: 221:63 (#1485),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _514,
                                ),
                                regex-syntax/src/hir/print.rs:221:21: 221:63 (#1484),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:221:21: 221:63 (#1484),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:221:21: 221:63 (#0),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:224:21: 224:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:224:21: 224:59 (#1486),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:224:21: 224:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:224:21: 224:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:224:40: 224:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:224:40: 224:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:224:58: 224:59 (#1487),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _525,
                                ),
                                regex-syntax/src/hir/print.rs:224:21: 224:59 (#1486),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:224:58: 224:59 (#1487),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:224:58: 224:59 (#1487),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:224:58: 224:59 (#1487),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:224:58: 224:59 (#1487),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _525,
                                ),
                                regex-syntax/src/hir/print.rs:224:21: 224:59 (#1486),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:224:21: 224:59 (#1486),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:224:21: 224:59 (#0),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:227:21: 227:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:227:21: 227:57 (#1488),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:227:21: 227:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:227:21: 227:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:227:40: 227:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:227:40: 227:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:227:56: 227:57 (#1489),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _536,
                                ),
                                regex-syntax/src/hir/print.rs:227:21: 227:57 (#1488),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:227:56: 227:57 (#1489),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:227:56: 227:57 (#1489),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:227:56: 227:57 (#1489),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:227:56: 227:57 (#1489),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _536,
                                ),
                                regex-syntax/src/hir/print.rs:227:21: 227:57 (#1488),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:227:21: 227:57 (#1488),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:227:21: 227:57 (#0),
            scope: scope[99],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_4),
                                ),
                                regex-syntax/src/hir/print.rs:91:15: 91:26 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:230:13: 230:60 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} core::option::Option<std::boxed::Box<str, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:230:45: 230:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:231:17: 231:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:231:17: 231:41 (#1490),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:231:17: 231:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:231:17: 231:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:231:36: 231:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:231:36: 231:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:231:40: 231:41 (#1491),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _548,
                                ),
                                regex-syntax/src/hir/print.rs:231:17: 231:41 (#1490),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:231:40: 231:41 (#1491),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:231:40: 231:41 (#1491),
            scope: scope[172],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:231:40: 231:41 (#1491),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:231:40: 231:41 (#1491),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _548,
                                ),
                                regex-syntax/src/hir/print.rs:231:17: 231:41 (#1490),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:231:17: 231:41 (#1490),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:231:17: 231:41 (#0),
            scope: scope[172],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:232:24: 232:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_546),
                                ),
                                regex-syntax/src/hir/print.rs:232:41: 232:46 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:232:24: 232:38 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::boxed::Box<str, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:232:29: 232:37 (#0),
            scope: scope[177],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:233:21: 233:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:233:21: 233:54 (#1492),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:632:9: 632:55 (#478),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:233:28: 233:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::fmt::Arguments<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:632:24: 632:54 (#479),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:233:38: 233:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:233:38: 233:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [&'{erased} str; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:233:38: 233:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::fmt::rt::Argument<'{erased}>; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:632:24: 632:54 (#479),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::fmt::rt::Argument<'{erased}>; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:632:24: 632:54 (#479),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [core::fmt::rt::Argument<'{erased}>; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:632:24: 632:54 (#479),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::fmt::rt::Argument<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:233:42: 233:44 (#479),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} std::boxed::Box<str, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:233:48: 233:52 (#479),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} std::boxed::Box<str, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:233:48: 233:52 (#479),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:233:53: 233:54 (#1493),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _561,
                                ),
                                regex-syntax/src/hir/print.rs:233:21: 233:54 (#1492),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:233:53: 233:54 (#1493),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:233:53: 233:54 (#1493),
            scope: scope[177],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:233:53: 233:54 (#1493),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:233:53: 233:54 (#1493),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _561,
                                ),
                                regex-syntax/src/hir/print.rs:233:21: 233:54 (#1492),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:233:21: 233:54 (#1492),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:233:21: 233:54 (#0),
            scope: scope[177],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:250:17: 250:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:250:17: 250:44 (#1494),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:250:17: 250:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:250:17: 250:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:250:36: 250:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:250:36: 250:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:250:43: 250:44 (#1495),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _580,
                                ),
                                regex-syntax/src/hir/print.rs:250:17: 250:44 (#1494),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:250:43: 250:44 (#1495),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:250:43: 250:44 (#1495),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:250:43: 250:44 (#1495),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:250:43: 250:44 (#1495),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _580,
                                ),
                                regex-syntax/src/hir/print.rs:250:17: 250:44 (#1494),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/print.rs:250:17: 250:44 (#1494),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:250:17: 250:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/print.rs:253:12: 253:14 (#0),
            scope: scope[0],
        },
    },
]