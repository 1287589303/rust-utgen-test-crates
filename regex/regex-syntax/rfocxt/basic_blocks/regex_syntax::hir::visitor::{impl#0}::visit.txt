[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = &mut ((*_1).0: std::vec::Vec<(&hir::Hir, hir::visitor::Frame<'_>)>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:114:9: 114:27 (#0),
                    scope: scope[0],
                },
                kind: _4 = std::vec::Vec::<(&hir::Hir, hir::visitor::Frame<'_>)>::clear(move _5) -> [return: bb1, unwind: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &mut _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:116:9: 116:24 (#0),
                    scope: scope[0],
                },
                kind: _6 = <V as hir::visitor::Visitor>::start(move _7) -> [return: bb2, unwind: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageLive(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:117:9: 156:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:117:9: 156:10 (#0),
                    scope: scope[0],
                },
                kind: falseUnwind -> [real: bb4, unwind: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &mut _3,
            StorageLive(_14),
            _14 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:118:13: 118:35 (#0),
                    scope: scope[0],
                },
                kind: _12 = <V as hir::visitor::Visitor>::visit_pre(move _13, move _14) -> [return: bb5, unwind: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:118:13: 118:36 (#1654),
                    scope: scope[0],
                },
                kind: _11 = <core::result::Result<(), <V as hir::visitor::Visitor>::Err> as core::ops::Try>::branch(move _12) -> [return: bb6, unwind: bb105],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            PlaceMention(_11),
            _15 = discriminant(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:118:13: 118:36 (#1654),
                    scope: scope[0],
                },
                kind: switchInt(move _15) -> [0: bb9, 1: bb8, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:118:13: 118:36 (#1654),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:118:35: 118:36 (#1655),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_19),
            _19 = ((_11 as Continue).0: ()),
            _10 = _19,
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:118:36: 118:37 (#0),
                    scope: scope[0],
                },
                kind: drop(_11) -> [return: bb12, unwind: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = move ((_11 as Break).0: core::result::Result<core::convert::Infallible, <V as hir::visitor::Visitor>::Err>),
            StorageLive(_18),
            _18 = move _16,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:118:13: 118:36 (#1654),
                    scope: scope[2],
                },
                kind: _0 = <core::result::Result<<V as hir::visitor::Visitor>::Output, <V as hir::visitor::Visitor>::Err> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, <V as hir::visitor::Visitor>::Err>>>::from_residual(move _18) -> [return: bb11, unwind: bb102],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:118:35: 118:36 (#1655),
                    scope: scope[0],
                },
                kind: drop(_16) -> [return: bb81, unwind: bb104],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            _22 = &mut (*_1),
            StorageLive(_23),
            _23 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:119:30: 119:46 (#0),
                    scope: scope[5],
                },
                kind: _21 = hir::visitor::HeapVisitor::<'_>::induct(move _22, move _23) -> [return: bb13, unwind: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_22),
            PlaceMention(_21),
            _24 = discriminant(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:119:20: 119:27 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _24) -> [1: bb14, otherwise: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:119:20: 119:27 (#0),
                    scope: scope[5],
                },
                kind: falseEdge -> [real: bb15, imaginary: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_25),
            _25 = move ((_21 as Some).0: hir::visitor::Frame<'_>),
            StorageLive(_27),
            StorageLive(_28),
            _28 = &_25,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:120:29: 120:38 (#0),
                    scope: scope[5],
                },
                kind: _27 = hir::visitor::Frame::<'_>::child(move _28) -> [return: bb16, unwind: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            FakeRead(ForLet(None), _27),
            StorageLive(_29),
            StorageLive(_30),
            _30 = &mut ((*_1).0: std::vec::Vec<(&hir::Hir, hir::visitor::Frame<'_>)>),
            StorageLive(_31),
            StorageLive(_32),
            _32 = _2,
            StorageLive(_33),
            _33 = move _25,
            _31 = (move _32, move _33),
            StorageDead(_33),
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:121:17: 121:42 (#0),
                    scope: scope[6],
                },
                kind: _29 = std::vec::Vec::<(&hir::Hir, hir::visitor::Frame<'_>)>::push(move _30, move _31) -> [return: bb17, unwind: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_30),
            StorageDead(_29),
            StorageLive(_34),
            _34 = &(*_27),
            _2 = move _34,
            StorageDead(_34),
            StorageDead(_27),
            StorageDead(_25),
            StorageDead(_21),
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _20 = const (),
            StorageDead(_21),
            StorageDead(_20),
            StorageLive(_35),
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            _38 = &mut _3,
            StorageLive(_39),
            _39 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:127:13: 127:36 (#0),
                    scope: scope[0],
                },
                kind: _37 = <V as hir::visitor::Visitor>::visit_post(move _38, move _39) -> [return: bb19, unwind: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:127:13: 127:37 (#1656),
                    scope: scope[0],
                },
                kind: _36 = <core::result::Result<(), <V as hir::visitor::Visitor>::Err> as core::ops::Try>::branch(move _37) -> [return: bb20, unwind: bb101],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            PlaceMention(_36),
            _40 = discriminant(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:127:13: 127:37 (#1656),
                    scope: scope[0],
                },
                kind: switchInt(move _40) -> [0: bb23, 1: bb22, otherwise: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:127:13: 127:37 (#1656),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:127:36: 127:37 (#1657),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb24, imaginary: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_44),
            _44 = ((_36 as Continue).0: ()),
            _35 = _44,
            StorageDead(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:127:37: 127:38 (#0),
                    scope: scope[0],
                },
                kind: drop(_36) -> [return: bb26, unwind: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_41),
            _41 = move ((_36 as Break).0: core::result::Result<core::convert::Infallible, <V as hir::visitor::Visitor>::Err>),
            StorageLive(_43),
            _43 = move _41,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:127:13: 127:37 (#1656),
                    scope: scope[8],
                },
                kind: _0 = <core::result::Result<<V as hir::visitor::Visitor>::Output, <V as hir::visitor::Visitor>::Err> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, <V as hir::visitor::Visitor>::Err>>>::from_residual(move _43) -> [return: bb25, unwind: bb98],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:127:36: 127:37 (#1657),
                    scope: scope[0],
                },
                kind: drop(_41) -> [return: bb79, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:131:13: 155:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:131:13: 155:14 (#0),
                    scope: scope[0],
                },
                kind: falseUnwind -> [real: bb28, unwind: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_47),
            StorageLive(_48),
            StorageLive(_49),
            _49 = &mut ((*_1).0: std::vec::Vec<(&hir::Hir, hir::visitor::Frame<'_>)>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:132:47: 132:63 (#0),
                    scope: scope[0],
                },
                kind: _48 = std::vec::Vec::<(&hir::Hir, hir::visitor::Frame<'_>)>::pop(move _49) -> [return: bb29, unwind: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_49),
            PlaceMention(_48),
            _50 = discriminant(_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:132:41: 132:63 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _50) -> [0: bb31, 1: bb32, otherwise: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:132:47: 132:63 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:133:21: 133:25 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb33, imaginary: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_53),
            _53 = (((_48 as Some).0: (&hir::Hir, hir::visitor::Frame<'_>)).0: &hir::Hir),
            StorageLive(_54),
            _54 = move (((_48 as Some).0: (&hir::Hir, hir::visitor::Frame<'_>)).1: hir::visitor::Frame<'_>),
            StorageLive(_55),
            _55 = _53,
            StorageLive(_56),
            _56 = move _54,
            _47 = (move _55, move _56),
            StorageDead(_56),
            StorageDead(_55),
            StorageDead(_54),
            StorageDead(_53),
            PlaceMention(_47),
            StorageLive(_45),
            _45 = (_47.0: &hir::Hir),
            StorageLive(_46),
            _46 = move (_47.1: hir::visitor::Frame<'_>),
            StorageDead(_48),
            StorageDead(_47),
            StorageLive(_57),
            StorageLive(_58),
            StorageLive(_59),
            _59 = &(*_1),
            StorageLive(_60),
            _60 = move _46,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:138:34: 138:49 (#0),
                    scope: scope[13],
                },
                kind: _58 = hir::visitor::HeapVisitor::<'_>::pop(move _59, move _60) -> [return: bb35, unwind: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_52),
            _52 = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:133:36: 133:52 (#0),
                    scope: scope[0],
                },
                kind: _0 = <V as hir::visitor::Visitor>::finish(move _52) -> [return: bb34, unwind: bb97],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            StorageDead(_48),
            StorageDead(_47),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb83,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
            StorageDead(_59),
            PlaceMention(_58),
            _61 = discriminant(_58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:138:24: 138:31 (#0),
                    scope: scope[13],
                },
                kind: switchInt(move _61) -> [1: bb36, otherwise: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:138:24: 138:31 (#0),
                    scope: scope[13],
                },
                kind: falseEdge -> [real: bb37, imaginary: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_62),
            _62 = move ((_58 as Some).0: hir::visitor::Frame<'_>),
            StorageLive(_64),
            PlaceMention(_62),
            _65 = discriminant(_62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:139:21: 139:28 (#0),
                    scope: scope[13],
                },
                kind: switchInt(move _65) -> [2: bb40, 3: bb39, otherwise: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _64 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:146:30: 146:32 (#0),
                    scope: scope[13],
                },
                kind: goto -> bb59,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:140:25: 140:50 (#0),
                    scope: scope[13],
                },
                kind: falseEdge -> [real: bb41, imaginary: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:143:25: 143:45 (#0),
                    scope: scope[13],
                },
                kind: falseEdge -> [real: bb50, imaginary: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_66),
            StorageLive(_67),
            StorageLive(_68),
            StorageLive(_69),
            _69 = &mut _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:141:29: 141:59 (#0),
                    scope: scope[13],
                },
                kind: _68 = <V as hir::visitor::Visitor>::visit_alternation_in(move _69) -> [return: bb42, unwind: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_69),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:141:29: 141:60 (#1658),
                    scope: scope[13],
                },
                kind: _67 = <core::result::Result<(), <V as hir::visitor::Visitor>::Err> as core::ops::Try>::branch(move _68) -> [return: bb43, unwind: bb96],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_68),
            PlaceMention(_67),
            _70 = discriminant(_67),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:141:29: 141:60 (#1658),
                    scope: scope[13],
                },
                kind: switchInt(move _70) -> [0: bb46, 1: bb45, otherwise: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _67),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:141:29: 141:60 (#1658),
                    scope: scope[13],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:141:59: 141:60 (#1659),
                    scope: scope[13],
                },
                kind: falseEdge -> [real: bb47, imaginary: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_74),
            _74 = ((_67 as Continue).0: ()),
            _66 = _74,
            StorageDead(_74),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:141:60: 141:61 (#0),
                    scope: scope[13],
                },
                kind: drop(_67) -> [return: bb49, unwind: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_71),
            _71 = move ((_67 as Break).0: core::result::Result<core::convert::Infallible, <V as hir::visitor::Visitor>::Err>),
            StorageLive(_73),
            _73 = move _71,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:141:29: 141:60 (#1658),
                    scope: scope[15],
                },
                kind: _0 = <core::result::Result<<V as hir::visitor::Visitor>::Output, <V as hir::visitor::Visitor>::Err> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, <V as hir::visitor::Visitor>::Err>>>::from_residual(move _73) -> [return: bb48, unwind: bb93],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:141:59: 141:60 (#1659),
                    scope: scope[13],
                },
                kind: drop(_71) -> [return: bb75, unwind: bb95],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_67),
            StorageDead(_66),
            _64 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:140:54: 142:26 (#0),
                    scope: scope[13],
                },
                kind: goto -> bb59,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_75),
            StorageLive(_76),
            StorageLive(_77),
            StorageLive(_78),
            _78 = &mut _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:144:29: 144:54 (#0),
                    scope: scope[13],
                },
                kind: _77 = <V as hir::visitor::Visitor>::visit_concat_in(move _78) -> [return: bb51, unwind: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_78),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:144:29: 144:55 (#1660),
                    scope: scope[13],
                },
                kind: _76 = <core::result::Result<(), <V as hir::visitor::Visitor>::Err> as core::ops::Try>::branch(move _77) -> [return: bb52, unwind: bb92],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_77),
            PlaceMention(_76),
            _79 = discriminant(_76),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:144:29: 144:55 (#1660),
                    scope: scope[13],
                },
                kind: switchInt(move _79) -> [0: bb55, 1: bb54, otherwise: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _76),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:144:29: 144:55 (#1660),
                    scope: scope[13],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:144:54: 144:55 (#1661),
                    scope: scope[13],
                },
                kind: falseEdge -> [real: bb56, imaginary: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_83),
            _83 = ((_76 as Continue).0: ()),
            _75 = _83,
            StorageDead(_83),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:144:55: 144:56 (#0),
                    scope: scope[13],
                },
                kind: drop(_76) -> [return: bb58, unwind: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_80),
            _80 = move ((_76 as Break).0: core::result::Result<core::convert::Infallible, <V as hir::visitor::Visitor>::Err>),
            StorageLive(_82),
            _82 = move _80,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:144:29: 144:55 (#1660),
                    scope: scope[19],
                },
                kind: _0 = <core::result::Result<<V as hir::visitor::Visitor>::Output, <V as hir::visitor::Visitor>::Err> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, <V as hir::visitor::Visitor>::Err>>>::from_residual(move _82) -> [return: bb57, unwind: bb89],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_82),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:144:54: 144:55 (#1661),
                    scope: scope[13],
                },
                kind: drop(_80) -> [return: bb73, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_76),
            StorageDead(_75),
            _64 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:143:49: 145:26 (#0),
                    scope: scope[13],
                },
                kind: goto -> bb59,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
            StorageLive(_84),
            StorageLive(_85),
            StorageLive(_86),
            _86 = &_62,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:148:27: 148:36 (#0),
                    scope: scope[13],
                },
                kind: _85 = hir::visitor::Frame::<'_>::child(move _86) -> [return: bb60, unwind: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _84 = &(*_85),
            StorageDead(_86),
            _2 = move _84,
            StorageDead(_84),
            StorageDead(_85),
            StorageLive(_87),
            StorageLive(_88),
            _88 = &mut ((*_1).0: std::vec::Vec<(&hir::Hir, hir::visitor::Frame<'_>)>),
            StorageLive(_89),
            StorageLive(_90),
            _90 = &(*_45),
            StorageLive(_91),
            _91 = move _62,
            _89 = (move _90, move _91),
            StorageDead(_91),
            StorageDead(_90),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:149:21: 149:51 (#0),
                    scope: scope[13],
                },
                kind: _87 = std::vec::Vec::<(&hir::Hir, hir::visitor::Frame<'_>)>::push(move _88, move _89) -> [return: bb61, unwind: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_89),
            StorageDead(_88),
            StorageDead(_87),
            _9 = const (),
            StorageDead(_62),
            StorageDead(_58),
            StorageDead(_57),
            StorageDead(_46),
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:117:9: 156:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _57 = const (),
            StorageDead(_58),
            StorageDead(_57),
            StorageLive(_92),
            StorageLive(_93),
            StorageLive(_94),
            StorageLive(_95),
            _95 = &mut _3,
            StorageLive(_96),
            _96 = &(*_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:154:17: 154:45 (#0),
                    scope: scope[11],
                },
                kind: _94 = <V as hir::visitor::Visitor>::visit_post(move _95, move _96) -> [return: bb63, unwind: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_96),
            StorageDead(_95),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:154:17: 154:46 (#1662),
                    scope: scope[11],
                },
                kind: _93 = <core::result::Result<(), <V as hir::visitor::Visitor>::Err> as core::ops::Try>::branch(move _94) -> [return: bb64, unwind: bb88],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_94),
            PlaceMention(_93),
            _97 = discriminant(_93),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:154:17: 154:46 (#1662),
                    scope: scope[11],
                },
                kind: switchInt(move _97) -> [0: bb67, 1: bb66, otherwise: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _93),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:154:17: 154:46 (#1662),
                    scope: scope[11],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:154:45: 154:46 (#1663),
                    scope: scope[11],
                },
                kind: falseEdge -> [real: bb68, imaginary: bb67],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_101),
            _101 = ((_93 as Continue).0: ()),
            _92 = _101,
            StorageDead(_101),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:154:46: 154:47 (#0),
                    scope: scope[11],
                },
                kind: drop(_93) -> [return: bb70, unwind: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_98),
            _98 = move ((_93 as Break).0: core::result::Result<core::convert::Infallible, <V as hir::visitor::Visitor>::Err>),
            StorageLive(_100),
            _100 = move _98,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:154:17: 154:46 (#1662),
                    scope: scope[23],
                },
                kind: _0 = <core::result::Result<<V as hir::visitor::Visitor>::Output, <V as hir::visitor::Visitor>::Err> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, <V as hir::visitor::Visitor>::Err>>>::from_residual(move _100) -> [return: bb69, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_100),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:154:45: 154:46 (#1663),
                    scope: scope[11],
                },
                kind: drop(_98) -> [return: bb71, unwind: bb87],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_93),
            StorageDead(_92),
            _9 = const (),
            StorageDead(_46),
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:131:13: 155:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_98),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:154:46: 154:47 (#0),
                    scope: scope[11],
                },
                kind: drop(_93) -> [return: bb72, unwind: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_93),
            StorageDead(_92),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[11],
                },
                kind: goto -> bb78,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_80),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:144:55: 144:56 (#0),
                    scope: scope[13],
                },
                kind: drop(_76) -> [return: bb74, unwind: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_76),
            StorageDead(_75),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[13],
                },
                kind: goto -> bb77,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:141:60: 141:61 (#0),
                    scope: scope[13],
                },
                kind: drop(_67) -> [return: bb76, unwind: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_67),
            StorageDead(_66),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[13],
                },
                kind: goto -> bb77,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
            StorageDead(_62),
            StorageDead(_58),
            StorageDead(_57),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[11],
                },
                kind: goto -> bb78,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb83,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:127:37: 127:38 (#0),
                    scope: scope[0],
                },
                kind: drop(_36) -> [return: bb80, unwind: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb83,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:118:36: 118:37 (#0),
                    scope: scope[0],
                },
                kind: drop(_11) -> [return: bb82, unwind: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb83,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:157:5: 157:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb84, unwind: bb107],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:157:6: 157:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:154:45: 154:46 (#1662),
                    scope: scope[23],
                },
                kind: drop(_100) -> [return: bb86, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:154:45: 154:46 (#1663),
                    scope: scope[11],
                },
                kind: drop(_98) -> [return: bb87, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:154:46: 154:47 (#0),
                    scope: scope[11],
                },
                kind: drop(_93) -> [return: bb106, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:154:45: 154:46 (#1662),
                    scope: scope[11],
                },
                kind: drop(_94) -> [return: bb106, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:144:54: 144:55 (#1660),
                    scope: scope[19],
                },
                kind: drop(_82) -> [return: bb90, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:144:54: 144:55 (#1661),
                    scope: scope[13],
                },
                kind: drop(_80) -> [return: bb91, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:144:55: 144:56 (#0),
                    scope: scope[13],
                },
                kind: drop(_76) -> [return: bb106, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:144:54: 144:55 (#1660),
                    scope: scope[13],
                },
                kind: drop(_77) -> [return: bb106, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:141:59: 141:60 (#1658),
                    scope: scope[15],
                },
                kind: drop(_73) -> [return: bb94, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:141:59: 141:60 (#1659),
                    scope: scope[13],
                },
                kind: drop(_71) -> [return: bb95, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:141:60: 141:61 (#0),
                    scope: scope[13],
                },
                kind: drop(_67) -> [return: bb106, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:141:59: 141:60 (#1658),
                    scope: scope[13],
                },
                kind: drop(_68) -> [return: bb106, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:133:51: 133:52 (#0),
                    scope: scope[0],
                },
                kind: drop(_52) -> [return: bb106, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:127:36: 127:37 (#1656),
                    scope: scope[8],
                },
                kind: drop(_43) -> [return: bb99, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:127:36: 127:37 (#1657),
                    scope: scope[0],
                },
                kind: drop(_41) -> [return: bb100, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:127:37: 127:38 (#0),
                    scope: scope[0],
                },
                kind: drop(_36) -> [return: bb106, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:127:36: 127:37 (#1656),
                    scope: scope[0],
                },
                kind: drop(_37) -> [return: bb106, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:118:35: 118:36 (#1654),
                    scope: scope[2],
                },
                kind: drop(_18) -> [return: bb103, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:118:35: 118:36 (#1655),
                    scope: scope[0],
                },
                kind: drop(_16) -> [return: bb104, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:118:36: 118:37 (#0),
                    scope: scope[0],
                },
                kind: drop(_11) -> [return: bb106, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:118:35: 118:36 (#1654),
                    scope: scope[0],
                },
                kind: drop(_12) -> [return: bb106, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:157:5: 157:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb107, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:109:5: 157:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:882 ~ regex_syntax[a00b]::hir::visitor::Visitor::Output) }), Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:883 ~ regex_syntax[a00b]::hir::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:113:10: 113:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut hir::visitor::HeapVisitor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:110:9: 110:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/hir/visitor.rs:111:18: 111:25 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/visitor.rs:111:9: 111:16 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/visitor.rs:111:9: 111:16 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:111:9: 111:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/hir/visitor.rs:112:22: 112:23 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/visitor.rs:112:9: 112:20 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/visitor.rs:112:9: 112:20 (#0),
                    },
                ),
            ),
        ),
        ty: V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:112:9: 112:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:114:9: 114:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<(&'{erased} hir::Hir, hir::visitor::Frame<'{erased}>), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:114:9: 114:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:116:9: 116:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:116:9: 116:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/visitor.rs:117:9: 156:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:117:9: 156:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:109:5: 157:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:118:13: 118:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:883 ~ regex_syntax[a00b]::hir::visitor::Visitor::Err) })>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:118:13: 118:36 (#1654),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:883 ~ regex_syntax[a00b]::hir::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:118:13: 118:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:118:13: 118:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:118:31: 118:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:118:35: 118:36 (#1655),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _11,
                                ),
                                regex-syntax/src/hir/visitor.rs:118:13: 118:36 (#1654),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/visitor.rs:118:35: 118:36 (#1655),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:883 ~ regex_syntax[a00b]::hir::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:118:35: 118:36 (#1655),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:118:35: 118:36 (#1655),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:883 ~ regex_syntax[a00b]::hir::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:118:35: 118:36 (#1655),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _11,
                                ),
                                regex-syntax/src/hir/visitor.rs:118:13: 118:36 (#1654),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/visitor.rs:118:13: 118:36 (#1654),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:118:13: 118:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:119:13: 124:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<hir::visitor::Frame<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:119:30: 119:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hir::visitor::HeapVisitor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:119:30: 119:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:119:42: 119:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:119:20: 119:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _21,
                                ),
                                regex-syntax/src/hir/visitor.rs:119:30: 119:46 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/visitor.rs:119:20: 119:27 (#0),
                    },
                ),
            ),
        ),
        ty: hir::visitor::Frame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:119:25: 119:26 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:119:47: 124:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/visitor.rs:120:29: 120:38 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/visitor.rs:120:21: 120:26 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:120:21: 120:26 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::visitor::Frame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:120:29: 120:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:121:17: 121:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<(&'{erased} hir::Hir, hir::visitor::Frame<'{erased}>), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:121:17: 121:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} hir::Hir, hir::visitor::Frame<'{erased}>),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:121:33: 121:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:121:34: 121:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::visitor::Frame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:121:39: 121:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:122:23: 122:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:127:13: 127:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:883 ~ regex_syntax[a00b]::hir::visitor::Visitor::Err) })>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:127:13: 127:37 (#1656),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:883 ~ regex_syntax[a00b]::hir::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:127:13: 127:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:127:13: 127:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:127:32: 127:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:127:36: 127:37 (#1657),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _36,
                                ),
                                regex-syntax/src/hir/visitor.rs:127:13: 127:37 (#1656),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/visitor.rs:127:36: 127:37 (#1657),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:883 ~ regex_syntax[a00b]::hir::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:127:36: 127:37 (#1657),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:127:36: 127:37 (#1657),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:883 ~ regex_syntax[a00b]::hir::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:127:36: 127:37 (#1657),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _36,
                                ),
                                regex-syntax/src/hir/visitor.rs:127:13: 127:37 (#1656),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/visitor.rs:127:13: 127:37 (#1656),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:127:13: 127:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _47,
                                ),
                                regex-syntax/src/hir/visitor.rs:132:41: 135:18 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/visitor.rs:132:21: 132:38 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:132:22: 132:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _47,
                                ),
                                regex-syntax/src/hir/visitor.rs:132:41: 135:18 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/visitor.rs:132:21: 132:38 (#0),
                    },
                ),
            ),
        ),
        ty: hir::visitor::Frame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:132:32: 132:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} hir::Hir, hir::visitor::Frame<'{erased}>),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:132:41: 135:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(&'{erased} hir::Hir, hir::visitor::Frame<'{erased}>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:132:47: 132:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<(&'{erased} hir::Hir, hir::visitor::Frame<'{erased}>), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:132:47: 132:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:133:21: 133:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:133:29: 133:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:133:36: 133:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _48,
                                ),
                                regex-syntax/src/hir/visitor.rs:132:47: 132:63 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/visitor.rs:134:21: 134:44 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:134:27: 134:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _48,
                                ),
                                regex-syntax/src/hir/visitor.rs:132:47: 132:63 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/visitor.rs:134:21: 134:44 (#0),
                    },
                ),
            ),
        ),
        ty: hir::visitor::Frame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:134:37: 134:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:134:49: 134:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::visitor::Frame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:134:59: 134:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:138:17: 151:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<hir::visitor::Frame<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:138:34: 138:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::visitor::HeapVisitor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:138:34: 138:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::visitor::Frame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:138:43: 138:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:138:24: 138:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _58,
                                ),
                                regex-syntax/src/hir/visitor.rs:138:34: 138:49 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/visitor.rs:138:24: 138:31 (#0),
                    },
                ),
            ),
        ),
        ty: hir::visitor::Frame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:138:29: 138:30 (#0),
            scope: scope[13],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:138:50: 151:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:139:21: 147:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:140:25: 140:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:141:29: 141:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:883 ~ regex_syntax[a00b]::hir::visitor::Visitor::Err) })>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:141:29: 141:60 (#1658),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:883 ~ regex_syntax[a00b]::hir::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:141:29: 141:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:141:29: 141:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:141:59: 141:60 (#1659),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _67,
                                ),
                                regex-syntax/src/hir/visitor.rs:141:29: 141:60 (#1658),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/visitor.rs:141:59: 141:60 (#1659),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:883 ~ regex_syntax[a00b]::hir::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:141:59: 141:60 (#1659),
            scope: scope[13],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:141:59: 141:60 (#1659),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:883 ~ regex_syntax[a00b]::hir::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:141:59: 141:60 (#1659),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _67,
                                ),
                                regex-syntax/src/hir/visitor.rs:141:29: 141:60 (#1658),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/visitor.rs:141:29: 141:60 (#1658),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:141:29: 141:60 (#0),
            scope: scope[13],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:144:29: 144:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:883 ~ regex_syntax[a00b]::hir::visitor::Visitor::Err) })>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:144:29: 144:55 (#1660),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:883 ~ regex_syntax[a00b]::hir::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:144:29: 144:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:144:29: 144:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:144:54: 144:55 (#1661),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _76,
                                ),
                                regex-syntax/src/hir/visitor.rs:144:29: 144:55 (#1660),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/visitor.rs:144:54: 144:55 (#1661),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:883 ~ regex_syntax[a00b]::hir::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:144:54: 144:55 (#1661),
            scope: scope[13],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:144:54: 144:55 (#1661),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:883 ~ regex_syntax[a00b]::hir::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:144:54: 144:55 (#1661),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _76,
                                ),
                                regex-syntax/src/hir/visitor.rs:144:29: 144:55 (#1660),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/visitor.rs:144:29: 144:55 (#1660),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:144:29: 144:55 (#0),
            scope: scope[13],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:148:27: 148:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:148:27: 148:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::visitor::Frame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:148:27: 148:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:149:21: 149:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<(&'{erased} hir::Hir, hir::visitor::Frame<'{erased}>), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:149:21: 149:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} hir::Hir, hir::visitor::Frame<'{erased}>),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:149:37: 149:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:149:38: 149:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::visitor::Frame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:149:48: 149:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:154:17: 154:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:883 ~ regex_syntax[a00b]::hir::visitor::Visitor::Err) })>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:154:17: 154:46 (#1662),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:883 ~ regex_syntax[a00b]::hir::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:154:17: 154:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:154:17: 154:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:154:36: 154:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:154:45: 154:46 (#1663),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _93,
                                ),
                                regex-syntax/src/hir/visitor.rs:154:17: 154:46 (#1662),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/visitor.rs:154:45: 154:46 (#1663),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:883 ~ regex_syntax[a00b]::hir::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:154:45: 154:46 (#1663),
            scope: scope[11],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:154:45: 154:46 (#1663),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:883 ~ regex_syntax[a00b]::hir::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:154:45: 154:46 (#1663),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _93,
                                ),
                                regex-syntax/src/hir/visitor.rs:154:17: 154:46 (#1662),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/visitor.rs:154:17: 154:46 (#1662),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:154:17: 154:46 (#0),
            scope: scope[11],
        },
    },
]