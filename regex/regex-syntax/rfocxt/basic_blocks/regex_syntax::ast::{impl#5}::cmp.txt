[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &((*_1).0: ast::Position),
            StorageLive(_6),
            _6 = &((*_1).1: ast::Position),
            _4 = (move _5, move _6),
            _3 = &_4,
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &((*_2).0: ast::Position),
            _10 = &(*_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &((*_2).1: ast::Position),
            _12 = &(*_13),
            _9 = (move _10, move _12),
            StorageDead(_12),
            StorageDead(_10),
            _8 = &_9,
            _7 = &(*_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:334:9: 334:66 (#0),
                    scope: scope[0],
                },
                kind: _0 = <(&ast::Position, &ast::Position) as core::cmp::Ord>::cmp(move _3, move _7) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_3),
            StorageDead(_13),
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:335:6: 335:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:333:5: 335:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::cmp::Ordering,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:333:36: 333:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} ast::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:333:12: 333:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/ast/mod.rs:333:26: 333:31 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/ast/mod.rs:333:19: 333:24 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/mod.rs:333:19: 333:24 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} ast::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:333:19: 333:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/mod.rs:334:9: 334:66 (#0),
                },
            ),
        ),
        ty: &'{erased} (&'{erased} ast::Position, &'{erased} ast::Position),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:334:9: 334:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/mod.rs:334:9: 334:66 (#0),
                },
            ),
        ),
        ty: (&'{erased} ast::Position, &'{erased} ast::Position),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:334:9: 334:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/mod.rs:334:9: 334:66 (#0),
                },
            ),
        ),
        ty: &'{erased} ast::Position,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:334:10: 334:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/mod.rs:334:9: 334:66 (#0),
                },
            ),
        ),
        ty: &'{erased} ast::Position,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:334:23: 334:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/mod.rs:334:9: 334:66 (#0),
                },
            ),
        ),
        ty: &'{erased} (&'{erased} ast::Position, &'{erased} ast::Position),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:334:38: 334:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/mod.rs:334:9: 334:66 (#0),
                },
            ),
        ),
        ty: &'{erased} (&'{erased} ast::Position, &'{erased} ast::Position),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:334:38: 334:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/mod.rs:334:9: 334:66 (#0),
                },
            ),
        ),
        ty: (&'{erased} ast::Position, &'{erased} ast::Position),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:334:39: 334:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/mod.rs:334:9: 334:66 (#0),
                },
            ),
        ),
        ty: &'{erased} ast::Position,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:334:40: 334:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/mod.rs:334:9: 334:66 (#0),
                },
            ),
        ),
        ty: &'{erased} ast::Position,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:334:40: 334:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/mod.rs:334:9: 334:66 (#0),
                },
            ),
        ),
        ty: &'{erased} ast::Position,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:334:54: 334:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/mod.rs:334:9: 334:66 (#0),
                },
            ),
        ),
        ty: &'{erased} ast::Position,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:334:54: 334:64 (#0),
            scope: scope[0],
        },
    },
]