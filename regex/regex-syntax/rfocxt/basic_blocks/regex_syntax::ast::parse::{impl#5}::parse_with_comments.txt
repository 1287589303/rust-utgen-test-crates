[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:983:20: 983:33 (#0),
                    scope: scope[0],
                },
                kind: _5 = ast::parse::ParserI::<'_, P>::offset(move _6) -> [return: bb1, unwind: bb265],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            _4 = &_5,
            StorageLive(_7),
            StorageLive(_8),
            _8 = const 0_usize,
            _7 = &_8,
            _3 = (move _4, move _7),
            StorageDead(_7),
            StorageDead(_4),
            PlaceMention(_3),
            StorageLive(_9),
            _9 = (_3.0: &usize),
            StorageLive(_10),
            _10 = (_3.1: &usize),
            StorageLive(_11),
            StorageLive(_12),
            _12 = (*_9),
            StorageLive(_13),
            _13 = (*_10),
            _11 = Eq(move _12, move _13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:53:21: 53:46 (#54),
                    scope: scope[1],
                },
                kind: switchInt(move _11) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            _2 = const (),
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_5),
            StorageDead(_3),
            StorageDead(_2),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            _30 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:984:9: 984:22 (#0),
                    scope: scope[0],
                },
                kind: _29 = ast::parse::ParserI::<'_, P>::parser(move _30) -> [return: bb5, unwind: bb265],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            StorageLive(_15),
            _15 = core::panicking::AssertKind::Eq,
            FakeRead(ForLet(None), _15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = move _15,
            StorageLive(_18),
            StorageLive(_19),
            _19 = &(*_9),
            _18 = &(*_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &(*_10),
            _20 = &(*_21),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            _26 = [const "parser can only be used once"],
            _25 = &_26,
            _24 = &(*_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:58:114: 58:144 (#55),
                    scope: scope[2],
                },
                kind: _23 = core::fmt::Arguments::<'_>::new_const::<1>(move _24) -> [return: bb4, unwind: bb265],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            _22 = core::option::Option::<core::fmt::Arguments<'_>>::Some(move _23),
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:58:21: 58:146 (#54),
                    scope: scope[2],
                },
                kind: _16 = core::panicking::assert_failed::<usize, usize>(move _17, move _18, move _20, move _22) -> bb265,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _28 = &(*_29),
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:984:9: 984:30 (#0),
                    scope: scope[0],
                },
                kind: _27 = ast::parse::Parser::reset(move _28) -> [return: bb6, unwind: bb265],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_29),
            StorageDead(_27),
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            _33 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:985:46: 985:57 (#0),
                    scope: scope[0],
                },
                kind: _32 = ast::parse::ParserI::<'_, P>::span(move _33) -> [return: bb7, unwind: bb265],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageLive(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9: 44:32 (#56),
                    scope: scope[0],
                },
                kind: _34 = std::vec::Vec::<ast::Ast>::new() -> [return: bb8, unwind: bb265],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _31 = ast::Concat { span: move _32, asts: move _34 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:985:72: 985:73 (#0),
                    scope: scope[0],
                },
                kind: drop(_34) -> [return: bb9, unwind: bb265],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_32),
            FakeRead(ForLet(None), _31),
            StorageLive(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:986:9: 1022:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:986:9: 1022:10 (#0),
                    scope: scope[3],
                },
                kind: falseUnwind -> [real: bb11, unwind: bb264],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_37),
            StorageLive(_38),
            _38 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:987:13: 987:30 (#0),
                    scope: scope[3],
                },
                kind: _37 = ast::parse::ParserI::<'_, P>::bump_space(move _38) -> [return: bb12, unwind: bb264],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            StorageDead(_37),
            StorageLive(_39),
            StorageLive(_40),
            StorageLive(_41),
            _41 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:988:16: 988:29 (#0),
                    scope: scope[3],
                },
                kind: _40 = ast::parse::ParserI::<'_, P>::is_eof(move _41) -> [return: bb13, unwind: bb264],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:988:16: 988:29 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _40) -> [0: bb15, otherwise: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            _35 = const (),
            StorageDead(_40),
            StorageDead(_39),
            StorageDead(_35),
            StorageLive(_142),
            StorageLive(_143),
            StorageLive(_144),
            StorageLive(_145),
            _145 = &(*_1),
            StorageLive(_146),
            _146 = move _31,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1023:19: 1023:45 (#0),
                    scope: scope[3],
                },
                kind: _144 = ast::parse::ParserI::<'_, P>::pop_group_end(move _145, move _146) -> [return: bb142, unwind: bb215],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            _39 = const (),
            StorageDead(_40),
            StorageDead(_39),
            StorageLive(_43),
            StorageLive(_44),
            _44 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:991:19: 991:30 (#0),
                    scope: scope[3],
                },
                kind: _43 = ast::parse::ParserI::<'_, P>::char(move _44) -> [return: bb16, unwind: bb264],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            PlaceMention(_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:991:13: 991:30 (#0),
                    scope: scope[3],
                },
                kind: switchInt(_43) -> [40: bb18, 41: bb19, 124: bb20, 91: bb21, 63: bb22, 42: bb23, 43: bb24, 123: bb25, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_131),
            _131 = &mut (_31.1: std::vec::Vec<ast::Ast>),
            StorageLive(_132),
            StorageLive(_133),
            StorageLive(_134),
            StorageLive(_135),
            StorageLive(_136),
            _136 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1020:39: 1020:61 (#0),
                    scope: scope[3],
                },
                kind: _135 = ast::parse::ParserI::<'_, P>::parse_primitive(move _136) -> [return: bb130, unwind: bb264],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:992:17: 992:20 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb26, imaginary: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:993:17: 993:20 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb39, imaginary: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:994:17: 994:20 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb52, imaginary: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:995:17: 995:20 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb65, imaginary: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:999:17: 999:20 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb78, imaginary: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1005:17: 1005:20 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb91, imaginary: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1011:17: 1011:20 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb104, imaginary: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1017:17: 1017:20 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb117, imaginary: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_45),
            StorageLive(_46),
            StorageLive(_47),
            StorageLive(_48),
            _48 = &(*_1),
            StorageLive(_49),
            _49 = move _31,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:992:33: 992:56 (#0),
                    scope: scope[3],
                },
                kind: _47 = ast::parse::ParserI::<'_, P>::push_group(move _48, move _49) -> [return: bb27, unwind: bb263],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_49),
            StorageDead(_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:992:33: 992:57 (#871),
                    scope: scope[3],
                },
                kind: _46 = <core::result::Result<ast::Concat, ast::Error> as core::ops::Try>::branch(move _47) -> [return: bb28, unwind: bb262],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            PlaceMention(_46),
            _50 = discriminant(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:992:33: 992:57 (#871),
                    scope: scope[3],
                },
                kind: switchInt(move _50) -> [0: bb31, 1: bb30, otherwise: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:992:33: 992:57 (#871),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:992:56: 992:57 (#872),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb32, imaginary: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_54),
            _54 = move ((_46 as Continue).0: ast::Concat),
            _45 = move _54,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:992:56: 992:57 (#0),
                    scope: scope[3],
                },
                kind: drop(_54) -> [return: bb34, unwind: bb261],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_51),
            _51 = move ((_46 as Break).0: core::result::Result<core::convert::Infallible, ast::Error>),
            StorageLive(_53),
            _53 = move _51,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:992:33: 992:57 (#871),
                    scope: scope[5],
                },
                kind: _0 = <core::result::Result<ast::WithComments, ast::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, ast::Error>>>::from_residual(move _53) -> [return: bb33, unwind: bb259],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_53),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:992:56: 992:57 (#872),
                    scope: scope[3],
                },
                kind: drop(_51) -> [return: bb192, unwind: bb261],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:992:24: 992:30 (#0),
                    scope: scope[3],
                },
                kind: drop(_31) -> [return: bb35, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _31 = move _45,
            _36 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:992:56: 992:57 (#0),
                    scope: scope[3],
                },
                kind: drop(_45) -> [return: bb37, unwind: bb261],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _31 = move _45,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:992:56: 992:57 (#0),
                    scope: scope[3],
                },
                kind: drop(_45) -> [return: bb261, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:992:56: 992:57 (#0),
                    scope: scope[3],
                },
                kind: drop(_46) -> [return: bb38, unwind: bb264],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:992:56: 992:57 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb141,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_55),
            StorageLive(_56),
            StorageLive(_57),
            StorageLive(_58),
            _58 = &(*_1),
            StorageLive(_59),
            _59 = move _31,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:993:33: 993:55 (#0),
                    scope: scope[3],
                },
                kind: _57 = ast::parse::ParserI::<'_, P>::pop_group(move _58, move _59) -> [return: bb40, unwind: bb258],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
            StorageDead(_58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:993:33: 993:56 (#873),
                    scope: scope[3],
                },
                kind: _56 = <core::result::Result<ast::Concat, ast::Error> as core::ops::Try>::branch(move _57) -> [return: bb41, unwind: bb257],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_57),
            PlaceMention(_56),
            _60 = discriminant(_56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:993:33: 993:56 (#873),
                    scope: scope[3],
                },
                kind: switchInt(move _60) -> [0: bb44, 1: bb43, otherwise: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:993:33: 993:56 (#873),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:993:55: 993:56 (#874),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb45, imaginary: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_64),
            _64 = move ((_56 as Continue).0: ast::Concat),
            _55 = move _64,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:993:55: 993:56 (#0),
                    scope: scope[3],
                },
                kind: drop(_64) -> [return: bb47, unwind: bb256],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_61),
            _61 = move ((_56 as Break).0: core::result::Result<core::convert::Infallible, ast::Error>),
            StorageLive(_63),
            _63 = move _61,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:993:33: 993:56 (#873),
                    scope: scope[9],
                },
                kind: _0 = <core::result::Result<ast::WithComments, ast::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, ast::Error>>>::from_residual(move _63) -> [return: bb46, unwind: bb254],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:993:55: 993:56 (#874),
                    scope: scope[3],
                },
                kind: drop(_61) -> [return: bb190, unwind: bb256],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:993:24: 993:30 (#0),
                    scope: scope[3],
                },
                kind: drop(_31) -> [return: bb48, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _31 = move _55,
            _36 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:993:55: 993:56 (#0),
                    scope: scope[3],
                },
                kind: drop(_55) -> [return: bb50, unwind: bb256],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _31 = move _55,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:993:55: 993:56 (#0),
                    scope: scope[3],
                },
                kind: drop(_55) -> [return: bb256, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:993:55: 993:56 (#0),
                    scope: scope[3],
                },
                kind: drop(_56) -> [return: bb51, unwind: bb264],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:993:55: 993:56 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb141,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_65),
            StorageLive(_66),
            StorageLive(_67),
            StorageLive(_68),
            _68 = &(*_1),
            StorageLive(_69),
            _69 = move _31,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:994:33: 994:60 (#0),
                    scope: scope[3],
                },
                kind: _67 = ast::parse::ParserI::<'_, P>::push_alternate(move _68, move _69) -> [return: bb53, unwind: bb253],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_69),
            StorageDead(_68),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:994:33: 994:61 (#875),
                    scope: scope[3],
                },
                kind: _66 = <core::result::Result<ast::Concat, ast::Error> as core::ops::Try>::branch(move _67) -> [return: bb54, unwind: bb252],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_67),
            PlaceMention(_66),
            _70 = discriminant(_66),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:994:33: 994:61 (#875),
                    scope: scope[3],
                },
                kind: switchInt(move _70) -> [0: bb57, 1: bb56, otherwise: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _66),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:994:33: 994:61 (#875),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:994:60: 994:61 (#876),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb58, imaginary: bb57],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_74),
            _74 = move ((_66 as Continue).0: ast::Concat),
            _65 = move _74,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:994:60: 994:61 (#0),
                    scope: scope[3],
                },
                kind: drop(_74) -> [return: bb60, unwind: bb251],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_71),
            _71 = move ((_66 as Break).0: core::result::Result<core::convert::Infallible, ast::Error>),
            StorageLive(_73),
            _73 = move _71,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:994:33: 994:61 (#875),
                    scope: scope[13],
                },
                kind: _0 = <core::result::Result<ast::WithComments, ast::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, ast::Error>>>::from_residual(move _73) -> [return: bb59, unwind: bb249],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:994:60: 994:61 (#876),
                    scope: scope[3],
                },
                kind: drop(_71) -> [return: bb188, unwind: bb251],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_74),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:994:24: 994:30 (#0),
                    scope: scope[3],
                },
                kind: drop(_31) -> [return: bb61, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _31 = move _65,
            _36 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:994:60: 994:61 (#0),
                    scope: scope[3],
                },
                kind: drop(_65) -> [return: bb63, unwind: bb251],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _31 = move _65,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:994:60: 994:61 (#0),
                    scope: scope[3],
                },
                kind: drop(_65) -> [return: bb251, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_65),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:994:60: 994:61 (#0),
                    scope: scope[3],
                },
                kind: drop(_66) -> [return: bb64, unwind: bb264],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_66),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:994:60: 994:61 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb141,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_75),
            StorageLive(_76),
            StorageLive(_77),
            StorageLive(_78),
            _78 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:996:33: 996:55 (#0),
                    scope: scope[3],
                },
                kind: _77 = ast::parse::ParserI::<'_, P>::parse_set_class(move _78) -> [return: bb66, unwind: bb264],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_78),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:996:33: 996:56 (#877),
                    scope: scope[3],
                },
                kind: _76 = <core::result::Result<ast::ClassBracketed, ast::Error> as core::ops::Try>::branch(move _77) -> [return: bb67, unwind: bb248],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_77),
            PlaceMention(_76),
            _79 = discriminant(_76),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:996:33: 996:56 (#877),
                    scope: scope[3],
                },
                kind: switchInt(move _79) -> [0: bb70, 1: bb69, otherwise: bb68],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _76),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:996:33: 996:56 (#877),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:996:55: 996:56 (#878),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb71, imaginary: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_83),
            _83 = move ((_76 as Continue).0: ast::ClassBracketed),
            _75 = move _83,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:996:55: 996:56 (#0),
                    scope: scope[3],
                },
                kind: drop(_83) -> [return: bb73, unwind: bb247],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_80),
            _80 = move ((_76 as Break).0: core::result::Result<core::convert::Infallible, ast::Error>),
            StorageLive(_82),
            _82 = move _80,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:996:33: 996:56 (#877),
                    scope: scope[18],
                },
                kind: _0 = <core::result::Result<ast::WithComments, ast::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, ast::Error>>>::from_residual(move _82) -> [return: bb72, unwind: bb245],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_82),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:996:55: 996:56 (#878),
                    scope: scope[3],
                },
                kind: drop(_80) -> [return: bb186, unwind: bb247],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_83),
            FakeRead(ForLet(None), _75),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:996:56: 996:57 (#0),
                    scope: scope[3],
                },
                kind: drop(_76) -> [return: bb74, unwind: bb244],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_76),
            StorageLive(_84),
            StorageLive(_85),
            _85 = &mut (_31.1: std::vec::Vec<ast::Ast>),
            StorageLive(_86),
            StorageLive(_87),
            _87 = move _75,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:997:38: 997:65 (#0),
                    scope: scope[16],
                },
                kind: _86 = ast::Ast::class_bracketed(move _87) -> [return: bb75, unwind: bb243],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_87),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:997:21: 997:66 (#0),
                    scope: scope[16],
                },
                kind: _84 = std::vec::Vec::<ast::Ast>::push(move _85, move _86) -> [return: bb76, unwind: bb242],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_86),
            StorageDead(_85),
            StorageDead(_84),
            _36 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:998:17: 998:18 (#0),
                    scope: scope[3],
                },
                kind: drop(_75) -> [return: bb77, unwind: bb264],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_75),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:998:17: 998:18 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb141,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_88),
            StorageLive(_89),
            StorageLive(_90),
            StorageLive(_91),
            _91 = &(*_1),
            StorageLive(_92),
            _92 = move _31,
            StorageLive(_93),
            _93 = ast::RepetitionKind::ZeroOrOne,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1000:30: 1003:22 (#0),
                    scope: scope[3],
                },
                kind: _90 = ast::parse::ParserI::<'_, P>::parse_uncounted_repetition(move _91, move _92, move _93) -> [return: bb79, unwind: bb241],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_93),
            StorageDead(_92),
            StorageDead(_91),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1000:30: 1003:23 (#879),
                    scope: scope[3],
                },
                kind: _89 = <core::result::Result<ast::Concat, ast::Error> as core::ops::Try>::branch(move _90) -> [return: bb80, unwind: bb240],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_90),
            PlaceMention(_89),
            _94 = discriminant(_89),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1000:30: 1003:23 (#879),
                    scope: scope[3],
                },
                kind: switchInt(move _94) -> [0: bb83, 1: bb82, otherwise: bb81],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _89),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1000:30: 1003:23 (#879),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1003:22: 1003:23 (#880),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb84, imaginary: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_98),
            _98 = move ((_89 as Continue).0: ast::Concat),
            _88 = move _98,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1003:22: 1003:23 (#0),
                    scope: scope[3],
                },
                kind: drop(_98) -> [return: bb86, unwind: bb239],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_95),
            _95 = move ((_89 as Break).0: core::result::Result<core::convert::Infallible, ast::Error>),
            StorageLive(_97),
            _97 = move _95,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1000:30: 1003:23 (#879),
                    scope: scope[22],
                },
                kind: _0 = <core::result::Result<ast::WithComments, ast::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, ast::Error>>>::from_residual(move _97) -> [return: bb85, unwind: bb237],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_97),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1003:22: 1003:23 (#880),
                    scope: scope[3],
                },
                kind: drop(_95) -> [return: bb184, unwind: bb239],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_98),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1000:21: 1000:27 (#0),
                    scope: scope[3],
                },
                kind: drop(_31) -> [return: bb87, unwind: bb88],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _31 = move _88,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1003:22: 1003:23 (#0),
                    scope: scope[3],
                },
                kind: drop(_88) -> [return: bb89, unwind: bb239],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _31 = move _88,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1003:22: 1003:23 (#0),
                    scope: scope[3],
                },
                kind: drop(_88) -> [return: bb239, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_88),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1003:23: 1003:24 (#0),
                    scope: scope[3],
                },
                kind: drop(_89) -> [return: bb90, unwind: bb264],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_89),
            _36 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:999:24: 1004:18 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb141,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_99),
            StorageLive(_100),
            StorageLive(_101),
            StorageLive(_102),
            _102 = &(*_1),
            StorageLive(_103),
            _103 = move _31,
            StorageLive(_104),
            _104 = ast::RepetitionKind::ZeroOrMore,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1006:30: 1009:22 (#0),
                    scope: scope[3],
                },
                kind: _101 = ast::parse::ParserI::<'_, P>::parse_uncounted_repetition(move _102, move _103, move _104) -> [return: bb92, unwind: bb236],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_104),
            StorageDead(_103),
            StorageDead(_102),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1006:30: 1009:23 (#881),
                    scope: scope[3],
                },
                kind: _100 = <core::result::Result<ast::Concat, ast::Error> as core::ops::Try>::branch(move _101) -> [return: bb93, unwind: bb235],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_101),
            PlaceMention(_100),
            _105 = discriminant(_100),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1006:30: 1009:23 (#881),
                    scope: scope[3],
                },
                kind: switchInt(move _105) -> [0: bb96, 1: bb95, otherwise: bb94],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _100),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1006:30: 1009:23 (#881),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1009:22: 1009:23 (#882),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb97, imaginary: bb96],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_109),
            _109 = move ((_100 as Continue).0: ast::Concat),
            _99 = move _109,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1009:22: 1009:23 (#0),
                    scope: scope[3],
                },
                kind: drop(_109) -> [return: bb99, unwind: bb234],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_106),
            _106 = move ((_100 as Break).0: core::result::Result<core::convert::Infallible, ast::Error>),
            StorageLive(_108),
            _108 = move _106,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1006:30: 1009:23 (#881),
                    scope: scope[26],
                },
                kind: _0 = <core::result::Result<ast::WithComments, ast::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, ast::Error>>>::from_residual(move _108) -> [return: bb98, unwind: bb232],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_108),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1009:22: 1009:23 (#882),
                    scope: scope[3],
                },
                kind: drop(_106) -> [return: bb182, unwind: bb234],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_109),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1006:21: 1006:27 (#0),
                    scope: scope[3],
                },
                kind: drop(_31) -> [return: bb100, unwind: bb101],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _31 = move _99,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1009:22: 1009:23 (#0),
                    scope: scope[3],
                },
                kind: drop(_99) -> [return: bb102, unwind: bb234],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _31 = move _99,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1009:22: 1009:23 (#0),
                    scope: scope[3],
                },
                kind: drop(_99) -> [return: bb234, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_99),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1009:23: 1009:24 (#0),
                    scope: scope[3],
                },
                kind: drop(_100) -> [return: bb103, unwind: bb264],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_100),
            _36 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1005:24: 1010:18 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb141,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_110),
            StorageLive(_111),
            StorageLive(_112),
            StorageLive(_113),
            _113 = &(*_1),
            StorageLive(_114),
            _114 = move _31,
            StorageLive(_115),
            _115 = ast::RepetitionKind::OneOrMore,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1012:30: 1015:22 (#0),
                    scope: scope[3],
                },
                kind: _112 = ast::parse::ParserI::<'_, P>::parse_uncounted_repetition(move _113, move _114, move _115) -> [return: bb105, unwind: bb231],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_115),
            StorageDead(_114),
            StorageDead(_113),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1012:30: 1015:23 (#883),
                    scope: scope[3],
                },
                kind: _111 = <core::result::Result<ast::Concat, ast::Error> as core::ops::Try>::branch(move _112) -> [return: bb106, unwind: bb230],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_112),
            PlaceMention(_111),
            _116 = discriminant(_111),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1012:30: 1015:23 (#883),
                    scope: scope[3],
                },
                kind: switchInt(move _116) -> [0: bb109, 1: bb108, otherwise: bb107],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _111),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1012:30: 1015:23 (#883),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1015:22: 1015:23 (#884),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb110, imaginary: bb109],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_120),
            _120 = move ((_111 as Continue).0: ast::Concat),
            _110 = move _120,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1015:22: 1015:23 (#0),
                    scope: scope[3],
                },
                kind: drop(_120) -> [return: bb112, unwind: bb229],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_117),
            _117 = move ((_111 as Break).0: core::result::Result<core::convert::Infallible, ast::Error>),
            StorageLive(_119),
            _119 = move _117,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1012:30: 1015:23 (#883),
                    scope: scope[30],
                },
                kind: _0 = <core::result::Result<ast::WithComments, ast::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, ast::Error>>>::from_residual(move _119) -> [return: bb111, unwind: bb227],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_119),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1015:22: 1015:23 (#884),
                    scope: scope[3],
                },
                kind: drop(_117) -> [return: bb180, unwind: bb229],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_120),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1012:21: 1012:27 (#0),
                    scope: scope[3],
                },
                kind: drop(_31) -> [return: bb113, unwind: bb114],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _31 = move _110,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1015:22: 1015:23 (#0),
                    scope: scope[3],
                },
                kind: drop(_110) -> [return: bb115, unwind: bb229],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _31 = move _110,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1015:22: 1015:23 (#0),
                    scope: scope[3],
                },
                kind: drop(_110) -> [return: bb229, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_110),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1015:23: 1015:24 (#0),
                    scope: scope[3],
                },
                kind: drop(_111) -> [return: bb116, unwind: bb264],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_111),
            _36 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1011:24: 1016:18 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb141,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_121),
            StorageLive(_122),
            StorageLive(_123),
            StorageLive(_124),
            _124 = &(*_1),
            StorageLive(_125),
            _125 = move _31,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1018:30: 1018:67 (#0),
                    scope: scope[3],
                },
                kind: _123 = ast::parse::ParserI::<'_, P>::parse_counted_repetition(move _124, move _125) -> [return: bb118, unwind: bb226],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_125),
            StorageDead(_124),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1018:30: 1018:68 (#885),
                    scope: scope[3],
                },
                kind: _122 = <core::result::Result<ast::Concat, ast::Error> as core::ops::Try>::branch(move _123) -> [return: bb119, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_123),
            PlaceMention(_122),
            _126 = discriminant(_122),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1018:30: 1018:68 (#885),
                    scope: scope[3],
                },
                kind: switchInt(move _126) -> [0: bb122, 1: bb121, otherwise: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _122),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1018:30: 1018:68 (#885),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1018:67: 1018:68 (#886),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb123, imaginary: bb122],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_130),
            _130 = move ((_122 as Continue).0: ast::Concat),
            _121 = move _130,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1018:67: 1018:68 (#0),
                    scope: scope[3],
                },
                kind: drop(_130) -> [return: bb125, unwind: bb224],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_127),
            _127 = move ((_122 as Break).0: core::result::Result<core::convert::Infallible, ast::Error>),
            StorageLive(_129),
            _129 = move _127,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1018:30: 1018:68 (#885),
                    scope: scope[34],
                },
                kind: _0 = <core::result::Result<ast::WithComments, ast::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, ast::Error>>>::from_residual(move _129) -> [return: bb124, unwind: bb222],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_129),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1018:67: 1018:68 (#886),
                    scope: scope[3],
                },
                kind: drop(_127) -> [return: bb178, unwind: bb224],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_130),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1018:21: 1018:27 (#0),
                    scope: scope[3],
                },
                kind: drop(_31) -> [return: bb126, unwind: bb127],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _31 = move _121,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1018:67: 1018:68 (#0),
                    scope: scope[3],
                },
                kind: drop(_121) -> [return: bb128, unwind: bb224],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _31 = move _121,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1018:67: 1018:68 (#0),
                    scope: scope[3],
                },
                kind: drop(_121) -> [return: bb224, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_121),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1018:68: 1018:69 (#0),
                    scope: scope[3],
                },
                kind: drop(_122) -> [return: bb129, unwind: bb264],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_122),
            _36 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1017:24: 1019:18 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb141,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_136),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1020:39: 1020:62 (#887),
                    scope: scope[3],
                },
                kind: _134 = <core::result::Result<ast::parse::Primitive, ast::Error> as core::ops::Try>::branch(move _135) -> [return: bb131, unwind: bb221],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_135),
            PlaceMention(_134),
            _137 = discriminant(_134),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1020:39: 1020:62 (#887),
                    scope: scope[3],
                },
                kind: switchInt(move _137) -> [0: bb134, 1: bb133, otherwise: bb132],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _134),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1020:39: 1020:62 (#887),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1020:61: 1020:62 (#888),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb135, imaginary: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_141),
            _141 = move ((_134 as Continue).0: ast::parse::Primitive),
            _133 = move _141,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1020:61: 1020:62 (#0),
                    scope: scope[3],
                },
                kind: drop(_141) -> [return: bb137, unwind: bb220],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_138),
            _138 = move ((_134 as Break).0: core::result::Result<core::convert::Infallible, ast::Error>),
            StorageLive(_140),
            _140 = move _138,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1020:39: 1020:62 (#887),
                    scope: scope[38],
                },
                kind: _0 = <core::result::Result<ast::WithComments, ast::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, ast::Error>>>::from_residual(move _140) -> [return: bb136, unwind: bb218],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_140),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1020:61: 1020:62 (#888),
                    scope: scope[3],
                },
                kind: drop(_138) -> [return: bb176, unwind: bb220],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_141),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1020:39: 1020:73 (#0),
                    scope: scope[3],
                },
                kind: _132 = ast::parse::Primitive::into_ast(move _133) -> [return: bb138, unwind: bb217],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_133),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1020:22: 1020:74 (#0),
                    scope: scope[3],
                },
                kind: _36 = std::vec::Vec::<ast::Ast>::push(move _131, move _132) -> [return: bb139, unwind: bb216],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_132),
            StorageDead(_131),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1020:73: 1020:74 (#0),
                    scope: scope[3],
                },
                kind: drop(_134) -> [return: bb140, unwind: bb264],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_134),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1020:73: 1020:74 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb141,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:986:9: 1022:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_146),
            StorageDead(_145),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1023:19: 1023:46 (#889),
                    scope: scope[3],
                },
                kind: _143 = <core::result::Result<ast::Ast, ast::Error> as core::ops::Try>::branch(move _144) -> [return: bb143, unwind: bb214],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_144),
            PlaceMention(_143),
            _147 = discriminant(_143),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1023:19: 1023:46 (#889),
                    scope: scope[3],
                },
                kind: switchInt(move _147) -> [0: bb146, 1: bb145, otherwise: bb144],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _143),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1023:19: 1023:46 (#889),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1023:45: 1023:46 (#890),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb147, imaginary: bb146],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_151),
            _151 = move ((_143 as Continue).0: ast::Ast),
            _142 = move _151,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1023:45: 1023:46 (#0),
                    scope: scope[3],
                },
                kind: drop(_151) -> [return: bb149, unwind: bb213],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_148),
            _148 = move ((_143 as Break).0: core::result::Result<core::convert::Infallible, ast::Error>),
            StorageLive(_150),
            _150 = move _148,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1023:19: 1023:46 (#889),
                    scope: scope[43],
                },
                kind: _0 = <core::result::Result<ast::WithComments, ast::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, ast::Error>>>::from_residual(move _150) -> [return: bb148, unwind: bb211],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_150),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1023:45: 1023:46 (#890),
                    scope: scope[3],
                },
                kind: drop(_148) -> [return: bb173, unwind: bb213],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_151),
            FakeRead(ForLet(None), _142),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1023:46: 1023:47 (#0),
                    scope: scope[3],
                },
                kind: drop(_143) -> [return: bb150, unwind: bb210],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_143),
            StorageLive(_152),
            StorageLive(_153),
            StorageLive(_154),
            StorageLive(_155),
            StorageLive(_156),
            _156 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1024:9: 1024:31 (#0),
                    scope: scope[41],
                },
                kind: _155 = ast::parse::NestLimiter::<'_, '_, P>::new(move _156) -> [return: bb151, unwind: bb210],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_156),
            StorageLive(_157),
            StorageLive(_158),
            _158 = &_142,
            _157 = &(*_158),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1024:9: 1024:43 (#0),
                    scope: scope[41],
                },
                kind: _154 = ast::parse::NestLimiter::<'_, '_, P>::check(move _155, move _157) -> [return: bb152, unwind: bb210],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_157),
            StorageDead(_155),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1024:9: 1024:44 (#891),
                    scope: scope[41],
                },
                kind: _153 = <core::result::Result<(), ast::Error> as core::ops::Try>::branch(move _154) -> [return: bb153, unwind: bb209],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_154),
            PlaceMention(_153),
            _159 = discriminant(_153),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1024:9: 1024:44 (#891),
                    scope: scope[41],
                },
                kind: switchInt(move _159) -> [0: bb156, 1: bb155, otherwise: bb154],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _153),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1024:9: 1024:44 (#891),
                    scope: scope[41],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1024:43: 1024:44 (#892),
                    scope: scope[41],
                },
                kind: falseEdge -> [real: bb157, imaginary: bb156],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_163),
            _163 = ((_153 as Continue).0: ()),
            _152 = _163,
            StorageDead(_163),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1024:44: 1024:45 (#0),
                    scope: scope[41],
                },
                kind: drop(_153) -> [return: bb159, unwind: bb210],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_160),
            _160 = move ((_153 as Break).0: core::result::Result<core::convert::Infallible, ast::Error>),
            StorageLive(_162),
            _162 = move _160,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1024:9: 1024:44 (#891),
                    scope: scope[47],
                },
                kind: _0 = <core::result::Result<ast::WithComments, ast::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, ast::Error>>>::from_residual(move _162) -> [return: bb158, unwind: bb206],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_162),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1024:43: 1024:44 (#892),
                    scope: scope[41],
                },
                kind: drop(_160) -> [return: bb171, unwind: bb208],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_158),
            StorageDead(_153),
            StorageDead(_152),
            StorageLive(_164),
            StorageLive(_165),
            _165 = move _142,
            StorageLive(_166),
            StorageLive(_167),
            StorageLive(_168),
            StorageLive(_169),
            StorageLive(_170),
            StorageLive(_171),
            StorageLive(_172),
            StorageLive(_173),
            StorageLive(_174),
            _174 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1028:23: 1028:36 (#0),
                    scope: scope[41],
                },
                kind: _173 = ast::parse::ParserI::<'_, P>::parser(move _174) -> [return: bb160, unwind: bb205],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_174),
            _172 = &((*_173).7: core::cell::RefCell<std::vec::Vec<ast::Comment>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1028:23: 1028:58 (#0),
                    scope: scope[41],
                },
                kind: _171 = core::cell::RefCell::<std::vec::Vec<ast::Comment>>::borrow_mut(move _172) -> [return: bb161, unwind: bb205],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _170 = &mut _171,
            StorageDead(_172),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1028:22: 1028:58 (#0),
                    scope: scope[41],
                },
                kind: _169 = <core::cell::RefMut<'_, std::vec::Vec<ast::Comment>> as core::ops::DerefMut>::deref_mut(move _170) -> [return: bb162, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_170),
            _168 = &mut (*_169),
            _167 = &mut (*_168),
            StorageLive(_175),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9: 44:32 (#57),
                    scope: scope[41],
                },
                kind: _175 = std::vec::Vec::<ast::Comment>::new() -> [return: bb163, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1027:23: 1030:14 (#0),
                    scope: scope[41],
                },
                kind: _166 = core::mem::replace::<std::vec::Vec<ast::Comment>>(move _167, move _175) -> [return: bb164, unwind: bb200],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_175),
            StorageDead(_167),
            _164 = ast::WithComments { ast: move _165, comments: move _166 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1031:9: 1031:10 (#0),
                    scope: scope[41],
                },
                kind: drop(_166) -> [return: bb165, unwind: bb198],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_166),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1031:9: 1031:10 (#0),
                    scope: scope[41],
                },
                kind: drop(_165) -> [return: bb166, unwind: bb199],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_165),
            _0 = core::result::Result::<ast::WithComments, ast::Error>::Ok(move _164),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1031:10: 1031:11 (#0),
                    scope: scope[41],
                },
                kind: drop(_164) -> [return: bb167, unwind: bb202],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_164),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1032:5: 1032:6 (#0),
                    scope: scope[3],
                },
                kind: drop(_142) -> [return: bb168, unwind: bb203],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_142),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1032:5: 1032:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_31) -> [return: bb169, unwind: bb204],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1032:5: 1032:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_171) -> [return: bb170, unwind: bb265],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_173),
            StorageDead(_171),
            StorageDead(_169),
            StorageDead(_168),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1032:6: 1032:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb197,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_160),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1024:44: 1024:45 (#0),
                    scope: scope[41],
                },
                kind: drop(_153) -> [return: bb172, unwind: bb210],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_158),
            StorageDead(_153),
            StorageDead(_152),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1032:5: 1032:6 (#0),
                    scope: scope[3],
                },
                kind: drop(_142) -> [return: bb175, unwind: bb264],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_148),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1023:46: 1023:47 (#0),
                    scope: scope[3],
                },
                kind: drop(_143) -> [return: bb174, unwind: bb264],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_143),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb175,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_142),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb195,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_138),
            StorageDead(_133),
            StorageDead(_132),
            StorageDead(_131),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1020:73: 1020:74 (#0),
                    scope: scope[3],
                },
                kind: drop(_134) -> [return: bb177, unwind: bb264],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_134),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb194,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_127),
            StorageDead(_121),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1018:68: 1018:69 (#0),
                    scope: scope[3],
                },
                kind: drop(_122) -> [return: bb179, unwind: bb264],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_122),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb194,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_117),
            StorageDead(_110),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1015:23: 1015:24 (#0),
                    scope: scope[3],
                },
                kind: drop(_111) -> [return: bb181, unwind: bb264],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_111),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb194,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_106),
            StorageDead(_99),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1009:23: 1009:24 (#0),
                    scope: scope[3],
                },
                kind: drop(_100) -> [return: bb183, unwind: bb264],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_100),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb194,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_95),
            StorageDead(_88),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1003:23: 1003:24 (#0),
                    scope: scope[3],
                },
                kind: drop(_89) -> [return: bb185, unwind: bb264],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_89),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb194,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_80),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:996:56: 996:57 (#0),
                    scope: scope[3],
                },
                kind: drop(_76) -> [return: bb187, unwind: bb264],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_76),
            StorageDead(_75),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb194,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
            StorageDead(_65),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:994:60: 994:61 (#0),
                    scope: scope[3],
                },
                kind: drop(_66) -> [return: bb189, unwind: bb264],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_66),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb194,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_61),
            StorageDead(_55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:993:55: 993:56 (#0),
                    scope: scope[3],
                },
                kind: drop(_56) -> [return: bb191, unwind: bb264],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb194,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:992:56: 992:57 (#0),
                    scope: scope[3],
                },
                kind: drop(_46) -> [return: bb193, unwind: bb264],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb194,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb195,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1032:5: 1032:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_31) -> [return: bb196, unwind: bb265],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1032:6: 1032:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb197,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1032:6: 1032:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1031:9: 1031:10 (#0),
                    scope: scope[41],
                },
                kind: drop(_165) -> [return: bb199, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1031:10: 1031:11 (#0),
                    scope: scope[41],
                },
                kind: drop(_164) -> [return: bb202, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1030:13: 1030:14 (#0),
                    scope: scope[41],
                },
                kind: drop(_175) -> [return: bb201, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1031:9: 1031:10 (#0),
                    scope: scope[41],
                },
                kind: drop(_165) -> [return: bb202, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1032:5: 1032:6 (#0),
                    scope: scope[3],
                },
                kind: drop(_142) -> [return: bb203, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1032:5: 1032:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_31) -> [return: bb204, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1032:5: 1032:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_171) -> [return: bb265, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1031:9: 1031:10 (#0),
                    scope: scope[41],
                },
                kind: drop(_165) -> [return: bb210, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1024:43: 1024:44 (#891),
                    scope: scope[47],
                },
                kind: drop(_162) -> [return: bb207, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1024:43: 1024:44 (#892),
                    scope: scope[41],
                },
                kind: drop(_160) -> [return: bb208, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1024:44: 1024:45 (#0),
                    scope: scope[41],
                },
                kind: drop(_153) -> [return: bb210, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1024:43: 1024:44 (#891),
                    scope: scope[41],
                },
                kind: drop(_154) -> [return: bb210, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1032:5: 1032:6 (#0),
                    scope: scope[3],
                },
                kind: drop(_142) -> [return: bb264, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1023:45: 1023:46 (#889),
                    scope: scope[43],
                },
                kind: drop(_150) -> [return: bb212, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1023:45: 1023:46 (#890),
                    scope: scope[3],
                },
                kind: drop(_148) -> [return: bb213, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1023:46: 1023:47 (#0),
                    scope: scope[3],
                },
                kind: drop(_143) -> [return: bb264, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1023:45: 1023:46 (#889),
                    scope: scope[3],
                },
                kind: drop(_144) -> [return: bb264, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1023:44: 1023:45 (#0),
                    scope: scope[3],
                },
                kind: drop(_146) -> [return: bb264, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1020:73: 1020:74 (#0),
                    scope: scope[3],
                },
                kind: drop(_132) -> [return: bb220, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1020:72: 1020:73 (#0),
                    scope: scope[3],
                },
                kind: drop(_133) -> [return: bb220, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1020:61: 1020:62 (#887),
                    scope: scope[38],
                },
                kind: drop(_140) -> [return: bb219, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1020:61: 1020:62 (#888),
                    scope: scope[3],
                },
                kind: drop(_138) -> [return: bb220, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1020:73: 1020:74 (#0),
                    scope: scope[3],
                },
                kind: drop(_134) -> [return: bb264, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1020:61: 1020:62 (#887),
                    scope: scope[3],
                },
                kind: drop(_135) -> [return: bb264, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1018:67: 1018:68 (#885),
                    scope: scope[34],
                },
                kind: drop(_129) -> [return: bb223, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1018:67: 1018:68 (#886),
                    scope: scope[3],
                },
                kind: drop(_127) -> [return: bb224, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1018:68: 1018:69 (#0),
                    scope: scope[3],
                },
                kind: drop(_122) -> [return: bb264, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1018:67: 1018:68 (#885),
                    scope: scope[3],
                },
                kind: drop(_123) -> [return: bb264, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1018:66: 1018:67 (#0),
                    scope: scope[3],
                },
                kind: drop(_125) -> [return: bb264, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1015:22: 1015:23 (#883),
                    scope: scope[30],
                },
                kind: drop(_119) -> [return: bb228, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1015:22: 1015:23 (#884),
                    scope: scope[3],
                },
                kind: drop(_117) -> [return: bb229, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1015:23: 1015:24 (#0),
                    scope: scope[3],
                },
                kind: drop(_111) -> [return: bb264, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1015:22: 1015:23 (#883),
                    scope: scope[3],
                },
                kind: drop(_112) -> [return: bb264, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1015:21: 1015:22 (#0),
                    scope: scope[3],
                },
                kind: drop(_114) -> [return: bb264, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1009:22: 1009:23 (#881),
                    scope: scope[26],
                },
                kind: drop(_108) -> [return: bb233, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1009:22: 1009:23 (#882),
                    scope: scope[3],
                },
                kind: drop(_106) -> [return: bb234, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1009:23: 1009:24 (#0),
                    scope: scope[3],
                },
                kind: drop(_100) -> [return: bb264, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1009:22: 1009:23 (#881),
                    scope: scope[3],
                },
                kind: drop(_101) -> [return: bb264, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1009:21: 1009:22 (#0),
                    scope: scope[3],
                },
                kind: drop(_103) -> [return: bb264, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1003:22: 1003:23 (#879),
                    scope: scope[22],
                },
                kind: drop(_97) -> [return: bb238, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1003:22: 1003:23 (#880),
                    scope: scope[3],
                },
                kind: drop(_95) -> [return: bb239, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1003:23: 1003:24 (#0),
                    scope: scope[3],
                },
                kind: drop(_89) -> [return: bb264, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1003:22: 1003:23 (#879),
                    scope: scope[3],
                },
                kind: drop(_90) -> [return: bb264, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1003:21: 1003:22 (#0),
                    scope: scope[3],
                },
                kind: drop(_92) -> [return: bb264, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:997:65: 997:66 (#0),
                    scope: scope[16],
                },
                kind: drop(_86) -> [return: bb244, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:997:64: 997:65 (#0),
                    scope: scope[16],
                },
                kind: drop(_87) -> [return: bb244, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:998:17: 998:18 (#0),
                    scope: scope[3],
                },
                kind: drop(_75) -> [return: bb264, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:996:55: 996:56 (#877),
                    scope: scope[18],
                },
                kind: drop(_82) -> [return: bb246, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:996:55: 996:56 (#878),
                    scope: scope[3],
                },
                kind: drop(_80) -> [return: bb247, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:996:56: 996:57 (#0),
                    scope: scope[3],
                },
                kind: drop(_76) -> [return: bb264, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:996:55: 996:56 (#877),
                    scope: scope[3],
                },
                kind: drop(_77) -> [return: bb264, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:994:60: 994:61 (#875),
                    scope: scope[13],
                },
                kind: drop(_73) -> [return: bb250, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:994:60: 994:61 (#876),
                    scope: scope[3],
                },
                kind: drop(_71) -> [return: bb251, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:994:60: 994:61 (#0),
                    scope: scope[3],
                },
                kind: drop(_66) -> [return: bb264, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:994:60: 994:61 (#875),
                    scope: scope[3],
                },
                kind: drop(_67) -> [return: bb264, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:994:59: 994:60 (#0),
                    scope: scope[3],
                },
                kind: drop(_69) -> [return: bb264, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:993:55: 993:56 (#873),
                    scope: scope[9],
                },
                kind: drop(_63) -> [return: bb255, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:993:55: 993:56 (#874),
                    scope: scope[3],
                },
                kind: drop(_61) -> [return: bb256, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:993:55: 993:56 (#0),
                    scope: scope[3],
                },
                kind: drop(_56) -> [return: bb264, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:993:55: 993:56 (#873),
                    scope: scope[3],
                },
                kind: drop(_57) -> [return: bb264, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:993:54: 993:55 (#0),
                    scope: scope[3],
                },
                kind: drop(_59) -> [return: bb264, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:992:56: 992:57 (#871),
                    scope: scope[5],
                },
                kind: drop(_53) -> [return: bb260, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:992:56: 992:57 (#872),
                    scope: scope[3],
                },
                kind: drop(_51) -> [return: bb261, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:992:56: 992:57 (#0),
                    scope: scope[3],
                },
                kind: drop(_46) -> [return: bb264, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:992:56: 992:57 (#871),
                    scope: scope[3],
                },
                kind: drop(_47) -> [return: bb264, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:992:55: 992:56 (#0),
                    scope: scope[3],
                },
                kind: drop(_49) -> [return: bb264, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:1032:5: 1032:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_31) -> [return: bb265, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:982:5: 1032:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<ast::WithComments, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:982:38: 982:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:982:28: 982:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:9: 61:10 (#54),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} usize, &'{erased} usize),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:15: 51:32 (#54),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:16: 51:22 (#54),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:983:20: 983:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:983:20: 983:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:24: 51:31 (#54),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:983:35: 983:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:15: 51:32 (#54),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:52:13: 52:34 (#54),
                    },
                ),
            ),
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:52:14: 52:22 (#54),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:51:15: 51:32 (#54),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:52:13: 52:34 (#54),
                    },
                ),
            ),
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:52:24: 52:33 (#54),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:53:17: 59:18 (#54),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:53:21: 53:46 (#54),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:53:17: 59:18 (#54),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:53:22: 53:31 (#54),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:53:17: 59:18 (#54),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:53:35: 53:45 (#54),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:53:17: 59:18 (#54),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:53:47: 59:18 (#54),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:54:32: 54:65 (#54),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:54:25: 54:29 (#54),
                    },
                ),
            ),
        ),
        ty: core::panicking::AssertKind,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:54:25: 54:29 (#54),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:58:21: 58:146 (#54),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::panicking::AssertKind,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:58:54: 58:58 (#54),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:58:60: 58:70 (#54),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:58:60: 58:70 (#54),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:58:72: 58:83 (#54),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:58:72: 58:83 (#54),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::fmt::Arguments<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:58:85: 58:145 (#54),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::fmt::Arguments<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:58:114: 58:144 (#55),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:983:38: 983:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:983:38: 983:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [&'{erased} str; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:983:38: 983:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:984:9: 984:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::Parser,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:984:9: 984:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::Parser,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:984:9: 984:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:984:9: 984:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/ast/parse.rs:985:26: 985:73 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:985:13: 985:23 (#0),
                    },
                ),
            ),
        ),
        ty: ast::Concat,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:985:13: 985:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: ast::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:985:46: 985:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:985:46: 985:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::vec::Vec<ast::Ast, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9: 44:32 (#56),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:986:9: 1022:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:982:5: 1032:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:987:13: 987:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:987:13: 987:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:988:13: 990:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:988:16: 988:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:988:16: 988:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:988:30: 990:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:991:13: 1021:14 (#0),
                },
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:991:19: 991:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:991:13: 1021:14 (#0),
                },
            ),
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:991:19: 991:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:991:13: 1021:14 (#0),
                },
            ),
        ),
        ty: ast::Concat,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:992:33: 992:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:991:13: 1021:14 (#0),
                },
            ),
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, ast::Error>, ast::Concat>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:992:33: 992:57 (#871),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:991:13: 1021:14 (#0),
                },
            ),
        ),
        ty: core::result::Result<ast::Concat, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:992:33: 992:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:991:13: 1021:14 (#0),
                },
            ),
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:992:33: 992:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:991:13: 1021:14 (#0),
                },
            ),
        ),
        ty: ast::Concat,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:992:49: 992:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:992:56: 992:57 (#872),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _46,
                                ),
                                regex-syntax/src/ast/parse.rs:992:33: 992:57 (#871),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:992:56: 992:57 (#872),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:992:56: 992:57 (#872),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:991:13: 1021:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:992:56: 992:57 (#872),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:991:13: 1021:14 (#0),
                },
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:992:56: 992:57 (#872),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _46,
                                ),
                                regex-syntax/src/ast/parse.rs:992:33: 992:57 (#871),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:992:33: 992:57 (#871),
                    },
                ),
            ),
        ),
        ty: ast::Concat,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:992:33: 992:57 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:991:13: 1021:14 (#0),
                },
            ),
        ),
        ty: ast::Concat,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:993:33: 993:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:991:13: 1021:14 (#0),
                },
            ),
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, ast::Error>, ast::Concat>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:993:33: 993:56 (#873),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:991:13: 1021:14 (#0),
                },
            ),
        ),
        ty: core::result::Result<ast::Concat, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:993:33: 993:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:991:13: 1021:14 (#0),
                },
            ),
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:993:33: 993:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:991:13: 1021:14 (#0),
                },
            ),
        ),
        ty: ast::Concat,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:993:48: 993:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:993:55: 993:56 (#874),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _56,
                                ),
                                regex-syntax/src/ast/parse.rs:993:33: 993:56 (#873),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:993:55: 993:56 (#874),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:993:55: 993:56 (#874),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:991:13: 1021:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:993:55: 993:56 (#874),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:991:13: 1021:14 (#0),
                },
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:993:55: 993:56 (#874),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _56,
                                ),
                                regex-syntax/src/ast/parse.rs:993:33: 993:56 (#873),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:993:33: 993:56 (#873),
                    },
                ),
            ),
        ),
        ty: ast::Concat,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:993:33: 993:56 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:991:13: 1021:14 (#0),
                },
            ),
        ),
        ty: ast::Concat,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:994:33: 994:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:991:13: 1021:14 (#0),
                },
            ),
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, ast::Error>, ast::Concat>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:994:33: 994:61 (#875),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:991:13: 1021:14 (#0),
                },
            ),
        ),
        ty: core::result::Result<ast::Concat, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:994:33: 994:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:991:13: 1021:14 (#0),
                },
            ),
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:994:33: 994:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:991:13: 1021:14 (#0),
                },
            ),
        ),
        ty: ast::Concat,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:994:53: 994:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:994:60: 994:61 (#876),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _66,
                                ),
                                regex-syntax/src/ast/parse.rs:994:33: 994:61 (#875),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:994:60: 994:61 (#876),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:994:60: 994:61 (#876),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:991:13: 1021:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:994:60: 994:61 (#876),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:991:13: 1021:14 (#0),
                },
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:994:60: 994:61 (#876),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _66,
                                ),
                                regex-syntax/src/ast/parse.rs:994:33: 994:61 (#875),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:994:33: 994:61 (#875),
                    },
                ),
            ),
        ),
        ty: ast::Concat,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:994:33: 994:61 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/ast/parse.rs:996:33: 996:56 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:996:25: 996:30 (#0),
                    },
                ),
            ),
        ),
        ty: ast::ClassBracketed,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:996:25: 996:30 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, ast::Error>, ast::ClassBracketed>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:996:33: 996:56 (#877),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<ast::ClassBracketed, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:996:33: 996:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:996:33: 996:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:996:55: 996:56 (#878),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _76,
                                ),
                                regex-syntax/src/ast/parse.rs:996:33: 996:56 (#877),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:996:55: 996:56 (#878),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:996:55: 996:56 (#878),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:996:55: 996:56 (#878),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:996:55: 996:56 (#878),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _76,
                                ),
                                regex-syntax/src/ast/parse.rs:996:33: 996:56 (#877),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:996:33: 996:56 (#877),
                    },
                ),
            ),
        ),
        ty: ast::ClassBracketed,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:996:33: 996:56 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:997:21: 997:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<ast::Ast, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:997:21: 997:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:997:38: 997:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::ClassBracketed,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:997:59: 997:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::Concat,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1000:30: 1003:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, ast::Error>, ast::Concat>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1000:30: 1003:23 (#879),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<ast::Concat, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1000:30: 1003:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1000:30: 1000:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::Concat,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1001:25: 1001:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::RepetitionKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1002:25: 1002:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1003:22: 1003:23 (#880),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _89,
                                ),
                                regex-syntax/src/ast/parse.rs:1000:30: 1003:23 (#879),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:1003:22: 1003:23 (#880),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1003:22: 1003:23 (#880),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1003:22: 1003:23 (#880),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1003:22: 1003:23 (#880),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _89,
                                ),
                                regex-syntax/src/ast/parse.rs:1000:30: 1003:23 (#879),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:1000:30: 1003:23 (#879),
                    },
                ),
            ),
        ),
        ty: ast::Concat,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1000:30: 1003:23 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::Concat,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1006:30: 1009:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, ast::Error>, ast::Concat>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1006:30: 1009:23 (#881),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<ast::Concat, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1006:30: 1009:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1006:30: 1006:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::Concat,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1007:25: 1007:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::RepetitionKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1008:25: 1008:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1009:22: 1009:23 (#882),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _100,
                                ),
                                regex-syntax/src/ast/parse.rs:1006:30: 1009:23 (#881),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:1009:22: 1009:23 (#882),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1009:22: 1009:23 (#882),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1009:22: 1009:23 (#882),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1009:22: 1009:23 (#882),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _100,
                                ),
                                regex-syntax/src/ast/parse.rs:1006:30: 1009:23 (#881),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:1006:30: 1009:23 (#881),
                    },
                ),
            ),
        ),
        ty: ast::Concat,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1006:30: 1009:23 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::Concat,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1012:30: 1015:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, ast::Error>, ast::Concat>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1012:30: 1015:23 (#883),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<ast::Concat, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1012:30: 1015:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1012:30: 1012:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::Concat,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1013:25: 1013:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::RepetitionKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1014:25: 1014:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1015:22: 1015:23 (#884),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _111,
                                ),
                                regex-syntax/src/ast/parse.rs:1012:30: 1015:23 (#883),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:1015:22: 1015:23 (#884),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1015:22: 1015:23 (#884),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1015:22: 1015:23 (#884),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1015:22: 1015:23 (#884),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _111,
                                ),
                                regex-syntax/src/ast/parse.rs:1012:30: 1015:23 (#883),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:1012:30: 1015:23 (#883),
                    },
                ),
            ),
        ),
        ty: ast::Concat,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1012:30: 1015:23 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::Concat,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1018:30: 1018:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, ast::Error>, ast::Concat>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1018:30: 1018:68 (#885),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<ast::Concat, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1018:30: 1018:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1018:30: 1018:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::Concat,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1018:60: 1018:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1018:67: 1018:68 (#886),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _122,
                                ),
                                regex-syntax/src/ast/parse.rs:1018:30: 1018:68 (#885),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:1018:67: 1018:68 (#886),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1018:67: 1018:68 (#886),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1018:67: 1018:68 (#886),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1018:67: 1018:68 (#886),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _122,
                                ),
                                regex-syntax/src/ast/parse.rs:1018:30: 1018:68 (#885),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:1018:30: 1018:68 (#885),
                    },
                ),
            ),
        ),
        ty: ast::Concat,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1018:30: 1018:68 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:991:13: 1021:14 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<ast::Ast, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1020:22: 1020:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:991:13: 1021:14 (#0),
                },
            ),
        ),
        ty: ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1020:39: 1020:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:991:13: 1021:14 (#0),
                },
            ),
        ),
        ty: ast::parse::Primitive,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1020:39: 1020:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:991:13: 1021:14 (#0),
                },
            ),
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, ast::Error>, ast::parse::Primitive>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1020:39: 1020:62 (#887),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:991:13: 1021:14 (#0),
                },
            ),
        ),
        ty: core::result::Result<ast::parse::Primitive, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1020:39: 1020:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:991:13: 1021:14 (#0),
                },
            ),
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1020:39: 1020:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1020:61: 1020:62 (#888),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _134,
                                ),
                                regex-syntax/src/ast/parse.rs:1020:39: 1020:62 (#887),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:1020:61: 1020:62 (#888),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1020:61: 1020:62 (#888),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:991:13: 1021:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1020:61: 1020:62 (#888),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/ast/parse.rs:991:13: 1021:14 (#0),
                },
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1020:61: 1020:62 (#888),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _134,
                                ),
                                regex-syntax/src/ast/parse.rs:1020:39: 1020:62 (#887),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:1020:39: 1020:62 (#887),
                    },
                ),
            ),
        ),
        ty: ast::parse::Primitive,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1020:39: 1020:62 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/ast/parse.rs:1023:19: 1023:46 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:1023:13: 1023:16 (#0),
                    },
                ),
            ),
        ),
        ty: ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1023:13: 1023:16 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, ast::Error>, ast::Ast>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1023:19: 1023:46 (#889),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<ast::Ast, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1023:19: 1023:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1023:19: 1023:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::Concat,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1023:38: 1023:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1023:45: 1023:46 (#890),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _143,
                                ),
                                regex-syntax/src/ast/parse.rs:1023:19: 1023:46 (#889),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:1023:45: 1023:46 (#890),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1023:45: 1023:46 (#890),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1023:45: 1023:46 (#890),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1023:45: 1023:46 (#890),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _143,
                                ),
                                regex-syntax/src/ast/parse.rs:1023:19: 1023:46 (#889),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:1023:19: 1023:46 (#889),
                    },
                ),
            ),
        ),
        ty: ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1023:19: 1023:46 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1024:9: 1024:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, ast::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1024:9: 1024:44 (#891),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1024:9: 1024:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::parse::NestLimiter<'{erased}, '{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1024:9: 1024:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1024:26: 1024:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1024:38: 1024:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1024:38: 1024:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1024:43: 1024:44 (#892),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _153,
                                ),
                                regex-syntax/src/ast/parse.rs:1024:9: 1024:44 (#891),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:1024:43: 1024:44 (#892),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1024:43: 1024:44 (#892),
            scope: scope[41],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1024:43: 1024:44 (#892),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, ast::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1024:43: 1024:44 (#892),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _153,
                                ),
                                regex-syntax/src/ast/parse.rs:1024:9: 1024:44 (#891),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/parse.rs:1024:9: 1024:44 (#891),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1024:9: 1024:44 (#0),
            scope: scope[41],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: ast::WithComments,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1025:12: 1031:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: ast::Ast,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1026:13: 1026:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::vec::Vec<ast::Comment, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1027:23: 1030:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/parse.rs:1025:9: 1031:11 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<ast::Comment, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1028:17: 1028:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/parse.rs:1025:9: 1031:11 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<ast::Comment, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1028:17: 1028:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/parse.rs:1025:9: 1031:11 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<ast::Comment, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1028:22: 1028:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/parse.rs:1025:9: 1031:11 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::cell::RefMut<'{erased}, std::vec::Vec<ast::Comment, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1028:23: 1028:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/parse.rs:1025:9: 1031:11 (#0),
                },
            ),
        ),
        ty: core::cell::RefMut<'{erased}, std::vec::Vec<ast::Comment, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1028:23: 1028:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/parse.rs:1025:9: 1031:11 (#0),
                },
            ),
        ),
        ty: &'{erased} core::cell::RefCell<std::vec::Vec<ast::Comment, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1028:23: 1028:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/parse.rs:1025:9: 1031:11 (#0),
                },
            ),
        ),
        ty: &'{erased} ast::parse::Parser,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1028:23: 1028:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/parse.rs:1025:9: 1031:11 (#0),
                },
            ),
        ),
        ty: &'{erased} ast::parse::ParserI<'{erased}, P/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:1028:23: 1028:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/parse.rs:1025:9: 1031:11 (#0),
                },
            ),
        ),
        ty: std::vec::Vec<ast::Comment, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9: 44:32 (#57),
            scope: scope[0],
        },
    },
]