[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:181:12: 181:23 (#0),
                    scope: scope[0],
                },
                kind: _5 = core::slice::<impl [u8]>::len(move _6) -> [return: bb1, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:181:26: 181:36 (#0),
                    scope: scope[0],
                },
                kind: _7 = utf8::Utf8Sequence::len(move _8) -> [return: bb2, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            _4 = Lt(move _5, move _7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:181:12: 181:36 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_5),
            _0 = const false,
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_5),
            _3 = const (),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:184:24: 184:36 (#0),
                    scope: scope[0],
                },
                kind: _13 = core::slice::<impl [u8]>::iter(move _14) -> [return: bb5, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageLive(_15),
            _15 = _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:184:24: 184:46 (#0),
                    scope: scope[0],
                },
                kind: _12 = <core::slice::Iter<'_, u8> as core::iter::Iterator>::zip::<&utf8::Utf8Sequence>(move _13, move _15) -> [return: bb6, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:184:24: 184:46 (#1839),
                    scope: scope[0],
                },
                kind: _11 = <core::iter::Zip<core::slice::Iter<'_, u8>, core::slice::Iter<'_, utf8::Utf8Range>> as core::iter::IntoIterator>::into_iter(move _12) -> [return: bb7, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            PlaceMention(_11),
            StorageLive(_16),
            _16 = move _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:184:9: 188:10 (#1838),
                    scope: scope[1],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:184:9: 188:10 (#1838),
                    scope: scope[1],
                },
                kind: falseUnwind -> [real: bb9, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &mut _16,
            _20 = &mut (*_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:184:24: 184:46 (#1839),
                    scope: scope[1],
                },
                kind: _19 = <core::iter::Zip<core::slice::Iter<'_, u8>, core::slice::Iter<'_, utf8::Utf8Range>> as core::iter::Iterator>::next(move _20) -> [return: bb10, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            PlaceMention(_19),
            _22 = discriminant(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:184:24: 184:46 (#1839),
                    scope: scope[1],
                },
                kind: switchInt(move _22) -> [0: bb12, 1: bb13, otherwise: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:184:24: 184:46 (#1839),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:184:9: 188:10 (#1838),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb14, imaginary: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_24),
            _24 = (*(((_19 as Some).0: (&u8, &utf8::Utf8Range)).0: &u8)),
            StorageLive(_25),
            _25 = (((_19 as Some).0: (&u8, &utf8::Utf8Range)).1: &utf8::Utf8Range),
            StorageLive(_26),
            StorageLive(_27),
            _27 = &(*_25),
            StorageLive(_28),
            _28 = _24,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:185:17: 185:29 (#0),
                    scope: scope[2],
                },
                kind: _26 = utf8::Utf8Range::matches(move _27, move _28) -> [return: bb15, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = const (),
            StorageDead(_21),
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_16),
            StorageDead(_11),
            StorageDead(_10),
            _0 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:190:6: 190:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:185:17: 185:29 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _26) -> [0: bb17, otherwise: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_27),
            _18 = const (),
            StorageDead(_26),
            StorageDead(_25),
            StorageDead(_24),
            StorageDead(_21),
            StorageDead(_19),
            StorageDead(_18),
            _17 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:184:9: 188:10 (#1838),
                    scope: scope[1],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_27),
            _0 = const false,
            StorageDead(_26),
            StorageDead(_25),
            StorageDead(_24),
            StorageDead(_21),
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_16),
            StorageDead(_11),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:190:6: 190:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:180:5: 190:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:180:44: 180:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} utf8::Utf8Sequence,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:180:20: 180:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/utf8.rs:180:34: 180:39 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/utf8.rs:180:27: 180:32 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/utf8.rs:180:27: 180:32 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:180:27: 180:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:181:9: 183:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:181:12: 181:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:181:12: 181:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:181:12: 181:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:181:26: 181:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} utf8::Utf8Sequence,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:181:26: 181:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:181:37: 183:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:184:9: 188:10 (#1838),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Zip<core::slice::Iter<'{erased}, u8>, core::slice::Iter<'{erased}, utf8::Utf8Range>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:184:24: 184:46 (#1839),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Zip<core::slice::Iter<'{erased}, u8>, core::slice::Iter<'{erased}, utf8::Utf8Range>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:184:24: 184:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::Iter<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:184:24: 184:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:184:24: 184:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} utf8::Utf8Sequence,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:184:41: 184:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _11,
                                ),
                                regex-syntax/src/utf8.rs:184:24: 184:46 (#1839),
                            ),
                        ),
                        pat_span: regex-syntax/src/utf8.rs:184:24: 184:46 (#1839),
                    },
                ),
            ),
        ),
        ty: core::iter::Zip<core::slice::Iter<'{erased}, u8>, core::slice::Iter<'{erased}, utf8::Utf8Range>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:184:24: 184:46 (#1839),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:180:5: 190:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:184:24: 184:46 (#1839),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(&'{erased} u8, &'{erased} utf8::Utf8Range)>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:184:24: 184:46 (#1839),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Zip<core::slice::Iter<'{erased}, u8>, core::slice::Iter<'{erased}, utf8::Utf8Range>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:184:24: 184:46 (#1839),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Zip<core::slice::Iter<'{erased}, u8>, core::slice::Iter<'{erased}, utf8::Utf8Range>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:184:24: 184:46 (#1839),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:184:9: 188:10 (#1838),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:184:9: 188:10 (#1838),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _19,
                                ),
                                regex-syntax/src/utf8.rs:184:24: 184:46 (#1839),
                            ),
                        ),
                        pat_span: regex-syntax/src/utf8.rs:184:13: 184:20 (#1840),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:184:15: 184:16 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _19,
                                ),
                                regex-syntax/src/utf8.rs:184:24: 184:46 (#1839),
                            ),
                        ),
                        pat_span: regex-syntax/src/utf8.rs:184:13: 184:20 (#1840),
                    },
                ),
            ),
        ),
        ty: &'{erased} utf8::Utf8Range,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:184:18: 184:19 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/utf8.rs:185:13: 187:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:185:17: 185:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/utf8.rs:185:13: 187:14 (#0),
                },
            ),
        ),
        ty: &'{erased} utf8::Utf8Range,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:185:17: 185:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/utf8.rs:185:13: 187:14 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:185:27: 185:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/utf8.rs:185:13: 187:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:185:30: 187:14 (#0),
            scope: scope[0],
        },
    },
]