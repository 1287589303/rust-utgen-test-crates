[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1091:17: 1091:29 (#0),
                    scope: scope[0],
                },
                kind: _6 = hir::translate::TranslatorI::<'_, '_>::flags(move _7) -> [return: bb1, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = &_6,
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1091:17: 1091:39 (#0),
                    scope: scope[0],
                },
                kind: _4 = hir::translate::Flags::unicode(move _5) -> [return: bb2, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1091:17: 1091:39 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_6),
            _3 = const (),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_9),
            PlaceMention(((*_2).1: ast::ClassPerlKind)),
            _10 = discriminant(((*_2).1: ast::ClassPerlKind)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1092:22: 1092:42 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _10) -> [0: bb6, 1: bb7, 2: bb8, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_6),
            StorageLive(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1091:9: 1091:40 (#626),
                    scope: scope[0],
                },
                kind: _8 = core::panicking::panic(const "assertion failed: self.flags().unicode()") -> bb39,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), ((*_2).1: ast::ClassPerlKind)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1092:28: 1092:42 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1093:13: 1093:18 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb9, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1094:13: 1094:18 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1095:21: 1095:41 (#0),
                    scope: scope[0],
                },
                kind: _9 = unicode::perl_word() -> [return: bb11, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1093:22: 1093:43 (#0),
                    scope: scope[0],
                },
                kind: _9 = unicode::perl_digit() -> [return: bb11, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1094:22: 1094:43 (#0),
                    scope: scope[0],
                },
                kind: _9 = unicode::perl_space() -> [return: bb11, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _9),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &(*_1),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &((*_2).0: ast::Span),
            _15 = &(*_16),
            StorageLive(_17),
            _17 = move _9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1098:13: 1098:70 (#0),
                    scope: scope[1],
                },
                kind: _13 = hir::translate::TranslatorI::<'_, '_>::convert_unicode_class_error(move _14, move _15, move _17) -> [return: bb12, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_15),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1098:13: 1098:71 (#1627),
                    scope: scope[1],
                },
                kind: _12 = <core::result::Result<hir::ClassUnicode, hir::Error> as core::ops::Try>::branch(move _13) -> [return: bb13, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            PlaceMention(_12),
            _18 = discriminant(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1098:13: 1098:71 (#1627),
                    scope: scope[1],
                },
                kind: switchInt(move _18) -> [0: bb16, 1: bb15, otherwise: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1098:13: 1098:71 (#1627),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1098:70: 1098:71 (#1628),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb17, imaginary: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            _22 = move ((_12 as Continue).0: hir::ClassUnicode),
            _11 = move _22,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1098:70: 1098:71 (#0),
                    scope: scope[1],
                },
                kind: drop(_22) -> [return: bb19, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_19),
            _19 = move ((_12 as Break).0: core::result::Result<core::convert::Infallible, hir::Error>),
            StorageLive(_21),
            _21 = move _19,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1098:13: 1098:71 (#1627),
                    scope: scope[4],
                },
                kind: _0 = <core::result::Result<hir::ClassUnicode, hir::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, hir::Error>>>::from_residual(move _21) -> [return: bb18, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1098:70: 1098:71 (#1628),
                    scope: scope[1],
                },
                kind: drop(_19) -> [return: bb28, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            FakeRead(ForLet(None), _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1098:71: 1098:72 (#0),
                    scope: scope[1],
                },
                kind: drop(_12) -> [return: bb20, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_12),
            StorageLive(_23),
            StorageLive(_24),
            _24 = ((*_2).2: bool),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1101:12: 1101:29 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _24) -> [0: bb23, otherwise: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_25),
            StorageLive(_26),
            _26 = &mut _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1102:13: 1102:27 (#0),
                    scope: scope[2],
                },
                kind: _25 = hir::ClassUnicode::negate(move _26) -> [return: bb22, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_25),
            _23 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1101:9: 1103:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb24,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _23 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1101:9: 1103:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb24,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageDead(_23),
            StorageLive(_27),
            _27 = move _11,
            _0 = core::result::Result::<hir::ClassUnicode, hir::Error>::Ok(move _27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1104:17: 1104:18 (#0),
                    scope: scope[2],
                },
                kind: drop(_27) -> [return: bb25, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1105:5: 1105:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb26, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1105:5: 1105:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb27, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1105:6: 1105:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1098:71: 1098:72 (#0),
                    scope: scope[1],
                },
                kind: drop(_12) -> [return: bb29, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_12),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1105:5: 1105:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb30, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1105:6: 1105:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1105:6: 1105:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1105:5: 1105:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb38, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1098:70: 1098:71 (#1627),
                    scope: scope[4],
                },
                kind: drop(_21) -> [return: bb34, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1098:70: 1098:71 (#1628),
                    scope: scope[1],
                },
                kind: drop(_19) -> [return: bb35, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1098:71: 1098:72 (#0),
                    scope: scope[1],
                },
                kind: drop(_12) -> [return: bb38, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1098:70: 1098:71 (#1627),
                    scope: scope[1],
                },
                kind: drop(_13) -> [return: bb38, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1098:69: 1098:70 (#0),
                    scope: scope[1],
                },
                kind: drop(_17) -> [return: bb38, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1105:5: 1105:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb39, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1085:5: 1105:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<hir::ClassUnicode, hir::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1088:10: 1088:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} hir::translate::TranslatorI<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1086:9: 1086:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/hir/translate.rs:1087:20: 1087:35 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/translate.rs:1087:9: 1087:18 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/translate.rs:1087:9: 1087:18 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} ast::ClassPerl,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1087:9: 1087:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1091:9: 1091:40 (#626),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1091:17: 1091:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::translate::Flags,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1091:17: 1091:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: hir::translate::Flags,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1091:17: 1091:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::translate::TranslatorI<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1091:17: 1091:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/translate.rs:1091:9: 1091:40 (#626),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1091:9: 1091:40 (#626),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/translate.rs:1092:22: 1096:10 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/translate.rs:1092:13: 1092:19 (#0),
                    },
                ),
            ),
        ),
        ty: core::result::Result<hir::ClassUnicode, unicode::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1092:13: 1092:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1093:13: 1093:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/translate.rs:1098:13: 1098:71 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/translate.rs:1097:13: 1097:22 (#0),
                    },
                ),
            ),
        ),
        ty: hir::ClassUnicode,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1097:13: 1097:22 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, hir::Error>, hir::ClassUnicode>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1098:13: 1098:71 (#1627),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<hir::ClassUnicode, hir::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1098:13: 1098:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::translate::TranslatorI<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1098:13: 1098:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1098:46: 1098:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1098:46: 1098:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<hir::ClassUnicode, unicode::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1098:63: 1098:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1098:70: 1098:71 (#1628),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _12,
                                ),
                                regex-syntax/src/hir/translate.rs:1098:13: 1098:71 (#1627),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/translate.rs:1098:70: 1098:71 (#1628),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, hir::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1098:70: 1098:71 (#1628),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1098:70: 1098:71 (#1628),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, hir::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1098:70: 1098:71 (#1628),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _12,
                                ),
                                regex-syntax/src/hir/translate.rs:1098:13: 1098:71 (#1627),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/translate.rs:1098:13: 1098:71 (#1627),
                    },
                ),
            ),
        ),
        ty: hir::ClassUnicode,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1098:13: 1098:71 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1101:9: 1103:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1101:12: 1101:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1102:13: 1102:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hir::ClassUnicode,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1102:13: 1102:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: hir::ClassUnicode,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1104:12: 1104:17 (#0),
            scope: scope[0],
        },
    },
]