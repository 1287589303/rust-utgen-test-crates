[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1189:12: 1189:24 (#0),
                    scope: scope[0],
                },
                kind: _8 = hir::translate::TranslatorI::<'_, '_>::flags(move _9) -> [return: bb1, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = &_8,
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1189:12: 1189:43 (#0),
                    scope: scope[0],
                },
                kind: _6 = hir::translate::Flags::case_insensitive(move _7) -> [return: bb2, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1189:12: 1189:43 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [0: bb5, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &mut (*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1190:13: 1190:37 (#0),
                    scope: scope[0],
                },
                kind: _10 = hir::ClassBytes::case_fold_simple(move _11) -> [return: bb4, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            _5 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1189:9: 1191:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            _5 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1189:9: 1191:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_12),
            StorageLive(_13),
            _13 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1192:12: 1192:19 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _13) -> [0: bb9, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            StorageLive(_15),
            _15 = &mut (*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1193:13: 1193:27 (#0),
                    scope: scope[0],
                },
                kind: _14 = hir::ClassBytes::negate(move _15) -> [return: bb8, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_14),
            _12 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1192:9: 1194:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _12 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1192:9: 1194:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1195:12: 1195:24 (#0),
                    scope: scope[0],
                },
                kind: _18 = hir::translate::TranslatorI::<'_, '_>::trans(move _19) -> [return: bb11, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            _17 = ((*_18).2: bool),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1195:12: 1195:29 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _17) -> [0: bb19, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &(*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1195:34: 1195:50 (#0),
                    scope: scope[0],
                },
                kind: _20 = hir::ClassBytes::is_ascii(move _21) -> [return: bb13, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1195:34: 1195:50 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _20) -> [0: bb15, otherwise: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1195:51: 1197:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageLive(_23),
            StorageLive(_24),
            _24 = &(*_1),
            StorageLive(_25),
            StorageLive(_26),
            _26 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1196:35: 1196:47 (#0),
                    scope: scope[0],
                },
                kind: _25 = <ast::Span as core::clone::Clone>::clone(move _26) -> [return: bb16, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageLive(_27),
            _27 = hir::ErrorKind::InvalidUtf8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1196:24: 1196:72 (#0),
                    scope: scope[0],
                },
                kind: _23 = hir::translate::TranslatorI::<'_, '_>::error(move _24, move _25, move _27) -> [return: bb17, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_25),
            StorageDead(_24),
            _0 = core::result::Result::<(), hir::Error>::Err(move _23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1196:72: 1196:73 (#0),
                    scope: scope[0],
                },
                kind: drop(_23) -> [return: bb18, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_20),
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1199:6: 1199:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _16 = const (),
            StorageDead(_20),
            StorageDead(_17),
            StorageDead(_16),
            StorageLive(_28),
            _28 = (),
            _0 = core::result::Result::<(), hir::Error>::Ok(move _28),
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1199:6: 1199:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1199:6: 1199:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/translate.rs:1179:5: 1199:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), hir::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1184:10: 1184:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} hir::translate::TranslatorI<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1180:9: 1180:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/hir/translate.rs:1181:15: 1181:20 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/translate.rs:1181:9: 1181:13 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/translate.rs:1181:9: 1181:13 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} ast::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1181:9: 1181:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/hir/translate.rs:1182:18: 1182:22 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/translate.rs:1182:9: 1182:16 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/translate.rs:1182:9: 1182:16 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1182:9: 1182:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/hir/translate.rs:1183:16: 1183:36 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/translate.rs:1183:9: 1183:14 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/translate.rs:1183:9: 1183:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut hir::ClassBytes,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1183:9: 1183:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1189:9: 1191:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1189:12: 1189:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::translate::Flags,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1189:12: 1189:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: hir::translate::Flags,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1189:12: 1189:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::translate::TranslatorI<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1189:12: 1189:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1190:13: 1190:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hir::ClassBytes,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1190:13: 1190:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1192:9: 1194:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1192:12: 1192:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1193:13: 1193:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hir::ClassBytes,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1193:13: 1193:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1195:9: 1197:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1195:12: 1195:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::translate::Translator,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1195:12: 1195:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::translate::TranslatorI<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1195:12: 1195:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1195:34: 1195:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::ClassBytes,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1195:34: 1195:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1195:51: 1197:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: hir::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1196:24: 1196:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::translate::TranslatorI<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1196:24: 1196:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1196:35: 1196:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1196:35: 1196:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::ErrorKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1196:49: 1196:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/translate.rs:1198:12: 1198:14 (#0),
            scope: scope[0],
        },
    },
]