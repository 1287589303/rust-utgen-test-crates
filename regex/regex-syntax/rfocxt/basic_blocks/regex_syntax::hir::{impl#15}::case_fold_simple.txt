[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1294:26: 1294:58 (#0),
                    scope: scope[0],
                },
                kind: _5 = unicode::SimpleCaseFolder::new() -> [return: bb1, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1294:26: 1294:59 (#1700),
                    scope: scope[0],
                },
                kind: _4 = <core::result::Result<unicode::SimpleCaseFolder, unicode::CaseFoldError> as core::ops::Try>::branch(move _5) -> [return: bb2, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            PlaceMention(_4),
            _6 = discriminant(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1294:26: 1294:59 (#1700),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [0: bb5, 1: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1294:26: 1294:59 (#1700),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1294:58: 1294:59 (#1701),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = move ((_4 as Continue).0: unicode::SimpleCaseFolder),
            _3 = move _10,
            StorageDead(_10),
            FakeRead(ForLet(None), _3),
            StorageDead(_4),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &_3,
            StorageLive(_14),
            _14 = ((*_1).0: char),
            StorageLive(_15),
            _15 = ((*_1).1: char),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1295:13: 1295:50 (#0),
                    scope: scope[1],
                },
                kind: _12 = unicode::SimpleCaseFolder::overlaps(move _13, move _14, move _15) -> [return: bb8, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            _7 = move ((_4 as Break).0: core::result::Result<core::convert::Infallible, unicode::CaseFoldError>),
            StorageLive(_9),
            _9 = move _7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1294:26: 1294:59 (#1700),
                    scope: scope[3],
                },
                kind: _0 = <core::result::Result<(), unicode::CaseFoldError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, unicode::CaseFoldError>>>::from_residual(move _9) -> [return: bb7, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_7),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb34,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1295:13: 1295:50 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _12) -> [0: bb10, otherwise: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_14),
            StorageDead(_13),
            _11 = const (),
            StorageDead(_12),
            StorageDead(_11),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            _22 = ((*_1).0: char),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1298:29: 1298:50 (#0),
                    scope: scope[1],
                },
                kind: _21 = <u32 as core::convert::From<char>>::from(move _22) -> [return: bb11, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_14),
            StorageDead(_13),
            StorageLive(_17),
            _17 = (),
            _0 = core::result::Result::<(), unicode::CaseFoldError>::Ok(move _17),
            StorageDead(_17),
            StorageDead(_12),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb34,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageLive(_23),
            StorageLive(_24),
            _24 = ((*_1).1: char),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1298:52: 1298:71 (#0),
                    scope: scope[1],
                },
                kind: _23 = <u32 as core::convert::From<char>>::from(move _24) -> [return: bb12, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            _20 = (move _21, move _23),
            StorageDead(_23),
            StorageDead(_21),
            PlaceMention(_20),
            StorageLive(_18),
            _18 = (_20.0: u32),
            StorageLive(_19),
            _19 = (_20.1: u32),
            StorageDead(_20),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            _29 = _18,
            StorageLive(_30),
            _30 = _19,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1299:19: 1299:32 (#0),
                    scope: scope[6],
                },
                kind: _28 = core::ops::RangeInclusive::<u32>::new(move _29, move _30) -> [return: bb13, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1299:19: 1299:59 (#0),
                    scope: scope[6],
                },
                kind: _27 = <core::ops::RangeInclusive<u32> as core::iter::Iterator>::filter_map::<char, fn(u32) -> core::option::Option<char> {core::char::from_u32}>(move _28, core::char::from_u32) -> [return: bb14, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1299:19: 1299:59 (#1704),
                    scope: scope[6],
                },
                kind: _26 = <core::iter::FilterMap<core::ops::RangeInclusive<u32>, fn(u32) -> core::option::Option<char> {core::char::from_u32}> as core::iter::IntoIterator>::into_iter(move _27) -> [return: bb15, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            PlaceMention(_26),
            StorageLive(_31),
            _31 = move _26,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1299:9: 1303:10 (#1703),
                    scope: scope[7],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1299:9: 1303:10 (#1703),
                    scope: scope[7],
                },
                kind: falseUnwind -> [real: bb17, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            _36 = &mut _31,
            _35 = &mut (*_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1299:19: 1299:59 (#1704),
                    scope: scope[7],
                },
                kind: _34 = <core::iter::FilterMap<core::ops::RangeInclusive<u32>, fn(u32) -> core::option::Option<char> {core::char::from_u32}> as core::iter::Iterator>::next(move _35) -> [return: bb18, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            PlaceMention(_34),
            _37 = discriminant(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1299:19: 1299:59 (#1704),
                    scope: scope[7],
                },
                kind: switchInt(move _37) -> [0: bb20, 1: bb21, otherwise: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1299:19: 1299:59 (#1704),
                    scope: scope[7],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1299:9: 1303:10 (#1703),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb22, imaginary: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_39),
            _39 = ((_34 as Some).0: char),
            StorageLive(_40),
            StorageLive(_41),
            StorageLive(_42),
            _42 = &mut _3,
            StorageLive(_43),
            _43 = _39,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1300:31: 1300:49 (#0),
                    scope: scope[8],
                },
                kind: _41 = unicode::SimpleCaseFolder::mapping(move _42, move _43) -> [return: bb23, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _25 = const (),
            StorageDead(_36),
            StorageDead(_34),
            StorageDead(_33),
            StorageDead(_31),
            StorageDead(_26),
            StorageDead(_25),
            StorageLive(_57),
            _57 = (),
            _0 = core::result::Result::<(), unicode::CaseFoldError>::Ok(move _57),
            StorageDead(_57),
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1305:6: 1305:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb35,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            StorageDead(_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1300:31: 1300:49 (#1707),
                    scope: scope[8],
                },
                kind: _40 = <&[char] as core::iter::IntoIterator>::into_iter(move _41) -> [return: bb24, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            PlaceMention(_40),
            StorageLive(_44),
            _44 = move _40,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1300:13: 1302:14 (#1706),
                    scope: scope[9],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1300:13: 1302:14 (#1706),
                    scope: scope[9],
                },
                kind: falseUnwind -> [real: bb26, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_45),
            StorageLive(_46),
            StorageLive(_47),
            StorageLive(_48),
            _48 = &mut _44,
            _47 = &mut (*_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1300:31: 1300:49 (#1707),
                    scope: scope[9],
                },
                kind: _46 = <core::slice::Iter<'_, char> as core::iter::Iterator>::next(move _47) -> [return: bb27, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            PlaceMention(_46),
            _49 = discriminant(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1300:31: 1300:49 (#1707),
                    scope: scope[9],
                },
                kind: switchInt(move _49) -> [0: bb29, 1: bb30, otherwise: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1300:31: 1300:49 (#1707),
                    scope: scope[9],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1300:13: 1302:14 (#1706),
                    scope: scope[9],
                },
                kind: falseEdge -> [real: bb31, imaginary: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_51),
            _51 = (*((_46 as Some).0: &char)),
            StorageLive(_52),
            StorageLive(_53),
            _53 = &mut (*_2),
            StorageLive(_54),
            StorageLive(_55),
            _55 = _51,
            StorageLive(_56),
            _56 = _51,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1301:29: 1301:73 (#0),
                    scope: scope[10],
                },
                kind: _54 = hir::ClassUnicodeRange::new(move _55, move _56) -> [return: bb32, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _33 = const (),
            StorageDead(_48),
            StorageDead(_46),
            StorageDead(_45),
            StorageDead(_44),
            StorageDead(_40),
            StorageDead(_39),
            StorageDead(_36),
            StorageDead(_34),
            StorageDead(_33),
            _32 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1299:9: 1303:10 (#1703),
                    scope: scope[7],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
            StorageDead(_55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1301:17: 1301:74 (#0),
                    scope: scope[10],
                },
                kind: _52 = std::vec::Vec::<hir::ClassUnicodeRange>::push(move _53, move _54) -> [return: bb33, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            StorageDead(_53),
            StorageDead(_52),
            _45 = const (),
            StorageDead(_51),
            StorageDead(_48),
            StorageDead(_46),
            StorageDead(_45),
            _32 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1300:13: 1302:14 (#1706),
                    scope: scope[9],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1305:6: 1305:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb35,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1305:6: 1305:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1290:5: 1305:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), unicode::CaseFoldError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1293:10: 1293:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} hir::ClassUnicodeRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1291:9: 1291:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/hir/mod.rs:1292:17: 1292:44 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/mod.rs:1292:9: 1292:15 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:1292:9: 1292:15 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut std::vec::Vec<hir::ClassUnicodeRange, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1292:9: 1292:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/mod.rs:1294:26: 1294:59 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:1294:13: 1294:23 (#0),
                    },
                ),
            ),
        ),
        ty: unicode::SimpleCaseFolder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1294:13: 1294:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, unicode::CaseFoldError>, unicode::SimpleCaseFolder>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1294:26: 1294:59 (#1700),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<unicode::SimpleCaseFolder, unicode::CaseFoldError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1294:26: 1294:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1294:58: 1294:59 (#1701),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                regex-syntax/src/hir/mod.rs:1294:26: 1294:59 (#1700),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:1294:58: 1294:59 (#1701),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, unicode::CaseFoldError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1294:58: 1294:59 (#1701),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1294:58: 1294:59 (#1701),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, unicode::CaseFoldError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1294:58: 1294:59 (#1701),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                regex-syntax/src/hir/mod.rs:1294:26: 1294:59 (#1700),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:1294:26: 1294:59 (#1700),
                    },
                ),
            ),
        ),
        ty: unicode::SimpleCaseFolder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1294:26: 1294:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1295:9: 1297:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1295:13: 1295:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} unicode::SimpleCaseFolder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1295:13: 1295:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1295:29: 1295:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1295:41: 1295:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1295:51: 1297:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1296:23: 1296:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _20,
                                ),
                                regex-syntax/src/hir/mod.rs:1298:28: 1298:72 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:1298:13: 1298:25 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1298:14: 1298:19 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _20,
                                ),
                                regex-syntax/src/hir/mod.rs:1298:28: 1298:72 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:1298:13: 1298:25 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1298:21: 1298:24 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, u32),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1298:28: 1298:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1298:29: 1298:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1298:39: 1298:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1298:52: 1298:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1298:62: 1298:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1299:9: 1303:10 (#1703),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::FilterMap<core::ops::RangeInclusive<u32>, FnDef(DefId(1:5134 ~ core[a245]::char::from_u32), [])>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1299:19: 1299:59 (#1704),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::FilterMap<core::ops::RangeInclusive<u32>, FnDef(DefId(1:5134 ~ core[a245]::char::from_u32), [])>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1299:19: 1299:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeInclusive<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1299:19: 1299:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1299:20: 1299:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1299:28: 1299:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _26,
                                ),
                                regex-syntax/src/hir/mod.rs:1299:19: 1299:59 (#1704),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:1299:19: 1299:59 (#1704),
                    },
                ),
            ),
        ),
        ty: core::iter::FilterMap<core::ops::RangeInclusive<u32>, FnDef(DefId(1:5134 ~ core[a245]::char::from_u32), [])>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1299:19: 1299:59 (#1704),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1290:5: 1305:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1299:19: 1299:59 (#1704),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1299:19: 1299:59 (#1704),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::FilterMap<core::ops::RangeInclusive<u32>, FnDef(DefId(1:5134 ~ core[a245]::char::from_u32), [])>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1299:19: 1299:59 (#1704),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::FilterMap<core::ops::RangeInclusive<u32>, FnDef(DefId(1:5134 ~ core[a245]::char::from_u32), [])>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1299:19: 1299:59 (#1704),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1299:9: 1303:10 (#1703),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1299:9: 1303:10 (#1703),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _34,
                                ),
                                regex-syntax/src/hir/mod.rs:1299:19: 1299:59 (#1704),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:1299:13: 1299:15 (#1705),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1299:13: 1299:15 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/mod.rs:1300:13: 1302:14 (#1706),
                },
            ),
        ),
        ty: core::slice::Iter<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1300:31: 1300:49 (#1707),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/mod.rs:1300:13: 1302:14 (#1706),
                },
            ),
        ),
        ty: &'{erased} [char],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1300:31: 1300:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/mod.rs:1300:13: 1302:14 (#1706),
                },
            ),
        ),
        ty: &'{erased} mut unicode::SimpleCaseFolder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1300:31: 1300:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/hir/mod.rs:1300:13: 1302:14 (#1706),
                },
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1300:46: 1300:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _40,
                                ),
                                regex-syntax/src/hir/mod.rs:1300:31: 1300:49 (#1707),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:1300:31: 1300:49 (#1707),
                    },
                ),
            ),
        ),
        ty: core::slice::Iter<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1300:31: 1300:49 (#1707),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1300:31: 1300:49 (#1707),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} char>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1300:31: 1300:49 (#1707),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1300:31: 1300:49 (#1707),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1300:31: 1300:49 (#1707),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1300:13: 1302:14 (#1706),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1300:13: 1302:14 (#1706),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _46,
                                ),
                                regex-syntax/src/hir/mod.rs:1300:31: 1300:49 (#1707),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:1300:17: 1300:27 (#1708),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1300:18: 1300:27 (#0),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1301:17: 1301:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<hir::ClassUnicodeRange, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1301:17: 1301:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::ClassUnicodeRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1301:29: 1301:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1301:52: 1301:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1301:63: 1301:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1304:12: 1304:14 (#0),
            scope: scope[0],
        },
    },
]