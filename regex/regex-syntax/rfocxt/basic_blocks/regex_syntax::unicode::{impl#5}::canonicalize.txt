[
    BasicBlockData {
        statements: [
            PlaceMention((*_1)),
            _2 = discriminant((*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:239:9: 239:20 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _2) -> [0: bb2, 1: bb3, 2: bb4, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), (*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:239:15: 239:20 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:240:13: 240:37 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:241:13: 241:37 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            _14 = (((*_1) as ByValue).0: &str),
            StorageLive(_15),
            _15 = (((*_1) as ByValue).1: &str),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &(*_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:243:37: 243:75 (#0),
                    scope: scope[3],
                },
                kind: _16 = unicode::symbolic_name_normalize(move _17) -> [return: bb12, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = (((*_1) as OneLetter).0: char),
            StorageLive(_4),
            _4 = &(*_1),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &_3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:240:64: 240:77 (#0),
                    scope: scope[1],
                },
                kind: _9 = <char as std::string::ToString>::to_string(move _10) -> [return: bb6, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            _8 = &_9,
            _7 = &(*_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:240:63: 240:77 (#0),
                    scope: scope[1],
                },
                kind: _6 = <std::string::String as core::ops::Deref>::deref(move _7) -> [return: bb7, unwind: bb90],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = &(*_6),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:240:41: 240:78 (#0),
                    scope: scope[1],
                },
                kind: _0 = unicode::ClassQuery::<'_>::canonical_binary(move _4, move _5) -> [return: bb8, unwind: bb90],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:240:77: 240:78 (#0),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb9, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:240:77: 240:78 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb87,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            _11 = (((*_1) as Binary).0: &str),
            StorageLive(_12),
            _12 = &(*_1),
            StorageLive(_13),
            _13 = &(*_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:241:41: 241:68 (#0),
                    scope: scope[2],
                },
                kind: _0 = unicode::ClassQuery::<'_>::canonical_binary(move _12, move _13) -> [return: bb11, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:241:67: 241:68 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb87,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            FakeRead(ForLet(None), _16),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &(*_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:244:38: 244:77 (#0),
                    scope: scope[4],
                },
                kind: _18 = unicode::symbolic_name_normalize(move _19) -> [return: bb13, unwind: bb89],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            FakeRead(ForLet(None), _18),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            _27 = &_16,
            _26 = &(*_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:246:55: 246:69 (#0),
                    scope: scope[5],
                },
                kind: _25 = <std::string::String as core::ops::Deref>::deref(move _26) -> [return: bb14, unwind: bb88],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _24 = &(*_25),
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:246:40: 246:70 (#0),
                    scope: scope[5],
                },
                kind: _23 = unicode::canonical_prop(move _24) -> [return: bb15, unwind: bb88],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:246:40: 246:71 (#1791),
                    scope: scope[5],
                },
                kind: _22 = <core::result::Result<core::option::Option<&str>, unicode::Error> as core::ops::Try>::branch(move _23) -> [return: bb16, unwind: bb88],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            PlaceMention(_22),
            _28 = discriminant(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:246:40: 246:71 (#1791),
                    scope: scope[5],
                },
                kind: switchInt(move _28) -> [0: bb19, 1: bb18, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:246:40: 246:71 (#1791),
                    scope: scope[5],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:246:70: 246:71 (#1792),
                    scope: scope[5],
                },
                kind: falseEdge -> [real: bb20, imaginary: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_32),
            _32 = ((_22 as Continue).0: core::option::Option<&str>),
            _21 = _32,
            StorageDead(_32),
            PlaceMention(_21),
            _33 = discriminant(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:246:34: 246:71 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _33) -> [0: bb23, 1: bb24, otherwise: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_29),
            _29 = move ((_22 as Break).0: core::result::Result<core::convert::Infallible, unicode::Error>),
            StorageLive(_31),
            _31 = move _29,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:246:40: 246:71 (#1791),
                    scope: scope[8],
                },
                kind: _0 = <core::result::Result<unicode::CanonicalClassQuery, unicode::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, unicode::Error>>>::from_residual(move _31) -> [return: bb21, unwind: bb88],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb83,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:246:40: 246:71 (#0),
                    scope: scope[5],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:247:21: 247:25 (#0),
                    scope: scope[5],
                },
                kind: falseEdge -> [real: bb25, imaginary: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_36),
            _36 = ((_21 as Some).0: &str),
            _20 = _36,
            StorageDead(_36),
            FakeRead(ForLet(None), _20),
            StorageDead(_27),
            StorageDead(_25),
            StorageDead(_22),
            StorageDead(_21),
            StorageLive(_37),
            PlaceMention(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:251:21: 251:39 (#0),
                    scope: scope[6],
                },
                kind: _39 = <str as core::cmp::PartialEq>::eq(_20, const "General_Category") -> [return: bb31, unwind: bb88],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_35),
            _35 = unicode::Error::PropertyNotFound,
            _0 = core::result::Result::<unicode::CanonicalClassQuery, unicode::Error>::Err(move _35),
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:247:29: 247:64 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb83,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_76),
            StorageLive(_77),
            StorageLive(_78),
            StorageLive(_79),
            StorageLive(_80),
            _80 = &(*_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:266:42: 266:69 (#0),
                    scope: scope[6],
                },
                kind: _79 = unicode::property_values(move _80) -> [return: bb58, unwind: bb88],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:251:21: 251:39 (#0),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb32, imaginary: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:258:21: 258:29 (#0),
                    scope: scope[6],
                },
                kind: _38 = <str as core::cmp::PartialEq>::eq(_20, const "Script") -> [return: bb30, unwind: bb88],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:258:21: 258:29 (#0),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb45, imaginary: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:258:21: 258:29 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _38) -> [0: bb26, otherwise: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:251:21: 251:39 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _39) -> [0: bb28, otherwise: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_40),
            StorageLive(_41),
            StorageLive(_42),
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            StorageLive(_46),
            StorageLive(_47),
            _47 = &_18,
            _46 = &(*_47),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:252:60: 252:75 (#0),
                    scope: scope[6],
                },
                kind: _45 = <std::string::String as core::ops::Deref>::deref(move _46) -> [return: bb33, unwind: bb88],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _44 = &(*_45),
            StorageDead(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:252:43: 252:76 (#0),
                    scope: scope[6],
                },
                kind: _43 = unicode::canonical_gencat(move _44) -> [return: bb34, unwind: bb88],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:252:43: 252:77 (#1793),
                    scope: scope[6],
                },
                kind: _42 = <core::result::Result<core::option::Option<&str>, unicode::Error> as core::ops::Try>::branch(move _43) -> [return: bb35, unwind: bb88],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            PlaceMention(_42),
            _48 = discriminant(_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:252:43: 252:77 (#1793),
                    scope: scope[6],
                },
                kind: switchInt(move _48) -> [0: bb38, 1: bb37, otherwise: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:252:43: 252:77 (#1793),
                    scope: scope[6],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:252:76: 252:77 (#1794),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb39, imaginary: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_52),
            _52 = ((_42 as Continue).0: core::option::Option<&str>),
            _41 = _52,
            StorageDead(_52),
            PlaceMention(_41),
            _53 = discriminant(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:252:37: 252:77 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _53) -> [0: bb42, 1: bb43, otherwise: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_49),
            _49 = move ((_42 as Break).0: core::result::Result<core::convert::Infallible, unicode::Error>),
            StorageLive(_51),
            _51 = move _49,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:252:43: 252:77 (#1793),
                    scope: scope[14],
                },
                kind: _0 = <core::result::Result<unicode::CanonicalClassQuery, unicode::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, unicode::Error>>>::from_residual(move _51) -> [return: bb40, unwind: bb88],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
            StorageDead(_49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb81,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:252:43: 252:77 (#0),
                    scope: scope[6],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:253:29: 253:33 (#0),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb44, imaginary: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_56),
            _56 = ((_41 as Some).0: &str),
            _40 = _56,
            StorageDead(_56),
            FakeRead(ForLet(None), _40),
            StorageDead(_47),
            StorageDead(_45),
            StorageDead(_42),
            StorageDead(_41),
            StorageLive(_57),
            _57 = &(*_40),
            _37 = unicode::CanonicalClassQuery::GeneralCategory(move _57),
            StorageDead(_57),
            StorageDead(_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:257:21: 257:22 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb75,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_55),
            _55 = unicode::Error::PropertyValueNotFound,
            _0 = core::result::Result::<unicode::CanonicalClassQuery, unicode::Error>::Err(move _55),
            StorageDead(_55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:253:37: 253:77 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb81,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_58),
            StorageLive(_59),
            StorageLive(_60),
            StorageLive(_61),
            StorageLive(_62),
            StorageLive(_63),
            StorageLive(_64),
            StorageLive(_65),
            _65 = &_18,
            _64 = &(*_65),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:259:60: 259:75 (#0),
                    scope: scope[6],
                },
                kind: _63 = <std::string::String as core::ops::Deref>::deref(move _64) -> [return: bb46, unwind: bb88],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _62 = &(*_63),
            StorageDead(_64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:259:43: 259:76 (#0),
                    scope: scope[6],
                },
                kind: _61 = unicode::canonical_script(move _62) -> [return: bb47, unwind: bb88],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:259:43: 259:77 (#1795),
                    scope: scope[6],
                },
                kind: _60 = <core::result::Result<core::option::Option<&str>, unicode::Error> as core::ops::Try>::branch(move _61) -> [return: bb48, unwind: bb88],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_61),
            PlaceMention(_60),
            _66 = discriminant(_60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:259:43: 259:77 (#1795),
                    scope: scope[6],
                },
                kind: switchInt(move _66) -> [0: bb51, 1: bb50, otherwise: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:259:43: 259:77 (#1795),
                    scope: scope[6],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:259:76: 259:77 (#1796),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb52, imaginary: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_70),
            _70 = ((_60 as Continue).0: core::option::Option<&str>),
            _59 = _70,
            StorageDead(_70),
            PlaceMention(_59),
            _71 = discriminant(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:259:37: 259:77 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _71) -> [0: bb55, 1: bb56, otherwise: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_67),
            _67 = move ((_60 as Break).0: core::result::Result<core::convert::Infallible, unicode::Error>),
            StorageLive(_69),
            _69 = move _67,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:259:43: 259:77 (#1795),
                    scope: scope[20],
                },
                kind: _0 = <core::result::Result<unicode::CanonicalClassQuery, unicode::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, unicode::Error>>>::from_residual(move _69) -> [return: bb53, unwind: bb88],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_69),
            StorageDead(_67),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb80,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:259:43: 259:77 (#0),
                    scope: scope[6],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:260:29: 260:33 (#0),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb57, imaginary: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_74),
            _74 = ((_59 as Some).0: &str),
            _58 = _74,
            StorageDead(_74),
            FakeRead(ForLet(None), _58),
            StorageDead(_65),
            StorageDead(_63),
            StorageDead(_60),
            StorageDead(_59),
            StorageLive(_75),
            _75 = &(*_58),
            _37 = unicode::CanonicalClassQuery::Script(move _75),
            StorageDead(_75),
            StorageDead(_58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:264:21: 264:22 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb75,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_73),
            _73 = unicode::Error::PropertyValueNotFound,
            _0 = core::result::Result::<unicode::CanonicalClassQuery, unicode::Error>::Err(move _73),
            StorageDead(_73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:260:37: 260:77 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb80,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_80),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:266:42: 266:70 (#1797),
                    scope: scope[6],
                },
                kind: _78 = <core::result::Result<core::option::Option<&[(&str, &str)]>, unicode::Error> as core::ops::Try>::branch(move _79) -> [return: bb59, unwind: bb88],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_79),
            PlaceMention(_78),
            _81 = discriminant(_78),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:266:42: 266:70 (#1797),
                    scope: scope[6],
                },
                kind: switchInt(move _81) -> [0: bb62, 1: bb61, otherwise: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _78),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:266:42: 266:70 (#1797),
                    scope: scope[6],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:266:69: 266:70 (#1798),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb63, imaginary: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_85),
            _85 = ((_78 as Continue).0: core::option::Option<&[(&str, &str)]>),
            _77 = _85,
            StorageDead(_85),
            PlaceMention(_77),
            _86 = discriminant(_77),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:266:36: 266:70 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _86) -> [0: bb66, 1: bb67, otherwise: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_82),
            _82 = move ((_78 as Break).0: core::result::Result<core::convert::Infallible, unicode::Error>),
            StorageLive(_84),
            _84 = move _82,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:266:42: 266:70 (#1797),
                    scope: scope[26],
                },
                kind: _0 = <core::result::Result<unicode::CanonicalClassQuery, unicode::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, unicode::Error>>>::from_residual(move _84) -> [return: bb64, unwind: bb88],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_84),
            StorageDead(_82),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb78,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _77),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:266:42: 266:70 (#0),
                    scope: scope[6],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:267:29: 267:33 (#0),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb68, imaginary: bb67],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_89),
            _89 = ((_77 as Some).0: &[(&str, &str)]),
            _76 = _89,
            StorageDead(_89),
            FakeRead(ForLet(None), _76),
            StorageDead(_78),
            StorageDead(_77),
            StorageLive(_90),
            StorageLive(_91),
            StorageLive(_92),
            _92 = &(*_76),
            StorageLive(_93),
            StorageLive(_94),
            StorageLive(_95),
            StorageLive(_96),
            _96 = &_18,
            _95 = &(*_96),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:271:57: 271:72 (#0),
                    scope: scope[24],
                },
                kind: _94 = <std::string::String as core::ops::Deref>::deref(move _95) -> [return: bb69, unwind: bb88],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_88),
            _88 = unicode::Error::PropertyValueNotFound,
            _0 = core::result::Result::<unicode::CanonicalClassQuery, unicode::Error>::Err(move _88),
            StorageDead(_88),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:267:37: 267:77 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb78,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _93 = &(*_94),
            StorageDead(_95),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:271:35: 271:73 (#0),
                    scope: scope[24],
                },
                kind: _91 = unicode::canonical_value(move _92, move _93) -> [return: bb70, unwind: bb88],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_93),
            StorageDead(_92),
            PlaceMention(_91),
            _97 = discriminant(_91),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:271:29: 271:73 (#0),
                    scope: scope[24],
                },
                kind: switchInt(move _97) -> [0: bb72, 1: bb73, otherwise: bb71],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _91),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:271:35: 271:73 (#0),
                    scope: scope[24],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:272:33: 272:37 (#0),
                    scope: scope[24],
                },
                kind: falseEdge -> [real: bb74, imaginary: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_100),
            _100 = ((_91 as Some).0: &str),
            _90 = _100,
            StorageDead(_100),
            FakeRead(ForLet(None), _90),
            StorageDead(_96),
            StorageDead(_94),
            StorageDead(_91),
            StorageLive(_101),
            _101 = &(*_20),
            StorageLive(_102),
            _102 = &(*_90),
            _37 = unicode::CanonicalClassQuery::ByValue { property_name: move _101, property_value: move _102 },
            StorageDead(_102),
            StorageDead(_101),
            StorageDead(_90),
            StorageDead(_76),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:281:21: 281:22 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb75,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_99),
            _99 = unicode::Error::PropertyValueNotFound,
            _0 = core::result::Result::<unicode::CanonicalClassQuery, unicode::Error>::Err(move _99),
            StorageDead(_99),
            StorageDead(_96),
            StorageDead(_94),
            StorageDead(_91),
            StorageDead(_90),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[24],
                },
                kind: goto -> bb79,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::result::Result::<unicode::CanonicalClassQuery, unicode::Error>::Ok(move _37),
            StorageDead(_37),
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:283:13: 283:14 (#0),
                    scope: scope[4],
                },
                kind: drop(_18) -> [return: bb76, unwind: bb89],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:283:13: 283:14 (#0),
                    scope: scope[3],
                },
                kind: drop(_16) -> [return: bb77, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_15),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:283:13: 283:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb87,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_78),
            StorageDead(_77),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb79,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_76),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb82,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_65),
            StorageDead(_63),
            StorageDead(_60),
            StorageDead(_59),
            StorageDead(_58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb82,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            StorageDead(_45),
            StorageDead(_42),
            StorageDead(_41),
            StorageDead(_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb82,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb84,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_25),
            StorageDead(_22),
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb84,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:283:13: 283:14 (#0),
                    scope: scope[4],
                },
                kind: drop(_18) -> [return: bb85, unwind: bb89],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:283:13: 283:14 (#0),
                    scope: scope[3],
                },
                kind: drop(_16) -> [return: bb86, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_15),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:285:6: 285:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb87,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:285:6: 285:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:283:13: 283:14 (#0),
                    scope: scope[4],
                },
                kind: drop(_18) -> [return: bb89, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:283:13: 283:14 (#0),
                    scope: scope[3],
                },
                kind: drop(_16) -> [return: bb91, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:240:77: 240:78 (#0),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb91, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:238:5: 285:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<unicode::CanonicalClassQuery, unicode::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:238:31: 238:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} unicode::ClassQuery<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:238:21: 238:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:240:13: 240:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-syntax/src/unicode.rs:239:15: 239:20 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:240:13: 240:37 (#0),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:240:35: 240:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:239:9: 284:10 (#0),
                },
            ),
        ),
        ty: &'{erased} unicode::ClassQuery<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:240:41: 240:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:239:9: 284:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:240:63: 240:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:239:9: 284:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:240:63: 240:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:239:9: 284:10 (#0),
                },
            ),
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:240:63: 240:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:239:9: 284:10 (#0),
                },
            ),
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:240:63: 240:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:239:9: 284:10 (#0),
                },
            ),
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:240:64: 240:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:239:9: 284:10 (#0),
                },
            ),
        ),
        ty: &'{erased} char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:240:64: 240:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-syntax/src/unicode.rs:239:15: 239:20 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:241:13: 241:37 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:241:32: 241:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:239:9: 284:10 (#0),
                },
            ),
        ),
        ty: &'{erased} unicode::ClassQuery<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:241:41: 241:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:239:9: 284:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:241:63: 241:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-syntax/src/unicode.rs:239:15: 239:20 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:242:13: 242:66 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:242:35: 242:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-syntax/src/unicode.rs:239:15: 239:20 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:242:13: 242:66 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:242:50: 242:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/unicode.rs:243:37: 243:75 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:243:21: 243:34 (#0),
                    },
                ),
            ),
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:243:21: 243:34 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:243:61: 243:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/unicode.rs:244:38: 244:77 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:244:21: 244:35 (#0),
                    },
                ),
            ),
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:244:21: 244:35 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:244:62: 244:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/unicode.rs:246:34: 249:18 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:246:21: 246:31 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:246:21: 246:31 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:246:40: 246:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, unicode::Error>, core::option::Option<&'{erased} str>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:246:40: 246:71 (#1791),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::option::Option<&'{erased} str>, unicode::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:246:40: 246:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:246:55: 246:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:246:55: 246:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:246:55: 246:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:246:55: 246:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:246:70: 246:71 (#1792),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _22,
                                ),
                                regex-syntax/src/unicode.rs:246:40: 246:71 (#1791),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:246:70: 246:71 (#1792),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, unicode::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:246:70: 246:71 (#1792),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:246:70: 246:71 (#1792),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, unicode::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:246:70: 246:71 (#1792),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _22,
                                ),
                                regex-syntax/src/unicode.rs:246:40: 246:71 (#1791),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:246:40: 246:71 (#1791),
                    },
                ),
            ),
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:246:40: 246:71 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:247:21: 247:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:247:29: 247:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: unicode::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:247:40: 247:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _21,
                                ),
                                regex-syntax/src/unicode.rs:246:40: 246:71 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:248:21: 248:37 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:248:26: 248:36 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: unicode::CanonicalClassQuery,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:250:20: 282:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:258:21: 258:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:251:21: 251:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/unicode.rs:252:37: 255:26 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:252:29: 252:34 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:252:29: 252:34 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:252:43: 252:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, unicode::Error>, core::option::Option<&'{erased} str>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:252:43: 252:77 (#1793),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::option::Option<&'{erased} str>, unicode::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:252:43: 252:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:252:60: 252:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:252:60: 252:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:252:60: 252:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:252:60: 252:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:252:76: 252:77 (#1794),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _42,
                                ),
                                regex-syntax/src/unicode.rs:252:43: 252:77 (#1793),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:252:76: 252:77 (#1794),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, unicode::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:252:76: 252:77 (#1794),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:252:76: 252:77 (#1794),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, unicode::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:252:76: 252:77 (#1794),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _42,
                                ),
                                regex-syntax/src/unicode.rs:252:43: 252:77 (#1793),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:252:43: 252:77 (#1793),
                    },
                ),
            ),
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:252:43: 252:77 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:253:29: 253:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:253:37: 253:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: unicode::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:253:48: 253:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _41,
                                ),
                                regex-syntax/src/unicode.rs:252:43: 252:77 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:254:29: 254:40 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:254:34: 254:39 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:256:62: 256:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/unicode.rs:259:37: 262:26 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:259:29: 259:34 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:259:29: 259:34 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:259:43: 259:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, unicode::Error>, core::option::Option<&'{erased} str>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:259:43: 259:77 (#1795),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::option::Option<&'{erased} str>, unicode::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:259:43: 259:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:259:60: 259:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:259:60: 259:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:259:60: 259:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:259:60: 259:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:259:76: 259:77 (#1796),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _60,
                                ),
                                regex-syntax/src/unicode.rs:259:43: 259:77 (#1795),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:259:76: 259:77 (#1796),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, unicode::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:259:76: 259:77 (#1796),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:259:76: 259:77 (#1796),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, unicode::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:259:76: 259:77 (#1796),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _60,
                                ),
                                regex-syntax/src/unicode.rs:259:43: 259:77 (#1795),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:259:43: 259:77 (#1795),
                    },
                ),
            ),
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:259:43: 259:77 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:260:29: 260:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:260:37: 260:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: unicode::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:260:48: 260:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _59,
                                ),
                                regex-syntax/src/unicode.rs:259:43: 259:77 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:261:29: 261:40 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:261:34: 261:39 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:263:53: 263:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/unicode.rs:266:36: 269:26 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:266:29: 266:33 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [(&'{erased} str, &'{erased} str)],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:266:29: 266:33 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} [(&'{erased} str, &'{erased} str)]>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:266:42: 266:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, unicode::Error>, core::option::Option<&'{erased} [(&'{erased} str, &'{erased} str)]>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:266:42: 266:70 (#1797),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::option::Option<&'{erased} [(&'{erased} str, &'{erased} str)]>, unicode::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:266:42: 266:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:266:58: 266:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:266:69: 266:70 (#1798),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _78,
                                ),
                                regex-syntax/src/unicode.rs:266:42: 266:70 (#1797),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:266:69: 266:70 (#1798),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, unicode::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:266:69: 266:70 (#1798),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:266:69: 266:70 (#1798),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, unicode::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:266:69: 266:70 (#1798),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _78,
                                ),
                                regex-syntax/src/unicode.rs:266:42: 266:70 (#1797),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:266:42: 266:70 (#1797),
                    },
                ),
            ),
        ),
        ty: core::option::Option<&'{erased} [(&'{erased} str, &'{erased} str)]>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:266:42: 266:70 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:267:29: 267:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:267:37: 267:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: unicode::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:267:48: 267:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _77,
                                ),
                                regex-syntax/src/unicode.rs:266:42: 266:70 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:268:29: 268:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [(&'{erased} str, &'{erased} str)],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:268:34: 268:38 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/unicode.rs:271:29: 276:30 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:270:29: 270:38 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:270:29: 270:38 (#0),
            scope: scope[24],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:271:35: 271:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(&'{erased} str, &'{erased} str)],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:271:51: 271:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:271:57: 271:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:271:57: 271:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:271:57: 271:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:271:57: 271:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:272:33: 272:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:273:37: 273:77 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:273:37: 273:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: unicode::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:273:48: 273:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _91,
                                ),
                                regex-syntax/src/unicode.rs:271:35: 271:73 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:275:33: 275:48 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:275:38: 275:47 (#0),
            scope: scope[24],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:278:44: 278:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:279:45: 279:54 (#0),
            scope: scope[0],
        },
    },
]