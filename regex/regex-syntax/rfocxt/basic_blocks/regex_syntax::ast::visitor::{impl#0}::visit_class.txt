[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:317:23: 317:55 (#0),
                    scope: scope[0],
                },
                kind: _4 = ast::visitor::ClassInduct::<'_>::from_bracketed(move _5) -> [return: bb1, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageLive(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:318:9: 349:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:318:9: 349:10 (#0),
                    scope: scope[1],
                },
                kind: falseUnwind -> [real: bb3, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &(*_1),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &_4,
            _12 = &(*_13),
            StorageLive(_14),
            _14 = &mut (*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:319:13: 319:48 (#0),
                    scope: scope[1],
                },
                kind: _10 = ast::visitor::HeapVisitor::<'_>::visit_class_pre::<V>(move _11, move _12, move _14) -> [return: bb4, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_12),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:319:13: 319:49 (#1109),
                    scope: scope[1],
                },
                kind: _9 = <core::result::Result<(), <V as ast::visitor::Visitor>::Err> as core::ops::Try>::branch(move _10) -> [return: bb5, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            PlaceMention(_9),
            _15 = discriminant(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:319:13: 319:49 (#1109),
                    scope: scope[1],
                },
                kind: switchInt(move _15) -> [0: bb8, 1: bb7, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:319:13: 319:49 (#1109),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:319:48: 319:49 (#1110),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb9, imaginary: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_19),
            _19 = ((_9 as Continue).0: ()),
            _8 = _19,
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:319:49: 319:50 (#0),
                    scope: scope[1],
                },
                kind: drop(_9) -> [return: bb11, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = move ((_9 as Break).0: core::result::Result<core::convert::Infallible, <V as ast::visitor::Visitor>::Err>),
            StorageLive(_18),
            _18 = move _16,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:319:13: 319:49 (#1109),
                    scope: scope[3],
                },
                kind: _0 = <core::result::Result<(), <V as ast::visitor::Visitor>::Err> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, <V as ast::visitor::Visitor>::Err>>>::from_residual(move _18) -> [return: bb10, unwind: bb81],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:319:48: 319:49 (#1110),
                    scope: scope[1],
                },
                kind: drop(_16) -> [return: bb66, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_9),
            StorageDead(_8),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            _22 = &(*_1),
            StorageLive(_23),
            StorageLive(_24),
            _24 = &_4,
            _23 = &(*_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:320:30: 320:53 (#0),
                    scope: scope[6],
                },
                kind: _21 = ast::visitor::HeapVisitor::<'_>::induct_class(move _22, move _23) -> [return: bb12, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_22),
            PlaceMention(_21),
            _25 = discriminant(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:320:20: 320:27 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _25) -> [1: bb13, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:320:20: 320:27 (#0),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb14, imaginary: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_26),
            _26 = move ((_21 as Some).0: ast::visitor::ClassFrame<'_>),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &_26,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:321:29: 321:38 (#0),
                    scope: scope[6],
                },
                kind: _28 = ast::visitor::ClassFrame::<'_>::child(move _29) -> [return: bb15, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            FakeRead(ForLet(None), _28),
            StorageLive(_30),
            StorageLive(_31),
            _31 = &mut ((*_1).1: std::vec::Vec<(ast::visitor::ClassInduct<'_>, ast::visitor::ClassFrame<'_>)>),
            StorageLive(_32),
            StorageLive(_33),
            _33 = move _4,
            StorageLive(_34),
            _34 = move _26,
            _32 = (move _33, move _34),
            StorageDead(_34),
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:322:17: 322:48 (#0),
                    scope: scope[7],
                },
                kind: _30 = std::vec::Vec::<(ast::visitor::ClassInduct<'_>, ast::visitor::ClassFrame<'_>)>::push(move _31, move _32) -> [return: bb16, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            StorageDead(_31),
            StorageDead(_30),
            StorageLive(_35),
            _35 = move _28,
            _4 = move _35,
            StorageDead(_35),
            StorageDead(_28),
            StorageDead(_26),
            StorageDead(_24),
            StorageDead(_21),
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _20 = const (),
            StorageDead(_24),
            StorageDead(_21),
            StorageDead(_20),
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            StorageLive(_39),
            _39 = &(*_1),
            StorageLive(_40),
            StorageLive(_41),
            _41 = &_4,
            _40 = &(*_41),
            StorageLive(_42),
            _42 = &mut (*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:326:13: 326:49 (#0),
                    scope: scope[1],
                },
                kind: _38 = ast::visitor::HeapVisitor::<'_>::visit_class_post::<V>(move _39, move _40, move _42) -> [return: bb18, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
            StorageDead(_40),
            StorageDead(_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:326:13: 326:50 (#1111),
                    scope: scope[1],
                },
                kind: _37 = <core::result::Result<(), <V as ast::visitor::Visitor>::Err> as core::ops::Try>::branch(move _38) -> [return: bb19, unwind: bb80],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            PlaceMention(_37),
            _43 = discriminant(_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:326:13: 326:50 (#1111),
                    scope: scope[1],
                },
                kind: switchInt(move _43) -> [0: bb22, 1: bb21, otherwise: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:326:13: 326:50 (#1111),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:326:49: 326:50 (#1112),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb23, imaginary: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_47),
            _47 = ((_37 as Continue).0: ()),
            _36 = _47,
            StorageDead(_47),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:326:50: 326:51 (#0),
                    scope: scope[1],
                },
                kind: drop(_37) -> [return: bb25, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_44),
            _44 = move ((_37 as Break).0: core::result::Result<core::convert::Infallible, <V as ast::visitor::Visitor>::Err>),
            StorageLive(_46),
            _46 = move _44,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:326:13: 326:50 (#1111),
                    scope: scope[9],
                },
                kind: _0 = <core::result::Result<(), <V as ast::visitor::Visitor>::Err> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, <V as ast::visitor::Visitor>::Err>>>::from_residual(move _46) -> [return: bb24, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:326:49: 326:50 (#1112),
                    scope: scope[1],
                },
                kind: drop(_44) -> [return: bb64, unwind: bb79],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            StorageDead(_37),
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:330:13: 348:14 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb26,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:330:13: 348:14 (#0),
                    scope: scope[1],
                },
                kind: falseUnwind -> [real: bb27, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_50),
            StorageLive(_51),
            StorageLive(_52),
            _52 = &mut ((*_1).1: std::vec::Vec<(ast::visitor::ClassInduct<'_>, ast::visitor::ClassFrame<'_>)>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:331:47: 331:69 (#0),
                    scope: scope[1],
                },
                kind: _51 = std::vec::Vec::<(ast::visitor::ClassInduct<'_>, ast::visitor::ClassFrame<'_>)>::pop(move _52) -> [return: bb28, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            PlaceMention(_51),
            _53 = discriminant(_51),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:331:41: 331:69 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _53) -> [0: bb30, 1: bb31, otherwise: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _51),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:331:47: 331:69 (#0),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:332:21: 332:25 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb32, imaginary: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_56),
            _56 = move (((_51 as Some).0: (ast::visitor::ClassInduct<'_>, ast::visitor::ClassFrame<'_>)).0: ast::visitor::ClassInduct<'_>),
            StorageLive(_57),
            _57 = move (((_51 as Some).0: (ast::visitor::ClassInduct<'_>, ast::visitor::ClassFrame<'_>)).1: ast::visitor::ClassFrame<'_>),
            StorageLive(_58),
            _58 = move _56,
            StorageLive(_59),
            _59 = move _57,
            _50 = (move _58, move _59),
            StorageDead(_59),
            StorageDead(_58),
            StorageDead(_57),
            StorageDead(_56),
            PlaceMention(_50),
            StorageLive(_48),
            _48 = move (_50.0: ast::visitor::ClassInduct<'_>),
            StorageLive(_49),
            _49 = move (_50.1: ast::visitor::ClassFrame<'_>),
            StorageDead(_51),
            StorageDead(_50),
            StorageLive(_60),
            StorageLive(_61),
            StorageLive(_62),
            _62 = &(*_1),
            StorageLive(_63),
            _63 = move _49,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:337:34: 337:55 (#0),
                    scope: scope[14],
                },
                kind: _61 = ast::visitor::HeapVisitor::<'_>::pop_class(move _62, move _63) -> [return: bb33, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_55),
            _55 = (),
            _0 = core::result::Result::<(), <V as ast::visitor::Visitor>::Err>::Ok(move _55),
            StorageDead(_55),
            StorageDead(_51),
            StorageDead(_50),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb68,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
            StorageDead(_62),
            PlaceMention(_61),
            _64 = discriminant(_61),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:337:24: 337:31 (#0),
                    scope: scope[14],
                },
                kind: switchInt(move _64) -> [1: bb34, otherwise: bb50],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:337:24: 337:31 (#0),
                    scope: scope[14],
                },
                kind: falseEdge -> [real: bb35, imaginary: bb50],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_65),
            _65 = move ((_61 as Some).0: ast::visitor::ClassFrame<'_>),
            StorageLive(_67),
            PlaceMention(_65),
            _68 = discriminant(_65),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:338:28: 338:64 (#0),
                    scope: scope[15],
                },
                kind: switchInt(move _68) -> [3: bb36, otherwise: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:338:28: 338:64 (#0),
                    scope: scope[15],
                },
                kind: falseEdge -> [real: bb37, imaginary: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_69),
            _69 = &((_65 as BinaryRHS).0: &ast::ClassSetBinaryOp),
            StorageLive(_70),
            StorageLive(_71),
            StorageLive(_72),
            StorageLive(_73),
            _73 = &mut (*_3),
            StorageLive(_74),
            _74 = &(*(*_69)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:339:25: 339:65 (#0),
                    scope: scope[15],
                },
                kind: _72 = <V as ast::visitor::Visitor>::visit_class_set_binary_op_in(move _73, move _74) -> [return: bb38, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_74),
            StorageDead(_73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:339:25: 339:66 (#1113),
                    scope: scope[15],
                },
                kind: _71 = <core::result::Result<(), <V as ast::visitor::Visitor>::Err> as core::ops::Try>::branch(move _72) -> [return: bb39, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_72),
            PlaceMention(_71),
            _75 = discriminant(_71),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:339:25: 339:66 (#1113),
                    scope: scope[15],
                },
                kind: switchInt(move _75) -> [0: bb42, 1: bb41, otherwise: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _71),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:339:25: 339:66 (#1113),
                    scope: scope[15],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:339:65: 339:66 (#1114),
                    scope: scope[15],
                },
                kind: falseEdge -> [real: bb43, imaginary: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_79),
            _79 = ((_71 as Continue).0: ()),
            _70 = _79,
            StorageDead(_79),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:339:66: 339:67 (#0),
                    scope: scope[15],
                },
                kind: drop(_71) -> [return: bb45, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_76),
            _76 = move ((_71 as Break).0: core::result::Result<core::convert::Infallible, <V as ast::visitor::Visitor>::Err>),
            StorageLive(_78),
            _78 = move _76,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:339:25: 339:66 (#1113),
                    scope: scope[17],
                },
                kind: _0 = <core::result::Result<(), <V as ast::visitor::Visitor>::Err> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, <V as ast::visitor::Visitor>::Err>>>::from_residual(move _78) -> [return: bb44, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_78),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:339:65: 339:66 (#1114),
                    scope: scope[15],
                },
                kind: drop(_76) -> [return: bb61, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
            StorageDead(_70),
            _67 = const (),
            StorageDead(_69),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:338:21: 340:22 (#0),
                    scope: scope[14],
                },
                kind: goto -> bb47,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _67 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:338:21: 340:22 (#0),
                    scope: scope[14],
                },
                kind: goto -> bb47,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_67),
            StorageLive(_80),
            StorageLive(_81),
            _81 = &_65,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:341:27: 341:36 (#0),
                    scope: scope[14],
                },
                kind: _80 = ast::visitor::ClassFrame::<'_>::child(move _81) -> [return: bb48, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_81),
            _4 = move _80,
            StorageDead(_80),
            StorageLive(_82),
            StorageLive(_83),
            _83 = &mut ((*_1).1: std::vec::Vec<(ast::visitor::ClassInduct<'_>, ast::visitor::ClassFrame<'_>)>),
            StorageLive(_84),
            StorageLive(_85),
            _85 = move _48,
            StorageLive(_86),
            _86 = move _65,
            _84 = (move _85, move _86),
            StorageDead(_86),
            StorageDead(_85),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:342:21: 342:57 (#0),
                    scope: scope[14],
                },
                kind: _82 = std::vec::Vec::<(ast::visitor::ClassInduct<'_>, ast::visitor::ClassFrame<'_>)>::push(move _83, move _84) -> [return: bb49, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_84),
            StorageDead(_83),
            StorageDead(_82),
            _7 = const (),
            StorageDead(_65),
            StorageDead(_61),
            StorageDead(_60),
            StorageDead(_49),
            StorageDead(_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:318:9: 349:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _60 = const (),
            StorageDead(_61),
            StorageDead(_60),
            StorageLive(_87),
            StorageLive(_88),
            StorageLive(_89),
            StorageLive(_90),
            _90 = &(*_1),
            StorageLive(_91),
            StorageLive(_92),
            _92 = &_48,
            _91 = &(*_92),
            StorageLive(_93),
            _93 = &mut (*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:347:17: 347:58 (#0),
                    scope: scope[12],
                },
                kind: _89 = ast::visitor::HeapVisitor::<'_>::visit_class_post::<V>(move _90, move _91, move _93) -> [return: bb51, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_93),
            StorageDead(_91),
            StorageDead(_90),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:347:17: 347:59 (#1115),
                    scope: scope[12],
                },
                kind: _88 = <core::result::Result<(), <V as ast::visitor::Visitor>::Err> as core::ops::Try>::branch(move _89) -> [return: bb52, unwind: bb72],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_89),
            PlaceMention(_88),
            _94 = discriminant(_88),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:347:17: 347:59 (#1115),
                    scope: scope[12],
                },
                kind: switchInt(move _94) -> [0: bb55, 1: bb54, otherwise: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _88),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:347:17: 347:59 (#1115),
                    scope: scope[12],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:347:58: 347:59 (#1116),
                    scope: scope[12],
                },
                kind: falseEdge -> [real: bb56, imaginary: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_98),
            _98 = ((_88 as Continue).0: ()),
            _87 = _98,
            StorageDead(_98),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:347:59: 347:60 (#0),
                    scope: scope[12],
                },
                kind: drop(_88) -> [return: bb58, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_95),
            _95 = move ((_88 as Break).0: core::result::Result<core::convert::Infallible, <V as ast::visitor::Visitor>::Err>),
            StorageLive(_97),
            _97 = move _95,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:347:17: 347:59 (#1115),
                    scope: scope[21],
                },
                kind: _0 = <core::result::Result<(), <V as ast::visitor::Visitor>::Err> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, <V as ast::visitor::Visitor>::Err>>>::from_residual(move _97) -> [return: bb57, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_97),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:347:58: 347:59 (#1116),
                    scope: scope[12],
                },
                kind: drop(_95) -> [return: bb59, unwind: bb71],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_92),
            StorageDead(_88),
            StorageDead(_87),
            _7 = const (),
            StorageDead(_49),
            StorageDead(_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:330:13: 348:14 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb26,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_95),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:347:59: 347:60 (#0),
                    scope: scope[12],
                },
                kind: drop(_88) -> [return: bb60, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_92),
            StorageDead(_88),
            StorageDead(_87),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[12],
                },
                kind: goto -> bb63,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_76),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:339:66: 339:67 (#0),
                    scope: scope[15],
                },
                kind: drop(_71) -> [return: bb62, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
            StorageDead(_70),
            StorageDead(_69),
            StorageDead(_67),
            StorageDead(_65),
            StorageDead(_61),
            StorageDead(_60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[12],
                },
                kind: goto -> bb63,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_49),
            StorageDead(_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb68,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:326:50: 326:51 (#0),
                    scope: scope[1],
                },
                kind: drop(_37) -> [return: bb65, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            StorageDead(_37),
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb68,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:319:49: 319:50 (#0),
                    scope: scope[1],
                },
                kind: drop(_9) -> [return: bb67, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb68,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:350:6: 350:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:347:58: 347:59 (#1115),
                    scope: scope[21],
                },
                kind: drop(_97) -> [return: bb70, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:347:58: 347:59 (#1116),
                    scope: scope[12],
                },
                kind: drop(_95) -> [return: bb71, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:347:59: 347:60 (#0),
                    scope: scope[12],
                },
                kind: drop(_88) -> [return: bb85, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:347:58: 347:59 (#1115),
                    scope: scope[12],
                },
                kind: drop(_89) -> [return: bb85, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:339:65: 339:66 (#1113),
                    scope: scope[17],
                },
                kind: drop(_78) -> [return: bb74, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:339:65: 339:66 (#1114),
                    scope: scope[15],
                },
                kind: drop(_76) -> [return: bb75, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:339:66: 339:67 (#0),
                    scope: scope[15],
                },
                kind: drop(_71) -> [return: bb85, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:339:65: 339:66 (#1113),
                    scope: scope[15],
                },
                kind: drop(_72) -> [return: bb85, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:326:49: 326:50 (#1111),
                    scope: scope[9],
                },
                kind: drop(_46) -> [return: bb78, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:326:49: 326:50 (#1112),
                    scope: scope[1],
                },
                kind: drop(_44) -> [return: bb79, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:326:50: 326:51 (#0),
                    scope: scope[1],
                },
                kind: drop(_37) -> [return: bb85, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:326:49: 326:50 (#1111),
                    scope: scope[1],
                },
                kind: drop(_38) -> [return: bb85, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:319:48: 319:49 (#1109),
                    scope: scope[3],
                },
                kind: drop(_18) -> [return: bb82, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:319:48: 319:49 (#1110),
                    scope: scope[1],
                },
                kind: drop(_16) -> [return: bb83, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:319:49: 319:50 (#0),
                    scope: scope[1],
                },
                kind: drop(_9) -> [return: bb85, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:319:48: 319:49 (#1109),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb85, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/visitor.rs:312:5: 350:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:316:10: 316:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut ast::visitor::HeapVisitor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:313:9: 313:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/ast/visitor.rs:314:14: 314:37 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/ast/visitor.rs:314:9: 314:12 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:314:9: 314:12 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} ast::ClassBracketed,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:314:9: 314:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/ast/visitor.rs:315:18: 315:24 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/ast/visitor.rs:315:9: 315:16 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:315:9: 315:16 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:315:9: 315:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/ast/visitor.rs:317:23: 317:55 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:317:13: 317:20 (#0),
                    },
                ),
            ),
        ),
        ty: ast::visitor::ClassInduct<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:317:13: 317:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::ClassBracketed,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:317:51: 317:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/visitor.rs:318:9: 349:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:318:9: 349:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:312:5: 350:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:319:13: 319:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:319:13: 319:49 (#1109),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:319:13: 319:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::visitor::HeapVisitor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:319:13: 319:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::visitor::ClassInduct<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:319:34: 319:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::visitor::ClassInduct<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:319:34: 319:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:319:40: 319:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:319:48: 319:49 (#1110),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _9,
                                ),
                                regex-syntax/src/ast/visitor.rs:319:13: 319:49 (#1109),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:319:48: 319:49 (#1110),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:319:48: 319:49 (#1110),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:319:48: 319:49 (#1110),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:319:48: 319:49 (#1110),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _9,
                                ),
                                regex-syntax/src/ast/visitor.rs:319:13: 319:49 (#1109),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:319:13: 319:49 (#1109),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:319:13: 319:49 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:320:13: 325:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<ast::visitor::ClassFrame<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:320:30: 320:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::visitor::HeapVisitor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:320:30: 320:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::visitor::ClassInduct<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:320:48: 320:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::visitor::ClassInduct<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:320:48: 320:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:320:20: 320:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _21,
                                ),
                                regex-syntax/src/ast/visitor.rs:320:30: 320:53 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:320:20: 320:27 (#0),
                    },
                ),
            ),
        ),
        ty: ast::visitor::ClassFrame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:320:25: 320:26 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:320:54: 325:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/ast/visitor.rs:321:29: 321:38 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:321:21: 321:26 (#0),
                    },
                ),
            ),
        ),
        ty: ast::visitor::ClassInduct<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:321:21: 321:26 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::visitor::ClassFrame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:321:29: 321:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:322:17: 322:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<(ast::visitor::ClassInduct<'{erased}>, ast::visitor::ClassFrame<'{erased}>), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:322:17: 322:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (ast::visitor::ClassInduct<'{erased}>, ast::visitor::ClassFrame<'{erased}>),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:322:39: 322:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::visitor::ClassInduct<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:322:40: 322:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::visitor::ClassFrame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:322:45: 322:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::visitor::ClassInduct<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:323:23: 323:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:326:13: 326:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:326:13: 326:50 (#1111),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:326:13: 326:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::visitor::HeapVisitor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:326:13: 326:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::visitor::ClassInduct<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:326:35: 326:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::visitor::ClassInduct<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:326:35: 326:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:326:41: 326:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:326:49: 326:50 (#1112),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _37,
                                ),
                                regex-syntax/src/ast/visitor.rs:326:13: 326:50 (#1111),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:326:49: 326:50 (#1112),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:326:49: 326:50 (#1112),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:326:49: 326:50 (#1112),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:326:49: 326:50 (#1112),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _37,
                                ),
                                regex-syntax/src/ast/visitor.rs:326:13: 326:50 (#1111),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:326:13: 326:50 (#1111),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:326:13: 326:50 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _50,
                                ),
                                regex-syntax/src/ast/visitor.rs:331:41: 334:18 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:331:21: 331:38 (#0),
                    },
                ),
            ),
        ),
        ty: ast::visitor::ClassInduct<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:331:22: 331:30 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _50,
                                ),
                                regex-syntax/src/ast/visitor.rs:331:41: 334:18 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:331:21: 331:38 (#0),
                    },
                ),
            ),
        ),
        ty: ast::visitor::ClassFrame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:331:32: 331:37 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (ast::visitor::ClassInduct<'{erased}>, ast::visitor::ClassFrame<'{erased}>),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:331:41: 334:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(ast::visitor::ClassInduct<'{erased}>, ast::visitor::ClassFrame<'{erased}>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:331:47: 331:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<(ast::visitor::ClassInduct<'{erased}>, ast::visitor::ClassFrame<'{erased}>), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:331:47: 331:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:332:21: 332:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:332:29: 332:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:332:39: 332:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _51,
                                ),
                                regex-syntax/src/ast/visitor.rs:331:47: 331:69 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:333:21: 333:44 (#0),
                    },
                ),
            ),
        ),
        ty: ast::visitor::ClassInduct<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:333:27: 333:35 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _51,
                                ),
                                regex-syntax/src/ast/visitor.rs:331:47: 331:69 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:333:21: 333:44 (#0),
                    },
                ),
            ),
        ),
        ty: ast::visitor::ClassFrame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:333:37: 333:42 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::visitor::ClassInduct<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:333:49: 333:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::visitor::ClassFrame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:333:59: 333:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:337:17: 344:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<ast::visitor::ClassFrame<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:337:34: 337:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::visitor::HeapVisitor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:337:34: 337:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::visitor::ClassFrame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:337:49: 337:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:337:24: 337:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _61,
                                ),
                                regex-syntax/src/ast/visitor.rs:337:34: 337:55 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:337:24: 337:31 (#0),
                    },
                ),
            ),
        ),
        ty: ast::visitor::ClassFrame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:337:29: 337:30 (#0),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:337:56: 344:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:338:21: 340:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:338:28: 338:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _65,
                                ),
                                regex-syntax/src/ast/visitor.rs:338:67: 338:68 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:338:28: 338:64 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} &'{erased} ast::ClassSetBinaryOp,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:338:52: 338:58 (#0),
            scope: scope[15],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:339:25: 339:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:339:25: 339:66 (#1113),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:339:25: 339:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:339:25: 339:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::ClassSetBinaryOp,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:339:62: 339:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:339:65: 339:66 (#1114),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _71,
                                ),
                                regex-syntax/src/ast/visitor.rs:339:25: 339:66 (#1113),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:339:65: 339:66 (#1114),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:339:65: 339:66 (#1114),
            scope: scope[15],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:339:65: 339:66 (#1114),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:339:65: 339:66 (#1114),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _71,
                                ),
                                regex-syntax/src/ast/visitor.rs:339:25: 339:66 (#1113),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:339:25: 339:66 (#1113),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:339:25: 339:66 (#0),
            scope: scope[15],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::visitor::ClassInduct<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:341:27: 341:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::visitor::ClassFrame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:341:27: 341:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:342:21: 342:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<(ast::visitor::ClassInduct<'{erased}>, ast::visitor::ClassFrame<'{erased}>), std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:342:21: 342:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (ast::visitor::ClassInduct<'{erased}>, ast::visitor::ClassFrame<'{erased}>),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:342:43: 342:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::visitor::ClassInduct<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:342:44: 342:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::visitor::ClassFrame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:342:54: 342:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:347:17: 347:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:347:17: 347:59 (#1115),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:347:17: 347:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::visitor::HeapVisitor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:347:17: 347:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::visitor::ClassInduct<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:347:39: 347:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::visitor::ClassInduct<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:347:39: 347:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:347:50: 347:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:347:58: 347:59 (#1116),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _88,
                                ),
                                regex-syntax/src/ast/visitor.rs:347:17: 347:59 (#1115),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:347:58: 347:59 (#1116),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:347:58: 347:59 (#1116),
            scope: scope[12],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:347:58: 347:59 (#1116),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [V/#1], def_id: DefId(0:237 ~ regex_syntax[a00b]::ast::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:347:58: 347:59 (#1116),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _88,
                                ),
                                regex-syntax/src/ast/visitor.rs:347:17: 347:59 (#1115),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/visitor.rs:347:17: 347:59 (#1115),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/visitor.rs:347:17: 347:59 (#0),
            scope: scope[12],
        },
    },
]