[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:576:42: 576:52 (#0),
                    scope: scope[0],
                },
                kind: _3 = std::vec::Vec::<hir::Hir>::len(move _4) -> [return: bb1, unwind: bb146],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:576:23: 576:53 (#0),
                    scope: scope[0],
                },
                kind: _2 = std::vec::Vec::<hir::Hir>::with_capacity(move _3) -> [return: bb2, unwind: bb146],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:577:20: 577:24 (#1680),
                    scope: scope[1],
                },
                kind: _6 = <std::vec::Vec<hir::Hir> as core::iter::IntoIterator>::into_iter(move _7) -> [return: bb3, unwind: bb144],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            PlaceMention(_6),
            StorageLive(_8),
            _8 = move _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:577:9: 587:10 (#1679),
                    scope: scope[2],
                },
                kind: goto -> bb4,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:577:9: 587:10 (#1679),
                    scope: scope[2],
                },
                kind: falseUnwind -> [real: bb5, unwind: bb142],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &mut _8,
            _12 = &mut (*_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:577:20: 577:24 (#1680),
                    scope: scope[2],
                },
                kind: _11 = <std::vec::IntoIter<hir::Hir> as core::iter::Iterator>::next(move _12) -> [return: bb6, unwind: bb142],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            PlaceMention(_11),
            _14 = discriminant(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:577:20: 577:24 (#1680),
                    scope: scope[2],
                },
                kind: switchInt(move _14) -> [0: bb8, 1: bb9, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:577:20: 577:24 (#1680),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:577:9: 587:10 (#1679),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = move ((_11 as Some).0: hir::Hir),
            StorageLive(_19),
            StorageLive(_20),
            _20 = move _16,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:578:33: 578:49 (#0),
                    scope: scope[3],
                },
                kind: _19 = hir::Hir::into_parts(move _20) -> [return: bb11, unwind: bb139],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:587:9: 587:10 (#1679),
                    scope: scope[2],
                },
                kind: drop(_11) -> [return: bb27, unwind: bb142],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            PlaceMention(_19),
            StorageLive(_17),
            _17 = move (_19.0: hir::HirKind),
            StorageLive(_18),
            _18 = move (_19.1: hir::Properties),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:578:49: 578:50 (#0),
                    scope: scope[3],
                },
                kind: drop(_19) -> [return: bb12, unwind: bb137],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            PlaceMention(_17),
            _21 = discriminant(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:579:13: 579:23 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _21) -> [7: bb14, otherwise: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_26),
            _26 = move _17,
            StorageLive(_27),
            StorageLive(_28),
            _28 = &mut _2,
            StorageLive(_29),
            StorageLive(_30),
            _30 = move _26,
            StorageLive(_31),
            _31 = move _18,
            _29 = hir::Hir { kind: move _30, props: move _31 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:584:48: 584:49 (#0),
                    scope: scope[6],
                },
                kind: drop(_31) -> [return: bb18, unwind: bb132],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:580:17: 580:44 (#0),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb15, imaginary: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            _22 = move ((_17 as Alternation).0: std::vec::Vec<hir::Hir>),
            StorageLive(_23),
            StorageLive(_24),
            _24 = &mut _2,
            StorageLive(_25),
            _25 = move _22,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:581:21: 581:38 (#0),
                    scope: scope[5],
                },
                kind: _23 = <std::vec::Vec<hir::Hir> as core::iter::Extend<hir::Hir>>::extend::<std::vec::Vec<hir::Hir>>(move _24, move _25) -> [return: bb16, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_24),
            StorageDead(_23),
            _10 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:582:17: 582:18 (#0),
                    scope: scope[4],
                },
                kind: drop(_22) -> [return: bb17, unwind: bb137],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:582:17: 582:18 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb22,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:584:48: 584:49 (#0),
                    scope: scope[6],
                },
                kind: drop(_30) -> [return: bb19, unwind: bb133],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:584:21: 584:50 (#0),
                    scope: scope[6],
                },
                kind: _27 = std::vec::Vec::<hir::Hir>::push(move _28, move _29) -> [return: bb20, unwind: bb133],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_28),
            StorageDead(_27),
            _10 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:585:17: 585:18 (#0),
                    scope: scope[4],
                },
                kind: drop(_26) -> [return: bb21, unwind: bb137],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:585:17: 585:18 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb22,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:587:9: 587:10 (#0),
                    scope: scope[3],
                },
                kind: drop(_18) -> [return: bb23, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:587:9: 587:10 (#0),
                    scope: scope[3],
                },
                kind: drop(_17) -> [return: bb24, unwind: bb140],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:587:9: 587:10 (#0),
                    scope: scope[2],
                },
                kind: drop(_16) -> [return: bb25, unwind: bb141],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:587:9: 587:10 (#1679),
                    scope: scope[2],
                },
                kind: drop(_11) -> [return: bb26, unwind: bb142],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_11),
            StorageDead(_10),
            _9 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:577:9: 587:10 (#1679),
                    scope: scope[2],
                },
                kind: goto -> bb4,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_11),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:587:9: 587:10 (#1679),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb28, unwind: bb143],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:587:9: 587:10 (#1679),
                    scope: scope[1],
                },
                kind: drop(_6) -> [return: bb29, unwind: bb145],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_32),
            StorageLive(_33),
            StorageLive(_34),
            _34 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:588:12: 588:26 (#0),
                    scope: scope[1],
                },
                kind: _33 = std::vec::Vec::<hir::Hir>::is_empty(move _34) -> [return: bb30, unwind: bb145],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:588:12: 588:26 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _33) -> [0: bb32, otherwise: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:589:20: 589:31 (#0),
                    scope: scope[1],
                },
                kind: _0 = hir::Hir::fail() -> [return: bb103, unwind: bb145],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            _38 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:590:19: 590:28 (#0),
                    scope: scope[1],
                },
                kind: _37 = std::vec::Vec::<hir::Hir>::len(move _38) -> [return: bb33, unwind: bb145],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            _36 = Eq(move _37, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:590:19: 590:33 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _36) -> [0: bb37, otherwise: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageLive(_40),
            StorageLive(_41),
            _41 = &mut _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:591:20: 591:29 (#0),
                    scope: scope[1],
                },
                kind: _40 = std::vec::Vec::<hir::Hir>::pop(move _41) -> [return: bb35, unwind: bb145],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:591:20: 591:38 (#0),
                    scope: scope[1],
                },
                kind: _0 = core::option::Option::<hir::Hir>::unwrap(move _40) -> [return: bb36, unwind: bb131],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb103,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            _32 = const (),
            StorageDead(_36),
            StorageDead(_33),
            StorageDead(_32),
            StorageLive(_42),
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            StorageLive(_46),
            StorageLive(_47),
            _47 = &_2,
            _46 = &(*_47),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:602:51: 602:55 (#0),
                    scope: scope[7],
                },
                kind: _45 = <std::vec::Vec<hir::Hir> as core::ops::Deref>::deref(move _46) -> [return: bb38, unwind: bb145],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _44 = &(*_45),
            StorageDead(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:602:35: 602:56 (#0),
                    scope: scope[7],
                },
                kind: _43 = hir::singleton_chars(move _44) -> [return: bb39, unwind: bb145],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            PlaceMention(_43),
            _48 = discriminant(_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:602:16: 602:32 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _48) -> [1: bb40, otherwise: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:602:16: 602:32 (#0),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb41, imaginary: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_49),
            _49 = move ((_43 as Some).0: std::vec::Vec<char>),
            StorageLive(_51),
            StorageLive(_52),
            StorageLive(_53),
            _53 = move _49,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:603:22: 604:29 (#0),
                    scope: scope[7],
                },
                kind: _52 = <std::vec::Vec<char> as core::iter::IntoIterator>::into_iter(move _53) -> [return: bb42, unwind: bb128],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_53),
            StorageLive(_54),
            _54 = {closure@regex-syntax/src/hir/mod.rs:605:22: 605:26},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:603:22: 605:68 (#0),
                    scope: scope[7],
                },
                kind: _51 = <std::vec::IntoIter<char> as core::iter::Iterator>::map::<hir::ClassUnicodeRange, {closure@regex-syntax/src/hir/mod.rs:605:22: 605:26}>(move _52, move _54) -> [return: bb43, unwind: bb127],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            StorageDead(_52),
            FakeRead(ForLet(None), _51),
            StorageLive(_55),
            StorageLive(_56),
            StorageLive(_57),
            _57 = move _51,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:606:46: 606:67 (#0),
                    scope: scope[8],
                },
                kind: _56 = hir::ClassUnicode::new::<core::iter::Map<std::vec::IntoIter<char>, {closure@regex-syntax/src/hir/mod.rs:605:22: 605:26}>>(move _57) -> [return: bb44, unwind: bb125],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_57),
            _55 = hir::Class::Unicode(move _56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:606:67: 606:68 (#0),
                    scope: scope[8],
                },
                kind: drop(_56) -> [return: bb45, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:606:20: 606:69 (#0),
                    scope: scope[8],
                },
                kind: _0 = hir::Hir::class(move _55) -> [return: bb46, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:607:9: 607:10 (#0),
                    scope: scope[7],
                },
                kind: drop(_51) -> [return: bb100, unwind: bb129],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _42 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:607:9: 607:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_43) -> [return: bb48, unwind: bb145],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            StorageDead(_45),
            StorageDead(_43),
            StorageDead(_42),
            StorageLive(_58),
            StorageLive(_59),
            StorageLive(_60),
            StorageLive(_61),
            StorageLive(_62),
            StorageLive(_63),
            _63 = &_2,
            _62 = &(*_63),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:608:51: 608:55 (#0),
                    scope: scope[9],
                },
                kind: _61 = <std::vec::Vec<hir::Hir> as core::ops::Deref>::deref(move _62) -> [return: bb49, unwind: bb145],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _60 = &(*_61),
            StorageDead(_62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:608:35: 608:56 (#0),
                    scope: scope[9],
                },
                kind: _59 = hir::singleton_bytes(move _60) -> [return: bb50, unwind: bb145],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
            PlaceMention(_59),
            _64 = discriminant(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:608:16: 608:32 (#0),
                    scope: scope[9],
                },
                kind: switchInt(move _64) -> [1: bb51, otherwise: bb58],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:608:16: 608:32 (#0),
                    scope: scope[9],
                },
                kind: falseEdge -> [real: bb52, imaginary: bb58],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_65),
            _65 = move ((_59 as Some).0: std::vec::Vec<u8>),
            StorageLive(_67),
            StorageLive(_68),
            StorageLive(_69),
            _69 = move _65,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:609:22: 610:29 (#0),
                    scope: scope[9],
                },
                kind: _68 = <std::vec::Vec<u8> as core::iter::IntoIterator>::into_iter(move _69) -> [return: bb53, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_69),
            StorageLive(_70),
            _70 = {closure@regex-syntax/src/hir/mod.rs:611:22: 611:25},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:609:22: 611:63 (#0),
                    scope: scope[9],
                },
                kind: _67 = <std::vec::IntoIter<u8> as core::iter::Iterator>::map::<hir::ClassBytesRange, {closure@regex-syntax/src/hir/mod.rs:611:22: 611:25}>(move _68, move _70) -> [return: bb54, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_70),
            StorageDead(_68),
            FakeRead(ForLet(None), _67),
            StorageLive(_71),
            StorageLive(_72),
            StorageLive(_73),
            _73 = move _67,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:612:44: 612:63 (#0),
                    scope: scope[10],
                },
                kind: _72 = hir::ClassBytes::new::<core::iter::Map<std::vec::IntoIter<u8>, {closure@regex-syntax/src/hir/mod.rs:611:22: 611:25}>>(move _73) -> [return: bb55, unwind: bb118],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_73),
            _71 = hir::Class::Bytes(move _72),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:612:63: 612:64 (#0),
                    scope: scope[10],
                },
                kind: drop(_72) -> [return: bb56, unwind: bb117],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_72),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:612:20: 612:65 (#0),
                    scope: scope[10],
                },
                kind: _0 = hir::Hir::class(move _71) -> [return: bb57, unwind: bb117],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:613:9: 613:10 (#0),
                    scope: scope[9],
                },
                kind: drop(_67) -> [return: bb97, unwind: bb122],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _58 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:613:9: 613:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_59) -> [return: bb59, unwind: bb145],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
            StorageDead(_61),
            StorageDead(_59),
            StorageDead(_58),
            StorageLive(_74),
            StorageLive(_75),
            StorageLive(_76),
            StorageLive(_77),
            StorageLive(_78),
            StorageLive(_79),
            _79 = &_2,
            _78 = &(*_79),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:616:40: 616:44 (#0),
                    scope: scope[11],
                },
                kind: _77 = <std::vec::Vec<hir::Hir> as core::ops::Deref>::deref(move _78) -> [return: bb60, unwind: bb145],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _76 = &(*_77),
            StorageDead(_78),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:616:28: 616:45 (#0),
                    scope: scope[11],
                },
                kind: _75 = hir::class_chars(move _76) -> [return: bb61, unwind: bb145],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_76),
            PlaceMention(_75),
            _80 = discriminant(_75),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:616:16: 616:25 (#0),
                    scope: scope[11],
                },
                kind: switchInt(move _80) -> [1: bb62, otherwise: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:616:16: 616:25 (#0),
                    scope: scope[11],
                },
                kind: falseEdge -> [real: bb63, imaginary: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_81),
            _81 = move ((_75 as Some).0: hir::Class),
            StorageLive(_83),
            _83 = move _81,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:617:20: 617:35 (#0),
                    scope: scope[11],
                },
                kind: _0 = hir::Hir::class(move _83) -> [return: bb64, unwind: bb114],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_83),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:618:9: 618:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_81) -> [return: bb95, unwind: bb116],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _74 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:618:9: 618:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_75) -> [return: bb66, unwind: bb145],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_79),
            StorageDead(_77),
            StorageDead(_75),
            StorageDead(_74),
            StorageLive(_84),
            StorageLive(_85),
            StorageLive(_86),
            StorageLive(_87),
            StorageLive(_88),
            StorageLive(_89),
            _89 = &_2,
            _88 = &(*_89),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:619:40: 619:44 (#0),
                    scope: scope[12],
                },
                kind: _87 = <std::vec::Vec<hir::Hir> as core::ops::Deref>::deref(move _88) -> [return: bb67, unwind: bb145],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _86 = &(*_87),
            StorageDead(_88),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:619:28: 619:45 (#0),
                    scope: scope[12],
                },
                kind: _85 = hir::class_bytes(move _86) -> [return: bb68, unwind: bb145],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_86),
            PlaceMention(_85),
            _90 = discriminant(_85),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:619:16: 619:25 (#0),
                    scope: scope[12],
                },
                kind: switchInt(move _90) -> [1: bb69, otherwise: bb72],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:619:16: 619:25 (#0),
                    scope: scope[12],
                },
                kind: falseEdge -> [real: bb70, imaginary: bb72],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_91),
            _91 = move ((_85 as Some).0: hir::Class),
            StorageLive(_93),
            _93 = move _91,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:620:20: 620:35 (#0),
                    scope: scope[12],
                },
                kind: _0 = hir::Hir::class(move _93) -> [return: bb71, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_93),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:621:9: 621:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_91) -> [return: bb93, unwind: bb113],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _84 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:621:9: 621:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_85) -> [return: bb73, unwind: bb145],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_89),
            StorageDead(_87),
            StorageDead(_85),
            StorageDead(_84),
            StorageLive(_94),
            StorageLive(_95),
            StorageLive(_96),
            _96 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:626:21: 626:44 (#0),
                    scope: scope[1],
                },
                kind: _95 = hir::lift_common_prefix(move _96) -> [return: bb74, unwind: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_96),
            PlaceMention(_95),
            _97 = discriminant(_95),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:626:15: 626:44 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _97) -> [0: bb76, 1: bb77, otherwise: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _95),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:626:21: 626:44 (#0),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:627:13: 627:20 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb78, imaginary: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_100),
            _100 = move ((_95 as Err).0: std::vec::Vec<hir::Hir>),
            _94 = move _100,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:628:39: 628:40 (#0),
                    scope: scope[1],
                },
                kind: drop(_100) -> [return: bb79, unwind: bb109],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_98),
            _98 = move ((_95 as Ok).0: hir::Hir),
            _0 = move _98,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:627:33: 627:34 (#0),
                    scope: scope[1],
                },
                kind: drop(_98) -> [return: bb91, unwind: bb109],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_100),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:626:9: 626:12 (#0),
                    scope: scope[1],
                },
                kind: drop(_2) -> [return: bb80, unwind: bb81],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = move _94,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:629:9: 629:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_94) -> [return: bb82, unwind: bb109],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = move _94,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:629:9: 629:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_94) -> [return: bb109, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_94),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:629:10: 629:11 (#0),
                    scope: scope[1],
                },
                kind: drop(_95) -> [return: bb83, unwind: bb145],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_95),
            StorageLive(_101),
            StorageLive(_102),
            StorageLive(_103),
            StorageLive(_104),
            StorageLive(_105),
            _105 = &_2,
            _104 = &(*_105),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:630:45: 630:49 (#0),
                    scope: scope[1],
                },
                kind: _103 = <std::vec::Vec<hir::Hir> as core::ops::Deref>::deref(move _104) -> [return: bb84, unwind: bb145],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _102 = &(*_103),
            StorageDead(_104),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:630:21: 630:50 (#0),
                    scope: scope[1],
                },
                kind: _101 = hir::Properties::alternation(move _102) -> [return: bb85, unwind: bb145],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_102),
            FakeRead(ForLet(None), _101),
            StorageDead(_105),
            StorageDead(_103),
            StorageLive(_106),
            StorageLive(_107),
            _107 = move _2,
            _106 = hir::HirKind::Alternation(move _107),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:631:45: 631:46 (#0),
                    scope: scope[15],
                },
                kind: drop(_107) -> [return: bb86, unwind: bb107],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_107),
            StorageLive(_108),
            _108 = move _101,
            _0 = hir::Hir { kind: move _106, props: move _108 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:631:54: 631:55 (#0),
                    scope: scope[15],
                },
                kind: drop(_108) -> [return: bb87, unwind: bb107],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_108),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:631:54: 631:55 (#0),
                    scope: scope[15],
                },
                kind: drop(_106) -> [return: bb88, unwind: bb108],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_106),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:632:5: 632:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_101) -> [return: bb89, unwind: bb145],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_101),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:632:5: 632:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb90, unwind: bb146],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:632:5: 632:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb106, unwind: bb147],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_98),
            StorageDead(_94),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:629:10: 629:11 (#0),
                    scope: scope[1],
                },
                kind: drop(_95) -> [return: bb92, unwind: bb145],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_95),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb104,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_91),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:621:9: 621:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_85) -> [return: bb94, unwind: bb145],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_89),
            StorageDead(_87),
            StorageDead(_85),
            StorageDead(_84),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb104,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_81),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:618:9: 618:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_75) -> [return: bb96, unwind: bb145],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_79),
            StorageDead(_77),
            StorageDead(_75),
            StorageDead(_74),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb104,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_67),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:613:9: 613:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_65) -> [return: bb98, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_65),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:613:9: 613:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_59) -> [return: bb99, unwind: bb145],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
            StorageDead(_61),
            StorageDead(_59),
            StorageDead(_58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb104,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:607:9: 607:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_49) -> [return: bb101, unwind: bb130],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:607:9: 607:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_43) -> [return: bb102, unwind: bb145],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            StorageDead(_45),
            StorageDead(_43),
            StorageDead(_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb104,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb104,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:632:5: 632:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb105, unwind: bb146],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:632:5: 632:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb106, unwind: bb147],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:632:6: 632:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:631:54: 631:55 (#0),
                    scope: scope[15],
                },
                kind: drop(_106) -> [return: bb108, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:632:5: 632:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_101) -> [return: bb145, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:629:10: 629:11 (#0),
                    scope: scope[1],
                },
                kind: drop(_95) -> [return: bb145, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:626:43: 626:44 (#0),
                    scope: scope[1],
                },
                kind: drop(_96) -> [return: bb145, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:620:34: 620:35 (#0),
                    scope: scope[12],
                },
                kind: drop(_93) -> [return: bb112, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:621:9: 621:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_91) -> [return: bb113, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:621:9: 621:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_85) -> [return: bb145, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:617:34: 617:35 (#0),
                    scope: scope[11],
                },
                kind: drop(_83) -> [return: bb115, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:618:9: 618:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_81) -> [return: bb116, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:618:9: 618:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_75) -> [return: bb145, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:612:64: 612:65 (#0),
                    scope: scope[10],
                },
                kind: drop(_71) -> [return: bb119, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:612:62: 612:63 (#0),
                    scope: scope[10],
                },
                kind: drop(_73) -> [return: bb119, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:613:9: 613:10 (#0),
                    scope: scope[9],
                },
                kind: drop(_67) -> [return: bb122, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:611:62: 611:63 (#0),
                    scope: scope[9],
                },
                kind: drop(_68) -> [return: bb122, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:610:28: 610:29 (#0),
                    scope: scope[9],
                },
                kind: drop(_69) -> [return: bb122, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:613:9: 613:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_65) -> [return: bb123, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:613:9: 613:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_59) -> [return: bb145, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:606:68: 606:69 (#0),
                    scope: scope[8],
                },
                kind: drop(_55) -> [return: bb126, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:606:66: 606:67 (#0),
                    scope: scope[8],
                },
                kind: drop(_57) -> [return: bb126, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:607:9: 607:10 (#0),
                    scope: scope[7],
                },
                kind: drop(_51) -> [return: bb129, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:605:67: 605:68 (#0),
                    scope: scope[7],
                },
                kind: drop(_52) -> [return: bb129, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:604:28: 604:29 (#0),
                    scope: scope[7],
                },
                kind: drop(_53) -> [return: bb129, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:607:9: 607:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_49) -> [return: bb130, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:607:9: 607:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_43) -> [return: bb145, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:591:37: 591:38 (#0),
                    scope: scope[1],
                },
                kind: drop(_40) -> [return: bb145, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:584:48: 584:49 (#0),
                    scope: scope[6],
                },
                kind: drop(_30) -> [return: bb133, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:584:49: 584:50 (#0),
                    scope: scope[6],
                },
                kind: drop(_29) -> [return: bb134, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:585:17: 585:18 (#0),
                    scope: scope[4],
                },
                kind: drop(_26) -> [return: bb137, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:581:37: 581:38 (#0),
                    scope: scope[5],
                },
                kind: drop(_25) -> [return: bb136, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:582:17: 582:18 (#0),
                    scope: scope[4],
                },
                kind: drop(_22) -> [return: bb137, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:587:9: 587:10 (#0),
                    scope: scope[3],
                },
                kind: drop(_18) -> [return: bb138, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:587:9: 587:10 (#0),
                    scope: scope[3],
                },
                kind: drop(_17) -> [return: bb140, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:578:48: 578:49 (#0),
                    scope: scope[3],
                },
                kind: drop(_20) -> [return: bb140, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:587:9: 587:10 (#0),
                    scope: scope[2],
                },
                kind: drop(_16) -> [return: bb141, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:587:9: 587:10 (#1679),
                    scope: scope[2],
                },
                kind: drop(_11) -> [return: bb142, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:587:9: 587:10 (#1679),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb143, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:587:9: 587:10 (#1679),
                    scope: scope[1],
                },
                kind: drop(_6) -> [return: bb145, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:577:23: 577:24 (#1680),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb145, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:632:5: 632:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb146, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:632:5: 632:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb147, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:572:5: 632:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:572:43: 572:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/hir/mod.rs:572:30: 572:38 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/mod.rs:572:24: 572:28 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:572:24: 572:28 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:572:24: 572:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/mod.rs:576:23: 576:53 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:576:13: 576:20 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:576:13: 576:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:576:42: 576:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:576:42: 576:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:577:9: 587:10 (#1679),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::IntoIter<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:577:20: 577:24 (#1680),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:577:20: 577:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                regex-syntax/src/hir/mod.rs:577:20: 577:24 (#1680),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:577:20: 577:24 (#1680),
                    },
                ),
            ),
        ),
        ty: std::vec::IntoIter<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:577:20: 577:24 (#1680),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:572:5: 632:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:577:20: 577:24 (#1680),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<hir::Hir>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:577:20: 577:24 (#1680),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::IntoIter<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:577:20: 577:24 (#1680),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::IntoIter<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:577:20: 577:24 (#1680),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:577:9: 587:10 (#1679),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:577:9: 587:10 (#1679),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _11,
                                ),
                                regex-syntax/src/hir/mod.rs:577:20: 577:24 (#1680),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:577:13: 577:16 (#1681),
                    },
                ),
            ),
        ),
        ty: hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:577:13: 577:16 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _19,
                                ),
                                regex-syntax/src/hir/mod.rs:578:33: 578:49 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:578:17: 578:30 (#0),
                    },
                ),
            ),
        ),
        ty: hir::HirKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:578:18: 578:22 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _19,
                                ),
                                regex-syntax/src/hir/mod.rs:578:33: 578:49 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:578:17: 578:30 (#0),
                    },
                ),
            ),
        ),
        ty: hir::Properties,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:578:24: 578:29 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (hir::HirKind, hir::Properties),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:578:33: 578:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:578:33: 578:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:580:17: 580:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _17,
                                ),
                                regex-syntax/src/hir/mod.rs:579:19: 579:23 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:580:17: 580:44 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:580:38: 580:43 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:581:21: 581:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:581:21: 581:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:581:32: 581:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _17,
                                ),
                                regex-syntax/src/hir/mod.rs:579:19: 579:23 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:583:17: 583:21 (#0),
                    },
                ),
            ),
        ),
        ty: hir::HirKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:583:17: 583:21 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:584:21: 584:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:584:21: 584:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:584:30: 584:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: hir::HirKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:584:36: 584:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: hir::Properties,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:584:42: 584:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:588:9: 592:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:588:12: 588:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:588:12: 588:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:588:27: 590:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:590:19: 590:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:590:19: 590:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:590:19: 590:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:590:34: 592:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<hir::Hir>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:591:20: 591:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:591:20: 591:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:602:9: 607:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<std::vec::Vec<char, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:602:35: 602:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:602:51: 602:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:602:51: 602:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:602:51: 602:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:602:51: 602:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:602:16: 602:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _43,
                                ),
                                regex-syntax/src/hir/mod.rs:602:35: 602:56 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:602:16: 602:32 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<char, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:602:21: 602:31 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:602:57: 607:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/mod.rs:603:22: 605:68 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:603:17: 603:19 (#0),
                    },
                ),
            ),
        ),
        ty: core::iter::Map<std::vec::IntoIter<char, std::alloc::Global>, Closure(DefId(0:946 ~ regex_syntax[a00b]::hir::{impl#5}::alternation::{closure#0}), [i16, Binder { value: extern "RustCall" fn((char,)) -> hir::ClassUnicodeRange, bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:603:17: 603:19 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::IntoIter<char, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:603:22: 604:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::Vec<char, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:603:22: 603:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:946 ~ regex_syntax[a00b]::hir::{impl#5}::alternation::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn((char,)) -> hir::ClassUnicodeRange, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:605:22: 605:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::Class,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:606:31: 606:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: hir::ClassUnicode,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:606:46: 606:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Map<std::vec::IntoIter<char, std::alloc::Global>, Closure(DefId(0:946 ~ regex_syntax[a00b]::hir::{impl#5}::alternation::{closure#0}), [i16, Binder { value: extern "RustCall" fn((char,)) -> hir::ClassUnicodeRange, bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:606:64: 606:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:608:9: 613:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<std::vec::Vec<u8, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:608:35: 608:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:608:51: 608:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:608:51: 608:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:608:51: 608:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:608:51: 608:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:608:16: 608:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _59,
                                ),
                                regex-syntax/src/hir/mod.rs:608:35: 608:56 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:608:16: 608:32 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<u8, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:608:21: 608:31 (#0),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:608:57: 613:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/mod.rs:609:22: 611:63 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:609:17: 609:19 (#0),
                    },
                ),
            ),
        ),
        ty: core::iter::Map<std::vec::IntoIter<u8, std::alloc::Global>, Closure(DefId(0:947 ~ regex_syntax[a00b]::hir::{impl#5}::alternation::{closure#1}), [i16, Binder { value: extern "RustCall" fn((u8,)) -> hir::ClassBytesRange, bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:609:17: 609:19 (#0),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::IntoIter<u8, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:609:22: 610:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::Vec<u8, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:609:22: 609:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:947 ~ regex_syntax[a00b]::hir::{impl#5}::alternation::{closure#1}),
            [
                i16,
                Binder { value: extern "RustCall" fn((u8,)) -> hir::ClassBytesRange, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:611:22: 611:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::Class,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:612:31: 612:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: hir::ClassBytes,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:612:44: 612:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Map<std::vec::IntoIter<u8, std::alloc::Global>, Closure(DefId(0:947 ~ regex_syntax[a00b]::hir::{impl#5}::alternation::{closure#1}), [i16, Binder { value: extern "RustCall" fn((u8,)) -> hir::ClassBytesRange, bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:612:60: 612:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:616:9: 618:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<hir::Class>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:616:28: 616:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:616:40: 616:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:616:40: 616:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:616:40: 616:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:616:40: 616:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:616:16: 616:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _75,
                                ),
                                regex-syntax/src/hir/mod.rs:616:28: 616:45 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:616:16: 616:25 (#0),
                    },
                ),
            ),
        ),
        ty: hir::Class,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:616:21: 616:24 (#0),
            scope: scope[11],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:616:46: 618:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::Class,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:617:31: 617:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:619:9: 621:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<hir::Class>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:619:28: 619:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:619:40: 619:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:619:40: 619:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:619:40: 619:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:619:40: 619:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:619:16: 619:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _85,
                                ),
                                regex-syntax/src/hir/mod.rs:619:28: 619:45 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:619:16: 619:25 (#0),
                    },
                ),
            ),
        ),
        ty: hir::Class,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:619:21: 619:24 (#0),
            scope: scope[12],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:619:46: 621:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::Class,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:620:31: 620:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:626:15: 629:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<hir::Hir, std::vec::Vec<hir::Hir, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:626:21: 626:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:626:40: 626:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:627:13: 627:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _95,
                                ),
                                regex-syntax/src/hir/mod.rs:626:21: 626:44 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:627:13: 627:20 (#0),
                    },
                ),
            ),
        ),
        ty: hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:627:16: 627:19 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:627:24: 627:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _95,
                                ),
                                regex-syntax/src/hir/mod.rs:626:21: 626:44 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:628:13: 628:27 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:628:17: 628:26 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/mod.rs:630:21: 630:50 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:630:13: 630:18 (#0),
                    },
                ),
            ),
        ),
        ty: hir::Properties,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:630:13: 630:18 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:630:45: 630:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:630:45: 630:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:630:45: 630:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:630:45: 630:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: hir::HirKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:631:21: 631:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:631:42: 631:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: hir::Properties,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:631:48: 631:53 (#0),
            scope: scope[0],
        },
    },
]