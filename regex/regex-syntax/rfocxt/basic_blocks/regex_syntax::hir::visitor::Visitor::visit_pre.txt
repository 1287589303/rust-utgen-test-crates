[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = (),
            _0 = core::result::Result::<(), <Self as hir::visitor::Visitor>::Err>::Ok(move _3),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:32:6: 32:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(0:883 ~ regex_syntax[a00b]::hir::visitor::Visitor::Err) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:30:44: 30:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:30:18: 30:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/hir/visitor.rs:30:35: 30:39 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/visitor.rs:30:29: 30:33 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/visitor.rs:30:29: 30:33 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:30:29: 30:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:31:12: 31:14 (#0),
            scope: scope[0],
        },
    },
]