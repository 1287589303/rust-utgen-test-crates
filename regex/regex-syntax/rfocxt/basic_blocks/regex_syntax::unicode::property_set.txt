[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &_2,
            _6 = &(*_7),
            StorageLive(_8),
            _8 = {closure@regex-syntax/src/unicode.rs:630:43: 630:46},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:629:5: 630:51 (#0),
                    scope: scope[0],
                },
                kind: _4 = core::slice::<impl [(&str, &[(char, char)])]>::binary_search_by_key::<'_, &str, {closure@regex-syntax/src/unicode.rs:630:43: 630:46}>(move _5, move _6, move _8) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:629:5: 631:14 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::result::Result::<usize, usize>::ok(move _4) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &(*_1),
            _9 = {closure@regex-syntax/src/unicode.rs:632:14: 632:17} { name_map: move _10 },
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:629:5: 632:32 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::option::Option::<usize>::map::<&[(char, char)], {closure@regex-syntax/src/unicode.rs:632:14: 632:17}>(move _3, move _9) -> [return: bb3, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_3),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:633:2: 633:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:625:1: 633:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} [(char, char)]>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:628:6: 628:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/unicode.rs:626:15: 626:47 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/unicode.rs:626:5: 626:13 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:626:5: 626:13 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [(&'{erased} str, &'{erased} [(char, char)])],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:626:5: 626:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/unicode.rs:627:16: 627:28 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/unicode.rs:627:5: 627:14 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:627:5: 627:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:627:5: 627:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:629:5: 632:32 (#0),
                },
            ),
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:629:5: 631:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:629:5: 632:32 (#0),
                },
            ),
        ),
        ty: core::result::Result<usize, usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:629:5: 630:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:629:5: 632:32 (#0),
                },
            ),
        ),
        ty: &'{erased} [(&'{erased} str, &'{erased} [(char, char)])],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:629:5: 629:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:629:5: 632:32 (#0),
                },
            ),
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:630:31: 630:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:629:5: 632:32 (#0),
                },
            ),
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:630:31: 630:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:629:5: 632:32 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1224 ~ regex_syntax[a00b]::unicode::property_set::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'{erased} (&'{erased} str, &'{erased} [(char, char)]),)) -> &'{erased} str, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:630:43: 630:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:629:5: 632:32 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1225 ~ regex_syntax[a00b]::unicode::property_set::{closure#1}),
            [
                i32,
                Binder { value: extern "RustCall" fn((usize,)) -> &'{erased} [(char, char)], bound_vars: [] },
                (&'{erased} [(&'{erased} str, &'{erased} [(char, char)])],),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:632:14: 632:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:629:5: 632:32 (#0),
                },
            ),
        ),
        ty: &'{erased} [(&'{erased} str, &'{erased} [(char, char)])],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:632:14: 632:31 (#0),
            scope: scope[0],
        },
    },
]