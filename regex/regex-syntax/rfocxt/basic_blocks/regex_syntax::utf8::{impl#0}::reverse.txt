[
    BasicBlockData {
        statements: [
            PlaceMention((*_1)),
            _2 = discriminant((*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:170:9: 170:20 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), (*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:170:15: 170:20 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:171:13: 171:33 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:172:13: 172:41 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb7, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:173:13: 173:43 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb9, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            _9 = &mut (((*_1) as Four).0: [utf8::Utf8Range; 4]),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &mut (*_9),
            _10 = move _11 as &mut [utf8::Utf8Range] (PointerCoercion(Unsize)),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:174:46: 174:57 (#0),
                    scope: scope[3],
                },
                kind: _0 = core::slice::<impl [utf8::Utf8Range]>::reverse(move _10) -> [return: bb11, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:171:37: 171:39 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = &mut (((*_1) as Two).0: [utf8::Utf8Range; 2]),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &mut (*_3),
            _4 = move _5 as &mut [utf8::Utf8Range] (PointerCoercion(Unsize)),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:172:45: 172:56 (#0),
                    scope: scope[1],
                },
                kind: _0 = core::slice::<impl [utf8::Utf8Range]>::reverse(move _4) -> [return: bb8, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:172:55: 172:56 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            _6 = &mut (((*_1) as Three).0: [utf8::Utf8Range; 3]),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &mut (*_6),
            _7 = move _8 as &mut [utf8::Utf8Range] (PointerCoercion(Unsize)),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:173:47: 173:58 (#0),
                    scope: scope[2],
                },
                kind: _0 = core::slice::<impl [utf8::Utf8Range]>::reverse(move _7) -> [return: bb10, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:173:57: 173:58 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:174:56: 174:57 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:176:6: 176:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/utf8.rs:169:5: 176:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:169:30: 169:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut utf8::Utf8Sequence,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:169:20: 169:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:171:13: 171:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-syntax/src/utf8.rs:170:15: 170:20 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/utf8.rs:172:13: 172:41 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [utf8::Utf8Range; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:172:31: 172:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/utf8.rs:170:9: 175:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [utf8::Utf8Range],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:172:45: 172:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/utf8.rs:170:9: 175:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [utf8::Utf8Range; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:172:45: 172:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-syntax/src/utf8.rs:170:15: 170:20 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/utf8.rs:173:13: 173:43 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [utf8::Utf8Range; 3_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:173:33: 173:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/utf8.rs:170:9: 175:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [utf8::Utf8Range],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:173:47: 173:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/utf8.rs:170:9: 175:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [utf8::Utf8Range; 3_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:173:47: 173:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-syntax/src/utf8.rs:170:15: 170:20 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/utf8.rs:174:13: 174:42 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [utf8::Utf8Range; 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:174:32: 174:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/utf8.rs:170:9: 175:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [utf8::Utf8Range],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:174:46: 174:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-syntax/src/utf8.rs:170:9: 175:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [utf8::Utf8Range; 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/utf8.rs:174:46: 174:47 (#0),
            scope: scope[0],
        },
    },
]