[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1208:13: 1208:28 (#0),
                    scope: scope[0],
                },
                kind: _3 = hir::ClassUnicode::is_ascii(move _4) -> [return: bb1, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1208:13: 1208:28 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            _2 = const (),
            StorageDead(_3),
            StorageDead(_2),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1211:30: 1211:43 (#0),
                    scope: scope[0],
                },
                kind: _10 = hir::ClassUnicode::ranges(move _11) -> [return: bb4, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            _0 = core::option::Option::<hir::ClassBytes>::None,
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1219:6: 1219:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _9 = &(*_10),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1211:30: 1211:50 (#0),
                    scope: scope[0],
                },
                kind: _8 = core::slice::<impl [hir::ClassUnicodeRange]>::iter(move _9) -> [return: bb5, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageLive(_12),
            _12 = {closure@regex-syntax/src/hir/mod.rs:1211:55: 1211:58},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1211:30: 1218:11 (#0),
                    scope: scope[0],
                },
                kind: _7 = <core::slice::Iter<'_, hir::ClassUnicodeRange> as core::iter::Iterator>::map::<hir::ClassBytesRange, {closure@regex-syntax/src/hir/mod.rs:1211:55: 1211:58}>(move _8, move _12) -> [return: bb6, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1211:14: 1218:12 (#0),
                    scope: scope[0],
                },
                kind: _6 = hir::ClassBytes::new::<core::iter::Map<core::slice::Iter<'_, hir::ClassUnicodeRange>, {closure@regex-syntax/src/hir/mod.rs:1211:55: 1211:58}>>(move _7) -> [return: bb7, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            _0 = core::option::Option::<hir::ClassBytes>::Some(move _6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1218:12: 1218:13 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb8, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1219:6: 1219:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1219:6: 1219:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:1207:5: 1219:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<hir::ClassBytes>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1207:36: 1207:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} hir::ClassUnicode,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1207:26: 1207:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1208:9: 1210:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1208:13: 1208:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::ClassUnicode,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1208:13: 1208:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1208:29: 1210:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: hir::ClassBytes,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1211:14: 1218:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/mod.rs:1211:9: 1218:13 (#0),
                },
            ),
        ),
        ty: core::iter::Map<core::slice::Iter<'{erased}, hir::ClassUnicodeRange>, Closure(DefId(0:991 ~ regex_syntax[a00b]::hir::{impl#12}::to_byte_class::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'{erased} hir::ClassUnicodeRange,)) -> hir::ClassBytesRange, bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1211:30: 1218:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/mod.rs:1211:9: 1218:13 (#0),
                },
            ),
        ),
        ty: core::slice::Iter<'{erased}, hir::ClassUnicodeRange>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1211:30: 1211:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/mod.rs:1211:9: 1218:13 (#0),
                },
            ),
        ),
        ty: &'{erased} [hir::ClassUnicodeRange],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1211:30: 1211:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/mod.rs:1211:9: 1218:13 (#0),
                },
            ),
        ),
        ty: &'{erased} [hir::ClassUnicodeRange],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1211:30: 1211:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/mod.rs:1211:9: 1218:13 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::ClassUnicode,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1211:30: 1211:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/mod.rs:1211:9: 1218:13 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:991 ~ regex_syntax[a00b]::hir::{impl#12}::to_byte_class::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'{erased} hir::ClassUnicodeRange,)) -> hir::ClassBytesRange, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:1211:55: 1218:10 (#0),
            scope: scope[0],
        },
    },
]