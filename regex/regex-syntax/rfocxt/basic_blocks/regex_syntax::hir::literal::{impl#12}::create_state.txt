[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &((*_1).0: std::vec::Vec<hir::literal::State>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2305:18: 2305:35 (#0),
                    scope: scope[0],
                },
                kind: _2 = std::vec::Vec::<hir::literal::State>::len(move _3) -> [return: bb1, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &mut ((*_1).0: std::vec::Vec<hir::literal::State>),
            StorageLive(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2306:26: 2306:42 (#0),
                    scope: scope[1],
                },
                kind: _6 = <hir::literal::State as core::default::Default>::default() -> [return: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2306:9: 2306:43 (#0),
                    scope: scope[1],
                },
                kind: _4 = std::vec::Vec::<hir::literal::State>::push(move _5, move _6) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &mut ((*_1).1: std::vec::Vec<core::option::Option<core::num::NonZero<usize>>>),
            StorageLive(_9),
            _9 = core::option::Option::<core::num::NonZero<usize>>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2307:9: 2307:32 (#0),
                    scope: scope[1],
                },
                kind: _7 = std::vec::Vec::<core::option::Option<core::num::NonZero<usize>>>::push(move _8, move _9) -> [return: bb4, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_7),
            _0 = _2,
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2309:6: 2309:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2306:42: 2306:43 (#0),
                    scope: scope[1],
                },
                kind: drop(_6) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:2304:5: 2309:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2304:35: 2304:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut hir::literal::PreferenceTrie,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2304:21: 2304:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/literal.rs:2305:18: 2305:35 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/literal.rs:2305:13: 2305:15 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2305:13: 2305:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<hir::literal::State, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2305:18: 2305:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2306:9: 2306:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<hir::literal::State, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2306:9: 2306:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::literal::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2306:26: 2306:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2307:9: 2307:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<core::option::Option<core::num::NonZero<usize>>, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2307:9: 2307:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::num::NonZero<usize>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:2307:27: 2307:31 (#0),
            scope: scope[0],
        },
    },
]