[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:453:51: 454:16 (#0),
                    scope: scope[0],
                },
                kind: _4 = core::slice::<impl [(char, char)]>::iter(move _5) -> [return: bb1, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_6),
            _6 = {closure@regex-syntax/src/unicode.rs:455:14: 455:23},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:453:51: 455:58 (#0),
                    scope: scope[0],
                },
                kind: _3 = <core::slice::Iter<'_, (char, char)> as core::iter::Iterator>::map::<hir::ClassUnicodeRange, {closure@regex-syntax/src/unicode.rs:455:14: 455:23}>(move _4, move _6) -> [return: bb2, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:453:51: 456:19 (#0),
                    scope: scope[0],
                },
                kind: _2 = <core::iter::Map<core::slice::Iter<'_, (char, char)>, {closure@regex-syntax/src/unicode.rs:455:14: 455:23}> as core::iter::Iterator>::collect::<std::vec::Vec<hir::ClassUnicodeRange>>(move _3) -> [return: bb3, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            AscribeUserType(_2, o, UserTypeProjection { base: UserType(1), projs: [] }),
            StorageLive(_7),
            _7 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:457:5: 457:39 (#0),
                    scope: scope[1],
                },
                kind: _0 = hir::ClassUnicode::new::<std::vec::Vec<hir::ClassUnicodeRange>>(move _7) -> [return: bb4, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:458:1: 458:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb5, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:458:2: 458:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:457:38: 457:39 (#0),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:458:1: 458:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:452:1: 458:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::ClassUnicode,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:452:46: 452:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/unicode.rs:452:26: 452:41 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/unicode.rs:452:18: 452:24 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:452:18: 452:24 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [(char, char)],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:452:18: 452:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/unicode.rs:453:51: 456:19 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:453:9: 453:19 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<hir::ClassUnicodeRange, std::alloc::Global>,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(0),
                            projs: [],
                        },
                        regex-syntax/src/unicode.rs:453:21: 453:48 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:453:9: 453:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Map<core::slice::Iter<'{erased}, (char, char)>, Closure(DefId(0:1199 ~ regex_syntax[a00b]::unicode::hir_class::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'{erased} (char, char),)) -> hir::ClassUnicodeRange, bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:453:51: 455:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::Iter<'{erased}, (char, char)>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:453:51: 454:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(char, char)],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:453:51: 453:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:1199 ~ regex_syntax[a00b]::unicode::hir_class::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'{erased} (char, char),)) -> hir::ClassUnicodeRange, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:455:14: 455:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:457:5: 457:39 (#0),
                },
            ),
        ),
        ty: std::vec::Vec<hir::ClassUnicodeRange, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:457:28: 457:38 (#0),
            scope: scope[0],
        },
    },
]