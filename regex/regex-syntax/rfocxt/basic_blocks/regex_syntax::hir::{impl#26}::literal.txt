[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*((*_1).0: std::boxed::Box<[u8]>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:2435:31: 2435:42 (#0),
                    scope: scope[0],
                },
                kind: _4 = core::slice::<impl [u8]>::len(move _5) -> [return: bb1, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            _3 = core::option::Option::<usize>::Some(move _4),
            StorageDead(_4),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &(*((*_1).0: std::boxed::Box<[u8]>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:2436:31: 2436:42 (#0),
                    scope: scope[0],
                },
                kind: _7 = core::slice::<impl [u8]>::len(move _8) -> [return: bb2, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            _6 = core::option::Option::<usize>::Some(move _7),
            StorageDead(_7),
            StorageLive(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:2437:23: 2437:39 (#0),
                    scope: scope[0],
                },
                kind: _9 = hir::LookSet::empty() -> [return: bb3, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:2438:30: 2438:46 (#0),
                    scope: scope[0],
                },
                kind: _10 = hir::LookSet::empty() -> [return: bb4, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:2439:30: 2439:46 (#0),
                    scope: scope[0],
                },
                kind: _11 = hir::LookSet::empty() -> [return: bb5, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:2440:34: 2440:50 (#0),
                    scope: scope[0],
                },
                kind: _12 = hir::LookSet::empty() -> [return: bb6, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:2441:34: 2441:50 (#0),
                    scope: scope[0],
                },
                kind: _13 = hir::LookSet::empty() -> [return: bb7, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &((*_1).0: std::boxed::Box<[u8]>),
            _17 = &(*(*_18)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:2442:19: 2442:47 (#0),
                    scope: scope[0],
                },
                kind: _16 = core::str::from_utf8(move _17) -> [return: bb8, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _15 = &_16,
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:2442:19: 2442:55 (#0),
                    scope: scope[0],
                },
                kind: _14 = core::result::Result::<&str, core::str::Utf8Error>::is_ok(move _15) -> [return: bb9, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageLive(_19),
            _19 = core::option::Option::<usize>::Some(const 0_usize),
            _2 = hir::PropertiesI { minimum_len: move _3, maximum_len: move _6, look_set: move _9, look_set_prefix: move _10, look_set_suffix: move _11, look_set_prefix_any: move _12, look_set_suffix_any: move _13, utf8: move _14, explicit_captures_len: const 0_usize, static_explicit_captures_len: move _19, literal: const true, alternation_literal: const true },
            StorageDead(_19),
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_6),
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageDead(_18),
            StorageDead(_16),
            StorageLive(_20),
            StorageLive(_21),
            _21 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:2448:20: 2448:35 (#0),
                    scope: scope[1],
                },
                kind: _20 = std::boxed::Box::<hir::PropertiesI>::new(move _21) -> [return: bb10, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            _0 = hir::Properties(move _20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:2448:35: 2448:36 (#0),
                    scope: scope[1],
                },
                kind: drop(_20) -> [return: bb11, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:2449:6: 2449:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:2433:5: 2449:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::Properties,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:2433:34: 2433:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/hir/mod.rs:2433:21: 2433:29 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/mod.rs:2433:16: 2433:19 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:2433:16: 2433:19 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} hir::Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:2433:16: 2433:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/mod.rs:2434:21: 2447:10 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:2434:13: 2434:18 (#0),
                    },
                ),
            ),
        ),
        ty: hir::PropertiesI,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:2434:13: 2434:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:2435:26: 2435:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:2435:31: 2435:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:2435:31: 2435:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:2436:26: 2436:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:2436:31: 2436:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:2436:31: 2436:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: hir::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:2437:23: 2437:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: hir::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:2438:30: 2438:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: hir::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:2439:30: 2439:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: hir::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:2440:34: 2440:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: hir::LookSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:2441:34: 2441:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:2442:19: 2442:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::result::Result<&'{erased} str, core::str::Utf8Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:2442:19: 2442:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<&'{erased} str, core::str::Utf8Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:2442:19: 2442:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:2442:40: 2442:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::boxed::Box<[u8], std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:2442:40: 2442:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:2444:43: 2444:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::boxed::Box<hir::PropertiesI, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:2448:20: 2448:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/mod.rs:2448:9: 2448:36 (#0),
                },
            ),
        ),
        ty: hir::PropertiesI,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:2448:29: 2448:34 (#0),
            scope: scope[0],
        },
    },
]