[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &_1,
            _3 = &(*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:408:21: 408:50 (#0),
                    scope: scope[0],
                },
                kind: _2 = hir::Properties::capture(move _3) -> [return: bb1, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageDead(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = move _1,
            _5 = hir::HirKind::Capture(move _6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:409:45: 409:46 (#0),
                    scope: scope[1],
                },
                kind: drop(_6) -> [return: bb2, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageLive(_7),
            _7 = move _2,
            _0 = hir::Hir { kind: move _5, props: move _7 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:409:54: 409:55 (#0),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb3, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:409:54: 409:55 (#0),
                    scope: scope[1],
                },
                kind: drop(_5) -> [return: bb4, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:410:5: 410:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb5, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:410:5: 410:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb6, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:410:6: 410:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:409:54: 409:55 (#0),
                    scope: scope[1],
                },
                kind: drop(_5) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:410:5: 410:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb9, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:410:5: 410:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/mod.rs:407:5: 410:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:407:41: 407:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/hir/mod.rs:407:29: 407:36 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/mod.rs:407:20: 407:27 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:407:20: 407:27 (#0),
                    },
                ),
            ),
        ),
        ty: hir::Capture,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:407:20: 407:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/mod.rs:408:21: 408:50 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/mod.rs:408:13: 408:18 (#0),
                    },
                ),
            ),
        ),
        ty: hir::Properties,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:408:13: 408:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::Capture,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:408:41: 408:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::Capture,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:408:41: 408:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: hir::HirKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:409:21: 409:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: hir::Capture,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:409:38: 409:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: hir::Properties,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/mod.rs:409:48: 409:53 (#0),
            scope: scope[0],
        },
    },
]