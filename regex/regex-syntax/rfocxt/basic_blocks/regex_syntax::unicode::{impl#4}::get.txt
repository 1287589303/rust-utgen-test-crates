[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = &(*((*_1).0: &[(char, &[char])])),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &_2,
            _4 = &(*_5),
            StorageLive(_6),
            _6 = {closure@regex-syntax/src/unicode.rs:199:45: 199:55},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:199:9: 199:59 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::slice::<impl [(char, &[char])]>::binary_search_by_key::<'_, char, {closure@regex-syntax/src/unicode.rs:199:45: 199:55}>(move _3, move _4, move _6) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_4),
            StorageDead(_3),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:200:6: 200:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/unicode.rs:198:5: 200:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<usize, usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:198:31: 198:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} unicode::SimpleCaseFolder,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:198:12: 198:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/unicode.rs:198:22: 198:26 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/unicode.rs:198:19: 198:20 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/unicode.rs:198:19: 198:20 (#0),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:198:19: 198:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:199:9: 199:59 (#0),
                },
            ),
        ),
        ty: &'{erased} [(char, &'{erased} [char])],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:199:9: 199:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:199:9: 199:59 (#0),
                },
            ),
        ),
        ty: &'{erased} char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:199:41: 199:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:199:9: 199:59 (#0),
                },
            ),
        ),
        ty: &'{erased} char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:199:41: 199:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/unicode.rs:199:9: 199:59 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1182 ~ regex_syntax[a00b]::unicode::{impl#4}::get::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'{erased} (char, &'{erased} [char]),)) -> char, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/unicode.rs:199:45: 199:58 (#0),
            scope: scope[0],
        },
    },
]