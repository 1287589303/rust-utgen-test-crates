[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &((*_1).0: core::cell::Cell<ast::Position>),
            StorageLive(_4),
            _4 = ast::Position { offset: const 0_usize, line: const 1_usize, column: const 1_usize },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:383:9: 383:65 (#0),
                    scope: scope[0],
                },
                kind: _2 = core::cell::Cell::<ast::Position>::set(move _3, move _4) -> [return: bb1, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
            StorageDead(_2),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &((*_1).6: core::cell::Cell<bool>),
            StorageLive(_7),
            _7 = ((*_1).4: bool),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:384:9: 384:67 (#0),
                    scope: scope[0],
                },
                kind: _5 = core::cell::Cell::<bool>::set(move _6, move _7) -> [return: bb2, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &((*_1).7: core::cell::RefCell<std::vec::Vec<ast::Comment>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:385:9: 385:35 (#0),
                    scope: scope[0],
                },
                kind: _12 = core::cell::RefCell::<std::vec::Vec<ast::Comment>>::borrow_mut(move _13) -> [return: bb3, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _11 = &mut _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:385:9: 385:43 (#0),
                    scope: scope[0],
                },
                kind: _10 = <core::cell::RefMut<'_, std::vec::Vec<ast::Comment>> as core::ops::DerefMut>::deref_mut(move _11) -> [return: bb4, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _9 = &mut (*_10),
            StorageDead(_13),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:385:9: 385:43 (#0),
                    scope: scope[0],
                },
                kind: _8 = std::vec::Vec::<ast::Comment>::clear(move _9) -> [return: bb5, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:385:43: 385:44 (#0),
                    scope: scope[0],
                },
                kind: drop(_12) -> [return: bb6, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_8),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &((*_1).8: core::cell::RefCell<std::vec::Vec<ast::parse::GroupState>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:386:9: 386:38 (#0),
                    scope: scope[0],
                },
                kind: _18 = core::cell::RefCell::<std::vec::Vec<ast::parse::GroupState>>::borrow_mut(move _19) -> [return: bb7, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _17 = &mut _18,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:386:9: 386:46 (#0),
                    scope: scope[0],
                },
                kind: _16 = <core::cell::RefMut<'_, std::vec::Vec<ast::parse::GroupState>> as core::ops::DerefMut>::deref_mut(move _17) -> [return: bb8, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _15 = &mut (*_16),
            StorageDead(_19),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:386:9: 386:46 (#0),
                    scope: scope[0],
                },
                kind: _14 = std::vec::Vec::<ast::parse::GroupState>::clear(move _15) -> [return: bb9, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:386:46: 386:47 (#0),
                    scope: scope[0],
                },
                kind: drop(_18) -> [return: bb10, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_16),
            StorageDead(_14),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            _25 = &((*_1).9: core::cell::RefCell<std::vec::Vec<ast::parse::ClassState>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:387:9: 387:38 (#0),
                    scope: scope[0],
                },
                kind: _24 = core::cell::RefCell::<std::vec::Vec<ast::parse::ClassState>>::borrow_mut(move _25) -> [return: bb11, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _23 = &mut _24,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:387:9: 387:46 (#0),
                    scope: scope[0],
                },
                kind: _22 = <core::cell::RefMut<'_, std::vec::Vec<ast::parse::ClassState>> as core::ops::DerefMut>::deref_mut(move _23) -> [return: bb12, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _21 = &mut (*_22),
            StorageDead(_25),
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:387:9: 387:46 (#0),
                    scope: scope[0],
                },
                kind: _20 = std::vec::Vec::<ast::parse::ClassState>::clear(move _21) -> [return: bb13, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:387:46: 387:47 (#0),
                    scope: scope[0],
                },
                kind: drop(_24) -> [return: bb14, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageDead(_22),
            StorageDead(_20),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:388:6: 388:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:387:46: 387:47 (#0),
                    scope: scope[0],
                },
                kind: drop(_24) -> [return: bb18, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:386:46: 386:47 (#0),
                    scope: scope[0],
                },
                kind: drop(_18) -> [return: bb18, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:385:43: 385:44 (#0),
                    scope: scope[0],
                },
                kind: drop(_12) -> [return: bb18, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/parse.rs:380:5: 388:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:380:20: 380:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} ast::parse::Parser,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:380:14: 380:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:383:9: 383:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::cell::Cell<ast::Position>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:383:9: 383:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ast::Position,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:383:22: 383:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:384:9: 384:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::cell::Cell<bool>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:384:9: 384:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:384:36: 384:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:385:9: 385:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<ast::Comment, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:385:9: 385:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<ast::Comment, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:385:9: 385:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::cell::RefMut<'{erased}, std::vec::Vec<ast::Comment, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:385:9: 385:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::cell::RefMut<'{erased}, std::vec::Vec<ast::Comment, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:385:9: 385:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::cell::RefCell<std::vec::Vec<ast::Comment, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:385:9: 385:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:386:9: 386:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<ast::parse::GroupState, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:386:9: 386:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<ast::parse::GroupState, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:386:9: 386:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::cell::RefMut<'{erased}, std::vec::Vec<ast::parse::GroupState, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:386:9: 386:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::cell::RefMut<'{erased}, std::vec::Vec<ast::parse::GroupState, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:386:9: 386:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::cell::RefCell<std::vec::Vec<ast::parse::GroupState, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:386:9: 386:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:387:9: 387:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<ast::parse::ClassState, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:387:9: 387:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<ast::parse::ClassState, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:387:9: 387:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::cell::RefMut<'{erased}, std::vec::Vec<ast::parse::ClassState, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:387:9: 387:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::cell::RefMut<'{erased}, std::vec::Vec<ast::parse::ClassState, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:387:9: 387:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::cell::RefCell<std::vec::Vec<ast::parse::ClassState, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/parse.rs:387:9: 387:25 (#0),
            scope: scope[0],
        },
    },
]