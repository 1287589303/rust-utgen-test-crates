[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:162:16: 162:26 (#0),
                    scope: scope[0],
                },
                kind: _3 = hir::Hir::kind(move _4) -> [return: bb1, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            PlaceMention((*_3)),
            _7 = discriminant((*_3)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:162:9: 162:26 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _7) -> [4: bb3, 5: bb4, 6: bb5, 7: bb7, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::option::Option::<hir::visitor::Frame<'_>>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:173:18: 173:22 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:163:13: 163:39 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb9, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:164:13: 164:36 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:165:13: 165:35 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb11, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:166:13: 166:35 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb15, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:169:13: 169:40 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb18, imaginary: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:170:13: 170:40 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb22, imaginary: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            _8 = &(((*_3) as Repetition).0: hir::Repetition),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &(*_8),
            _9 = hir::visitor::Frame::<'_>::Repetition(move _10),
            StorageDead(_10),
            _0 = core::option::Option::<hir::visitor::Frame<'_>>::Some(move _9),
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:163:68: 163:69 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            _11 = &(((*_3) as Capture).0: hir::Capture),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &(*_11),
            _12 = hir::visitor::Frame::<'_>::Capture(move _13),
            StorageDead(_13),
            _0 = core::option::Option::<hir::visitor::Frame<'_>>::Some(move _12),
            StorageDead(_12),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:164:62: 164:63 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_15),
            StorageLive(_14),
            _14 = &(((*_3) as Concat).0: std::vec::Vec<hir::Hir>),
            _15 = &_14,
            _5 = &fake shallow _3,
            _6 = &fake shallow (*_3),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &(*(*_15)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:165:39: 165:51 (#0),
                    scope: scope[0],
                },
                kind: _16 = std::vec::Vec::<hir::Hir>::is_empty(move _17) -> [return: bb12, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:165:39: 165:51 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _16) -> [0: bb14, otherwise: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
            FakeRead(ForMatchGuard, _5),
            FakeRead(ForMatchGuard, _6),
            _0 = core::option::Option::<hir::visitor::Frame<'_>>::None,
            StorageDead(_14),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:165:58: 165:59 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_14),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:165:39: 165:51 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_18),
            _18 = &(((*_3) as Concat).0: std::vec::Vec<hir::Hir>),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            _23 = &(*_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:167:46: 167:49 (#0),
                    scope: scope[4],
                },
                kind: _22 = <std::vec::Vec<hir::Hir> as core::ops::Index<usize>>::index(move _23, const 0_usize) -> [return: bb16, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            _21 = &(*_22),
            _20 = &(*_21),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            _27 = &(*_18),
            StorageLive(_28),
            _28 = core::ops::RangeFrom::<usize> { start: const 1_usize },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:167:59: 167:64 (#0),
                    scope: scope[4],
                },
                kind: _26 = <std::vec::Vec<hir::Hir> as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _27, move _28) -> [return: bb17, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_27),
            _25 = &(*_26),
            _24 = &(*_25),
            _19 = hir::visitor::Frame::<'_>::Concat { head: move _20, tail: move _24 },
            StorageDead(_24),
            StorageDead(_20),
            _0 = core::option::Option::<hir::visitor::Frame<'_>>::Some(move _19),
            StorageDead(_19),
            StorageDead(_26),
            StorageDead(_25),
            StorageDead(_22),
            StorageDead(_21),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:168:13: 168:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_30),
            StorageLive(_29),
            _29 = &(((*_3) as Alternation).0: std::vec::Vec<hir::Hir>),
            _30 = &_29,
            _5 = &fake shallow _3,
            _6 = &fake shallow (*_3),
            StorageLive(_31),
            StorageLive(_32),
            _32 = &(*(*_30)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:169:44: 169:56 (#0),
                    scope: scope[0],
                },
                kind: _31 = std::vec::Vec::<hir::Hir>::is_empty(move _32) -> [return: bb19, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:169:44: 169:56 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _31) -> [0: bb21, otherwise: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            StorageDead(_31),
            FakeRead(ForMatchGuard, _5),
            FakeRead(ForMatchGuard, _6),
            _0 = core::option::Option::<hir::visitor::Frame<'_>>::None,
            StorageDead(_29),
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:169:63: 169:64 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            StorageDead(_31),
            StorageDead(_29),
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:169:44: 169:56 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_33),
            _33 = &(((*_3) as Alternation).0: std::vec::Vec<hir::Hir>),
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            _38 = &(*_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:171:51: 171:54 (#0),
                    scope: scope[6],
                },
                kind: _37 = <std::vec::Vec<hir::Hir> as core::ops::Index<usize>>::index(move _38, const 0_usize) -> [return: bb23, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            _36 = &(*_37),
            _35 = &(*_36),
            StorageLive(_39),
            StorageLive(_40),
            StorageLive(_41),
            StorageLive(_42),
            _42 = &(*_33),
            StorageLive(_43),
            _43 = core::ops::RangeFrom::<usize> { start: const 1_usize },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:171:64: 171:69 (#0),
                    scope: scope[6],
                },
                kind: _41 = <std::vec::Vec<hir::Hir> as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _42, move _43) -> [return: bb24, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            StorageDead(_42),
            _40 = &(*_41),
            _39 = &(*_40),
            _34 = hir::visitor::Frame::<'_>::Alternation { head: move _35, tail: move _39 },
            StorageDead(_39),
            StorageDead(_35),
            _0 = core::option::Option::<hir::visitor::Frame<'_>>::Some(move _34),
            StorageDead(_34),
            StorageDead(_41),
            StorageDead(_40),
            StorageDead(_37),
            StorageDead(_36),
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:172:13: 172:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:175:6: 175:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/visitor.rs:161:5: 175:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<hir::visitor::Frame<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:161:43: 161:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut hir::visitor::HeapVisitor<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:161:15: 161:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/hir/visitor.rs:161:31: 161:38 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/visitor.rs:161:26: 161:29 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/visitor.rs:161:26: 161:29 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:161:26: 161:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/visitor.rs:162:9: 174:10 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::HirKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:162:16: 162:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/visitor.rs:162:9: 174:10 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:162:16: 162:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} &'{erased} hir::HirKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:162:15: 162:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} hir::HirKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:162:15: 162:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:163:13: 163:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_3),
                                ),
                                regex-syntax/src/hir/visitor.rs:162:15: 162:26 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/visitor.rs:163:13: 163:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} hir::Repetition,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:163:33: 163:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: hir::visitor::Frame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:163:48: 163:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} hir::Repetition,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:163:66: 163:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_3),
                                ),
                                regex-syntax/src/hir/visitor.rs:162:15: 162:26 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/visitor.rs:164:13: 164:36 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} hir::Capture,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:164:30: 164:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: hir::visitor::Frame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:164:45: 164:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} hir::Capture,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:164:60: 164:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_3),
                                ),
                                regex-syntax/src/hir/visitor.rs:162:15: 162:26 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/visitor.rs:165:13: 165:35 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:165:29: 165:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                RefForGuard,
            ),
        ),
        ty: &'{erased} &'{erased} std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:165:29: 165:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/visitor.rs:162:9: 174:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:165:39: 165:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/visitor.rs:162:9: 174:10 (#0),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:165:39: 165:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_3),
                                ),
                                regex-syntax/src/hir/visitor.rs:162:15: 162:26 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/visitor.rs:166:13: 166:35 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:166:29: 166:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: hir::visitor::Frame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:167:22: 167:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:167:44: 167:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/visitor.rs:167:17: 167:67 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:167:44: 167:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/visitor.rs:167:17: 167:67 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:167:46: 167:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/visitor.rs:167:17: 167:67 (#0),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:167:45: 167:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} [hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:167:57: 167:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/visitor.rs:167:17: 167:67 (#0),
                },
            ),
        ),
        ty: &'{erased} [hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:167:57: 167:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/visitor.rs:167:17: 167:67 (#0),
                },
            ),
        ),
        ty: &'{erased} [hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:167:59: 167:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/visitor.rs:167:17: 167:67 (#0),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:167:58: 167:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/visitor.rs:167:17: 167:67 (#0),
                },
            ),
        ),
        ty: core::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:167:60: 167:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_3),
                                ),
                                regex-syntax/src/hir/visitor.rs:162:15: 162:26 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/visitor.rs:169:13: 169:40 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:169:34: 169:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                RefForGuard,
            ),
        ),
        ty: &'{erased} &'{erased} std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:169:34: 169:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/visitor.rs:162:9: 174:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:169:44: 169:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/visitor.rs:162:9: 174:10 (#0),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:169:44: 169:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_3),
                                ),
                                regex-syntax/src/hir/visitor.rs:162:15: 162:26 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/visitor.rs:170:13: 170:40 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:170:34: 170:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: hir::visitor::Frame<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:171:22: 171:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:171:49: 171:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/visitor.rs:171:17: 171:72 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:171:49: 171:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/visitor.rs:171:17: 171:72 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:171:51: 171:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/visitor.rs:171:17: 171:72 (#0),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:171:50: 171:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} [hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:171:62: 171:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/visitor.rs:171:17: 171:72 (#0),
                },
            ),
        ),
        ty: &'{erased} [hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:171:62: 171:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/visitor.rs:171:17: 171:72 (#0),
                },
            ),
        ),
        ty: &'{erased} [hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:171:64: 171:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/visitor.rs:171:17: 171:72 (#0),
                },
            ),
        ),
        ty: &'{erased} std::vec::Vec<hir::Hir, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:171:63: 171:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/visitor.rs:171:17: 171:72 (#0),
                },
            ),
        ),
        ty: core::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/visitor.rs:171:65: 171:68 (#0),
            scope: scope[0],
        },
    },
]