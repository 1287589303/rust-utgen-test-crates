[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &((*_1).0: core::option::Option<std::vec::Vec<hir::literal::Literal>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1547:9: 1547:31 (#0),
                    scope: scope[0],
                },
                kind: _2 = core::option::Option::<std::vec::Vec<hir::literal::Literal>>::as_ref(move _3) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageLive(_4),
            _4 = {closure@regex-syntax/src/hir/literal.rs:1547:36: 1547:42},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1547:9: 1547:54 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::option::Option::<&std::vec::Vec<hir::literal::Literal>>::map::<usize, {closure@regex-syntax/src/hir/literal.rs:1547:36: 1547:42}>(move _2, move _4) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1548:6: 1548:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/literal.rs:1546:5: 1548:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1546:26: 1546:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} hir::literal::Seq,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1546:16: 1546:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/literal.rs:1547:9: 1547:54 (#0),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} std::vec::Vec<hir::literal::Literal, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1547:9: 1547:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/literal.rs:1547:9: 1547:54 (#0),
                },
            ),
        ),
        ty: &'{erased} core::option::Option<std::vec::Vec<hir::literal::Literal, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1547:9: 1547:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/hir/literal.rs:1547:9: 1547:54 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:649 ~ regex_syntax[a00b]::hir::literal::{impl#4}::len::{closure#0}),
            [
                i32,
                Binder { value: extern "RustCall" fn((&'{erased} std::vec::Vec<hir::literal::Literal, std::alloc::Global>,)) -> usize, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/literal.rs:1547:36: 1547:53 (#0),
            scope: scope[0],
        },
    },
]