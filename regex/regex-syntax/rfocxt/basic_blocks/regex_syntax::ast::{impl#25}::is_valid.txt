[
    BasicBlockData {
        statements: [
            PlaceMention((*_1)),
            _4 = discriminant((*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1402:9: 1402:20 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [2: bb2, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1404:18: 1404:22 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1403:13: 1403:43 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb3, imaginary: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            _6 = &(((*_1) as Bounded).0: u32),
            StorageLive(_8),
            _8 = &(((*_1) as Bounded).1: u32),
            _2 = &fake shallow _1,
            _3 = &fake shallow (*_1),
            StorageLive(_9),
            StorageLive(_10),
            _10 = (*_6),
            StorageLive(_11),
            _11 = (*_8),
            _9 = Gt(move _10, move _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1403:47: 1403:52 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _9) -> [0: bb5, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_9),
            FakeRead(ForMatchGuard, _2),
            FakeRead(ForMatchGuard, _3),
            FakeRead(ForGuardBinding, _6),
            FakeRead(ForGuardBinding, _8),
            StorageLive(_5),
            _5 = (((*_1) as Bounded).0: u32),
            StorageLive(_7),
            _7 = (((*_1) as Bounded).1: u32),
            _0 = const false,
            StorageDead(_7),
            StorageDead(_5),
            StorageDead(_8),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1403:60: 1403:61 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1403:47: 1403:52 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb1, imaginary: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1406:6: 1406:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1401:31: 1401:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} ast::RepetitionRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1401:21: 1401:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} &'{erased} ast::RepetitionRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1402:15: 1402:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} ast::RepetitionRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1402:15: 1402:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1403:13: 1403:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-syntax/src/ast/mod.rs:1402:15: 1402:20 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/mod.rs:1403:13: 1403:43 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1403:38: 1403:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                RefForGuard,
            ),
        ),
        ty: &'{erased} u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1403:38: 1403:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-syntax/src/ast/mod.rs:1402:15: 1402:20 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/mod.rs:1403:13: 1403:43 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1403:41: 1403:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                RefForGuard,
            ),
        ),
        ty: &'{erased} u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1403:41: 1403:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/mod.rs:1402:9: 1405:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1403:47: 1403:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/mod.rs:1402:9: 1405:10 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1403:47: 1403:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/mod.rs:1402:9: 1405:10 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1403:51: 1403:52 (#0),
            scope: scope[0],
        },
    },
]