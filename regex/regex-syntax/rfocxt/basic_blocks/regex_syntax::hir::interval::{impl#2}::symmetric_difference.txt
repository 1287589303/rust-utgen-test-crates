[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:286:32: 286:44 (#0),
                    scope: scope[0],
                },
                kind: _3 = <hir::interval::IntervalSet<I> as core::clone::Clone>::clone(move _4) -> [return: bb1, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut _3,
            StorageLive(_7),
            _7 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:287:9: 287:38 (#0),
                    scope: scope[1],
                },
                kind: _5 = hir::interval::IntervalSet::<I>::intersect(move _6, move _7) -> [return: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &mut (*_1),
            StorageLive(_10),
            _10 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:288:9: 288:26 (#0),
                    scope: scope[1],
                },
                kind: _8 = hir::interval::IntervalSet::<I>::union(move _9, move _10) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_8),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &mut (*_1),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &_3,
            _13 = &(*_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:289:9: 289:39 (#0),
                    scope: scope[1],
                },
                kind: _11 = hir::interval::IntervalSet::<I>::difference(move _12, move _13) -> [return: bb4, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_14),
            StorageDead(_11),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:290:5: 290:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb5, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:290:6: 290:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:290:5: 290:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/hir/interval.rs:284:5: 290:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:284:67: 284:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut hir::interval::IntervalSet<I/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:284:33: 284:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-syntax/src/hir/interval.rs:284:51: 284:66 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/interval.rs:284:44: 284:49 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/interval.rs:284:44: 284:49 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} hir::interval::IntervalSet<I/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:284:44: 284:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-syntax/src/hir/interval.rs:286:32: 286:44 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/hir/interval.rs:286:13: 286:29 (#0),
                    },
                ),
            ),
        ),
        ty: hir::interval::IntervalSet<I/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:286:13: 286:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::interval::IntervalSet<I/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:286:32: 286:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:287:9: 287:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hir::interval::IntervalSet<I/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:287:9: 287:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::interval::IntervalSet<I/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:287:32: 287:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:288:9: 288:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hir::interval::IntervalSet<I/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:288:9: 288:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::interval::IntervalSet<I/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:288:20: 288:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:289:9: 289:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hir::interval::IntervalSet<I/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:289:9: 289:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::interval::IntervalSet<I/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:289:25: 289:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::interval::IntervalSet<I/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/hir/interval.rs:289:25: 289:38 (#0),
            scope: scope[0],
        },
    },
]