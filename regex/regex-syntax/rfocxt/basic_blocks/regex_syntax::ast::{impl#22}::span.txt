[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            PlaceMention((*_1)),
            _3 = discriminant((*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1193:9: 1193:20 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb7, 5: bb6, 6: bb8, 7: bb9, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), (*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1193:15: 1193:20 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1194:13: 1194:42 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1195:13: 1195:41 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb11, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1196:13: 1196:39 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb12, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1197:13: 1197:39 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb13, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1198:13: 1198:38 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb14, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1199:13: 1199:41 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb15, imaginary: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1200:13: 1200:43 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb16, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_17),
            _17 = &(((*_1) as Union).0: ast::ClassSetUnion),
            StorageLive(_18),
            _18 = &((*_17).0: ast::Span),
            _2 = &(*_18),
            StorageDead(_18),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1201:49: 1201:50 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = &(((*_1) as Empty).0: ast::Span),
            _2 = &(*_4),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1194:49: 1194:50 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_5),
            _5 = &(((*_1) as Literal).0: ast::Literal),
            StorageLive(_6),
            _6 = &((*_5).0: ast::Span),
            _2 = &(*_6),
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1195:51: 1195:52 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            _7 = &(((*_1) as Range).0: ast::ClassSetRange),
            StorageLive(_8),
            _8 = &((*_7).0: ast::Span),
            _2 = &(*_8),
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1196:49: 1196:50 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            _9 = &(((*_1) as Ascii).0: ast::ClassAscii),
            StorageLive(_10),
            _10 = &((*_9).0: ast::Span),
            _2 = &(*_10),
            StorageDead(_10),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1197:49: 1197:50 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            _11 = &(((*_1) as Perl).0: ast::ClassPerl),
            StorageLive(_12),
            _12 = &((*_11).0: ast::Span),
            _2 = &(*_12),
            StorageDead(_12),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1198:48: 1198:49 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            _13 = &(((*_1) as Unicode).0: ast::ClassUnicode),
            StorageLive(_14),
            _14 = &((*_13).0: ast::Span),
            _2 = &(*_14),
            StorageDead(_14),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1199:51: 1199:52 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_15),
            _15 = &(((*_1) as Bracketed).0: std::boxed::Box<ast::ClassBracketed>),
            StorageLive(_16),
            _16 = &((*(*_15)).0: ast::Span),
            _2 = &(*_16),
            StorageDead(_16),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1200:53: 1200:54 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = &(*_2),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-syntax/src/ast/mod.rs:1203:6: 1203:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} ast::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1192:27: 1192:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} ast::ClassSetItem,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1192:17: 1192:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/mod.rs:1193:9: 1202:10 (#0),
                },
            ),
        ),
        ty: &'{erased} ast::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1193:9: 1202:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1194:13: 1194:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-syntax/src/ast/mod.rs:1193:15: 1193:20 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/mod.rs:1194:13: 1194:42 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} ast::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1194:33: 1194:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-syntax/src/ast/mod.rs:1193:15: 1193:20 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/mod.rs:1195:13: 1195:41 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} ast::Literal,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1195:35: 1195:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/mod.rs:1193:9: 1202:10 (#0),
                },
            ),
        ),
        ty: &'{erased} ast::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1195:45: 1195:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-syntax/src/ast/mod.rs:1193:15: 1193:20 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/mod.rs:1196:13: 1196:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} ast::ClassSetRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1196:33: 1196:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/mod.rs:1193:9: 1202:10 (#0),
                },
            ),
        ),
        ty: &'{erased} ast::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1196:43: 1196:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-syntax/src/ast/mod.rs:1193:15: 1193:20 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/mod.rs:1197:13: 1197:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} ast::ClassAscii,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1197:33: 1197:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/mod.rs:1193:9: 1202:10 (#0),
                },
            ),
        ),
        ty: &'{erased} ast::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1197:43: 1197:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-syntax/src/ast/mod.rs:1193:15: 1193:20 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/mod.rs:1198:13: 1198:38 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} ast::ClassPerl,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1198:32: 1198:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/mod.rs:1193:9: 1202:10 (#0),
                },
            ),
        ),
        ty: &'{erased} ast::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1198:42: 1198:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-syntax/src/ast/mod.rs:1193:15: 1193:20 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/mod.rs:1199:13: 1199:41 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} ast::ClassUnicode,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1199:35: 1199:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/mod.rs:1193:9: 1202:10 (#0),
                },
            ),
        ),
        ty: &'{erased} ast::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1199:45: 1199:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-syntax/src/ast/mod.rs:1193:15: 1193:20 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/mod.rs:1200:13: 1200:43 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::boxed::Box<ast::ClassBracketed, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1200:37: 1200:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/mod.rs:1193:9: 1202:10 (#0),
                },
            ),
        ),
        ty: &'{erased} ast::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1200:47: 1200:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-syntax/src/ast/mod.rs:1193:15: 1193:20 (#0),
                            ),
                        ),
                        pat_span: regex-syntax/src/ast/mod.rs:1201:13: 1201:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} ast::ClassSetUnion,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1201:33: 1201:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-syntax/src/ast/mod.rs:1193:9: 1202:10 (#0),
                },
            ),
        ),
        ty: &'{erased} ast::Span,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-syntax/src/ast/mod.rs:1201:43: 1201:50 (#0),
            scope: scope[0],
        },
    },
]