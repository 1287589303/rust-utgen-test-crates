{"mod_name":"hir","calls":["<&[char] as core::iter::IntoIterator>::into_iter","<core::result::Result<unicode::SimpleCaseFolder, unicode::CaseFoldError> as core::ops::Try>::branch","<core::result::Result<","<core::ops::RangeInclusive<u32> as core::iter::Iterator>::filter_map::<char, fn","<core::slice::Iter<'_, char> as core::iter::Iterator>::next","unicode::SimpleCaseFolder::overlaps","<u32 as core::convert::From<char>>::from","core::ops::RangeInclusive::<u32>::new","std::vec::Vec::<hir::ClassUnicodeRange>::push","<core::iter::FilterMap<core::ops::RangeInclusive<u32>, fn","hir::ClassUnicodeRange::new","unicode::SimpleCaseFolder::mapping","unicode::SimpleCaseFolder::new"],"types":["core::ops::RangeInclusive<u32>","core::iter::FilterMap<core::ops::RangeInclusive<u32>, fn(u32) -> core::option::Option<char> {core::char::from_u32}>","core::result::Result<(), unicode::CaseFoldError>","std::vec::Vec<hir::ClassUnicodeRange>","hir::ClassUnicodeRange","core::result::Result<core::convert::Infallible, unicode::CaseFoldError>","unicode::CaseFoldError","core::ops::ControlFlow<core::result::Result<core::convert::Infallible, unicode::CaseFoldError>, unicode::SimpleCaseFolder>","isize","u32","char","!","()","fn(u32) -> core::option::Option<char> {core::char::from_u32}","(u32, u32)","std::alloc::Global","unicode::SimpleCaseFolder","core::option::Option<&char>","core::convert::Infallible","bool","[char]","core::option::Option<char>","core::result::Result<unicode::SimpleCaseFolder, unicode::CaseFoldError>","core::slice::Iter<'_, char>"]}