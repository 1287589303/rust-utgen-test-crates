{"mod_name":"ast::parse","calls":["ast::parse::ParserI::<'_, P>::parser","ast::parse::ParserI::<'_, P>::bump_and_bump_space","core::str::<impl str>::is_empty","std::string::String::push","core::num::<impl u32>::from_str_radix","<core::cell::RefMut<'_, std::string::String> as core::ops::DerefMut>::deref_mut","ast::Span::new","ast::parse::is_hex","ast::parse::ParserI::<'_, P>::span_char","core::option::Option::<u32>::and_then::<char, fn","<core::cell::RefMut<'_, std::string::String> as core::ops::Deref>::deref","ast::parse::ParserI::<'_, P>::char","core::panicking::assert_failed::<char, char>","std::string::String::as_str","ast::parse::ParserI::<'_, P>::pos","ast::parse::ParserI::<'_, P>::is_eof","ast::parse::ParserI::<'_, P>::error","core::result::Result::<u32, core::num::ParseIntError>::ok","std::string::String::clear","core::cell::RefCell::<std::string::String>::borrow_mut"],"types":["core::num::ParseIntError","str","ast::parse::Parser","ast::ErrorKind","isize","ast::Error","core::option::Option<core::fmt::Arguments<'_>>","ast::parse::ParserI<'_, P>","char","fn(u32) -> core::option::Option<char> {core::char::methods::<impl char>::from_u32}","core::panicking::AssertKind","core::cell::RefMut<'_, std::string::String>","core::result::Result<ast::Literal, ast::Error>","core::result::Result<u32, core::num::ParseIntError>","core::option::Option<u32>","core::cell::RefCell<std::string::String>","std::string::String","ast::LiteralKind","core::option::Option<char>","ast::Position","()","ast::Literal","core::fmt::Arguments<'_>","!","P","u32","ast::Span","ast::HexLiteralKind","bool","(&char, &char)"]}