{"mod_name":"ast::parse","calls":["std::boxed::Box::<ast::Ast>::new","ast::parse::ParserI::<'_, P>::error","ast::parse::ParserI::<'_, P>::next_capture_index","<core::result::Result<ast::Flags, ast::Error> as core::ops::Try>::branch","<core::result::Result<u32, ast::Error> as core::ops::Try>::branch","ast::parse::ParserI::<'_, P>::char","ast::Ast::empty","ast::parse::ParserI::<'_, P>::bump_space","ast::parse::ParserI::<'_, P>::pos","ast::parse::ParserI::<'_, P>::span","ast::parse::ParserI::<'_, P>::is_lookaround_prefix","core::panicking::assert_failed::<char, char>","<core::result::Result<either::Either<ast::SetFlags, ast::Group>, ast::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, ast::Error>>>::from_residual","ast::parse::ParserI::<'_, P>::span_char","ast::parse::ParserI::<'_, P>::bump_if","ast::Span::new","std::vec::Vec::<ast::FlagsItem>::is_empty","ast::parse::ParserI::<'_, P>::parse_capture_name","ast::parse::ParserI::<'_, P>::bump","<core::result::Result<ast::CaptureName, ast::Error> as core::ops::Try>::branch","ast::parse::ParserI::<'_, P>::is_eof","ast::parse::ParserI::<'_, P>::parse_flags"],"types":["(&char, &char)","core::ops::ControlFlow<core::result::Result<core::convert::Infallible, ast::Error>, u32>","core::ops::ControlFlow<core::result::Result<core::convert::Infallible, ast::Error>, ast::Flags>","ast::Flags","core::ops::ControlFlow<core::result::Result<core::convert::Infallible, ast::Error>, ast::CaptureName>","std::vec::Vec<ast::FlagsItem>","ast::Error","ast::ErrorKind","std::alloc::Global","ast::Position","ast::parse::ParserI<'_, P>","core::result::Result<u32, ast::Error>","ast::CaptureName","ast::Span","ast::Group","std::boxed::Box<ast::Ast>","core::result::Result<ast::CaptureName, ast::Error>","ast::Ast","either::Either<ast::SetFlags, ast::Group>","core::result::Result<either::Either<ast::SetFlags, ast::Group>, ast::Error>","!","ast::FlagsItem","str","bool","()","u32","char","core::panicking::AssertKind","ast::GroupKind","core::result::Result<core::convert::Infallible, ast::Error>","core::convert::Infallible","core::option::Option<core::fmt::Arguments<'_>>","P","core::fmt::Arguments<'_>","core::result::Result<ast::Flags, ast::Error>","ast::SetFlags","isize"]}