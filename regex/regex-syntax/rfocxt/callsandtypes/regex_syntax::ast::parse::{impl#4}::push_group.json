{"mod_name":"ast::parse","calls":["core::panicking::assert_failed::<char, char>","ast::Ast::flags","<core::result::Result<ast::Concat, ast::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, ast::Error>>>::from_residual","ast::parse::ParserI::<'_, P>::char","ast::parse::ParserI::<'_, P>::span","core::option::Option::<bool>::unwrap_or","std::vec::Vec::<ast::parse::GroupState>::push","ast::Flags::flag_state","ast::Group::flags","core::cell::RefCell::<std::vec::Vec<ast::parse::GroupState>>::borrow_mut","ast::parse::ParserI::<'_, P>::ignore_whitespace","std::vec::Vec::<ast::Ast>::new","core::cell::Cell::<bool>::set","ast::parse::ParserI::<'_, P>::parser","std::vec::Vec::<ast::Ast>::push","<core::cell::RefMut<'_, std::vec::Vec<ast::parse::GroupState>> as core::ops::DerefMut>::deref_mut","core::option::Option::<&ast::Flags>::and_then::<bool, {closure@regex-syntax/src/ast/parse.rs:719:31: 719:34}>","<core::result::Result<either::Either<ast::SetFlags, ast::Group>, ast::Error> as core::ops::Try>::branch","ast::parse::ParserI::<'_, P>::parse_group"],"types":["ast::SetFlags","core::result::Result<ast::Concat, ast::Error>","ast::Error","core::cell::Cell<bool>","isize","either::Either<ast::SetFlags, ast::Group>","core::cell::RefMut<'_, std::vec::Vec<ast::parse::GroupState>>","core::panicking::AssertKind","core::ops::ControlFlow<core::result::Result<core::convert::Infallible, ast::Error>, either::Either<ast::SetFlags, ast::Group>>","core::cell::RefCell<std::vec::Vec<ast::parse::GroupState>>","()","ast::Concat","std::alloc::Global","bool","core::option::Option<&ast::Flags>","core::fmt::Arguments<'_>","core::result::Result<core::convert::Infallible, ast::Error>","core::option::Option<bool>","std::vec::Vec<ast::parse::GroupState>","P","core::option::Option<core::fmt::Arguments<'_>>","core::convert::Infallible","std::vec::Vec<ast::Ast>","{closure@regex-syntax/src/ast/parse.rs:719:31: 719:34}","!","ast::Span","ast::Group","ast::parse::ParserI<'_, P>","ast::Ast","(&char, &char)","ast::Flags","ast::parse::Parser","ast::Flag","char","ast::parse::GroupState","core::result::Result<either::Either<ast::SetFlags, ast::Group>, ast::Error>"]}