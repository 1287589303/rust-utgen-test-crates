{"mod_name":"ast::parse","calls":["<core::result::Result<ast::ClassUnicode, ast::Error> as core::ops::Try>::branch","ast::parse::ParserI::<'_, P>::maybe_parse_special_word_boundary","ast::parse::ParserI::<'_, P>::char","<core::result::Result<ast::Literal, ast::Error> as core::ops::Try>::branch","is_meta_character","is_escapeable_character","<core::result::Result<ast::parse::Primitive, ast::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, ast::Error>>>::from_residual","ast::Span::new","ast::parse::ParserI::<'_, P>::parser","core::panicking::assert_failed::<char, char>","ast::parse::ParserI::<'_, P>::parse_unicode_class","ast::parse::ParserI::<'_, P>::error","ast::parse::ParserI::<'_, P>::parse_perl_class","ast::parse::ParserI::<'_, P>::pos","<{closure@regex-syntax/src/ast/parse.rs:1543:23: 1543:32} as core::ops::Fn<","ast::parse::ParserI::<'_, P>::is_eof","ast::parse::ParserI::<'_, P>::bump","ast::parse::ParserI::<'_, P>::parse_octal","ast::parse::ParserI::<'_, P>::span_char","<core::result::Result<core::option::Option<ast::AssertionKind>, ast::Error> as core::ops::Try>::branch","ast::parse::ParserI::<'_, P>::parse_hex"],"types":["core::result::Result<ast::parse::Primitive, ast::Error>","ast::parse::ParserI<'_, P>","{closure@regex-syntax/src/ast/parse.rs:1543:23: 1543:32}","(&char, &char)","ast::LiteralKind","ast::AssertionKind","ast::Span","core::result::Result<core::convert::Infallible, ast::Error>","core::option::Option<ast::AssertionKind>","core::option::Option<core::fmt::Arguments<'_>>","core::result::Result<core::option::Option<ast::AssertionKind>, ast::Error>","core::panicking::AssertKind","char","core::convert::Infallible","core::ops::ControlFlow<core::result::Result<core::convert::Infallible, ast::Error>, core::option::Option<ast::AssertionKind>>","()","P","ast::ErrorKind","ast::Literal","core::ops::ControlFlow<core::result::Result<core::convert::Infallible, ast::Error>, ast::ClassUnicode>","ast::ClassPerl","core::fmt::Arguments<'_>","bool","(ast::SpecialLiteralKind, char)","core::result::Result<ast::Literal, ast::Error>","ast::ClassUnicode","isize","core::result::Result<ast::ClassUnicode, ast::Error>","ast::Assertion","ast::parse::Parser","ast::Position","ast::Error","ast::parse::Primitive","ast::SpecialLiteralKind","core::ops::ControlFlow<core::result::Result<core::convert::Infallible, ast::Error>, ast::Literal>","!"]}