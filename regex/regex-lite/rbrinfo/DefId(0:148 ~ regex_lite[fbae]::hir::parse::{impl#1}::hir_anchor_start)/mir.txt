bb0
  0: StorageLive(_2)
    SourceInfo(regex-lite/src/hir/parse.rs:1248:13-1248:17)
  1: StorageLive(_3)
    SourceInfo(regex-lite/src/hir/parse.rs:1248:23-1248:46)
  2: StorageLive(_4)
    SourceInfo(regex-lite/src/hir/parse.rs:1248:23-1248:35)
  3: StorageLive(_5)
    SourceInfo(regex-lite/src/hir/parse.rs:1248:23-1248:27)
  4: _5 = &(*_1)
    SourceInfo(regex-lite/src/hir/parse.rs:1248:23-1248:27)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/parse.rs:1248:23-1248:35)
      kind: _4 = hir::parse::Parser::<'_>::flags(move _5) -> [return: bb1, unwind: bb10]
  }
  preds []
  succs [bb1, bb10]

bb1
  0: StorageDead(_5)
    SourceInfo(regex-lite/src/hir/parse.rs:1248:34-1248:35)
  1: _3 = (_4.1: bool)
    SourceInfo(regex-lite/src/hir/parse.rs:1248:23-1248:46)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/parse.rs:1248:23-1248:46)
      kind: switchInt(move _3) -> [0: bb7, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb7]

bb2
  0: StorageDead(_4)
    SourceInfo(regex-lite/src/hir/parse.rs:1248:45-1248:46)
  1: StorageLive(_6)
    SourceInfo(regex-lite/src/hir/parse.rs:1249:16-1249:33)
  2: StorageLive(_7)
    SourceInfo(regex-lite/src/hir/parse.rs:1249:16-1249:28)
  3: StorageLive(_8)
    SourceInfo(regex-lite/src/hir/parse.rs:1249:16-1249:20)
  4: _8 = &(*_1)
    SourceInfo(regex-lite/src/hir/parse.rs:1249:16-1249:20)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/parse.rs:1249:16-1249:28)
      kind: _7 = hir::parse::Parser::<'_>::flags(move _8) -> [return: bb3, unwind: bb10]
  }
  preds [bb1]
  succs [bb3, bb10]

bb3
  0: StorageDead(_8)
    SourceInfo(regex-lite/src/hir/parse.rs:1249:27-1249:28)
  1: _6 = (_7.4: bool)
    SourceInfo(regex-lite/src/hir/parse.rs:1249:16-1249:33)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/parse.rs:1249:16-1249:33)
      kind: switchInt(move _6) -> [0: bb5, otherwise: bb4]
  }
  preds [bb2]
  succs [bb4, bb5]

bb4
  0: StorageDead(_7)
    SourceInfo(regex-lite/src/hir/parse.rs:1249:32-1249:33)
  1: _2 = hir::Look::StartCRLF
    SourceInfo(regex-lite/src/hir/parse.rs:1250:17-1250:37)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/parse.rs:1249:13-1253:14)
      kind: goto -> bb6
  }
  preds [bb3]
  succs [bb6]

bb5
  0: StorageDead(_7)
    SourceInfo(regex-lite/src/hir/parse.rs:1249:32-1249:33)
  1: _2 = hir::Look::StartLF
    SourceInfo(regex-lite/src/hir/parse.rs:1252:17-1252:35)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/parse.rs:1249:13-1253:14)
      kind: goto -> bb6
  }
  preds [bb3]
  succs [bb6]

bb6
  0: StorageDead(_6)
    SourceInfo(regex-lite/src/hir/parse.rs:1253:13-1253:14)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/parse.rs:1248:20-1256:10)
      kind: goto -> bb8
  }
  preds [bb4, bb5]
  succs [bb8]

bb7
  0: StorageDead(_4)
    SourceInfo(regex-lite/src/hir/parse.rs:1248:45-1248:46)
  1: _2 = hir::Look::Start
    SourceInfo(regex-lite/src/hir/parse.rs:1255:13-1255:29)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/parse.rs:1248:20-1256:10)
      kind: goto -> bb8
  }
  preds [bb1]
  succs [bb8]

bb8
  0: StorageDead(_3)
    SourceInfo(regex-lite/src/hir/parse.rs:1256:9-1256:10)
  1: FakeRead(ForLet(None), _2)
    SourceInfo(regex-lite/src/hir/parse.rs:1248:13-1248:17)
  2: StorageLive(_9)
    SourceInfo(regex-lite/src/hir/parse.rs:1257:19-1257:23)
  3: _9 = _2
    SourceInfo(regex-lite/src/hir/parse.rs:1257:19-1257:23)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/parse.rs:1257:9-1257:24)
      kind: _0 = hir::Hir::look(move _9) -> [return: bb9, unwind: bb10]
  }
  preds [bb6, bb7]
  succs [bb9, bb10]

bb9
  0: StorageDead(_9)
    SourceInfo(regex-lite/src/hir/parse.rs:1257:23-1257:24)
  1: StorageDead(_2)
    SourceInfo(regex-lite/src/hir/parse.rs:1258:5-1258:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/parse.rs:1258:6-1258:6)
      kind: return
  }
  preds [bb8]
  succs []

bb10
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/parse.rs:1247:5-1258:6)
      kind: resume
  }
  preds [bb0, bb2, bb8]
  succs []

