bb0
  0: StorageLive(_2)
    SourceInfo(regex-lite/src/hir/mod.rs:73:5-75:6)
  1: StorageLive(_3)
    SourceInfo(regex-lite/src/hir/mod.rs:73:8-73:28)
  2: StorageLive(_4)
    SourceInfo(regex-lite/src/hir/mod.rs:73:26-73:27)
  3: _4 = _1
    SourceInfo(regex-lite/src/hir/mod.rs:73:26-73:27)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:73:8-73:28)
      kind: _3 = hir::is_meta_character(move _4) -> [return: bb1, unwind: bb19]
  }
  preds []
  succs [bb1, bb19]

bb1
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:73:8-73:28)
      kind: switchInt(move _3) -> [0: bb3, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_4)
    SourceInfo(regex-lite/src/hir/mod.rs:73:27-73:28)
  1: _0 = const true
    SourceInfo(regex-lite/src/hir/mod.rs:74:16-74:20)
  2: StorageDead(_3)
    SourceInfo(regex-lite/src/hir/mod.rs:75:5-75:6)
  3: StorageDead(_2)
    SourceInfo(regex-lite/src/hir/mod.rs:75:5-75:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb18
  }
  preds [bb1]
  succs [bb18]

bb3
  0: StorageDead(_4)
    SourceInfo(regex-lite/src/hir/mod.rs:73:27-73:28)
  1: _2 = const ()
    SourceInfo(regex-lite/src/hir/mod.rs:75:6-75:6)
  2: StorageDead(_3)
    SourceInfo(regex-lite/src/hir/mod.rs:75:5-75:6)
  3: StorageDead(_2)
    SourceInfo(regex-lite/src/hir/mod.rs:75:5-75:6)
  4: StorageLive(_6)
    SourceInfo(regex-lite/src/hir/mod.rs:78:5-80:6)
  5: StorageLive(_7)
    SourceInfo(regex-lite/src/hir/mod.rs:78:9-78:21)
  6: StorageLive(_8)
    SourceInfo(regex-lite/src/hir/mod.rs:78:9-78:10)
  7: _8 = &_1
    SourceInfo(regex-lite/src/hir/mod.rs:78:9-78:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:78:9-78:21)
      kind: _7 = core::char::methods::<impl char>::is_ascii(move _8) -> [return: bb4, unwind: bb19]
  }
  preds [bb1]
  succs [bb4, bb19]

bb4
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:78:9-78:21)
      kind: switchInt(move _7) -> [0: bb6, otherwise: bb5]
  }
  preds [bb3]
  succs [bb5, bb6]

bb5
  0: StorageDead(_8)
    SourceInfo(regex-lite/src/hir/mod.rs:78:20-78:21)
  1: _6 = const ()
    SourceInfo(regex-lite/src/hir/mod.rs:80:6-80:6)
  2: StorageDead(_7)
    SourceInfo(regex-lite/src/hir/mod.rs:80:5-80:6)
  3: StorageDead(_6)
    SourceInfo(regex-lite/src/hir/mod.rs:80:5-80:6)
  4: PlaceMention(_1)
    SourceInfo(regex-lite/src/hir/mod.rs:85:11-85:12)
  5: _14 = Le(const '0', _1)
    SourceInfo(regex-lite/src/hir/mod.rs:86:9-86:18)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:86:9-86:18)
      kind: switchInt(move _14) -> [0: bb8, otherwise: bb13]
  }
  preds [bb4]
  succs [bb8, bb13]

bb6
  0: StorageDead(_8)
    SourceInfo(regex-lite/src/hir/mod.rs:78:20-78:21)
  1: _0 = const false
    SourceInfo(regex-lite/src/hir/mod.rs:79:16-79:21)
  2: StorageDead(_7)
    SourceInfo(regex-lite/src/hir/mod.rs:80:5-80:6)
  3: StorageDead(_6)
    SourceInfo(regex-lite/src/hir/mod.rs:80:5-80:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb18
  }
  preds [bb4]
  succs [bb18]

bb7
  0: _0 = const true
    SourceInfo(regex-lite/src/hir/mod.rs:94:14-94:18)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:94:14-94:18)
      kind: goto -> bb18
  }
  preds [bb10, bb15]
  succs [bb18]

bb8
  0: _12 = Le(const 'A', _1)
    SourceInfo(regex-lite/src/hir/mod.rs:86:21-86:30)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:86:21-86:30)
      kind: switchInt(move _12) -> [0: bb9, otherwise: bb12]
  }
  preds [bb5, bb13]
  succs [bb9, bb12]

bb9
  0: _10 = Le(const 'a', _1)
    SourceInfo(regex-lite/src/hir/mod.rs:86:33-86:42)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:86:33-86:42)
      kind: switchInt(move _10) -> [0: bb10, otherwise: bb11]
  }
  preds [bb8, bb12]
  succs [bb10, bb11]

bb10
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:85:5-85:12)
      kind: switchInt(_1) -> [60: bb15, 62: bb15, otherwise: bb7]
  }
  preds [bb9, bb11, bb14]
  succs [bb7, bb15, bb15]

bb11
  0: _11 = Le(_1, const 'z')
    SourceInfo(regex-lite/src/hir/mod.rs:86:33-86:42)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:86:33-86:42)
      kind: switchInt(move _11) -> [0: bb10, otherwise: bb14]
  }
  preds [bb9]
  succs [bb10, bb14]

bb12
  0: _13 = Le(_1, const 'Z')
    SourceInfo(regex-lite/src/hir/mod.rs:86:21-86:30)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:86:21-86:30)
      kind: switchInt(move _13) -> [0: bb9, otherwise: bb14]
  }
  preds [bb8]
  succs [bb9, bb14]

bb13
  0: _15 = Le(_1, const '9')
    SourceInfo(regex-lite/src/hir/mod.rs:86:9-86:18)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:86:9-86:18)
      kind: switchInt(move _15) -> [0: bb8, otherwise: bb14]
  }
  preds [bb5]
  succs [bb8, bb14]

bb14
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:86:9-86:42)
      kind: falseEdge -> [real: bb16, imaginary: bb10]
  }
  preds [bb11, bb12, bb13]
  succs [bb10, bb16]

bb15
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:93:9-93:18)
      kind: falseEdge -> [real: bb17, imaginary: bb7]
  }
  preds [bb10, bb10]
  succs [bb7, bb17]

bb16
  0: _0 = const false
    SourceInfo(regex-lite/src/hir/mod.rs:86:46-86:51)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:86:46-86:51)
      kind: goto -> bb18
  }
  preds [bb14]
  succs [bb18]

bb17
  0: _0 = const false
    SourceInfo(regex-lite/src/hir/mod.rs:93:22-93:27)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:93:22-93:27)
      kind: goto -> bb18
  }
  preds [bb15]
  succs [bb18]

bb18
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:96:2-96:2)
      kind: return
  }
  preds [bb2, bb6, bb7, bb16, bb17]
  succs []

bb19
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:71:1-96:2)
      kind: resume
  }
  preds [bb0, bb3]
  succs []

