{
  "regex-lite/src/utf8.rs:121:15:121:49": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(b as u32 & 0b111111) | (*cp << 6)",
          "lhs": "(b as u32 & 0b111111)",
          "rhs": "(*cp << 6)",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-lite/src/utf8.rs:121:39:121:49": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(*cp << 6)",
          "lhs": "*cp",
          "rhs": "6",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/utf8.rs:118:8:118:24": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "*state == ACCEPT",
          "lhs": "*state",
          "rhs": "ACCEPT",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-lite/src/utf8.rs:119:15:119:30": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(0xFF >> class)",
          "lhs": "0xFF",
          "rhs": "class",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/utf8.rs:119:15:119:43": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(0xFF >> class) & (b as u32)",
          "lhs": "(0xFF >> class)",
          "rhs": "(b as u32)",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-lite/src/utf8.rs:123:41:123:68": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "*state + usize::from(class)",
          "lhs": "*state",
          "rhs": "usize::from(class)",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-lite/src/utf8.rs:121:15:121:36": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(b as u32 & 0b111111)",
          "lhs": "b as u32",
          "rhs": "0b111111",
          "cmp_with_int": true
        }
      }
    }
  ]
}