bb0
  0: StorageLive(_4)
    SourceInfo(regex-lite/src/utf8.rs:117:9-117:14)
  1: StorageLive(_5)
    SourceInfo(regex-lite/src/utf8.rs:117:17-117:24)
  2: _5 = const utf8::decode_step::CLASSES
    SourceInfo(regex-lite/src/utf8.rs:117:17-117:24)
  3: StorageLive(_6)
    SourceInfo(regex-lite/src/utf8.rs:117:25-117:39)
  4: StorageLive(_7)
    SourceInfo(regex-lite/src/utf8.rs:117:37-117:38)
  5: _7 = _3
    SourceInfo(regex-lite/src/utf8.rs:117:37-117:38)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:117:25-117:39)
      kind: _6 = <usize as core::convert::From<u8>>::from(move _7) -> [return: bb1, unwind: bb12]
  }
  preds []
  succs [bb1, bb12]

bb1
  0: StorageDead(_7)
    SourceInfo(regex-lite/src/utf8.rs:117:38-117:39)
  1: _8 = Len(_5)
    SourceInfo(regex-lite/src/utf8.rs:117:17-117:40)
  2: _9 = Lt(_6, _8)
    SourceInfo(regex-lite/src/utf8.rs:117:17-117:40)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:117:17-117:40)
      kind: assert(move _9, "index out of bounds: the length is {} but the index is {}", move _8, _6) -> [success: bb2, unwind: bb12]
  }
  preds [bb0]
  succs [bb2, bb12]

bb2
  0: _4 = _5[_6]
    SourceInfo(regex-lite/src/utf8.rs:117:17-117:40)
  1: FakeRead(ForLet(None), _4)
    SourceInfo(regex-lite/src/utf8.rs:117:9-117:14)
  2: StorageDead(_6)
    SourceInfo(regex-lite/src/utf8.rs:117:40-117:41)
  3: StorageDead(_5)
    SourceInfo(regex-lite/src/utf8.rs:117:40-117:41)
  4: StorageLive(_10)
    SourceInfo(regex-lite/src/utf8.rs:118:5-122:6)
  5: StorageLive(_11)
    SourceInfo(regex-lite/src/utf8.rs:118:8-118:24)
  6: StorageLive(_12)
    SourceInfo(regex-lite/src/utf8.rs:118:8-118:14)
  7: _12 = (*_1)
    SourceInfo(regex-lite/src/utf8.rs:118:8-118:14)
  8: _11 = Eq(move _12, const utf8::ACCEPT)
    SourceInfo(regex-lite/src/utf8.rs:118:8-118:24)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:118:8-118:24)
      kind: switchInt(move _11) -> [0: bb5, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: StorageDead(_12)
    SourceInfo(regex-lite/src/utf8.rs:118:23-118:24)
  1: StorageLive(_13)
    SourceInfo(regex-lite/src/utf8.rs:119:15-119:30)
  2: StorageLive(_14)
    SourceInfo(regex-lite/src/utf8.rs:119:24-119:29)
  3: _14 = _4
    SourceInfo(regex-lite/src/utf8.rs:119:24-119:29)
  4: _15 = Lt(_14, const 32_u8)
    SourceInfo(regex-lite/src/utf8.rs:119:15-119:30)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:119:15-119:30)
      kind: assert(move _15, "attempt to shift right by `{}`, which would overflow", _14) -> [success: bb4, unwind: bb12]
  }
  preds [bb2]
  succs [bb4, bb12]

bb4
  0: _13 = Shr(const 255_u32, move _14)
    SourceInfo(regex-lite/src/utf8.rs:119:15-119:30)
  1: StorageDead(_14)
    SourceInfo(regex-lite/src/utf8.rs:119:29-119:30)
  2: StorageLive(_16)
    SourceInfo(regex-lite/src/utf8.rs:119:33-119:43)
  3: StorageLive(_17)
    SourceInfo(regex-lite/src/utf8.rs:119:34-119:35)
  4: _17 = _3
    SourceInfo(regex-lite/src/utf8.rs:119:34-119:35)
  5: _16 = move _17 as u32 (IntToInt)
    SourceInfo(regex-lite/src/utf8.rs:119:33-119:43)
  6: StorageDead(_17)
    SourceInfo(regex-lite/src/utf8.rs:119:42-119:43)
  7: (*_2) = BitAnd(move _13, move _16)
    SourceInfo(regex-lite/src/utf8.rs:119:9-119:43)
  8: StorageDead(_16)
    SourceInfo(regex-lite/src/utf8.rs:119:42-119:43)
  9: StorageDead(_13)
    SourceInfo(regex-lite/src/utf8.rs:119:42-119:43)
  10: _10 = const ()
    SourceInfo(regex-lite/src/utf8.rs:118:25-120:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:118:5-122:6)
      kind: goto -> bb7
  }
  preds [bb3]
  succs [bb7]

bb5
  0: StorageDead(_12)
    SourceInfo(regex-lite/src/utf8.rs:118:23-118:24)
  1: StorageLive(_18)
    SourceInfo(regex-lite/src/utf8.rs:121:15-121:36)
  2: StorageLive(_19)
    SourceInfo(regex-lite/src/utf8.rs:121:16-121:24)
  3: StorageLive(_20)
    SourceInfo(regex-lite/src/utf8.rs:121:16-121:17)
  4: _20 = _3
    SourceInfo(regex-lite/src/utf8.rs:121:16-121:17)
  5: _19 = move _20 as u32 (IntToInt)
    SourceInfo(regex-lite/src/utf8.rs:121:16-121:24)
  6: StorageDead(_20)
    SourceInfo(regex-lite/src/utf8.rs:121:23-121:24)
  7: _18 = BitAnd(move _19, const 63_u32)
    SourceInfo(regex-lite/src/utf8.rs:121:15-121:36)
  8: StorageDead(_19)
    SourceInfo(regex-lite/src/utf8.rs:121:35-121:36)
  9: StorageLive(_21)
    SourceInfo(regex-lite/src/utf8.rs:121:39-121:49)
  10: StorageLive(_22)
    SourceInfo(regex-lite/src/utf8.rs:121:40-121:43)
  11: _22 = (*_2)
    SourceInfo(regex-lite/src/utf8.rs:121:40-121:43)
  12: _23 = const 6_i32 as u32 (IntToInt)
    SourceInfo(regex-lite/src/utf8.rs:121:39-121:49)
  13: _24 = Lt(move _23, const 32_u32)
    SourceInfo(regex-lite/src/utf8.rs:121:39-121:49)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:121:39-121:49)
      kind: assert(move _24, "attempt to shift left by `{}`, which would overflow", const 6_i32) -> [success: bb6, unwind: bb12]
  }
  preds [bb2]
  succs [bb6, bb12]

bb6
  0: _21 = Shl(move _22, const 6_i32)
    SourceInfo(regex-lite/src/utf8.rs:121:39-121:49)
  1: StorageDead(_22)
    SourceInfo(regex-lite/src/utf8.rs:121:48-121:49)
  2: (*_2) = BitOr(move _18, move _21)
    SourceInfo(regex-lite/src/utf8.rs:121:9-121:49)
  3: StorageDead(_21)
    SourceInfo(regex-lite/src/utf8.rs:121:48-121:49)
  4: StorageDead(_18)
    SourceInfo(regex-lite/src/utf8.rs:121:48-121:49)
  5: _10 = const ()
    SourceInfo(regex-lite/src/utf8.rs:120:12-122:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:118:5-122:6)
      kind: goto -> bb7
  }
  preds [bb5]
  succs [bb7]

bb7
  0: StorageDead(_11)
    SourceInfo(regex-lite/src/utf8.rs:122:5-122:6)
  1: StorageDead(_10)
    SourceInfo(regex-lite/src/utf8.rs:122:5-122:6)
  2: StorageLive(_25)
    SourceInfo(regex-lite/src/utf8.rs:123:14-123:70)
  3: StorageLive(_26)
    SourceInfo(regex-lite/src/utf8.rs:123:26-123:69)
  4: StorageLive(_27)
    SourceInfo(regex-lite/src/utf8.rs:123:26-123:40)
  5: _27 = const utf8::decode_step::STATES_FORWARD
    SourceInfo(regex-lite/src/utf8.rs:123:26-123:40)
  6: StorageLive(_28)
    SourceInfo(regex-lite/src/utf8.rs:123:41-123:68)
  7: StorageLive(_29)
    SourceInfo(regex-lite/src/utf8.rs:123:41-123:47)
  8: _29 = (*_1)
    SourceInfo(regex-lite/src/utf8.rs:123:41-123:47)
  9: StorageLive(_30)
    SourceInfo(regex-lite/src/utf8.rs:123:50-123:68)
  10: StorageLive(_31)
    SourceInfo(regex-lite/src/utf8.rs:123:62-123:67)
  11: _31 = _4
    SourceInfo(regex-lite/src/utf8.rs:123:62-123:67)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:123:50-123:68)
      kind: _30 = <usize as core::convert::From<u8>>::from(move _31) -> [return: bb8, unwind: bb12]
  }
  preds [bb4, bb6]
  succs [bb8, bb12]

bb8
  0: StorageDead(_31)
    SourceInfo(regex-lite/src/utf8.rs:123:67-123:68)
  1: _32 = AddWithOverflow(_29, _30)
    SourceInfo(regex-lite/src/utf8.rs:123:41-123:68)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:123:41-123:68)
      kind: assert(!move (_32.1: bool), "attempt to compute `{} + {}`, which would overflow", move _29, move _30) -> [success: bb9, unwind: bb12]
  }
  preds [bb7]
  succs [bb9, bb12]

bb9
  0: _28 = move (_32.0: usize)
    SourceInfo(regex-lite/src/utf8.rs:123:41-123:68)
  1: StorageDead(_30)
    SourceInfo(regex-lite/src/utf8.rs:123:67-123:68)
  2: StorageDead(_29)
    SourceInfo(regex-lite/src/utf8.rs:123:67-123:68)
  3: _33 = Len((*_27))
    SourceInfo(regex-lite/src/utf8.rs:123:26-123:69)
  4: _34 = Lt(_28, _33)
    SourceInfo(regex-lite/src/utf8.rs:123:26-123:69)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:123:26-123:69)
      kind: assert(move _34, "index out of bounds: the length is {} but the index is {}", move _33, _28) -> [success: bb10, unwind: bb12]
  }
  preds [bb8]
  succs [bb10, bb12]

bb10
  0: _26 = (*_27)[_28]
    SourceInfo(regex-lite/src/utf8.rs:123:26-123:69)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:123:14-123:70)
      kind: _25 = <usize as core::convert::From<u8>>::from(move _26) -> [return: bb11, unwind: bb12]
  }
  preds [bb9]
  succs [bb11, bb12]

bb11
  0: StorageDead(_26)
    SourceInfo(regex-lite/src/utf8.rs:123:69-123:70)
  1: (*_1) = move _25
    SourceInfo(regex-lite/src/utf8.rs:123:5-123:70)
  2: StorageDead(_25)
    SourceInfo(regex-lite/src/utf8.rs:123:69-123:70)
  3: StorageDead(_28)
    SourceInfo(regex-lite/src/utf8.rs:123:70-123:71)
  4: StorageDead(_27)
    SourceInfo(regex-lite/src/utf8.rs:123:70-123:71)
  5: _0 = const ()
    SourceInfo(regex-lite/src/utf8.rs:86:56-124:2)
  6: StorageDead(_4)
    SourceInfo(regex-lite/src/utf8.rs:124:1-124:2)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:124:2-124:2)
      kind: return
  }
  preds [bb10]
  succs []

bb12
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:86:1-124:2)
      kind: resume
  }
  preds [bb0, bb1, bb3, bb5, bb7, bb8, bb9, bb10]
  succs []

