{
  "regex-lite/src/hir/parse.rs:420:24:420:52": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "self.char.get() != Some(')')",
          "lhs": "self.char.get()",
          "rhs": "Some(')')",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-lite/src/hir/parse.rs:426:24:426:34": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "depth == 0",
          "lhs": "depth",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/hir/parse.rs:440:30:440:68": [
    {
      "Try": "self.parse_counted_repetition(concat)?"
    }
  ],
  "regex-lite/src/hir/parse.rs:437:30:437:70": [
    {
      "Try": "self.parse_uncounted_repetition(concat)?"
    }
  ],
  "regex-lite/src/hir/parse.rs:398:21:398:44": [
    {
      "Try": "self.increment_depth()?"
    }
  ],
  "regex-lite/src/hir/parse.rs:406:19:406:30": [
    {
      "Match": {
        "match_source": "regex-lite/src/hir/parse.rs:406:19:406:30",
        "match_str": "self.char()",
        "match_kind": "Other",
        "arms": {
          "regex-lite/src/hir/parse.rs:425:17:425:20": {
            "pat": {
              "pat_str": "')'",
              "kind": {
                "Other": 41
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/hir/parse.rs:425:24:430:18"
          },
          "regex-lite/src/hir/parse.rs:407:17:407:20": {
            "pat": {
              "pat_str": "'('",
              "kind": {
                "Other": 40
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/hir/parse.rs:407:24:424:18"
          },
          "regex-lite/src/hir/parse.rs:442:17:442:18": {
            "pat": {
              "pat_str": "_",
              "kind": "Wild"
            },
            "guard": null,
            "body_source": "regex-lite/src/hir/parse.rs:442:22:442:58"
          },
          "regex-lite/src/hir/parse.rs:436:29:436:32": {
            "pat": {
              "pat_str": "'+'",
              "kind": {
                "Other": 43
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/hir/parse.rs:436:36:438:18"
          },
          "regex-lite/src/hir/parse.rs:435:17:435:20": {
            "pat": {
              "pat_str": "'['",
              "kind": {
                "Other": 91
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/hir/parse.rs:435:24:435:56"
          },
          "regex-lite/src/hir/parse.rs:436:17:436:20": {
            "pat": {
              "pat_str": "'?'",
              "kind": {
                "Other": 63
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/hir/parse.rs:436:36:438:18"
          },
          "regex-lite/src/hir/parse.rs:439:17:439:20": {
            "pat": {
              "pat_str": "'{'",
              "kind": {
                "Other": 123
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/hir/parse.rs:439:24:441:18"
          },
          "regex-lite/src/hir/parse.rs:431:17:431:20": {
            "pat": {
              "pat_str": "'|'",
              "kind": {
                "Other": 124
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/hir/parse.rs:431:24:434:18"
          },
          "regex-lite/src/hir/parse.rs:436:23:436:26": {
            "pat": {
              "pat_str": "'*'",
              "kind": {
                "Other": 42
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/hir/parse.rs:436:36:438:18"
          }
        }
      }
    }
  ],
  "regex-lite/src/hir/parse.rs:435:36:435:55": [
    {
      "Try": "self.parse_class()?"
    }
  ],
  "regex-lite/src/hir/parse.rs:411:40:411:59": [
    {
      "Try": "self.parse_group()?"
    }
  ],
  "regex-lite/src/hir/parse.rs:403:16:403:30": [
    {
      "Bool": {
        "Other": "self.is_done()"
      }
    }
  ],
  "regex-lite/src/hir/parse.rs:442:34:442:57": [
    {
      "Try": "self.parse_primitive()?"
    }
  ],
  "regex-lite/src/hir/parse.rs:411:24:411:59": [
    {
      "Bool": {
        "Other": "let Some(sub) = self.parse_group()?"
      }
    }
  ]
}