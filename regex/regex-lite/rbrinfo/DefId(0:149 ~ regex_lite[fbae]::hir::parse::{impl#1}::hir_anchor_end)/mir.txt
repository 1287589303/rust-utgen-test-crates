bb0
  0: StorageLive(_2)
    SourceInfo(regex-lite/src/hir/parse.rs:1261:13-1261:17)
  1: StorageLive(_3)
    SourceInfo(regex-lite/src/hir/parse.rs:1261:23-1261:46)
  2: StorageLive(_4)
    SourceInfo(regex-lite/src/hir/parse.rs:1261:23-1261:35)
  3: StorageLive(_5)
    SourceInfo(regex-lite/src/hir/parse.rs:1261:23-1261:27)
  4: _5 = &(*_1)
    SourceInfo(regex-lite/src/hir/parse.rs:1261:23-1261:27)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/parse.rs:1261:23-1261:35)
      kind: _4 = hir::parse::Parser::<'_>::flags(move _5) -> [return: bb1, unwind: bb10]
  }
  preds []
  succs [bb1, bb10]

bb1
  0: StorageDead(_5)
    SourceInfo(regex-lite/src/hir/parse.rs:1261:34-1261:35)
  1: _3 = (_4.1: bool)
    SourceInfo(regex-lite/src/hir/parse.rs:1261:23-1261:46)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/parse.rs:1261:23-1261:46)
      kind: switchInt(move _3) -> [0: bb7, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb7]

bb2
  0: StorageDead(_4)
    SourceInfo(regex-lite/src/hir/parse.rs:1261:45-1261:46)
  1: StorageLive(_6)
    SourceInfo(regex-lite/src/hir/parse.rs:1262:16-1262:33)
  2: StorageLive(_7)
    SourceInfo(regex-lite/src/hir/parse.rs:1262:16-1262:28)
  3: StorageLive(_8)
    SourceInfo(regex-lite/src/hir/parse.rs:1262:16-1262:20)
  4: _8 = &(*_1)
    SourceInfo(regex-lite/src/hir/parse.rs:1262:16-1262:20)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/parse.rs:1262:16-1262:28)
      kind: _7 = hir::parse::Parser::<'_>::flags(move _8) -> [return: bb3, unwind: bb10]
  }
  preds [bb1]
  succs [bb3, bb10]

bb3
  0: StorageDead(_8)
    SourceInfo(regex-lite/src/hir/parse.rs:1262:27-1262:28)
  1: _6 = (_7.4: bool)
    SourceInfo(regex-lite/src/hir/parse.rs:1262:16-1262:33)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/parse.rs:1262:16-1262:33)
      kind: switchInt(move _6) -> [0: bb5, otherwise: bb4]
  }
  preds [bb2]
  succs [bb4, bb5]

bb4
  0: StorageDead(_7)
    SourceInfo(regex-lite/src/hir/parse.rs:1262:32-1262:33)
  1: _2 = hir::Look::EndCRLF
    SourceInfo(regex-lite/src/hir/parse.rs:1263:17-1263:35)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/parse.rs:1262:13-1266:14)
      kind: goto -> bb6
  }
  preds [bb3]
  succs [bb6]

bb5
  0: StorageDead(_7)
    SourceInfo(regex-lite/src/hir/parse.rs:1262:32-1262:33)
  1: _2 = hir::Look::EndLF
    SourceInfo(regex-lite/src/hir/parse.rs:1265:17-1265:33)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/parse.rs:1262:13-1266:14)
      kind: goto -> bb6
  }
  preds [bb3]
  succs [bb6]

bb6
  0: StorageDead(_6)
    SourceInfo(regex-lite/src/hir/parse.rs:1266:13-1266:14)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/parse.rs:1261:20-1269:10)
      kind: goto -> bb8
  }
  preds [bb4, bb5]
  succs [bb8]

bb7
  0: StorageDead(_4)
    SourceInfo(regex-lite/src/hir/parse.rs:1261:45-1261:46)
  1: _2 = hir::Look::End
    SourceInfo(regex-lite/src/hir/parse.rs:1268:13-1268:27)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/parse.rs:1261:20-1269:10)
      kind: goto -> bb8
  }
  preds [bb1]
  succs [bb8]

bb8
  0: StorageDead(_3)
    SourceInfo(regex-lite/src/hir/parse.rs:1269:9-1269:10)
  1: FakeRead(ForLet(None), _2)
    SourceInfo(regex-lite/src/hir/parse.rs:1261:13-1261:17)
  2: StorageLive(_9)
    SourceInfo(regex-lite/src/hir/parse.rs:1270:19-1270:23)
  3: _9 = _2
    SourceInfo(regex-lite/src/hir/parse.rs:1270:19-1270:23)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/parse.rs:1270:9-1270:24)
      kind: _0 = hir::Hir::look(move _9) -> [return: bb9, unwind: bb10]
  }
  preds [bb6, bb7]
  succs [bb9, bb10]

bb9
  0: StorageDead(_9)
    SourceInfo(regex-lite/src/hir/parse.rs:1270:23-1270:24)
  1: StorageDead(_2)
    SourceInfo(regex-lite/src/hir/parse.rs:1271:5-1271:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/parse.rs:1271:6-1271:6)
      kind: return
  }
  preds [bb8]
  succs []

bb10
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/parse.rs:1260:5-1271:6)
      kind: resume
  }
  preds [bb0, bb2, bb8]
  succs []

