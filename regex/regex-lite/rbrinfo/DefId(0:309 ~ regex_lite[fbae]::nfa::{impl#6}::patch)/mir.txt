bb0
  0: StorageLive(_4)
    SourceInfo(regex-lite/src/nfa.rs:666:13-666:33)
  1: StorageLive(_5)
    SourceInfo(regex-lite/src/nfa.rs:666:36-666:66)
  2: StorageLive(_6)
    SourceInfo(regex-lite/src/nfa.rs:666:36-666:53)
  3: StorageLive(_7)
    SourceInfo(regex-lite/src/nfa.rs:666:36-666:53)
  4: StorageLive(_8)
    SourceInfo(regex-lite/src/nfa.rs:666:36-666:44)
  5: _8 = &((*_1).1: core::cell::RefCell<nfa::NFA>)
    SourceInfo(regex-lite/src/nfa.rs:666:36-666:44)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:666:36-666:53)
      kind: _7 = core::cell::RefCell::<nfa::NFA>::borrow(move _8) -> [return: bb1, unwind: bb47]
  }
  preds []
  succs [bb1, bb47]

bb1
  0: _6 = &_7
    SourceInfo(regex-lite/src/nfa.rs:666:36-666:53)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:666:36-666:66)
      kind: _5 = <core::cell::Ref<'_, nfa::NFA> as core::ops::Deref>::deref(move _6) -> [return: bb2, unwind: bb46]
  }
  preds [bb0]
  succs [bb2, bb46]

bb2
  0: StorageDead(_8)
    SourceInfo(regex-lite/src/nfa.rs:666:52-666:53)
  1: StorageDead(_6)
    SourceInfo(regex-lite/src/nfa.rs:666:52-666:53)
  2: _4 = ((*_5).8: usize)
    SourceInfo(regex-lite/src/nfa.rs:666:36-666:66)
  3: FakeRead(ForLet(None), _4)
    SourceInfo(regex-lite/src/nfa.rs:666:13-666:33)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:666:66-666:67)
      kind: drop(_7) -> [return: bb3, unwind: bb47]
  }
  preds [bb1]
  succs [bb3, bb47]

bb3
  0: StorageDead(_7)
    SourceInfo(regex-lite/src/nfa.rs:666:66-666:67)
  1: StorageDead(_5)
    SourceInfo(regex-lite/src/nfa.rs:666:66-666:67)
  2: StorageLive(_9)
    SourceInfo(regex-lite/src/nfa.rs:667:9-685:10)
  3: StorageLive(_10)
    SourceInfo(regex-lite/src/nfa.rs:667:43-667:60)
  4: StorageLive(_11)
    SourceInfo(regex-lite/src/nfa.rs:667:15-667:43)
  5: StorageLive(_12)
    SourceInfo(regex-lite/src/nfa.rs:667:15-667:43)
  6: StorageLive(_13)
    SourceInfo(regex-lite/src/nfa.rs:667:15-667:36)
  7: StorageLive(_14)
    SourceInfo(regex-lite/src/nfa.rs:667:15-667:36)
  8: StorageLive(_15)
    SourceInfo(regex-lite/src/nfa.rs:667:15-667:23)
  9: _15 = &((*_1).1: core::cell::RefCell<nfa::NFA>)
    SourceInfo(regex-lite/src/nfa.rs:667:15-667:23)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:667:15-667:36)
      kind: _14 = core::cell::RefCell::<nfa::NFA>::borrow_mut(move _15) -> [return: bb4, unwind: bb47]
  }
  preds [bb2]
  succs [bb4, bb47]

bb4
  0: _13 = &mut _14
    SourceInfo(regex-lite/src/nfa.rs:667:15-667:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:667:15-667:43)
      kind: _12 = <core::cell::RefMut<'_, nfa::NFA> as core::ops::DerefMut>::deref_mut(move _13) -> [return: bb5, unwind: bb45]
  }
  preds [bb3]
  succs [bb5, bb45]

bb5
  0: StorageDead(_15)
    SourceInfo(regex-lite/src/nfa.rs:667:35-667:36)
  1: StorageDead(_13)
    SourceInfo(regex-lite/src/nfa.rs:667:35-667:36)
  2: _11 = &mut ((*_12).1: alloc::vec::Vec<nfa::State>)
    SourceInfo(regex-lite/src/nfa.rs:667:15-667:43)
  3: StorageLive(_16)
    SourceInfo(regex-lite/src/nfa.rs:667:44-667:59)
  4: StorageLive(_17)
    SourceInfo(regex-lite/src/nfa.rs:667:44-667:48)
  5: _17 = _2
    SourceInfo(regex-lite/src/nfa.rs:667:44-667:48)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:667:44-667:59)
      kind: _16 = <u32 as int::U32>::as_usize(move _17) -> [return: bb6, unwind: bb45]
  }
  preds [bb4]
  succs [bb6, bb45]

bb6
  0: StorageDead(_17)
    SourceInfo(regex-lite/src/nfa.rs:667:58-667:59)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:667:43-667:60)
      kind: _10 = <alloc::vec::Vec<nfa::State> as core::ops::IndexMut<usize>>::index_mut(move _11, move _16) -> [return: bb7, unwind: bb45]
  }
  preds [bb5]
  succs [bb7, bb45]

bb7
  0: StorageDead(_16)
    SourceInfo(regex-lite/src/nfa.rs:667:59-667:60)
  1: StorageDead(_11)
    SourceInfo(regex-lite/src/nfa.rs:667:59-667:60)
  2: PlaceMention((*_10))
    SourceInfo(regex-lite/src/nfa.rs:667:15-667:60)
  3: _18 = discriminant((*_10))
    SourceInfo(regex-lite/src/nfa.rs:667:15-667:60)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:667:9-667:60)
      kind: switchInt(move _18) -> [0: bb9, 1: bb10, 2: bb11, 3: bb12, 4: bb13, 5: bb14, 6: bb14, otherwise: bb8]
  }
  preds [bb6]
  succs [bb8, bb9, bb10, bb11, bb12, bb13, bb14, bb14]

bb8
  0: FakeRead(ForMatchedPlace(None), (*_10))
    SourceInfo(regex-lite/src/nfa.rs:667:15-667:60)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:667:15-667:60)
      kind: unreachable
  }
  preds [bb7]
  succs []

bb9
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:668:13-668:47)
      kind: falseEdge -> [real: bb15, imaginary: bb10]
  }
  preds [bb7]
  succs [bb10, bb15]

bb10
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:671:13-671:49)
      kind: falseEdge -> [real: bb16, imaginary: bb11]
  }
  preds [bb7, bb9]
  succs [bb11, bb16]

bb11
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:674:13-674:50)
      kind: falseEdge -> [real: bb17, imaginary: bb12]
  }
  preds [bb7, bb10]
  succs [bb12, bb17]

bb12
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:678:13-678:47)
      kind: falseEdge -> [real: bb21, imaginary: bb13]
  }
  preds [bb7, bb11]
  succs [bb13, bb21]

bb13
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:681:13-681:50)
      kind: falseEdge -> [real: bb22, imaginary: bb14]
  }
  preds [bb7, bb12]
  succs [bb14, bb22]

bb14
  0: _9 = const ()
    SourceInfo(regex-lite/src/nfa.rs:684:43-684:45)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:684:43-684:45)
      kind: goto -> bb23
  }
  preds [bb7, bb7, bb13]
  succs [bb23]

bb15
  0: StorageLive(_19)
    SourceInfo(regex-lite/src/nfa.rs:668:27-668:41)
  1: _19 = &mut (((*_10) as Char).0: u32)
    SourceInfo(regex-lite/src/nfa.rs:668:27-668:41)
  2: StorageLive(_20)
    SourceInfo(regex-lite/src/nfa.rs:669:27-669:29)
  3: _20 = _3
    SourceInfo(regex-lite/src/nfa.rs:669:27-669:29)
  4: (*_19) = move _20
    SourceInfo(regex-lite/src/nfa.rs:669:17-669:29)
  5: StorageDead(_20)
    SourceInfo(regex-lite/src/nfa.rs:669:28-669:29)
  6: _9 = const ()
    SourceInfo(regex-lite/src/nfa.rs:668:51-670:14)
  7: StorageDead(_19)
    SourceInfo(regex-lite/src/nfa.rs:670:13-670:14)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:670:13-670:14)
      kind: goto -> bb23
  }
  preds [bb9]
  succs [bb23]

bb16
  0: StorageLive(_21)
    SourceInfo(regex-lite/src/nfa.rs:671:29-671:43)
  1: _21 = &mut (((*_10) as Ranges).0: u32)
    SourceInfo(regex-lite/src/nfa.rs:671:29-671:43)
  2: StorageLive(_22)
    SourceInfo(regex-lite/src/nfa.rs:672:27-672:29)
  3: _22 = _3
    SourceInfo(regex-lite/src/nfa.rs:672:27-672:29)
  4: (*_21) = move _22
    SourceInfo(regex-lite/src/nfa.rs:672:17-672:29)
  5: StorageDead(_22)
    SourceInfo(regex-lite/src/nfa.rs:672:28-672:29)
  6: _9 = const ()
    SourceInfo(regex-lite/src/nfa.rs:671:53-673:14)
  7: StorageDead(_21)
    SourceInfo(regex-lite/src/nfa.rs:673:13-673:14)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:673:13-673:14)
      kind: goto -> bb23
  }
  preds [bb10]
  succs [bb23]

bb17
  0: StorageLive(_23)
    SourceInfo(regex-lite/src/nfa.rs:674:29-674:44)
  1: _23 = &mut (((*_10) as Splits).0: alloc::vec::Vec<u32>)
    SourceInfo(regex-lite/src/nfa.rs:674:29-674:44)
  2: StorageLive(_24)
    SourceInfo(regex-lite/src/nfa.rs:675:17-675:33)
  3: StorageLive(_25)
    SourceInfo(regex-lite/src/nfa.rs:675:17-675:24)
  4: _25 = &mut (*_23)
    SourceInfo(regex-lite/src/nfa.rs:675:17-675:24)
  5: StorageLive(_26)
    SourceInfo(regex-lite/src/nfa.rs:675:30-675:32)
  6: _26 = _3
    SourceInfo(regex-lite/src/nfa.rs:675:30-675:32)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:675:17-675:33)
      kind: _24 = alloc::vec::Vec::<u32>::push(move _25, move _26) -> [return: bb18, unwind: bb45]
  }
  preds [bb11]
  succs [bb18, bb45]

bb18
  0: StorageDead(_26)
    SourceInfo(regex-lite/src/nfa.rs:675:32-675:33)
  1: StorageDead(_25)
    SourceInfo(regex-lite/src/nfa.rs:675:32-675:33)
  2: StorageDead(_24)
    SourceInfo(regex-lite/src/nfa.rs:675:33-675:34)
  3: StorageLive(_27)
    SourceInfo(regex-lite/src/nfa.rs:676:37-676:57)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:676:37-676:57)
      kind: _27 = core::mem::size_of::<u32>() -> [return: bb19, unwind: bb45]
  }
  preds [bb17]
  succs [bb19, bb45]

bb19
  0: _28 = AddWithOverflow(_4, _27)
    SourceInfo(regex-lite/src/nfa.rs:676:17-676:57)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:676:17-676:57)
      kind: assert(!move (_28.1: bool), "attempt to compute `{} + {}`, which would overflow", _4, move _27) -> [success: bb20, unwind: bb45]
  }
  preds [bb18]
  succs [bb20, bb45]

bb20
  0: _4 = move (_28.0: usize)
    SourceInfo(regex-lite/src/nfa.rs:676:17-676:57)
  1: StorageDead(_27)
    SourceInfo(regex-lite/src/nfa.rs:676:56-676:57)
  2: _9 = const ()
    SourceInfo(regex-lite/src/nfa.rs:674:54-677:14)
  3: StorageDead(_23)
    SourceInfo(regex-lite/src/nfa.rs:677:13-677:14)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:677:13-677:14)
      kind: goto -> bb23
  }
  preds [bb19]
  succs [bb23]

bb21
  0: StorageLive(_29)
    SourceInfo(regex-lite/src/nfa.rs:678:27-678:41)
  1: _29 = &mut (((*_10) as Goto).0: u32)
    SourceInfo(regex-lite/src/nfa.rs:678:27-678:41)
  2: StorageLive(_30)
    SourceInfo(regex-lite/src/nfa.rs:679:27-679:29)
  3: _30 = _3
    SourceInfo(regex-lite/src/nfa.rs:679:27-679:29)
  4: (*_29) = move _30
    SourceInfo(regex-lite/src/nfa.rs:679:17-679:29)
  5: StorageDead(_30)
    SourceInfo(regex-lite/src/nfa.rs:679:28-679:29)
  6: _9 = const ()
    SourceInfo(regex-lite/src/nfa.rs:678:51-680:14)
  7: StorageDead(_29)
    SourceInfo(regex-lite/src/nfa.rs:680:13-680:14)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:680:13-680:14)
      kind: goto -> bb23
  }
  preds [bb12]
  succs [bb23]

bb22
  0: StorageLive(_31)
    SourceInfo(regex-lite/src/nfa.rs:681:30-681:44)
  1: _31 = &mut (((*_10) as Capture).0: u32)
    SourceInfo(regex-lite/src/nfa.rs:681:30-681:44)
  2: StorageLive(_32)
    SourceInfo(regex-lite/src/nfa.rs:682:27-682:29)
  3: _32 = _3
    SourceInfo(regex-lite/src/nfa.rs:682:27-682:29)
  4: (*_31) = move _32
    SourceInfo(regex-lite/src/nfa.rs:682:17-682:29)
  5: StorageDead(_32)
    SourceInfo(regex-lite/src/nfa.rs:682:28-682:29)
  6: _9 = const ()
    SourceInfo(regex-lite/src/nfa.rs:681:54-683:14)
  7: StorageDead(_31)
    SourceInfo(regex-lite/src/nfa.rs:683:13-683:14)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:683:13-683:14)
      kind: goto -> bb23
  }
  preds [bb13]
  succs [bb23]

bb23
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:685:9-685:10)
      kind: drop(_14) -> [return: bb24, unwind: bb47]
  }
  preds [bb14, bb15, bb16, bb20, bb21, bb22]
  succs [bb24, bb47]

bb24
  0: StorageDead(_14)
    SourceInfo(regex-lite/src/nfa.rs:685:9-685:10)
  1: StorageDead(_12)
    SourceInfo(regex-lite/src/nfa.rs:685:9-685:10)
  2: StorageDead(_10)
    SourceInfo(regex-lite/src/nfa.rs:685:9-685:10)
  3: StorageDead(_9)
    SourceInfo(regex-lite/src/nfa.rs:685:9-685:10)
  4: StorageLive(_33)
    SourceInfo(regex-lite/src/nfa.rs:686:9-689:10)
  5: StorageLive(_34)
    SourceInfo(regex-lite/src/nfa.rs:686:12-686:62)
  6: StorageLive(_35)
    SourceInfo(regex-lite/src/nfa.rs:686:12-686:28)
  7: _35 = _4
    SourceInfo(regex-lite/src/nfa.rs:686:12-686:28)
  8: StorageLive(_36)
    SourceInfo(regex-lite/src/nfa.rs:686:32-686:62)
  9: StorageLive(_37)
    SourceInfo(regex-lite/src/nfa.rs:686:32-686:62)
  10: StorageLive(_38)
    SourceInfo(regex-lite/src/nfa.rs:686:32-686:49)
  11: StorageLive(_39)
    SourceInfo(regex-lite/src/nfa.rs:686:32-686:49)
  12: StorageLive(_40)
    SourceInfo(regex-lite/src/nfa.rs:686:32-686:40)
  13: _40 = &((*_1).1: core::cell::RefCell<nfa::NFA>)
    SourceInfo(regex-lite/src/nfa.rs:686:32-686:40)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:686:32-686:49)
      kind: _39 = core::cell::RefCell::<nfa::NFA>::borrow(move _40) -> [return: bb25, unwind: bb47]
  }
  preds [bb23]
  succs [bb25, bb47]

bb25
  0: _38 = &_39
    SourceInfo(regex-lite/src/nfa.rs:686:32-686:49)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:686:32-686:62)
      kind: _37 = <core::cell::Ref<'_, nfa::NFA> as core::ops::Deref>::deref(move _38) -> [return: bb26, unwind: bb44]
  }
  preds [bb24]
  succs [bb26, bb44]

bb26
  0: StorageDead(_40)
    SourceInfo(regex-lite/src/nfa.rs:686:48-686:49)
  1: StorageDead(_38)
    SourceInfo(regex-lite/src/nfa.rs:686:48-686:49)
  2: _36 = ((*_37).8: usize)
    SourceInfo(regex-lite/src/nfa.rs:686:32-686:62)
  3: _34 = Ne(move _35, move _36)
    SourceInfo(regex-lite/src/nfa.rs:686:12-686:62)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:686:12-686:62)
      kind: switchInt(move _34) -> [0: bb39, otherwise: bb27]
  }
  preds [bb25]
  succs [bb27, bb39]

bb27
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:686:61-686:62)
      kind: drop(_39) -> [return: bb28, unwind: bb47]
  }
  preds [bb26]
  succs [bb28, bb47]

bb28
  0: StorageDead(_39)
    SourceInfo(regex-lite/src/nfa.rs:686:61-686:62)
  1: StorageDead(_37)
    SourceInfo(regex-lite/src/nfa.rs:686:61-686:62)
  2: StorageDead(_36)
    SourceInfo(regex-lite/src/nfa.rs:686:61-686:62)
  3: StorageDead(_35)
    SourceInfo(regex-lite/src/nfa.rs:686:61-686:62)
  4: StorageLive(_41)
    SourceInfo(regex-lite/src/nfa.rs:687:50-687:66)
  5: _41 = _4
    SourceInfo(regex-lite/src/nfa.rs:687:50-687:66)
  6: StorageLive(_42)
    SourceInfo(regex-lite/src/nfa.rs:687:13-687:47)
  7: StorageLive(_43)
    SourceInfo(regex-lite/src/nfa.rs:687:13-687:34)
  8: StorageLive(_44)
    SourceInfo(regex-lite/src/nfa.rs:687:13-687:34)
  9: StorageLive(_45)
    SourceInfo(regex-lite/src/nfa.rs:687:13-687:21)
  10: _45 = &((*_1).1: core::cell::RefCell<nfa::NFA>)
    SourceInfo(regex-lite/src/nfa.rs:687:13-687:21)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:687:13-687:34)
      kind: _44 = core::cell::RefCell::<nfa::NFA>::borrow_mut(move _45) -> [return: bb29, unwind: bb47]
  }
  preds [bb27]
  succs [bb29, bb47]

bb29
  0: _43 = &mut _44
    SourceInfo(regex-lite/src/nfa.rs:687:13-687:34)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:687:13-687:47)
      kind: _42 = <core::cell::RefMut<'_, nfa::NFA> as core::ops::DerefMut>::deref_mut(move _43) -> [return: bb30, unwind: bb43]
  }
  preds [bb28]
  succs [bb30, bb43]

bb30
  0: StorageDead(_45)
    SourceInfo(regex-lite/src/nfa.rs:687:33-687:34)
  1: StorageDead(_43)
    SourceInfo(regex-lite/src/nfa.rs:687:33-687:34)
  2: ((*_42).8: usize) = move _41
    SourceInfo(regex-lite/src/nfa.rs:687:13-687:66)
  3: StorageDead(_41)
    SourceInfo(regex-lite/src/nfa.rs:687:65-687:66)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:687:66-687:67)
      kind: drop(_44) -> [return: bb31, unwind: bb47]
  }
  preds [bb29]
  succs [bb31, bb47]

bb31
  0: StorageDead(_44)
    SourceInfo(regex-lite/src/nfa.rs:687:66-687:67)
  1: StorageDead(_42)
    SourceInfo(regex-lite/src/nfa.rs:687:66-687:67)
  2: StorageLive(_46)
    SourceInfo(regex-lite/src/nfa.rs:688:13-688:37)
  3: StorageLive(_47)
    SourceInfo(regex-lite/src/nfa.rs:688:13-688:37)
  4: StorageLive(_48)
    SourceInfo(regex-lite/src/nfa.rs:688:13-688:36)
  5: StorageLive(_49)
    SourceInfo(regex-lite/src/nfa.rs:688:13-688:17)
  6: _49 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:688:13-688:17)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:688:13-688:36)
      kind: _48 = nfa::Compiler::check_size_limit(move _49) -> [return: bb32, unwind: bb47]
  }
  preds [bb30]
  succs [bb32, bb47]

bb32
  0: StorageDead(_49)
    SourceInfo(regex-lite/src/nfa.rs:688:35-688:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:688:13-688:37)
      kind: _47 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _48) -> [return: bb33, unwind: bb47]
  }
  preds [bb31]
  succs [bb33, bb47]

bb33
  0: StorageDead(_48)
    SourceInfo(regex-lite/src/nfa.rs:688:36-688:37)
  1: PlaceMention(_47)
    SourceInfo(regex-lite/src/nfa.rs:688:13-688:37)
  2: _50 = discriminant(_47)
    SourceInfo(regex-lite/src/nfa.rs:688:13-688:37)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:688:13-688:37)
      kind: switchInt(move _50) -> [0: bb36, 1: bb35, otherwise: bb34]
  }
  preds [bb32]
  succs [bb34, bb35, bb36]

bb34
  0: FakeRead(ForMatchedPlace(None), _47)
    SourceInfo(regex-lite/src/nfa.rs:688:13-688:37)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:688:13-688:37)
      kind: unreachable
  }
  preds [bb33]
  succs []

bb35
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:688:36-688:37)
      kind: falseEdge -> [real: bb37, imaginary: bb36]
  }
  preds [bb33]
  succs [bb36, bb37]

bb36
  0: StorageLive(_54)
    SourceInfo(regex-lite/src/nfa.rs:688:13-688:37)
  1: _54 = ((_47 as Continue).0: ())
    SourceInfo(regex-lite/src/nfa.rs:688:13-688:37)
  2: _46 = _54
    SourceInfo(regex-lite/src/nfa.rs:688:13-688:37)
  3: StorageDead(_54)
    SourceInfo(regex-lite/src/nfa.rs:688:36-688:37)
  4: StorageDead(_47)
    SourceInfo(regex-lite/src/nfa.rs:688:37-688:38)
  5: StorageDead(_46)
    SourceInfo(regex-lite/src/nfa.rs:688:37-688:38)
  6: _33 = const ()
    SourceInfo(regex-lite/src/nfa.rs:686:63-689:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:686:9-689:10)
      kind: goto -> bb41
  }
  preds [bb33, bb35]
  succs [bb41]

bb37
  0: StorageLive(_51)
    SourceInfo(regex-lite/src/nfa.rs:688:36-688:37)
  1: _51 = move ((_47 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:688:36-688:37)
  2: StorageLive(_53)
    SourceInfo(regex-lite/src/nfa.rs:688:36-688:37)
  3: _53 = move _51
    SourceInfo(regex-lite/src/nfa.rs:688:36-688:37)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:688:13-688:37)
      kind: _0 = <core::result::Result<(), error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _53) -> [return: bb38, unwind: bb47]
  }
  preds [bb35]
  succs [bb38, bb47]

bb38
  0: StorageDead(_53)
    SourceInfo(regex-lite/src/nfa.rs:688:36-688:37)
  1: StorageDead(_51)
    SourceInfo(regex-lite/src/nfa.rs:688:36-688:37)
  2: StorageDead(_47)
    SourceInfo(regex-lite/src/nfa.rs:688:37-688:38)
  3: StorageDead(_46)
    SourceInfo(regex-lite/src/nfa.rs:688:37-688:38)
  4: StorageDead(_34)
    SourceInfo(regex-lite/src/nfa.rs:689:9-689:10)
  5: StorageDead(_33)
    SourceInfo(regex-lite/src/nfa.rs:689:9-689:10)
  6: StorageDead(_4)
    SourceInfo(regex-lite/src/nfa.rs:691:5-691:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:691:6-691:6)
      kind: goto -> bb42
  }
  preds [bb37]
  succs [bb42]

bb39
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:686:61-686:62)
      kind: drop(_39) -> [return: bb40, unwind: bb47]
  }
  preds [bb26]
  succs [bb40, bb47]

bb40
  0: StorageDead(_39)
    SourceInfo(regex-lite/src/nfa.rs:686:61-686:62)
  1: StorageDead(_37)
    SourceInfo(regex-lite/src/nfa.rs:686:61-686:62)
  2: StorageDead(_36)
    SourceInfo(regex-lite/src/nfa.rs:686:61-686:62)
  3: StorageDead(_35)
    SourceInfo(regex-lite/src/nfa.rs:686:61-686:62)
  4: _33 = const ()
    SourceInfo(regex-lite/src/nfa.rs:689:10-689:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:686:9-689:10)
      kind: goto -> bb41
  }
  preds [bb39]
  succs [bb41]

bb41
  0: StorageDead(_34)
    SourceInfo(regex-lite/src/nfa.rs:689:9-689:10)
  1: StorageDead(_33)
    SourceInfo(regex-lite/src/nfa.rs:689:9-689:10)
  2: StorageLive(_55)
    SourceInfo(regex-lite/src/nfa.rs:690:12-690:14)
  3: _55 = ()
    SourceInfo(regex-lite/src/nfa.rs:690:12-690:14)
  4: _0 = core::result::Result::<(), error::Error>::Ok(move _55)
    SourceInfo(regex-lite/src/nfa.rs:690:9-690:15)
  5: StorageDead(_55)
    SourceInfo(regex-lite/src/nfa.rs:690:14-690:15)
  6: StorageDead(_4)
    SourceInfo(regex-lite/src/nfa.rs:691:5-691:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:691:6-691:6)
      kind: goto -> bb42
  }
  preds [bb36, bb40]
  succs [bb42]

bb42
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:691:6-691:6)
      kind: return
  }
  preds [bb38, bb41]
  succs []

bb43
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:687:66-687:67)
      kind: drop(_44) -> [return: bb47, unwind terminate(cleanup)]
  }
  preds [bb29]
  succs [bb47]

bb44
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:686:61-686:62)
      kind: drop(_39) -> [return: bb47, unwind terminate(cleanup)]
  }
  preds [bb25]
  succs [bb47]

bb45
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:685:9-685:10)
      kind: drop(_14) -> [return: bb47, unwind terminate(cleanup)]
  }
  preds [bb4, bb5, bb6, bb17, bb18, bb19]
  succs [bb47]

bb46
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:666:66-666:67)
      kind: drop(_7) -> [return: bb47, unwind terminate(cleanup)]
  }
  preds [bb1]
  succs [bb47]

bb47
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:665:5-691:6)
      kind: resume
  }
  preds [bb0, bb2, bb3, bb23, bb24, bb27, bb28, bb30, bb31, bb32, bb37, bb39, bb43, bb44, bb45, bb46]
  succs []

