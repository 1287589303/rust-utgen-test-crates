{
  "regex-lite/src/hir/mod.rs:340:19:340:34": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "subs.len() == 1",
          "lhs": "subs.len()",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:338:12:338:27": [
    {
      "Bool": {
        "Other": "subs.is_empty()"
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:350:24:350:26": [
    {
      "For": {
        "iter_var": "sub",
        "iter_range": "it"
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:353:20:354:56": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "static_explicit_captures_len\n                    != sub.static_explicit_captures_len",
          "lhs": "static_explicit_captures_len",
          "rhs": "sub.static_explicit_captures_len",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:352:52:352:70": [
    {
      "Bool": {
        "Other": "sub.is_match_empty"
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:351:58:351:79": [
    {
      "Bool": {
        "Other": "sub.is_start_anchored"
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:351:37:351:54": [
    {
      "Bool": {
        "Other": "is_start_anchored"
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:352:34:352:48": [
    {
      "Bool": {
        "Other": "is_match_empty"
      }
    }
  ]
}