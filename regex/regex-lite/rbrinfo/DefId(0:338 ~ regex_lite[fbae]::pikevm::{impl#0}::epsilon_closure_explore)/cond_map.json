{
  "regex-lite/src/pikevm.rs:388:25:388:52": [
    {
      "Bool": {
        "Other": "look.is_match(haystack, at)"
      }
    }
  ],
  "regex-lite/src/pikevm.rs:412:35:412:52": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "targets.len() - 1",
          "lhs": "targets.len()",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/pikevm.rs:423:24:423:58": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "slot.as_usize() < curr_slots.len()",
          "lhs": "slot.as_usize()",
          "rhs": "curr_slots.len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-lite/src/pikevm.rs:394:33:394:47": [
    {
      "Match": {
        "match_source": "regex-lite/src/pikevm.rs:394:33:394:47",
        "match_str": "targets.get(0)",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-lite/src/pikevm.rs:396:25:396:35": {
            "pat": {
              "pat_str": "Some(&sid)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/pikevm.rs:396:39:396:42"
          },
          "regex-lite/src/pikevm.rs:395:25:395:29": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/pikevm.rs:395:33:395:39"
          }
        }
      }
    }
  ],
  "regex-lite/src/pikevm.rs:407:33:407:47": [
    {
      "Match": {
        "match_source": "regex-lite/src/pikevm.rs:407:33:407:47",
        "match_str": "targets.last()",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-lite/src/pikevm.rs:408:25:408:29": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/pikevm.rs:408:33:408:39"
          },
          "regex-lite/src/pikevm.rs:409:25:409:35": {
            "pat": {
              "pat_str": "Some(&sid)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/pikevm.rs:409:39:409:42"
          }
        }
      }
    }
  ],
  "regex-lite/src/pikevm.rs:373:17:373:37": [
    {
      "Bool": {
        "Other": "next.set.insert(sid)"
      }
    }
  ],
  "regex-lite/src/pikevm.rs:376:19:376:39": [
    {
      "Match": {
        "match_source": "regex-lite/src/pikevm.rs:376:19:376:39",
        "match_str": "*self.nfa.state(sid)",
        "match_kind": {
          "Enum": [
            "Char",
            "Ranges",
            "Splits",
            "Goto",
            "Capture",
            "Fail",
            "Match"
          ]
        },
        "arms": {
          "regex-lite/src/pikevm.rs:380:19:380:39": {
            "pat": {
              "pat_str": "State::Ranges { .. }",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/pikevm.rs:380:43:383:18"
          },
          "regex-lite/src/pikevm.rs:387:17:387:57": {
            "pat": {
              "pat_str": "State::Goto { target, look: Some(look) }",
              "kind": {
                "Enum": 3
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/pikevm.rs:387:61:392:18"
          },
          "regex-lite/src/pikevm.rs:393:17:393:62": {
            "pat": {
              "pat_str": "State::Splits { ref targets, reverse: false }",
              "kind": {
                "Enum": 2
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/pikevm.rs:393:66:405:18"
          },
          "regex-lite/src/pikevm.rs:406:17:406:61": {
            "pat": {
              "pat_str": "State::Splits { ref targets, reverse: true }",
              "kind": {
                "Enum": 2
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/pikevm.rs:406:65:417:18"
          },
          "regex-lite/src/pikevm.rs:378:19:378:38": {
            "pat": {
              "pat_str": "State::Match { .. }",
              "kind": {
                "Enum": 6
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/pikevm.rs:380:43:383:18"
          },
          "regex-lite/src/pikevm.rs:379:19:379:37": {
            "pat": {
              "pat_str": "State::Char { .. }",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/pikevm.rs:380:43:383:18"
          },
          "regex-lite/src/pikevm.rs:377:17:377:28": {
            "pat": {
              "pat_str": "State::Fail",
              "kind": {
                "Enum": 5
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/pikevm.rs:380:43:383:18"
          },
          "regex-lite/src/pikevm.rs:384:17:384:51": {
            "pat": {
              "pat_str": "State::Goto { target, look: None }",
              "kind": {
                "Enum": 3
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/pikevm.rs:384:55:386:18"
          },
          "regex-lite/src/pikevm.rs:418:17:418:48": {
            "pat": {
              "pat_str": "State::Capture { target, slot }",
              "kind": {
                "Enum": 4
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/pikevm.rs:418:52:433:18"
          }
        }
      }
    }
  ]
}