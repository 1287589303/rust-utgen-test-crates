bb0
  0: StorageLive(_3)
    SourceInfo(regex-lite/src/nfa.rs:90:9-90:50)
  1: StorageLive(_4)
    SourceInfo(regex-lite/src/nfa.rs:90:9-90:41)
  2: StorageLive(_5)
    SourceInfo(regex-lite/src/nfa.rs:90:9-90:31)
  3: _5 = &((*_1).6: std::collections::HashMap<alloc::sync::Arc<str>, u32>)
    SourceInfo(regex-lite/src/nfa.rs:90:9-90:31)
  4: StorageLive(_6)
    SourceInfo(regex-lite/src/nfa.rs:90:36-90:40)
  5: _6 = &(*_2)
    SourceInfo(regex-lite/src/nfa.rs:90:36-90:40)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:90:9-90:41)
      kind: _4 = std::collections::HashMap::<alloc::sync::Arc<str>, u32>::get::<str>(move _5, move _6) -> [return: bb1, unwind: bb4]
  }
  preds []
  succs [bb1, bb4]

bb1
  0: StorageDead(_6)
    SourceInfo(regex-lite/src/nfa.rs:90:40-90:41)
  1: StorageDead(_5)
    SourceInfo(regex-lite/src/nfa.rs:90:40-90:41)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:90:9-90:50)
      kind: _3 = core::option::Option::<&u32>::cloned(move _4) -> [return: bb2, unwind: bb4]
  }
  preds [bb0]
  succs [bb2, bb4]

bb2
  0: StorageDead(_4)
    SourceInfo(regex-lite/src/nfa.rs:90:49-90:50)
  1: StorageLive(_7)
    SourceInfo(regex-lite/src/nfa.rs:90:55-90:71)
  2: _7 = {closure@regex-lite/src/nfa.rs:90:55: 90:58}
    SourceInfo(regex-lite/src/nfa.rs:90:55-90:71)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:90:9-90:72)
      kind: _0 = core::option::Option::<u32>::map::<usize, {closure@regex-lite/src/nfa.rs:90:55: 90:58}>(move _3, move _7) -> [return: bb3, unwind: bb4]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: StorageDead(_7)
    SourceInfo(regex-lite/src/nfa.rs:90:71-90:72)
  1: StorageDead(_3)
    SourceInfo(regex-lite/src/nfa.rs:90:71-90:72)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:91:6-91:6)
      kind: return
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:89:5-91:6)
      kind: resume
  }
  preds [bb0, bb1, bb2]
  succs []

