bb0
  0: StorageLive(_3)
    SourceInfo(regex-lite/src/nfa.rs:338:13-338:15)
  1: StorageLive(_4)
    SourceInfo(regex-lite/src/nfa.rs:338:18-349:11)
  2: StorageLive(_5)
    SourceInfo(regex-lite/src/nfa.rs:338:18-349:10)
  3: StorageLive(_6)
    SourceInfo(regex-lite/src/nfa.rs:338:21-338:44)
  4: StorageLive(_7)
    SourceInfo(regex-lite/src/nfa.rs:338:21-338:33)
  5: _7 = &((*_2).0: alloc::vec::Vec<hir::ClassRange>)
    SourceInfo(regex-lite/src/nfa.rs:338:21-338:33)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:338:21-338:44)
      kind: _6 = alloc::vec::Vec::<hir::ClassRange>::is_empty(move _7) -> [return: bb1, unwind: bb23]
  }
  preds []
  succs [bb1, bb23]

bb1
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:338:21-338:44)
      kind: switchInt(move _6) -> [0: bb4, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb4]

bb2
  0: StorageDead(_7)
    SourceInfo(regex-lite/src/nfa.rs:338:43-338:44)
  1: StorageLive(_8)
    SourceInfo(regex-lite/src/nfa.rs:344:13-344:17)
  2: _8 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:344:13-344:17)
  3: StorageLive(_9)
    SourceInfo(regex-lite/src/nfa.rs:344:22-344:33)
  4: _9 = nfa::State::Fail
    SourceInfo(regex-lite/src/nfa.rs:344:22-344:33)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:344:13-344:34)
      kind: _5 = nfa::Compiler::add(move _8, move _9) -> [return: bb3, unwind: bb22]
  }
  preds [bb1]
  succs [bb3, bb22]

bb3
  0: StorageDead(_9)
    SourceInfo(regex-lite/src/nfa.rs:344:33-344:34)
  1: StorageDead(_8)
    SourceInfo(regex-lite/src/nfa.rs:344:33-344:34)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:338:18-349:10)
      kind: goto -> bb12
  }
  preds [bb2]
  succs [bb12]

bb4
  0: StorageDead(_7)
    SourceInfo(regex-lite/src/nfa.rs:338:43-338:44)
  1: StorageLive(_10)
    SourceInfo(regex-lite/src/nfa.rs:346:17-346:23)
  2: StorageLive(_11)
    SourceInfo(regex-lite/src/nfa.rs:347:17-347:62)
  3: StorageLive(_12)
    SourceInfo(regex-lite/src/nfa.rs:347:17-347:36)
  4: StorageLive(_13)
    SourceInfo(regex-lite/src/nfa.rs:347:17-347:29)
  5: StorageLive(_14)
    SourceInfo(regex-lite/src/nfa.rs:347:17-347:36)
  6: StorageLive(_15)
    SourceInfo(regex-lite/src/nfa.rs:347:17-347:29)
  7: _15 = &((*_2).0: alloc::vec::Vec<hir::ClassRange>)
    SourceInfo(regex-lite/src/nfa.rs:347:17-347:29)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:347:17-347:36)
      kind: _14 = <alloc::vec::Vec<hir::ClassRange> as core::ops::Deref>::deref(move _15) -> [return: bb5, unwind: bb23]
  }
  preds [bb1]
  succs [bb5, bb23]

bb5
  0: _13 = &(*_14)
    SourceInfo(regex-lite/src/nfa.rs:347:17-347:29)
  1: StorageDead(_15)
    SourceInfo(regex-lite/src/nfa.rs:347:28-347:29)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:347:17-347:36)
      kind: _12 = core::slice::<impl [hir::ClassRange]>::iter(move _13) -> [return: bb6, unwind: bb23]
  }
  preds [bb4]
  succs [bb6, bb23]

bb6
  0: StorageDead(_13)
    SourceInfo(regex-lite/src/nfa.rs:347:35-347:36)
  1: StorageLive(_16)
    SourceInfo(regex-lite/src/nfa.rs:347:41-347:61)
  2: _16 = {closure@regex-lite/src/nfa.rs:347:41: 347:44}
    SourceInfo(regex-lite/src/nfa.rs:347:41-347:61)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:347:17-347:62)
      kind: _11 = <core::slice::Iter<'_, hir::ClassRange> as core::iter::Iterator>::map::<(char, char), {closure@regex-lite/src/nfa.rs:347:41: 347:44}>(move _12, move _16) -> [return: bb7, unwind: bb23]
  }
  preds [bb5]
  succs [bb7, bb23]

bb7
  0: StorageDead(_16)
    SourceInfo(regex-lite/src/nfa.rs:347:61-347:62)
  1: StorageDead(_12)
    SourceInfo(regex-lite/src/nfa.rs:347:61-347:62)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:347:17-347:72)
      kind: _10 = <core::iter::Map<core::slice::Iter<'_, hir::ClassRange>, {closure@regex-lite/src/nfa.rs:347:41: 347:44}> as core::iter::Iterator>::collect::<alloc::vec::Vec<(char, char)>>(move _11) -> [return: bb8, unwind: bb23]
  }
  preds [bb6]
  succs [bb8, bb23]

bb8
  0: StorageDead(_11)
    SourceInfo(regex-lite/src/nfa.rs:347:71-347:72)
  1: FakeRead(ForLet(None), _10)
    SourceInfo(regex-lite/src/nfa.rs:346:17-346:23)
  2: StorageDead(_14)
    SourceInfo(regex-lite/src/nfa.rs:347:72-347:73)
  3: StorageLive(_17)
    SourceInfo(regex-lite/src/nfa.rs:348:13-348:17)
  4: _17 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:348:13-348:17)
  5: StorageLive(_18)
    SourceInfo(regex-lite/src/nfa.rs:348:22-348:57)
  6: StorageLive(_19)
    SourceInfo(regex-lite/src/nfa.rs:348:49-348:55)
  7: _19 = move _10
    SourceInfo(regex-lite/src/nfa.rs:348:49-348:55)
  8: _18 = nfa::State::Ranges { target: const 0_u32, ranges: move _19 }
    SourceInfo(regex-lite/src/nfa.rs:348:22-348:57)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:348:56-348:57)
      kind: drop(_19) -> [return: bb9, unwind: bb20]
  }
  preds [bb7]
  succs [bb9, bb20]

bb9
  0: StorageDead(_19)
    SourceInfo(regex-lite/src/nfa.rs:348:56-348:57)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:348:13-348:58)
      kind: _5 = nfa::Compiler::add(move _17, move _18) -> [return: bb10, unwind: bb20]
  }
  preds [bb8]
  succs [bb10, bb20]

bb10
  0: StorageDead(_18)
    SourceInfo(regex-lite/src/nfa.rs:348:57-348:58)
  1: StorageDead(_17)
    SourceInfo(regex-lite/src/nfa.rs:348:57-348:58)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:349:9-349:10)
      kind: drop(_10) -> [return: bb11, unwind: bb23]
  }
  preds [bb9]
  succs [bb11, bb23]

bb11
  0: StorageDead(_10)
    SourceInfo(regex-lite/src/nfa.rs:349:9-349:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:338:18-349:10)
      kind: goto -> bb12
  }
  preds [bb10]
  succs [bb12]

bb12
  0: StorageDead(_6)
    SourceInfo(regex-lite/src/nfa.rs:349:9-349:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:338:18-349:11)
      kind: _4 = <core::result::Result<u32, error::Error> as core::ops::Try>::branch(move _5) -> [return: bb13, unwind: bb23]
  }
  preds [bb3, bb11]
  succs [bb13, bb23]

bb13
  0: StorageDead(_5)
    SourceInfo(regex-lite/src/nfa.rs:349:10-349:11)
  1: PlaceMention(_4)
    SourceInfo(regex-lite/src/nfa.rs:338:18-349:11)
  2: _20 = discriminant(_4)
    SourceInfo(regex-lite/src/nfa.rs:338:18-349:11)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:338:18-349:11)
      kind: switchInt(move _20) -> [0: bb16, 1: bb15, otherwise: bb14]
  }
  preds [bb12]
  succs [bb14, bb15, bb16]

bb14
  0: FakeRead(ForMatchedPlace(None), _4)
    SourceInfo(regex-lite/src/nfa.rs:338:18-349:11)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:338:18-349:11)
      kind: unreachable
  }
  preds [bb13]
  succs []

bb15
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:349:10-349:11)
      kind: falseEdge -> [real: bb17, imaginary: bb16]
  }
  preds [bb13]
  succs [bb16, bb17]

bb16
  0: StorageLive(_24)
    SourceInfo(regex-lite/src/nfa.rs:338:18-349:11)
  1: _24 = ((_4 as Continue).0: u32)
    SourceInfo(regex-lite/src/nfa.rs:338:18-349:11)
  2: _3 = _24
    SourceInfo(regex-lite/src/nfa.rs:338:18-349:11)
  3: StorageDead(_24)
    SourceInfo(regex-lite/src/nfa.rs:349:10-349:11)
  4: FakeRead(ForLet(None), _3)
    SourceInfo(regex-lite/src/nfa.rs:338:13-338:15)
  5: StorageDead(_4)
    SourceInfo(regex-lite/src/nfa.rs:349:11-349:12)
  6: StorageLive(_25)
    SourceInfo(regex-lite/src/nfa.rs:350:12-350:46)
  7: StorageLive(_26)
    SourceInfo(regex-lite/src/nfa.rs:350:33-350:35)
  8: _26 = _3
    SourceInfo(regex-lite/src/nfa.rs:350:33-350:35)
  9: StorageLive(_27)
    SourceInfo(regex-lite/src/nfa.rs:350:42-350:44)
  10: _27 = _3
    SourceInfo(regex-lite/src/nfa.rs:350:42-350:44)
  11: _25 = nfa::ThompsonRef { start: move _26, end: move _27 }
    SourceInfo(regex-lite/src/nfa.rs:350:12-350:46)
  12: StorageDead(_27)
    SourceInfo(regex-lite/src/nfa.rs:350:45-350:46)
  13: StorageDead(_26)
    SourceInfo(regex-lite/src/nfa.rs:350:45-350:46)
  14: _0 = core::result::Result::<nfa::ThompsonRef, error::Error>::Ok(move _25)
    SourceInfo(regex-lite/src/nfa.rs:350:9-350:47)
  15: StorageDead(_25)
    SourceInfo(regex-lite/src/nfa.rs:350:46-350:47)
  16: StorageDead(_3)
    SourceInfo(regex-lite/src/nfa.rs:351:5-351:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:351:6-351:6)
      kind: goto -> bb19
  }
  preds [bb13, bb15]
  succs [bb19]

bb17
  0: StorageLive(_21)
    SourceInfo(regex-lite/src/nfa.rs:349:10-349:11)
  1: _21 = move ((_4 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:349:10-349:11)
  2: StorageLive(_23)
    SourceInfo(regex-lite/src/nfa.rs:349:10-349:11)
  3: _23 = move _21
    SourceInfo(regex-lite/src/nfa.rs:349:10-349:11)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:338:18-349:11)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _23) -> [return: bb18, unwind: bb23]
  }
  preds [bb15]
  succs [bb18, bb23]

bb18
  0: StorageDead(_23)
    SourceInfo(regex-lite/src/nfa.rs:349:10-349:11)
  1: StorageDead(_21)
    SourceInfo(regex-lite/src/nfa.rs:349:10-349:11)
  2: StorageDead(_4)
    SourceInfo(regex-lite/src/nfa.rs:349:11-349:12)
  3: StorageDead(_3)
    SourceInfo(regex-lite/src/nfa.rs:351:5-351:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:351:6-351:6)
      kind: goto -> bb19
  }
  preds [bb17]
  succs [bb19]

bb19
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:351:6-351:6)
      kind: return
  }
  preds [bb16, bb18]
  succs []

bb20
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:348:57-348:58)
      kind: drop(_18) -> [return: bb21, unwind terminate(cleanup)]
  }
  preds [bb8, bb9]
  succs [bb21]

bb21
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:349:9-349:10)
      kind: drop(_10) -> [return: bb23, unwind terminate(cleanup)]
  }
  preds [bb20]
  succs [bb23]

bb22
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:344:33-344:34)
      kind: drop(_9) -> [return: bb23, unwind terminate(cleanup)]
  }
  preds [bb2]
  succs [bb23]

bb23
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:337:5-351:6)
      kind: resume
  }
  preds [bb0, bb4, bb5, bb6, bb7, bb10, bb12, bb17, bb21, bb22]
  succs []

