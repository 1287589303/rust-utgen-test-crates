bb0
  0: StorageLive(_3)
    SourceInfo(regex-lite/src/nfa.rs:282:51-282:74)
  1: StorageLive(_4)
    SourceInfo(regex-lite/src/nfa.rs:282:51-282:54)
  2: _4 = &(*_2)
    SourceInfo(regex-lite/src/nfa.rs:282:51-282:54)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:282:51-282:74)
      kind: _3 = hir::Hir::is_start_anchored(move _4) -> [return: bb1, unwind: bb48]
  }
  preds []
  succs [bb1, bb48]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-lite/src/nfa.rs:282:73-282:74)
  1: StorageLive(_5)
    SourceInfo(regex-lite/src/nfa.rs:282:9-282:48)
  2: StorageLive(_6)
    SourceInfo(regex-lite/src/nfa.rs:282:9-282:30)
  3: StorageLive(_7)
    SourceInfo(regex-lite/src/nfa.rs:282:9-282:30)
  4: StorageLive(_8)
    SourceInfo(regex-lite/src/nfa.rs:282:9-282:17)
  5: _8 = &(_1.1: core::cell::RefCell<nfa::NFA>)
    SourceInfo(regex-lite/src/nfa.rs:282:9-282:17)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:282:9-282:30)
      kind: _7 = core::cell::RefCell::<nfa::NFA>::borrow_mut(move _8) -> [return: bb2, unwind: bb48]
  }
  preds [bb0]
  succs [bb2, bb48]

bb2
  0: _6 = &mut _7
    SourceInfo(regex-lite/src/nfa.rs:282:9-282:30)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:282:9-282:48)
      kind: _5 = <core::cell::RefMut<'_, nfa::NFA> as core::ops::DerefMut>::deref_mut(move _6) -> [return: bb3, unwind: bb47]
  }
  preds [bb1]
  succs [bb3, bb47]

bb3
  0: StorageDead(_8)
    SourceInfo(regex-lite/src/nfa.rs:282:29-282:30)
  1: StorageDead(_6)
    SourceInfo(regex-lite/src/nfa.rs:282:29-282:30)
  2: ((*_5).3: bool) = move _3
    SourceInfo(regex-lite/src/nfa.rs:282:9-282:74)
  3: StorageDead(_3)
    SourceInfo(regex-lite/src/nfa.rs:282:73-282:74)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:282:74-282:75)
      kind: drop(_7) -> [return: bb4, unwind: bb48]
  }
  preds [bb2]
  succs [bb4, bb48]

bb4
  0: StorageDead(_7)
    SourceInfo(regex-lite/src/nfa.rs:282:74-282:75)
  1: StorageDead(_5)
    SourceInfo(regex-lite/src/nfa.rs:282:74-282:75)
  2: StorageLive(_9)
    SourceInfo(regex-lite/src/nfa.rs:283:48-283:68)
  3: StorageLive(_10)
    SourceInfo(regex-lite/src/nfa.rs:283:48-283:51)
  4: _10 = &(*_2)
    SourceInfo(regex-lite/src/nfa.rs:283:48-283:51)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:283:48-283:68)
      kind: _9 = hir::Hir::is_match_empty(move _10) -> [return: bb5, unwind: bb48]
  }
  preds [bb3]
  succs [bb5, bb48]

bb5
  0: StorageDead(_10)
    SourceInfo(regex-lite/src/nfa.rs:283:67-283:68)
  1: StorageLive(_11)
    SourceInfo(regex-lite/src/nfa.rs:283:9-283:45)
  2: StorageLive(_12)
    SourceInfo(regex-lite/src/nfa.rs:283:9-283:30)
  3: StorageLive(_13)
    SourceInfo(regex-lite/src/nfa.rs:283:9-283:30)
  4: StorageLive(_14)
    SourceInfo(regex-lite/src/nfa.rs:283:9-283:17)
  5: _14 = &(_1.1: core::cell::RefCell<nfa::NFA>)
    SourceInfo(regex-lite/src/nfa.rs:283:9-283:17)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:283:9-283:30)
      kind: _13 = core::cell::RefCell::<nfa::NFA>::borrow_mut(move _14) -> [return: bb6, unwind: bb48]
  }
  preds [bb4]
  succs [bb6, bb48]

bb6
  0: _12 = &mut _13
    SourceInfo(regex-lite/src/nfa.rs:283:9-283:30)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:283:9-283:45)
      kind: _11 = <core::cell::RefMut<'_, nfa::NFA> as core::ops::DerefMut>::deref_mut(move _12) -> [return: bb7, unwind: bb46]
  }
  preds [bb5]
  succs [bb7, bb46]

bb7
  0: StorageDead(_14)
    SourceInfo(regex-lite/src/nfa.rs:283:29-283:30)
  1: StorageDead(_12)
    SourceInfo(regex-lite/src/nfa.rs:283:29-283:30)
  2: ((*_11).4: bool) = move _9
    SourceInfo(regex-lite/src/nfa.rs:283:9-283:68)
  3: StorageDead(_9)
    SourceInfo(regex-lite/src/nfa.rs:283:67-283:68)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:283:68-283:69)
      kind: drop(_13) -> [return: bb8, unwind: bb48]
  }
  preds [bb6]
  succs [bb8, bb48]

bb8
  0: StorageDead(_13)
    SourceInfo(regex-lite/src/nfa.rs:283:68-283:69)
  1: StorageDead(_11)
    SourceInfo(regex-lite/src/nfa.rs:283:68-283:69)
  2: StorageLive(_15)
    SourceInfo(regex-lite/src/nfa.rs:285:13-285:47)
  3: StorageLive(_16)
    SourceInfo(regex-lite/src/nfa.rs:285:13-285:16)
  4: _16 = &(*_2)
    SourceInfo(regex-lite/src/nfa.rs:285:13-285:16)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:285:13-285:47)
      kind: _15 = hir::Hir::static_explicit_captures_len(move _16) -> [return: bb9, unwind: bb48]
  }
  preds [bb7]
  succs [bb9, bb48]

bb9
  0: StorageDead(_16)
    SourceInfo(regex-lite/src/nfa.rs:285:46-285:47)
  1: StorageLive(_17)
    SourceInfo(regex-lite/src/nfa.rs:284:9-284:59)
  2: StorageLive(_18)
    SourceInfo(regex-lite/src/nfa.rs:284:9-284:30)
  3: StorageLive(_19)
    SourceInfo(regex-lite/src/nfa.rs:284:9-284:30)
  4: StorageLive(_20)
    SourceInfo(regex-lite/src/nfa.rs:284:9-284:17)
  5: _20 = &(_1.1: core::cell::RefCell<nfa::NFA>)
    SourceInfo(regex-lite/src/nfa.rs:284:9-284:17)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:284:9-284:30)
      kind: _19 = core::cell::RefCell::<nfa::NFA>::borrow_mut(move _20) -> [return: bb10, unwind: bb48]
  }
  preds [bb8]
  succs [bb10, bb48]

bb10
  0: _18 = &mut _19
    SourceInfo(regex-lite/src/nfa.rs:284:9-284:30)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:284:9-284:59)
      kind: _17 = <core::cell::RefMut<'_, nfa::NFA> as core::ops::DerefMut>::deref_mut(move _18) -> [return: bb11, unwind: bb45]
  }
  preds [bb9]
  succs [bb11, bb45]

bb11
  0: StorageDead(_20)
    SourceInfo(regex-lite/src/nfa.rs:284:29-284:30)
  1: StorageDead(_18)
    SourceInfo(regex-lite/src/nfa.rs:284:29-284:30)
  2: ((*_17).5: core::option::Option<usize>) = move _15
    SourceInfo(regex-lite/src/nfa.rs:284:9-285:47)
  3: StorageDead(_15)
    SourceInfo(regex-lite/src/nfa.rs:285:46-285:47)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:285:47-285:48)
      kind: drop(_19) -> [return: bb12, unwind: bb48]
  }
  preds [bb10]
  succs [bb12, bb48]

bb12
  0: StorageDead(_19)
    SourceInfo(regex-lite/src/nfa.rs:285:47-285:48)
  1: StorageDead(_17)
    SourceInfo(regex-lite/src/nfa.rs:285:47-285:48)
  2: StorageLive(_21)
    SourceInfo(regex-lite/src/nfa.rs:286:13-286:21)
  3: StorageLive(_22)
    SourceInfo(regex-lite/src/nfa.rs:286:24-286:53)
  4: StorageLive(_23)
    SourceInfo(regex-lite/src/nfa.rs:286:24-286:52)
  5: StorageLive(_24)
    SourceInfo(regex-lite/src/nfa.rs:286:24-286:28)
  6: _24 = &_1
    SourceInfo(regex-lite/src/nfa.rs:286:24-286:28)
  7: StorageLive(_25)
    SourceInfo(regex-lite/src/nfa.rs:286:42-286:46)
  8: _25 = core::option::Option::<&str>::None
    SourceInfo(regex-lite/src/nfa.rs:286:42-286:46)
  9: StorageLive(_26)
    SourceInfo(regex-lite/src/nfa.rs:286:48-286:51)
  10: _26 = &(*_2)
    SourceInfo(regex-lite/src/nfa.rs:286:48-286:51)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:286:24-286:52)
      kind: _23 = nfa::Compiler::c_capture(move _24, const 0_u32, move _25, move _26) -> [return: bb13, unwind: bb48]
  }
  preds [bb11]
  succs [bb13, bb48]

bb13
  0: StorageDead(_26)
    SourceInfo(regex-lite/src/nfa.rs:286:51-286:52)
  1: StorageDead(_25)
    SourceInfo(regex-lite/src/nfa.rs:286:51-286:52)
  2: StorageDead(_24)
    SourceInfo(regex-lite/src/nfa.rs:286:51-286:52)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:286:24-286:53)
      kind: _22 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::Try>::branch(move _23) -> [return: bb14, unwind: bb48]
  }
  preds [bb12]
  succs [bb14, bb48]

bb14
  0: StorageDead(_23)
    SourceInfo(regex-lite/src/nfa.rs:286:52-286:53)
  1: PlaceMention(_22)
    SourceInfo(regex-lite/src/nfa.rs:286:24-286:53)
  2: _27 = discriminant(_22)
    SourceInfo(regex-lite/src/nfa.rs:286:24-286:53)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:286:24-286:53)
      kind: switchInt(move _27) -> [0: bb17, 1: bb16, otherwise: bb15]
  }
  preds [bb13]
  succs [bb15, bb16, bb17]

bb15
  0: FakeRead(ForMatchedPlace(None), _22)
    SourceInfo(regex-lite/src/nfa.rs:286:24-286:53)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:286:24-286:53)
      kind: unreachable
  }
  preds [bb14]
  succs []

bb16
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:286:52-286:53)
      kind: falseEdge -> [real: bb18, imaginary: bb17]
  }
  preds [bb14]
  succs [bb17, bb18]

bb17
  0: StorageLive(_31)
    SourceInfo(regex-lite/src/nfa.rs:286:24-286:53)
  1: _31 = ((_22 as Continue).0: nfa::ThompsonRef)
    SourceInfo(regex-lite/src/nfa.rs:286:24-286:53)
  2: _21 = _31
    SourceInfo(regex-lite/src/nfa.rs:286:24-286:53)
  3: StorageDead(_31)
    SourceInfo(regex-lite/src/nfa.rs:286:52-286:53)
  4: FakeRead(ForLet(None), _21)
    SourceInfo(regex-lite/src/nfa.rs:286:13-286:21)
  5: StorageDead(_22)
    SourceInfo(regex-lite/src/nfa.rs:286:53-286:54)
  6: StorageLive(_32)
    SourceInfo(regex-lite/src/nfa.rs:287:13-287:16)
  7: StorageLive(_33)
    SourceInfo(regex-lite/src/nfa.rs:287:19-287:42)
  8: StorageLive(_34)
    SourceInfo(regex-lite/src/nfa.rs:287:19-287:41)
  9: StorageLive(_35)
    SourceInfo(regex-lite/src/nfa.rs:287:19-287:23)
  10: _35 = &_1
    SourceInfo(regex-lite/src/nfa.rs:287:19-287:23)
  11: StorageLive(_36)
    SourceInfo(regex-lite/src/nfa.rs:287:28-287:40)
  12: _36 = nfa::State::Match
    SourceInfo(regex-lite/src/nfa.rs:287:28-287:40)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:287:19-287:41)
      kind: _34 = nfa::Compiler::add(move _35, move _36) -> [return: bb20, unwind: bb44]
  }
  preds [bb14, bb16]
  succs [bb20, bb44]

bb18
  0: StorageLive(_28)
    SourceInfo(regex-lite/src/nfa.rs:286:52-286:53)
  1: _28 = move ((_22 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:286:52-286:53)
  2: StorageLive(_30)
    SourceInfo(regex-lite/src/nfa.rs:286:52-286:53)
  3: _30 = move _28
    SourceInfo(regex-lite/src/nfa.rs:286:52-286:53)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:286:24-286:53)
      kind: _0 = <core::result::Result<nfa::NFA, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _30) -> [return: bb19, unwind: bb48]
  }
  preds [bb16]
  succs [bb19, bb48]

bb19
  0: StorageDead(_30)
    SourceInfo(regex-lite/src/nfa.rs:286:52-286:53)
  1: StorageDead(_28)
    SourceInfo(regex-lite/src/nfa.rs:286:52-286:53)
  2: StorageDead(_22)
    SourceInfo(regex-lite/src/nfa.rs:286:53-286:54)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb40
  }
  preds [bb18]
  succs [bb40]

bb20
  0: StorageDead(_36)
    SourceInfo(regex-lite/src/nfa.rs:287:40-287:41)
  1: StorageDead(_35)
    SourceInfo(regex-lite/src/nfa.rs:287:40-287:41)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:287:19-287:42)
      kind: _33 = <core::result::Result<u32, error::Error> as core::ops::Try>::branch(move _34) -> [return: bb21, unwind: bb48]
  }
  preds [bb17]
  succs [bb21, bb48]

bb21
  0: StorageDead(_34)
    SourceInfo(regex-lite/src/nfa.rs:287:41-287:42)
  1: PlaceMention(_33)
    SourceInfo(regex-lite/src/nfa.rs:287:19-287:42)
  2: _37 = discriminant(_33)
    SourceInfo(regex-lite/src/nfa.rs:287:19-287:42)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:287:19-287:42)
      kind: switchInt(move _37) -> [0: bb24, 1: bb23, otherwise: bb22]
  }
  preds [bb20]
  succs [bb22, bb23, bb24]

bb22
  0: FakeRead(ForMatchedPlace(None), _33)
    SourceInfo(regex-lite/src/nfa.rs:287:19-287:42)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:287:19-287:42)
      kind: unreachable
  }
  preds [bb21]
  succs []

bb23
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:287:41-287:42)
      kind: falseEdge -> [real: bb25, imaginary: bb24]
  }
  preds [bb21]
  succs [bb24, bb25]

bb24
  0: StorageLive(_41)
    SourceInfo(regex-lite/src/nfa.rs:287:19-287:42)
  1: _41 = ((_33 as Continue).0: u32)
    SourceInfo(regex-lite/src/nfa.rs:287:19-287:42)
  2: _32 = _41
    SourceInfo(regex-lite/src/nfa.rs:287:19-287:42)
  3: StorageDead(_41)
    SourceInfo(regex-lite/src/nfa.rs:287:41-287:42)
  4: FakeRead(ForLet(None), _32)
    SourceInfo(regex-lite/src/nfa.rs:287:13-287:16)
  5: StorageDead(_33)
    SourceInfo(regex-lite/src/nfa.rs:287:42-287:43)
  6: StorageLive(_42)
    SourceInfo(regex-lite/src/nfa.rs:288:9-288:39)
  7: StorageLive(_43)
    SourceInfo(regex-lite/src/nfa.rs:288:9-288:39)
  8: StorageLive(_44)
    SourceInfo(regex-lite/src/nfa.rs:288:9-288:38)
  9: StorageLive(_45)
    SourceInfo(regex-lite/src/nfa.rs:288:9-288:13)
  10: _45 = &_1
    SourceInfo(regex-lite/src/nfa.rs:288:9-288:13)
  11: StorageLive(_46)
    SourceInfo(regex-lite/src/nfa.rs:288:20-288:32)
  12: _46 = (_21.1: u32)
    SourceInfo(regex-lite/src/nfa.rs:288:20-288:32)
  13: StorageLive(_47)
    SourceInfo(regex-lite/src/nfa.rs:288:34-288:37)
  14: _47 = _32
    SourceInfo(regex-lite/src/nfa.rs:288:34-288:37)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:288:9-288:38)
      kind: _44 = nfa::Compiler::patch(move _45, move _46, move _47) -> [return: bb27, unwind: bb48]
  }
  preds [bb21, bb23]
  succs [bb27, bb48]

bb25
  0: StorageLive(_38)
    SourceInfo(regex-lite/src/nfa.rs:287:41-287:42)
  1: _38 = move ((_33 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:287:41-287:42)
  2: StorageLive(_40)
    SourceInfo(regex-lite/src/nfa.rs:287:41-287:42)
  3: _40 = move _38
    SourceInfo(regex-lite/src/nfa.rs:287:41-287:42)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:287:19-287:42)
      kind: _0 = <core::result::Result<nfa::NFA, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _40) -> [return: bb26, unwind: bb48]
  }
  preds [bb23]
  succs [bb26, bb48]

bb26
  0: StorageDead(_40)
    SourceInfo(regex-lite/src/nfa.rs:287:41-287:42)
  1: StorageDead(_38)
    SourceInfo(regex-lite/src/nfa.rs:287:41-287:42)
  2: StorageDead(_33)
    SourceInfo(regex-lite/src/nfa.rs:287:42-287:43)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb39
  }
  preds [bb25]
  succs [bb39]

bb27
  0: StorageDead(_47)
    SourceInfo(regex-lite/src/nfa.rs:288:37-288:38)
  1: StorageDead(_46)
    SourceInfo(regex-lite/src/nfa.rs:288:37-288:38)
  2: StorageDead(_45)
    SourceInfo(regex-lite/src/nfa.rs:288:37-288:38)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:288:9-288:39)
      kind: _43 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _44) -> [return: bb28, unwind: bb48]
  }
  preds [bb24]
  succs [bb28, bb48]

bb28
  0: StorageDead(_44)
    SourceInfo(regex-lite/src/nfa.rs:288:38-288:39)
  1: PlaceMention(_43)
    SourceInfo(regex-lite/src/nfa.rs:288:9-288:39)
  2: _48 = discriminant(_43)
    SourceInfo(regex-lite/src/nfa.rs:288:9-288:39)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:288:9-288:39)
      kind: switchInt(move _48) -> [0: bb31, 1: bb30, otherwise: bb29]
  }
  preds [bb27]
  succs [bb29, bb30, bb31]

bb29
  0: FakeRead(ForMatchedPlace(None), _43)
    SourceInfo(regex-lite/src/nfa.rs:288:9-288:39)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:288:9-288:39)
      kind: unreachable
  }
  preds [bb28]
  succs []

bb30
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:288:38-288:39)
      kind: falseEdge -> [real: bb32, imaginary: bb31]
  }
  preds [bb28]
  succs [bb31, bb32]

bb31
  0: StorageLive(_52)
    SourceInfo(regex-lite/src/nfa.rs:288:9-288:39)
  1: _52 = ((_43 as Continue).0: ())
    SourceInfo(regex-lite/src/nfa.rs:288:9-288:39)
  2: _42 = _52
    SourceInfo(regex-lite/src/nfa.rs:288:9-288:39)
  3: StorageDead(_52)
    SourceInfo(regex-lite/src/nfa.rs:288:38-288:39)
  4: StorageDead(_43)
    SourceInfo(regex-lite/src/nfa.rs:288:39-288:40)
  5: StorageDead(_42)
    SourceInfo(regex-lite/src/nfa.rs:288:39-288:40)
  6: StorageLive(_53)
    SourceInfo(regex-lite/src/nfa.rs:289:39-289:53)
  7: _53 = (_21.0: u32)
    SourceInfo(regex-lite/src/nfa.rs:289:39-289:53)
  8: StorageLive(_54)
    SourceInfo(regex-lite/src/nfa.rs:289:9-289:36)
  9: StorageLive(_55)
    SourceInfo(regex-lite/src/nfa.rs:289:9-289:30)
  10: StorageLive(_56)
    SourceInfo(regex-lite/src/nfa.rs:289:9-289:30)
  11: StorageLive(_57)
    SourceInfo(regex-lite/src/nfa.rs:289:9-289:17)
  12: _57 = &(_1.1: core::cell::RefCell<nfa::NFA>)
    SourceInfo(regex-lite/src/nfa.rs:289:9-289:17)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:289:9-289:30)
      kind: _56 = core::cell::RefCell::<nfa::NFA>::borrow_mut(move _57) -> [return: bb34, unwind: bb48]
  }
  preds [bb28, bb30]
  succs [bb34, bb48]

bb32
  0: StorageLive(_49)
    SourceInfo(regex-lite/src/nfa.rs:288:38-288:39)
  1: _49 = move ((_43 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:288:38-288:39)
  2: StorageLive(_51)
    SourceInfo(regex-lite/src/nfa.rs:288:38-288:39)
  3: _51 = move _49
    SourceInfo(regex-lite/src/nfa.rs:288:38-288:39)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:288:9-288:39)
      kind: _0 = <core::result::Result<nfa::NFA, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _51) -> [return: bb33, unwind: bb48]
  }
  preds [bb30]
  succs [bb33, bb48]

bb33
  0: StorageDead(_51)
    SourceInfo(regex-lite/src/nfa.rs:288:38-288:39)
  1: StorageDead(_49)
    SourceInfo(regex-lite/src/nfa.rs:288:38-288:39)
  2: StorageDead(_43)
    SourceInfo(regex-lite/src/nfa.rs:288:39-288:40)
  3: StorageDead(_42)
    SourceInfo(regex-lite/src/nfa.rs:288:39-288:40)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb39
  }
  preds [bb32]
  succs [bb39]

bb34
  0: _55 = &mut _56
    SourceInfo(regex-lite/src/nfa.rs:289:9-289:30)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:289:9-289:36)
      kind: _54 = <core::cell::RefMut<'_, nfa::NFA> as core::ops::DerefMut>::deref_mut(move _55) -> [return: bb35, unwind: bb43]
  }
  preds [bb31]
  succs [bb35, bb43]

bb35
  0: StorageDead(_57)
    SourceInfo(regex-lite/src/nfa.rs:289:29-289:30)
  1: StorageDead(_55)
    SourceInfo(regex-lite/src/nfa.rs:289:29-289:30)
  2: ((*_54).2: u32) = move _53
    SourceInfo(regex-lite/src/nfa.rs:289:9-289:53)
  3: StorageDead(_53)
    SourceInfo(regex-lite/src/nfa.rs:289:52-289:53)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:289:53-289:54)
      kind: drop(_56) -> [return: bb36, unwind: bb48]
  }
  preds [bb34]
  succs [bb36, bb48]

bb36
  0: StorageDead(_56)
    SourceInfo(regex-lite/src/nfa.rs:289:53-289:54)
  1: StorageDead(_54)
    SourceInfo(regex-lite/src/nfa.rs:289:53-289:54)
  2: StorageLive(_58)
    SourceInfo(regex-lite/src/nfa.rs:290:12-290:33)
  3: StorageLive(_59)
    SourceInfo(regex-lite/src/nfa.rs:290:12-290:20)
  4: _59 = move (_1.1: core::cell::RefCell<nfa::NFA>)
    SourceInfo(regex-lite/src/nfa.rs:290:12-290:20)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:290:12-290:33)
      kind: _58 = core::cell::RefCell::<nfa::NFA>::into_inner(move _59) -> [return: bb37, unwind: bb42]
  }
  preds [bb35]
  succs [bb37, bb42]

bb37
  0: StorageDead(_59)
    SourceInfo(regex-lite/src/nfa.rs:290:32-290:33)
  1: _0 = core::result::Result::<nfa::NFA, error::Error>::Ok(move _58)
    SourceInfo(regex-lite/src/nfa.rs:290:9-290:34)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:290:33-290:34)
      kind: drop(_58) -> [return: bb38, unwind: bb48]
  }
  preds [bb36]
  succs [bb38, bb48]

bb38
  0: StorageDead(_58)
    SourceInfo(regex-lite/src/nfa.rs:290:33-290:34)
  1: StorageDead(_32)
    SourceInfo(regex-lite/src/nfa.rs:291:5-291:6)
  2: StorageDead(_21)
    SourceInfo(regex-lite/src/nfa.rs:291:5-291:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:291:5-291:6)
      kind: drop(_1) -> [return: bb41, unwind: bb49]
  }
  preds [bb37]
  succs [bb41, bb49]

bb39
  0: StorageDead(_32)
    SourceInfo(regex-lite/src/nfa.rs:291:5-291:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb40
  }
  preds [bb26, bb33]
  succs [bb40]

bb40
  0: StorageDead(_21)
    SourceInfo(regex-lite/src/nfa.rs:291:5-291:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:291:5-291:6)
      kind: drop(_1) -> [return: bb41, unwind: bb49]
  }
  preds [bb19, bb39]
  succs [bb41, bb49]

bb41
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:291:6-291:6)
      kind: return
  }
  preds [bb38, bb40]
  succs []

bb42
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:290:32-290:33)
      kind: drop(_59) -> [return: bb48, unwind terminate(cleanup)]
  }
  preds [bb36]
  succs [bb48]

bb43
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:289:53-289:54)
      kind: drop(_56) -> [return: bb48, unwind terminate(cleanup)]
  }
  preds [bb34]
  succs [bb48]

bb44
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:287:40-287:41)
      kind: drop(_36) -> [return: bb48, unwind terminate(cleanup)]
  }
  preds [bb17]
  succs [bb48]

bb45
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:285:47-285:48)
      kind: drop(_19) -> [return: bb48, unwind terminate(cleanup)]
  }
  preds [bb10]
  succs [bb48]

bb46
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:283:68-283:69)
      kind: drop(_13) -> [return: bb48, unwind terminate(cleanup)]
  }
  preds [bb6]
  succs [bb48]

bb47
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:282:74-282:75)
      kind: drop(_7) -> [return: bb48, unwind terminate(cleanup)]
  }
  preds [bb2]
  succs [bb48]

bb48
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:291:5-291:6)
      kind: drop(_1) -> [return: bb49, unwind terminate(cleanup)]
  }
  preds [bb0, bb1, bb3, bb4, bb5, bb7, bb8, bb9, bb11, bb12, bb13, bb18, bb20, bb24, bb25, bb27, bb31, bb32, bb35, bb37, bb42, bb43, bb44, bb45, bb46, bb47]
  succs [bb49]

bb49
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:281:5-291:6)
      kind: resume
  }
  preds [bb38, bb40, bb48]
  succs []

