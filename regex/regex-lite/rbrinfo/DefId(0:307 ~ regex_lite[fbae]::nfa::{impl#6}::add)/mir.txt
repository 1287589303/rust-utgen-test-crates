bb0
  0: StorageLive(_3)
    SourceInfo(regex-lite/src/nfa.rs:644:13-644:15)
  1: StorageLive(_4)
    SourceInfo(regex-lite/src/nfa.rs:644:18-645:78)
  2: StorageLive(_5)
    SourceInfo(regex-lite/src/nfa.rs:644:18-645:77)
  3: StorageLive(_6)
    SourceInfo(regex-lite/src/nfa.rs:644:18-644:63)
  4: StorageLive(_7)
    SourceInfo(regex-lite/src/nfa.rs:644:32-644:62)
  5: StorageLive(_8)
    SourceInfo(regex-lite/src/nfa.rs:644:32-644:56)
  6: StorageLive(_9)
    SourceInfo(regex-lite/src/nfa.rs:644:32-644:56)
  7: StorageLive(_10)
    SourceInfo(regex-lite/src/nfa.rs:644:32-644:49)
  8: StorageLive(_11)
    SourceInfo(regex-lite/src/nfa.rs:644:32-644:49)
  9: StorageLive(_12)
    SourceInfo(regex-lite/src/nfa.rs:644:32-644:40)
  10: _12 = &((*_1).1: core::cell::RefCell<nfa::NFA>)
    SourceInfo(regex-lite/src/nfa.rs:644:32-644:40)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:644:32-644:49)
      kind: _11 = core::cell::RefCell::<nfa::NFA>::borrow(move _12) -> [return: bb1, unwind: bb36]
  }
  preds []
  succs [bb1, bb36]

bb1
  0: _10 = &_11
    SourceInfo(regex-lite/src/nfa.rs:644:32-644:49)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:644:32-644:56)
      kind: _9 = <core::cell::Ref<'_, nfa::NFA> as core::ops::Deref>::deref(move _10) -> [return: bb2, unwind: bb35]
  }
  preds [bb0]
  succs [bb2, bb35]

bb2
  0: StorageDead(_12)
    SourceInfo(regex-lite/src/nfa.rs:644:48-644:49)
  1: StorageDead(_10)
    SourceInfo(regex-lite/src/nfa.rs:644:48-644:49)
  2: _8 = &((*_9).1: alloc::vec::Vec<nfa::State>)
    SourceInfo(regex-lite/src/nfa.rs:644:32-644:56)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:644:32-644:62)
      kind: _7 = alloc::vec::Vec::<nfa::State>::len(move _8) -> [return: bb3, unwind: bb35]
  }
  preds [bb1]
  succs [bb3, bb35]

bb3
  0: StorageDead(_8)
    SourceInfo(regex-lite/src/nfa.rs:644:61-644:62)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:644:18-644:63)
      kind: _6 = <u32 as core::convert::TryFrom<usize>>::try_from(move _7) -> [return: bb4, unwind: bb35]
  }
  preds [bb2]
  succs [bb4, bb35]

bb4
  0: StorageDead(_7)
    SourceInfo(regex-lite/src/nfa.rs:644:62-644:63)
  1: StorageLive(_13)
    SourceInfo(regex-lite/src/nfa.rs:645:22-645:76)
  2: _13 = {closure@regex-lite/src/nfa.rs:645:22: 645:25}
    SourceInfo(regex-lite/src/nfa.rs:645:22-645:76)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:644:18-645:77)
      kind: _5 = core::result::Result::<u32, core::num::TryFromIntError>::map_err::<error::Error, {closure@regex-lite/src/nfa.rs:645:22: 645:25}>(move _6, move _13) -> [return: bb5, unwind: bb35]
  }
  preds [bb3]
  succs [bb5, bb35]

bb5
  0: StorageDead(_13)
    SourceInfo(regex-lite/src/nfa.rs:645:76-645:77)
  1: StorageDead(_6)
    SourceInfo(regex-lite/src/nfa.rs:645:76-645:77)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:644:18-645:78)
      kind: _4 = <core::result::Result<u32, error::Error> as core::ops::Try>::branch(move _5) -> [return: bb6, unwind: bb35]
  }
  preds [bb4]
  succs [bb6, bb35]

bb6
  0: StorageDead(_5)
    SourceInfo(regex-lite/src/nfa.rs:645:77-645:78)
  1: PlaceMention(_4)
    SourceInfo(regex-lite/src/nfa.rs:644:18-645:78)
  2: _14 = discriminant(_4)
    SourceInfo(regex-lite/src/nfa.rs:644:18-645:78)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:644:18-645:78)
      kind: switchInt(move _14) -> [0: bb9, 1: bb8, otherwise: bb7]
  }
  preds [bb5]
  succs [bb7, bb8, bb9]

bb7
  0: FakeRead(ForMatchedPlace(None), _4)
    SourceInfo(regex-lite/src/nfa.rs:644:18-645:78)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:644:18-645:78)
      kind: unreachable
  }
  preds [bb6]
  succs []

bb8
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:645:77-645:78)
      kind: falseEdge -> [real: bb10, imaginary: bb9]
  }
  preds [bb6]
  succs [bb9, bb10]

bb9
  0: StorageLive(_18)
    SourceInfo(regex-lite/src/nfa.rs:644:18-645:78)
  1: _18 = ((_4 as Continue).0: u32)
    SourceInfo(regex-lite/src/nfa.rs:644:18-645:78)
  2: _3 = _18
    SourceInfo(regex-lite/src/nfa.rs:644:18-645:78)
  3: StorageDead(_18)
    SourceInfo(regex-lite/src/nfa.rs:645:77-645:78)
  4: FakeRead(ForLet(None), _3)
    SourceInfo(regex-lite/src/nfa.rs:644:13-644:15)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:645:78-645:79)
      kind: drop(_11) -> [return: bb12, unwind: bb36]
  }
  preds [bb6, bb8]
  succs [bb12, bb36]

bb10
  0: StorageLive(_15)
    SourceInfo(regex-lite/src/nfa.rs:645:77-645:78)
  1: _15 = move ((_4 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:645:77-645:78)
  2: StorageLive(_17)
    SourceInfo(regex-lite/src/nfa.rs:645:77-645:78)
  3: _17 = move _15
    SourceInfo(regex-lite/src/nfa.rs:645:77-645:78)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:644:18-645:78)
      kind: _0 = <core::result::Result<u32, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _17) -> [return: bb11, unwind: bb35]
  }
  preds [bb8]
  succs [bb11, bb35]

bb11
  0: StorageDead(_17)
    SourceInfo(regex-lite/src/nfa.rs:645:77-645:78)
  1: StorageDead(_15)
    SourceInfo(regex-lite/src/nfa.rs:645:77-645:78)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:645:78-645:79)
      kind: drop(_11) -> [return: bb29, unwind: bb36]
  }
  preds [bb10]
  succs [bb29, bb36]

bb12
  0: StorageDead(_11)
    SourceInfo(regex-lite/src/nfa.rs:645:78-645:79)
  1: StorageDead(_9)
    SourceInfo(regex-lite/src/nfa.rs:645:78-645:79)
  2: StorageDead(_4)
    SourceInfo(regex-lite/src/nfa.rs:645:78-645:79)
  3: StorageLive(_19)
    SourceInfo(regex-lite/src/nfa.rs:646:47-646:67)
  4: StorageLive(_20)
    SourceInfo(regex-lite/src/nfa.rs:646:47-646:52)
  5: _20 = &_2
    SourceInfo(regex-lite/src/nfa.rs:646:47-646:52)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:646:47-646:67)
      kind: _19 = nfa::State::memory_usage(move _20) -> [return: bb13, unwind: bb36]
  }
  preds [bb9]
  succs [bb13, bb36]

bb13
  0: StorageDead(_20)
    SourceInfo(regex-lite/src/nfa.rs:646:66-646:67)
  1: StorageLive(_21)
    SourceInfo(regex-lite/src/nfa.rs:646:9-646:43)
  2: StorageLive(_22)
    SourceInfo(regex-lite/src/nfa.rs:646:9-646:30)
  3: StorageLive(_23)
    SourceInfo(regex-lite/src/nfa.rs:646:9-646:30)
  4: StorageLive(_24)
    SourceInfo(regex-lite/src/nfa.rs:646:9-646:17)
  5: _24 = &((*_1).1: core::cell::RefCell<nfa::NFA>)
    SourceInfo(regex-lite/src/nfa.rs:646:9-646:17)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:646:9-646:30)
      kind: _23 = core::cell::RefCell::<nfa::NFA>::borrow_mut(move _24) -> [return: bb14, unwind: bb36]
  }
  preds [bb12]
  succs [bb14, bb36]

bb14
  0: _22 = &mut _23
    SourceInfo(regex-lite/src/nfa.rs:646:9-646:30)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:646:9-646:43)
      kind: _21 = <core::cell::RefMut<'_, nfa::NFA> as core::ops::DerefMut>::deref_mut(move _22) -> [return: bb15, unwind: bb34]
  }
  preds [bb13]
  succs [bb15, bb34]

bb15
  0: StorageDead(_24)
    SourceInfo(regex-lite/src/nfa.rs:646:29-646:30)
  1: StorageDead(_22)
    SourceInfo(regex-lite/src/nfa.rs:646:29-646:30)
  2: _25 = AddWithOverflow(((*_21).8: usize), _19)
    SourceInfo(regex-lite/src/nfa.rs:646:9-646:67)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:646:9-646:67)
      kind: assert(!move (_25.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_21).8: usize), move _19) -> [success: bb16, unwind: bb34]
  }
  preds [bb14]
  succs [bb16, bb34]

bb16
  0: ((*_21).8: usize) = move (_25.0: usize)
    SourceInfo(regex-lite/src/nfa.rs:646:9-646:67)
  1: StorageDead(_19)
    SourceInfo(regex-lite/src/nfa.rs:646:66-646:67)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:646:67-646:68)
      kind: drop(_23) -> [return: bb17, unwind: bb36]
  }
  preds [bb15]
  succs [bb17, bb36]

bb17
  0: StorageDead(_23)
    SourceInfo(regex-lite/src/nfa.rs:646:67-646:68)
  1: StorageDead(_21)
    SourceInfo(regex-lite/src/nfa.rs:646:67-646:68)
  2: StorageLive(_26)
    SourceInfo(regex-lite/src/nfa.rs:647:9-647:49)
  3: StorageLive(_27)
    SourceInfo(regex-lite/src/nfa.rs:647:9-647:37)
  4: StorageLive(_28)
    SourceInfo(regex-lite/src/nfa.rs:647:9-647:37)
  5: StorageLive(_29)
    SourceInfo(regex-lite/src/nfa.rs:647:9-647:30)
  6: StorageLive(_30)
    SourceInfo(regex-lite/src/nfa.rs:647:9-647:30)
  7: StorageLive(_31)
    SourceInfo(regex-lite/src/nfa.rs:647:9-647:17)
  8: _31 = &((*_1).1: core::cell::RefCell<nfa::NFA>)
    SourceInfo(regex-lite/src/nfa.rs:647:9-647:17)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:647:9-647:30)
      kind: _30 = core::cell::RefCell::<nfa::NFA>::borrow_mut(move _31) -> [return: bb18, unwind: bb36]
  }
  preds [bb16]
  succs [bb18, bb36]

bb18
  0: _29 = &mut _30
    SourceInfo(regex-lite/src/nfa.rs:647:9-647:30)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:647:9-647:37)
      kind: _28 = <core::cell::RefMut<'_, nfa::NFA> as core::ops::DerefMut>::deref_mut(move _29) -> [return: bb19, unwind: bb33]
  }
  preds [bb17]
  succs [bb19, bb33]

bb19
  0: StorageDead(_31)
    SourceInfo(regex-lite/src/nfa.rs:647:29-647:30)
  1: StorageDead(_29)
    SourceInfo(regex-lite/src/nfa.rs:647:29-647:30)
  2: _27 = &mut ((*_28).1: alloc::vec::Vec<nfa::State>)
    SourceInfo(regex-lite/src/nfa.rs:647:9-647:37)
  3: StorageLive(_32)
    SourceInfo(regex-lite/src/nfa.rs:647:43-647:48)
  4: _32 = move _2
    SourceInfo(regex-lite/src/nfa.rs:647:43-647:48)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:647:9-647:49)
      kind: _26 = alloc::vec::Vec::<nfa::State>::push(move _27, move _32) -> [return: bb20, unwind: bb32]
  }
  preds [bb18]
  succs [bb20, bb32]

bb20
  0: StorageDead(_32)
    SourceInfo(regex-lite/src/nfa.rs:647:48-647:49)
  1: StorageDead(_27)
    SourceInfo(regex-lite/src/nfa.rs:647:48-647:49)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:647:49-647:50)
      kind: drop(_30) -> [return: bb21, unwind: bb36]
  }
  preds [bb19]
  succs [bb21, bb36]

bb21
  0: StorageDead(_30)
    SourceInfo(regex-lite/src/nfa.rs:647:49-647:50)
  1: StorageDead(_28)
    SourceInfo(regex-lite/src/nfa.rs:647:49-647:50)
  2: StorageDead(_26)
    SourceInfo(regex-lite/src/nfa.rs:647:49-647:50)
  3: StorageLive(_33)
    SourceInfo(regex-lite/src/nfa.rs:648:9-648:33)
  4: StorageLive(_34)
    SourceInfo(regex-lite/src/nfa.rs:648:9-648:33)
  5: StorageLive(_35)
    SourceInfo(regex-lite/src/nfa.rs:648:9-648:32)
  6: StorageLive(_36)
    SourceInfo(regex-lite/src/nfa.rs:648:9-648:13)
  7: _36 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:648:9-648:13)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:648:9-648:32)
      kind: _35 = nfa::Compiler::check_size_limit(move _36) -> [return: bb22, unwind: bb36]
  }
  preds [bb20]
  succs [bb22, bb36]

bb22
  0: StorageDead(_36)
    SourceInfo(regex-lite/src/nfa.rs:648:31-648:32)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:648:9-648:33)
      kind: _34 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _35) -> [return: bb23, unwind: bb36]
  }
  preds [bb21]
  succs [bb23, bb36]

bb23
  0: StorageDead(_35)
    SourceInfo(regex-lite/src/nfa.rs:648:32-648:33)
  1: PlaceMention(_34)
    SourceInfo(regex-lite/src/nfa.rs:648:9-648:33)
  2: _37 = discriminant(_34)
    SourceInfo(regex-lite/src/nfa.rs:648:9-648:33)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:648:9-648:33)
      kind: switchInt(move _37) -> [0: bb26, 1: bb25, otherwise: bb24]
  }
  preds [bb22]
  succs [bb24, bb25, bb26]

bb24
  0: FakeRead(ForMatchedPlace(None), _34)
    SourceInfo(regex-lite/src/nfa.rs:648:9-648:33)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:648:9-648:33)
      kind: unreachable
  }
  preds [bb23]
  succs []

bb25
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:648:32-648:33)
      kind: falseEdge -> [real: bb27, imaginary: bb26]
  }
  preds [bb23]
  succs [bb26, bb27]

bb26
  0: StorageLive(_41)
    SourceInfo(regex-lite/src/nfa.rs:648:9-648:33)
  1: _41 = ((_34 as Continue).0: ())
    SourceInfo(regex-lite/src/nfa.rs:648:9-648:33)
  2: _33 = _41
    SourceInfo(regex-lite/src/nfa.rs:648:9-648:33)
  3: StorageDead(_41)
    SourceInfo(regex-lite/src/nfa.rs:648:32-648:33)
  4: StorageDead(_34)
    SourceInfo(regex-lite/src/nfa.rs:648:33-648:34)
  5: StorageDead(_33)
    SourceInfo(regex-lite/src/nfa.rs:648:33-648:34)
  6: StorageLive(_42)
    SourceInfo(regex-lite/src/nfa.rs:649:12-649:14)
  7: _42 = _3
    SourceInfo(regex-lite/src/nfa.rs:649:12-649:14)
  8: _0 = core::result::Result::<u32, error::Error>::Ok(move _42)
    SourceInfo(regex-lite/src/nfa.rs:649:9-649:15)
  9: StorageDead(_42)
    SourceInfo(regex-lite/src/nfa.rs:649:14-649:15)
  10: StorageDead(_3)
    SourceInfo(regex-lite/src/nfa.rs:650:5-650:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:650:5-650:6)
      kind: drop(_2) -> [return: bb31, unwind: bb37]
  }
  preds [bb23, bb25]
  succs [bb31, bb37]

bb27
  0: StorageLive(_38)
    SourceInfo(regex-lite/src/nfa.rs:648:32-648:33)
  1: _38 = move ((_34 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:648:32-648:33)
  2: StorageLive(_40)
    SourceInfo(regex-lite/src/nfa.rs:648:32-648:33)
  3: _40 = move _38
    SourceInfo(regex-lite/src/nfa.rs:648:32-648:33)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:648:9-648:33)
      kind: _0 = <core::result::Result<u32, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _40) -> [return: bb28, unwind: bb36]
  }
  preds [bb25]
  succs [bb28, bb36]

bb28
  0: StorageDead(_40)
    SourceInfo(regex-lite/src/nfa.rs:648:32-648:33)
  1: StorageDead(_38)
    SourceInfo(regex-lite/src/nfa.rs:648:32-648:33)
  2: StorageDead(_34)
    SourceInfo(regex-lite/src/nfa.rs:648:33-648:34)
  3: StorageDead(_33)
    SourceInfo(regex-lite/src/nfa.rs:648:33-648:34)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb30
  }
  preds [bb27]
  succs [bb30]

bb29
  0: StorageDead(_11)
    SourceInfo(regex-lite/src/nfa.rs:645:78-645:79)
  1: StorageDead(_9)
    SourceInfo(regex-lite/src/nfa.rs:645:78-645:79)
  2: StorageDead(_4)
    SourceInfo(regex-lite/src/nfa.rs:645:78-645:79)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb30
  }
  preds [bb11]
  succs [bb30]

bb30
  0: StorageDead(_3)
    SourceInfo(regex-lite/src/nfa.rs:650:5-650:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:650:5-650:6)
      kind: drop(_2) -> [return: bb31, unwind: bb37]
  }
  preds [bb28, bb29]
  succs [bb31, bb37]

bb31
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:650:6-650:6)
      kind: return
  }
  preds [bb26, bb30]
  succs []

bb32
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:647:48-647:49)
      kind: drop(_32) -> [return: bb33, unwind terminate(cleanup)]
  }
  preds [bb19]
  succs [bb33]

bb33
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:647:49-647:50)
      kind: drop(_30) -> [return: bb36, unwind terminate(cleanup)]
  }
  preds [bb18, bb32]
  succs [bb36]

bb34
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:646:67-646:68)
      kind: drop(_23) -> [return: bb36, unwind terminate(cleanup)]
  }
  preds [bb14, bb15]
  succs [bb36]

bb35
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:645:78-645:79)
      kind: drop(_11) -> [return: bb36, unwind terminate(cleanup)]
  }
  preds [bb1, bb2, bb3, bb4, bb5, bb10]
  succs [bb36]

bb36
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:650:5-650:6)
      kind: drop(_2) -> [return: bb37, unwind terminate(cleanup)]
  }
  preds [bb0, bb9, bb11, bb12, bb13, bb16, bb17, bb20, bb21, bb22, bb27, bb33, bb34, bb35]
  succs [bb37]

bb37
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:643:5-650:6)
      kind: resume
  }
  preds [bb26, bb30, bb36]
  succs []

