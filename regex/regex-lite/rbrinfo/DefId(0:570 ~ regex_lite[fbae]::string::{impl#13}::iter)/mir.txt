bb0
  0: StorageLive(_2)
    SourceInfo(regex-lite/src/string.rs:1906:19-1906:23)
  1: _2 = &(*_1)
    SourceInfo(regex-lite/src/string.rs:1906:19-1906:23)
  2: StorageLive(_3)
    SourceInfo(regex-lite/src/string.rs:1907:17-1907:62)
  3: StorageLive(_4)
    SourceInfo(regex-lite/src/string.rs:1907:17-1907:50)
  4: StorageLive(_5)
    SourceInfo(regex-lite/src/string.rs:1907:17-1907:34)
  5: StorageLive(_6)
    SourceInfo(regex-lite/src/string.rs:1907:17-1907:34)
  6: StorageLive(_7)
    SourceInfo(regex-lite/src/string.rs:1907:17-1907:28)
  7: StorageLive(_8)
    SourceInfo(regex-lite/src/string.rs:1907:17-1907:34)
  8: StorageLive(_9)
    SourceInfo(regex-lite/src/string.rs:1907:17-1907:28)
  9: _9 = &((*_1).2: alloc::sync::Arc<pikevm::PikeVM>)
    SourceInfo(regex-lite/src/string.rs:1907:17-1907:28)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:1907:17-1907:34)
      kind: _8 = <alloc::sync::Arc<pikevm::PikeVM> as core::ops::Deref>::deref(move _9) -> [return: bb1, unwind: bb5]
  }
  preds []
  succs [bb1, bb5]

bb1
  0: _7 = &(*_8)
    SourceInfo(regex-lite/src/string.rs:1907:17-1907:28)
  1: StorageDead(_9)
    SourceInfo(regex-lite/src/string.rs:1907:27-1907:28)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:1907:17-1907:34)
      kind: _6 = pikevm::PikeVM::nfa(move _7) -> [return: bb2, unwind: bb5]
  }
  preds [bb0]
  succs [bb2, bb5]

bb2
  0: _5 = &(*_6)
    SourceInfo(regex-lite/src/string.rs:1907:17-1907:34)
  1: StorageDead(_7)
    SourceInfo(regex-lite/src/string.rs:1907:33-1907:34)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:1907:17-1907:50)
      kind: _4 = nfa::NFA::capture_names(move _5) -> [return: bb3, unwind: bb5]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: StorageDead(_5)
    SourceInfo(regex-lite/src/string.rs:1907:49-1907:50)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:1907:17-1907:62)
      kind: _3 = <nfa::CaptureNames<'_> as core::iter::Iterator>::enumerate(move _4) -> [return: bb4, unwind: bb5]
  }
  preds [bb2]
  succs [bb4, bb5]

bb4
  0: StorageDead(_4)
    SourceInfo(regex-lite/src/string.rs:1907:61-1907:62)
  1: _0 = string::SubCaptureMatches::<'_, '_> { caps: move _2, it: move _3 }
    SourceInfo(regex-lite/src/string.rs:1905:9-1908:10)
  2: StorageDead(_3)
    SourceInfo(regex-lite/src/string.rs:1908:9-1908:10)
  3: StorageDead(_2)
    SourceInfo(regex-lite/src/string.rs:1908:9-1908:10)
  4: StorageDead(_8)
    SourceInfo(regex-lite/src/string.rs:1909:5-1909:6)
  5: StorageDead(_6)
    SourceInfo(regex-lite/src/string.rs:1909:5-1909:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:1909:6-1909:6)
      kind: return
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:1904:5-1909:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3]
  succs []

