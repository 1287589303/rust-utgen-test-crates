bb0
  0: StorageLive(_5)
    SourceInfo(regex-lite/src/nfa.rs:544:13-544:32)
  1: StorageLive(_6)
    SourceInfo(regex-lite/src/nfa.rs:544:35-544:70)
  2: StorageLive(_7)
    SourceInfo(regex-lite/src/nfa.rs:544:35-544:70)
  3: StorageLive(_8)
    SourceInfo(regex-lite/src/nfa.rs:544:35-544:52)
  4: StorageLive(_9)
    SourceInfo(regex-lite/src/nfa.rs:544:35-544:52)
  5: StorageLive(_10)
    SourceInfo(regex-lite/src/nfa.rs:544:35-544:43)
  6: _10 = &((*_1).1: core::cell::RefCell<nfa::NFA>)
    SourceInfo(regex-lite/src/nfa.rs:544:35-544:43)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:544:35-544:52)
      kind: _9 = core::cell::RefCell::<nfa::NFA>::borrow(move _10) -> [return: bb1, unwind: bb108]
  }
  preds []
  succs [bb1, bb108]

bb1
  0: _8 = &_9
    SourceInfo(regex-lite/src/nfa.rs:544:35-544:52)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:544:35-544:70)
      kind: _7 = <core::cell::Ref<'_, nfa::NFA> as core::ops::Deref>::deref(move _8) -> [return: bb2, unwind: bb107]
  }
  preds [bb0]
  succs [bb2, bb107]

bb2
  0: StorageDead(_10)
    SourceInfo(regex-lite/src/nfa.rs:544:51-544:52)
  1: StorageDead(_8)
    SourceInfo(regex-lite/src/nfa.rs:544:51-544:52)
  2: _6 = &((*_7).7: alloc::vec::Vec<core::option::Option<alloc::sync::Arc<str>>>)
    SourceInfo(regex-lite/src/nfa.rs:544:35-544:70)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:544:35-544:76)
      kind: _5 = alloc::vec::Vec::<core::option::Option<alloc::sync::Arc<str>>>::len(move _6) -> [return: bb3, unwind: bb107]
  }
  preds [bb1]
  succs [bb3, bb107]

bb3
  0: StorageDead(_6)
    SourceInfo(regex-lite/src/nfa.rs:544:75-544:76)
  1: FakeRead(ForLet(None), _5)
    SourceInfo(regex-lite/src/nfa.rs:544:13-544:32)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:544:76-544:77)
      kind: drop(_9) -> [return: bb4, unwind: bb108]
  }
  preds [bb2]
  succs [bb4, bb108]

bb4
  0: StorageDead(_9)
    SourceInfo(regex-lite/src/nfa.rs:544:76-544:77)
  1: StorageDead(_7)
    SourceInfo(regex-lite/src/nfa.rs:544:76-544:77)
  2: StorageLive(_11)
    SourceInfo(regex-lite/src/nfa.rs:545:9-547:10)
  3: StorageLive(_12)
    SourceInfo(regex-lite/src/nfa.rs:545:18-545:75)
  4: StorageLive(_13)
    SourceInfo(regex-lite/src/nfa.rs:545:18-545:75)
  5: StorageLive(_14)
    SourceInfo(regex-lite/src/nfa.rs:545:21-545:75)
  6: StorageLive(_15)
    SourceInfo(regex-lite/src/nfa.rs:545:22-545:38)
  7: StorageLive(_16)
    SourceInfo(regex-lite/src/nfa.rs:545:22-545:27)
  8: _16 = _2
    SourceInfo(regex-lite/src/nfa.rs:545:22-545:27)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:545:22-545:38)
      kind: _15 = <u32 as int::U32>::as_usize(move _16) -> [return: bb5, unwind: bb108]
  }
  preds [bb3]
  succs [bb5, bb108]

bb5
  0: StorageDead(_16)
    SourceInfo(regex-lite/src/nfa.rs:545:37-545:38)
  1: StorageLive(_17)
    SourceInfo(regex-lite/src/nfa.rs:545:54-545:73)
  2: _17 = _5
    SourceInfo(regex-lite/src/nfa.rs:545:54-545:73)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:545:21-545:75)
      kind: _14 = core::num::<impl usize>::saturating_sub(move _15, move _17) -> [return: bb6, unwind: bb108]
  }
  preds [bb4]
  succs [bb6, bb108]

bb6
  0: StorageDead(_17)
    SourceInfo(regex-lite/src/nfa.rs:545:74-545:75)
  1: StorageDead(_15)
    SourceInfo(regex-lite/src/nfa.rs:545:74-545:75)
  2: _13 = core::ops::Range::<usize> { start: const 0_usize, end: move _14 }
    SourceInfo(regex-lite/src/nfa.rs:545:18-545:75)
  3: StorageDead(_14)
    SourceInfo(regex-lite/src/nfa.rs:545:74-545:75)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:545:18-545:75)
      kind: _12 = <core::ops::Range<usize> as core::iter::IntoIterator>::into_iter(move _13) -> [return: bb7, unwind: bb108]
  }
  preds [bb5]
  succs [bb7, bb108]

bb7
  0: StorageDead(_13)
    SourceInfo(regex-lite/src/nfa.rs:545:74-545:75)
  1: PlaceMention(_12)
    SourceInfo(regex-lite/src/nfa.rs:545:18-545:75)
  2: StorageLive(_18)
    SourceInfo(regex-lite/src/nfa.rs:545:18-545:75)
  3: _18 = move _12
    SourceInfo(regex-lite/src/nfa.rs:545:18-545:75)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:545:9-547:10)
      kind: goto -> bb8
  }
  preds [bb6]
  succs [bb8]

bb8
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:545:9-547:10)
      kind: falseUnwind -> [real: bb9, unwind: bb108]
  }
  preds [bb7, bb18]
  succs [bb9, bb108]

bb9
  0: StorageLive(_20)
    SourceInfo(regex-lite/src/nfa.rs:545:18-545:75)
  1: StorageLive(_21)
    SourceInfo(regex-lite/src/nfa.rs:545:18-545:75)
  2: StorageLive(_22)
    SourceInfo(regex-lite/src/nfa.rs:545:18-545:75)
  3: StorageLive(_23)
    SourceInfo(regex-lite/src/nfa.rs:545:18-545:75)
  4: _23 = &mut _18
    SourceInfo(regex-lite/src/nfa.rs:545:18-545:75)
  5: _22 = &mut (*_23)
    SourceInfo(regex-lite/src/nfa.rs:545:18-545:75)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:545:18-545:75)
      kind: _21 = <core::ops::Range<usize> as core::iter::Iterator>::next(move _22) -> [return: bb10, unwind: bb108]
  }
  preds [bb8]
  succs [bb10, bb108]

bb10
  0: StorageDead(_22)
    SourceInfo(regex-lite/src/nfa.rs:545:74-545:75)
  1: PlaceMention(_21)
    SourceInfo(regex-lite/src/nfa.rs:545:18-545:75)
  2: _24 = discriminant(_21)
    SourceInfo(regex-lite/src/nfa.rs:545:18-545:75)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:545:18-545:75)
      kind: switchInt(move _24) -> [0: bb12, 1: bb13, otherwise: bb11]
  }
  preds [bb9]
  succs [bb11, bb12, bb13]

bb11
  0: FakeRead(ForMatchedPlace(None), _21)
    SourceInfo(regex-lite/src/nfa.rs:545:18-545:75)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:545:18-545:75)
      kind: unreachable
  }
  preds [bb10]
  succs []

bb12
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:545:9-547:10)
      kind: falseEdge -> [real: bb14, imaginary: bb13]
  }
  preds [bb10]
  succs [bb13, bb14]

bb13
  0: StorageLive(_26)
    SourceInfo(regex-lite/src/nfa.rs:546:13-546:63)
  1: StorageLive(_27)
    SourceInfo(regex-lite/src/nfa.rs:546:13-546:52)
  2: StorageLive(_28)
    SourceInfo(regex-lite/src/nfa.rs:546:13-546:52)
  3: StorageLive(_29)
    SourceInfo(regex-lite/src/nfa.rs:546:13-546:34)
  4: StorageLive(_30)
    SourceInfo(regex-lite/src/nfa.rs:546:13-546:34)
  5: StorageLive(_31)
    SourceInfo(regex-lite/src/nfa.rs:546:13-546:21)
  6: _31 = &((*_1).1: core::cell::RefCell<nfa::NFA>)
    SourceInfo(regex-lite/src/nfa.rs:546:13-546:21)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:546:13-546:34)
      kind: _30 = core::cell::RefCell::<nfa::NFA>::borrow_mut(move _31) -> [return: bb15, unwind: bb108]
  }
  preds [bb10, bb12]
  succs [bb15, bb108]

bb14
  0: _11 = const ()
    SourceInfo(regex-lite/src/nfa.rs:545:9-547:10)
  1: StorageDead(_23)
    SourceInfo(regex-lite/src/nfa.rs:547:9-547:10)
  2: StorageDead(_21)
    SourceInfo(regex-lite/src/nfa.rs:547:9-547:10)
  3: StorageDead(_20)
    SourceInfo(regex-lite/src/nfa.rs:547:9-547:10)
  4: StorageDead(_18)
    SourceInfo(regex-lite/src/nfa.rs:547:9-547:10)
  5: StorageDead(_12)
    SourceInfo(regex-lite/src/nfa.rs:547:9-547:10)
  6: StorageDead(_11)
    SourceInfo(regex-lite/src/nfa.rs:547:9-547:10)
  7: StorageLive(_33)
    SourceInfo(regex-lite/src/nfa.rs:548:9-559:10)
  8: StorageLive(_34)
    SourceInfo(regex-lite/src/nfa.rs:548:12-548:51)
  9: StorageLive(_35)
    SourceInfo(regex-lite/src/nfa.rs:548:12-548:28)
  10: StorageLive(_36)
    SourceInfo(regex-lite/src/nfa.rs:548:12-548:17)
  11: _36 = _2
    SourceInfo(regex-lite/src/nfa.rs:548:12-548:17)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:548:12-548:28)
      kind: _35 = <u32 as int::U32>::as_usize(move _36) -> [return: bb19, unwind: bb108]
  }
  preds [bb12]
  succs [bb19, bb108]

bb15
  0: _29 = &mut _30
    SourceInfo(regex-lite/src/nfa.rs:546:13-546:34)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:546:13-546:52)
      kind: _28 = <core::cell::RefMut<'_, nfa::NFA> as core::ops::DerefMut>::deref_mut(move _29) -> [return: bb16, unwind: bb106]
  }
  preds [bb13]
  succs [bb16, bb106]

bb16
  0: StorageDead(_31)
    SourceInfo(regex-lite/src/nfa.rs:546:33-546:34)
  1: StorageDead(_29)
    SourceInfo(regex-lite/src/nfa.rs:546:33-546:34)
  2: _27 = &mut ((*_28).7: alloc::vec::Vec<core::option::Option<alloc::sync::Arc<str>>>)
    SourceInfo(regex-lite/src/nfa.rs:546:13-546:52)
  3: StorageLive(_32)
    SourceInfo(regex-lite/src/nfa.rs:546:58-546:62)
  4: _32 = core::option::Option::<alloc::sync::Arc<str>>::None
    SourceInfo(regex-lite/src/nfa.rs:546:58-546:62)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:546:13-546:63)
      kind: _26 = alloc::vec::Vec::<core::option::Option<alloc::sync::Arc<str>>>::push(move _27, move _32) -> [return: bb17, unwind: bb105]
  }
  preds [bb15]
  succs [bb17, bb105]

bb17
  0: StorageDead(_32)
    SourceInfo(regex-lite/src/nfa.rs:546:62-546:63)
  1: StorageDead(_27)
    SourceInfo(regex-lite/src/nfa.rs:546:62-546:63)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:546:63-546:64)
      kind: drop(_30) -> [return: bb18, unwind: bb108]
  }
  preds [bb16]
  succs [bb18, bb108]

bb18
  0: StorageDead(_30)
    SourceInfo(regex-lite/src/nfa.rs:546:63-546:64)
  1: StorageDead(_28)
    SourceInfo(regex-lite/src/nfa.rs:546:63-546:64)
  2: StorageDead(_26)
    SourceInfo(regex-lite/src/nfa.rs:546:63-546:64)
  3: _20 = const ()
    SourceInfo(regex-lite/src/nfa.rs:545:76-547:10)
  4: StorageDead(_23)
    SourceInfo(regex-lite/src/nfa.rs:547:9-547:10)
  5: StorageDead(_21)
    SourceInfo(regex-lite/src/nfa.rs:547:9-547:10)
  6: StorageDead(_20)
    SourceInfo(regex-lite/src/nfa.rs:547:9-547:10)
  7: _19 = const ()
    SourceInfo(regex-lite/src/nfa.rs:545:9-547:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:545:9-547:10)
      kind: goto -> bb8
  }
  preds [bb17]
  succs [bb8]

bb19
  0: StorageDead(_36)
    SourceInfo(regex-lite/src/nfa.rs:548:27-548:28)
  1: StorageLive(_37)
    SourceInfo(regex-lite/src/nfa.rs:548:32-548:51)
  2: _37 = _5
    SourceInfo(regex-lite/src/nfa.rs:548:32-548:51)
  3: _34 = Ge(move _35, move _37)
    SourceInfo(regex-lite/src/nfa.rs:548:12-548:51)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:548:12-548:51)
      kind: switchInt(move _34) -> [0: bb45, otherwise: bb20]
  }
  preds [bb14]
  succs [bb20, bb45]

bb20
  0: StorageDead(_37)
    SourceInfo(regex-lite/src/nfa.rs:548:50-548:51)
  1: StorageDead(_35)
    SourceInfo(regex-lite/src/nfa.rs:548:50-548:51)
  2: PlaceMention(_3)
    SourceInfo(regex-lite/src/nfa.rs:549:33-549:37)
  3: _38 = discriminant(_3)
    SourceInfo(regex-lite/src/nfa.rs:549:33-549:37)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:549:20-549:30)
      kind: switchInt(move _38) -> [1: bb21, otherwise: bb40]
  }
  preds [bb19]
  succs [bb21, bb40]

bb21
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:549:20-549:30)
      kind: falseEdge -> [real: bb22, imaginary: bb40]
  }
  preds [bb20]
  succs [bb22, bb40]

bb22
  0: StorageLive(_39)
    SourceInfo(regex-lite/src/nfa.rs:549:25-549:29)
  1: _39 = ((_3 as Some).0: &str)
    SourceInfo(regex-lite/src/nfa.rs:549:25-549:29)
  2: StorageLive(_40)
    SourceInfo(regex-lite/src/nfa.rs:550:21-550:25)
  3: StorageLive(_41)
    SourceInfo(regex-lite/src/nfa.rs:550:38-550:42)
  4: _41 = _39
    SourceInfo(regex-lite/src/nfa.rs:550:38-550:42)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:550:28-550:43)
      kind: _40 = <alloc::sync::Arc<str> as core::convert::From<&str>>::from(move _41) -> [return: bb23, unwind: bb108]
  }
  preds [bb21]
  succs [bb23, bb108]

bb23
  0: StorageDead(_41)
    SourceInfo(regex-lite/src/nfa.rs:550:42-550:43)
  1: FakeRead(ForLet(None), _40)
    SourceInfo(regex-lite/src/nfa.rs:550:21-550:25)
  2: StorageLive(_42)
    SourceInfo(regex-lite/src/nfa.rs:551:21-551:28)
  3: StorageLive(_43)
    SourceInfo(regex-lite/src/nfa.rs:551:31-551:39)
  4: _43 = &((*_1).1: core::cell::RefCell<nfa::NFA>)
    SourceInfo(regex-lite/src/nfa.rs:551:31-551:39)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:551:31-551:52)
      kind: _42 = core::cell::RefCell::<nfa::NFA>::borrow_mut(move _43) -> [return: bb24, unwind: bb104]
  }
  preds [bb22]
  succs [bb24, bb104]

bb24
  0: StorageDead(_43)
    SourceInfo(regex-lite/src/nfa.rs:551:51-551:52)
  1: FakeRead(ForLet(None), _42)
    SourceInfo(regex-lite/src/nfa.rs:551:21-551:28)
  2: StorageLive(_44)
    SourceInfo(regex-lite/src/nfa.rs:552:17-552:71)
  3: StorageLive(_45)
    SourceInfo(regex-lite/src/nfa.rs:552:17-552:38)
  4: StorageLive(_46)
    SourceInfo(regex-lite/src/nfa.rs:552:17-552:38)
  5: StorageLive(_47)
    SourceInfo(regex-lite/src/nfa.rs:552:17-552:20)
  6: _47 = &mut _42
    SourceInfo(regex-lite/src/nfa.rs:552:17-552:20)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:552:17-552:38)
      kind: _46 = <core::cell::RefMut<'_, nfa::NFA> as core::ops::DerefMut>::deref_mut(move _47) -> [return: bb25, unwind: bb103]
  }
  preds [bb23]
  succs [bb25, bb103]

bb25
  0: StorageDead(_47)
    SourceInfo(regex-lite/src/nfa.rs:552:19-552:20)
  1: _45 = &mut ((*_46).6: std::collections::HashMap<alloc::sync::Arc<str>, u32>)
    SourceInfo(regex-lite/src/nfa.rs:552:17-552:38)
  2: StorageLive(_48)
    SourceInfo(regex-lite/src/nfa.rs:552:46-552:63)
  3: StorageLive(_49)
    SourceInfo(regex-lite/src/nfa.rs:552:57-552:62)
  4: StorageLive(_50)
    SourceInfo(regex-lite/src/nfa.rs:552:57-552:62)
  5: _50 = &_40
    SourceInfo(regex-lite/src/nfa.rs:552:57-552:62)
  6: _49 = &(*_50)
    SourceInfo(regex-lite/src/nfa.rs:552:57-552:62)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:552:46-552:63)
      kind: _48 = <alloc::sync::Arc<str> as core::clone::Clone>::clone(move _49) -> [return: bb26, unwind: bb103]
  }
  preds [bb24]
  succs [bb26, bb103]

bb26
  0: StorageDead(_49)
    SourceInfo(regex-lite/src/nfa.rs:552:62-552:63)
  1: StorageLive(_51)
    SourceInfo(regex-lite/src/nfa.rs:552:65-552:70)
  2: _51 = _2
    SourceInfo(regex-lite/src/nfa.rs:552:65-552:70)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:552:17-552:71)
      kind: _44 = std::collections::HashMap::<alloc::sync::Arc<str>, u32>::insert(move _45, move _48, move _51) -> [return: bb27, unwind: bb102]
  }
  preds [bb25]
  succs [bb27, bb102]

bb27
  0: StorageDead(_51)
    SourceInfo(regex-lite/src/nfa.rs:552:70-552:71)
  1: StorageDead(_48)
    SourceInfo(regex-lite/src/nfa.rs:552:70-552:71)
  2: StorageDead(_45)
    SourceInfo(regex-lite/src/nfa.rs:552:70-552:71)
  3: StorageDead(_50)
    SourceInfo(regex-lite/src/nfa.rs:552:71-552:72)
  4: StorageDead(_46)
    SourceInfo(regex-lite/src/nfa.rs:552:71-552:72)
  5: StorageDead(_44)
    SourceInfo(regex-lite/src/nfa.rs:552:71-552:72)
  6: StorageLive(_52)
    SourceInfo(regex-lite/src/nfa.rs:553:17-553:68)
  7: StorageLive(_53)
    SourceInfo(regex-lite/src/nfa.rs:553:17-553:38)
  8: StorageLive(_54)
    SourceInfo(regex-lite/src/nfa.rs:553:17-553:38)
  9: StorageLive(_55)
    SourceInfo(regex-lite/src/nfa.rs:553:17-553:20)
  10: _55 = &mut _42
    SourceInfo(regex-lite/src/nfa.rs:553:17-553:20)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:553:17-553:38)
      kind: _54 = <core::cell::RefMut<'_, nfa::NFA> as core::ops::DerefMut>::deref_mut(move _55) -> [return: bb28, unwind: bb103]
  }
  preds [bb26]
  succs [bb28, bb103]

bb28
  0: StorageDead(_55)
    SourceInfo(regex-lite/src/nfa.rs:553:19-553:20)
  1: _53 = &mut ((*_54).7: alloc::vec::Vec<core::option::Option<alloc::sync::Arc<str>>>)
    SourceInfo(regex-lite/src/nfa.rs:553:17-553:38)
  2: StorageLive(_56)
    SourceInfo(regex-lite/src/nfa.rs:553:44-553:67)
  3: StorageLive(_57)
    SourceInfo(regex-lite/src/nfa.rs:553:49-553:66)
  4: StorageLive(_58)
    SourceInfo(regex-lite/src/nfa.rs:553:60-553:65)
  5: StorageLive(_59)
    SourceInfo(regex-lite/src/nfa.rs:553:60-553:65)
  6: _59 = &_40
    SourceInfo(regex-lite/src/nfa.rs:553:60-553:65)
  7: _58 = &(*_59)
    SourceInfo(regex-lite/src/nfa.rs:553:60-553:65)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:553:49-553:66)
      kind: _57 = <alloc::sync::Arc<str> as core::clone::Clone>::clone(move _58) -> [return: bb29, unwind: bb103]
  }
  preds [bb27]
  succs [bb29, bb103]

bb29
  0: StorageDead(_58)
    SourceInfo(regex-lite/src/nfa.rs:553:65-553:66)
  1: _56 = core::option::Option::<alloc::sync::Arc<str>>::Some(move _57)
    SourceInfo(regex-lite/src/nfa.rs:553:44-553:67)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:553:66-553:67)
      kind: drop(_57) -> [return: bb30, unwind: bb101]
  }
  preds [bb28]
  succs [bb30, bb101]

bb30
  0: StorageDead(_57)
    SourceInfo(regex-lite/src/nfa.rs:553:66-553:67)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:553:17-553:68)
      kind: _52 = alloc::vec::Vec::<core::option::Option<alloc::sync::Arc<str>>>::push(move _53, move _56) -> [return: bb31, unwind: bb101]
  }
  preds [bb29]
  succs [bb31, bb101]

bb31
  0: StorageDead(_56)
    SourceInfo(regex-lite/src/nfa.rs:553:67-553:68)
  1: StorageDead(_53)
    SourceInfo(regex-lite/src/nfa.rs:553:67-553:68)
  2: StorageDead(_59)
    SourceInfo(regex-lite/src/nfa.rs:553:68-553:69)
  3: StorageDead(_54)
    SourceInfo(regex-lite/src/nfa.rs:553:68-553:69)
  4: StorageDead(_52)
    SourceInfo(regex-lite/src/nfa.rs:553:68-553:69)
  5: StorageLive(_60)
    SourceInfo(regex-lite/src/nfa.rs:555:37-555:66)
  6: StorageLive(_61)
    SourceInfo(regex-lite/src/nfa.rs:555:37-555:47)
  7: StorageLive(_62)
    SourceInfo(regex-lite/src/nfa.rs:555:37-555:41)
  8: StorageLive(_63)
    SourceInfo(regex-lite/src/nfa.rs:555:37-555:47)
  9: StorageLive(_64)
    SourceInfo(regex-lite/src/nfa.rs:555:37-555:41)
  10: _64 = &_40
    SourceInfo(regex-lite/src/nfa.rs:555:37-555:41)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:555:37-555:47)
      kind: _63 = <alloc::sync::Arc<str> as core::ops::Deref>::deref(move _64) -> [return: bb32, unwind: bb103]
  }
  preds [bb30]
  succs [bb32, bb103]

bb32
  0: _62 = &(*_63)
    SourceInfo(regex-lite/src/nfa.rs:555:37-555:41)
  1: StorageDead(_64)
    SourceInfo(regex-lite/src/nfa.rs:555:40-555:41)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:555:37-555:47)
      kind: _61 = core::str::<impl str>::len(move _62) -> [return: bb33, unwind: bb103]
  }
  preds [bb31]
  succs [bb33, bb103]

bb33
  0: StorageDead(_62)
    SourceInfo(regex-lite/src/nfa.rs:555:46-555:47)
  1: StorageLive(_65)
    SourceInfo(regex-lite/src/nfa.rs:555:50-555:66)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:555:50-555:66)
      kind: _65 = core::mem::size_of::<u32>() -> [return: bb34, unwind: bb103]
  }
  preds [bb32]
  succs [bb34, bb103]

bb34
  0: _66 = AddWithOverflow(_61, _65)
    SourceInfo(regex-lite/src/nfa.rs:555:37-555:66)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:555:37-555:66)
      kind: assert(!move (_66.1: bool), "attempt to compute `{} + {}`, which would overflow", move _61, move _65) -> [success: bb35, unwind: bb103]
  }
  preds [bb33]
  succs [bb35, bb103]

bb35
  0: _60 = move (_66.0: usize)
    SourceInfo(regex-lite/src/nfa.rs:555:37-555:66)
  1: StorageDead(_65)
    SourceInfo(regex-lite/src/nfa.rs:555:65-555:66)
  2: StorageDead(_61)
    SourceInfo(regex-lite/src/nfa.rs:555:65-555:66)
  3: StorageLive(_67)
    SourceInfo(regex-lite/src/nfa.rs:555:17-555:33)
  4: StorageLive(_68)
    SourceInfo(regex-lite/src/nfa.rs:555:17-555:20)
  5: _68 = &mut _42
    SourceInfo(regex-lite/src/nfa.rs:555:17-555:20)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:555:17-555:33)
      kind: _67 = <core::cell::RefMut<'_, nfa::NFA> as core::ops::DerefMut>::deref_mut(move _68) -> [return: bb36, unwind: bb103]
  }
  preds [bb34]
  succs [bb36, bb103]

bb36
  0: StorageDead(_68)
    SourceInfo(regex-lite/src/nfa.rs:555:19-555:20)
  1: _69 = AddWithOverflow(((*_67).8: usize), _60)
    SourceInfo(regex-lite/src/nfa.rs:555:17-555:66)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:555:17-555:66)
      kind: assert(!move (_69.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_67).8: usize), move _60) -> [success: bb37, unwind: bb103]
  }
  preds [bb35]
  succs [bb37, bb103]

bb37
  0: ((*_67).8: usize) = move (_69.0: usize)
    SourceInfo(regex-lite/src/nfa.rs:555:17-555:66)
  1: StorageDead(_60)
    SourceInfo(regex-lite/src/nfa.rs:555:65-555:66)
  2: StorageDead(_67)
    SourceInfo(regex-lite/src/nfa.rs:555:66-555:67)
  3: StorageDead(_63)
    SourceInfo(regex-lite/src/nfa.rs:555:66-555:67)
  4: _33 = const ()
    SourceInfo(regex-lite/src/nfa.rs:549:38-556:14)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:556:13-556:14)
      kind: drop(_42) -> [return: bb38, unwind: bb104]
  }
  preds [bb36]
  succs [bb38, bb104]

bb38
  0: StorageDead(_42)
    SourceInfo(regex-lite/src/nfa.rs:556:13-556:14)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:556:13-556:14)
      kind: drop(_40) -> [return: bb39, unwind: bb108]
  }
  preds [bb37]
  succs [bb39, bb108]

bb39
  0: StorageDead(_40)
    SourceInfo(regex-lite/src/nfa.rs:556:13-556:14)
  1: StorageDead(_39)
    SourceInfo(regex-lite/src/nfa.rs:556:13-556:14)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:549:13-558:14)
      kind: goto -> bb46
  }
  preds [bb38]
  succs [bb46]

bb40
  0: StorageLive(_70)
    SourceInfo(regex-lite/src/nfa.rs:557:17-557:67)
  1: StorageLive(_71)
    SourceInfo(regex-lite/src/nfa.rs:557:17-557:56)
  2: StorageLive(_72)
    SourceInfo(regex-lite/src/nfa.rs:557:17-557:56)
  3: StorageLive(_73)
    SourceInfo(regex-lite/src/nfa.rs:557:17-557:38)
  4: StorageLive(_74)
    SourceInfo(regex-lite/src/nfa.rs:557:17-557:38)
  5: StorageLive(_75)
    SourceInfo(regex-lite/src/nfa.rs:557:17-557:25)
  6: _75 = &((*_1).1: core::cell::RefCell<nfa::NFA>)
    SourceInfo(regex-lite/src/nfa.rs:557:17-557:25)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:557:17-557:38)
      kind: _74 = core::cell::RefCell::<nfa::NFA>::borrow_mut(move _75) -> [return: bb41, unwind: bb108]
  }
  preds [bb20, bb21]
  succs [bb41, bb108]

bb41
  0: _73 = &mut _74
    SourceInfo(regex-lite/src/nfa.rs:557:17-557:38)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:557:17-557:56)
      kind: _72 = <core::cell::RefMut<'_, nfa::NFA> as core::ops::DerefMut>::deref_mut(move _73) -> [return: bb42, unwind: bb100]
  }
  preds [bb40]
  succs [bb42, bb100]

bb42
  0: StorageDead(_75)
    SourceInfo(regex-lite/src/nfa.rs:557:37-557:38)
  1: StorageDead(_73)
    SourceInfo(regex-lite/src/nfa.rs:557:37-557:38)
  2: _71 = &mut ((*_72).7: alloc::vec::Vec<core::option::Option<alloc::sync::Arc<str>>>)
    SourceInfo(regex-lite/src/nfa.rs:557:17-557:56)
  3: StorageLive(_76)
    SourceInfo(regex-lite/src/nfa.rs:557:62-557:66)
  4: _76 = core::option::Option::<alloc::sync::Arc<str>>::None
    SourceInfo(regex-lite/src/nfa.rs:557:62-557:66)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:557:17-557:67)
      kind: _70 = alloc::vec::Vec::<core::option::Option<alloc::sync::Arc<str>>>::push(move _71, move _76) -> [return: bb43, unwind: bb99]
  }
  preds [bb41]
  succs [bb43, bb99]

bb43
  0: StorageDead(_76)
    SourceInfo(regex-lite/src/nfa.rs:557:66-557:67)
  1: StorageDead(_71)
    SourceInfo(regex-lite/src/nfa.rs:557:66-557:67)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:557:67-557:68)
      kind: drop(_74) -> [return: bb44, unwind: bb108]
  }
  preds [bb42]
  succs [bb44, bb108]

bb44
  0: StorageDead(_74)
    SourceInfo(regex-lite/src/nfa.rs:557:67-557:68)
  1: StorageDead(_72)
    SourceInfo(regex-lite/src/nfa.rs:557:67-557:68)
  2: StorageDead(_70)
    SourceInfo(regex-lite/src/nfa.rs:557:67-557:68)
  3: _33 = const ()
    SourceInfo(regex-lite/src/nfa.rs:556:20-558:14)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:549:13-558:14)
      kind: goto -> bb46
  }
  preds [bb43]
  succs [bb46]

bb45
  0: StorageDead(_37)
    SourceInfo(regex-lite/src/nfa.rs:548:50-548:51)
  1: StorageDead(_35)
    SourceInfo(regex-lite/src/nfa.rs:548:50-548:51)
  2: _33 = const ()
    SourceInfo(regex-lite/src/nfa.rs:559:10-559:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:548:9-559:10)
      kind: goto -> bb46
  }
  preds [bb19]
  succs [bb46]

bb46
  0: StorageDead(_34)
    SourceInfo(regex-lite/src/nfa.rs:559:9-559:10)
  1: StorageDead(_33)
    SourceInfo(regex-lite/src/nfa.rs:559:9-559:10)
  2: StorageLive(_79)
    SourceInfo(regex-lite/src/nfa.rs:561:18-561:22)
  3: StorageLive(_80)
    SourceInfo(regex-lite/src/nfa.rs:561:26-561:46)
  4: StorageLive(_81)
    SourceInfo(regex-lite/src/nfa.rs:561:26-561:31)
  5: _81 = _2
    SourceInfo(regex-lite/src/nfa.rs:561:26-561:31)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:561:26-561:46)
      kind: _80 = core::num::<impl u32>::checked_mul(move _81, const 2_u32) -> [return: bb48, unwind: bb108]
  }
  preds [bb39, bb44, bb45]
  succs [bb48, bb108]

bb47
  0: _0 = core::result::Result::<nfa::ThompsonRef, error::Error>::Err(move _78)
    SourceInfo(regex-lite/src/nfa.rs:562:20-562:68)
  1: StorageDead(_78)
    SourceInfo(regex-lite/src/nfa.rs:562:67-562:68)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:562:13-562:68)
      kind: goto -> bb95
  }
  preds [bb51]
  succs [bb95]

bb48
  0: StorageDead(_81)
    SourceInfo(regex-lite/src/nfa.rs:561:45-561:46)
  1: PlaceMention(_80)
    SourceInfo(regex-lite/src/nfa.rs:561:26-561:46)
  2: _82 = discriminant(_80)
    SourceInfo(regex-lite/src/nfa.rs:561:26-561:46)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:561:13-561:23)
      kind: switchInt(move _82) -> [1: bb49, otherwise: bb51]
  }
  preds [bb46]
  succs [bb49, bb51]

bb49
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:561:13-561:23)
      kind: falseEdge -> [real: bb50, imaginary: bb51]
  }
  preds [bb48]
  succs [bb50, bb51]

bb50
  0: _79 = ((_80 as Some).0: u32)
    SourceInfo(regex-lite/src/nfa.rs:561:18-561:22)
  1: StorageDead(_80)
    SourceInfo(regex-lite/src/nfa.rs:563:10-563:11)
  2: StorageLive(_83)
    SourceInfo(regex-lite/src/nfa.rs:564:13-564:18)
  3: StorageLive(_84)
    SourceInfo(regex-lite/src/nfa.rs:564:21-564:66)
  4: StorageLive(_85)
    SourceInfo(regex-lite/src/nfa.rs:564:21-564:65)
  5: StorageLive(_86)
    SourceInfo(regex-lite/src/nfa.rs:564:21-564:25)
  6: _86 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:564:21-564:25)
  7: StorageLive(_87)
    SourceInfo(regex-lite/src/nfa.rs:564:30-564:64)
  8: StorageLive(_88)
    SourceInfo(regex-lite/src/nfa.rs:564:58-564:62)
  9: _88 = _79
    SourceInfo(regex-lite/src/nfa.rs:564:58-564:62)
  10: _87 = nfa::State::Capture { target: const 0_u32, slot: move _88 }
    SourceInfo(regex-lite/src/nfa.rs:564:30-564:64)
  11: StorageDead(_88)
    SourceInfo(regex-lite/src/nfa.rs:564:63-564:64)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:564:21-564:65)
      kind: _85 = nfa::Compiler::add(move _86, move _87) -> [return: bb52, unwind: bb98]
  }
  preds [bb49]
  succs [bb52, bb98]

bb51
  0: StorageDead(_80)
    SourceInfo(regex-lite/src/nfa.rs:563:10-563:11)
  1: StorageDead(_79)
    SourceInfo(regex-lite/src/nfa.rs:574:5-574:6)
  2: StorageLive(_78)
    SourceInfo(regex-lite/src/nfa.rs:562:24-562:67)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:562:24-562:67)
      kind: _78 = error::Error::new(const "capture group slots exhausted") -> [return: bb47, unwind: bb108]
  }
  preds [bb48, bb49]
  succs [bb47, bb108]

bb52
  0: StorageDead(_87)
    SourceInfo(regex-lite/src/nfa.rs:564:64-564:65)
  1: StorageDead(_86)
    SourceInfo(regex-lite/src/nfa.rs:564:64-564:65)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:564:21-564:66)
      kind: _84 = <core::result::Result<u32, error::Error> as core::ops::Try>::branch(move _85) -> [return: bb53, unwind: bb108]
  }
  preds [bb50]
  succs [bb53, bb108]

bb53
  0: StorageDead(_85)
    SourceInfo(regex-lite/src/nfa.rs:564:65-564:66)
  1: PlaceMention(_84)
    SourceInfo(regex-lite/src/nfa.rs:564:21-564:66)
  2: _89 = discriminant(_84)
    SourceInfo(regex-lite/src/nfa.rs:564:21-564:66)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:564:21-564:66)
      kind: switchInt(move _89) -> [0: bb56, 1: bb55, otherwise: bb54]
  }
  preds [bb52]
  succs [bb54, bb55, bb56]

bb54
  0: FakeRead(ForMatchedPlace(None), _84)
    SourceInfo(regex-lite/src/nfa.rs:564:21-564:66)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:564:21-564:66)
      kind: unreachable
  }
  preds [bb53]
  succs []

bb55
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:564:65-564:66)
      kind: falseEdge -> [real: bb57, imaginary: bb56]
  }
  preds [bb53]
  succs [bb56, bb57]

bb56
  0: StorageLive(_93)
    SourceInfo(regex-lite/src/nfa.rs:564:21-564:66)
  1: _93 = ((_84 as Continue).0: u32)
    SourceInfo(regex-lite/src/nfa.rs:564:21-564:66)
  2: _83 = _93
    SourceInfo(regex-lite/src/nfa.rs:564:21-564:66)
  3: StorageDead(_93)
    SourceInfo(regex-lite/src/nfa.rs:564:65-564:66)
  4: FakeRead(ForLet(None), _83)
    SourceInfo(regex-lite/src/nfa.rs:564:13-564:18)
  5: StorageDead(_84)
    SourceInfo(regex-lite/src/nfa.rs:564:66-564:67)
  6: StorageLive(_94)
    SourceInfo(regex-lite/src/nfa.rs:565:13-565:18)
  7: StorageLive(_95)
    SourceInfo(regex-lite/src/nfa.rs:565:21-565:33)
  8: StorageLive(_96)
    SourceInfo(regex-lite/src/nfa.rs:565:21-565:32)
  9: StorageLive(_97)
    SourceInfo(regex-lite/src/nfa.rs:565:21-565:25)
  10: _97 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:565:21-565:25)
  11: StorageLive(_98)
    SourceInfo(regex-lite/src/nfa.rs:565:28-565:31)
  12: _98 = &(*_4)
    SourceInfo(regex-lite/src/nfa.rs:565:28-565:31)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:565:21-565:32)
      kind: _96 = nfa::Compiler::c(move _97, move _98) -> [return: bb59, unwind: bb108]
  }
  preds [bb53, bb55]
  succs [bb59, bb108]

bb57
  0: StorageLive(_90)
    SourceInfo(regex-lite/src/nfa.rs:564:65-564:66)
  1: _90 = move ((_84 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:564:65-564:66)
  2: StorageLive(_92)
    SourceInfo(regex-lite/src/nfa.rs:564:65-564:66)
  3: _92 = move _90
    SourceInfo(regex-lite/src/nfa.rs:564:65-564:66)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:564:21-564:66)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _92) -> [return: bb58, unwind: bb108]
  }
  preds [bb55]
  succs [bb58, bb108]

bb58
  0: StorageDead(_92)
    SourceInfo(regex-lite/src/nfa.rs:564:65-564:66)
  1: StorageDead(_90)
    SourceInfo(regex-lite/src/nfa.rs:564:65-564:66)
  2: StorageDead(_84)
    SourceInfo(regex-lite/src/nfa.rs:564:66-564:67)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb94
  }
  preds [bb57]
  succs [bb94]

bb59
  0: StorageDead(_98)
    SourceInfo(regex-lite/src/nfa.rs:565:31-565:32)
  1: StorageDead(_97)
    SourceInfo(regex-lite/src/nfa.rs:565:31-565:32)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:565:21-565:33)
      kind: _95 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::Try>::branch(move _96) -> [return: bb60, unwind: bb108]
  }
  preds [bb56]
  succs [bb60, bb108]

bb60
  0: StorageDead(_96)
    SourceInfo(regex-lite/src/nfa.rs:565:32-565:33)
  1: PlaceMention(_95)
    SourceInfo(regex-lite/src/nfa.rs:565:21-565:33)
  2: _99 = discriminant(_95)
    SourceInfo(regex-lite/src/nfa.rs:565:21-565:33)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:565:21-565:33)
      kind: switchInt(move _99) -> [0: bb63, 1: bb62, otherwise: bb61]
  }
  preds [bb59]
  succs [bb61, bb62, bb63]

bb61
  0: FakeRead(ForMatchedPlace(None), _95)
    SourceInfo(regex-lite/src/nfa.rs:565:21-565:33)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:565:21-565:33)
      kind: unreachable
  }
  preds [bb60]
  succs []

bb62
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:565:32-565:33)
      kind: falseEdge -> [real: bb64, imaginary: bb63]
  }
  preds [bb60]
  succs [bb63, bb64]

bb63
  0: StorageLive(_103)
    SourceInfo(regex-lite/src/nfa.rs:565:21-565:33)
  1: _103 = ((_95 as Continue).0: nfa::ThompsonRef)
    SourceInfo(regex-lite/src/nfa.rs:565:21-565:33)
  2: _94 = _103
    SourceInfo(regex-lite/src/nfa.rs:565:21-565:33)
  3: StorageDead(_103)
    SourceInfo(regex-lite/src/nfa.rs:565:32-565:33)
  4: FakeRead(ForLet(None), _94)
    SourceInfo(regex-lite/src/nfa.rs:565:13-565:18)
  5: StorageDead(_95)
    SourceInfo(regex-lite/src/nfa.rs:565:33-565:34)
  6: StorageLive(_106)
    SourceInfo(regex-lite/src/nfa.rs:566:18-566:22)
  7: StorageLive(_107)
    SourceInfo(regex-lite/src/nfa.rs:566:26-566:45)
  8: StorageLive(_108)
    SourceInfo(regex-lite/src/nfa.rs:566:26-566:30)
  9: _108 = _79
    SourceInfo(regex-lite/src/nfa.rs:566:26-566:30)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:566:26-566:45)
      kind: _107 = core::num::<impl u32>::checked_add(move _108, const 1_u32) -> [return: bb67, unwind: bb108]
  }
  preds [bb60, bb62]
  succs [bb67, bb108]

bb64
  0: StorageLive(_100)
    SourceInfo(regex-lite/src/nfa.rs:565:32-565:33)
  1: _100 = move ((_95 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:565:32-565:33)
  2: StorageLive(_102)
    SourceInfo(regex-lite/src/nfa.rs:565:32-565:33)
  3: _102 = move _100
    SourceInfo(regex-lite/src/nfa.rs:565:32-565:33)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:565:21-565:33)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _102) -> [return: bb65, unwind: bb108]
  }
  preds [bb62]
  succs [bb65, bb108]

bb65
  0: StorageDead(_102)
    SourceInfo(regex-lite/src/nfa.rs:565:32-565:33)
  1: StorageDead(_100)
    SourceInfo(regex-lite/src/nfa.rs:565:32-565:33)
  2: StorageDead(_95)
    SourceInfo(regex-lite/src/nfa.rs:565:33-565:34)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb93
  }
  preds [bb64]
  succs [bb93]

bb66
  0: _0 = core::result::Result::<nfa::ThompsonRef, error::Error>::Err(move _105)
    SourceInfo(regex-lite/src/nfa.rs:567:20-567:68)
  1: StorageDead(_105)
    SourceInfo(regex-lite/src/nfa.rs:567:67-567:68)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:567:13-567:68)
      kind: goto -> bb93
  }
  preds [bb70]
  succs [bb93]

bb67
  0: StorageDead(_108)
    SourceInfo(regex-lite/src/nfa.rs:566:44-566:45)
  1: PlaceMention(_107)
    SourceInfo(regex-lite/src/nfa.rs:566:26-566:45)
  2: _109 = discriminant(_107)
    SourceInfo(regex-lite/src/nfa.rs:566:26-566:45)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:566:13-566:23)
      kind: switchInt(move _109) -> [1: bb68, otherwise: bb70]
  }
  preds [bb63]
  succs [bb68, bb70]

bb68
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:566:13-566:23)
      kind: falseEdge -> [real: bb69, imaginary: bb70]
  }
  preds [bb67]
  succs [bb69, bb70]

bb69
  0: _106 = ((_107 as Some).0: u32)
    SourceInfo(regex-lite/src/nfa.rs:566:18-566:22)
  1: StorageDead(_107)
    SourceInfo(regex-lite/src/nfa.rs:568:10-568:11)
  2: StorageLive(_110)
    SourceInfo(regex-lite/src/nfa.rs:569:13-569:16)
  3: StorageLive(_111)
    SourceInfo(regex-lite/src/nfa.rs:569:19-569:64)
  4: StorageLive(_112)
    SourceInfo(regex-lite/src/nfa.rs:569:19-569:63)
  5: StorageLive(_113)
    SourceInfo(regex-lite/src/nfa.rs:569:19-569:23)
  6: _113 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:569:19-569:23)
  7: StorageLive(_114)
    SourceInfo(regex-lite/src/nfa.rs:569:28-569:62)
  8: StorageLive(_115)
    SourceInfo(regex-lite/src/nfa.rs:569:56-569:60)
  9: _115 = _106
    SourceInfo(regex-lite/src/nfa.rs:569:56-569:60)
  10: _114 = nfa::State::Capture { target: const 0_u32, slot: move _115 }
    SourceInfo(regex-lite/src/nfa.rs:569:28-569:62)
  11: StorageDead(_115)
    SourceInfo(regex-lite/src/nfa.rs:569:61-569:62)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:569:19-569:63)
      kind: _112 = nfa::Compiler::add(move _113, move _114) -> [return: bb71, unwind: bb97]
  }
  preds [bb68]
  succs [bb71, bb97]

bb70
  0: StorageDead(_107)
    SourceInfo(regex-lite/src/nfa.rs:568:10-568:11)
  1: StorageDead(_106)
    SourceInfo(regex-lite/src/nfa.rs:574:5-574:6)
  2: StorageLive(_105)
    SourceInfo(regex-lite/src/nfa.rs:567:24-567:67)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:567:24-567:67)
      kind: _105 = error::Error::new(const "capture group slots exhausted") -> [return: bb66, unwind: bb108]
  }
  preds [bb67, bb68]
  succs [bb66, bb108]

bb71
  0: StorageDead(_114)
    SourceInfo(regex-lite/src/nfa.rs:569:62-569:63)
  1: StorageDead(_113)
    SourceInfo(regex-lite/src/nfa.rs:569:62-569:63)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:569:19-569:64)
      kind: _111 = <core::result::Result<u32, error::Error> as core::ops::Try>::branch(move _112) -> [return: bb72, unwind: bb108]
  }
  preds [bb69]
  succs [bb72, bb108]

bb72
  0: StorageDead(_112)
    SourceInfo(regex-lite/src/nfa.rs:569:63-569:64)
  1: PlaceMention(_111)
    SourceInfo(regex-lite/src/nfa.rs:569:19-569:64)
  2: _116 = discriminant(_111)
    SourceInfo(regex-lite/src/nfa.rs:569:19-569:64)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:569:19-569:64)
      kind: switchInt(move _116) -> [0: bb75, 1: bb74, otherwise: bb73]
  }
  preds [bb71]
  succs [bb73, bb74, bb75]

bb73
  0: FakeRead(ForMatchedPlace(None), _111)
    SourceInfo(regex-lite/src/nfa.rs:569:19-569:64)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:569:19-569:64)
      kind: unreachable
  }
  preds [bb72]
  succs []

bb74
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:569:63-569:64)
      kind: falseEdge -> [real: bb76, imaginary: bb75]
  }
  preds [bb72]
  succs [bb75, bb76]

bb75
  0: StorageLive(_120)
    SourceInfo(regex-lite/src/nfa.rs:569:19-569:64)
  1: _120 = ((_111 as Continue).0: u32)
    SourceInfo(regex-lite/src/nfa.rs:569:19-569:64)
  2: _110 = _120
    SourceInfo(regex-lite/src/nfa.rs:569:19-569:64)
  3: StorageDead(_120)
    SourceInfo(regex-lite/src/nfa.rs:569:63-569:64)
  4: FakeRead(ForLet(None), _110)
    SourceInfo(regex-lite/src/nfa.rs:569:13-569:16)
  5: StorageDead(_111)
    SourceInfo(regex-lite/src/nfa.rs:569:64-569:65)
  6: StorageLive(_121)
    SourceInfo(regex-lite/src/nfa.rs:570:9-570:40)
  7: StorageLive(_122)
    SourceInfo(regex-lite/src/nfa.rs:570:9-570:40)
  8: StorageLive(_123)
    SourceInfo(regex-lite/src/nfa.rs:570:9-570:39)
  9: StorageLive(_124)
    SourceInfo(regex-lite/src/nfa.rs:570:9-570:13)
  10: _124 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:570:9-570:13)
  11: StorageLive(_125)
    SourceInfo(regex-lite/src/nfa.rs:570:20-570:25)
  12: _125 = _83
    SourceInfo(regex-lite/src/nfa.rs:570:20-570:25)
  13: StorageLive(_126)
    SourceInfo(regex-lite/src/nfa.rs:570:27-570:38)
  14: _126 = (_94.0: u32)
    SourceInfo(regex-lite/src/nfa.rs:570:27-570:38)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:570:9-570:39)
      kind: _123 = nfa::Compiler::patch(move _124, move _125, move _126) -> [return: bb78, unwind: bb108]
  }
  preds [bb72, bb74]
  succs [bb78, bb108]

bb76
  0: StorageLive(_117)
    SourceInfo(regex-lite/src/nfa.rs:569:63-569:64)
  1: _117 = move ((_111 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:569:63-569:64)
  2: StorageLive(_119)
    SourceInfo(regex-lite/src/nfa.rs:569:63-569:64)
  3: _119 = move _117
    SourceInfo(regex-lite/src/nfa.rs:569:63-569:64)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:569:19-569:64)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _119) -> [return: bb77, unwind: bb108]
  }
  preds [bb74]
  succs [bb77, bb108]

bb77
  0: StorageDead(_119)
    SourceInfo(regex-lite/src/nfa.rs:569:63-569:64)
  1: StorageDead(_117)
    SourceInfo(regex-lite/src/nfa.rs:569:63-569:64)
  2: StorageDead(_111)
    SourceInfo(regex-lite/src/nfa.rs:569:64-569:65)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb92
  }
  preds [bb76]
  succs [bb92]

bb78
  0: StorageDead(_126)
    SourceInfo(regex-lite/src/nfa.rs:570:38-570:39)
  1: StorageDead(_125)
    SourceInfo(regex-lite/src/nfa.rs:570:38-570:39)
  2: StorageDead(_124)
    SourceInfo(regex-lite/src/nfa.rs:570:38-570:39)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:570:9-570:40)
      kind: _122 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _123) -> [return: bb79, unwind: bb108]
  }
  preds [bb75]
  succs [bb79, bb108]

bb79
  0: StorageDead(_123)
    SourceInfo(regex-lite/src/nfa.rs:570:39-570:40)
  1: PlaceMention(_122)
    SourceInfo(regex-lite/src/nfa.rs:570:9-570:40)
  2: _127 = discriminant(_122)
    SourceInfo(regex-lite/src/nfa.rs:570:9-570:40)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:570:9-570:40)
      kind: switchInt(move _127) -> [0: bb82, 1: bb81, otherwise: bb80]
  }
  preds [bb78]
  succs [bb80, bb81, bb82]

bb80
  0: FakeRead(ForMatchedPlace(None), _122)
    SourceInfo(regex-lite/src/nfa.rs:570:9-570:40)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:570:9-570:40)
      kind: unreachable
  }
  preds [bb79]
  succs []

bb81
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:570:39-570:40)
      kind: falseEdge -> [real: bb83, imaginary: bb82]
  }
  preds [bb79]
  succs [bb82, bb83]

bb82
  0: StorageLive(_131)
    SourceInfo(regex-lite/src/nfa.rs:570:9-570:40)
  1: _131 = ((_122 as Continue).0: ())
    SourceInfo(regex-lite/src/nfa.rs:570:9-570:40)
  2: _121 = _131
    SourceInfo(regex-lite/src/nfa.rs:570:9-570:40)
  3: StorageDead(_131)
    SourceInfo(regex-lite/src/nfa.rs:570:39-570:40)
  4: StorageDead(_122)
    SourceInfo(regex-lite/src/nfa.rs:570:40-570:41)
  5: StorageDead(_121)
    SourceInfo(regex-lite/src/nfa.rs:570:40-570:41)
  6: StorageLive(_132)
    SourceInfo(regex-lite/src/nfa.rs:571:9-571:36)
  7: StorageLive(_133)
    SourceInfo(regex-lite/src/nfa.rs:571:9-571:36)
  8: StorageLive(_134)
    SourceInfo(regex-lite/src/nfa.rs:571:9-571:35)
  9: StorageLive(_135)
    SourceInfo(regex-lite/src/nfa.rs:571:9-571:13)
  10: _135 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:571:9-571:13)
  11: StorageLive(_136)
    SourceInfo(regex-lite/src/nfa.rs:571:20-571:29)
  12: _136 = (_94.1: u32)
    SourceInfo(regex-lite/src/nfa.rs:571:20-571:29)
  13: StorageLive(_137)
    SourceInfo(regex-lite/src/nfa.rs:571:31-571:34)
  14: _137 = _110
    SourceInfo(regex-lite/src/nfa.rs:571:31-571:34)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:571:9-571:35)
      kind: _134 = nfa::Compiler::patch(move _135, move _136, move _137) -> [return: bb85, unwind: bb108]
  }
  preds [bb79, bb81]
  succs [bb85, bb108]

bb83
  0: StorageLive(_128)
    SourceInfo(regex-lite/src/nfa.rs:570:39-570:40)
  1: _128 = move ((_122 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:570:39-570:40)
  2: StorageLive(_130)
    SourceInfo(regex-lite/src/nfa.rs:570:39-570:40)
  3: _130 = move _128
    SourceInfo(regex-lite/src/nfa.rs:570:39-570:40)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:570:9-570:40)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _130) -> [return: bb84, unwind: bb108]
  }
  preds [bb81]
  succs [bb84, bb108]

bb84
  0: StorageDead(_130)
    SourceInfo(regex-lite/src/nfa.rs:570:39-570:40)
  1: StorageDead(_128)
    SourceInfo(regex-lite/src/nfa.rs:570:39-570:40)
  2: StorageDead(_122)
    SourceInfo(regex-lite/src/nfa.rs:570:40-570:41)
  3: StorageDead(_121)
    SourceInfo(regex-lite/src/nfa.rs:570:40-570:41)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb92
  }
  preds [bb83]
  succs [bb92]

bb85
  0: StorageDead(_137)
    SourceInfo(regex-lite/src/nfa.rs:571:34-571:35)
  1: StorageDead(_136)
    SourceInfo(regex-lite/src/nfa.rs:571:34-571:35)
  2: StorageDead(_135)
    SourceInfo(regex-lite/src/nfa.rs:571:34-571:35)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:571:9-571:36)
      kind: _133 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _134) -> [return: bb86, unwind: bb108]
  }
  preds [bb82]
  succs [bb86, bb108]

bb86
  0: StorageDead(_134)
    SourceInfo(regex-lite/src/nfa.rs:571:35-571:36)
  1: PlaceMention(_133)
    SourceInfo(regex-lite/src/nfa.rs:571:9-571:36)
  2: _138 = discriminant(_133)
    SourceInfo(regex-lite/src/nfa.rs:571:9-571:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:571:9-571:36)
      kind: switchInt(move _138) -> [0: bb89, 1: bb88, otherwise: bb87]
  }
  preds [bb85]
  succs [bb87, bb88, bb89]

bb87
  0: FakeRead(ForMatchedPlace(None), _133)
    SourceInfo(regex-lite/src/nfa.rs:571:9-571:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:571:9-571:36)
      kind: unreachable
  }
  preds [bb86]
  succs []

bb88
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:571:35-571:36)
      kind: falseEdge -> [real: bb90, imaginary: bb89]
  }
  preds [bb86]
  succs [bb89, bb90]

bb89
  0: StorageLive(_142)
    SourceInfo(regex-lite/src/nfa.rs:571:9-571:36)
  1: _142 = ((_133 as Continue).0: ())
    SourceInfo(regex-lite/src/nfa.rs:571:9-571:36)
  2: _132 = _142
    SourceInfo(regex-lite/src/nfa.rs:571:9-571:36)
  3: StorageDead(_142)
    SourceInfo(regex-lite/src/nfa.rs:571:35-571:36)
  4: StorageDead(_133)
    SourceInfo(regex-lite/src/nfa.rs:571:36-571:37)
  5: StorageDead(_132)
    SourceInfo(regex-lite/src/nfa.rs:571:36-571:37)
  6: StorageLive(_143)
    SourceInfo(regex-lite/src/nfa.rs:573:12-573:38)
  7: StorageLive(_144)
    SourceInfo(regex-lite/src/nfa.rs:573:26-573:31)
  8: _144 = _83
    SourceInfo(regex-lite/src/nfa.rs:573:26-573:31)
  9: StorageLive(_145)
    SourceInfo(regex-lite/src/nfa.rs:573:33-573:36)
  10: _145 = _110
    SourceInfo(regex-lite/src/nfa.rs:573:33-573:36)
  11: _143 = nfa::ThompsonRef { start: move _144, end: move _145 }
    SourceInfo(regex-lite/src/nfa.rs:573:12-573:38)
  12: StorageDead(_145)
    SourceInfo(regex-lite/src/nfa.rs:573:37-573:38)
  13: StorageDead(_144)
    SourceInfo(regex-lite/src/nfa.rs:573:37-573:38)
  14: _0 = core::result::Result::<nfa::ThompsonRef, error::Error>::Ok(move _143)
    SourceInfo(regex-lite/src/nfa.rs:573:9-573:39)
  15: StorageDead(_143)
    SourceInfo(regex-lite/src/nfa.rs:573:38-573:39)
  16: StorageDead(_110)
    SourceInfo(regex-lite/src/nfa.rs:574:5-574:6)
  17: StorageDead(_106)
    SourceInfo(regex-lite/src/nfa.rs:574:5-574:6)
  18: StorageDead(_94)
    SourceInfo(regex-lite/src/nfa.rs:574:5-574:6)
  19: StorageDead(_83)
    SourceInfo(regex-lite/src/nfa.rs:574:5-574:6)
  20: StorageDead(_79)
    SourceInfo(regex-lite/src/nfa.rs:574:5-574:6)
  21: StorageDead(_5)
    SourceInfo(regex-lite/src/nfa.rs:574:5-574:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:574:6-574:6)
      kind: goto -> bb96
  }
  preds [bb86, bb88]
  succs [bb96]

bb90
  0: StorageLive(_139)
    SourceInfo(regex-lite/src/nfa.rs:571:35-571:36)
  1: _139 = move ((_133 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:571:35-571:36)
  2: StorageLive(_141)
    SourceInfo(regex-lite/src/nfa.rs:571:35-571:36)
  3: _141 = move _139
    SourceInfo(regex-lite/src/nfa.rs:571:35-571:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:571:9-571:36)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _141) -> [return: bb91, unwind: bb108]
  }
  preds [bb88]
  succs [bb91, bb108]

bb91
  0: StorageDead(_141)
    SourceInfo(regex-lite/src/nfa.rs:571:35-571:36)
  1: StorageDead(_139)
    SourceInfo(regex-lite/src/nfa.rs:571:35-571:36)
  2: StorageDead(_133)
    SourceInfo(regex-lite/src/nfa.rs:571:36-571:37)
  3: StorageDead(_132)
    SourceInfo(regex-lite/src/nfa.rs:571:36-571:37)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb92
  }
  preds [bb90]
  succs [bb92]

bb92
  0: StorageDead(_110)
    SourceInfo(regex-lite/src/nfa.rs:574:5-574:6)
  1: StorageDead(_106)
    SourceInfo(regex-lite/src/nfa.rs:574:5-574:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb93
  }
  preds [bb77, bb84, bb91]
  succs [bb93]

bb93
  0: StorageDead(_94)
    SourceInfo(regex-lite/src/nfa.rs:574:5-574:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb94
  }
  preds [bb65, bb66, bb92]
  succs [bb94]

bb94
  0: StorageDead(_83)
    SourceInfo(regex-lite/src/nfa.rs:574:5-574:6)
  1: StorageDead(_79)
    SourceInfo(regex-lite/src/nfa.rs:574:5-574:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb95
  }
  preds [bb58, bb93]
  succs [bb95]

bb95
  0: StorageDead(_5)
    SourceInfo(regex-lite/src/nfa.rs:574:5-574:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:574:6-574:6)
      kind: goto -> bb96
  }
  preds [bb47, bb94]
  succs [bb96]

bb96
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:574:6-574:6)
      kind: return
  }
  preds [bb89, bb95]
  succs []

bb97
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:569:62-569:63)
      kind: drop(_114) -> [return: bb108, unwind terminate(cleanup)]
  }
  preds [bb69]
  succs [bb108]

bb98
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:564:64-564:65)
      kind: drop(_87) -> [return: bb108, unwind terminate(cleanup)]
  }
  preds [bb50]
  succs [bb108]

bb99
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:557:66-557:67)
      kind: drop(_76) -> [return: bb100, unwind terminate(cleanup)]
  }
  preds [bb42]
  succs [bb100]

bb100
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:557:67-557:68)
      kind: drop(_74) -> [return: bb108, unwind terminate(cleanup)]
  }
  preds [bb41, bb99]
  succs [bb108]

bb101
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:553:67-553:68)
      kind: drop(_56) -> [return: bb103, unwind terminate(cleanup)]
  }
  preds [bb29, bb30]
  succs [bb103]

bb102
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:552:70-552:71)
      kind: drop(_48) -> [return: bb103, unwind terminate(cleanup)]
  }
  preds [bb26]
  succs [bb103]

bb103
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:556:13-556:14)
      kind: drop(_42) -> [return: bb104, unwind terminate(cleanup)]
  }
  preds [bb24, bb25, bb27, bb28, bb31, bb32, bb33, bb34, bb35, bb36, bb101, bb102]
  succs [bb104]

bb104
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:556:13-556:14)
      kind: drop(_40) -> [return: bb108, unwind terminate(cleanup)]
  }
  preds [bb23, bb37, bb103]
  succs [bb108]

bb105
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:546:62-546:63)
      kind: drop(_32) -> [return: bb106, unwind terminate(cleanup)]
  }
  preds [bb16]
  succs [bb106]

bb106
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:546:63-546:64)
      kind: drop(_30) -> [return: bb108, unwind terminate(cleanup)]
  }
  preds [bb15, bb105]
  succs [bb108]

bb107
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:544:76-544:77)
      kind: drop(_9) -> [return: bb108, unwind terminate(cleanup)]
  }
  preds [bb1, bb2]
  succs [bb108]

bb108
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:534:5-574:6)
      kind: resume
  }
  preds [bb0, bb3, bb4, bb5, bb6, bb8, bb9, bb13, bb14, bb17, bb22, bb38, bb40, bb43, bb46, bb51, bb52, bb56, bb57, bb59, bb63, bb64, bb70, bb71, bb75, bb76, bb78, bb82, bb83, bb85, bb90, bb97, bb98, bb100, bb104, bb106, bb107]
  succs []

