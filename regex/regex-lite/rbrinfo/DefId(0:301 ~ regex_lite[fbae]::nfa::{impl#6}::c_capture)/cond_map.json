{
  "regex-lite/src/nfa.rs:565:21:565:33": [
    {
      "Try": "self.c(hir)?"
    }
  ],
  "regex-lite/src/nfa.rs:545:18:545:75": [
    {
      "For": {
        "iter_var": "_",
        "iter_range": "0..(index.as_usize().saturating_sub(existing_groups_len))"
      }
    }
  ],
  "regex-lite/src/nfa.rs:564:21:564:66": [
    {
      "Try": "self.add(State::Capture { target: 0, slot })?"
    }
  ],
  "regex-lite/src/nfa.rs:555:37:555:66": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "name.len() + size_of::<u32>()",
          "lhs": "name.len()",
          "rhs": "size_of::<u32>()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-lite/src/nfa.rs:570:9:570:40": [
    {
      "Try": "self.patch(start, inner.start)?"
    }
  ],
  "regex-lite/src/nfa.rs:569:19:569:64": [
    {
      "Try": "self.add(State::Capture { target: 0, slot })?"
    }
  ],
  "regex-lite/src/nfa.rs:548:12:548:51": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ge",
          "expr": "index.as_usize() >= existing_groups_len",
          "lhs": "index.as_usize()",
          "rhs": "existing_groups_len",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-lite/src/nfa.rs:571:9:571:36": [
    {
      "Try": "self.patch(inner.end, end)?"
    }
  ],
  "regex-lite/src/nfa.rs:549:16:549:37": [
    {
      "Bool": {
        "Other": "let Some(name) = name"
      }
    }
  ]
}