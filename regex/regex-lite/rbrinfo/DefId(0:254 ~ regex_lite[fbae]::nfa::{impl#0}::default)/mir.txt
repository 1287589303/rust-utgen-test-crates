bb0
  0: StorageLive(_1)
    SourceInfo(regex-lite/src/nfa.rs:20:30-20:50)
  1: StorageLive(_2)
    SourceInfo(regex-lite/src/nfa.rs:20:35-20:49)
  2: StorageLive(_3)
    SourceInfo(regex-lite/src/nfa.rs:20:40-20:49)
  3: _4 = const 20_i32 as u32 (IntToInt)
    SourceInfo(regex-lite/src/nfa.rs:20:40-20:49)
  4: _5 = Lt(move _4, const 64_u32)
    SourceInfo(regex-lite/src/nfa.rs:20:40-20:49)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:20:40-20:49)
      kind: assert(move _5, "attempt to shift left by `{}`, which would overflow", const 20_i32) -> [success: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: _3 = Shl(const 1_usize, const 20_i32)
    SourceInfo(regex-lite/src/nfa.rs:20:40-20:49)
  1: _6 = MulWithOverflow(const 10_usize, _3)
    SourceInfo(regex-lite/src/nfa.rs:20:35-20:49)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:20:35-20:49)
      kind: assert(!move (_6.1: bool), "attempt to compute `{} * {}`, which would overflow", const 10_usize, move _3) -> [success: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: _2 = move (_6.0: usize)
    SourceInfo(regex-lite/src/nfa.rs:20:35-20:49)
  1: StorageDead(_3)
    SourceInfo(regex-lite/src/nfa.rs:20:48-20:49)
  2: _1 = core::option::Option::<usize>::Some(move _2)
    SourceInfo(regex-lite/src/nfa.rs:20:30-20:50)
  3: StorageDead(_2)
    SourceInfo(regex-lite/src/nfa.rs:20:49-20:50)
  4: _0 = nfa::Config { size_limit: move _1 }
    SourceInfo(regex-lite/src/nfa.rs:20:9-20:52)
  5: StorageDead(_1)
    SourceInfo(regex-lite/src/nfa.rs:20:51-20:52)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:21:6-21:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:19:5-21:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

