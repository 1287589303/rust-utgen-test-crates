bb0
  0: StorageLive(_2)
    SourceInfo(regex-lite/src/nfa.rs:697:9-701:10)
  1: PlaceMention((((*_1).0: nfa::Config).0: core::option::Option<usize>))
    SourceInfo(regex-lite/src/nfa.rs:697:30-697:52)
  2: _3 = discriminant((((*_1).0: nfa::Config).0: core::option::Option<usize>))
    SourceInfo(regex-lite/src/nfa.rs:697:30-697:52)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:697:16-697:27)
      kind: switchInt(move _3) -> [1: bb1, otherwise: bb11]
  }
  preds []
  succs [bb1, bb11]

bb1
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:697:16-697:27)
      kind: falseEdge -> [real: bb2, imaginary: bb11]
  }
  preds [bb0]
  succs [bb2, bb11]

bb2
  0: StorageLive(_4)
    SourceInfo(regex-lite/src/nfa.rs:697:21-697:26)
  1: _4 = (((((*_1).0: nfa::Config).0: core::option::Option<usize>) as Some).0: usize)
    SourceInfo(regex-lite/src/nfa.rs:697:21-697:26)
  2: StorageLive(_5)
    SourceInfo(regex-lite/src/nfa.rs:698:16-698:56)
  3: StorageLive(_6)
    SourceInfo(regex-lite/src/nfa.rs:698:16-698:48)
  4: StorageLive(_7)
    SourceInfo(regex-lite/src/nfa.rs:698:16-698:33)
  5: StorageLive(_8)
    SourceInfo(regex-lite/src/nfa.rs:698:16-698:48)
  6: StorageLive(_9)
    SourceInfo(regex-lite/src/nfa.rs:698:16-698:33)
  7: StorageLive(_10)
    SourceInfo(regex-lite/src/nfa.rs:698:16-698:33)
  8: StorageLive(_11)
    SourceInfo(regex-lite/src/nfa.rs:698:16-698:24)
  9: _11 = &((*_1).1: core::cell::RefCell<nfa::NFA>)
    SourceInfo(regex-lite/src/nfa.rs:698:16-698:24)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:698:16-698:33)
      kind: _10 = core::cell::RefCell::<nfa::NFA>::borrow(move _11) -> [return: bb3, unwind: bb15]
  }
  preds [bb1]
  succs [bb3, bb15]

bb3
  0: _9 = &_10
    SourceInfo(regex-lite/src/nfa.rs:698:16-698:33)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:698:16-698:48)
      kind: _8 = <core::cell::Ref<'_, nfa::NFA> as core::ops::Deref>::deref(move _9) -> [return: bb4, unwind: bb14]
  }
  preds [bb2]
  succs [bb4, bb14]

bb4
  0: _7 = &(*_8)
    SourceInfo(regex-lite/src/nfa.rs:698:16-698:33)
  1: StorageDead(_11)
    SourceInfo(regex-lite/src/nfa.rs:698:32-698:33)
  2: StorageDead(_9)
    SourceInfo(regex-lite/src/nfa.rs:698:32-698:33)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:698:16-698:48)
      kind: _6 = nfa::NFA::memory_usage(move _7) -> [return: bb5, unwind: bb14]
  }
  preds [bb3]
  succs [bb5, bb14]

bb5
  0: StorageDead(_7)
    SourceInfo(regex-lite/src/nfa.rs:698:47-698:48)
  1: StorageLive(_12)
    SourceInfo(regex-lite/src/nfa.rs:698:51-698:56)
  2: _12 = _4
    SourceInfo(regex-lite/src/nfa.rs:698:51-698:56)
  3: _5 = Gt(move _6, move _12)
    SourceInfo(regex-lite/src/nfa.rs:698:16-698:56)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:698:16-698:56)
      kind: switchInt(move _5) -> [0: bb9, otherwise: bb6]
  }
  preds [bb4]
  succs [bb6, bb9]

bb6
  0: StorageDead(_12)
    SourceInfo(regex-lite/src/nfa.rs:698:55-698:56)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:698:55-698:56)
      kind: drop(_10) -> [return: bb7, unwind: bb15]
  }
  preds [bb5]
  succs [bb7, bb15]

bb7
  0: StorageDead(_10)
    SourceInfo(regex-lite/src/nfa.rs:698:55-698:56)
  1: StorageDead(_8)
    SourceInfo(regex-lite/src/nfa.rs:698:55-698:56)
  2: StorageDead(_6)
    SourceInfo(regex-lite/src/nfa.rs:698:55-698:56)
  3: StorageLive(_14)
    SourceInfo(regex-lite/src/nfa.rs:699:28-699:76)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:699:28-699:76)
      kind: _14 = error::Error::new(const "compiled regex exceeded size limit") -> [return: bb8, unwind: bb15]
  }
  preds [bb6]
  succs [bb8, bb15]

bb8
  0: _0 = core::result::Result::<(), error::Error>::Err(move _14)
    SourceInfo(regex-lite/src/nfa.rs:699:24-699:77)
  1: StorageDead(_14)
    SourceInfo(regex-lite/src/nfa.rs:699:76-699:77)
  2: StorageDead(_5)
    SourceInfo(regex-lite/src/nfa.rs:700:13-700:14)
  3: StorageDead(_4)
    SourceInfo(regex-lite/src/nfa.rs:701:9-701:10)
  4: StorageDead(_2)
    SourceInfo(regex-lite/src/nfa.rs:701:9-701:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:703:6-703:6)
      kind: goto -> bb13
  }
  preds [bb7]
  succs [bb13]

bb9
  0: StorageDead(_12)
    SourceInfo(regex-lite/src/nfa.rs:698:55-698:56)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:698:55-698:56)
      kind: drop(_10) -> [return: bb10, unwind: bb15]
  }
  preds [bb5]
  succs [bb10, bb15]

bb10
  0: StorageDead(_10)
    SourceInfo(regex-lite/src/nfa.rs:698:55-698:56)
  1: StorageDead(_8)
    SourceInfo(regex-lite/src/nfa.rs:698:55-698:56)
  2: StorageDead(_6)
    SourceInfo(regex-lite/src/nfa.rs:698:55-698:56)
  3: _2 = const ()
    SourceInfo(regex-lite/src/nfa.rs:700:14-700:14)
  4: StorageDead(_5)
    SourceInfo(regex-lite/src/nfa.rs:700:13-700:14)
  5: StorageDead(_4)
    SourceInfo(regex-lite/src/nfa.rs:701:9-701:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:697:9-701:10)
      kind: goto -> bb12
  }
  preds [bb9]
  succs [bb12]

bb11
  0: _2 = const ()
    SourceInfo(regex-lite/src/nfa.rs:701:10-701:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:697:9-701:10)
      kind: goto -> bb12
  }
  preds [bb0, bb1]
  succs [bb12]

bb12
  0: StorageDead(_2)
    SourceInfo(regex-lite/src/nfa.rs:701:9-701:10)
  1: StorageLive(_15)
    SourceInfo(regex-lite/src/nfa.rs:702:12-702:14)
  2: _15 = ()
    SourceInfo(regex-lite/src/nfa.rs:702:12-702:14)
  3: _0 = core::result::Result::<(), error::Error>::Ok(move _15)
    SourceInfo(regex-lite/src/nfa.rs:702:9-702:15)
  4: StorageDead(_15)
    SourceInfo(regex-lite/src/nfa.rs:702:14-702:15)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:703:6-703:6)
      kind: goto -> bb13
  }
  preds [bb10, bb11]
  succs [bb13]

bb13
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:703:6-703:6)
      kind: return
  }
  preds [bb8, bb12]
  succs []

bb14
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:698:55-698:56)
      kind: drop(_10) -> [return: bb15, unwind terminate(cleanup)]
  }
  preds [bb3, bb4]
  succs [bb15]

bb15
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:696:5-703:6)
      kind: resume
  }
  preds [bb2, bb6, bb7, bb9, bb14]
  succs []

