bb0
  0: StorageLive(_3)
    SourceInfo(regex-lite/src/pikevm.rs:899:13-899:21)
  1: StorageLive(_4)
    SourceInfo(regex-lite/src/pikevm.rs:899:38-899:49)
  2: StorageLive(_5)
    SourceInfo(regex-lite/src/pikevm.rs:899:38-899:42)
  3: _5 = &(*_1)
    SourceInfo(regex-lite/src/pikevm.rs:899:38-899:42)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pikevm.rs:899:38-899:49)
      kind: _4 = pikevm::SparseSet::iter(move _5) -> [return: bb1, unwind: bb8]
  }
  preds []
  succs [bb1, bb8]

bb1
  0: StorageDead(_5)
    SourceInfo(regex-lite/src/pikevm.rs:899:48-899:49)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pikevm.rs:899:38-899:59)
      kind: _3 = <pikevm::SparseSetIter<'_> as core::iter::Iterator>::collect::<alloc::vec::Vec<u32>>(move _4) -> [return: bb2, unwind: bb8]
  }
  preds [bb0]
  succs [bb2, bb8]

bb2
  0: StorageDead(_4)
    SourceInfo(regex-lite/src/pikevm.rs:899:58-899:59)
  1: FakeRead(ForLet(None), _3)
    SourceInfo(regex-lite/src/pikevm.rs:899:13-899:21)
  2: AscribeUserType(_3, o, UserTypeProjection { base: UserType(1), projs: [] })
    SourceInfo(regex-lite/src/pikevm.rs:899:23-899:35)
  3: StorageLive(_6)
    SourceInfo(regex-lite/src/pikevm.rs:900:9-900:52)
  4: StorageLive(_7)
    SourceInfo(regex-lite/src/pikevm.rs:900:9-900:52)
  5: StorageLive(_8)
    SourceInfo(regex-lite/src/pikevm.rs:900:9-900:35)
  6: StorageLive(_9)
    SourceInfo(regex-lite/src/pikevm.rs:900:9-900:35)
  7: StorageLive(_10)
    SourceInfo(regex-lite/src/pikevm.rs:900:9-900:10)
  8: _10 = &mut (*_2)
    SourceInfo(regex-lite/src/pikevm.rs:900:9-900:10)
  9: StorageLive(_11)
    SourceInfo(regex-lite/src/pikevm.rs:900:23-900:34)
  10: StorageLive(_12)
    SourceInfo(regex-lite/src/pikevm.rs:900:23-900:34)
  11: _12 = const "SparseSet"
    SourceInfo(regex-lite/src/pikevm.rs:900:23-900:34)
  12: _11 = &(*_12)
    SourceInfo(regex-lite/src/pikevm.rs:900:23-900:34)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pikevm.rs:900:9-900:35)
      kind: _9 = core::fmt::Formatter::<'_>::debug_tuple(move _10, move _11) -> [return: bb3, unwind: bb7]
  }
  preds [bb1]
  succs [bb3, bb7]

bb3
  0: _8 = &mut _9
    SourceInfo(regex-lite/src/pikevm.rs:900:9-900:35)
  1: StorageDead(_11)
    SourceInfo(regex-lite/src/pikevm.rs:900:34-900:35)
  2: StorageDead(_10)
    SourceInfo(regex-lite/src/pikevm.rs:900:34-900:35)
  3: StorageLive(_13)
    SourceInfo(regex-lite/src/pikevm.rs:900:42-900:51)
  4: StorageLive(_14)
    SourceInfo(regex-lite/src/pikevm.rs:900:42-900:51)
  5: StorageLive(_15)
    SourceInfo(regex-lite/src/pikevm.rs:900:42-900:51)
  6: _15 = &_3
    SourceInfo(regex-lite/src/pikevm.rs:900:42-900:51)
  7: _14 = &(*_15)
    SourceInfo(regex-lite/src/pikevm.rs:900:42-900:51)
  8: _13 = move _14 as &dyn core::fmt::Debug (PointerCoercion(Unsize))
    SourceInfo(regex-lite/src/pikevm.rs:900:42-900:51)
  9: StorageDead(_14)
    SourceInfo(regex-lite/src/pikevm.rs:900:50-900:51)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pikevm.rs:900:9-900:52)
      kind: _7 = core::fmt::DebugTuple::<'_, '_>::field(move _8, move _13) -> [return: bb4, unwind: bb7]
  }
  preds [bb2]
  succs [bb4, bb7]

bb4
  0: _6 = &mut (*_7)
    SourceInfo(regex-lite/src/pikevm.rs:900:9-900:52)
  1: StorageDead(_13)
    SourceInfo(regex-lite/src/pikevm.rs:900:51-900:52)
  2: StorageDead(_8)
    SourceInfo(regex-lite/src/pikevm.rs:900:51-900:52)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pikevm.rs:900:9-900:61)
      kind: _0 = core::fmt::DebugTuple::<'_, '_>::finish(move _6) -> [return: bb5, unwind: bb7]
  }
  preds [bb3]
  succs [bb5, bb7]

bb5
  0: StorageDead(_6)
    SourceInfo(regex-lite/src/pikevm.rs:900:60-900:61)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pikevm.rs:901:5-901:6)
      kind: drop(_3) -> [return: bb6, unwind: bb8]
  }
  preds [bb4]
  succs [bb6, bb8]

bb6
  0: StorageDead(_3)
    SourceInfo(regex-lite/src/pikevm.rs:901:5-901:6)
  1: StorageDead(_15)
    SourceInfo(regex-lite/src/pikevm.rs:901:5-901:6)
  2: StorageDead(_12)
    SourceInfo(regex-lite/src/pikevm.rs:901:5-901:6)
  3: StorageDead(_9)
    SourceInfo(regex-lite/src/pikevm.rs:901:5-901:6)
  4: StorageDead(_7)
    SourceInfo(regex-lite/src/pikevm.rs:901:5-901:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pikevm.rs:901:6-901:6)
      kind: return
  }
  preds [bb5]
  succs []

bb7
  Terminator {
      source_info: SourceInfo(regex-lite/src/pikevm.rs:901:5-901:6)
      kind: drop(_3) -> [return: bb8, unwind terminate(cleanup)]
  }
  preds [bb2, bb3, bb4]
  succs [bb8]

bb8
  Terminator {
      source_info: SourceInfo(regex-lite/src/pikevm.rs:898:5-901:6)
      kind: resume
  }
  preds [bb0, bb1, bb5, bb7]
  succs []

