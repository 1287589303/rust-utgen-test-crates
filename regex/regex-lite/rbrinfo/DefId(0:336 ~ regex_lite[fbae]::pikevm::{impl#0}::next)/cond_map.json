{
  "regex-lite/src/pikevm.rs:274:49:274:61": [
    {
      "Bool": {
        "Binary": {
          "kind": "Le",
          "expr": "at_ch <= end",
          "lhs": "at_ch",
          "rhs": "end",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-lite/src/pikevm.rs:258:20:258:31": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "at_ch == ch",
          "lhs": "at_ch",
          "rhs": "ch",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-lite/src/pikevm.rs:258:35:258:45": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "at_len > 0",
          "lhs": "at_len",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/pikevm.rs:252:15:252:35": [
    {
      "Match": {
        "match_source": "regex-lite/src/pikevm.rs:252:15:252:35",
        "match_str": "*self.nfa.state(sid)",
        "match_kind": {
          "Enum": [
            "Char",
            "Ranges",
            "Splits",
            "Goto",
            "Capture",
            "Fail",
            "Match"
          ]
        },
        "arms": {
          "regex-lite/src/pikevm.rs:254:15:254:33": {
            "pat": {
              "pat_str": "State::Goto { .. }",
              "kind": {
                "Enum": 3
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/pikevm.rs:256:40:256:45"
          },
          "regex-lite/src/pikevm.rs:290:13:290:25": {
            "pat": {
              "pat_str": "State::Match",
              "kind": {
                "Enum": 6
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/pikevm.rs:290:29:290:33"
          },
          "regex-lite/src/pikevm.rs:255:15:255:35": {
            "pat": {
              "pat_str": "State::Splits { .. }",
              "kind": {
                "Enum": 2
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/pikevm.rs:256:40:256:45"
          },
          "regex-lite/src/pikevm.rs:253:13:253:24": {
            "pat": {
              "pat_str": "State::Fail",
              "kind": {
                "Enum": 5
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/pikevm.rs:256:40:256:45"
          },
          "regex-lite/src/pikevm.rs:257:13:257:39": {
            "pat": {
              "pat_str": "State::Char { target, ch }",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/pikevm.rs:257:43:269:14"
          },
          "regex-lite/src/pikevm.rs:270:13:270:49": {
            "pat": {
              "pat_str": "State::Ranges { target, ref ranges }",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/pikevm.rs:270:53:289:14"
          },
          "regex-lite/src/pikevm.rs:256:15:256:36": {
            "pat": {
              "pat_str": "State::Capture { .. }",
              "kind": {
                "Enum": 4
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/pikevm.rs:256:40:256:45"
          }
        }
      }
    }
  ],
  "regex-lite/src/pikevm.rs:274:31:274:45": [
    {
      "Bool": {
        "Binary": {
          "kind": "Le",
          "expr": "start <= at_ch",
          "lhs": "start",
          "rhs": "at_ch",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-lite/src/pikevm.rs:271:37:271:59": [
    {
      "For": {
        "iter_var": "(start, end)",
        "iter_range": "ranges.iter().copied()"
      }
    }
  ],
  "regex-lite/src/pikevm.rs:272:24:272:37": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "start > at_ch",
          "lhs": "start",
          "rhs": "at_ch",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-lite/src/pikevm.rs:275:28:275:39": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "at_len == 0",
          "lhs": "at_len",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ]
}