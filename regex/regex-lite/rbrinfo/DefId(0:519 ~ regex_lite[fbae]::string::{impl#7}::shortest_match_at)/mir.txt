bb0
  0: StorageLive(_4)
    SourceInfo(regex-lite/src/string.rs:1017:13-1017:22)
  1: StorageLive(_5)
    SourceInfo(regex-lite/src/string.rs:1017:25-1017:34)
  2: _5 = &((*_1).1: pool::Pool<pikevm::Cache, alloc::boxed::Box<dyn core::ops::Fn() -> pikevm::Cache + core::marker::Send + core::marker::Sync + core::panic::RefUnwindSafe + core::panic::UnwindSafe>>)
    SourceInfo(regex-lite/src/string.rs:1017:25-1017:34)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:1017:25-1017:40)
      kind: _4 = pool::Pool::<pikevm::Cache, alloc::boxed::Box<dyn core::ops::Fn() -> pikevm::Cache + core::marker::Send + core::marker::Sync + core::panic::RefUnwindSafe + core::panic::UnwindSafe>>::get(move _5) -> [return: bb1, unwind: bb16]
  }
  preds []
  succs [bb1, bb16]

bb1
  0: StorageDead(_5)
    SourceInfo(regex-lite/src/string.rs:1017:39-1017:40)
  1: FakeRead(ForLet(None), _4)
    SourceInfo(regex-lite/src/string.rs:1017:13-1017:22)
  2: StorageLive(_6)
    SourceInfo(regex-lite/src/string.rs:1018:13-1018:22)
  3: StorageLive(_7)
    SourceInfo(regex-lite/src/string.rs:1018:26-1018:30)
  4: _7 = core::option::Option::<int::NonMaxUsize>::None
    SourceInfo(regex-lite/src/string.rs:1018:26-1018:30)
  5: StorageLive(_8)
    SourceInfo(regex-lite/src/string.rs:1018:32-1018:36)
  6: _8 = core::option::Option::<int::NonMaxUsize>::None
    SourceInfo(regex-lite/src/string.rs:1018:32-1018:36)
  7: _6 = [move _7, move _8]
    SourceInfo(regex-lite/src/string.rs:1018:25-1018:37)
  8: StorageDead(_8)
    SourceInfo(regex-lite/src/string.rs:1018:36-1018:37)
  9: StorageDead(_7)
    SourceInfo(regex-lite/src/string.rs:1018:36-1018:37)
  10: FakeRead(ForLet(None), _6)
    SourceInfo(regex-lite/src/string.rs:1018:13-1018:22)
  11: StorageLive(_9)
    SourceInfo(regex-lite/src/string.rs:1019:13-1019:20)
  12: StorageLive(_10)
    SourceInfo(regex-lite/src/string.rs:1019:23-1019:34)
  13: StorageLive(_11)
    SourceInfo(regex-lite/src/string.rs:1019:23-1026:10)
  14: StorageLive(_12)
    SourceInfo(regex-lite/src/string.rs:1019:23-1019:34)
  15: _12 = &((*_1).0: alloc::sync::Arc<pikevm::PikeVM>)
    SourceInfo(regex-lite/src/string.rs:1019:23-1019:34)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:1019:23-1026:10)
      kind: _11 = <alloc::sync::Arc<pikevm::PikeVM> as core::ops::Deref>::deref(move _12) -> [return: bb2, unwind: bb15]
  }
  preds [bb0]
  succs [bb2, bb15]

bb2
  0: _10 = &(*_11)
    SourceInfo(regex-lite/src/string.rs:1019:23-1019:34)
  1: StorageDead(_12)
    SourceInfo(regex-lite/src/string.rs:1019:33-1019:34)
  2: StorageLive(_13)
    SourceInfo(regex-lite/src/string.rs:1020:13-1020:23)
  3: StorageLive(_14)
    SourceInfo(regex-lite/src/string.rs:1020:13-1020:23)
  4: StorageLive(_15)
    SourceInfo(regex-lite/src/string.rs:1020:13-1020:23)
  5: StorageLive(_16)
    SourceInfo(regex-lite/src/string.rs:1020:13-1020:23)
  6: _16 = &mut _4
    SourceInfo(regex-lite/src/string.rs:1020:13-1020:23)
  7: _15 = &mut (*_16)
    SourceInfo(regex-lite/src/string.rs:1020:13-1020:23)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:1020:13-1020:23)
      kind: _14 = <pool::PoolGuard<'_, pikevm::Cache, alloc::boxed::Box<dyn core::ops::Fn() -> pikevm::Cache + core::marker::Send + core::marker::Sync + core::panic::RefUnwindSafe + core::panic::UnwindSafe>> as core::ops::DerefMut>::deref_mut(move _15) -> [return: bb3, unwind: bb15]
  }
  preds [bb1]
  succs [bb3, bb15]

bb3
  0: _13 = &mut (*_14)
    SourceInfo(regex-lite/src/string.rs:1020:13-1020:23)
  1: StorageDead(_15)
    SourceInfo(regex-lite/src/string.rs:1020:22-1020:23)
  2: StorageLive(_17)
    SourceInfo(regex-lite/src/string.rs:1021:13-1021:32)
  3: StorageLive(_18)
    SourceInfo(regex-lite/src/string.rs:1021:13-1021:32)
  4: StorageLive(_19)
    SourceInfo(regex-lite/src/string.rs:1021:13-1021:21)
  5: _19 = &(*_2)
    SourceInfo(regex-lite/src/string.rs:1021:13-1021:21)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:1021:13-1021:32)
      kind: _18 = core::str::<impl str>::as_bytes(move _19) -> [return: bb4, unwind: bb15]
  }
  preds [bb2]
  succs [bb4, bb15]

bb4
  0: _17 = &(*_18)
    SourceInfo(regex-lite/src/string.rs:1021:13-1021:32)
  1: StorageDead(_19)
    SourceInfo(regex-lite/src/string.rs:1021:31-1021:32)
  2: StorageLive(_20)
    SourceInfo(regex-lite/src/string.rs:1022:13-1022:18)
  3: _20 = _3
    SourceInfo(regex-lite/src/string.rs:1022:13-1022:18)
  4: StorageLive(_21)
    SourceInfo(regex-lite/src/string.rs:1023:13-1023:27)
  5: StorageLive(_22)
    SourceInfo(regex-lite/src/string.rs:1023:13-1023:21)
  6: _22 = &(*_2)
    SourceInfo(regex-lite/src/string.rs:1023:13-1023:21)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:1023:13-1023:27)
      kind: _21 = core::str::<impl str>::len(move _22) -> [return: bb5, unwind: bb15]
  }
  preds [bb3]
  succs [bb5, bb15]

bb5
  0: StorageDead(_22)
    SourceInfo(regex-lite/src/string.rs:1023:26-1023:27)
  1: StorageLive(_23)
    SourceInfo(regex-lite/src/string.rs:1025:13-1025:23)
  2: StorageLive(_24)
    SourceInfo(regex-lite/src/string.rs:1025:13-1025:23)
  3: StorageLive(_25)
    SourceInfo(regex-lite/src/string.rs:1025:13-1025:23)
  4: _25 = &mut _6
    SourceInfo(regex-lite/src/string.rs:1025:13-1025:23)
  5: _24 = &mut (*_25)
    SourceInfo(regex-lite/src/string.rs:1025:13-1025:23)
  6: _23 = move _24 as &mut [core::option::Option<int::NonMaxUsize>] (PointerCoercion(Unsize))
    SourceInfo(regex-lite/src/string.rs:1025:13-1025:23)
  7: StorageDead(_24)
    SourceInfo(regex-lite/src/string.rs:1025:22-1025:23)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:1019:23-1026:10)
      kind: _9 = pikevm::PikeVM::search(move _10, move _13, move _17, move _20, move _21, const true, move _23) -> [return: bb6, unwind: bb15]
  }
  preds [bb4]
  succs [bb6, bb15]

bb6
  0: StorageDead(_23)
    SourceInfo(regex-lite/src/string.rs:1026:9-1026:10)
  1: StorageDead(_21)
    SourceInfo(regex-lite/src/string.rs:1026:9-1026:10)
  2: StorageDead(_20)
    SourceInfo(regex-lite/src/string.rs:1026:9-1026:10)
  3: StorageDead(_17)
    SourceInfo(regex-lite/src/string.rs:1026:9-1026:10)
  4: StorageDead(_13)
    SourceInfo(regex-lite/src/string.rs:1026:9-1026:10)
  5: StorageDead(_10)
    SourceInfo(regex-lite/src/string.rs:1026:9-1026:10)
  6: FakeRead(ForLet(None), _9)
    SourceInfo(regex-lite/src/string.rs:1019:13-1019:20)
  7: StorageDead(_25)
    SourceInfo(regex-lite/src/string.rs:1026:10-1026:11)
  8: StorageDead(_18)
    SourceInfo(regex-lite/src/string.rs:1026:10-1026:11)
  9: StorageDead(_16)
    SourceInfo(regex-lite/src/string.rs:1026:10-1026:11)
  10: StorageDead(_14)
    SourceInfo(regex-lite/src/string.rs:1026:10-1026:11)
  11: StorageDead(_11)
    SourceInfo(regex-lite/src/string.rs:1026:10-1026:11)
  12: StorageLive(_26)
    SourceInfo(regex-lite/src/string.rs:1027:9-1029:10)
  13: StorageLive(_27)
    SourceInfo(regex-lite/src/string.rs:1027:13-1027:20)
  14: _27 = _9
    SourceInfo(regex-lite/src/string.rs:1027:13-1027:20)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:1027:13-1027:20)
      kind: switchInt(move _27) -> [0: bb7, otherwise: bb8]
  }
  preds [bb5]
  succs [bb7, bb8]

bb7
  0: _0 = core::option::Option::<usize>::None
    SourceInfo(regex-lite/src/string.rs:1028:20-1028:24)
  1: StorageDead(_27)
    SourceInfo(regex-lite/src/string.rs:1029:9-1029:10)
  2: StorageDead(_26)
    SourceInfo(regex-lite/src/string.rs:1029:9-1029:10)
  3: StorageDead(_9)
    SourceInfo(regex-lite/src/string.rs:1031:5-1031:6)
  4: StorageDead(_6)
    SourceInfo(regex-lite/src/string.rs:1031:5-1031:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:1031:5-1031:6)
      kind: drop(_4) -> [return: bb13, unwind: bb16]
  }
  preds [bb6]
  succs [bb13, bb16]

bb8
  0: _26 = const ()
    SourceInfo(regex-lite/src/string.rs:1029:10-1029:10)
  1: StorageDead(_27)
    SourceInfo(regex-lite/src/string.rs:1029:9-1029:10)
  2: StorageDead(_26)
    SourceInfo(regex-lite/src/string.rs:1029:9-1029:10)
  3: StorageLive(_29)
    SourceInfo(regex-lite/src/string.rs:1030:14-1030:37)
  4: StorageLive(_30)
    SourceInfo(regex-lite/src/string.rs:1030:14-1030:31)
  5: StorageLive(_31)
    SourceInfo(regex-lite/src/string.rs:1030:14-1030:22)
  6: StorageLive(_32)
    SourceInfo(regex-lite/src/string.rs:1030:20-1030:21)
  7: _32 = const 1_usize
    SourceInfo(regex-lite/src/string.rs:1030:20-1030:21)
  8: _33 = Len(_6)
    SourceInfo(regex-lite/src/string.rs:1030:14-1030:22)
  9: _34 = Lt(_32, _33)
    SourceInfo(regex-lite/src/string.rs:1030:14-1030:22)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:1030:14-1030:22)
      kind: assert(move _34, "index out of bounds: the length is {} but the index is {}", move _33, _32) -> [success: bb9, unwind: bb15]
  }
  preds [bb6]
  succs [bb9, bb15]

bb9
  0: _31 = _6[_32]
    SourceInfo(regex-lite/src/string.rs:1030:14-1030:22)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:1030:14-1030:31)
      kind: _30 = core::option::Option::<int::NonMaxUsize>::unwrap(move _31) -> [return: bb10, unwind: bb15]
  }
  preds [bb8]
  succs [bb10, bb15]

bb10
  0: StorageDead(_31)
    SourceInfo(regex-lite/src/string.rs:1030:30-1030:31)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:1030:14-1030:37)
      kind: _29 = int::NonMaxUsize::get(move _30) -> [return: bb11, unwind: bb15]
  }
  preds [bb9]
  succs [bb11, bb15]

bb11
  0: StorageDead(_30)
    SourceInfo(regex-lite/src/string.rs:1030:36-1030:37)
  1: _0 = core::option::Option::<usize>::Some(move _29)
    SourceInfo(regex-lite/src/string.rs:1030:9-1030:38)
  2: StorageDead(_29)
    SourceInfo(regex-lite/src/string.rs:1030:37-1030:38)
  3: StorageDead(_9)
    SourceInfo(regex-lite/src/string.rs:1031:5-1031:6)
  4: StorageDead(_6)
    SourceInfo(regex-lite/src/string.rs:1031:5-1031:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:1031:5-1031:6)
      kind: drop(_4) -> [return: bb12, unwind: bb16]
  }
  preds [bb10]
  succs [bb12, bb16]

bb12
  0: StorageDead(_4)
    SourceInfo(regex-lite/src/string.rs:1031:5-1031:6)
  1: StorageDead(_32)
    SourceInfo(regex-lite/src/string.rs:1031:5-1031:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:1031:6-1031:6)
      kind: goto -> bb14
  }
  preds [bb11]
  succs [bb14]

bb13
  0: StorageDead(_4)
    SourceInfo(regex-lite/src/string.rs:1031:5-1031:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:1031:6-1031:6)
      kind: goto -> bb14
  }
  preds [bb7]
  succs [bb14]

bb14
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:1031:6-1031:6)
      kind: return
  }
  preds [bb12, bb13]
  succs []

bb15
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:1031:5-1031:6)
      kind: drop(_4) -> [return: bb16, unwind terminate(cleanup)]
  }
  preds [bb1, bb2, bb3, bb4, bb5, bb8, bb9, bb10]
  succs [bb16]

bb16
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:1012:5-1031:6)
      kind: resume
  }
  preds [bb0, bb7, bb11, bb15]
  succs []

