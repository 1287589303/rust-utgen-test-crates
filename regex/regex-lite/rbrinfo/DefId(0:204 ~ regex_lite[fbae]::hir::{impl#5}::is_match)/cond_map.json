{
  "regex-lite/src/hir/mod.rs:653:25:653:46": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "haystack[at] == b'\\n'",
          "lhs": "haystack[at]",
          "rhs": "b'\\n'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:647:34:647:40": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "at - 1",
          "lhs": "at",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:672:31:672:67": [
    {
      "Bool": {
        "Other": "utf8::is_word_byte(haystack[at - 1])"
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:652:24:652:45": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "haystack[at] == b'\\r'",
          "lhs": "haystack[at]",
          "rhs": "b'\\r'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:646:24:646:49": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "haystack[at - 1] == b'\\n'",
          "lhs": "haystack[at - 1]",
          "rhs": "b'\\n'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:686:21:686:27": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "at > 0",
          "lhs": "at",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:665:31:665:67": [
    {
      "Bool": {
        "Other": "utf8::is_word_byte(haystack[at - 1])"
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:660:21:660:40": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "at < haystack.len()",
          "lhs": "at",
          "rhs": "haystack.len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:648:29:648:49": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ge",
          "expr": "at >= haystack.len()",
          "lhs": "at",
          "rhs": "haystack.len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:658:21:658:27": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "at > 0",
          "lhs": "at",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:679:21:679:27": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "at > 0",
          "lhs": "at",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:681:21:681:40": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "at < haystack.len()",
          "lhs": "at",
          "rhs": "haystack.len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:675:33:675:43": [
    {
      "Bool": {
        "Other": "word_after"
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:642:24:642:31": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "at == 0",
          "lhs": "at",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:665:21:665:27": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "at > 0",
          "lhs": "at",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:660:44:660:76": [
    {
      "Bool": {
        "Other": "utf8::is_word_byte(haystack[at])"
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:648:53:648:74": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "haystack[at] != b'\\n'",
          "lhs": "haystack[at]",
          "rhs": "b'\\n'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:679:59:679:65": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "at - 1",
          "lhs": "at",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:651:17:651:37": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "at == haystack.len()",
          "lhs": "at",
          "rhs": "haystack.len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:686:31:686:67": [
    {
      "Bool": {
        "Other": "utf8::is_word_byte(haystack[at - 1])"
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:658:31:658:67": [
    {
      "Bool": {
        "Other": "utf8::is_word_byte(haystack[at - 1])"
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:654:49:654:55": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "at - 1",
          "lhs": "at",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:672:21:672:27": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "at > 0",
          "lhs": "at",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:682:17:682:28": [
    {
      "Bool": {
        "Other": "word_before"
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:654:40:654:65": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "haystack[at - 1] != b'\\r'",
          "lhs": "haystack[at - 1]",
          "rhs": "b'\\r'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:646:33:646:39": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "at - 1",
          "lhs": "at",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:675:18:675:29": [
    {
      "Bool": {
        "Other": "word_before"
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:679:31:679:67": [
    {
      "Bool": {
        "Other": "utf8::is_word_byte(haystack[at - 1])"
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:667:44:667:76": [
    {
      "Bool": {
        "Other": "utf8::is_word_byte(haystack[at])"
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:645:17:645:24": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "at == 0",
          "lhs": "at",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:640:22:640:29": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "at == 0",
          "lhs": "at",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:667:21:667:40": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "at < haystack.len()",
          "lhs": "at",
          "rhs": "haystack.len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:686:59:686:65": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "at - 1",
          "lhs": "at",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:654:29:654:36": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "at == 0",
          "lhs": "at",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:674:21:674:40": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "at < haystack.len()",
          "lhs": "at",
          "rhs": "haystack.len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:674:44:674:76": [
    {
      "Bool": {
        "Other": "utf8::is_word_byte(haystack[at])"
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:642:44:642:50": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "at - 1",
          "lhs": "at",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:661:17:661:42": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "word_before != word_after",
          "lhs": "word_before",
          "rhs": "word_after",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:691:21:691:40": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "at < haystack.len()",
          "lhs": "at",
          "rhs": "haystack.len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:665:59:665:65": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "at - 1",
          "lhs": "at",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:691:44:691:76": [
    {
      "Bool": {
        "Other": "utf8::is_word_byte(haystack[at])"
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:641:20:641:40": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "at == haystack.len()",
          "lhs": "at",
          "rhs": "haystack.len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:672:59:672:65": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "at - 1",
          "lhs": "at",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:643:22:643:42": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "at == haystack.len()",
          "lhs": "at",
          "rhs": "haystack.len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:682:33:682:43": [
    {
      "Bool": {
        "Other": "word_after"
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:643:46:643:67": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "haystack[at] == b'\\n'",
          "lhs": "haystack[at]",
          "rhs": "b'\\n'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:642:35:642:60": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "haystack[at - 1] == b'\\n'",
          "lhs": "haystack[at - 1]",
          "rhs": "b'\\n'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:639:15:639:20": [
    {
      "Match": {
        "match_source": "regex-lite/src/hir/mod.rs:639:15:639:20",
        "match_str": "*self",
        "match_kind": {
          "Enum": [
            "Start",
            "End",
            "StartLF",
            "EndLF",
            "StartCRLF",
            "EndCRLF",
            "Word",
            "WordNegate",
            "WordStart",
            "WordEnd",
            "WordStartHalf",
            "WordEndHalf"
          ]
        },
        "arms": {
          "regex-lite/src/hir/mod.rs:641:13:641:16": {
            "pat": {
              "pat_str": "End",
              "kind": {
                "Enum": 2
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/hir/mod.rs:641:20:641:40"
          },
          "regex-lite/src/hir/mod.rs:684:13:684:26": {
            "pat": {
              "pat_str": "WordStartHalf",
              "kind": {
                "Enum": 1024
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/hir/mod.rs:684:30:688:14"
          },
          "regex-lite/src/hir/mod.rs:640:13:640:18": {
            "pat": {
              "pat_str": "Start",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/hir/mod.rs:640:22:640:29"
          },
          "regex-lite/src/hir/mod.rs:644:13:644:22": {
            "pat": {
              "pat_str": "StartCRLF",
              "kind": {
                "Enum": 16
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/hir/mod.rs:644:26:649:14"
          },
          "regex-lite/src/hir/mod.rs:663:13:663:23": {
            "pat": {
              "pat_str": "WordNegate",
              "kind": {
                "Enum": 128
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/hir/mod.rs:663:27:669:14"
          },
          "regex-lite/src/hir/mod.rs:643:13:643:18": {
            "pat": {
              "pat_str": "EndLF",
              "kind": {
                "Enum": 8
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/hir/mod.rs:643:22:643:67"
          },
          "regex-lite/src/hir/mod.rs:677:13:677:20": {
            "pat": {
              "pat_str": "WordEnd",
              "kind": {
                "Enum": 512
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/hir/mod.rs:677:24:683:14"
          },
          "regex-lite/src/hir/mod.rs:650:13:650:20": {
            "pat": {
              "pat_str": "EndCRLF",
              "kind": {
                "Enum": 32
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/hir/mod.rs:650:24:655:14"
          },
          "regex-lite/src/hir/mod.rs:642:13:642:20": {
            "pat": {
              "pat_str": "StartLF",
              "kind": {
                "Enum": 4
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/hir/mod.rs:642:24:642:60"
          },
          "regex-lite/src/hir/mod.rs:689:13:689:24": {
            "pat": {
              "pat_str": "WordEndHalf",
              "kind": {
                "Enum": 2048
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/hir/mod.rs:689:28:693:14"
          },
          "regex-lite/src/hir/mod.rs:670:13:670:22": {
            "pat": {
              "pat_str": "WordStart",
              "kind": {
                "Enum": 256
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/hir/mod.rs:670:26:676:14"
          },
          "regex-lite/src/hir/mod.rs:656:13:656:17": {
            "pat": {
              "pat_str": "Word",
              "kind": {
                "Enum": 64
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/hir/mod.rs:656:21:662:14"
          }
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:668:17:668:42": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "word_before == word_after",
          "lhs": "word_before",
          "rhs": "word_after",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:658:59:658:65": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "at - 1",
          "lhs": "at",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:647:25:647:50": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "haystack[at - 1] == b'\\r'",
          "lhs": "haystack[at - 1]",
          "rhs": "b'\\r'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/hir/mod.rs:681:44:681:76": [
    {
      "Bool": {
        "Other": "utf8::is_word_byte(haystack[at])"
      }
    }
  ]
}