bb0
  0: PlaceMention((*_1))
    SourceInfo(regex-lite/src/hir/mod.rs:639:15-639:20)
  1: _4 = discriminant((*_1))
    SourceInfo(regex-lite/src/hir/mod.rs:639:15-639:20)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:639:9-639:20)
      kind: switchInt(move _4) -> [1: bb2, 2: bb3, 4: bb4, 8: bb5, 16: bb6, 32: bb7, 64: bb8, 128: bb9, 256: bb10, 512: bb11, 1024: bb12, 2048: bb13, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2, bb3, bb4, bb5, bb6, bb7, bb8, bb9, bb10, bb11, bb12, bb13]

bb1
  0: FakeRead(ForMatchedPlace(None), (*_1))
    SourceInfo(regex-lite/src/hir/mod.rs:639:15-639:20)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:639:15-639:20)
      kind: unreachable
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:640:13-640:18)
      kind: falseEdge -> [real: bb14, imaginary: bb3]
  }
  preds [bb0]
  succs [bb3, bb14]

bb3
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:641:13-641:16)
      kind: falseEdge -> [real: bb15, imaginary: bb4]
  }
  preds [bb0, bb2]
  succs [bb4, bb15]

bb4
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:642:13-642:20)
      kind: falseEdge -> [real: bb17, imaginary: bb5]
  }
  preds [bb0, bb3]
  succs [bb5, bb17]

bb5
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:643:13-643:18)
      kind: falseEdge -> [real: bb23, imaginary: bb6]
  }
  preds [bb0, bb4]
  succs [bb6, bb23]

bb6
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:644:13-644:22)
      kind: falseEdge -> [real: bb29, imaginary: bb7]
  }
  preds [bb0, bb5]
  succs [bb7, bb29]

bb7
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:650:13-650:20)
      kind: falseEdge -> [real: bb48, imaginary: bb8]
  }
  preds [bb0, bb6]
  succs [bb8, bb48]

bb8
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:656:13-656:17)
      kind: falseEdge -> [real: bb66, imaginary: bb9]
  }
  preds [bb0, bb7]
  succs [bb9, bb66]

bb9
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:663:13-663:23)
      kind: falseEdge -> [real: bb79, imaginary: bb10]
  }
  preds [bb0, bb8]
  succs [bb10, bb79]

bb10
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:670:13-670:22)
      kind: falseEdge -> [real: bb92, imaginary: bb11]
  }
  preds [bb0, bb9]
  succs [bb11, bb92]

bb11
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:677:13-677:20)
      kind: falseEdge -> [real: bb108, imaginary: bb12]
  }
  preds [bb0, bb10]
  succs [bb12, bb108]

bb12
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:684:13-684:26)
      kind: falseEdge -> [real: bb124, imaginary: bb13]
  }
  preds [bb0, bb11]
  succs [bb13, bb124]

bb13
  0: StorageLive(_160)
    SourceInfo(regex-lite/src/hir/mod.rs:690:21-690:31)
  1: StorageLive(_161)
    SourceInfo(regex-lite/src/hir/mod.rs:691:21-691:40)
  2: StorageLive(_162)
    SourceInfo(regex-lite/src/hir/mod.rs:691:21-691:23)
  3: _162 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:691:21-691:23)
  4: StorageLive(_163)
    SourceInfo(regex-lite/src/hir/mod.rs:691:26-691:40)
  5: StorageLive(_164)
    SourceInfo(regex-lite/src/hir/mod.rs:691:26-691:34)
  6: _164 = &(*_2)
    SourceInfo(regex-lite/src/hir/mod.rs:691:26-691:34)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:691:26-691:40)
      kind: _163 = core::slice::<impl [u8]>::len(move _164) -> [return: bb131, unwind: bb138]
  }
  preds [bb0, bb12]
  succs [bb131, bb138]

bb14
  0: StorageLive(_5)
    SourceInfo(regex-lite/src/hir/mod.rs:640:22-640:24)
  1: _5 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:640:22-640:24)
  2: _0 = Eq(move _5, const 0_usize)
    SourceInfo(regex-lite/src/hir/mod.rs:640:22-640:29)
  3: StorageDead(_5)
    SourceInfo(regex-lite/src/hir/mod.rs:640:28-640:29)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:640:28-640:29)
      kind: goto -> bb137
  }
  preds [bb2]
  succs [bb137]

bb15
  0: StorageLive(_6)
    SourceInfo(regex-lite/src/hir/mod.rs:641:20-641:22)
  1: _6 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:641:20-641:22)
  2: StorageLive(_7)
    SourceInfo(regex-lite/src/hir/mod.rs:641:26-641:40)
  3: StorageLive(_8)
    SourceInfo(regex-lite/src/hir/mod.rs:641:26-641:34)
  4: _8 = &(*_2)
    SourceInfo(regex-lite/src/hir/mod.rs:641:26-641:34)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:641:26-641:40)
      kind: _7 = core::slice::<impl [u8]>::len(move _8) -> [return: bb16, unwind: bb138]
  }
  preds [bb3]
  succs [bb16, bb138]

bb16
  0: StorageDead(_8)
    SourceInfo(regex-lite/src/hir/mod.rs:641:39-641:40)
  1: _0 = Eq(move _6, move _7)
    SourceInfo(regex-lite/src/hir/mod.rs:641:20-641:40)
  2: StorageDead(_7)
    SourceInfo(regex-lite/src/hir/mod.rs:641:39-641:40)
  3: StorageDead(_6)
    SourceInfo(regex-lite/src/hir/mod.rs:641:39-641:40)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:641:39-641:40)
      kind: goto -> bb137
  }
  preds [bb15]
  succs [bb137]

bb17
  0: StorageLive(_9)
    SourceInfo(regex-lite/src/hir/mod.rs:642:24-642:31)
  1: StorageLive(_10)
    SourceInfo(regex-lite/src/hir/mod.rs:642:24-642:26)
  2: _10 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:642:24-642:26)
  3: _9 = Eq(move _10, const 0_usize)
    SourceInfo(regex-lite/src/hir/mod.rs:642:24-642:31)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:642:24-642:31)
      kind: switchInt(move _9) -> [0: bb19, otherwise: bb18]
  }
  preds [bb4]
  succs [bb18, bb19]

bb18
  0: StorageDead(_10)
    SourceInfo(regex-lite/src/hir/mod.rs:642:30-642:31)
  1: _0 = const true
    SourceInfo(regex-lite/src/hir/mod.rs:642:24-642:60)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:642:24-642:60)
      kind: goto -> bb22
  }
  preds [bb17]
  succs [bb22]

bb19
  0: StorageDead(_10)
    SourceInfo(regex-lite/src/hir/mod.rs:642:30-642:31)
  1: StorageLive(_11)
    SourceInfo(regex-lite/src/hir/mod.rs:642:35-642:51)
  2: StorageLive(_12)
    SourceInfo(regex-lite/src/hir/mod.rs:642:44-642:50)
  3: StorageLive(_13)
    SourceInfo(regex-lite/src/hir/mod.rs:642:44-642:46)
  4: _13 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:642:44-642:46)
  5: _14 = SubWithOverflow(_13, const 1_usize)
    SourceInfo(regex-lite/src/hir/mod.rs:642:44-642:50)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:642:44-642:50)
      kind: assert(!move (_14.1: bool), "attempt to compute `{} - {}`, which would overflow", move _13, const 1_usize) -> [success: bb20, unwind: bb138]
  }
  preds [bb17]
  succs [bb20, bb138]

bb20
  0: _12 = move (_14.0: usize)
    SourceInfo(regex-lite/src/hir/mod.rs:642:44-642:50)
  1: StorageDead(_13)
    SourceInfo(regex-lite/src/hir/mod.rs:642:49-642:50)
  2: _15 = Len((*_2))
    SourceInfo(regex-lite/src/hir/mod.rs:642:35-642:51)
  3: _16 = Lt(_12, _15)
    SourceInfo(regex-lite/src/hir/mod.rs:642:35-642:51)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:642:35-642:51)
      kind: assert(move _16, "index out of bounds: the length is {} but the index is {}", move _15, _12) -> [success: bb21, unwind: bb138]
  }
  preds [bb19]
  succs [bb21, bb138]

bb21
  0: _11 = (*_2)[_12]
    SourceInfo(regex-lite/src/hir/mod.rs:642:35-642:51)
  1: _0 = Eq(move _11, const 10_u8)
    SourceInfo(regex-lite/src/hir/mod.rs:642:35-642:60)
  2: StorageDead(_12)
    SourceInfo(regex-lite/src/hir/mod.rs:642:59-642:60)
  3: StorageDead(_11)
    SourceInfo(regex-lite/src/hir/mod.rs:642:59-642:60)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:642:24-642:60)
      kind: goto -> bb22
  }
  preds [bb20]
  succs [bb22]

bb22
  0: StorageDead(_9)
    SourceInfo(regex-lite/src/hir/mod.rs:642:59-642:60)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:642:59-642:60)
      kind: goto -> bb137
  }
  preds [bb18, bb21]
  succs [bb137]

bb23
  0: StorageLive(_17)
    SourceInfo(regex-lite/src/hir/mod.rs:643:22-643:42)
  1: StorageLive(_18)
    SourceInfo(regex-lite/src/hir/mod.rs:643:22-643:24)
  2: _18 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:643:22-643:24)
  3: StorageLive(_19)
    SourceInfo(regex-lite/src/hir/mod.rs:643:28-643:42)
  4: StorageLive(_20)
    SourceInfo(regex-lite/src/hir/mod.rs:643:28-643:36)
  5: _20 = &(*_2)
    SourceInfo(regex-lite/src/hir/mod.rs:643:28-643:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:643:28-643:42)
      kind: _19 = core::slice::<impl [u8]>::len(move _20) -> [return: bb24, unwind: bb138]
  }
  preds [bb5]
  succs [bb24, bb138]

bb24
  0: StorageDead(_20)
    SourceInfo(regex-lite/src/hir/mod.rs:643:41-643:42)
  1: _17 = Eq(move _18, move _19)
    SourceInfo(regex-lite/src/hir/mod.rs:643:22-643:42)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:643:22-643:42)
      kind: switchInt(move _17) -> [0: bb26, otherwise: bb25]
  }
  preds [bb23]
  succs [bb25, bb26]

bb25
  0: StorageDead(_19)
    SourceInfo(regex-lite/src/hir/mod.rs:643:41-643:42)
  1: StorageDead(_18)
    SourceInfo(regex-lite/src/hir/mod.rs:643:41-643:42)
  2: _0 = const true
    SourceInfo(regex-lite/src/hir/mod.rs:643:22-643:67)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:643:22-643:67)
      kind: goto -> bb28
  }
  preds [bb24]
  succs [bb28]

bb26
  0: StorageDead(_19)
    SourceInfo(regex-lite/src/hir/mod.rs:643:41-643:42)
  1: StorageDead(_18)
    SourceInfo(regex-lite/src/hir/mod.rs:643:41-643:42)
  2: StorageLive(_21)
    SourceInfo(regex-lite/src/hir/mod.rs:643:46-643:58)
  3: StorageLive(_22)
    SourceInfo(regex-lite/src/hir/mod.rs:643:55-643:57)
  4: _22 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:643:55-643:57)
  5: _23 = Len((*_2))
    SourceInfo(regex-lite/src/hir/mod.rs:643:46-643:58)
  6: _24 = Lt(_22, _23)
    SourceInfo(regex-lite/src/hir/mod.rs:643:46-643:58)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:643:46-643:58)
      kind: assert(move _24, "index out of bounds: the length is {} but the index is {}", move _23, _22) -> [success: bb27, unwind: bb138]
  }
  preds [bb24]
  succs [bb27, bb138]

bb27
  0: _21 = (*_2)[_22]
    SourceInfo(regex-lite/src/hir/mod.rs:643:46-643:58)
  1: _0 = Eq(move _21, const 10_u8)
    SourceInfo(regex-lite/src/hir/mod.rs:643:46-643:67)
  2: StorageDead(_22)
    SourceInfo(regex-lite/src/hir/mod.rs:643:66-643:67)
  3: StorageDead(_21)
    SourceInfo(regex-lite/src/hir/mod.rs:643:66-643:67)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:643:22-643:67)
      kind: goto -> bb28
  }
  preds [bb26]
  succs [bb28]

bb28
  0: StorageDead(_17)
    SourceInfo(regex-lite/src/hir/mod.rs:643:66-643:67)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:643:66-643:67)
      kind: goto -> bb137
  }
  preds [bb25, bb27]
  succs [bb137]

bb29
  0: StorageLive(_25)
    SourceInfo(regex-lite/src/hir/mod.rs:645:17-645:24)
  1: StorageLive(_26)
    SourceInfo(regex-lite/src/hir/mod.rs:645:17-645:19)
  2: _26 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:645:17-645:19)
  3: _25 = Eq(move _26, const 0_usize)
    SourceInfo(regex-lite/src/hir/mod.rs:645:17-645:24)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:645:17-645:24)
      kind: switchInt(move _25) -> [0: bb31, otherwise: bb30]
  }
  preds [bb6]
  succs [bb30, bb31]

bb30
  0: StorageDead(_26)
    SourceInfo(regex-lite/src/hir/mod.rs:645:23-645:24)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:645:17-648:76)
      kind: goto -> bb35
  }
  preds [bb29]
  succs [bb35]

bb31
  0: StorageDead(_26)
    SourceInfo(regex-lite/src/hir/mod.rs:645:23-645:24)
  1: StorageLive(_27)
    SourceInfo(regex-lite/src/hir/mod.rs:646:24-646:49)
  2: StorageLive(_28)
    SourceInfo(regex-lite/src/hir/mod.rs:646:24-646:40)
  3: StorageLive(_29)
    SourceInfo(regex-lite/src/hir/mod.rs:646:33-646:39)
  4: StorageLive(_30)
    SourceInfo(regex-lite/src/hir/mod.rs:646:33-646:35)
  5: _30 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:646:33-646:35)
  6: _31 = SubWithOverflow(_30, const 1_usize)
    SourceInfo(regex-lite/src/hir/mod.rs:646:33-646:39)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:646:33-646:39)
      kind: assert(!move (_31.1: bool), "attempt to compute `{} - {}`, which would overflow", move _30, const 1_usize) -> [success: bb32, unwind: bb138]
  }
  preds [bb29]
  succs [bb32, bb138]

bb32
  0: _29 = move (_31.0: usize)
    SourceInfo(regex-lite/src/hir/mod.rs:646:33-646:39)
  1: StorageDead(_30)
    SourceInfo(regex-lite/src/hir/mod.rs:646:38-646:39)
  2: _32 = Len((*_2))
    SourceInfo(regex-lite/src/hir/mod.rs:646:24-646:40)
  3: _33 = Lt(_29, _32)
    SourceInfo(regex-lite/src/hir/mod.rs:646:24-646:40)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:646:24-646:40)
      kind: assert(move _33, "index out of bounds: the length is {} but the index is {}", move _32, _29) -> [success: bb33, unwind: bb138]
  }
  preds [bb31]
  succs [bb33, bb138]

bb33
  0: _28 = (*_2)[_29]
    SourceInfo(regex-lite/src/hir/mod.rs:646:24-646:40)
  1: _27 = Eq(move _28, const 10_u8)
    SourceInfo(regex-lite/src/hir/mod.rs:646:24-646:49)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:646:24-646:49)
      kind: switchInt(move _27) -> [0: bb36, otherwise: bb34]
  }
  preds [bb32]
  succs [bb34, bb36]

bb34
  0: StorageDead(_29)
    SourceInfo(regex-lite/src/hir/mod.rs:646:48-646:49)
  1: StorageDead(_28)
    SourceInfo(regex-lite/src/hir/mod.rs:646:48-646:49)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:645:17-648:76)
      kind: goto -> bb35
  }
  preds [bb33]
  succs [bb35]

bb35
  0: _0 = const true
    SourceInfo(regex-lite/src/hir/mod.rs:645:17-648:76)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:645:17-648:76)
      kind: goto -> bb47
  }
  preds [bb30, bb34]
  succs [bb47]

bb36
  0: StorageDead(_29)
    SourceInfo(regex-lite/src/hir/mod.rs:646:48-646:49)
  1: StorageDead(_28)
    SourceInfo(regex-lite/src/hir/mod.rs:646:48-646:49)
  2: StorageLive(_34)
    SourceInfo(regex-lite/src/hir/mod.rs:647:25-647:50)
  3: StorageLive(_35)
    SourceInfo(regex-lite/src/hir/mod.rs:647:25-647:41)
  4: StorageLive(_36)
    SourceInfo(regex-lite/src/hir/mod.rs:647:34-647:40)
  5: StorageLive(_37)
    SourceInfo(regex-lite/src/hir/mod.rs:647:34-647:36)
  6: _37 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:647:34-647:36)
  7: _38 = SubWithOverflow(_37, const 1_usize)
    SourceInfo(regex-lite/src/hir/mod.rs:647:34-647:40)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:647:34-647:40)
      kind: assert(!move (_38.1: bool), "attempt to compute `{} - {}`, which would overflow", move _37, const 1_usize) -> [success: bb37, unwind: bb138]
  }
  preds [bb33]
  succs [bb37, bb138]

bb37
  0: _36 = move (_38.0: usize)
    SourceInfo(regex-lite/src/hir/mod.rs:647:34-647:40)
  1: StorageDead(_37)
    SourceInfo(regex-lite/src/hir/mod.rs:647:39-647:40)
  2: _39 = Len((*_2))
    SourceInfo(regex-lite/src/hir/mod.rs:647:25-647:41)
  3: _40 = Lt(_36, _39)
    SourceInfo(regex-lite/src/hir/mod.rs:647:25-647:41)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:647:25-647:41)
      kind: assert(move _40, "index out of bounds: the length is {} but the index is {}", move _39, _36) -> [success: bb38, unwind: bb138]
  }
  preds [bb36]
  succs [bb38, bb138]

bb38
  0: _35 = (*_2)[_36]
    SourceInfo(regex-lite/src/hir/mod.rs:647:25-647:41)
  1: _34 = Eq(move _35, const 13_u8)
    SourceInfo(regex-lite/src/hir/mod.rs:647:25-647:50)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:647:25-647:50)
      kind: switchInt(move _34) -> [0: bb40, otherwise: bb39]
  }
  preds [bb37]
  succs [bb39, bb40]

bb39
  0: StorageDead(_36)
    SourceInfo(regex-lite/src/hir/mod.rs:647:49-647:50)
  1: StorageDead(_35)
    SourceInfo(regex-lite/src/hir/mod.rs:647:49-647:50)
  2: StorageLive(_41)
    SourceInfo(regex-lite/src/hir/mod.rs:648:29-648:49)
  3: StorageLive(_42)
    SourceInfo(regex-lite/src/hir/mod.rs:648:29-648:31)
  4: _42 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:648:29-648:31)
  5: StorageLive(_43)
    SourceInfo(regex-lite/src/hir/mod.rs:648:35-648:49)
  6: StorageLive(_44)
    SourceInfo(regex-lite/src/hir/mod.rs:648:35-648:43)
  7: _44 = &(*_2)
    SourceInfo(regex-lite/src/hir/mod.rs:648:35-648:43)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:648:35-648:49)
      kind: _43 = core::slice::<impl [u8]>::len(move _44) -> [return: bb41, unwind: bb138]
  }
  preds [bb38]
  succs [bb41, bb138]

bb40
  0: StorageDead(_36)
    SourceInfo(regex-lite/src/hir/mod.rs:647:49-647:50)
  1: StorageDead(_35)
    SourceInfo(regex-lite/src/hir/mod.rs:647:49-647:50)
  2: _0 = const false
    SourceInfo(regex-lite/src/hir/mod.rs:647:24-648:76)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:647:24-648:76)
      kind: goto -> bb46
  }
  preds [bb38]
  succs [bb46]

bb41
  0: StorageDead(_44)
    SourceInfo(regex-lite/src/hir/mod.rs:648:48-648:49)
  1: _41 = Ge(move _42, move _43)
    SourceInfo(regex-lite/src/hir/mod.rs:648:29-648:49)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:648:29-648:49)
      kind: switchInt(move _41) -> [0: bb43, otherwise: bb42]
  }
  preds [bb39]
  succs [bb42, bb43]

bb42
  0: StorageDead(_43)
    SourceInfo(regex-lite/src/hir/mod.rs:648:48-648:49)
  1: StorageDead(_42)
    SourceInfo(regex-lite/src/hir/mod.rs:648:48-648:49)
  2: _0 = const true
    SourceInfo(regex-lite/src/hir/mod.rs:648:28-648:75)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:648:28-648:75)
      kind: goto -> bb45
  }
  preds [bb41]
  succs [bb45]

bb43
  0: StorageDead(_43)
    SourceInfo(regex-lite/src/hir/mod.rs:648:48-648:49)
  1: StorageDead(_42)
    SourceInfo(regex-lite/src/hir/mod.rs:648:48-648:49)
  2: StorageLive(_45)
    SourceInfo(regex-lite/src/hir/mod.rs:648:53-648:65)
  3: StorageLive(_46)
    SourceInfo(regex-lite/src/hir/mod.rs:648:62-648:64)
  4: _46 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:648:62-648:64)
  5: _47 = Len((*_2))
    SourceInfo(regex-lite/src/hir/mod.rs:648:53-648:65)
  6: _48 = Lt(_46, _47)
    SourceInfo(regex-lite/src/hir/mod.rs:648:53-648:65)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:648:53-648:65)
      kind: assert(move _48, "index out of bounds: the length is {} but the index is {}", move _47, _46) -> [success: bb44, unwind: bb138]
  }
  preds [bb41]
  succs [bb44, bb138]

bb44
  0: _45 = (*_2)[_46]
    SourceInfo(regex-lite/src/hir/mod.rs:648:53-648:65)
  1: _0 = Ne(move _45, const 10_u8)
    SourceInfo(regex-lite/src/hir/mod.rs:648:53-648:74)
  2: StorageDead(_46)
    SourceInfo(regex-lite/src/hir/mod.rs:648:73-648:74)
  3: StorageDead(_45)
    SourceInfo(regex-lite/src/hir/mod.rs:648:73-648:74)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:648:28-648:75)
      kind: goto -> bb45
  }
  preds [bb43]
  succs [bb45]

bb45
  0: StorageDead(_41)
    SourceInfo(regex-lite/src/hir/mod.rs:648:74-648:75)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:647:24-648:76)
      kind: goto -> bb46
  }
  preds [bb42, bb44]
  succs [bb46]

bb46
  0: StorageDead(_34)
    SourceInfo(regex-lite/src/hir/mod.rs:648:75-648:76)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:645:17-648:76)
      kind: goto -> bb47
  }
  preds [bb40, bb45]
  succs [bb47]

bb47
  0: StorageDead(_27)
    SourceInfo(regex-lite/src/hir/mod.rs:648:75-648:76)
  1: StorageDead(_25)
    SourceInfo(regex-lite/src/hir/mod.rs:648:75-648:76)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:648:75-648:76)
      kind: goto -> bb137
  }
  preds [bb35, bb46]
  succs [bb137]

bb48
  0: StorageLive(_49)
    SourceInfo(regex-lite/src/hir/mod.rs:651:17-651:37)
  1: StorageLive(_50)
    SourceInfo(regex-lite/src/hir/mod.rs:651:17-651:19)
  2: _50 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:651:17-651:19)
  3: StorageLive(_51)
    SourceInfo(regex-lite/src/hir/mod.rs:651:23-651:37)
  4: StorageLive(_52)
    SourceInfo(regex-lite/src/hir/mod.rs:651:23-651:31)
  5: _52 = &(*_2)
    SourceInfo(regex-lite/src/hir/mod.rs:651:23-651:31)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:651:23-651:37)
      kind: _51 = core::slice::<impl [u8]>::len(move _52) -> [return: bb49, unwind: bb138]
  }
  preds [bb7]
  succs [bb49, bb138]

bb49
  0: StorageDead(_52)
    SourceInfo(regex-lite/src/hir/mod.rs:651:36-651:37)
  1: _49 = Eq(move _50, move _51)
    SourceInfo(regex-lite/src/hir/mod.rs:651:17-651:37)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:651:17-651:37)
      kind: switchInt(move _49) -> [0: bb51, otherwise: bb50]
  }
  preds [bb48]
  succs [bb50, bb51]

bb50
  0: StorageDead(_51)
    SourceInfo(regex-lite/src/hir/mod.rs:651:36-651:37)
  1: StorageDead(_50)
    SourceInfo(regex-lite/src/hir/mod.rs:651:36-651:37)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:651:17-654:67)
      kind: goto -> bb54
  }
  preds [bb49]
  succs [bb54]

bb51
  0: StorageDead(_51)
    SourceInfo(regex-lite/src/hir/mod.rs:651:36-651:37)
  1: StorageDead(_50)
    SourceInfo(regex-lite/src/hir/mod.rs:651:36-651:37)
  2: StorageLive(_53)
    SourceInfo(regex-lite/src/hir/mod.rs:652:24-652:45)
  3: StorageLive(_54)
    SourceInfo(regex-lite/src/hir/mod.rs:652:24-652:36)
  4: StorageLive(_55)
    SourceInfo(regex-lite/src/hir/mod.rs:652:33-652:35)
  5: _55 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:652:33-652:35)
  6: _56 = Len((*_2))
    SourceInfo(regex-lite/src/hir/mod.rs:652:24-652:36)
  7: _57 = Lt(_55, _56)
    SourceInfo(regex-lite/src/hir/mod.rs:652:24-652:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:652:24-652:36)
      kind: assert(move _57, "index out of bounds: the length is {} but the index is {}", move _56, _55) -> [success: bb52, unwind: bb138]
  }
  preds [bb49]
  succs [bb52, bb138]

bb52
  0: _54 = (*_2)[_55]
    SourceInfo(regex-lite/src/hir/mod.rs:652:24-652:36)
  1: _53 = Eq(move _54, const 13_u8)
    SourceInfo(regex-lite/src/hir/mod.rs:652:24-652:45)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:652:24-652:45)
      kind: switchInt(move _53) -> [0: bb55, otherwise: bb53]
  }
  preds [bb51]
  succs [bb53, bb55]

bb53
  0: StorageDead(_55)
    SourceInfo(regex-lite/src/hir/mod.rs:652:44-652:45)
  1: StorageDead(_54)
    SourceInfo(regex-lite/src/hir/mod.rs:652:44-652:45)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:651:17-654:67)
      kind: goto -> bb54
  }
  preds [bb52]
  succs [bb54]

bb54
  0: _0 = const true
    SourceInfo(regex-lite/src/hir/mod.rs:651:17-654:67)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:651:17-654:67)
      kind: goto -> bb65
  }
  preds [bb50, bb53]
  succs [bb65]

bb55
  0: StorageDead(_55)
    SourceInfo(regex-lite/src/hir/mod.rs:652:44-652:45)
  1: StorageDead(_54)
    SourceInfo(regex-lite/src/hir/mod.rs:652:44-652:45)
  2: StorageLive(_58)
    SourceInfo(regex-lite/src/hir/mod.rs:653:25-653:46)
  3: StorageLive(_59)
    SourceInfo(regex-lite/src/hir/mod.rs:653:25-653:37)
  4: StorageLive(_60)
    SourceInfo(regex-lite/src/hir/mod.rs:653:34-653:36)
  5: _60 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:653:34-653:36)
  6: _61 = Len((*_2))
    SourceInfo(regex-lite/src/hir/mod.rs:653:25-653:37)
  7: _62 = Lt(_60, _61)
    SourceInfo(regex-lite/src/hir/mod.rs:653:25-653:37)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:653:25-653:37)
      kind: assert(move _62, "index out of bounds: the length is {} but the index is {}", move _61, _60) -> [success: bb56, unwind: bb138]
  }
  preds [bb52]
  succs [bb56, bb138]

bb56
  0: _59 = (*_2)[_60]
    SourceInfo(regex-lite/src/hir/mod.rs:653:25-653:37)
  1: _58 = Eq(move _59, const 10_u8)
    SourceInfo(regex-lite/src/hir/mod.rs:653:25-653:46)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:653:25-653:46)
      kind: switchInt(move _58) -> [0: bb58, otherwise: bb57]
  }
  preds [bb55]
  succs [bb57, bb58]

bb57
  0: StorageDead(_60)
    SourceInfo(regex-lite/src/hir/mod.rs:653:45-653:46)
  1: StorageDead(_59)
    SourceInfo(regex-lite/src/hir/mod.rs:653:45-653:46)
  2: StorageLive(_63)
    SourceInfo(regex-lite/src/hir/mod.rs:654:29-654:36)
  3: StorageLive(_64)
    SourceInfo(regex-lite/src/hir/mod.rs:654:29-654:31)
  4: _64 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:654:29-654:31)
  5: _63 = Eq(move _64, const 0_usize)
    SourceInfo(regex-lite/src/hir/mod.rs:654:29-654:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:654:29-654:36)
      kind: switchInt(move _63) -> [0: bb60, otherwise: bb59]
  }
  preds [bb56]
  succs [bb59, bb60]

bb58
  0: StorageDead(_60)
    SourceInfo(regex-lite/src/hir/mod.rs:653:45-653:46)
  1: StorageDead(_59)
    SourceInfo(regex-lite/src/hir/mod.rs:653:45-653:46)
  2: _0 = const false
    SourceInfo(regex-lite/src/hir/mod.rs:653:24-654:67)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:653:24-654:67)
      kind: goto -> bb64
  }
  preds [bb56]
  succs [bb64]

bb59
  0: StorageDead(_64)
    SourceInfo(regex-lite/src/hir/mod.rs:654:35-654:36)
  1: _0 = const true
    SourceInfo(regex-lite/src/hir/mod.rs:654:28-654:66)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:654:28-654:66)
      kind: goto -> bb63
  }
  preds [bb57]
  succs [bb63]

bb60
  0: StorageDead(_64)
    SourceInfo(regex-lite/src/hir/mod.rs:654:35-654:36)
  1: StorageLive(_65)
    SourceInfo(regex-lite/src/hir/mod.rs:654:40-654:56)
  2: StorageLive(_66)
    SourceInfo(regex-lite/src/hir/mod.rs:654:49-654:55)
  3: StorageLive(_67)
    SourceInfo(regex-lite/src/hir/mod.rs:654:49-654:51)
  4: _67 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:654:49-654:51)
  5: _68 = SubWithOverflow(_67, const 1_usize)
    SourceInfo(regex-lite/src/hir/mod.rs:654:49-654:55)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:654:49-654:55)
      kind: assert(!move (_68.1: bool), "attempt to compute `{} - {}`, which would overflow", move _67, const 1_usize) -> [success: bb61, unwind: bb138]
  }
  preds [bb57]
  succs [bb61, bb138]

bb61
  0: _66 = move (_68.0: usize)
    SourceInfo(regex-lite/src/hir/mod.rs:654:49-654:55)
  1: StorageDead(_67)
    SourceInfo(regex-lite/src/hir/mod.rs:654:54-654:55)
  2: _69 = Len((*_2))
    SourceInfo(regex-lite/src/hir/mod.rs:654:40-654:56)
  3: _70 = Lt(_66, _69)
    SourceInfo(regex-lite/src/hir/mod.rs:654:40-654:56)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:654:40-654:56)
      kind: assert(move _70, "index out of bounds: the length is {} but the index is {}", move _69, _66) -> [success: bb62, unwind: bb138]
  }
  preds [bb60]
  succs [bb62, bb138]

bb62
  0: _65 = (*_2)[_66]
    SourceInfo(regex-lite/src/hir/mod.rs:654:40-654:56)
  1: _0 = Ne(move _65, const 13_u8)
    SourceInfo(regex-lite/src/hir/mod.rs:654:40-654:65)
  2: StorageDead(_66)
    SourceInfo(regex-lite/src/hir/mod.rs:654:64-654:65)
  3: StorageDead(_65)
    SourceInfo(regex-lite/src/hir/mod.rs:654:64-654:65)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:654:28-654:66)
      kind: goto -> bb63
  }
  preds [bb61]
  succs [bb63]

bb63
  0: StorageDead(_63)
    SourceInfo(regex-lite/src/hir/mod.rs:654:65-654:66)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:653:24-654:67)
      kind: goto -> bb64
  }
  preds [bb59, bb62]
  succs [bb64]

bb64
  0: StorageDead(_58)
    SourceInfo(regex-lite/src/hir/mod.rs:654:66-654:67)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:651:17-654:67)
      kind: goto -> bb65
  }
  preds [bb58, bb63]
  succs [bb65]

bb65
  0: StorageDead(_53)
    SourceInfo(regex-lite/src/hir/mod.rs:654:66-654:67)
  1: StorageDead(_49)
    SourceInfo(regex-lite/src/hir/mod.rs:654:66-654:67)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:654:66-654:67)
      kind: goto -> bb137
  }
  preds [bb54, bb64]
  succs [bb137]

bb66
  0: StorageLive(_71)
    SourceInfo(regex-lite/src/hir/mod.rs:657:21-657:32)
  1: StorageLive(_72)
    SourceInfo(regex-lite/src/hir/mod.rs:658:21-658:27)
  2: StorageLive(_73)
    SourceInfo(regex-lite/src/hir/mod.rs:658:21-658:23)
  3: _73 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:658:21-658:23)
  4: _72 = Gt(move _73, const 0_usize)
    SourceInfo(regex-lite/src/hir/mod.rs:658:21-658:27)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:658:21-658:27)
      kind: switchInt(move _72) -> [0: bb68, otherwise: bb67]
  }
  preds [bb8]
  succs [bb67, bb68]

bb67
  0: StorageDead(_73)
    SourceInfo(regex-lite/src/hir/mod.rs:658:26-658:27)
  1: StorageLive(_74)
    SourceInfo(regex-lite/src/hir/mod.rs:658:50-658:66)
  2: StorageLive(_75)
    SourceInfo(regex-lite/src/hir/mod.rs:658:59-658:65)
  3: StorageLive(_76)
    SourceInfo(regex-lite/src/hir/mod.rs:658:59-658:61)
  4: _76 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:658:59-658:61)
  5: _77 = SubWithOverflow(_76, const 1_usize)
    SourceInfo(regex-lite/src/hir/mod.rs:658:59-658:65)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:658:59-658:65)
      kind: assert(!move (_77.1: bool), "attempt to compute `{} - {}`, which would overflow", move _76, const 1_usize) -> [success: bb69, unwind: bb138]
  }
  preds [bb66]
  succs [bb69, bb138]

bb68
  0: StorageDead(_73)
    SourceInfo(regex-lite/src/hir/mod.rs:658:26-658:27)
  1: _71 = const false
    SourceInfo(regex-lite/src/hir/mod.rs:658:21-658:67)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:658:21-658:67)
      kind: goto -> bb72
  }
  preds [bb66]
  succs [bb72]

bb69
  0: _75 = move (_77.0: usize)
    SourceInfo(regex-lite/src/hir/mod.rs:658:59-658:65)
  1: StorageDead(_76)
    SourceInfo(regex-lite/src/hir/mod.rs:658:64-658:65)
  2: _78 = Len((*_2))
    SourceInfo(regex-lite/src/hir/mod.rs:658:50-658:66)
  3: _79 = Lt(_75, _78)
    SourceInfo(regex-lite/src/hir/mod.rs:658:50-658:66)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:658:50-658:66)
      kind: assert(move _79, "index out of bounds: the length is {} but the index is {}", move _78, _75) -> [success: bb70, unwind: bb138]
  }
  preds [bb67]
  succs [bb70, bb138]

bb70
  0: _74 = (*_2)[_75]
    SourceInfo(regex-lite/src/hir/mod.rs:658:50-658:66)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:658:31-658:67)
      kind: _71 = utf8::is_word_byte(move _74) -> [return: bb71, unwind: bb138]
  }
  preds [bb69]
  succs [bb71, bb138]

bb71
  0: StorageDead(_75)
    SourceInfo(regex-lite/src/hir/mod.rs:658:66-658:67)
  1: StorageDead(_74)
    SourceInfo(regex-lite/src/hir/mod.rs:658:66-658:67)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:658:21-658:67)
      kind: goto -> bb72
  }
  preds [bb70]
  succs [bb72]

bb72
  0: StorageDead(_72)
    SourceInfo(regex-lite/src/hir/mod.rs:658:66-658:67)
  1: FakeRead(ForLet(None), _71)
    SourceInfo(regex-lite/src/hir/mod.rs:657:21-657:32)
  2: StorageLive(_80)
    SourceInfo(regex-lite/src/hir/mod.rs:659:21-659:31)
  3: StorageLive(_81)
    SourceInfo(regex-lite/src/hir/mod.rs:660:21-660:40)
  4: StorageLive(_82)
    SourceInfo(regex-lite/src/hir/mod.rs:660:21-660:23)
  5: _82 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:660:21-660:23)
  6: StorageLive(_83)
    SourceInfo(regex-lite/src/hir/mod.rs:660:26-660:40)
  7: StorageLive(_84)
    SourceInfo(regex-lite/src/hir/mod.rs:660:26-660:34)
  8: _84 = &(*_2)
    SourceInfo(regex-lite/src/hir/mod.rs:660:26-660:34)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:660:26-660:40)
      kind: _83 = core::slice::<impl [u8]>::len(move _84) -> [return: bb73, unwind: bb138]
  }
  preds [bb68, bb71]
  succs [bb73, bb138]

bb73
  0: StorageDead(_84)
    SourceInfo(regex-lite/src/hir/mod.rs:660:39-660:40)
  1: _81 = Lt(move _82, move _83)
    SourceInfo(regex-lite/src/hir/mod.rs:660:21-660:40)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:660:21-660:40)
      kind: switchInt(move _81) -> [0: bb75, otherwise: bb74]
  }
  preds [bb72]
  succs [bb74, bb75]

bb74
  0: StorageDead(_83)
    SourceInfo(regex-lite/src/hir/mod.rs:660:39-660:40)
  1: StorageDead(_82)
    SourceInfo(regex-lite/src/hir/mod.rs:660:39-660:40)
  2: StorageLive(_85)
    SourceInfo(regex-lite/src/hir/mod.rs:660:63-660:75)
  3: StorageLive(_86)
    SourceInfo(regex-lite/src/hir/mod.rs:660:72-660:74)
  4: _86 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:660:72-660:74)
  5: _87 = Len((*_2))
    SourceInfo(regex-lite/src/hir/mod.rs:660:63-660:75)
  6: _88 = Lt(_86, _87)
    SourceInfo(regex-lite/src/hir/mod.rs:660:63-660:75)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:660:63-660:75)
      kind: assert(move _88, "index out of bounds: the length is {} but the index is {}", move _87, _86) -> [success: bb76, unwind: bb138]
  }
  preds [bb73]
  succs [bb76, bb138]

bb75
  0: StorageDead(_83)
    SourceInfo(regex-lite/src/hir/mod.rs:660:39-660:40)
  1: StorageDead(_82)
    SourceInfo(regex-lite/src/hir/mod.rs:660:39-660:40)
  2: _80 = const false
    SourceInfo(regex-lite/src/hir/mod.rs:660:21-660:76)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:660:21-660:76)
      kind: goto -> bb78
  }
  preds [bb73]
  succs [bb78]

bb76
  0: _85 = (*_2)[_86]
    SourceInfo(regex-lite/src/hir/mod.rs:660:63-660:75)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:660:44-660:76)
      kind: _80 = utf8::is_word_byte(move _85) -> [return: bb77, unwind: bb138]
  }
  preds [bb74]
  succs [bb77, bb138]

bb77
  0: StorageDead(_86)
    SourceInfo(regex-lite/src/hir/mod.rs:660:75-660:76)
  1: StorageDead(_85)
    SourceInfo(regex-lite/src/hir/mod.rs:660:75-660:76)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:660:21-660:76)
      kind: goto -> bb78
  }
  preds [bb76]
  succs [bb78]

bb78
  0: StorageDead(_81)
    SourceInfo(regex-lite/src/hir/mod.rs:660:75-660:76)
  1: FakeRead(ForLet(None), _80)
    SourceInfo(regex-lite/src/hir/mod.rs:659:21-659:31)
  2: StorageLive(_89)
    SourceInfo(regex-lite/src/hir/mod.rs:661:17-661:28)
  3: _89 = _71
    SourceInfo(regex-lite/src/hir/mod.rs:661:17-661:28)
  4: StorageLive(_90)
    SourceInfo(regex-lite/src/hir/mod.rs:661:32-661:42)
  5: _90 = _80
    SourceInfo(regex-lite/src/hir/mod.rs:661:32-661:42)
  6: _0 = Ne(move _89, move _90)
    SourceInfo(regex-lite/src/hir/mod.rs:661:17-661:42)
  7: StorageDead(_90)
    SourceInfo(regex-lite/src/hir/mod.rs:661:41-661:42)
  8: StorageDead(_89)
    SourceInfo(regex-lite/src/hir/mod.rs:661:41-661:42)
  9: StorageDead(_80)
    SourceInfo(regex-lite/src/hir/mod.rs:662:13-662:14)
  10: StorageDead(_71)
    SourceInfo(regex-lite/src/hir/mod.rs:662:13-662:14)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:662:13-662:14)
      kind: goto -> bb137
  }
  preds [bb75, bb77]
  succs [bb137]

bb79
  0: StorageLive(_91)
    SourceInfo(regex-lite/src/hir/mod.rs:664:21-664:32)
  1: StorageLive(_92)
    SourceInfo(regex-lite/src/hir/mod.rs:665:21-665:27)
  2: StorageLive(_93)
    SourceInfo(regex-lite/src/hir/mod.rs:665:21-665:23)
  3: _93 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:665:21-665:23)
  4: _92 = Gt(move _93, const 0_usize)
    SourceInfo(regex-lite/src/hir/mod.rs:665:21-665:27)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:665:21-665:27)
      kind: switchInt(move _92) -> [0: bb81, otherwise: bb80]
  }
  preds [bb9]
  succs [bb80, bb81]

bb80
  0: StorageDead(_93)
    SourceInfo(regex-lite/src/hir/mod.rs:665:26-665:27)
  1: StorageLive(_94)
    SourceInfo(regex-lite/src/hir/mod.rs:665:50-665:66)
  2: StorageLive(_95)
    SourceInfo(regex-lite/src/hir/mod.rs:665:59-665:65)
  3: StorageLive(_96)
    SourceInfo(regex-lite/src/hir/mod.rs:665:59-665:61)
  4: _96 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:665:59-665:61)
  5: _97 = SubWithOverflow(_96, const 1_usize)
    SourceInfo(regex-lite/src/hir/mod.rs:665:59-665:65)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:665:59-665:65)
      kind: assert(!move (_97.1: bool), "attempt to compute `{} - {}`, which would overflow", move _96, const 1_usize) -> [success: bb82, unwind: bb138]
  }
  preds [bb79]
  succs [bb82, bb138]

bb81
  0: StorageDead(_93)
    SourceInfo(regex-lite/src/hir/mod.rs:665:26-665:27)
  1: _91 = const false
    SourceInfo(regex-lite/src/hir/mod.rs:665:21-665:67)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:665:21-665:67)
      kind: goto -> bb85
  }
  preds [bb79]
  succs [bb85]

bb82
  0: _95 = move (_97.0: usize)
    SourceInfo(regex-lite/src/hir/mod.rs:665:59-665:65)
  1: StorageDead(_96)
    SourceInfo(regex-lite/src/hir/mod.rs:665:64-665:65)
  2: _98 = Len((*_2))
    SourceInfo(regex-lite/src/hir/mod.rs:665:50-665:66)
  3: _99 = Lt(_95, _98)
    SourceInfo(regex-lite/src/hir/mod.rs:665:50-665:66)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:665:50-665:66)
      kind: assert(move _99, "index out of bounds: the length is {} but the index is {}", move _98, _95) -> [success: bb83, unwind: bb138]
  }
  preds [bb80]
  succs [bb83, bb138]

bb83
  0: _94 = (*_2)[_95]
    SourceInfo(regex-lite/src/hir/mod.rs:665:50-665:66)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:665:31-665:67)
      kind: _91 = utf8::is_word_byte(move _94) -> [return: bb84, unwind: bb138]
  }
  preds [bb82]
  succs [bb84, bb138]

bb84
  0: StorageDead(_95)
    SourceInfo(regex-lite/src/hir/mod.rs:665:66-665:67)
  1: StorageDead(_94)
    SourceInfo(regex-lite/src/hir/mod.rs:665:66-665:67)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:665:21-665:67)
      kind: goto -> bb85
  }
  preds [bb83]
  succs [bb85]

bb85
  0: StorageDead(_92)
    SourceInfo(regex-lite/src/hir/mod.rs:665:66-665:67)
  1: FakeRead(ForLet(None), _91)
    SourceInfo(regex-lite/src/hir/mod.rs:664:21-664:32)
  2: StorageLive(_100)
    SourceInfo(regex-lite/src/hir/mod.rs:666:21-666:31)
  3: StorageLive(_101)
    SourceInfo(regex-lite/src/hir/mod.rs:667:21-667:40)
  4: StorageLive(_102)
    SourceInfo(regex-lite/src/hir/mod.rs:667:21-667:23)
  5: _102 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:667:21-667:23)
  6: StorageLive(_103)
    SourceInfo(regex-lite/src/hir/mod.rs:667:26-667:40)
  7: StorageLive(_104)
    SourceInfo(regex-lite/src/hir/mod.rs:667:26-667:34)
  8: _104 = &(*_2)
    SourceInfo(regex-lite/src/hir/mod.rs:667:26-667:34)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:667:26-667:40)
      kind: _103 = core::slice::<impl [u8]>::len(move _104) -> [return: bb86, unwind: bb138]
  }
  preds [bb81, bb84]
  succs [bb86, bb138]

bb86
  0: StorageDead(_104)
    SourceInfo(regex-lite/src/hir/mod.rs:667:39-667:40)
  1: _101 = Lt(move _102, move _103)
    SourceInfo(regex-lite/src/hir/mod.rs:667:21-667:40)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:667:21-667:40)
      kind: switchInt(move _101) -> [0: bb88, otherwise: bb87]
  }
  preds [bb85]
  succs [bb87, bb88]

bb87
  0: StorageDead(_103)
    SourceInfo(regex-lite/src/hir/mod.rs:667:39-667:40)
  1: StorageDead(_102)
    SourceInfo(regex-lite/src/hir/mod.rs:667:39-667:40)
  2: StorageLive(_105)
    SourceInfo(regex-lite/src/hir/mod.rs:667:63-667:75)
  3: StorageLive(_106)
    SourceInfo(regex-lite/src/hir/mod.rs:667:72-667:74)
  4: _106 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:667:72-667:74)
  5: _107 = Len((*_2))
    SourceInfo(regex-lite/src/hir/mod.rs:667:63-667:75)
  6: _108 = Lt(_106, _107)
    SourceInfo(regex-lite/src/hir/mod.rs:667:63-667:75)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:667:63-667:75)
      kind: assert(move _108, "index out of bounds: the length is {} but the index is {}", move _107, _106) -> [success: bb89, unwind: bb138]
  }
  preds [bb86]
  succs [bb89, bb138]

bb88
  0: StorageDead(_103)
    SourceInfo(regex-lite/src/hir/mod.rs:667:39-667:40)
  1: StorageDead(_102)
    SourceInfo(regex-lite/src/hir/mod.rs:667:39-667:40)
  2: _100 = const false
    SourceInfo(regex-lite/src/hir/mod.rs:667:21-667:76)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:667:21-667:76)
      kind: goto -> bb91
  }
  preds [bb86]
  succs [bb91]

bb89
  0: _105 = (*_2)[_106]
    SourceInfo(regex-lite/src/hir/mod.rs:667:63-667:75)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:667:44-667:76)
      kind: _100 = utf8::is_word_byte(move _105) -> [return: bb90, unwind: bb138]
  }
  preds [bb87]
  succs [bb90, bb138]

bb90
  0: StorageDead(_106)
    SourceInfo(regex-lite/src/hir/mod.rs:667:75-667:76)
  1: StorageDead(_105)
    SourceInfo(regex-lite/src/hir/mod.rs:667:75-667:76)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:667:21-667:76)
      kind: goto -> bb91
  }
  preds [bb89]
  succs [bb91]

bb91
  0: StorageDead(_101)
    SourceInfo(regex-lite/src/hir/mod.rs:667:75-667:76)
  1: FakeRead(ForLet(None), _100)
    SourceInfo(regex-lite/src/hir/mod.rs:666:21-666:31)
  2: StorageLive(_109)
    SourceInfo(regex-lite/src/hir/mod.rs:668:17-668:28)
  3: _109 = _91
    SourceInfo(regex-lite/src/hir/mod.rs:668:17-668:28)
  4: StorageLive(_110)
    SourceInfo(regex-lite/src/hir/mod.rs:668:32-668:42)
  5: _110 = _100
    SourceInfo(regex-lite/src/hir/mod.rs:668:32-668:42)
  6: _0 = Eq(move _109, move _110)
    SourceInfo(regex-lite/src/hir/mod.rs:668:17-668:42)
  7: StorageDead(_110)
    SourceInfo(regex-lite/src/hir/mod.rs:668:41-668:42)
  8: StorageDead(_109)
    SourceInfo(regex-lite/src/hir/mod.rs:668:41-668:42)
  9: StorageDead(_100)
    SourceInfo(regex-lite/src/hir/mod.rs:669:13-669:14)
  10: StorageDead(_91)
    SourceInfo(regex-lite/src/hir/mod.rs:669:13-669:14)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:669:13-669:14)
      kind: goto -> bb137
  }
  preds [bb88, bb90]
  succs [bb137]

bb92
  0: StorageLive(_111)
    SourceInfo(regex-lite/src/hir/mod.rs:671:21-671:32)
  1: StorageLive(_112)
    SourceInfo(regex-lite/src/hir/mod.rs:672:21-672:27)
  2: StorageLive(_113)
    SourceInfo(regex-lite/src/hir/mod.rs:672:21-672:23)
  3: _113 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:672:21-672:23)
  4: _112 = Gt(move _113, const 0_usize)
    SourceInfo(regex-lite/src/hir/mod.rs:672:21-672:27)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:672:21-672:27)
      kind: switchInt(move _112) -> [0: bb94, otherwise: bb93]
  }
  preds [bb10]
  succs [bb93, bb94]

bb93
  0: StorageDead(_113)
    SourceInfo(regex-lite/src/hir/mod.rs:672:26-672:27)
  1: StorageLive(_114)
    SourceInfo(regex-lite/src/hir/mod.rs:672:50-672:66)
  2: StorageLive(_115)
    SourceInfo(regex-lite/src/hir/mod.rs:672:59-672:65)
  3: StorageLive(_116)
    SourceInfo(regex-lite/src/hir/mod.rs:672:59-672:61)
  4: _116 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:672:59-672:61)
  5: _117 = SubWithOverflow(_116, const 1_usize)
    SourceInfo(regex-lite/src/hir/mod.rs:672:59-672:65)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:672:59-672:65)
      kind: assert(!move (_117.1: bool), "attempt to compute `{} - {}`, which would overflow", move _116, const 1_usize) -> [success: bb95, unwind: bb138]
  }
  preds [bb92]
  succs [bb95, bb138]

bb94
  0: StorageDead(_113)
    SourceInfo(regex-lite/src/hir/mod.rs:672:26-672:27)
  1: _111 = const false
    SourceInfo(regex-lite/src/hir/mod.rs:672:21-672:67)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:672:21-672:67)
      kind: goto -> bb98
  }
  preds [bb92]
  succs [bb98]

bb95
  0: _115 = move (_117.0: usize)
    SourceInfo(regex-lite/src/hir/mod.rs:672:59-672:65)
  1: StorageDead(_116)
    SourceInfo(regex-lite/src/hir/mod.rs:672:64-672:65)
  2: _118 = Len((*_2))
    SourceInfo(regex-lite/src/hir/mod.rs:672:50-672:66)
  3: _119 = Lt(_115, _118)
    SourceInfo(regex-lite/src/hir/mod.rs:672:50-672:66)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:672:50-672:66)
      kind: assert(move _119, "index out of bounds: the length is {} but the index is {}", move _118, _115) -> [success: bb96, unwind: bb138]
  }
  preds [bb93]
  succs [bb96, bb138]

bb96
  0: _114 = (*_2)[_115]
    SourceInfo(regex-lite/src/hir/mod.rs:672:50-672:66)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:672:31-672:67)
      kind: _111 = utf8::is_word_byte(move _114) -> [return: bb97, unwind: bb138]
  }
  preds [bb95]
  succs [bb97, bb138]

bb97
  0: StorageDead(_115)
    SourceInfo(regex-lite/src/hir/mod.rs:672:66-672:67)
  1: StorageDead(_114)
    SourceInfo(regex-lite/src/hir/mod.rs:672:66-672:67)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:672:21-672:67)
      kind: goto -> bb98
  }
  preds [bb96]
  succs [bb98]

bb98
  0: StorageDead(_112)
    SourceInfo(regex-lite/src/hir/mod.rs:672:66-672:67)
  1: FakeRead(ForLet(None), _111)
    SourceInfo(regex-lite/src/hir/mod.rs:671:21-671:32)
  2: StorageLive(_120)
    SourceInfo(regex-lite/src/hir/mod.rs:673:21-673:31)
  3: StorageLive(_121)
    SourceInfo(regex-lite/src/hir/mod.rs:674:21-674:40)
  4: StorageLive(_122)
    SourceInfo(regex-lite/src/hir/mod.rs:674:21-674:23)
  5: _122 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:674:21-674:23)
  6: StorageLive(_123)
    SourceInfo(regex-lite/src/hir/mod.rs:674:26-674:40)
  7: StorageLive(_124)
    SourceInfo(regex-lite/src/hir/mod.rs:674:26-674:34)
  8: _124 = &(*_2)
    SourceInfo(regex-lite/src/hir/mod.rs:674:26-674:34)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:674:26-674:40)
      kind: _123 = core::slice::<impl [u8]>::len(move _124) -> [return: bb99, unwind: bb138]
  }
  preds [bb94, bb97]
  succs [bb99, bb138]

bb99
  0: StorageDead(_124)
    SourceInfo(regex-lite/src/hir/mod.rs:674:39-674:40)
  1: _121 = Lt(move _122, move _123)
    SourceInfo(regex-lite/src/hir/mod.rs:674:21-674:40)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:674:21-674:40)
      kind: switchInt(move _121) -> [0: bb101, otherwise: bb100]
  }
  preds [bb98]
  succs [bb100, bb101]

bb100
  0: StorageDead(_123)
    SourceInfo(regex-lite/src/hir/mod.rs:674:39-674:40)
  1: StorageDead(_122)
    SourceInfo(regex-lite/src/hir/mod.rs:674:39-674:40)
  2: StorageLive(_125)
    SourceInfo(regex-lite/src/hir/mod.rs:674:63-674:75)
  3: StorageLive(_126)
    SourceInfo(regex-lite/src/hir/mod.rs:674:72-674:74)
  4: _126 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:674:72-674:74)
  5: _127 = Len((*_2))
    SourceInfo(regex-lite/src/hir/mod.rs:674:63-674:75)
  6: _128 = Lt(_126, _127)
    SourceInfo(regex-lite/src/hir/mod.rs:674:63-674:75)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:674:63-674:75)
      kind: assert(move _128, "index out of bounds: the length is {} but the index is {}", move _127, _126) -> [success: bb102, unwind: bb138]
  }
  preds [bb99]
  succs [bb102, bb138]

bb101
  0: StorageDead(_123)
    SourceInfo(regex-lite/src/hir/mod.rs:674:39-674:40)
  1: StorageDead(_122)
    SourceInfo(regex-lite/src/hir/mod.rs:674:39-674:40)
  2: _120 = const false
    SourceInfo(regex-lite/src/hir/mod.rs:674:21-674:76)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:674:21-674:76)
      kind: goto -> bb104
  }
  preds [bb99]
  succs [bb104]

bb102
  0: _125 = (*_2)[_126]
    SourceInfo(regex-lite/src/hir/mod.rs:674:63-674:75)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:674:44-674:76)
      kind: _120 = utf8::is_word_byte(move _125) -> [return: bb103, unwind: bb138]
  }
  preds [bb100]
  succs [bb103, bb138]

bb103
  0: StorageDead(_126)
    SourceInfo(regex-lite/src/hir/mod.rs:674:75-674:76)
  1: StorageDead(_125)
    SourceInfo(regex-lite/src/hir/mod.rs:674:75-674:76)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:674:21-674:76)
      kind: goto -> bb104
  }
  preds [bb102]
  succs [bb104]

bb104
  0: StorageDead(_121)
    SourceInfo(regex-lite/src/hir/mod.rs:674:75-674:76)
  1: FakeRead(ForLet(None), _120)
    SourceInfo(regex-lite/src/hir/mod.rs:673:21-673:31)
  2: StorageLive(_129)
    SourceInfo(regex-lite/src/hir/mod.rs:675:18-675:29)
  3: _129 = _111
    SourceInfo(regex-lite/src/hir/mod.rs:675:18-675:29)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:675:18-675:29)
      kind: switchInt(move _129) -> [0: bb105, otherwise: bb106]
  }
  preds [bb101, bb103]
  succs [bb105, bb106]

bb105
  0: _0 = _120
    SourceInfo(regex-lite/src/hir/mod.rs:675:33-675:43)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:675:17-675:43)
      kind: goto -> bb107
  }
  preds [bb104]
  succs [bb107]

bb106
  0: _0 = const false
    SourceInfo(regex-lite/src/hir/mod.rs:675:17-675:43)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:675:17-675:43)
      kind: goto -> bb107
  }
  preds [bb104]
  succs [bb107]

bb107
  0: StorageDead(_129)
    SourceInfo(regex-lite/src/hir/mod.rs:675:42-675:43)
  1: StorageDead(_120)
    SourceInfo(regex-lite/src/hir/mod.rs:676:13-676:14)
  2: StorageDead(_111)
    SourceInfo(regex-lite/src/hir/mod.rs:676:13-676:14)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:676:13-676:14)
      kind: goto -> bb137
  }
  preds [bb105, bb106]
  succs [bb137]

bb108
  0: StorageLive(_130)
    SourceInfo(regex-lite/src/hir/mod.rs:678:21-678:32)
  1: StorageLive(_131)
    SourceInfo(regex-lite/src/hir/mod.rs:679:21-679:27)
  2: StorageLive(_132)
    SourceInfo(regex-lite/src/hir/mod.rs:679:21-679:23)
  3: _132 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:679:21-679:23)
  4: _131 = Gt(move _132, const 0_usize)
    SourceInfo(regex-lite/src/hir/mod.rs:679:21-679:27)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:679:21-679:27)
      kind: switchInt(move _131) -> [0: bb110, otherwise: bb109]
  }
  preds [bb11]
  succs [bb109, bb110]

bb109
  0: StorageDead(_132)
    SourceInfo(regex-lite/src/hir/mod.rs:679:26-679:27)
  1: StorageLive(_133)
    SourceInfo(regex-lite/src/hir/mod.rs:679:50-679:66)
  2: StorageLive(_134)
    SourceInfo(regex-lite/src/hir/mod.rs:679:59-679:65)
  3: StorageLive(_135)
    SourceInfo(regex-lite/src/hir/mod.rs:679:59-679:61)
  4: _135 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:679:59-679:61)
  5: _136 = SubWithOverflow(_135, const 1_usize)
    SourceInfo(regex-lite/src/hir/mod.rs:679:59-679:65)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:679:59-679:65)
      kind: assert(!move (_136.1: bool), "attempt to compute `{} - {}`, which would overflow", move _135, const 1_usize) -> [success: bb111, unwind: bb138]
  }
  preds [bb108]
  succs [bb111, bb138]

bb110
  0: StorageDead(_132)
    SourceInfo(regex-lite/src/hir/mod.rs:679:26-679:27)
  1: _130 = const false
    SourceInfo(regex-lite/src/hir/mod.rs:679:21-679:67)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:679:21-679:67)
      kind: goto -> bb114
  }
  preds [bb108]
  succs [bb114]

bb111
  0: _134 = move (_136.0: usize)
    SourceInfo(regex-lite/src/hir/mod.rs:679:59-679:65)
  1: StorageDead(_135)
    SourceInfo(regex-lite/src/hir/mod.rs:679:64-679:65)
  2: _137 = Len((*_2))
    SourceInfo(regex-lite/src/hir/mod.rs:679:50-679:66)
  3: _138 = Lt(_134, _137)
    SourceInfo(regex-lite/src/hir/mod.rs:679:50-679:66)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:679:50-679:66)
      kind: assert(move _138, "index out of bounds: the length is {} but the index is {}", move _137, _134) -> [success: bb112, unwind: bb138]
  }
  preds [bb109]
  succs [bb112, bb138]

bb112
  0: _133 = (*_2)[_134]
    SourceInfo(regex-lite/src/hir/mod.rs:679:50-679:66)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:679:31-679:67)
      kind: _130 = utf8::is_word_byte(move _133) -> [return: bb113, unwind: bb138]
  }
  preds [bb111]
  succs [bb113, bb138]

bb113
  0: StorageDead(_134)
    SourceInfo(regex-lite/src/hir/mod.rs:679:66-679:67)
  1: StorageDead(_133)
    SourceInfo(regex-lite/src/hir/mod.rs:679:66-679:67)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:679:21-679:67)
      kind: goto -> bb114
  }
  preds [bb112]
  succs [bb114]

bb114
  0: StorageDead(_131)
    SourceInfo(regex-lite/src/hir/mod.rs:679:66-679:67)
  1: FakeRead(ForLet(None), _130)
    SourceInfo(regex-lite/src/hir/mod.rs:678:21-678:32)
  2: StorageLive(_139)
    SourceInfo(regex-lite/src/hir/mod.rs:680:21-680:31)
  3: StorageLive(_140)
    SourceInfo(regex-lite/src/hir/mod.rs:681:21-681:40)
  4: StorageLive(_141)
    SourceInfo(regex-lite/src/hir/mod.rs:681:21-681:23)
  5: _141 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:681:21-681:23)
  6: StorageLive(_142)
    SourceInfo(regex-lite/src/hir/mod.rs:681:26-681:40)
  7: StorageLive(_143)
    SourceInfo(regex-lite/src/hir/mod.rs:681:26-681:34)
  8: _143 = &(*_2)
    SourceInfo(regex-lite/src/hir/mod.rs:681:26-681:34)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:681:26-681:40)
      kind: _142 = core::slice::<impl [u8]>::len(move _143) -> [return: bb115, unwind: bb138]
  }
  preds [bb110, bb113]
  succs [bb115, bb138]

bb115
  0: StorageDead(_143)
    SourceInfo(regex-lite/src/hir/mod.rs:681:39-681:40)
  1: _140 = Lt(move _141, move _142)
    SourceInfo(regex-lite/src/hir/mod.rs:681:21-681:40)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:681:21-681:40)
      kind: switchInt(move _140) -> [0: bb117, otherwise: bb116]
  }
  preds [bb114]
  succs [bb116, bb117]

bb116
  0: StorageDead(_142)
    SourceInfo(regex-lite/src/hir/mod.rs:681:39-681:40)
  1: StorageDead(_141)
    SourceInfo(regex-lite/src/hir/mod.rs:681:39-681:40)
  2: StorageLive(_144)
    SourceInfo(regex-lite/src/hir/mod.rs:681:63-681:75)
  3: StorageLive(_145)
    SourceInfo(regex-lite/src/hir/mod.rs:681:72-681:74)
  4: _145 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:681:72-681:74)
  5: _146 = Len((*_2))
    SourceInfo(regex-lite/src/hir/mod.rs:681:63-681:75)
  6: _147 = Lt(_145, _146)
    SourceInfo(regex-lite/src/hir/mod.rs:681:63-681:75)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:681:63-681:75)
      kind: assert(move _147, "index out of bounds: the length is {} but the index is {}", move _146, _145) -> [success: bb118, unwind: bb138]
  }
  preds [bb115]
  succs [bb118, bb138]

bb117
  0: StorageDead(_142)
    SourceInfo(regex-lite/src/hir/mod.rs:681:39-681:40)
  1: StorageDead(_141)
    SourceInfo(regex-lite/src/hir/mod.rs:681:39-681:40)
  2: _139 = const false
    SourceInfo(regex-lite/src/hir/mod.rs:681:21-681:76)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:681:21-681:76)
      kind: goto -> bb120
  }
  preds [bb115]
  succs [bb120]

bb118
  0: _144 = (*_2)[_145]
    SourceInfo(regex-lite/src/hir/mod.rs:681:63-681:75)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:681:44-681:76)
      kind: _139 = utf8::is_word_byte(move _144) -> [return: bb119, unwind: bb138]
  }
  preds [bb116]
  succs [bb119, bb138]

bb119
  0: StorageDead(_145)
    SourceInfo(regex-lite/src/hir/mod.rs:681:75-681:76)
  1: StorageDead(_144)
    SourceInfo(regex-lite/src/hir/mod.rs:681:75-681:76)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:681:21-681:76)
      kind: goto -> bb120
  }
  preds [bb118]
  succs [bb120]

bb120
  0: StorageDead(_140)
    SourceInfo(regex-lite/src/hir/mod.rs:681:75-681:76)
  1: FakeRead(ForLet(None), _139)
    SourceInfo(regex-lite/src/hir/mod.rs:680:21-680:31)
  2: StorageLive(_148)
    SourceInfo(regex-lite/src/hir/mod.rs:682:17-682:28)
  3: _148 = _130
    SourceInfo(regex-lite/src/hir/mod.rs:682:17-682:28)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:682:17-682:28)
      kind: switchInt(move _148) -> [0: bb122, otherwise: bb121]
  }
  preds [bb117, bb119]
  succs [bb121, bb122]

bb121
  0: StorageLive(_149)
    SourceInfo(regex-lite/src/hir/mod.rs:682:33-682:43)
  1: _149 = _139
    SourceInfo(regex-lite/src/hir/mod.rs:682:33-682:43)
  2: _0 = Not(move _149)
    SourceInfo(regex-lite/src/hir/mod.rs:682:32-682:43)
  3: StorageDead(_149)
    SourceInfo(regex-lite/src/hir/mod.rs:682:42-682:43)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:682:17-682:43)
      kind: goto -> bb123
  }
  preds [bb120]
  succs [bb123]

bb122
  0: _0 = const false
    SourceInfo(regex-lite/src/hir/mod.rs:682:17-682:43)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:682:17-682:43)
      kind: goto -> bb123
  }
  preds [bb120]
  succs [bb123]

bb123
  0: StorageDead(_148)
    SourceInfo(regex-lite/src/hir/mod.rs:682:42-682:43)
  1: StorageDead(_139)
    SourceInfo(regex-lite/src/hir/mod.rs:683:13-683:14)
  2: StorageDead(_130)
    SourceInfo(regex-lite/src/hir/mod.rs:683:13-683:14)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:683:13-683:14)
      kind: goto -> bb137
  }
  preds [bb121, bb122]
  succs [bb137]

bb124
  0: StorageLive(_150)
    SourceInfo(regex-lite/src/hir/mod.rs:685:21-685:32)
  1: StorageLive(_151)
    SourceInfo(regex-lite/src/hir/mod.rs:686:21-686:27)
  2: StorageLive(_152)
    SourceInfo(regex-lite/src/hir/mod.rs:686:21-686:23)
  3: _152 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:686:21-686:23)
  4: _151 = Gt(move _152, const 0_usize)
    SourceInfo(regex-lite/src/hir/mod.rs:686:21-686:27)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:686:21-686:27)
      kind: switchInt(move _151) -> [0: bb126, otherwise: bb125]
  }
  preds [bb12]
  succs [bb125, bb126]

bb125
  0: StorageDead(_152)
    SourceInfo(regex-lite/src/hir/mod.rs:686:26-686:27)
  1: StorageLive(_153)
    SourceInfo(regex-lite/src/hir/mod.rs:686:50-686:66)
  2: StorageLive(_154)
    SourceInfo(regex-lite/src/hir/mod.rs:686:59-686:65)
  3: StorageLive(_155)
    SourceInfo(regex-lite/src/hir/mod.rs:686:59-686:61)
  4: _155 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:686:59-686:61)
  5: _156 = SubWithOverflow(_155, const 1_usize)
    SourceInfo(regex-lite/src/hir/mod.rs:686:59-686:65)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:686:59-686:65)
      kind: assert(!move (_156.1: bool), "attempt to compute `{} - {}`, which would overflow", move _155, const 1_usize) -> [success: bb127, unwind: bb138]
  }
  preds [bb124]
  succs [bb127, bb138]

bb126
  0: StorageDead(_152)
    SourceInfo(regex-lite/src/hir/mod.rs:686:26-686:27)
  1: _150 = const false
    SourceInfo(regex-lite/src/hir/mod.rs:686:21-686:67)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:686:21-686:67)
      kind: goto -> bb130
  }
  preds [bb124]
  succs [bb130]

bb127
  0: _154 = move (_156.0: usize)
    SourceInfo(regex-lite/src/hir/mod.rs:686:59-686:65)
  1: StorageDead(_155)
    SourceInfo(regex-lite/src/hir/mod.rs:686:64-686:65)
  2: _157 = Len((*_2))
    SourceInfo(regex-lite/src/hir/mod.rs:686:50-686:66)
  3: _158 = Lt(_154, _157)
    SourceInfo(regex-lite/src/hir/mod.rs:686:50-686:66)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:686:50-686:66)
      kind: assert(move _158, "index out of bounds: the length is {} but the index is {}", move _157, _154) -> [success: bb128, unwind: bb138]
  }
  preds [bb125]
  succs [bb128, bb138]

bb128
  0: _153 = (*_2)[_154]
    SourceInfo(regex-lite/src/hir/mod.rs:686:50-686:66)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:686:31-686:67)
      kind: _150 = utf8::is_word_byte(move _153) -> [return: bb129, unwind: bb138]
  }
  preds [bb127]
  succs [bb129, bb138]

bb129
  0: StorageDead(_154)
    SourceInfo(regex-lite/src/hir/mod.rs:686:66-686:67)
  1: StorageDead(_153)
    SourceInfo(regex-lite/src/hir/mod.rs:686:66-686:67)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:686:21-686:67)
      kind: goto -> bb130
  }
  preds [bb128]
  succs [bb130]

bb130
  0: StorageDead(_151)
    SourceInfo(regex-lite/src/hir/mod.rs:686:66-686:67)
  1: FakeRead(ForLet(None), _150)
    SourceInfo(regex-lite/src/hir/mod.rs:685:21-685:32)
  2: StorageLive(_159)
    SourceInfo(regex-lite/src/hir/mod.rs:687:18-687:29)
  3: _159 = _150
    SourceInfo(regex-lite/src/hir/mod.rs:687:18-687:29)
  4: _0 = Not(move _159)
    SourceInfo(regex-lite/src/hir/mod.rs:687:17-687:29)
  5: StorageDead(_159)
    SourceInfo(regex-lite/src/hir/mod.rs:687:28-687:29)
  6: StorageDead(_150)
    SourceInfo(regex-lite/src/hir/mod.rs:688:13-688:14)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:688:13-688:14)
      kind: goto -> bb137
  }
  preds [bb126, bb129]
  succs [bb137]

bb131
  0: StorageDead(_164)
    SourceInfo(regex-lite/src/hir/mod.rs:691:39-691:40)
  1: _161 = Lt(move _162, move _163)
    SourceInfo(regex-lite/src/hir/mod.rs:691:21-691:40)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:691:21-691:40)
      kind: switchInt(move _161) -> [0: bb133, otherwise: bb132]
  }
  preds [bb13]
  succs [bb132, bb133]

bb132
  0: StorageDead(_163)
    SourceInfo(regex-lite/src/hir/mod.rs:691:39-691:40)
  1: StorageDead(_162)
    SourceInfo(regex-lite/src/hir/mod.rs:691:39-691:40)
  2: StorageLive(_165)
    SourceInfo(regex-lite/src/hir/mod.rs:691:63-691:75)
  3: StorageLive(_166)
    SourceInfo(regex-lite/src/hir/mod.rs:691:72-691:74)
  4: _166 = _3
    SourceInfo(regex-lite/src/hir/mod.rs:691:72-691:74)
  5: _167 = Len((*_2))
    SourceInfo(regex-lite/src/hir/mod.rs:691:63-691:75)
  6: _168 = Lt(_166, _167)
    SourceInfo(regex-lite/src/hir/mod.rs:691:63-691:75)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:691:63-691:75)
      kind: assert(move _168, "index out of bounds: the length is {} but the index is {}", move _167, _166) -> [success: bb134, unwind: bb138]
  }
  preds [bb131]
  succs [bb134, bb138]

bb133
  0: StorageDead(_163)
    SourceInfo(regex-lite/src/hir/mod.rs:691:39-691:40)
  1: StorageDead(_162)
    SourceInfo(regex-lite/src/hir/mod.rs:691:39-691:40)
  2: _160 = const false
    SourceInfo(regex-lite/src/hir/mod.rs:691:21-691:76)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:691:21-691:76)
      kind: goto -> bb136
  }
  preds [bb131]
  succs [bb136]

bb134
  0: _165 = (*_2)[_166]
    SourceInfo(regex-lite/src/hir/mod.rs:691:63-691:75)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:691:44-691:76)
      kind: _160 = utf8::is_word_byte(move _165) -> [return: bb135, unwind: bb138]
  }
  preds [bb132]
  succs [bb135, bb138]

bb135
  0: StorageDead(_166)
    SourceInfo(regex-lite/src/hir/mod.rs:691:75-691:76)
  1: StorageDead(_165)
    SourceInfo(regex-lite/src/hir/mod.rs:691:75-691:76)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:691:21-691:76)
      kind: goto -> bb136
  }
  preds [bb134]
  succs [bb136]

bb136
  0: StorageDead(_161)
    SourceInfo(regex-lite/src/hir/mod.rs:691:75-691:76)
  1: FakeRead(ForLet(None), _160)
    SourceInfo(regex-lite/src/hir/mod.rs:690:21-690:31)
  2: StorageLive(_169)
    SourceInfo(regex-lite/src/hir/mod.rs:692:18-692:28)
  3: _169 = _160
    SourceInfo(regex-lite/src/hir/mod.rs:692:18-692:28)
  4: _0 = Not(move _169)
    SourceInfo(regex-lite/src/hir/mod.rs:692:17-692:28)
  5: StorageDead(_169)
    SourceInfo(regex-lite/src/hir/mod.rs:692:27-692:28)
  6: StorageDead(_160)
    SourceInfo(regex-lite/src/hir/mod.rs:693:13-693:14)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:693:13-693:14)
      kind: goto -> bb137
  }
  preds [bb133, bb135]
  succs [bb137]

bb137
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:695:6-695:6)
      kind: return
  }
  preds [bb14, bb16, bb22, bb28, bb47, bb65, bb78, bb91, bb107, bb123, bb130, bb136]
  succs []

bb138
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:636:5-695:6)
      kind: resume
  }
  preds [bb13, bb15, bb19, bb20, bb23, bb26, bb31, bb32, bb36, bb37, bb39, bb43, bb48, bb51, bb55, bb60, bb61, bb67, bb69, bb70, bb72, bb74, bb76, bb80, bb82, bb83, bb85, bb87, bb89, bb93, bb95, bb96, bb98, bb100, bb102, bb109, bb111, bb112, bb114, bb116, bb118, bb125, bb127, bb128, bb132, bb134]
  succs []

