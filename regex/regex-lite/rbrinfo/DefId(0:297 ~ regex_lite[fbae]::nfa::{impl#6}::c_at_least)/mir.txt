bb0
  0: StorageLive(_5)
    SourceInfo(regex-lite/src/nfa.rs:449:12-449:18)
  1: StorageLive(_6)
    SourceInfo(regex-lite/src/nfa.rs:449:12-449:13)
  2: _6 = _4
    SourceInfo(regex-lite/src/nfa.rs:449:12-449:13)
  3: _5 = Eq(move _6, const 0_u32)
    SourceInfo(regex-lite/src/nfa.rs:449:12-449:18)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:449:12-449:18)
      kind: switchInt(move _5) -> [0: bb102, otherwise: bb1]
  }
  preds []
  succs [bb1, bb102]

bb1
  0: StorageDead(_6)
    SourceInfo(regex-lite/src/nfa.rs:449:17-449:18)
  1: StorageLive(_7)
    SourceInfo(regex-lite/src/nfa.rs:454:13-463:14)
  2: StorageLive(_8)
    SourceInfo(regex-lite/src/nfa.rs:454:17-454:37)
  3: StorageLive(_9)
    SourceInfo(regex-lite/src/nfa.rs:454:17-454:20)
  4: _9 = &(*_2)
    SourceInfo(regex-lite/src/nfa.rs:454:17-454:20)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:454:17-454:37)
      kind: _8 = hir::Hir::is_match_empty(move _9) -> [return: bb2, unwind: bb201]
  }
  preds [bb0]
  succs [bb2, bb201]

bb2
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:454:17-454:37)
      kind: switchInt(move _8) -> [0: bb4, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: StorageDead(_9)
    SourceInfo(regex-lite/src/nfa.rs:454:36-454:37)
  1: _7 = const ()
    SourceInfo(regex-lite/src/nfa.rs:463:14-463:14)
  2: StorageDead(_8)
    SourceInfo(regex-lite/src/nfa.rs:463:13-463:14)
  3: StorageDead(_7)
    SourceInfo(regex-lite/src/nfa.rs:463:13-463:14)
  4: StorageLive(_59)
    SourceInfo(regex-lite/src/nfa.rs:473:17-473:25)
  5: StorageLive(_60)
    SourceInfo(regex-lite/src/nfa.rs:473:28-473:40)
  6: StorageLive(_61)
    SourceInfo(regex-lite/src/nfa.rs:473:28-473:39)
  7: StorageLive(_62)
    SourceInfo(regex-lite/src/nfa.rs:473:28-473:32)
  8: _62 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:473:28-473:32)
  9: StorageLive(_63)
    SourceInfo(regex-lite/src/nfa.rs:473:35-473:38)
  10: _63 = &(*_2)
    SourceInfo(regex-lite/src/nfa.rs:473:35-473:38)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:473:28-473:39)
      kind: _61 = nfa::Compiler::c(move _62, move _63) -> [return: bb35, unwind: bb201]
  }
  preds [bb2]
  succs [bb35, bb201]

bb4
  0: StorageDead(_9)
    SourceInfo(regex-lite/src/nfa.rs:454:36-454:37)
  1: StorageLive(_11)
    SourceInfo(regex-lite/src/nfa.rs:455:21-455:27)
  2: StorageLive(_12)
    SourceInfo(regex-lite/src/nfa.rs:455:30-458:20)
  3: StorageLive(_13)
    SourceInfo(regex-lite/src/nfa.rs:455:30-458:19)
  4: StorageLive(_14)
    SourceInfo(regex-lite/src/nfa.rs:455:30-455:34)
  5: _14 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:455:30-455:34)
  6: StorageLive(_15)
    SourceInfo(regex-lite/src/nfa.rs:455:39-458:18)
  7: StorageLive(_16)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9-44:32)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9-44:32)
      kind: _16 = alloc::vec::Vec::<u32>::new() -> [return: bb5, unwind: bb201]
  }
  preds [bb2]
  succs [bb5, bb201]

bb5
  0: StorageLive(_17)
    SourceInfo(regex-lite/src/nfa.rs:457:30-457:37)
  1: StorageLive(_18)
    SourceInfo(regex-lite/src/nfa.rs:457:31-457:37)
  2: _18 = _3
    SourceInfo(regex-lite/src/nfa.rs:457:31-457:37)
  3: _17 = Not(move _18)
    SourceInfo(regex-lite/src/nfa.rs:457:30-457:37)
  4: StorageDead(_18)
    SourceInfo(regex-lite/src/nfa.rs:457:36-457:37)
  5: _15 = nfa::State::Splits { targets: move _16, reverse: move _17 }
    SourceInfo(regex-lite/src/nfa.rs:455:39-458:18)
  6: StorageDead(_17)
    SourceInfo(regex-lite/src/nfa.rs:458:17-458:18)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:458:17-458:18)
      kind: drop(_16) -> [return: bb6, unwind: bb200]
  }
  preds [bb4]
  succs [bb6, bb200]

bb6
  0: StorageDead(_16)
    SourceInfo(regex-lite/src/nfa.rs:458:17-458:18)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:455:30-458:19)
      kind: _13 = nfa::Compiler::add(move _14, move _15) -> [return: bb7, unwind: bb200]
  }
  preds [bb5]
  succs [bb7, bb200]

bb7
  0: StorageDead(_15)
    SourceInfo(regex-lite/src/nfa.rs:458:18-458:19)
  1: StorageDead(_14)
    SourceInfo(regex-lite/src/nfa.rs:458:18-458:19)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:455:30-458:20)
      kind: _12 = <core::result::Result<u32, error::Error> as core::ops::Try>::branch(move _13) -> [return: bb8, unwind: bb201]
  }
  preds [bb6]
  succs [bb8, bb201]

bb8
  0: StorageDead(_13)
    SourceInfo(regex-lite/src/nfa.rs:458:19-458:20)
  1: PlaceMention(_12)
    SourceInfo(regex-lite/src/nfa.rs:455:30-458:20)
  2: _19 = discriminant(_12)
    SourceInfo(regex-lite/src/nfa.rs:455:30-458:20)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:455:30-458:20)
      kind: switchInt(move _19) -> [0: bb11, 1: bb10, otherwise: bb9]
  }
  preds [bb7]
  succs [bb9, bb10, bb11]

bb9
  0: FakeRead(ForMatchedPlace(None), _12)
    SourceInfo(regex-lite/src/nfa.rs:455:30-458:20)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:455:30-458:20)
      kind: unreachable
  }
  preds [bb8]
  succs []

bb10
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:458:19-458:20)
      kind: falseEdge -> [real: bb12, imaginary: bb11]
  }
  preds [bb8]
  succs [bb11, bb12]

bb11
  0: StorageLive(_23)
    SourceInfo(regex-lite/src/nfa.rs:455:30-458:20)
  1: _23 = ((_12 as Continue).0: u32)
    SourceInfo(regex-lite/src/nfa.rs:455:30-458:20)
  2: _11 = _23
    SourceInfo(regex-lite/src/nfa.rs:455:30-458:20)
  3: StorageDead(_23)
    SourceInfo(regex-lite/src/nfa.rs:458:19-458:20)
  4: FakeRead(ForLet(None), _11)
    SourceInfo(regex-lite/src/nfa.rs:455:21-455:27)
  5: StorageDead(_12)
    SourceInfo(regex-lite/src/nfa.rs:458:20-458:21)
  6: StorageLive(_24)
    SourceInfo(regex-lite/src/nfa.rs:459:21-459:29)
  7: StorageLive(_25)
    SourceInfo(regex-lite/src/nfa.rs:459:32-459:44)
  8: StorageLive(_26)
    SourceInfo(regex-lite/src/nfa.rs:459:32-459:43)
  9: StorageLive(_27)
    SourceInfo(regex-lite/src/nfa.rs:459:32-459:36)
  10: _27 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:459:32-459:36)
  11: StorageLive(_28)
    SourceInfo(regex-lite/src/nfa.rs:459:39-459:42)
  12: _28 = &(*_2)
    SourceInfo(regex-lite/src/nfa.rs:459:39-459:42)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:459:32-459:43)
      kind: _26 = nfa::Compiler::c(move _27, move _28) -> [return: bb14, unwind: bb201]
  }
  preds [bb8, bb10]
  succs [bb14, bb201]

bb12
  0: StorageLive(_20)
    SourceInfo(regex-lite/src/nfa.rs:458:19-458:20)
  1: _20 = move ((_12 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:458:19-458:20)
  2: StorageLive(_22)
    SourceInfo(regex-lite/src/nfa.rs:458:19-458:20)
  3: _22 = move _20
    SourceInfo(regex-lite/src/nfa.rs:458:19-458:20)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:455:30-458:20)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _22) -> [return: bb13, unwind: bb201]
  }
  preds [bb10]
  succs [bb13, bb201]

bb13
  0: StorageDead(_22)
    SourceInfo(regex-lite/src/nfa.rs:458:19-458:20)
  1: StorageDead(_20)
    SourceInfo(regex-lite/src/nfa.rs:458:19-458:20)
  2: StorageDead(_12)
    SourceInfo(regex-lite/src/nfa.rs:458:20-458:21)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb193
  }
  preds [bb12]
  succs [bb193]

bb14
  0: StorageDead(_28)
    SourceInfo(regex-lite/src/nfa.rs:459:42-459:43)
  1: StorageDead(_27)
    SourceInfo(regex-lite/src/nfa.rs:459:42-459:43)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:459:32-459:44)
      kind: _25 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::Try>::branch(move _26) -> [return: bb15, unwind: bb201]
  }
  preds [bb11]
  succs [bb15, bb201]

bb15
  0: StorageDead(_26)
    SourceInfo(regex-lite/src/nfa.rs:459:43-459:44)
  1: PlaceMention(_25)
    SourceInfo(regex-lite/src/nfa.rs:459:32-459:44)
  2: _29 = discriminant(_25)
    SourceInfo(regex-lite/src/nfa.rs:459:32-459:44)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:459:32-459:44)
      kind: switchInt(move _29) -> [0: bb18, 1: bb17, otherwise: bb16]
  }
  preds [bb14]
  succs [bb16, bb17, bb18]

bb16
  0: FakeRead(ForMatchedPlace(None), _25)
    SourceInfo(regex-lite/src/nfa.rs:459:32-459:44)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:459:32-459:44)
      kind: unreachable
  }
  preds [bb15]
  succs []

bb17
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:459:43-459:44)
      kind: falseEdge -> [real: bb19, imaginary: bb18]
  }
  preds [bb15]
  succs [bb18, bb19]

bb18
  0: StorageLive(_33)
    SourceInfo(regex-lite/src/nfa.rs:459:32-459:44)
  1: _33 = ((_25 as Continue).0: nfa::ThompsonRef)
    SourceInfo(regex-lite/src/nfa.rs:459:32-459:44)
  2: _24 = _33
    SourceInfo(regex-lite/src/nfa.rs:459:32-459:44)
  3: StorageDead(_33)
    SourceInfo(regex-lite/src/nfa.rs:459:43-459:44)
  4: FakeRead(ForLet(None), _24)
    SourceInfo(regex-lite/src/nfa.rs:459:21-459:29)
  5: StorageDead(_25)
    SourceInfo(regex-lite/src/nfa.rs:459:44-459:45)
  6: StorageLive(_34)
    SourceInfo(regex-lite/src/nfa.rs:460:17-460:52)
  7: StorageLive(_35)
    SourceInfo(regex-lite/src/nfa.rs:460:17-460:52)
  8: StorageLive(_36)
    SourceInfo(regex-lite/src/nfa.rs:460:17-460:51)
  9: StorageLive(_37)
    SourceInfo(regex-lite/src/nfa.rs:460:17-460:21)
  10: _37 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:460:17-460:21)
  11: StorageLive(_38)
    SourceInfo(regex-lite/src/nfa.rs:460:28-460:34)
  12: _38 = _11
    SourceInfo(regex-lite/src/nfa.rs:460:28-460:34)
  13: StorageLive(_39)
    SourceInfo(regex-lite/src/nfa.rs:460:36-460:50)
  14: _39 = (_24.0: u32)
    SourceInfo(regex-lite/src/nfa.rs:460:36-460:50)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:460:17-460:51)
      kind: _36 = nfa::Compiler::patch(move _37, move _38, move _39) -> [return: bb21, unwind: bb201]
  }
  preds [bb15, bb17]
  succs [bb21, bb201]

bb19
  0: StorageLive(_30)
    SourceInfo(regex-lite/src/nfa.rs:459:43-459:44)
  1: _30 = move ((_25 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:459:43-459:44)
  2: StorageLive(_32)
    SourceInfo(regex-lite/src/nfa.rs:459:43-459:44)
  3: _32 = move _30
    SourceInfo(regex-lite/src/nfa.rs:459:43-459:44)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:459:32-459:44)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _32) -> [return: bb20, unwind: bb201]
  }
  preds [bb17]
  succs [bb20, bb201]

bb20
  0: StorageDead(_32)
    SourceInfo(regex-lite/src/nfa.rs:459:43-459:44)
  1: StorageDead(_30)
    SourceInfo(regex-lite/src/nfa.rs:459:43-459:44)
  2: StorageDead(_25)
    SourceInfo(regex-lite/src/nfa.rs:459:44-459:45)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb192
  }
  preds [bb19]
  succs [bb192]

bb21
  0: StorageDead(_39)
    SourceInfo(regex-lite/src/nfa.rs:460:50-460:51)
  1: StorageDead(_38)
    SourceInfo(regex-lite/src/nfa.rs:460:50-460:51)
  2: StorageDead(_37)
    SourceInfo(regex-lite/src/nfa.rs:460:50-460:51)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:460:17-460:52)
      kind: _35 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _36) -> [return: bb22, unwind: bb201]
  }
  preds [bb18]
  succs [bb22, bb201]

bb22
  0: StorageDead(_36)
    SourceInfo(regex-lite/src/nfa.rs:460:51-460:52)
  1: PlaceMention(_35)
    SourceInfo(regex-lite/src/nfa.rs:460:17-460:52)
  2: _40 = discriminant(_35)
    SourceInfo(regex-lite/src/nfa.rs:460:17-460:52)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:460:17-460:52)
      kind: switchInt(move _40) -> [0: bb25, 1: bb24, otherwise: bb23]
  }
  preds [bb21]
  succs [bb23, bb24, bb25]

bb23
  0: FakeRead(ForMatchedPlace(None), _35)
    SourceInfo(regex-lite/src/nfa.rs:460:17-460:52)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:460:17-460:52)
      kind: unreachable
  }
  preds [bb22]
  succs []

bb24
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:460:51-460:52)
      kind: falseEdge -> [real: bb26, imaginary: bb25]
  }
  preds [bb22]
  succs [bb25, bb26]

bb25
  0: StorageLive(_44)
    SourceInfo(regex-lite/src/nfa.rs:460:17-460:52)
  1: _44 = ((_35 as Continue).0: ())
    SourceInfo(regex-lite/src/nfa.rs:460:17-460:52)
  2: _34 = _44
    SourceInfo(regex-lite/src/nfa.rs:460:17-460:52)
  3: StorageDead(_44)
    SourceInfo(regex-lite/src/nfa.rs:460:51-460:52)
  4: StorageDead(_35)
    SourceInfo(regex-lite/src/nfa.rs:460:52-460:53)
  5: StorageDead(_34)
    SourceInfo(regex-lite/src/nfa.rs:460:52-460:53)
  6: StorageLive(_45)
    SourceInfo(regex-lite/src/nfa.rs:461:17-461:50)
  7: StorageLive(_46)
    SourceInfo(regex-lite/src/nfa.rs:461:17-461:50)
  8: StorageLive(_47)
    SourceInfo(regex-lite/src/nfa.rs:461:17-461:49)
  9: StorageLive(_48)
    SourceInfo(regex-lite/src/nfa.rs:461:17-461:21)
  10: _48 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:461:17-461:21)
  11: StorageLive(_49)
    SourceInfo(regex-lite/src/nfa.rs:461:28-461:40)
  12: _49 = (_24.1: u32)
    SourceInfo(regex-lite/src/nfa.rs:461:28-461:40)
  13: StorageLive(_50)
    SourceInfo(regex-lite/src/nfa.rs:461:42-461:48)
  14: _50 = _11
    SourceInfo(regex-lite/src/nfa.rs:461:42-461:48)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:461:17-461:49)
      kind: _47 = nfa::Compiler::patch(move _48, move _49, move _50) -> [return: bb28, unwind: bb201]
  }
  preds [bb22, bb24]
  succs [bb28, bb201]

bb26
  0: StorageLive(_41)
    SourceInfo(regex-lite/src/nfa.rs:460:51-460:52)
  1: _41 = move ((_35 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:460:51-460:52)
  2: StorageLive(_43)
    SourceInfo(regex-lite/src/nfa.rs:460:51-460:52)
  3: _43 = move _41
    SourceInfo(regex-lite/src/nfa.rs:460:51-460:52)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:460:17-460:52)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _43) -> [return: bb27, unwind: bb201]
  }
  preds [bb24]
  succs [bb27, bb201]

bb27
  0: StorageDead(_43)
    SourceInfo(regex-lite/src/nfa.rs:460:51-460:52)
  1: StorageDead(_41)
    SourceInfo(regex-lite/src/nfa.rs:460:51-460:52)
  2: StorageDead(_35)
    SourceInfo(regex-lite/src/nfa.rs:460:52-460:53)
  3: StorageDead(_34)
    SourceInfo(regex-lite/src/nfa.rs:460:52-460:53)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb192
  }
  preds [bb26]
  succs [bb192]

bb28
  0: StorageDead(_50)
    SourceInfo(regex-lite/src/nfa.rs:461:48-461:49)
  1: StorageDead(_49)
    SourceInfo(regex-lite/src/nfa.rs:461:48-461:49)
  2: StorageDead(_48)
    SourceInfo(regex-lite/src/nfa.rs:461:48-461:49)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:461:17-461:50)
      kind: _46 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _47) -> [return: bb29, unwind: bb201]
  }
  preds [bb25]
  succs [bb29, bb201]

bb29
  0: StorageDead(_47)
    SourceInfo(regex-lite/src/nfa.rs:461:49-461:50)
  1: PlaceMention(_46)
    SourceInfo(regex-lite/src/nfa.rs:461:17-461:50)
  2: _51 = discriminant(_46)
    SourceInfo(regex-lite/src/nfa.rs:461:17-461:50)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:461:17-461:50)
      kind: switchInt(move _51) -> [0: bb32, 1: bb31, otherwise: bb30]
  }
  preds [bb28]
  succs [bb30, bb31, bb32]

bb30
  0: FakeRead(ForMatchedPlace(None), _46)
    SourceInfo(regex-lite/src/nfa.rs:461:17-461:50)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:461:17-461:50)
      kind: unreachable
  }
  preds [bb29]
  succs []

bb31
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:461:49-461:50)
      kind: falseEdge -> [real: bb33, imaginary: bb32]
  }
  preds [bb29]
  succs [bb32, bb33]

bb32
  0: StorageLive(_55)
    SourceInfo(regex-lite/src/nfa.rs:461:17-461:50)
  1: _55 = ((_46 as Continue).0: ())
    SourceInfo(regex-lite/src/nfa.rs:461:17-461:50)
  2: _45 = _55
    SourceInfo(regex-lite/src/nfa.rs:461:17-461:50)
  3: StorageDead(_55)
    SourceInfo(regex-lite/src/nfa.rs:461:49-461:50)
  4: StorageDead(_46)
    SourceInfo(regex-lite/src/nfa.rs:461:50-461:51)
  5: StorageDead(_45)
    SourceInfo(regex-lite/src/nfa.rs:461:50-461:51)
  6: StorageLive(_56)
    SourceInfo(regex-lite/src/nfa.rs:462:27-462:69)
  7: StorageLive(_57)
    SourceInfo(regex-lite/src/nfa.rs:462:48-462:54)
  8: _57 = _11
    SourceInfo(regex-lite/src/nfa.rs:462:48-462:54)
  9: StorageLive(_58)
    SourceInfo(regex-lite/src/nfa.rs:462:61-462:67)
  10: _58 = _11
    SourceInfo(regex-lite/src/nfa.rs:462:61-462:67)
  11: _56 = nfa::ThompsonRef { start: move _57, end: move _58 }
    SourceInfo(regex-lite/src/nfa.rs:462:27-462:69)
  12: StorageDead(_58)
    SourceInfo(regex-lite/src/nfa.rs:462:68-462:69)
  13: StorageDead(_57)
    SourceInfo(regex-lite/src/nfa.rs:462:68-462:69)
  14: _0 = core::result::Result::<nfa::ThompsonRef, error::Error>::Ok(move _56)
    SourceInfo(regex-lite/src/nfa.rs:462:24-462:70)
  15: StorageDead(_56)
    SourceInfo(regex-lite/src/nfa.rs:462:69-462:70)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:462:17-462:70)
      kind: goto -> bb192
  }
  preds [bb29, bb31]
  succs [bb192]

bb33
  0: StorageLive(_52)
    SourceInfo(regex-lite/src/nfa.rs:461:49-461:50)
  1: _52 = move ((_46 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:461:49-461:50)
  2: StorageLive(_54)
    SourceInfo(regex-lite/src/nfa.rs:461:49-461:50)
  3: _54 = move _52
    SourceInfo(regex-lite/src/nfa.rs:461:49-461:50)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:461:17-461:50)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _54) -> [return: bb34, unwind: bb201]
  }
  preds [bb31]
  succs [bb34, bb201]

bb34
  0: StorageDead(_54)
    SourceInfo(regex-lite/src/nfa.rs:461:49-461:50)
  1: StorageDead(_52)
    SourceInfo(regex-lite/src/nfa.rs:461:49-461:50)
  2: StorageDead(_46)
    SourceInfo(regex-lite/src/nfa.rs:461:50-461:51)
  3: StorageDead(_45)
    SourceInfo(regex-lite/src/nfa.rs:461:50-461:51)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb192
  }
  preds [bb33]
  succs [bb192]

bb35
  0: StorageDead(_63)
    SourceInfo(regex-lite/src/nfa.rs:473:38-473:39)
  1: StorageDead(_62)
    SourceInfo(regex-lite/src/nfa.rs:473:38-473:39)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:473:28-473:40)
      kind: _60 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::Try>::branch(move _61) -> [return: bb36, unwind: bb201]
  }
  preds [bb3]
  succs [bb36, bb201]

bb36
  0: StorageDead(_61)
    SourceInfo(regex-lite/src/nfa.rs:473:39-473:40)
  1: PlaceMention(_60)
    SourceInfo(regex-lite/src/nfa.rs:473:28-473:40)
  2: _64 = discriminant(_60)
    SourceInfo(regex-lite/src/nfa.rs:473:28-473:40)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:473:28-473:40)
      kind: switchInt(move _64) -> [0: bb39, 1: bb38, otherwise: bb37]
  }
  preds [bb35]
  succs [bb37, bb38, bb39]

bb37
  0: FakeRead(ForMatchedPlace(None), _60)
    SourceInfo(regex-lite/src/nfa.rs:473:28-473:40)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:473:28-473:40)
      kind: unreachable
  }
  preds [bb36]
  succs []

bb38
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:473:39-473:40)
      kind: falseEdge -> [real: bb40, imaginary: bb39]
  }
  preds [bb36]
  succs [bb39, bb40]

bb39
  0: StorageLive(_68)
    SourceInfo(regex-lite/src/nfa.rs:473:28-473:40)
  1: _68 = ((_60 as Continue).0: nfa::ThompsonRef)
    SourceInfo(regex-lite/src/nfa.rs:473:28-473:40)
  2: _59 = _68
    SourceInfo(regex-lite/src/nfa.rs:473:28-473:40)
  3: StorageDead(_68)
    SourceInfo(regex-lite/src/nfa.rs:473:39-473:40)
  4: FakeRead(ForLet(None), _59)
    SourceInfo(regex-lite/src/nfa.rs:473:17-473:25)
  5: StorageDead(_60)
    SourceInfo(regex-lite/src/nfa.rs:473:40-473:41)
  6: StorageLive(_69)
    SourceInfo(regex-lite/src/nfa.rs:474:17-474:21)
  7: StorageLive(_70)
    SourceInfo(regex-lite/src/nfa.rs:475:17-475:79)
  8: StorageLive(_71)
    SourceInfo(regex-lite/src/nfa.rs:475:17-475:78)
  9: StorageLive(_72)
    SourceInfo(regex-lite/src/nfa.rs:475:17-475:21)
  10: _72 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:475:17-475:21)
  11: StorageLive(_73)
    SourceInfo(regex-lite/src/nfa.rs:475:26-475:77)
  12: StorageLive(_74)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9-44:32)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9-44:32)
      kind: _74 = alloc::vec::Vec::<u32>::new() -> [return: bb42, unwind: bb201]
  }
  preds [bb36, bb38]
  succs [bb42, bb201]

bb40
  0: StorageLive(_65)
    SourceInfo(regex-lite/src/nfa.rs:473:39-473:40)
  1: _65 = move ((_60 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:473:39-473:40)
  2: StorageLive(_67)
    SourceInfo(regex-lite/src/nfa.rs:473:39-473:40)
  3: _67 = move _65
    SourceInfo(regex-lite/src/nfa.rs:473:39-473:40)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:473:28-473:40)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _67) -> [return: bb41, unwind: bb201]
  }
  preds [bb38]
  succs [bb41, bb201]

bb41
  0: StorageDead(_67)
    SourceInfo(regex-lite/src/nfa.rs:473:39-473:40)
  1: StorageDead(_65)
    SourceInfo(regex-lite/src/nfa.rs:473:39-473:40)
  2: StorageDead(_60)
    SourceInfo(regex-lite/src/nfa.rs:473:40-473:41)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb191
  }
  preds [bb40]
  succs [bb191]

bb42
  0: StorageLive(_75)
    SourceInfo(regex-lite/src/nfa.rs:475:68-475:75)
  1: StorageLive(_76)
    SourceInfo(regex-lite/src/nfa.rs:475:69-475:75)
  2: _76 = _3
    SourceInfo(regex-lite/src/nfa.rs:475:69-475:75)
  3: _75 = Not(move _76)
    SourceInfo(regex-lite/src/nfa.rs:475:68-475:75)
  4: StorageDead(_76)
    SourceInfo(regex-lite/src/nfa.rs:475:74-475:75)
  5: _73 = nfa::State::Splits { targets: move _74, reverse: move _75 }
    SourceInfo(regex-lite/src/nfa.rs:475:26-475:77)
  6: StorageDead(_75)
    SourceInfo(regex-lite/src/nfa.rs:475:76-475:77)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:475:76-475:77)
      kind: drop(_74) -> [return: bb43, unwind: bb199]
  }
  preds [bb39]
  succs [bb43, bb199]

bb43
  0: StorageDead(_74)
    SourceInfo(regex-lite/src/nfa.rs:475:76-475:77)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:475:17-475:78)
      kind: _71 = nfa::Compiler::add(move _72, move _73) -> [return: bb44, unwind: bb199]
  }
  preds [bb42]
  succs [bb44, bb199]

bb44
  0: StorageDead(_73)
    SourceInfo(regex-lite/src/nfa.rs:475:77-475:78)
  1: StorageDead(_72)
    SourceInfo(regex-lite/src/nfa.rs:475:77-475:78)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:475:17-475:79)
      kind: _70 = <core::result::Result<u32, error::Error> as core::ops::Try>::branch(move _71) -> [return: bb45, unwind: bb201]
  }
  preds [bb43]
  succs [bb45, bb201]

bb45
  0: StorageDead(_71)
    SourceInfo(regex-lite/src/nfa.rs:475:78-475:79)
  1: PlaceMention(_70)
    SourceInfo(regex-lite/src/nfa.rs:475:17-475:79)
  2: _77 = discriminant(_70)
    SourceInfo(regex-lite/src/nfa.rs:475:17-475:79)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:475:17-475:79)
      kind: switchInt(move _77) -> [0: bb48, 1: bb47, otherwise: bb46]
  }
  preds [bb44]
  succs [bb46, bb47, bb48]

bb46
  0: FakeRead(ForMatchedPlace(None), _70)
    SourceInfo(regex-lite/src/nfa.rs:475:17-475:79)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:475:17-475:79)
      kind: unreachable
  }
  preds [bb45]
  succs []

bb47
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:475:78-475:79)
      kind: falseEdge -> [real: bb49, imaginary: bb48]
  }
  preds [bb45]
  succs [bb48, bb49]

bb48
  0: StorageLive(_81)
    SourceInfo(regex-lite/src/nfa.rs:475:17-475:79)
  1: _81 = ((_70 as Continue).0: u32)
    SourceInfo(regex-lite/src/nfa.rs:475:17-475:79)
  2: _69 = _81
    SourceInfo(regex-lite/src/nfa.rs:475:17-475:79)
  3: StorageDead(_81)
    SourceInfo(regex-lite/src/nfa.rs:475:78-475:79)
  4: FakeRead(ForLet(None), _69)
    SourceInfo(regex-lite/src/nfa.rs:474:17-474:21)
  5: StorageDead(_70)
    SourceInfo(regex-lite/src/nfa.rs:475:79-475:80)
  6: StorageLive(_82)
    SourceInfo(regex-lite/src/nfa.rs:476:13-476:44)
  7: StorageLive(_83)
    SourceInfo(regex-lite/src/nfa.rs:476:13-476:44)
  8: StorageLive(_84)
    SourceInfo(regex-lite/src/nfa.rs:476:13-476:43)
  9: StorageLive(_85)
    SourceInfo(regex-lite/src/nfa.rs:476:13-476:17)
  10: _85 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:476:13-476:17)
  11: StorageLive(_86)
    SourceInfo(regex-lite/src/nfa.rs:476:24-476:36)
  12: _86 = (_59.1: u32)
    SourceInfo(regex-lite/src/nfa.rs:476:24-476:36)
  13: StorageLive(_87)
    SourceInfo(regex-lite/src/nfa.rs:476:38-476:42)
  14: _87 = _69
    SourceInfo(regex-lite/src/nfa.rs:476:38-476:42)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:476:13-476:43)
      kind: _84 = nfa::Compiler::patch(move _85, move _86, move _87) -> [return: bb51, unwind: bb201]
  }
  preds [bb45, bb47]
  succs [bb51, bb201]

bb49
  0: StorageLive(_78)
    SourceInfo(regex-lite/src/nfa.rs:475:78-475:79)
  1: _78 = move ((_70 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:475:78-475:79)
  2: StorageLive(_80)
    SourceInfo(regex-lite/src/nfa.rs:475:78-475:79)
  3: _80 = move _78
    SourceInfo(regex-lite/src/nfa.rs:475:78-475:79)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:475:17-475:79)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _80) -> [return: bb50, unwind: bb201]
  }
  preds [bb47]
  succs [bb50, bb201]

bb50
  0: StorageDead(_80)
    SourceInfo(regex-lite/src/nfa.rs:475:78-475:79)
  1: StorageDead(_78)
    SourceInfo(regex-lite/src/nfa.rs:475:78-475:79)
  2: StorageDead(_70)
    SourceInfo(regex-lite/src/nfa.rs:475:79-475:80)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb190
  }
  preds [bb49]
  succs [bb190]

bb51
  0: StorageDead(_87)
    SourceInfo(regex-lite/src/nfa.rs:476:42-476:43)
  1: StorageDead(_86)
    SourceInfo(regex-lite/src/nfa.rs:476:42-476:43)
  2: StorageDead(_85)
    SourceInfo(regex-lite/src/nfa.rs:476:42-476:43)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:476:13-476:44)
      kind: _83 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _84) -> [return: bb52, unwind: bb201]
  }
  preds [bb48]
  succs [bb52, bb201]

bb52
  0: StorageDead(_84)
    SourceInfo(regex-lite/src/nfa.rs:476:43-476:44)
  1: PlaceMention(_83)
    SourceInfo(regex-lite/src/nfa.rs:476:13-476:44)
  2: _88 = discriminant(_83)
    SourceInfo(regex-lite/src/nfa.rs:476:13-476:44)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:476:13-476:44)
      kind: switchInt(move _88) -> [0: bb55, 1: bb54, otherwise: bb53]
  }
  preds [bb51]
  succs [bb53, bb54, bb55]

bb53
  0: FakeRead(ForMatchedPlace(None), _83)
    SourceInfo(regex-lite/src/nfa.rs:476:13-476:44)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:476:13-476:44)
      kind: unreachable
  }
  preds [bb52]
  succs []

bb54
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:476:43-476:44)
      kind: falseEdge -> [real: bb56, imaginary: bb55]
  }
  preds [bb52]
  succs [bb55, bb56]

bb55
  0: StorageLive(_92)
    SourceInfo(regex-lite/src/nfa.rs:476:13-476:44)
  1: _92 = ((_83 as Continue).0: ())
    SourceInfo(regex-lite/src/nfa.rs:476:13-476:44)
  2: _82 = _92
    SourceInfo(regex-lite/src/nfa.rs:476:13-476:44)
  3: StorageDead(_92)
    SourceInfo(regex-lite/src/nfa.rs:476:43-476:44)
  4: StorageDead(_83)
    SourceInfo(regex-lite/src/nfa.rs:476:44-476:45)
  5: StorageDead(_82)
    SourceInfo(regex-lite/src/nfa.rs:476:44-476:45)
  6: StorageLive(_93)
    SourceInfo(regex-lite/src/nfa.rs:477:13-477:46)
  7: StorageLive(_94)
    SourceInfo(regex-lite/src/nfa.rs:477:13-477:46)
  8: StorageLive(_95)
    SourceInfo(regex-lite/src/nfa.rs:477:13-477:45)
  9: StorageLive(_96)
    SourceInfo(regex-lite/src/nfa.rs:477:13-477:17)
  10: _96 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:477:13-477:17)
  11: StorageLive(_97)
    SourceInfo(regex-lite/src/nfa.rs:477:24-477:28)
  12: _97 = _69
    SourceInfo(regex-lite/src/nfa.rs:477:24-477:28)
  13: StorageLive(_98)
    SourceInfo(regex-lite/src/nfa.rs:477:30-477:44)
  14: _98 = (_59.0: u32)
    SourceInfo(regex-lite/src/nfa.rs:477:30-477:44)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:477:13-477:45)
      kind: _95 = nfa::Compiler::patch(move _96, move _97, move _98) -> [return: bb58, unwind: bb201]
  }
  preds [bb52, bb54]
  succs [bb58, bb201]

bb56
  0: StorageLive(_89)
    SourceInfo(regex-lite/src/nfa.rs:476:43-476:44)
  1: _89 = move ((_83 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:476:43-476:44)
  2: StorageLive(_91)
    SourceInfo(regex-lite/src/nfa.rs:476:43-476:44)
  3: _91 = move _89
    SourceInfo(regex-lite/src/nfa.rs:476:43-476:44)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:476:13-476:44)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _91) -> [return: bb57, unwind: bb201]
  }
  preds [bb54]
  succs [bb57, bb201]

bb57
  0: StorageDead(_91)
    SourceInfo(regex-lite/src/nfa.rs:476:43-476:44)
  1: StorageDead(_89)
    SourceInfo(regex-lite/src/nfa.rs:476:43-476:44)
  2: StorageDead(_83)
    SourceInfo(regex-lite/src/nfa.rs:476:44-476:45)
  3: StorageDead(_82)
    SourceInfo(regex-lite/src/nfa.rs:476:44-476:45)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb190
  }
  preds [bb56]
  succs [bb190]

bb58
  0: StorageDead(_98)
    SourceInfo(regex-lite/src/nfa.rs:477:44-477:45)
  1: StorageDead(_97)
    SourceInfo(regex-lite/src/nfa.rs:477:44-477:45)
  2: StorageDead(_96)
    SourceInfo(regex-lite/src/nfa.rs:477:44-477:45)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:477:13-477:46)
      kind: _94 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _95) -> [return: bb59, unwind: bb201]
  }
  preds [bb55]
  succs [bb59, bb201]

bb59
  0: StorageDead(_95)
    SourceInfo(regex-lite/src/nfa.rs:477:45-477:46)
  1: PlaceMention(_94)
    SourceInfo(regex-lite/src/nfa.rs:477:13-477:46)
  2: _99 = discriminant(_94)
    SourceInfo(regex-lite/src/nfa.rs:477:13-477:46)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:477:13-477:46)
      kind: switchInt(move _99) -> [0: bb62, 1: bb61, otherwise: bb60]
  }
  preds [bb58]
  succs [bb60, bb61, bb62]

bb60
  0: FakeRead(ForMatchedPlace(None), _94)
    SourceInfo(regex-lite/src/nfa.rs:477:13-477:46)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:477:13-477:46)
      kind: unreachable
  }
  preds [bb59]
  succs []

bb61
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:477:45-477:46)
      kind: falseEdge -> [real: bb63, imaginary: bb62]
  }
  preds [bb59]
  succs [bb62, bb63]

bb62
  0: StorageLive(_103)
    SourceInfo(regex-lite/src/nfa.rs:477:13-477:46)
  1: _103 = ((_94 as Continue).0: ())
    SourceInfo(regex-lite/src/nfa.rs:477:13-477:46)
  2: _93 = _103
    SourceInfo(regex-lite/src/nfa.rs:477:13-477:46)
  3: StorageDead(_103)
    SourceInfo(regex-lite/src/nfa.rs:477:45-477:46)
  4: StorageDead(_94)
    SourceInfo(regex-lite/src/nfa.rs:477:46-477:47)
  5: StorageDead(_93)
    SourceInfo(regex-lite/src/nfa.rs:477:46-477:47)
  6: StorageLive(_104)
    SourceInfo(regex-lite/src/nfa.rs:479:17-479:25)
  7: StorageLive(_105)
    SourceInfo(regex-lite/src/nfa.rs:480:17-480:79)
  8: StorageLive(_106)
    SourceInfo(regex-lite/src/nfa.rs:480:17-480:78)
  9: StorageLive(_107)
    SourceInfo(regex-lite/src/nfa.rs:480:17-480:21)
  10: _107 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:480:17-480:21)
  11: StorageLive(_108)
    SourceInfo(regex-lite/src/nfa.rs:480:26-480:77)
  12: StorageLive(_109)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9-44:32)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9-44:32)
      kind: _109 = alloc::vec::Vec::<u32>::new() -> [return: bb65, unwind: bb201]
  }
  preds [bb59, bb61]
  succs [bb65, bb201]

bb63
  0: StorageLive(_100)
    SourceInfo(regex-lite/src/nfa.rs:477:45-477:46)
  1: _100 = move ((_94 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:477:45-477:46)
  2: StorageLive(_102)
    SourceInfo(regex-lite/src/nfa.rs:477:45-477:46)
  3: _102 = move _100
    SourceInfo(regex-lite/src/nfa.rs:477:45-477:46)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:477:13-477:46)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _102) -> [return: bb64, unwind: bb201]
  }
  preds [bb61]
  succs [bb64, bb201]

bb64
  0: StorageDead(_102)
    SourceInfo(regex-lite/src/nfa.rs:477:45-477:46)
  1: StorageDead(_100)
    SourceInfo(regex-lite/src/nfa.rs:477:45-477:46)
  2: StorageDead(_94)
    SourceInfo(regex-lite/src/nfa.rs:477:46-477:47)
  3: StorageDead(_93)
    SourceInfo(regex-lite/src/nfa.rs:477:46-477:47)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb190
  }
  preds [bb63]
  succs [bb190]

bb65
  0: StorageLive(_110)
    SourceInfo(regex-lite/src/nfa.rs:480:68-480:75)
  1: StorageLive(_111)
    SourceInfo(regex-lite/src/nfa.rs:480:69-480:75)
  2: _111 = _3
    SourceInfo(regex-lite/src/nfa.rs:480:69-480:75)
  3: _110 = Not(move _111)
    SourceInfo(regex-lite/src/nfa.rs:480:68-480:75)
  4: StorageDead(_111)
    SourceInfo(regex-lite/src/nfa.rs:480:74-480:75)
  5: _108 = nfa::State::Splits { targets: move _109, reverse: move _110 }
    SourceInfo(regex-lite/src/nfa.rs:480:26-480:77)
  6: StorageDead(_110)
    SourceInfo(regex-lite/src/nfa.rs:480:76-480:77)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:480:76-480:77)
      kind: drop(_109) -> [return: bb66, unwind: bb198]
  }
  preds [bb62]
  succs [bb66, bb198]

bb66
  0: StorageDead(_109)
    SourceInfo(regex-lite/src/nfa.rs:480:76-480:77)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:480:17-480:78)
      kind: _106 = nfa::Compiler::add(move _107, move _108) -> [return: bb67, unwind: bb198]
  }
  preds [bb65]
  succs [bb67, bb198]

bb67
  0: StorageDead(_108)
    SourceInfo(regex-lite/src/nfa.rs:480:77-480:78)
  1: StorageDead(_107)
    SourceInfo(regex-lite/src/nfa.rs:480:77-480:78)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:480:17-480:79)
      kind: _105 = <core::result::Result<u32, error::Error> as core::ops::Try>::branch(move _106) -> [return: bb68, unwind: bb201]
  }
  preds [bb66]
  succs [bb68, bb201]

bb68
  0: StorageDead(_106)
    SourceInfo(regex-lite/src/nfa.rs:480:78-480:79)
  1: PlaceMention(_105)
    SourceInfo(regex-lite/src/nfa.rs:480:17-480:79)
  2: _112 = discriminant(_105)
    SourceInfo(regex-lite/src/nfa.rs:480:17-480:79)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:480:17-480:79)
      kind: switchInt(move _112) -> [0: bb71, 1: bb70, otherwise: bb69]
  }
  preds [bb67]
  succs [bb69, bb70, bb71]

bb69
  0: FakeRead(ForMatchedPlace(None), _105)
    SourceInfo(regex-lite/src/nfa.rs:480:17-480:79)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:480:17-480:79)
      kind: unreachable
  }
  preds [bb68]
  succs []

bb70
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:480:78-480:79)
      kind: falseEdge -> [real: bb72, imaginary: bb71]
  }
  preds [bb68]
  succs [bb71, bb72]

bb71
  0: StorageLive(_116)
    SourceInfo(regex-lite/src/nfa.rs:480:17-480:79)
  1: _116 = ((_105 as Continue).0: u32)
    SourceInfo(regex-lite/src/nfa.rs:480:17-480:79)
  2: _104 = _116
    SourceInfo(regex-lite/src/nfa.rs:480:17-480:79)
  3: StorageDead(_116)
    SourceInfo(regex-lite/src/nfa.rs:480:78-480:79)
  4: FakeRead(ForLet(None), _104)
    SourceInfo(regex-lite/src/nfa.rs:479:17-479:25)
  5: StorageDead(_105)
    SourceInfo(regex-lite/src/nfa.rs:480:79-480:80)
  6: StorageLive(_117)
    SourceInfo(regex-lite/src/nfa.rs:481:17-481:22)
  7: StorageLive(_118)
    SourceInfo(regex-lite/src/nfa.rs:481:25-481:42)
  8: StorageLive(_119)
    SourceInfo(regex-lite/src/nfa.rs:481:25-481:41)
  9: StorageLive(_120)
    SourceInfo(regex-lite/src/nfa.rs:481:25-481:29)
  10: _120 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:481:25-481:29)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:481:25-481:41)
      kind: _119 = nfa::Compiler::add_empty(move _120) -> [return: bb74, unwind: bb201]
  }
  preds [bb68, bb70]
  succs [bb74, bb201]

bb72
  0: StorageLive(_113)
    SourceInfo(regex-lite/src/nfa.rs:480:78-480:79)
  1: _113 = move ((_105 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:480:78-480:79)
  2: StorageLive(_115)
    SourceInfo(regex-lite/src/nfa.rs:480:78-480:79)
  3: _115 = move _113
    SourceInfo(regex-lite/src/nfa.rs:480:78-480:79)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:480:17-480:79)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _115) -> [return: bb73, unwind: bb201]
  }
  preds [bb70]
  succs [bb73, bb201]

bb73
  0: StorageDead(_115)
    SourceInfo(regex-lite/src/nfa.rs:480:78-480:79)
  1: StorageDead(_113)
    SourceInfo(regex-lite/src/nfa.rs:480:78-480:79)
  2: StorageDead(_105)
    SourceInfo(regex-lite/src/nfa.rs:480:79-480:80)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb189
  }
  preds [bb72]
  succs [bb189]

bb74
  0: StorageDead(_120)
    SourceInfo(regex-lite/src/nfa.rs:481:40-481:41)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:481:25-481:42)
      kind: _118 = <core::result::Result<u32, error::Error> as core::ops::Try>::branch(move _119) -> [return: bb75, unwind: bb201]
  }
  preds [bb71]
  succs [bb75, bb201]

bb75
  0: StorageDead(_119)
    SourceInfo(regex-lite/src/nfa.rs:481:41-481:42)
  1: PlaceMention(_118)
    SourceInfo(regex-lite/src/nfa.rs:481:25-481:42)
  2: _121 = discriminant(_118)
    SourceInfo(regex-lite/src/nfa.rs:481:25-481:42)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:481:25-481:42)
      kind: switchInt(move _121) -> [0: bb78, 1: bb77, otherwise: bb76]
  }
  preds [bb74]
  succs [bb76, bb77, bb78]

bb76
  0: FakeRead(ForMatchedPlace(None), _118)
    SourceInfo(regex-lite/src/nfa.rs:481:25-481:42)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:481:25-481:42)
      kind: unreachable
  }
  preds [bb75]
  succs []

bb77
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:481:41-481:42)
      kind: falseEdge -> [real: bb79, imaginary: bb78]
  }
  preds [bb75]
  succs [bb78, bb79]

bb78
  0: StorageLive(_125)
    SourceInfo(regex-lite/src/nfa.rs:481:25-481:42)
  1: _125 = ((_118 as Continue).0: u32)
    SourceInfo(regex-lite/src/nfa.rs:481:25-481:42)
  2: _117 = _125
    SourceInfo(regex-lite/src/nfa.rs:481:25-481:42)
  3: StorageDead(_125)
    SourceInfo(regex-lite/src/nfa.rs:481:41-481:42)
  4: FakeRead(ForLet(None), _117)
    SourceInfo(regex-lite/src/nfa.rs:481:17-481:22)
  5: StorageDead(_118)
    SourceInfo(regex-lite/src/nfa.rs:481:42-481:43)
  6: StorageLive(_126)
    SourceInfo(regex-lite/src/nfa.rs:482:13-482:50)
  7: StorageLive(_127)
    SourceInfo(regex-lite/src/nfa.rs:482:13-482:50)
  8: StorageLive(_128)
    SourceInfo(regex-lite/src/nfa.rs:482:13-482:49)
  9: StorageLive(_129)
    SourceInfo(regex-lite/src/nfa.rs:482:13-482:17)
  10: _129 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:482:13-482:17)
  11: StorageLive(_130)
    SourceInfo(regex-lite/src/nfa.rs:482:24-482:32)
  12: _130 = _104
    SourceInfo(regex-lite/src/nfa.rs:482:24-482:32)
  13: StorageLive(_131)
    SourceInfo(regex-lite/src/nfa.rs:482:34-482:48)
  14: _131 = (_59.0: u32)
    SourceInfo(regex-lite/src/nfa.rs:482:34-482:48)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:482:13-482:49)
      kind: _128 = nfa::Compiler::patch(move _129, move _130, move _131) -> [return: bb81, unwind: bb201]
  }
  preds [bb75, bb77]
  succs [bb81, bb201]

bb79
  0: StorageLive(_122)
    SourceInfo(regex-lite/src/nfa.rs:481:41-481:42)
  1: _122 = move ((_118 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:481:41-481:42)
  2: StorageLive(_124)
    SourceInfo(regex-lite/src/nfa.rs:481:41-481:42)
  3: _124 = move _122
    SourceInfo(regex-lite/src/nfa.rs:481:41-481:42)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:481:25-481:42)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _124) -> [return: bb80, unwind: bb201]
  }
  preds [bb77]
  succs [bb80, bb201]

bb80
  0: StorageDead(_124)
    SourceInfo(regex-lite/src/nfa.rs:481:41-481:42)
  1: StorageDead(_122)
    SourceInfo(regex-lite/src/nfa.rs:481:41-481:42)
  2: StorageDead(_118)
    SourceInfo(regex-lite/src/nfa.rs:481:42-481:43)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb188
  }
  preds [bb79]
  succs [bb188]

bb81
  0: StorageDead(_131)
    SourceInfo(regex-lite/src/nfa.rs:482:48-482:49)
  1: StorageDead(_130)
    SourceInfo(regex-lite/src/nfa.rs:482:48-482:49)
  2: StorageDead(_129)
    SourceInfo(regex-lite/src/nfa.rs:482:48-482:49)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:482:13-482:50)
      kind: _127 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _128) -> [return: bb82, unwind: bb201]
  }
  preds [bb78]
  succs [bb82, bb201]

bb82
  0: StorageDead(_128)
    SourceInfo(regex-lite/src/nfa.rs:482:49-482:50)
  1: PlaceMention(_127)
    SourceInfo(regex-lite/src/nfa.rs:482:13-482:50)
  2: _132 = discriminant(_127)
    SourceInfo(regex-lite/src/nfa.rs:482:13-482:50)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:482:13-482:50)
      kind: switchInt(move _132) -> [0: bb85, 1: bb84, otherwise: bb83]
  }
  preds [bb81]
  succs [bb83, bb84, bb85]

bb83
  0: FakeRead(ForMatchedPlace(None), _127)
    SourceInfo(regex-lite/src/nfa.rs:482:13-482:50)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:482:13-482:50)
      kind: unreachable
  }
  preds [bb82]
  succs []

bb84
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:482:49-482:50)
      kind: falseEdge -> [real: bb86, imaginary: bb85]
  }
  preds [bb82]
  succs [bb85, bb86]

bb85
  0: StorageLive(_136)
    SourceInfo(regex-lite/src/nfa.rs:482:13-482:50)
  1: _136 = ((_127 as Continue).0: ())
    SourceInfo(regex-lite/src/nfa.rs:482:13-482:50)
  2: _126 = _136
    SourceInfo(regex-lite/src/nfa.rs:482:13-482:50)
  3: StorageDead(_136)
    SourceInfo(regex-lite/src/nfa.rs:482:49-482:50)
  4: StorageDead(_127)
    SourceInfo(regex-lite/src/nfa.rs:482:50-482:51)
  5: StorageDead(_126)
    SourceInfo(regex-lite/src/nfa.rs:482:50-482:51)
  6: StorageLive(_137)
    SourceInfo(regex-lite/src/nfa.rs:483:13-483:41)
  7: StorageLive(_138)
    SourceInfo(regex-lite/src/nfa.rs:483:13-483:41)
  8: StorageLive(_139)
    SourceInfo(regex-lite/src/nfa.rs:483:13-483:40)
  9: StorageLive(_140)
    SourceInfo(regex-lite/src/nfa.rs:483:13-483:17)
  10: _140 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:483:13-483:17)
  11: StorageLive(_141)
    SourceInfo(regex-lite/src/nfa.rs:483:24-483:32)
  12: _141 = _104
    SourceInfo(regex-lite/src/nfa.rs:483:24-483:32)
  13: StorageLive(_142)
    SourceInfo(regex-lite/src/nfa.rs:483:34-483:39)
  14: _142 = _117
    SourceInfo(regex-lite/src/nfa.rs:483:34-483:39)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:483:13-483:40)
      kind: _139 = nfa::Compiler::patch(move _140, move _141, move _142) -> [return: bb88, unwind: bb201]
  }
  preds [bb82, bb84]
  succs [bb88, bb201]

bb86
  0: StorageLive(_133)
    SourceInfo(regex-lite/src/nfa.rs:482:49-482:50)
  1: _133 = move ((_127 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:482:49-482:50)
  2: StorageLive(_135)
    SourceInfo(regex-lite/src/nfa.rs:482:49-482:50)
  3: _135 = move _133
    SourceInfo(regex-lite/src/nfa.rs:482:49-482:50)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:482:13-482:50)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _135) -> [return: bb87, unwind: bb201]
  }
  preds [bb84]
  succs [bb87, bb201]

bb87
  0: StorageDead(_135)
    SourceInfo(regex-lite/src/nfa.rs:482:49-482:50)
  1: StorageDead(_133)
    SourceInfo(regex-lite/src/nfa.rs:482:49-482:50)
  2: StorageDead(_127)
    SourceInfo(regex-lite/src/nfa.rs:482:50-482:51)
  3: StorageDead(_126)
    SourceInfo(regex-lite/src/nfa.rs:482:50-482:51)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb188
  }
  preds [bb86]
  succs [bb188]

bb88
  0: StorageDead(_142)
    SourceInfo(regex-lite/src/nfa.rs:483:39-483:40)
  1: StorageDead(_141)
    SourceInfo(regex-lite/src/nfa.rs:483:39-483:40)
  2: StorageDead(_140)
    SourceInfo(regex-lite/src/nfa.rs:483:39-483:40)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:483:13-483:41)
      kind: _138 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _139) -> [return: bb89, unwind: bb201]
  }
  preds [bb85]
  succs [bb89, bb201]

bb89
  0: StorageDead(_139)
    SourceInfo(regex-lite/src/nfa.rs:483:40-483:41)
  1: PlaceMention(_138)
    SourceInfo(regex-lite/src/nfa.rs:483:13-483:41)
  2: _143 = discriminant(_138)
    SourceInfo(regex-lite/src/nfa.rs:483:13-483:41)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:483:13-483:41)
      kind: switchInt(move _143) -> [0: bb92, 1: bb91, otherwise: bb90]
  }
  preds [bb88]
  succs [bb90, bb91, bb92]

bb90
  0: FakeRead(ForMatchedPlace(None), _138)
    SourceInfo(regex-lite/src/nfa.rs:483:13-483:41)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:483:13-483:41)
      kind: unreachable
  }
  preds [bb89]
  succs []

bb91
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:483:40-483:41)
      kind: falseEdge -> [real: bb93, imaginary: bb92]
  }
  preds [bb89]
  succs [bb92, bb93]

bb92
  0: StorageLive(_147)
    SourceInfo(regex-lite/src/nfa.rs:483:13-483:41)
  1: _147 = ((_138 as Continue).0: ())
    SourceInfo(regex-lite/src/nfa.rs:483:13-483:41)
  2: _137 = _147
    SourceInfo(regex-lite/src/nfa.rs:483:13-483:41)
  3: StorageDead(_147)
    SourceInfo(regex-lite/src/nfa.rs:483:40-483:41)
  4: StorageDead(_138)
    SourceInfo(regex-lite/src/nfa.rs:483:41-483:42)
  5: StorageDead(_137)
    SourceInfo(regex-lite/src/nfa.rs:483:41-483:42)
  6: StorageLive(_148)
    SourceInfo(regex-lite/src/nfa.rs:484:13-484:37)
  7: StorageLive(_149)
    SourceInfo(regex-lite/src/nfa.rs:484:13-484:37)
  8: StorageLive(_150)
    SourceInfo(regex-lite/src/nfa.rs:484:13-484:36)
  9: StorageLive(_151)
    SourceInfo(regex-lite/src/nfa.rs:484:13-484:17)
  10: _151 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:484:13-484:17)
  11: StorageLive(_152)
    SourceInfo(regex-lite/src/nfa.rs:484:24-484:28)
  12: _152 = _69
    SourceInfo(regex-lite/src/nfa.rs:484:24-484:28)
  13: StorageLive(_153)
    SourceInfo(regex-lite/src/nfa.rs:484:30-484:35)
  14: _153 = _117
    SourceInfo(regex-lite/src/nfa.rs:484:30-484:35)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:484:13-484:36)
      kind: _150 = nfa::Compiler::patch(move _151, move _152, move _153) -> [return: bb95, unwind: bb201]
  }
  preds [bb89, bb91]
  succs [bb95, bb201]

bb93
  0: StorageLive(_144)
    SourceInfo(regex-lite/src/nfa.rs:483:40-483:41)
  1: _144 = move ((_138 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:483:40-483:41)
  2: StorageLive(_146)
    SourceInfo(regex-lite/src/nfa.rs:483:40-483:41)
  3: _146 = move _144
    SourceInfo(regex-lite/src/nfa.rs:483:40-483:41)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:483:13-483:41)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _146) -> [return: bb94, unwind: bb201]
  }
  preds [bb91]
  succs [bb94, bb201]

bb94
  0: StorageDead(_146)
    SourceInfo(regex-lite/src/nfa.rs:483:40-483:41)
  1: StorageDead(_144)
    SourceInfo(regex-lite/src/nfa.rs:483:40-483:41)
  2: StorageDead(_138)
    SourceInfo(regex-lite/src/nfa.rs:483:41-483:42)
  3: StorageDead(_137)
    SourceInfo(regex-lite/src/nfa.rs:483:41-483:42)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb188
  }
  preds [bb93]
  succs [bb188]

bb95
  0: StorageDead(_153)
    SourceInfo(regex-lite/src/nfa.rs:484:35-484:36)
  1: StorageDead(_152)
    SourceInfo(regex-lite/src/nfa.rs:484:35-484:36)
  2: StorageDead(_151)
    SourceInfo(regex-lite/src/nfa.rs:484:35-484:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:484:13-484:37)
      kind: _149 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _150) -> [return: bb96, unwind: bb201]
  }
  preds [bb92]
  succs [bb96, bb201]

bb96
  0: StorageDead(_150)
    SourceInfo(regex-lite/src/nfa.rs:484:36-484:37)
  1: PlaceMention(_149)
    SourceInfo(regex-lite/src/nfa.rs:484:13-484:37)
  2: _154 = discriminant(_149)
    SourceInfo(regex-lite/src/nfa.rs:484:13-484:37)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:484:13-484:37)
      kind: switchInt(move _154) -> [0: bb99, 1: bb98, otherwise: bb97]
  }
  preds [bb95]
  succs [bb97, bb98, bb99]

bb97
  0: FakeRead(ForMatchedPlace(None), _149)
    SourceInfo(regex-lite/src/nfa.rs:484:13-484:37)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:484:13-484:37)
      kind: unreachable
  }
  preds [bb96]
  succs []

bb98
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:484:36-484:37)
      kind: falseEdge -> [real: bb100, imaginary: bb99]
  }
  preds [bb96]
  succs [bb99, bb100]

bb99
  0: StorageLive(_158)
    SourceInfo(regex-lite/src/nfa.rs:484:13-484:37)
  1: _158 = ((_149 as Continue).0: ())
    SourceInfo(regex-lite/src/nfa.rs:484:13-484:37)
  2: _148 = _158
    SourceInfo(regex-lite/src/nfa.rs:484:13-484:37)
  3: StorageDead(_158)
    SourceInfo(regex-lite/src/nfa.rs:484:36-484:37)
  4: StorageDead(_149)
    SourceInfo(regex-lite/src/nfa.rs:484:37-484:38)
  5: StorageDead(_148)
    SourceInfo(regex-lite/src/nfa.rs:484:37-484:38)
  6: StorageLive(_159)
    SourceInfo(regex-lite/src/nfa.rs:485:16-485:59)
  7: StorageLive(_160)
    SourceInfo(regex-lite/src/nfa.rs:485:37-485:45)
  8: _160 = _104
    SourceInfo(regex-lite/src/nfa.rs:485:37-485:45)
  9: StorageLive(_161)
    SourceInfo(regex-lite/src/nfa.rs:485:52-485:57)
  10: _161 = _117
    SourceInfo(regex-lite/src/nfa.rs:485:52-485:57)
  11: _159 = nfa::ThompsonRef { start: move _160, end: move _161 }
    SourceInfo(regex-lite/src/nfa.rs:485:16-485:59)
  12: StorageDead(_161)
    SourceInfo(regex-lite/src/nfa.rs:485:58-485:59)
  13: StorageDead(_160)
    SourceInfo(regex-lite/src/nfa.rs:485:58-485:59)
  14: _0 = core::result::Result::<nfa::ThompsonRef, error::Error>::Ok(move _159)
    SourceInfo(regex-lite/src/nfa.rs:485:13-485:60)
  15: StorageDead(_159)
    SourceInfo(regex-lite/src/nfa.rs:485:59-485:60)
  16: StorageDead(_117)
    SourceInfo(regex-lite/src/nfa.rs:486:9-486:10)
  17: StorageDead(_104)
    SourceInfo(regex-lite/src/nfa.rs:486:9-486:10)
  18: StorageDead(_69)
    SourceInfo(regex-lite/src/nfa.rs:486:9-486:10)
  19: StorageDead(_59)
    SourceInfo(regex-lite/src/nfa.rs:486:9-486:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:449:9-502:10)
      kind: goto -> bb181
  }
  preds [bb96, bb98]
  succs [bb181]

bb100
  0: StorageLive(_155)
    SourceInfo(regex-lite/src/nfa.rs:484:36-484:37)
  1: _155 = move ((_149 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:484:36-484:37)
  2: StorageLive(_157)
    SourceInfo(regex-lite/src/nfa.rs:484:36-484:37)
  3: _157 = move _155
    SourceInfo(regex-lite/src/nfa.rs:484:36-484:37)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:484:13-484:37)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _157) -> [return: bb101, unwind: bb201]
  }
  preds [bb98]
  succs [bb101, bb201]

bb101
  0: StorageDead(_157)
    SourceInfo(regex-lite/src/nfa.rs:484:36-484:37)
  1: StorageDead(_155)
    SourceInfo(regex-lite/src/nfa.rs:484:36-484:37)
  2: StorageDead(_149)
    SourceInfo(regex-lite/src/nfa.rs:484:37-484:38)
  3: StorageDead(_148)
    SourceInfo(regex-lite/src/nfa.rs:484:37-484:38)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb188
  }
  preds [bb100]
  succs [bb188]

bb102
  0: StorageDead(_6)
    SourceInfo(regex-lite/src/nfa.rs:449:17-449:18)
  1: StorageLive(_162)
    SourceInfo(regex-lite/src/nfa.rs:486:19-486:25)
  2: StorageLive(_163)
    SourceInfo(regex-lite/src/nfa.rs:486:19-486:20)
  3: _163 = _4
    SourceInfo(regex-lite/src/nfa.rs:486:19-486:20)
  4: _162 = Eq(move _163, const 1_u32)
    SourceInfo(regex-lite/src/nfa.rs:486:19-486:25)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:486:19-486:25)
      kind: switchInt(move _162) -> [0: bb134, otherwise: bb103]
  }
  preds [bb0]
  succs [bb103, bb134]

bb103
  0: StorageDead(_163)
    SourceInfo(regex-lite/src/nfa.rs:486:24-486:25)
  1: StorageLive(_164)
    SourceInfo(regex-lite/src/nfa.rs:487:17-487:25)
  2: StorageLive(_165)
    SourceInfo(regex-lite/src/nfa.rs:487:28-487:40)
  3: StorageLive(_166)
    SourceInfo(regex-lite/src/nfa.rs:487:28-487:39)
  4: StorageLive(_167)
    SourceInfo(regex-lite/src/nfa.rs:487:28-487:32)
  5: _167 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:487:28-487:32)
  6: StorageLive(_168)
    SourceInfo(regex-lite/src/nfa.rs:487:35-487:38)
  7: _168 = &(*_2)
    SourceInfo(regex-lite/src/nfa.rs:487:35-487:38)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:487:28-487:39)
      kind: _166 = nfa::Compiler::c(move _167, move _168) -> [return: bb104, unwind: bb201]
  }
  preds [bb102]
  succs [bb104, bb201]

bb104
  0: StorageDead(_168)
    SourceInfo(regex-lite/src/nfa.rs:487:38-487:39)
  1: StorageDead(_167)
    SourceInfo(regex-lite/src/nfa.rs:487:38-487:39)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:487:28-487:40)
      kind: _165 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::Try>::branch(move _166) -> [return: bb105, unwind: bb201]
  }
  preds [bb103]
  succs [bb105, bb201]

bb105
  0: StorageDead(_166)
    SourceInfo(regex-lite/src/nfa.rs:487:39-487:40)
  1: PlaceMention(_165)
    SourceInfo(regex-lite/src/nfa.rs:487:28-487:40)
  2: _169 = discriminant(_165)
    SourceInfo(regex-lite/src/nfa.rs:487:28-487:40)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:487:28-487:40)
      kind: switchInt(move _169) -> [0: bb108, 1: bb107, otherwise: bb106]
  }
  preds [bb104]
  succs [bb106, bb107, bb108]

bb106
  0: FakeRead(ForMatchedPlace(None), _165)
    SourceInfo(regex-lite/src/nfa.rs:487:28-487:40)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:487:28-487:40)
      kind: unreachable
  }
  preds [bb105]
  succs []

bb107
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:487:39-487:40)
      kind: falseEdge -> [real: bb109, imaginary: bb108]
  }
  preds [bb105]
  succs [bb108, bb109]

bb108
  0: StorageLive(_173)
    SourceInfo(regex-lite/src/nfa.rs:487:28-487:40)
  1: _173 = ((_165 as Continue).0: nfa::ThompsonRef)
    SourceInfo(regex-lite/src/nfa.rs:487:28-487:40)
  2: _164 = _173
    SourceInfo(regex-lite/src/nfa.rs:487:28-487:40)
  3: StorageDead(_173)
    SourceInfo(regex-lite/src/nfa.rs:487:39-487:40)
  4: FakeRead(ForLet(None), _164)
    SourceInfo(regex-lite/src/nfa.rs:487:17-487:25)
  5: StorageDead(_165)
    SourceInfo(regex-lite/src/nfa.rs:487:40-487:41)
  6: StorageLive(_174)
    SourceInfo(regex-lite/src/nfa.rs:488:17-488:23)
  7: StorageLive(_175)
    SourceInfo(regex-lite/src/nfa.rs:489:17-489:79)
  8: StorageLive(_176)
    SourceInfo(regex-lite/src/nfa.rs:489:17-489:78)
  9: StorageLive(_177)
    SourceInfo(regex-lite/src/nfa.rs:489:17-489:21)
  10: _177 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:489:17-489:21)
  11: StorageLive(_178)
    SourceInfo(regex-lite/src/nfa.rs:489:26-489:77)
  12: StorageLive(_179)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9-44:32)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9-44:32)
      kind: _179 = alloc::vec::Vec::<u32>::new() -> [return: bb111, unwind: bb201]
  }
  preds [bb105, bb107]
  succs [bb111, bb201]

bb109
  0: StorageLive(_170)
    SourceInfo(regex-lite/src/nfa.rs:487:39-487:40)
  1: _170 = move ((_165 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:487:39-487:40)
  2: StorageLive(_172)
    SourceInfo(regex-lite/src/nfa.rs:487:39-487:40)
  3: _172 = move _170
    SourceInfo(regex-lite/src/nfa.rs:487:39-487:40)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:487:28-487:40)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _172) -> [return: bb110, unwind: bb201]
  }
  preds [bb107]
  succs [bb110, bb201]

bb110
  0: StorageDead(_172)
    SourceInfo(regex-lite/src/nfa.rs:487:39-487:40)
  1: StorageDead(_170)
    SourceInfo(regex-lite/src/nfa.rs:487:39-487:40)
  2: StorageDead(_165)
    SourceInfo(regex-lite/src/nfa.rs:487:40-487:41)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb186
  }
  preds [bb109]
  succs [bb186]

bb111
  0: StorageLive(_180)
    SourceInfo(regex-lite/src/nfa.rs:489:68-489:75)
  1: StorageLive(_181)
    SourceInfo(regex-lite/src/nfa.rs:489:69-489:75)
  2: _181 = _3
    SourceInfo(regex-lite/src/nfa.rs:489:69-489:75)
  3: _180 = Not(move _181)
    SourceInfo(regex-lite/src/nfa.rs:489:68-489:75)
  4: StorageDead(_181)
    SourceInfo(regex-lite/src/nfa.rs:489:74-489:75)
  5: _178 = nfa::State::Splits { targets: move _179, reverse: move _180 }
    SourceInfo(regex-lite/src/nfa.rs:489:26-489:77)
  6: StorageDead(_180)
    SourceInfo(regex-lite/src/nfa.rs:489:76-489:77)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:489:76-489:77)
      kind: drop(_179) -> [return: bb112, unwind: bb197]
  }
  preds [bb108]
  succs [bb112, bb197]

bb112
  0: StorageDead(_179)
    SourceInfo(regex-lite/src/nfa.rs:489:76-489:77)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:489:17-489:78)
      kind: _176 = nfa::Compiler::add(move _177, move _178) -> [return: bb113, unwind: bb197]
  }
  preds [bb111]
  succs [bb113, bb197]

bb113
  0: StorageDead(_178)
    SourceInfo(regex-lite/src/nfa.rs:489:77-489:78)
  1: StorageDead(_177)
    SourceInfo(regex-lite/src/nfa.rs:489:77-489:78)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:489:17-489:79)
      kind: _175 = <core::result::Result<u32, error::Error> as core::ops::Try>::branch(move _176) -> [return: bb114, unwind: bb201]
  }
  preds [bb112]
  succs [bb114, bb201]

bb114
  0: StorageDead(_176)
    SourceInfo(regex-lite/src/nfa.rs:489:78-489:79)
  1: PlaceMention(_175)
    SourceInfo(regex-lite/src/nfa.rs:489:17-489:79)
  2: _182 = discriminant(_175)
    SourceInfo(regex-lite/src/nfa.rs:489:17-489:79)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:489:17-489:79)
      kind: switchInt(move _182) -> [0: bb117, 1: bb116, otherwise: bb115]
  }
  preds [bb113]
  succs [bb115, bb116, bb117]

bb115
  0: FakeRead(ForMatchedPlace(None), _175)
    SourceInfo(regex-lite/src/nfa.rs:489:17-489:79)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:489:17-489:79)
      kind: unreachable
  }
  preds [bb114]
  succs []

bb116
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:489:78-489:79)
      kind: falseEdge -> [real: bb118, imaginary: bb117]
  }
  preds [bb114]
  succs [bb117, bb118]

bb117
  0: StorageLive(_186)
    SourceInfo(regex-lite/src/nfa.rs:489:17-489:79)
  1: _186 = ((_175 as Continue).0: u32)
    SourceInfo(regex-lite/src/nfa.rs:489:17-489:79)
  2: _174 = _186
    SourceInfo(regex-lite/src/nfa.rs:489:17-489:79)
  3: StorageDead(_186)
    SourceInfo(regex-lite/src/nfa.rs:489:78-489:79)
  4: FakeRead(ForLet(None), _174)
    SourceInfo(regex-lite/src/nfa.rs:488:17-488:23)
  5: StorageDead(_175)
    SourceInfo(regex-lite/src/nfa.rs:489:79-489:80)
  6: StorageLive(_187)
    SourceInfo(regex-lite/src/nfa.rs:490:13-490:46)
  7: StorageLive(_188)
    SourceInfo(regex-lite/src/nfa.rs:490:13-490:46)
  8: StorageLive(_189)
    SourceInfo(regex-lite/src/nfa.rs:490:13-490:45)
  9: StorageLive(_190)
    SourceInfo(regex-lite/src/nfa.rs:490:13-490:17)
  10: _190 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:490:13-490:17)
  11: StorageLive(_191)
    SourceInfo(regex-lite/src/nfa.rs:490:24-490:36)
  12: _191 = (_164.1: u32)
    SourceInfo(regex-lite/src/nfa.rs:490:24-490:36)
  13: StorageLive(_192)
    SourceInfo(regex-lite/src/nfa.rs:490:38-490:44)
  14: _192 = _174
    SourceInfo(regex-lite/src/nfa.rs:490:38-490:44)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:490:13-490:45)
      kind: _189 = nfa::Compiler::patch(move _190, move _191, move _192) -> [return: bb120, unwind: bb201]
  }
  preds [bb114, bb116]
  succs [bb120, bb201]

bb118
  0: StorageLive(_183)
    SourceInfo(regex-lite/src/nfa.rs:489:78-489:79)
  1: _183 = move ((_175 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:489:78-489:79)
  2: StorageLive(_185)
    SourceInfo(regex-lite/src/nfa.rs:489:78-489:79)
  3: _185 = move _183
    SourceInfo(regex-lite/src/nfa.rs:489:78-489:79)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:489:17-489:79)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _185) -> [return: bb119, unwind: bb201]
  }
  preds [bb116]
  succs [bb119, bb201]

bb119
  0: StorageDead(_185)
    SourceInfo(regex-lite/src/nfa.rs:489:78-489:79)
  1: StorageDead(_183)
    SourceInfo(regex-lite/src/nfa.rs:489:78-489:79)
  2: StorageDead(_175)
    SourceInfo(regex-lite/src/nfa.rs:489:79-489:80)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb185
  }
  preds [bb118]
  succs [bb185]

bb120
  0: StorageDead(_192)
    SourceInfo(regex-lite/src/nfa.rs:490:44-490:45)
  1: StorageDead(_191)
    SourceInfo(regex-lite/src/nfa.rs:490:44-490:45)
  2: StorageDead(_190)
    SourceInfo(regex-lite/src/nfa.rs:490:44-490:45)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:490:13-490:46)
      kind: _188 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _189) -> [return: bb121, unwind: bb201]
  }
  preds [bb117]
  succs [bb121, bb201]

bb121
  0: StorageDead(_189)
    SourceInfo(regex-lite/src/nfa.rs:490:45-490:46)
  1: PlaceMention(_188)
    SourceInfo(regex-lite/src/nfa.rs:490:13-490:46)
  2: _193 = discriminant(_188)
    SourceInfo(regex-lite/src/nfa.rs:490:13-490:46)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:490:13-490:46)
      kind: switchInt(move _193) -> [0: bb124, 1: bb123, otherwise: bb122]
  }
  preds [bb120]
  succs [bb122, bb123, bb124]

bb122
  0: FakeRead(ForMatchedPlace(None), _188)
    SourceInfo(regex-lite/src/nfa.rs:490:13-490:46)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:490:13-490:46)
      kind: unreachable
  }
  preds [bb121]
  succs []

bb123
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:490:45-490:46)
      kind: falseEdge -> [real: bb125, imaginary: bb124]
  }
  preds [bb121]
  succs [bb124, bb125]

bb124
  0: StorageLive(_197)
    SourceInfo(regex-lite/src/nfa.rs:490:13-490:46)
  1: _197 = ((_188 as Continue).0: ())
    SourceInfo(regex-lite/src/nfa.rs:490:13-490:46)
  2: _187 = _197
    SourceInfo(regex-lite/src/nfa.rs:490:13-490:46)
  3: StorageDead(_197)
    SourceInfo(regex-lite/src/nfa.rs:490:45-490:46)
  4: StorageDead(_188)
    SourceInfo(regex-lite/src/nfa.rs:490:46-490:47)
  5: StorageDead(_187)
    SourceInfo(regex-lite/src/nfa.rs:490:46-490:47)
  6: StorageLive(_198)
    SourceInfo(regex-lite/src/nfa.rs:491:13-491:48)
  7: StorageLive(_199)
    SourceInfo(regex-lite/src/nfa.rs:491:13-491:48)
  8: StorageLive(_200)
    SourceInfo(regex-lite/src/nfa.rs:491:13-491:47)
  9: StorageLive(_201)
    SourceInfo(regex-lite/src/nfa.rs:491:13-491:17)
  10: _201 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:491:13-491:17)
  11: StorageLive(_202)
    SourceInfo(regex-lite/src/nfa.rs:491:24-491:30)
  12: _202 = _174
    SourceInfo(regex-lite/src/nfa.rs:491:24-491:30)
  13: StorageLive(_203)
    SourceInfo(regex-lite/src/nfa.rs:491:32-491:46)
  14: _203 = (_164.0: u32)
    SourceInfo(regex-lite/src/nfa.rs:491:32-491:46)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:491:13-491:47)
      kind: _200 = nfa::Compiler::patch(move _201, move _202, move _203) -> [return: bb127, unwind: bb201]
  }
  preds [bb121, bb123]
  succs [bb127, bb201]

bb125
  0: StorageLive(_194)
    SourceInfo(regex-lite/src/nfa.rs:490:45-490:46)
  1: _194 = move ((_188 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:490:45-490:46)
  2: StorageLive(_196)
    SourceInfo(regex-lite/src/nfa.rs:490:45-490:46)
  3: _196 = move _194
    SourceInfo(regex-lite/src/nfa.rs:490:45-490:46)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:490:13-490:46)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _196) -> [return: bb126, unwind: bb201]
  }
  preds [bb123]
  succs [bb126, bb201]

bb126
  0: StorageDead(_196)
    SourceInfo(regex-lite/src/nfa.rs:490:45-490:46)
  1: StorageDead(_194)
    SourceInfo(regex-lite/src/nfa.rs:490:45-490:46)
  2: StorageDead(_188)
    SourceInfo(regex-lite/src/nfa.rs:490:46-490:47)
  3: StorageDead(_187)
    SourceInfo(regex-lite/src/nfa.rs:490:46-490:47)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb185
  }
  preds [bb125]
  succs [bb185]

bb127
  0: StorageDead(_203)
    SourceInfo(regex-lite/src/nfa.rs:491:46-491:47)
  1: StorageDead(_202)
    SourceInfo(regex-lite/src/nfa.rs:491:46-491:47)
  2: StorageDead(_201)
    SourceInfo(regex-lite/src/nfa.rs:491:46-491:47)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:491:13-491:48)
      kind: _199 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _200) -> [return: bb128, unwind: bb201]
  }
  preds [bb124]
  succs [bb128, bb201]

bb128
  0: StorageDead(_200)
    SourceInfo(regex-lite/src/nfa.rs:491:47-491:48)
  1: PlaceMention(_199)
    SourceInfo(regex-lite/src/nfa.rs:491:13-491:48)
  2: _204 = discriminant(_199)
    SourceInfo(regex-lite/src/nfa.rs:491:13-491:48)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:491:13-491:48)
      kind: switchInt(move _204) -> [0: bb131, 1: bb130, otherwise: bb129]
  }
  preds [bb127]
  succs [bb129, bb130, bb131]

bb129
  0: FakeRead(ForMatchedPlace(None), _199)
    SourceInfo(regex-lite/src/nfa.rs:491:13-491:48)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:491:13-491:48)
      kind: unreachable
  }
  preds [bb128]
  succs []

bb130
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:491:47-491:48)
      kind: falseEdge -> [real: bb132, imaginary: bb131]
  }
  preds [bb128]
  succs [bb131, bb132]

bb131
  0: StorageLive(_208)
    SourceInfo(regex-lite/src/nfa.rs:491:13-491:48)
  1: _208 = ((_199 as Continue).0: ())
    SourceInfo(regex-lite/src/nfa.rs:491:13-491:48)
  2: _198 = _208
    SourceInfo(regex-lite/src/nfa.rs:491:13-491:48)
  3: StorageDead(_208)
    SourceInfo(regex-lite/src/nfa.rs:491:47-491:48)
  4: StorageDead(_199)
    SourceInfo(regex-lite/src/nfa.rs:491:48-491:49)
  5: StorageDead(_198)
    SourceInfo(regex-lite/src/nfa.rs:491:48-491:49)
  6: StorageLive(_209)
    SourceInfo(regex-lite/src/nfa.rs:492:16-492:66)
  7: StorageLive(_210)
    SourceInfo(regex-lite/src/nfa.rs:492:37-492:51)
  8: _210 = (_164.0: u32)
    SourceInfo(regex-lite/src/nfa.rs:492:37-492:51)
  9: StorageLive(_211)
    SourceInfo(regex-lite/src/nfa.rs:492:58-492:64)
  10: _211 = _174
    SourceInfo(regex-lite/src/nfa.rs:492:58-492:64)
  11: _209 = nfa::ThompsonRef { start: move _210, end: move _211 }
    SourceInfo(regex-lite/src/nfa.rs:492:16-492:66)
  12: StorageDead(_211)
    SourceInfo(regex-lite/src/nfa.rs:492:65-492:66)
  13: StorageDead(_210)
    SourceInfo(regex-lite/src/nfa.rs:492:65-492:66)
  14: _0 = core::result::Result::<nfa::ThompsonRef, error::Error>::Ok(move _209)
    SourceInfo(regex-lite/src/nfa.rs:492:13-492:67)
  15: StorageDead(_209)
    SourceInfo(regex-lite/src/nfa.rs:492:66-492:67)
  16: StorageDead(_174)
    SourceInfo(regex-lite/src/nfa.rs:493:9-493:10)
  17: StorageDead(_164)
    SourceInfo(regex-lite/src/nfa.rs:493:9-493:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:486:16-502:10)
      kind: goto -> bb180
  }
  preds [bb128, bb130]
  succs [bb180]

bb132
  0: StorageLive(_205)
    SourceInfo(regex-lite/src/nfa.rs:491:47-491:48)
  1: _205 = move ((_199 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:491:47-491:48)
  2: StorageLive(_207)
    SourceInfo(regex-lite/src/nfa.rs:491:47-491:48)
  3: _207 = move _205
    SourceInfo(regex-lite/src/nfa.rs:491:47-491:48)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:491:13-491:48)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _207) -> [return: bb133, unwind: bb201]
  }
  preds [bb130]
  succs [bb133, bb201]

bb133
  0: StorageDead(_207)
    SourceInfo(regex-lite/src/nfa.rs:491:47-491:48)
  1: StorageDead(_205)
    SourceInfo(regex-lite/src/nfa.rs:491:47-491:48)
  2: StorageDead(_199)
    SourceInfo(regex-lite/src/nfa.rs:491:48-491:49)
  3: StorageDead(_198)
    SourceInfo(regex-lite/src/nfa.rs:491:48-491:49)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb185
  }
  preds [bb132]
  succs [bb185]

bb134
  0: StorageDead(_163)
    SourceInfo(regex-lite/src/nfa.rs:486:24-486:25)
  1: StorageLive(_212)
    SourceInfo(regex-lite/src/nfa.rs:494:17-494:23)
  2: StorageLive(_213)
    SourceInfo(regex-lite/src/nfa.rs:494:26-494:53)
  3: StorageLive(_214)
    SourceInfo(regex-lite/src/nfa.rs:494:26-494:52)
  4: StorageLive(_215)
    SourceInfo(regex-lite/src/nfa.rs:494:26-494:30)
  5: _215 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:494:26-494:30)
  6: StorageLive(_216)
    SourceInfo(regex-lite/src/nfa.rs:494:41-494:44)
  7: _216 = &(*_2)
    SourceInfo(regex-lite/src/nfa.rs:494:41-494:44)
  8: StorageLive(_217)
    SourceInfo(regex-lite/src/nfa.rs:494:46-494:51)
  9: StorageLive(_218)
    SourceInfo(regex-lite/src/nfa.rs:494:46-494:47)
  10: _218 = _4
    SourceInfo(regex-lite/src/nfa.rs:494:46-494:47)
  11: _219 = SubWithOverflow(_218, const 1_u32)
    SourceInfo(regex-lite/src/nfa.rs:494:46-494:51)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:494:46-494:51)
      kind: assert(!move (_219.1: bool), "attempt to compute `{} - {}`, which would overflow", move _218, const 1_u32) -> [success: bb135, unwind: bb201]
  }
  preds [bb102]
  succs [bb135, bb201]

bb135
  0: _217 = move (_219.0: u32)
    SourceInfo(regex-lite/src/nfa.rs:494:46-494:51)
  1: StorageDead(_218)
    SourceInfo(regex-lite/src/nfa.rs:494:50-494:51)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:494:26-494:52)
      kind: _214 = nfa::Compiler::c_exactly(move _215, move _216, move _217) -> [return: bb136, unwind: bb201]
  }
  preds [bb134]
  succs [bb136, bb201]

bb136
  0: StorageDead(_217)
    SourceInfo(regex-lite/src/nfa.rs:494:51-494:52)
  1: StorageDead(_216)
    SourceInfo(regex-lite/src/nfa.rs:494:51-494:52)
  2: StorageDead(_215)
    SourceInfo(regex-lite/src/nfa.rs:494:51-494:52)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:494:26-494:53)
      kind: _213 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::Try>::branch(move _214) -> [return: bb137, unwind: bb201]
  }
  preds [bb135]
  succs [bb137, bb201]

bb137
  0: StorageDead(_214)
    SourceInfo(regex-lite/src/nfa.rs:494:52-494:53)
  1: PlaceMention(_213)
    SourceInfo(regex-lite/src/nfa.rs:494:26-494:53)
  2: _220 = discriminant(_213)
    SourceInfo(regex-lite/src/nfa.rs:494:26-494:53)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:494:26-494:53)
      kind: switchInt(move _220) -> [0: bb140, 1: bb139, otherwise: bb138]
  }
  preds [bb136]
  succs [bb138, bb139, bb140]

bb138
  0: FakeRead(ForMatchedPlace(None), _213)
    SourceInfo(regex-lite/src/nfa.rs:494:26-494:53)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:494:26-494:53)
      kind: unreachable
  }
  preds [bb137]
  succs []

bb139
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:494:52-494:53)
      kind: falseEdge -> [real: bb141, imaginary: bb140]
  }
  preds [bb137]
  succs [bb140, bb141]

bb140
  0: StorageLive(_224)
    SourceInfo(regex-lite/src/nfa.rs:494:26-494:53)
  1: _224 = ((_213 as Continue).0: nfa::ThompsonRef)
    SourceInfo(regex-lite/src/nfa.rs:494:26-494:53)
  2: _212 = _224
    SourceInfo(regex-lite/src/nfa.rs:494:26-494:53)
  3: StorageDead(_224)
    SourceInfo(regex-lite/src/nfa.rs:494:52-494:53)
  4: FakeRead(ForLet(None), _212)
    SourceInfo(regex-lite/src/nfa.rs:494:17-494:23)
  5: StorageDead(_213)
    SourceInfo(regex-lite/src/nfa.rs:494:53-494:54)
  6: StorageLive(_225)
    SourceInfo(regex-lite/src/nfa.rs:495:17-495:21)
  7: StorageLive(_226)
    SourceInfo(regex-lite/src/nfa.rs:495:24-495:36)
  8: StorageLive(_227)
    SourceInfo(regex-lite/src/nfa.rs:495:24-495:35)
  9: StorageLive(_228)
    SourceInfo(regex-lite/src/nfa.rs:495:24-495:28)
  10: _228 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:495:24-495:28)
  11: StorageLive(_229)
    SourceInfo(regex-lite/src/nfa.rs:495:31-495:34)
  12: _229 = &(*_2)
    SourceInfo(regex-lite/src/nfa.rs:495:31-495:34)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:495:24-495:35)
      kind: _227 = nfa::Compiler::c(move _228, move _229) -> [return: bb143, unwind: bb201]
  }
  preds [bb137, bb139]
  succs [bb143, bb201]

bb141
  0: StorageLive(_221)
    SourceInfo(regex-lite/src/nfa.rs:494:52-494:53)
  1: _221 = move ((_213 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:494:52-494:53)
  2: StorageLive(_223)
    SourceInfo(regex-lite/src/nfa.rs:494:52-494:53)
  3: _223 = move _221
    SourceInfo(regex-lite/src/nfa.rs:494:52-494:53)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:494:26-494:53)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _223) -> [return: bb142, unwind: bb201]
  }
  preds [bb139]
  succs [bb142, bb201]

bb142
  0: StorageDead(_223)
    SourceInfo(regex-lite/src/nfa.rs:494:52-494:53)
  1: StorageDead(_221)
    SourceInfo(regex-lite/src/nfa.rs:494:52-494:53)
  2: StorageDead(_213)
    SourceInfo(regex-lite/src/nfa.rs:494:53-494:54)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb184
  }
  preds [bb141]
  succs [bb184]

bb143
  0: StorageDead(_229)
    SourceInfo(regex-lite/src/nfa.rs:495:34-495:35)
  1: StorageDead(_228)
    SourceInfo(regex-lite/src/nfa.rs:495:34-495:35)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:495:24-495:36)
      kind: _226 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::Try>::branch(move _227) -> [return: bb144, unwind: bb201]
  }
  preds [bb140]
  succs [bb144, bb201]

bb144
  0: StorageDead(_227)
    SourceInfo(regex-lite/src/nfa.rs:495:35-495:36)
  1: PlaceMention(_226)
    SourceInfo(regex-lite/src/nfa.rs:495:24-495:36)
  2: _230 = discriminant(_226)
    SourceInfo(regex-lite/src/nfa.rs:495:24-495:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:495:24-495:36)
      kind: switchInt(move _230) -> [0: bb147, 1: bb146, otherwise: bb145]
  }
  preds [bb143]
  succs [bb145, bb146, bb147]

bb145
  0: FakeRead(ForMatchedPlace(None), _226)
    SourceInfo(regex-lite/src/nfa.rs:495:24-495:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:495:24-495:36)
      kind: unreachable
  }
  preds [bb144]
  succs []

bb146
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:495:35-495:36)
      kind: falseEdge -> [real: bb148, imaginary: bb147]
  }
  preds [bb144]
  succs [bb147, bb148]

bb147
  0: StorageLive(_234)
    SourceInfo(regex-lite/src/nfa.rs:495:24-495:36)
  1: _234 = ((_226 as Continue).0: nfa::ThompsonRef)
    SourceInfo(regex-lite/src/nfa.rs:495:24-495:36)
  2: _225 = _234
    SourceInfo(regex-lite/src/nfa.rs:495:24-495:36)
  3: StorageDead(_234)
    SourceInfo(regex-lite/src/nfa.rs:495:35-495:36)
  4: FakeRead(ForLet(None), _225)
    SourceInfo(regex-lite/src/nfa.rs:495:17-495:21)
  5: StorageDead(_226)
    SourceInfo(regex-lite/src/nfa.rs:495:36-495:37)
  6: StorageLive(_235)
    SourceInfo(regex-lite/src/nfa.rs:496:17-496:23)
  7: StorageLive(_236)
    SourceInfo(regex-lite/src/nfa.rs:497:17-497:79)
  8: StorageLive(_237)
    SourceInfo(regex-lite/src/nfa.rs:497:17-497:78)
  9: StorageLive(_238)
    SourceInfo(regex-lite/src/nfa.rs:497:17-497:21)
  10: _238 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:497:17-497:21)
  11: StorageLive(_239)
    SourceInfo(regex-lite/src/nfa.rs:497:26-497:77)
  12: StorageLive(_240)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9-44:32)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9-44:32)
      kind: _240 = alloc::vec::Vec::<u32>::new() -> [return: bb150, unwind: bb201]
  }
  preds [bb144, bb146]
  succs [bb150, bb201]

bb148
  0: StorageLive(_231)
    SourceInfo(regex-lite/src/nfa.rs:495:35-495:36)
  1: _231 = move ((_226 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:495:35-495:36)
  2: StorageLive(_233)
    SourceInfo(regex-lite/src/nfa.rs:495:35-495:36)
  3: _233 = move _231
    SourceInfo(regex-lite/src/nfa.rs:495:35-495:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:495:24-495:36)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _233) -> [return: bb149, unwind: bb201]
  }
  preds [bb146]
  succs [bb149, bb201]

bb149
  0: StorageDead(_233)
    SourceInfo(regex-lite/src/nfa.rs:495:35-495:36)
  1: StorageDead(_231)
    SourceInfo(regex-lite/src/nfa.rs:495:35-495:36)
  2: StorageDead(_226)
    SourceInfo(regex-lite/src/nfa.rs:495:36-495:37)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb183
  }
  preds [bb148]
  succs [bb183]

bb150
  0: StorageLive(_241)
    SourceInfo(regex-lite/src/nfa.rs:497:68-497:75)
  1: StorageLive(_242)
    SourceInfo(regex-lite/src/nfa.rs:497:69-497:75)
  2: _242 = _3
    SourceInfo(regex-lite/src/nfa.rs:497:69-497:75)
  3: _241 = Not(move _242)
    SourceInfo(regex-lite/src/nfa.rs:497:68-497:75)
  4: StorageDead(_242)
    SourceInfo(regex-lite/src/nfa.rs:497:74-497:75)
  5: _239 = nfa::State::Splits { targets: move _240, reverse: move _241 }
    SourceInfo(regex-lite/src/nfa.rs:497:26-497:77)
  6: StorageDead(_241)
    SourceInfo(regex-lite/src/nfa.rs:497:76-497:77)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:497:76-497:77)
      kind: drop(_240) -> [return: bb151, unwind: bb196]
  }
  preds [bb147]
  succs [bb151, bb196]

bb151
  0: StorageDead(_240)
    SourceInfo(regex-lite/src/nfa.rs:497:76-497:77)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:497:17-497:78)
      kind: _237 = nfa::Compiler::add(move _238, move _239) -> [return: bb152, unwind: bb196]
  }
  preds [bb150]
  succs [bb152, bb196]

bb152
  0: StorageDead(_239)
    SourceInfo(regex-lite/src/nfa.rs:497:77-497:78)
  1: StorageDead(_238)
    SourceInfo(regex-lite/src/nfa.rs:497:77-497:78)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:497:17-497:79)
      kind: _236 = <core::result::Result<u32, error::Error> as core::ops::Try>::branch(move _237) -> [return: bb153, unwind: bb201]
  }
  preds [bb151]
  succs [bb153, bb201]

bb153
  0: StorageDead(_237)
    SourceInfo(regex-lite/src/nfa.rs:497:78-497:79)
  1: PlaceMention(_236)
    SourceInfo(regex-lite/src/nfa.rs:497:17-497:79)
  2: _243 = discriminant(_236)
    SourceInfo(regex-lite/src/nfa.rs:497:17-497:79)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:497:17-497:79)
      kind: switchInt(move _243) -> [0: bb156, 1: bb155, otherwise: bb154]
  }
  preds [bb152]
  succs [bb154, bb155, bb156]

bb154
  0: FakeRead(ForMatchedPlace(None), _236)
    SourceInfo(regex-lite/src/nfa.rs:497:17-497:79)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:497:17-497:79)
      kind: unreachable
  }
  preds [bb153]
  succs []

bb155
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:497:78-497:79)
      kind: falseEdge -> [real: bb157, imaginary: bb156]
  }
  preds [bb153]
  succs [bb156, bb157]

bb156
  0: StorageLive(_247)
    SourceInfo(regex-lite/src/nfa.rs:497:17-497:79)
  1: _247 = ((_236 as Continue).0: u32)
    SourceInfo(regex-lite/src/nfa.rs:497:17-497:79)
  2: _235 = _247
    SourceInfo(regex-lite/src/nfa.rs:497:17-497:79)
  3: StorageDead(_247)
    SourceInfo(regex-lite/src/nfa.rs:497:78-497:79)
  4: FakeRead(ForLet(None), _235)
    SourceInfo(regex-lite/src/nfa.rs:496:17-496:23)
  5: StorageDead(_236)
    SourceInfo(regex-lite/src/nfa.rs:497:79-497:80)
  6: StorageLive(_248)
    SourceInfo(regex-lite/src/nfa.rs:498:13-498:48)
  7: StorageLive(_249)
    SourceInfo(regex-lite/src/nfa.rs:498:13-498:48)
  8: StorageLive(_250)
    SourceInfo(regex-lite/src/nfa.rs:498:13-498:47)
  9: StorageLive(_251)
    SourceInfo(regex-lite/src/nfa.rs:498:13-498:17)
  10: _251 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:498:13-498:17)
  11: StorageLive(_252)
    SourceInfo(regex-lite/src/nfa.rs:498:24-498:34)
  12: _252 = (_212.1: u32)
    SourceInfo(regex-lite/src/nfa.rs:498:24-498:34)
  13: StorageLive(_253)
    SourceInfo(regex-lite/src/nfa.rs:498:36-498:46)
  14: _253 = (_225.0: u32)
    SourceInfo(regex-lite/src/nfa.rs:498:36-498:46)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:498:13-498:47)
      kind: _250 = nfa::Compiler::patch(move _251, move _252, move _253) -> [return: bb159, unwind: bb201]
  }
  preds [bb153, bb155]
  succs [bb159, bb201]

bb157
  0: StorageLive(_244)
    SourceInfo(regex-lite/src/nfa.rs:497:78-497:79)
  1: _244 = move ((_236 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:497:78-497:79)
  2: StorageLive(_246)
    SourceInfo(regex-lite/src/nfa.rs:497:78-497:79)
  3: _246 = move _244
    SourceInfo(regex-lite/src/nfa.rs:497:78-497:79)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:497:17-497:79)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _246) -> [return: bb158, unwind: bb201]
  }
  preds [bb155]
  succs [bb158, bb201]

bb158
  0: StorageDead(_246)
    SourceInfo(regex-lite/src/nfa.rs:497:78-497:79)
  1: StorageDead(_244)
    SourceInfo(regex-lite/src/nfa.rs:497:78-497:79)
  2: StorageDead(_236)
    SourceInfo(regex-lite/src/nfa.rs:497:79-497:80)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb182
  }
  preds [bb157]
  succs [bb182]

bb159
  0: StorageDead(_253)
    SourceInfo(regex-lite/src/nfa.rs:498:46-498:47)
  1: StorageDead(_252)
    SourceInfo(regex-lite/src/nfa.rs:498:46-498:47)
  2: StorageDead(_251)
    SourceInfo(regex-lite/src/nfa.rs:498:46-498:47)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:498:13-498:48)
      kind: _249 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _250) -> [return: bb160, unwind: bb201]
  }
  preds [bb156]
  succs [bb160, bb201]

bb160
  0: StorageDead(_250)
    SourceInfo(regex-lite/src/nfa.rs:498:47-498:48)
  1: PlaceMention(_249)
    SourceInfo(regex-lite/src/nfa.rs:498:13-498:48)
  2: _254 = discriminant(_249)
    SourceInfo(regex-lite/src/nfa.rs:498:13-498:48)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:498:13-498:48)
      kind: switchInt(move _254) -> [0: bb163, 1: bb162, otherwise: bb161]
  }
  preds [bb159]
  succs [bb161, bb162, bb163]

bb161
  0: FakeRead(ForMatchedPlace(None), _249)
    SourceInfo(regex-lite/src/nfa.rs:498:13-498:48)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:498:13-498:48)
      kind: unreachable
  }
  preds [bb160]
  succs []

bb162
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:498:47-498:48)
      kind: falseEdge -> [real: bb164, imaginary: bb163]
  }
  preds [bb160]
  succs [bb163, bb164]

bb163
  0: StorageLive(_258)
    SourceInfo(regex-lite/src/nfa.rs:498:13-498:48)
  1: _258 = ((_249 as Continue).0: ())
    SourceInfo(regex-lite/src/nfa.rs:498:13-498:48)
  2: _248 = _258
    SourceInfo(regex-lite/src/nfa.rs:498:13-498:48)
  3: StorageDead(_258)
    SourceInfo(regex-lite/src/nfa.rs:498:47-498:48)
  4: StorageDead(_249)
    SourceInfo(regex-lite/src/nfa.rs:498:48-498:49)
  5: StorageDead(_248)
    SourceInfo(regex-lite/src/nfa.rs:498:48-498:49)
  6: StorageLive(_259)
    SourceInfo(regex-lite/src/nfa.rs:499:13-499:42)
  7: StorageLive(_260)
    SourceInfo(regex-lite/src/nfa.rs:499:13-499:42)
  8: StorageLive(_261)
    SourceInfo(regex-lite/src/nfa.rs:499:13-499:41)
  9: StorageLive(_262)
    SourceInfo(regex-lite/src/nfa.rs:499:13-499:17)
  10: _262 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:499:13-499:17)
  11: StorageLive(_263)
    SourceInfo(regex-lite/src/nfa.rs:499:24-499:32)
  12: _263 = (_225.1: u32)
    SourceInfo(regex-lite/src/nfa.rs:499:24-499:32)
  13: StorageLive(_264)
    SourceInfo(regex-lite/src/nfa.rs:499:34-499:40)
  14: _264 = _235
    SourceInfo(regex-lite/src/nfa.rs:499:34-499:40)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:499:13-499:41)
      kind: _261 = nfa::Compiler::patch(move _262, move _263, move _264) -> [return: bb166, unwind: bb201]
  }
  preds [bb160, bb162]
  succs [bb166, bb201]

bb164
  0: StorageLive(_255)
    SourceInfo(regex-lite/src/nfa.rs:498:47-498:48)
  1: _255 = move ((_249 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:498:47-498:48)
  2: StorageLive(_257)
    SourceInfo(regex-lite/src/nfa.rs:498:47-498:48)
  3: _257 = move _255
    SourceInfo(regex-lite/src/nfa.rs:498:47-498:48)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:498:13-498:48)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _257) -> [return: bb165, unwind: bb201]
  }
  preds [bb162]
  succs [bb165, bb201]

bb165
  0: StorageDead(_257)
    SourceInfo(regex-lite/src/nfa.rs:498:47-498:48)
  1: StorageDead(_255)
    SourceInfo(regex-lite/src/nfa.rs:498:47-498:48)
  2: StorageDead(_249)
    SourceInfo(regex-lite/src/nfa.rs:498:48-498:49)
  3: StorageDead(_248)
    SourceInfo(regex-lite/src/nfa.rs:498:48-498:49)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb182
  }
  preds [bb164]
  succs [bb182]

bb166
  0: StorageDead(_264)
    SourceInfo(regex-lite/src/nfa.rs:499:40-499:41)
  1: StorageDead(_263)
    SourceInfo(regex-lite/src/nfa.rs:499:40-499:41)
  2: StorageDead(_262)
    SourceInfo(regex-lite/src/nfa.rs:499:40-499:41)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:499:13-499:42)
      kind: _260 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _261) -> [return: bb167, unwind: bb201]
  }
  preds [bb163]
  succs [bb167, bb201]

bb167
  0: StorageDead(_261)
    SourceInfo(regex-lite/src/nfa.rs:499:41-499:42)
  1: PlaceMention(_260)
    SourceInfo(regex-lite/src/nfa.rs:499:13-499:42)
  2: _265 = discriminant(_260)
    SourceInfo(regex-lite/src/nfa.rs:499:13-499:42)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:499:13-499:42)
      kind: switchInt(move _265) -> [0: bb170, 1: bb169, otherwise: bb168]
  }
  preds [bb166]
  succs [bb168, bb169, bb170]

bb168
  0: FakeRead(ForMatchedPlace(None), _260)
    SourceInfo(regex-lite/src/nfa.rs:499:13-499:42)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:499:13-499:42)
      kind: unreachable
  }
  preds [bb167]
  succs []

bb169
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:499:41-499:42)
      kind: falseEdge -> [real: bb171, imaginary: bb170]
  }
  preds [bb167]
  succs [bb170, bb171]

bb170
  0: StorageLive(_269)
    SourceInfo(regex-lite/src/nfa.rs:499:13-499:42)
  1: _269 = ((_260 as Continue).0: ())
    SourceInfo(regex-lite/src/nfa.rs:499:13-499:42)
  2: _259 = _269
    SourceInfo(regex-lite/src/nfa.rs:499:13-499:42)
  3: StorageDead(_269)
    SourceInfo(regex-lite/src/nfa.rs:499:41-499:42)
  4: StorageDead(_260)
    SourceInfo(regex-lite/src/nfa.rs:499:42-499:43)
  5: StorageDead(_259)
    SourceInfo(regex-lite/src/nfa.rs:499:42-499:43)
  6: StorageLive(_270)
    SourceInfo(regex-lite/src/nfa.rs:500:13-500:44)
  7: StorageLive(_271)
    SourceInfo(regex-lite/src/nfa.rs:500:13-500:44)
  8: StorageLive(_272)
    SourceInfo(regex-lite/src/nfa.rs:500:13-500:43)
  9: StorageLive(_273)
    SourceInfo(regex-lite/src/nfa.rs:500:13-500:17)
  10: _273 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:500:13-500:17)
  11: StorageLive(_274)
    SourceInfo(regex-lite/src/nfa.rs:500:24-500:30)
  12: _274 = _235
    SourceInfo(regex-lite/src/nfa.rs:500:24-500:30)
  13: StorageLive(_275)
    SourceInfo(regex-lite/src/nfa.rs:500:32-500:42)
  14: _275 = (_225.0: u32)
    SourceInfo(regex-lite/src/nfa.rs:500:32-500:42)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:500:13-500:43)
      kind: _272 = nfa::Compiler::patch(move _273, move _274, move _275) -> [return: bb173, unwind: bb201]
  }
  preds [bb167, bb169]
  succs [bb173, bb201]

bb171
  0: StorageLive(_266)
    SourceInfo(regex-lite/src/nfa.rs:499:41-499:42)
  1: _266 = move ((_260 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:499:41-499:42)
  2: StorageLive(_268)
    SourceInfo(regex-lite/src/nfa.rs:499:41-499:42)
  3: _268 = move _266
    SourceInfo(regex-lite/src/nfa.rs:499:41-499:42)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:499:13-499:42)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _268) -> [return: bb172, unwind: bb201]
  }
  preds [bb169]
  succs [bb172, bb201]

bb172
  0: StorageDead(_268)
    SourceInfo(regex-lite/src/nfa.rs:499:41-499:42)
  1: StorageDead(_266)
    SourceInfo(regex-lite/src/nfa.rs:499:41-499:42)
  2: StorageDead(_260)
    SourceInfo(regex-lite/src/nfa.rs:499:42-499:43)
  3: StorageDead(_259)
    SourceInfo(regex-lite/src/nfa.rs:499:42-499:43)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb182
  }
  preds [bb171]
  succs [bb182]

bb173
  0: StorageDead(_275)
    SourceInfo(regex-lite/src/nfa.rs:500:42-500:43)
  1: StorageDead(_274)
    SourceInfo(regex-lite/src/nfa.rs:500:42-500:43)
  2: StorageDead(_273)
    SourceInfo(regex-lite/src/nfa.rs:500:42-500:43)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:500:13-500:44)
      kind: _271 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _272) -> [return: bb174, unwind: bb201]
  }
  preds [bb170]
  succs [bb174, bb201]

bb174
  0: StorageDead(_272)
    SourceInfo(regex-lite/src/nfa.rs:500:43-500:44)
  1: PlaceMention(_271)
    SourceInfo(regex-lite/src/nfa.rs:500:13-500:44)
  2: _276 = discriminant(_271)
    SourceInfo(regex-lite/src/nfa.rs:500:13-500:44)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:500:13-500:44)
      kind: switchInt(move _276) -> [0: bb177, 1: bb176, otherwise: bb175]
  }
  preds [bb173]
  succs [bb175, bb176, bb177]

bb175
  0: FakeRead(ForMatchedPlace(None), _271)
    SourceInfo(regex-lite/src/nfa.rs:500:13-500:44)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:500:13-500:44)
      kind: unreachable
  }
  preds [bb174]
  succs []

bb176
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:500:43-500:44)
      kind: falseEdge -> [real: bb178, imaginary: bb177]
  }
  preds [bb174]
  succs [bb177, bb178]

bb177
  0: StorageLive(_280)
    SourceInfo(regex-lite/src/nfa.rs:500:13-500:44)
  1: _280 = ((_271 as Continue).0: ())
    SourceInfo(regex-lite/src/nfa.rs:500:13-500:44)
  2: _270 = _280
    SourceInfo(regex-lite/src/nfa.rs:500:13-500:44)
  3: StorageDead(_280)
    SourceInfo(regex-lite/src/nfa.rs:500:43-500:44)
  4: StorageDead(_271)
    SourceInfo(regex-lite/src/nfa.rs:500:44-500:45)
  5: StorageDead(_270)
    SourceInfo(regex-lite/src/nfa.rs:500:44-500:45)
  6: StorageLive(_281)
    SourceInfo(regex-lite/src/nfa.rs:501:16-501:64)
  7: StorageLive(_282)
    SourceInfo(regex-lite/src/nfa.rs:501:37-501:49)
  8: _282 = (_212.0: u32)
    SourceInfo(regex-lite/src/nfa.rs:501:37-501:49)
  9: StorageLive(_283)
    SourceInfo(regex-lite/src/nfa.rs:501:56-501:62)
  10: _283 = _235
    SourceInfo(regex-lite/src/nfa.rs:501:56-501:62)
  11: _281 = nfa::ThompsonRef { start: move _282, end: move _283 }
    SourceInfo(regex-lite/src/nfa.rs:501:16-501:64)
  12: StorageDead(_283)
    SourceInfo(regex-lite/src/nfa.rs:501:63-501:64)
  13: StorageDead(_282)
    SourceInfo(regex-lite/src/nfa.rs:501:63-501:64)
  14: _0 = core::result::Result::<nfa::ThompsonRef, error::Error>::Ok(move _281)
    SourceInfo(regex-lite/src/nfa.rs:501:13-501:65)
  15: StorageDead(_281)
    SourceInfo(regex-lite/src/nfa.rs:501:64-501:65)
  16: StorageDead(_235)
    SourceInfo(regex-lite/src/nfa.rs:502:9-502:10)
  17: StorageDead(_225)
    SourceInfo(regex-lite/src/nfa.rs:502:9-502:10)
  18: StorageDead(_212)
    SourceInfo(regex-lite/src/nfa.rs:502:9-502:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:486:16-502:10)
      kind: goto -> bb180
  }
  preds [bb174, bb176]
  succs [bb180]

bb178
  0: StorageLive(_277)
    SourceInfo(regex-lite/src/nfa.rs:500:43-500:44)
  1: _277 = move ((_271 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:500:43-500:44)
  2: StorageLive(_279)
    SourceInfo(regex-lite/src/nfa.rs:500:43-500:44)
  3: _279 = move _277
    SourceInfo(regex-lite/src/nfa.rs:500:43-500:44)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:500:13-500:44)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _279) -> [return: bb179, unwind: bb201]
  }
  preds [bb176]
  succs [bb179, bb201]

bb179
  0: StorageDead(_279)
    SourceInfo(regex-lite/src/nfa.rs:500:43-500:44)
  1: StorageDead(_277)
    SourceInfo(regex-lite/src/nfa.rs:500:43-500:44)
  2: StorageDead(_271)
    SourceInfo(regex-lite/src/nfa.rs:500:44-500:45)
  3: StorageDead(_270)
    SourceInfo(regex-lite/src/nfa.rs:500:44-500:45)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb182
  }
  preds [bb178]
  succs [bb182]

bb180
  0: StorageDead(_162)
    SourceInfo(regex-lite/src/nfa.rs:502:9-502:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:449:9-502:10)
      kind: goto -> bb181
  }
  preds [bb131, bb177]
  succs [bb181]

bb181
  0: StorageDead(_5)
    SourceInfo(regex-lite/src/nfa.rs:502:9-502:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:503:6-503:6)
      kind: goto -> bb195
  }
  preds [bb99, bb180]
  succs [bb195]

bb182
  0: StorageDead(_235)
    SourceInfo(regex-lite/src/nfa.rs:502:9-502:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb183
  }
  preds [bb158, bb165, bb172, bb179]
  succs [bb183]

bb183
  0: StorageDead(_225)
    SourceInfo(regex-lite/src/nfa.rs:502:9-502:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb184
  }
  preds [bb149, bb182]
  succs [bb184]

bb184
  0: StorageDead(_212)
    SourceInfo(regex-lite/src/nfa.rs:502:9-502:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb187
  }
  preds [bb142, bb183]
  succs [bb187]

bb185
  0: StorageDead(_174)
    SourceInfo(regex-lite/src/nfa.rs:493:9-493:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb186
  }
  preds [bb119, bb126, bb133]
  succs [bb186]

bb186
  0: StorageDead(_164)
    SourceInfo(regex-lite/src/nfa.rs:493:9-493:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb187
  }
  preds [bb110, bb185]
  succs [bb187]

bb187
  0: StorageDead(_162)
    SourceInfo(regex-lite/src/nfa.rs:502:9-502:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb194
  }
  preds [bb184, bb186]
  succs [bb194]

bb188
  0: StorageDead(_117)
    SourceInfo(regex-lite/src/nfa.rs:486:9-486:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb189
  }
  preds [bb80, bb87, bb94, bb101]
  succs [bb189]

bb189
  0: StorageDead(_104)
    SourceInfo(regex-lite/src/nfa.rs:486:9-486:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb190
  }
  preds [bb73, bb188]
  succs [bb190]

bb190
  0: StorageDead(_69)
    SourceInfo(regex-lite/src/nfa.rs:486:9-486:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb191
  }
  preds [bb50, bb57, bb64, bb189]
  succs [bb191]

bb191
  0: StorageDead(_59)
    SourceInfo(regex-lite/src/nfa.rs:486:9-486:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb194
  }
  preds [bb41, bb190]
  succs [bb194]

bb192
  0: StorageDead(_24)
    SourceInfo(regex-lite/src/nfa.rs:463:13-463:14)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb193
  }
  preds [bb20, bb27, bb32, bb34]
  succs [bb193]

bb193
  0: StorageDead(_11)
    SourceInfo(regex-lite/src/nfa.rs:463:13-463:14)
  1: StorageDead(_8)
    SourceInfo(regex-lite/src/nfa.rs:463:13-463:14)
  2: StorageDead(_7)
    SourceInfo(regex-lite/src/nfa.rs:463:13-463:14)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb194
  }
  preds [bb13, bb192]
  succs [bb194]

bb194
  0: StorageDead(_5)
    SourceInfo(regex-lite/src/nfa.rs:502:9-502:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:503:6-503:6)
      kind: goto -> bb195
  }
  preds [bb187, bb191, bb193]
  succs [bb195]

bb195
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:503:6-503:6)
      kind: return
  }
  preds [bb181, bb194]
  succs []

bb196
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:497:77-497:78)
      kind: drop(_239) -> [return: bb201, unwind terminate(cleanup)]
  }
  preds [bb150, bb151]
  succs [bb201]

bb197
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:489:77-489:78)
      kind: drop(_178) -> [return: bb201, unwind terminate(cleanup)]
  }
  preds [bb111, bb112]
  succs [bb201]

bb198
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:480:77-480:78)
      kind: drop(_108) -> [return: bb201, unwind terminate(cleanup)]
  }
  preds [bb65, bb66]
  succs [bb201]

bb199
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:475:77-475:78)
      kind: drop(_73) -> [return: bb201, unwind terminate(cleanup)]
  }
  preds [bb42, bb43]
  succs [bb201]

bb200
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:458:18-458:19)
      kind: drop(_15) -> [return: bb201, unwind terminate(cleanup)]
  }
  preds [bb5, bb6]
  succs [bb201]

bb201
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:443:5-503:6)
      kind: resume
  }
  preds [bb1, bb3, bb4, bb7, bb11, bb12, bb14, bb18, bb19, bb21, bb25, bb26, bb28, bb33, bb35, bb39, bb40, bb44, bb48, bb49, bb51, bb55, bb56, bb58, bb62, bb63, bb67, bb71, bb72, bb74, bb78, bb79, bb81, bb85, bb86, bb88, bb92, bb93, bb95, bb100, bb103, bb104, bb108, bb109, bb113, bb117, bb118, bb120, bb124, bb125, bb127, bb132, bb134, bb135, bb136, bb140, bb141, bb143, bb147, bb148, bb152, bb156, bb157, bb159, bb163, bb164, bb166, bb170, bb171, bb173, bb178, bb196, bb197, bb198, bb199, bb200]
  succs []

