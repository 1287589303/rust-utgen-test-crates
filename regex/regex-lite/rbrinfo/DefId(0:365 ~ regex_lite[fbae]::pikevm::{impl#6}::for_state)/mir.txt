bb0
  0: StorageLive(_3)
    SourceInfo(regex-lite/src/pikevm.rs:720:9-720:56)
  1: StorageLive(_4)
    SourceInfo(regex-lite/src/pikevm.rs:719:13-719:14)
  2: StorageLive(_5)
    SourceInfo(regex-lite/src/pikevm.rs:719:17-719:31)
  3: StorageLive(_6)
    SourceInfo(regex-lite/src/pikevm.rs:719:17-719:20)
  4: _6 = _2
    SourceInfo(regex-lite/src/pikevm.rs:719:17-719:20)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pikevm.rs:719:17-719:31)
      kind: _5 = <u32 as int::U32>::as_usize(move _6) -> [return: bb1, unwind: bb5]
  }
  preds []
  succs [bb1, bb5]

bb1
  0: StorageDead(_6)
    SourceInfo(regex-lite/src/pikevm.rs:719:30-719:31)
  1: StorageLive(_7)
    SourceInfo(regex-lite/src/pikevm.rs:719:34-719:54)
  2: _7 = ((*_1).1: usize)
    SourceInfo(regex-lite/src/pikevm.rs:719:34-719:54)
  3: _8 = MulWithOverflow(_5, _7)
    SourceInfo(regex-lite/src/pikevm.rs:719:17-719:54)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pikevm.rs:719:17-719:54)
      kind: assert(!move (_8.1: bool), "attempt to compute `{} * {}`, which would overflow", move _5, move _7) -> [success: bb2, unwind: bb5]
  }
  preds [bb0]
  succs [bb2, bb5]

bb2
  0: _4 = move (_8.0: usize)
    SourceInfo(regex-lite/src/pikevm.rs:719:17-719:54)
  1: StorageDead(_7)
    SourceInfo(regex-lite/src/pikevm.rs:719:53-719:54)
  2: StorageDead(_5)
    SourceInfo(regex-lite/src/pikevm.rs:719:53-719:54)
  3: FakeRead(ForLet(None), _4)
    SourceInfo(regex-lite/src/pikevm.rs:719:13-719:14)
  4: StorageLive(_9)
    SourceInfo(regex-lite/src/pikevm.rs:720:9-720:56)
  5: StorageLive(_10)
    SourceInfo(regex-lite/src/pikevm.rs:720:24-720:56)
  6: StorageLive(_11)
    SourceInfo(regex-lite/src/pikevm.rs:720:14-720:24)
  7: _11 = &mut ((*_1).0: alloc::vec::Vec<core::option::Option<int::NonMaxUsize>>)
    SourceInfo(regex-lite/src/pikevm.rs:720:14-720:24)
  8: StorageLive(_12)
    SourceInfo(regex-lite/src/pikevm.rs:720:25-720:55)
  9: StorageLive(_13)
    SourceInfo(regex-lite/src/pikevm.rs:720:25-720:26)
  10: _13 = _4
    SourceInfo(regex-lite/src/pikevm.rs:720:25-720:26)
  11: StorageLive(_14)
    SourceInfo(regex-lite/src/pikevm.rs:720:28-720:55)
  12: StorageLive(_15)
    SourceInfo(regex-lite/src/pikevm.rs:720:28-720:29)
  13: _15 = _4
    SourceInfo(regex-lite/src/pikevm.rs:720:28-720:29)
  14: StorageLive(_16)
    SourceInfo(regex-lite/src/pikevm.rs:720:32-720:55)
  15: _16 = ((*_1).2: usize)
    SourceInfo(regex-lite/src/pikevm.rs:720:32-720:55)
  16: _17 = AddWithOverflow(_15, _16)
    SourceInfo(regex-lite/src/pikevm.rs:720:28-720:55)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pikevm.rs:720:28-720:55)
      kind: assert(!move (_17.1: bool), "attempt to compute `{} + {}`, which would overflow", move _15, move _16) -> [success: bb3, unwind: bb5]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: _14 = move (_17.0: usize)
    SourceInfo(regex-lite/src/pikevm.rs:720:28-720:55)
  1: StorageDead(_16)
    SourceInfo(regex-lite/src/pikevm.rs:720:54-720:55)
  2: StorageDead(_15)
    SourceInfo(regex-lite/src/pikevm.rs:720:54-720:55)
  3: _12 = core::ops::Range::<usize> { start: move _13, end: move _14 }
    SourceInfo(regex-lite/src/pikevm.rs:720:25-720:55)
  4: StorageDead(_14)
    SourceInfo(regex-lite/src/pikevm.rs:720:54-720:55)
  5: StorageDead(_13)
    SourceInfo(regex-lite/src/pikevm.rs:720:54-720:55)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pikevm.rs:720:24-720:56)
      kind: _10 = <alloc::vec::Vec<core::option::Option<int::NonMaxUsize>> as core::ops::IndexMut<core::ops::Range<usize>>>::index_mut(move _11, move _12) -> [return: bb4, unwind: bb5]
  }
  preds [bb2]
  succs [bb4, bb5]

bb4
  0: StorageDead(_12)
    SourceInfo(regex-lite/src/pikevm.rs:720:55-720:56)
  1: StorageDead(_11)
    SourceInfo(regex-lite/src/pikevm.rs:720:55-720:56)
  2: _9 = &mut (*_10)
    SourceInfo(regex-lite/src/pikevm.rs:720:9-720:56)
  3: _3 = &mut (*_9)
    SourceInfo(regex-lite/src/pikevm.rs:720:9-720:56)
  4: StorageDead(_4)
    SourceInfo(regex-lite/src/pikevm.rs:721:5-721:6)
  5: _0 = &mut (*_3)
    SourceInfo(regex-lite/src/pikevm.rs:720:9-720:56)
  6: StorageDead(_10)
    SourceInfo(regex-lite/src/pikevm.rs:721:5-721:6)
  7: StorageDead(_9)
    SourceInfo(regex-lite/src/pikevm.rs:721:5-721:6)
  8: StorageDead(_3)
    SourceInfo(regex-lite/src/pikevm.rs:721:5-721:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pikevm.rs:721:6-721:6)
      kind: return
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(regex-lite/src/pikevm.rs:718:5-721:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3]
  succs []

