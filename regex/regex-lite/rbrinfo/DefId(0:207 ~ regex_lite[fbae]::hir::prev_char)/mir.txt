bb0
  0: StorageLive(_2)
    SourceInfo(regex-lite/src/hir/mod.rs:761:5-763:6)
  1: StorageLive(_3)
    SourceInfo(regex-lite/src/hir/mod.rs:761:8-761:24)
  2: StorageLive(_4)
    SourceInfo(regex-lite/src/hir/mod.rs:761:8-761:10)
  3: _4 = _1
    SourceInfo(regex-lite/src/hir/mod.rs:761:8-761:10)
  4: _3 = Eq(move _4, const '\u{e000}')
    SourceInfo(regex-lite/src/hir/mod.rs:761:8-761:24)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:761:8-761:24)
      kind: switchInt(move _3) -> [0: bb2, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-lite/src/hir/mod.rs:761:23-761:24)
  1: _0 = core::option::Option::<char>::Some(const '\u{d7ff}')
    SourceInfo(regex-lite/src/hir/mod.rs:762:16-762:32)
  2: StorageDead(_3)
    SourceInfo(regex-lite/src/hir/mod.rs:763:5-763:6)
  3: StorageDead(_2)
    SourceInfo(regex-lite/src/hir/mod.rs:763:5-763:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb13
  }
  preds [bb0]
  succs [bb13]

bb2
  0: StorageDead(_4)
    SourceInfo(regex-lite/src/hir/mod.rs:761:23-761:24)
  1: _2 = const ()
    SourceInfo(regex-lite/src/hir/mod.rs:763:6-763:6)
  2: StorageDead(_3)
    SourceInfo(regex-lite/src/hir/mod.rs:763:5-763:6)
  3: StorageDead(_2)
    SourceInfo(regex-lite/src/hir/mod.rs:763:5-763:6)
  4: StorageLive(_6)
    SourceInfo(regex-lite/src/hir/mod.rs:766:10-766:64)
  5: StorageLive(_7)
    SourceInfo(regex-lite/src/hir/mod.rs:766:10-766:55)
  6: StorageLive(_8)
    SourceInfo(regex-lite/src/hir/mod.rs:766:25-766:54)
  7: StorageLive(_9)
    SourceInfo(regex-lite/src/hir/mod.rs:766:25-766:54)
  8: StorageLive(_10)
    SourceInfo(regex-lite/src/hir/mod.rs:766:25-766:53)
  9: StorageLive(_11)
    SourceInfo(regex-lite/src/hir/mod.rs:766:25-766:38)
  10: StorageLive(_12)
    SourceInfo(regex-lite/src/hir/mod.rs:766:35-766:37)
  11: _12 = _1
    SourceInfo(regex-lite/src/hir/mod.rs:766:35-766:37)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:766:25-766:38)
      kind: _11 = <u32 as core::convert::From<char>>::from(move _12) -> [return: bb3, unwind: bb14]
  }
  preds [bb0]
  succs [bb3, bb14]

bb3
  0: StorageDead(_12)
    SourceInfo(regex-lite/src/hir/mod.rs:766:37-766:38)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:766:25-766:53)
      kind: _10 = core::num::<impl u32>::checked_sub(move _11, const 1_u32) -> [return: bb4, unwind: bb14]
  }
  preds [bb2]
  succs [bb4, bb14]

bb4
  0: StorageDead(_11)
    SourceInfo(regex-lite/src/hir/mod.rs:766:52-766:53)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:766:25-766:54)
      kind: _9 = <core::option::Option<u32> as core::ops::Try>::branch(move _10) -> [return: bb5, unwind: bb14]
  }
  preds [bb3]
  succs [bb5, bb14]

bb5
  0: StorageDead(_10)
    SourceInfo(regex-lite/src/hir/mod.rs:766:53-766:54)
  1: PlaceMention(_9)
    SourceInfo(regex-lite/src/hir/mod.rs:766:25-766:54)
  2: _13 = discriminant(_9)
    SourceInfo(regex-lite/src/hir/mod.rs:766:25-766:54)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:766:25-766:54)
      kind: switchInt(move _13) -> [0: bb8, 1: bb7, otherwise: bb6]
  }
  preds [bb4]
  succs [bb6, bb7, bb8]

bb6
  0: FakeRead(ForMatchedPlace(None), _9)
    SourceInfo(regex-lite/src/hir/mod.rs:766:25-766:54)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:766:25-766:54)
      kind: unreachable
  }
  preds [bb5]
  succs []

bb7
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:766:53-766:54)
      kind: falseEdge -> [real: bb9, imaginary: bb8]
  }
  preds [bb5]
  succs [bb8, bb9]

bb8
  0: StorageLive(_17)
    SourceInfo(regex-lite/src/hir/mod.rs:766:25-766:54)
  1: _17 = ((_9 as Continue).0: u32)
    SourceInfo(regex-lite/src/hir/mod.rs:766:25-766:54)
  2: _8 = _17
    SourceInfo(regex-lite/src/hir/mod.rs:766:25-766:54)
  3: StorageDead(_17)
    SourceInfo(regex-lite/src/hir/mod.rs:766:53-766:54)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:766:10-766:55)
      kind: _7 = core::char::methods::<impl char>::from_u32(move _8) -> [return: bb11, unwind: bb14]
  }
  preds [bb5, bb7]
  succs [bb11, bb14]

bb9
  0: StorageLive(_14)
    SourceInfo(regex-lite/src/hir/mod.rs:766:53-766:54)
  1: _14 = ((_9 as Break).0: core::option::Option<core::convert::Infallible>)
    SourceInfo(regex-lite/src/hir/mod.rs:766:53-766:54)
  2: StorageLive(_16)
    SourceInfo(regex-lite/src/hir/mod.rs:766:53-766:54)
  3: _16 = _14
    SourceInfo(regex-lite/src/hir/mod.rs:766:53-766:54)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:766:25-766:54)
      kind: _0 = <core::option::Option<char> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _16) -> [return: bb10, unwind: bb14]
  }
  preds [bb7]
  succs [bb10, bb14]

bb10
  0: StorageDead(_16)
    SourceInfo(regex-lite/src/hir/mod.rs:766:53-766:54)
  1: StorageDead(_14)
    SourceInfo(regex-lite/src/hir/mod.rs:766:53-766:54)
  2: StorageDead(_8)
    SourceInfo(regex-lite/src/hir/mod.rs:766:54-766:55)
  3: StorageDead(_7)
    SourceInfo(regex-lite/src/hir/mod.rs:766:63-766:64)
  4: StorageDead(_6)
    SourceInfo(regex-lite/src/hir/mod.rs:766:64-766:65)
  5: StorageDead(_9)
    SourceInfo(regex-lite/src/hir/mod.rs:767:1-767:2)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb13
  }
  preds [bb9]
  succs [bb13]

bb11
  0: StorageDead(_8)
    SourceInfo(regex-lite/src/hir/mod.rs:766:54-766:55)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:766:10-766:64)
      kind: _6 = core::option::Option::<char>::unwrap(move _7) -> [return: bb12, unwind: bb14]
  }
  preds [bb8]
  succs [bb12, bb14]

bb12
  0: StorageDead(_7)
    SourceInfo(regex-lite/src/hir/mod.rs:766:63-766:64)
  1: _0 = core::option::Option::<char>::Some(move _6)
    SourceInfo(regex-lite/src/hir/mod.rs:766:5-766:65)
  2: StorageDead(_6)
    SourceInfo(regex-lite/src/hir/mod.rs:766:64-766:65)
  3: StorageDead(_9)
    SourceInfo(regex-lite/src/hir/mod.rs:767:1-767:2)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:767:2-767:2)
      kind: goto -> bb13
  }
  preds [bb11]
  succs [bb13]

bb13
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:767:2-767:2)
      kind: return
  }
  preds [bb1, bb10, bb12]
  succs []

bb14
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:759:1-767:2)
      kind: resume
  }
  preds [bb2, bb3, bb4, bb8, bb9, bb11]
  succs []

