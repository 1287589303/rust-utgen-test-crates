bb0
  0: StorageLive(_3)
    SourceInfo(regex-lite/src/string.rs:416:13-416:21)
  1: _3 = &(*_2)
    SourceInfo(regex-lite/src/string.rs:416:13-416:21)
  2: StorageLive(_4)
    SourceInfo(regex-lite/src/string.rs:417:17-417:21)
  3: _4 = &(*_1)
    SourceInfo(regex-lite/src/string.rs:417:17-417:21)
  4: StorageLive(_5)
    SourceInfo(regex-lite/src/string.rs:418:17-420:69)
  5: StorageLive(_6)
    SourceInfo(regex-lite/src/string.rs:418:17-419:24)
  6: StorageLive(_7)
    SourceInfo(regex-lite/src/string.rs:418:17-420:69)
  7: StorageLive(_8)
    SourceInfo(regex-lite/src/string.rs:418:17-419:24)
  8: _8 = &((*_1).0: alloc::sync::Arc<pikevm::PikeVM>)
    SourceInfo(regex-lite/src/string.rs:418:17-419:24)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:418:17-420:69)
      kind: _7 = <alloc::sync::Arc<pikevm::PikeVM> as core::ops::Deref>::deref(move _8) -> [return: bb1, unwind: bb7]
  }
  preds []
  succs [bb1, bb7]

bb1
  0: _6 = &(*_7)
    SourceInfo(regex-lite/src/string.rs:418:17-419:24)
  1: StorageDead(_8)
    SourceInfo(regex-lite/src/string.rs:419:23-419:24)
  2: StorageLive(_9)
    SourceInfo(regex-lite/src/string.rs:420:32-420:47)
  3: StorageLive(_10)
    SourceInfo(regex-lite/src/string.rs:420:32-420:41)
  4: _10 = &((*_1).1: pool::Pool<pikevm::Cache, alloc::boxed::Box<dyn core::ops::Fn() -> pikevm::Cache + core::marker::Send + core::marker::Sync + core::panic::RefUnwindSafe + core::panic::UnwindSafe>>)
    SourceInfo(regex-lite/src/string.rs:420:32-420:41)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:420:32-420:47)
      kind: _9 = pool::Pool::<pikevm::Cache, alloc::boxed::Box<dyn core::ops::Fn() -> pikevm::Cache + core::marker::Send + core::marker::Sync + core::panic::RefUnwindSafe + core::panic::UnwindSafe>>::get(move _10) -> [return: bb2, unwind: bb7]
  }
  preds [bb0]
  succs [bb2, bb7]

bb2
  0: StorageDead(_10)
    SourceInfo(regex-lite/src/string.rs:420:46-420:47)
  1: StorageLive(_11)
    SourceInfo(regex-lite/src/string.rs:420:49-420:68)
  2: StorageLive(_12)
    SourceInfo(regex-lite/src/string.rs:420:49-420:68)
  3: StorageLive(_13)
    SourceInfo(regex-lite/src/string.rs:420:49-420:57)
  4: _13 = &(*_2)
    SourceInfo(regex-lite/src/string.rs:420:49-420:57)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:420:49-420:68)
      kind: _12 = core::str::<impl str>::as_bytes(move _13) -> [return: bb3, unwind: bb6]
  }
  preds [bb1]
  succs [bb3, bb6]

bb3
  0: _11 = &(*_12)
    SourceInfo(regex-lite/src/string.rs:420:49-420:68)
  1: StorageDead(_13)
    SourceInfo(regex-lite/src/string.rs:420:67-420:68)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:418:17-420:69)
      kind: _5 = pikevm::PikeVM::captures_iter(move _6, move _9, move _11) -> [return: bb4, unwind: bb6]
  }
  preds [bb2]
  succs [bb4, bb6]

bb4
  0: StorageDead(_11)
    SourceInfo(regex-lite/src/string.rs:420:68-420:69)
  1: StorageDead(_9)
    SourceInfo(regex-lite/src/string.rs:420:68-420:69)
  2: StorageDead(_6)
    SourceInfo(regex-lite/src/string.rs:420:68-420:69)
  3: _0 = string::CaptureMatches::<'_, '_> { haystack: move _3, re: move _4, it: move _5 }
    SourceInfo(regex-lite/src/string.rs:415:9-421:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:421:9-421:10)
      kind: drop(_5) -> [return: bb5, unwind: bb7]
  }
  preds [bb3]
  succs [bb5, bb7]

bb5
  0: StorageDead(_5)
    SourceInfo(regex-lite/src/string.rs:421:9-421:10)
  1: StorageDead(_4)
    SourceInfo(regex-lite/src/string.rs:421:9-421:10)
  2: StorageDead(_3)
    SourceInfo(regex-lite/src/string.rs:421:9-421:10)
  3: StorageDead(_12)
    SourceInfo(regex-lite/src/string.rs:422:5-422:6)
  4: StorageDead(_7)
    SourceInfo(regex-lite/src/string.rs:422:5-422:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:422:6-422:6)
      kind: return
  }
  preds [bb4]
  succs []

bb6
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:420:68-420:69)
      kind: drop(_9) -> [return: bb7, unwind terminate(cleanup)]
  }
  preds [bb2, bb3]
  succs [bb7]

bb7
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:411:5-422:6)
      kind: resume
  }
  preds [bb0, bb1, bb4, bb6]
  succs []

