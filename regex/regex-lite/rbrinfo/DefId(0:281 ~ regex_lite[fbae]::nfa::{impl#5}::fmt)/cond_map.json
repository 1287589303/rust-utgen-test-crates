{
  "regex-lite/src/nfa.rs:216:21:216:72": [
    {
      "Try": "write!(f, \"{:?}-{:?} => {:?}\", start, end, target)?"
    }
  ],
  "regex-lite/src/nfa.rs:214:25:214:41": [
    {
      "Try": "write!(f, \", \")?"
    }
  ],
  "regex-lite/src/nfa.rs:223:21:223:69": [
    {
      "For": {
        "iter_var": "(i, sid)",
        "iter_range": "State::iter_splits(targets, reverse).enumerate()"
      }
    }
  ],
  "regex-lite/src/nfa.rs:228:21:228:44": [
    {
      "Try": "write!(f, \"{:?}\", sid)?"
    }
  ],
  "regex-lite/src/nfa.rs:207:15:207:20": [
    {
      "Match": {
        "match_source": "regex-lite/src/nfa.rs:207:15:207:20",
        "match_str": "*self",
        "match_kind": {
          "Enum": [
            "Char",
            "Ranges",
            "Splits",
            "Goto",
            "Capture",
            "Fail",
            "Match"
          ]
        },
        "arms": {
          "regex-lite/src/nfa.rs:211:13:211:49": {
            "pat": {
              "pat_str": "State::Ranges { target, ref ranges }",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/nfa.rs:211:53:219:14"
          },
          "regex-lite/src/nfa.rs:220:13:220:51": {
            "pat": {
              "pat_str": "State::Splits { ref targets, reverse }",
              "kind": {
                "Enum": 2
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/nfa.rs:220:55:231:14"
          },
          "regex-lite/src/nfa.rs:241:13:241:24": {
            "pat": {
              "pat_str": "State::Fail",
              "kind": {
                "Enum": 5
              }
            },
            "guard": null,
            "body_source": null
          },
          "regex-lite/src/nfa.rs:235:13:235:53": {
            "pat": {
              "pat_str": "State::Goto { target, look: Some(look) }",
              "kind": {
                "Enum": 3
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/nfa.rs:235:57:237:14"
          },
          "regex-lite/src/nfa.rs:242:13:242:25": {
            "pat": {
              "pat_str": "State::Match",
              "kind": {
                "Enum": 6
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/nfa.rs:242:29:244:14"
          },
          "regex-lite/src/nfa.rs:238:13:238:44": {
            "pat": {
              "pat_str": "State::Capture { target, slot }",
              "kind": {
                "Enum": 4
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/nfa.rs:238:48:240:14"
          },
          "regex-lite/src/nfa.rs:232:13:232:47": {
            "pat": {
              "pat_str": "State::Goto { target, look: None }",
              "kind": {
                "Enum": 3
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/nfa.rs:232:51:234:14"
          },
          "regex-lite/src/nfa.rs:208:13:208:39": {
            "pat": {
              "pat_str": "State::Char { target, ch }",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/nfa.rs:208:43:210:14"
          }
        }
      }
    }
  ],
  "regex-lite/src/nfa.rs:221:17:221:38": [
    {
      "Try": "write!(f, \"splits(\")?"
    }
  ],
  "regex-lite/src/nfa.rs:212:43:212:68": [
    {
      "For": {
        "iter_var": "(i, &(start, end))",
        "iter_range": "ranges.iter().enumerate()"
      }
    }
  ],
  "regex-lite/src/nfa.rs:213:24:213:29": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "i > 0",
          "lhs": "i",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/nfa.rs:225:24:225:29": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "i > 0",
          "lhs": "i",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/nfa.rs:226:25:226:41": [
    {
      "Try": "write!(f, \", \")?"
    }
  ]
}