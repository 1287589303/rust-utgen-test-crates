{
  "regex-lite/src/hir/parse.rs:1097:13:1097:39": [
    {
      "Bool": {
        "Other": "self.bump_and_bump_space()"
      }
    }
  ],
  "regex-lite/src/hir/parse.rs:1076:21:1076:45": [
    {
      "Try": "self.parse_class_item()?"
    }
  ],
  "regex-lite/src/hir/parse.rs:1090:16:1090:46": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.peek_space() == Some('-')",
          "lhs": "self.peek_space()",
          "rhs": "Some('-')",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-lite/src/hir/parse.rs:1103:18:1103:47": [
    {
      "Try": "into_class_item_range(prim2)?"
    }
  ],
  "regex-lite/src/hir/parse.rs:1089:16:1089:46": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.peek_space() == Some(']')",
          "lhs": "self.peek_space()",
          "rhs": "Some(']')",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-lite/src/hir/parse.rs:1100:21:1100:45": [
    {
      "Try": "self.parse_class_item()?"
    }
  ],
  "regex-lite/src/hir/parse.rs:1102:20:1102:49": [
    {
      "Try": "into_class_item_range(prim1)?"
    }
  ],
  "regex-lite/src/hir/parse.rs:1078:12:1078:26": [
    {
      "Bool": {
        "Other": "self.is_done()"
      }
    }
  ],
  "regex-lite/src/hir/parse.rs:1105:12:1105:35": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "range.start > range.end",
          "lhs": "range.start",
          "rhs": "range.end",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-lite/src/hir/parse.rs:1092:38:1092:68": [
    {
      "Try": "into_class_item_ranges(prim1)?"
    }
  ],
  "regex-lite/src/hir/parse.rs:1088:12:1088:30": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "self.char() != '-'",
          "lhs": "self.char()",
          "rhs": "'-'",
          "cmp_with_int": true
        }
      }
    }
  ]
}