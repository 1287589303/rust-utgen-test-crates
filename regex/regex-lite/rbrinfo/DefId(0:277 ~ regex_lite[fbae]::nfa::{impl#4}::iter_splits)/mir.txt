bb0
  0: StorageLive(_3)
    SourceInfo(regex-lite/src/nfa.rs:198:13-198:19)
  1: StorageLive(_4)
    SourceInfo(regex-lite/src/nfa.rs:198:22-198:28)
  2: _4 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:198:22-198:28)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:198:22-198:35)
      kind: _3 = core::slice::<impl [u32]>::iter(move _4) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-lite/src/nfa.rs:198:34-198:35)
  1: FakeRead(ForLet(None), _3)
    SourceInfo(regex-lite/src/nfa.rs:198:13-198:19)
  2: StorageLive(_5)
    SourceInfo(regex-lite/src/nfa.rs:199:29-201:10)
  3: _5 = {closure@regex-lite/src/nfa.rs:199:29: 199:36} { reverse: _2, it: move _3 }
    SourceInfo(regex-lite/src/nfa.rs:199:29-201:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:199:9-201:11)
      kind: _0 = core::iter::from_fn::<u32, {closure@regex-lite/src/nfa.rs:199:29: 199:36}>(move _5) -> [return: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_5)
    SourceInfo(regex-lite/src/nfa.rs:201:10-201:11)
  1: StorageDead(_3)
    SourceInfo(regex-lite/src/nfa.rs:202:5-202:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:202:6-202:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:194:5-202:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

