{
  "regex-lite/src/nfa.rs:612:29:612:36": [
    {
      "Try": "result?"
    }
  ],
  "regex-lite/src/nfa.rs:621:9:621:37": [
    {
      "Try": "self.patch(second.end, end)?"
    }
  ],
  "regex-lite/src/nfa.rs:606:27:606:36": [
    {
      "Match": {
        "match_source": "regex-lite/src/nfa.rs:606:27:606:36",
        "match_str": "it.next()",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-lite/src/nfa.rs:608:13:608:25": {
            "pat": {
              "pat_str": "Some(result)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/nfa.rs:608:29:608:36"
          },
          "regex-lite/src/nfa.rs:607:13:607:17": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/nfa.rs:607:21:607:41"
          }
        }
      }
    }
  ],
  "regex-lite/src/nfa.rs:610:28:610:37": [
    {
      "Match": {
        "match_source": "regex-lite/src/nfa.rs:610:28:610:37",
        "match_str": "it.next()",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-lite/src/nfa.rs:611:13:611:17": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/nfa.rs:611:21:611:37"
          },
          "regex-lite/src/nfa.rs:612:13:612:25": {
            "pat": {
              "pat_str": "Some(result)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/nfa.rs:612:29:612:36"
          }
        }
      }
    }
  ],
  "regex-lite/src/nfa.rs:622:23:622:25": [
    {
      "For": {
        "iter_var": "result",
        "iter_range": "it"
      }
    }
  ],
  "regex-lite/src/nfa.rs:620:9:620:42": [
    {
      "Try": "self.patch(splits, second.start)?"
    }
  ],
  "regex-lite/src/nfa.rs:619:9:619:36": [
    {
      "Try": "self.patch(first.end, end)?"
    }
  ],
  "regex-lite/src/nfa.rs:623:28:623:35": [
    {
      "Try": "result?"
    }
  ],
  "regex-lite/src/nfa.rs:624:13:624:48": [
    {
      "Try": "self.patch(splits, compiled.start)?"
    }
  ],
  "regex-lite/src/nfa.rs:625:13:625:43": [
    {
      "Try": "self.patch(compiled.end, end)?"
    }
  ],
  "regex-lite/src/nfa.rs:617:19:617:36": [
    {
      "Try": "self.add_empty()?"
    }
  ],
  "regex-lite/src/nfa.rs:608:29:608:36": [
    {
      "Try": "result?"
    }
  ],
  "regex-lite/src/nfa.rs:618:9:618:41": [
    {
      "Try": "self.patch(splits, first.start)?"
    }
  ],
  "regex-lite/src/nfa.rs:616:13:616:73": [
    {
      "Try": "self.add(State::Splits { targets: vec![], reverse: false })?"
    }
  ]
}