bb0
  0: StorageLive(_3)
    SourceInfo(regex-lite/src/nfa.rs:606:13-606:18)
  1: StorageLive(_4)
    SourceInfo(regex-lite/src/nfa.rs:606:27-606:36)
  2: StorageLive(_5)
    SourceInfo(regex-lite/src/nfa.rs:606:27-606:29)
  3: _5 = &mut _2
    SourceInfo(regex-lite/src/nfa.rs:606:27-606:29)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:606:27-606:36)
      kind: _4 = <I as core::iter::Iterator>::next(move _5) -> [return: bb1, unwind: bb112]
  }
  preds []
  succs [bb1, bb112]

bb1
  0: StorageDead(_5)
    SourceInfo(regex-lite/src/nfa.rs:606:35-606:36)
  1: PlaceMention(_4)
    SourceInfo(regex-lite/src/nfa.rs:606:27-606:36)
  2: _6 = discriminant(_4)
    SourceInfo(regex-lite/src/nfa.rs:606:27-606:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:606:21-606:36)
      kind: switchInt(move _6) -> [0: bb3, 1: bb4, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3, bb4]

bb2
  0: FakeRead(ForMatchedPlace(None), _4)
    SourceInfo(regex-lite/src/nfa.rs:606:27-606:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:606:27-606:36)
      kind: unreachable
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:607:13-607:17)
      kind: falseEdge -> [real: bb5, imaginary: bb4]
  }
  preds [bb1]
  succs [bb4, bb5]

bb4
  0: StorageLive(_9)
    SourceInfo(regex-lite/src/nfa.rs:608:18-608:24)
  1: _9 = move ((_4 as Some).0: core::result::Result<nfa::ThompsonRef, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:608:18-608:24)
  2: StorageLive(_10)
    SourceInfo(regex-lite/src/nfa.rs:608:29-608:36)
  3: StorageLive(_11)
    SourceInfo(regex-lite/src/nfa.rs:608:29-608:35)
  4: _11 = move _9
    SourceInfo(regex-lite/src/nfa.rs:608:29-608:35)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:608:29-608:36)
      kind: _10 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::Try>::branch(move _11) -> [return: bb7, unwind: bb112]
  }
  preds [bb1, bb3]
  succs [bb7, bb112]

bb5
  0: StorageLive(_8)
    SourceInfo(regex-lite/src/nfa.rs:607:28-607:32)
  1: _8 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:607:28-607:32)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:607:28-607:41)
      kind: _0 = nfa::Compiler::c_fail(move _8) -> [return: bb6, unwind: bb112]
  }
  preds [bb3]
  succs [bb6, bb112]

bb6
  0: StorageDead(_8)
    SourceInfo(regex-lite/src/nfa.rs:607:40-607:41)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:607:21-607:41)
      kind: goto -> bb105
  }
  preds [bb5]
  succs [bb105]

bb7
  0: StorageDead(_11)
    SourceInfo(regex-lite/src/nfa.rs:608:35-608:36)
  1: PlaceMention(_10)
    SourceInfo(regex-lite/src/nfa.rs:608:29-608:36)
  2: _12 = discriminant(_10)
    SourceInfo(regex-lite/src/nfa.rs:608:29-608:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:608:29-608:36)
      kind: switchInt(move _12) -> [0: bb10, 1: bb9, otherwise: bb8]
  }
  preds [bb4]
  succs [bb8, bb9, bb10]

bb8
  0: FakeRead(ForMatchedPlace(None), _10)
    SourceInfo(regex-lite/src/nfa.rs:608:29-608:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:608:29-608:36)
      kind: unreachable
  }
  preds [bb7]
  succs []

bb9
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:608:35-608:36)
      kind: falseEdge -> [real: bb11, imaginary: bb10]
  }
  preds [bb7]
  succs [bb10, bb11]

bb10
  0: StorageLive(_16)
    SourceInfo(regex-lite/src/nfa.rs:608:29-608:36)
  1: _16 = ((_10 as Continue).0: nfa::ThompsonRef)
    SourceInfo(regex-lite/src/nfa.rs:608:29-608:36)
  2: _3 = _16
    SourceInfo(regex-lite/src/nfa.rs:608:29-608:36)
  3: StorageDead(_16)
    SourceInfo(regex-lite/src/nfa.rs:608:35-608:36)
  4: StorageDead(_10)
    SourceInfo(regex-lite/src/nfa.rs:608:35-608:36)
  5: StorageDead(_9)
    SourceInfo(regex-lite/src/nfa.rs:608:35-608:36)
  6: FakeRead(ForLet(None), _3)
    SourceInfo(regex-lite/src/nfa.rs:606:13-606:18)
  7: StorageDead(_4)
    SourceInfo(regex-lite/src/nfa.rs:609:10-609:11)
  8: StorageLive(_17)
    SourceInfo(regex-lite/src/nfa.rs:610:13-610:19)
  9: StorageLive(_18)
    SourceInfo(regex-lite/src/nfa.rs:610:28-610:37)
  10: StorageLive(_19)
    SourceInfo(regex-lite/src/nfa.rs:610:28-610:30)
  11: _19 = &mut _2
    SourceInfo(regex-lite/src/nfa.rs:610:28-610:30)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:610:28-610:37)
      kind: _18 = <I as core::iter::Iterator>::next(move _19) -> [return: bb13, unwind: bb112]
  }
  preds [bb7, bb9]
  succs [bb13, bb112]

bb11
  0: StorageLive(_13)
    SourceInfo(regex-lite/src/nfa.rs:608:35-608:36)
  1: _13 = move ((_10 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:608:35-608:36)
  2: StorageLive(_15)
    SourceInfo(regex-lite/src/nfa.rs:608:35-608:36)
  3: _15 = move _13
    SourceInfo(regex-lite/src/nfa.rs:608:35-608:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:608:29-608:36)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _15) -> [return: bb12, unwind: bb112]
  }
  preds [bb9]
  succs [bb12, bb112]

bb12
  0: StorageDead(_15)
    SourceInfo(regex-lite/src/nfa.rs:608:35-608:36)
  1: StorageDead(_13)
    SourceInfo(regex-lite/src/nfa.rs:608:35-608:36)
  2: StorageDead(_10)
    SourceInfo(regex-lite/src/nfa.rs:608:35-608:36)
  3: StorageDead(_9)
    SourceInfo(regex-lite/src/nfa.rs:608:35-608:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb105
  }
  preds [bb11]
  succs [bb105]

bb13
  0: StorageDead(_19)
    SourceInfo(regex-lite/src/nfa.rs:610:36-610:37)
  1: PlaceMention(_18)
    SourceInfo(regex-lite/src/nfa.rs:610:28-610:37)
  2: _20 = discriminant(_18)
    SourceInfo(regex-lite/src/nfa.rs:610:28-610:37)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:610:22-610:37)
      kind: switchInt(move _20) -> [0: bb15, 1: bb16, otherwise: bb14]
  }
  preds [bb10]
  succs [bb14, bb15, bb16]

bb14
  0: FakeRead(ForMatchedPlace(None), _18)
    SourceInfo(regex-lite/src/nfa.rs:610:28-610:37)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:610:28-610:37)
      kind: unreachable
  }
  preds [bb13]
  succs []

bb15
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:611:13-611:17)
      kind: falseEdge -> [real: bb17, imaginary: bb16]
  }
  preds [bb13]
  succs [bb16, bb17]

bb16
  0: StorageLive(_23)
    SourceInfo(regex-lite/src/nfa.rs:612:18-612:24)
  1: _23 = move ((_18 as Some).0: core::result::Result<nfa::ThompsonRef, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:612:18-612:24)
  2: StorageLive(_24)
    SourceInfo(regex-lite/src/nfa.rs:612:29-612:36)
  3: StorageLive(_25)
    SourceInfo(regex-lite/src/nfa.rs:612:29-612:35)
  4: _25 = move _23
    SourceInfo(regex-lite/src/nfa.rs:612:29-612:35)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:612:29-612:36)
      kind: _24 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::Try>::branch(move _25) -> [return: bb18, unwind: bb112]
  }
  preds [bb13, bb15]
  succs [bb18, bb112]

bb17
  0: StorageLive(_22)
    SourceInfo(regex-lite/src/nfa.rs:611:31-611:36)
  1: _22 = _3
    SourceInfo(regex-lite/src/nfa.rs:611:31-611:36)
  2: _0 = core::result::Result::<nfa::ThompsonRef, error::Error>::Ok(move _22)
    SourceInfo(regex-lite/src/nfa.rs:611:28-611:37)
  3: StorageDead(_22)
    SourceInfo(regex-lite/src/nfa.rs:611:36-611:37)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:611:21-611:37)
      kind: goto -> bb103
  }
  preds [bb15]
  succs [bb103]

bb18
  0: StorageDead(_25)
    SourceInfo(regex-lite/src/nfa.rs:612:35-612:36)
  1: PlaceMention(_24)
    SourceInfo(regex-lite/src/nfa.rs:612:29-612:36)
  2: _26 = discriminant(_24)
    SourceInfo(regex-lite/src/nfa.rs:612:29-612:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:612:29-612:36)
      kind: switchInt(move _26) -> [0: bb21, 1: bb20, otherwise: bb19]
  }
  preds [bb16]
  succs [bb19, bb20, bb21]

bb19
  0: FakeRead(ForMatchedPlace(None), _24)
    SourceInfo(regex-lite/src/nfa.rs:612:29-612:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:612:29-612:36)
      kind: unreachable
  }
  preds [bb18]
  succs []

bb20
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:612:35-612:36)
      kind: falseEdge -> [real: bb22, imaginary: bb21]
  }
  preds [bb18]
  succs [bb21, bb22]

bb21
  0: StorageLive(_30)
    SourceInfo(regex-lite/src/nfa.rs:612:29-612:36)
  1: _30 = ((_24 as Continue).0: nfa::ThompsonRef)
    SourceInfo(regex-lite/src/nfa.rs:612:29-612:36)
  2: _17 = _30
    SourceInfo(regex-lite/src/nfa.rs:612:29-612:36)
  3: StorageDead(_30)
    SourceInfo(regex-lite/src/nfa.rs:612:35-612:36)
  4: StorageDead(_24)
    SourceInfo(regex-lite/src/nfa.rs:612:35-612:36)
  5: StorageDead(_23)
    SourceInfo(regex-lite/src/nfa.rs:612:35-612:36)
  6: FakeRead(ForLet(None), _17)
    SourceInfo(regex-lite/src/nfa.rs:610:13-610:19)
  7: StorageDead(_18)
    SourceInfo(regex-lite/src/nfa.rs:613:10-613:11)
  8: StorageLive(_31)
    SourceInfo(regex-lite/src/nfa.rs:615:13-615:19)
  9: StorageLive(_32)
    SourceInfo(regex-lite/src/nfa.rs:616:13-616:73)
  10: StorageLive(_33)
    SourceInfo(regex-lite/src/nfa.rs:616:13-616:72)
  11: StorageLive(_34)
    SourceInfo(regex-lite/src/nfa.rs:616:13-616:17)
  12: _34 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:616:13-616:17)
  13: StorageLive(_35)
    SourceInfo(regex-lite/src/nfa.rs:616:22-616:71)
  14: StorageLive(_36)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9-44:32)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9-44:32)
      kind: _36 = alloc::vec::Vec::<u32>::new() -> [return: bb24, unwind: bb112]
  }
  preds [bb18, bb20]
  succs [bb24, bb112]

bb22
  0: StorageLive(_27)
    SourceInfo(regex-lite/src/nfa.rs:612:35-612:36)
  1: _27 = move ((_24 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:612:35-612:36)
  2: StorageLive(_29)
    SourceInfo(regex-lite/src/nfa.rs:612:35-612:36)
  3: _29 = move _27
    SourceInfo(regex-lite/src/nfa.rs:612:35-612:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:612:29-612:36)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _29) -> [return: bb23, unwind: bb112]
  }
  preds [bb20]
  succs [bb23, bb112]

bb23
  0: StorageDead(_29)
    SourceInfo(regex-lite/src/nfa.rs:612:35-612:36)
  1: StorageDead(_27)
    SourceInfo(regex-lite/src/nfa.rs:612:35-612:36)
  2: StorageDead(_24)
    SourceInfo(regex-lite/src/nfa.rs:612:35-612:36)
  3: StorageDead(_23)
    SourceInfo(regex-lite/src/nfa.rs:612:35-612:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb103
  }
  preds [bb22]
  succs [bb103]

bb24
  0: _35 = nfa::State::Splits { targets: move _36, reverse: const false }
    SourceInfo(regex-lite/src/nfa.rs:616:22-616:71)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:616:70-616:71)
      kind: drop(_36) -> [return: bb25, unwind: bb111]
  }
  preds [bb21]
  succs [bb25, bb111]

bb25
  0: StorageDead(_36)
    SourceInfo(regex-lite/src/nfa.rs:616:70-616:71)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:616:13-616:72)
      kind: _33 = nfa::Compiler::add(move _34, move _35) -> [return: bb26, unwind: bb111]
  }
  preds [bb24]
  succs [bb26, bb111]

bb26
  0: StorageDead(_35)
    SourceInfo(regex-lite/src/nfa.rs:616:71-616:72)
  1: StorageDead(_34)
    SourceInfo(regex-lite/src/nfa.rs:616:71-616:72)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:616:13-616:73)
      kind: _32 = <core::result::Result<u32, error::Error> as core::ops::Try>::branch(move _33) -> [return: bb27, unwind: bb112]
  }
  preds [bb25]
  succs [bb27, bb112]

bb27
  0: StorageDead(_33)
    SourceInfo(regex-lite/src/nfa.rs:616:72-616:73)
  1: PlaceMention(_32)
    SourceInfo(regex-lite/src/nfa.rs:616:13-616:73)
  2: _37 = discriminant(_32)
    SourceInfo(regex-lite/src/nfa.rs:616:13-616:73)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:616:13-616:73)
      kind: switchInt(move _37) -> [0: bb30, 1: bb29, otherwise: bb28]
  }
  preds [bb26]
  succs [bb28, bb29, bb30]

bb28
  0: FakeRead(ForMatchedPlace(None), _32)
    SourceInfo(regex-lite/src/nfa.rs:616:13-616:73)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:616:13-616:73)
      kind: unreachable
  }
  preds [bb27]
  succs []

bb29
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:616:72-616:73)
      kind: falseEdge -> [real: bb31, imaginary: bb30]
  }
  preds [bb27]
  succs [bb30, bb31]

bb30
  0: StorageLive(_41)
    SourceInfo(regex-lite/src/nfa.rs:616:13-616:73)
  1: _41 = ((_32 as Continue).0: u32)
    SourceInfo(regex-lite/src/nfa.rs:616:13-616:73)
  2: _31 = _41
    SourceInfo(regex-lite/src/nfa.rs:616:13-616:73)
  3: StorageDead(_41)
    SourceInfo(regex-lite/src/nfa.rs:616:72-616:73)
  4: FakeRead(ForLet(None), _31)
    SourceInfo(regex-lite/src/nfa.rs:615:13-615:19)
  5: StorageDead(_32)
    SourceInfo(regex-lite/src/nfa.rs:616:73-616:74)
  6: StorageLive(_42)
    SourceInfo(regex-lite/src/nfa.rs:617:13-617:16)
  7: StorageLive(_43)
    SourceInfo(regex-lite/src/nfa.rs:617:19-617:36)
  8: StorageLive(_44)
    SourceInfo(regex-lite/src/nfa.rs:617:19-617:35)
  9: StorageLive(_45)
    SourceInfo(regex-lite/src/nfa.rs:617:19-617:23)
  10: _45 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:617:19-617:23)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:617:19-617:35)
      kind: _44 = nfa::Compiler::add_empty(move _45) -> [return: bb33, unwind: bb112]
  }
  preds [bb27, bb29]
  succs [bb33, bb112]

bb31
  0: StorageLive(_38)
    SourceInfo(regex-lite/src/nfa.rs:616:72-616:73)
  1: _38 = move ((_32 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:616:72-616:73)
  2: StorageLive(_40)
    SourceInfo(regex-lite/src/nfa.rs:616:72-616:73)
  3: _40 = move _38
    SourceInfo(regex-lite/src/nfa.rs:616:72-616:73)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:616:13-616:73)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _40) -> [return: bb32, unwind: bb112]
  }
  preds [bb29]
  succs [bb32, bb112]

bb32
  0: StorageDead(_40)
    SourceInfo(regex-lite/src/nfa.rs:616:72-616:73)
  1: StorageDead(_38)
    SourceInfo(regex-lite/src/nfa.rs:616:72-616:73)
  2: StorageDead(_32)
    SourceInfo(regex-lite/src/nfa.rs:616:73-616:74)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb102
  }
  preds [bb31]
  succs [bb102]

bb33
  0: StorageDead(_45)
    SourceInfo(regex-lite/src/nfa.rs:617:34-617:35)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:617:19-617:36)
      kind: _43 = <core::result::Result<u32, error::Error> as core::ops::Try>::branch(move _44) -> [return: bb34, unwind: bb112]
  }
  preds [bb30]
  succs [bb34, bb112]

bb34
  0: StorageDead(_44)
    SourceInfo(regex-lite/src/nfa.rs:617:35-617:36)
  1: PlaceMention(_43)
    SourceInfo(regex-lite/src/nfa.rs:617:19-617:36)
  2: _46 = discriminant(_43)
    SourceInfo(regex-lite/src/nfa.rs:617:19-617:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:617:19-617:36)
      kind: switchInt(move _46) -> [0: bb37, 1: bb36, otherwise: bb35]
  }
  preds [bb33]
  succs [bb35, bb36, bb37]

bb35
  0: FakeRead(ForMatchedPlace(None), _43)
    SourceInfo(regex-lite/src/nfa.rs:617:19-617:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:617:19-617:36)
      kind: unreachable
  }
  preds [bb34]
  succs []

bb36
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:617:35-617:36)
      kind: falseEdge -> [real: bb38, imaginary: bb37]
  }
  preds [bb34]
  succs [bb37, bb38]

bb37
  0: StorageLive(_50)
    SourceInfo(regex-lite/src/nfa.rs:617:19-617:36)
  1: _50 = ((_43 as Continue).0: u32)
    SourceInfo(regex-lite/src/nfa.rs:617:19-617:36)
  2: _42 = _50
    SourceInfo(regex-lite/src/nfa.rs:617:19-617:36)
  3: StorageDead(_50)
    SourceInfo(regex-lite/src/nfa.rs:617:35-617:36)
  4: FakeRead(ForLet(None), _42)
    SourceInfo(regex-lite/src/nfa.rs:617:13-617:16)
  5: StorageDead(_43)
    SourceInfo(regex-lite/src/nfa.rs:617:36-617:37)
  6: StorageLive(_51)
    SourceInfo(regex-lite/src/nfa.rs:618:9-618:41)
  7: StorageLive(_52)
    SourceInfo(regex-lite/src/nfa.rs:618:9-618:41)
  8: StorageLive(_53)
    SourceInfo(regex-lite/src/nfa.rs:618:9-618:40)
  9: StorageLive(_54)
    SourceInfo(regex-lite/src/nfa.rs:618:9-618:13)
  10: _54 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:618:9-618:13)
  11: StorageLive(_55)
    SourceInfo(regex-lite/src/nfa.rs:618:20-618:26)
  12: _55 = _31
    SourceInfo(regex-lite/src/nfa.rs:618:20-618:26)
  13: StorageLive(_56)
    SourceInfo(regex-lite/src/nfa.rs:618:28-618:39)
  14: _56 = (_3.0: u32)
    SourceInfo(regex-lite/src/nfa.rs:618:28-618:39)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:618:9-618:40)
      kind: _53 = nfa::Compiler::patch(move _54, move _55, move _56) -> [return: bb40, unwind: bb112]
  }
  preds [bb34, bb36]
  succs [bb40, bb112]

bb38
  0: StorageLive(_47)
    SourceInfo(regex-lite/src/nfa.rs:617:35-617:36)
  1: _47 = move ((_43 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:617:35-617:36)
  2: StorageLive(_49)
    SourceInfo(regex-lite/src/nfa.rs:617:35-617:36)
  3: _49 = move _47
    SourceInfo(regex-lite/src/nfa.rs:617:35-617:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:617:19-617:36)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _49) -> [return: bb39, unwind: bb112]
  }
  preds [bb36]
  succs [bb39, bb112]

bb39
  0: StorageDead(_49)
    SourceInfo(regex-lite/src/nfa.rs:617:35-617:36)
  1: StorageDead(_47)
    SourceInfo(regex-lite/src/nfa.rs:617:35-617:36)
  2: StorageDead(_43)
    SourceInfo(regex-lite/src/nfa.rs:617:36-617:37)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb101
  }
  preds [bb38]
  succs [bb101]

bb40
  0: StorageDead(_56)
    SourceInfo(regex-lite/src/nfa.rs:618:39-618:40)
  1: StorageDead(_55)
    SourceInfo(regex-lite/src/nfa.rs:618:39-618:40)
  2: StorageDead(_54)
    SourceInfo(regex-lite/src/nfa.rs:618:39-618:40)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:618:9-618:41)
      kind: _52 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _53) -> [return: bb41, unwind: bb112]
  }
  preds [bb37]
  succs [bb41, bb112]

bb41
  0: StorageDead(_53)
    SourceInfo(regex-lite/src/nfa.rs:618:40-618:41)
  1: PlaceMention(_52)
    SourceInfo(regex-lite/src/nfa.rs:618:9-618:41)
  2: _57 = discriminant(_52)
    SourceInfo(regex-lite/src/nfa.rs:618:9-618:41)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:618:9-618:41)
      kind: switchInt(move _57) -> [0: bb44, 1: bb43, otherwise: bb42]
  }
  preds [bb40]
  succs [bb42, bb43, bb44]

bb42
  0: FakeRead(ForMatchedPlace(None), _52)
    SourceInfo(regex-lite/src/nfa.rs:618:9-618:41)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:618:9-618:41)
      kind: unreachable
  }
  preds [bb41]
  succs []

bb43
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:618:40-618:41)
      kind: falseEdge -> [real: bb45, imaginary: bb44]
  }
  preds [bb41]
  succs [bb44, bb45]

bb44
  0: StorageLive(_61)
    SourceInfo(regex-lite/src/nfa.rs:618:9-618:41)
  1: _61 = ((_52 as Continue).0: ())
    SourceInfo(regex-lite/src/nfa.rs:618:9-618:41)
  2: _51 = _61
    SourceInfo(regex-lite/src/nfa.rs:618:9-618:41)
  3: StorageDead(_61)
    SourceInfo(regex-lite/src/nfa.rs:618:40-618:41)
  4: StorageDead(_52)
    SourceInfo(regex-lite/src/nfa.rs:618:41-618:42)
  5: StorageDead(_51)
    SourceInfo(regex-lite/src/nfa.rs:618:41-618:42)
  6: StorageLive(_62)
    SourceInfo(regex-lite/src/nfa.rs:619:9-619:36)
  7: StorageLive(_63)
    SourceInfo(regex-lite/src/nfa.rs:619:9-619:36)
  8: StorageLive(_64)
    SourceInfo(regex-lite/src/nfa.rs:619:9-619:35)
  9: StorageLive(_65)
    SourceInfo(regex-lite/src/nfa.rs:619:9-619:13)
  10: _65 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:619:9-619:13)
  11: StorageLive(_66)
    SourceInfo(regex-lite/src/nfa.rs:619:20-619:29)
  12: _66 = (_3.1: u32)
    SourceInfo(regex-lite/src/nfa.rs:619:20-619:29)
  13: StorageLive(_67)
    SourceInfo(regex-lite/src/nfa.rs:619:31-619:34)
  14: _67 = _42
    SourceInfo(regex-lite/src/nfa.rs:619:31-619:34)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:619:9-619:35)
      kind: _64 = nfa::Compiler::patch(move _65, move _66, move _67) -> [return: bb47, unwind: bb112]
  }
  preds [bb41, bb43]
  succs [bb47, bb112]

bb45
  0: StorageLive(_58)
    SourceInfo(regex-lite/src/nfa.rs:618:40-618:41)
  1: _58 = move ((_52 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:618:40-618:41)
  2: StorageLive(_60)
    SourceInfo(regex-lite/src/nfa.rs:618:40-618:41)
  3: _60 = move _58
    SourceInfo(regex-lite/src/nfa.rs:618:40-618:41)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:618:9-618:41)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _60) -> [return: bb46, unwind: bb112]
  }
  preds [bb43]
  succs [bb46, bb112]

bb46
  0: StorageDead(_60)
    SourceInfo(regex-lite/src/nfa.rs:618:40-618:41)
  1: StorageDead(_58)
    SourceInfo(regex-lite/src/nfa.rs:618:40-618:41)
  2: StorageDead(_52)
    SourceInfo(regex-lite/src/nfa.rs:618:41-618:42)
  3: StorageDead(_51)
    SourceInfo(regex-lite/src/nfa.rs:618:41-618:42)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb101
  }
  preds [bb45]
  succs [bb101]

bb47
  0: StorageDead(_67)
    SourceInfo(regex-lite/src/nfa.rs:619:34-619:35)
  1: StorageDead(_66)
    SourceInfo(regex-lite/src/nfa.rs:619:34-619:35)
  2: StorageDead(_65)
    SourceInfo(regex-lite/src/nfa.rs:619:34-619:35)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:619:9-619:36)
      kind: _63 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _64) -> [return: bb48, unwind: bb112]
  }
  preds [bb44]
  succs [bb48, bb112]

bb48
  0: StorageDead(_64)
    SourceInfo(regex-lite/src/nfa.rs:619:35-619:36)
  1: PlaceMention(_63)
    SourceInfo(regex-lite/src/nfa.rs:619:9-619:36)
  2: _68 = discriminant(_63)
    SourceInfo(regex-lite/src/nfa.rs:619:9-619:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:619:9-619:36)
      kind: switchInt(move _68) -> [0: bb51, 1: bb50, otherwise: bb49]
  }
  preds [bb47]
  succs [bb49, bb50, bb51]

bb49
  0: FakeRead(ForMatchedPlace(None), _63)
    SourceInfo(regex-lite/src/nfa.rs:619:9-619:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:619:9-619:36)
      kind: unreachable
  }
  preds [bb48]
  succs []

bb50
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:619:35-619:36)
      kind: falseEdge -> [real: bb52, imaginary: bb51]
  }
  preds [bb48]
  succs [bb51, bb52]

bb51
  0: StorageLive(_72)
    SourceInfo(regex-lite/src/nfa.rs:619:9-619:36)
  1: _72 = ((_63 as Continue).0: ())
    SourceInfo(regex-lite/src/nfa.rs:619:9-619:36)
  2: _62 = _72
    SourceInfo(regex-lite/src/nfa.rs:619:9-619:36)
  3: StorageDead(_72)
    SourceInfo(regex-lite/src/nfa.rs:619:35-619:36)
  4: StorageDead(_63)
    SourceInfo(regex-lite/src/nfa.rs:619:36-619:37)
  5: StorageDead(_62)
    SourceInfo(regex-lite/src/nfa.rs:619:36-619:37)
  6: StorageLive(_73)
    SourceInfo(regex-lite/src/nfa.rs:620:9-620:42)
  7: StorageLive(_74)
    SourceInfo(regex-lite/src/nfa.rs:620:9-620:42)
  8: StorageLive(_75)
    SourceInfo(regex-lite/src/nfa.rs:620:9-620:41)
  9: StorageLive(_76)
    SourceInfo(regex-lite/src/nfa.rs:620:9-620:13)
  10: _76 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:620:9-620:13)
  11: StorageLive(_77)
    SourceInfo(regex-lite/src/nfa.rs:620:20-620:26)
  12: _77 = _31
    SourceInfo(regex-lite/src/nfa.rs:620:20-620:26)
  13: StorageLive(_78)
    SourceInfo(regex-lite/src/nfa.rs:620:28-620:40)
  14: _78 = (_17.0: u32)
    SourceInfo(regex-lite/src/nfa.rs:620:28-620:40)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:620:9-620:41)
      kind: _75 = nfa::Compiler::patch(move _76, move _77, move _78) -> [return: bb54, unwind: bb112]
  }
  preds [bb48, bb50]
  succs [bb54, bb112]

bb52
  0: StorageLive(_69)
    SourceInfo(regex-lite/src/nfa.rs:619:35-619:36)
  1: _69 = move ((_63 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:619:35-619:36)
  2: StorageLive(_71)
    SourceInfo(regex-lite/src/nfa.rs:619:35-619:36)
  3: _71 = move _69
    SourceInfo(regex-lite/src/nfa.rs:619:35-619:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:619:9-619:36)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _71) -> [return: bb53, unwind: bb112]
  }
  preds [bb50]
  succs [bb53, bb112]

bb53
  0: StorageDead(_71)
    SourceInfo(regex-lite/src/nfa.rs:619:35-619:36)
  1: StorageDead(_69)
    SourceInfo(regex-lite/src/nfa.rs:619:35-619:36)
  2: StorageDead(_63)
    SourceInfo(regex-lite/src/nfa.rs:619:36-619:37)
  3: StorageDead(_62)
    SourceInfo(regex-lite/src/nfa.rs:619:36-619:37)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb101
  }
  preds [bb52]
  succs [bb101]

bb54
  0: StorageDead(_78)
    SourceInfo(regex-lite/src/nfa.rs:620:40-620:41)
  1: StorageDead(_77)
    SourceInfo(regex-lite/src/nfa.rs:620:40-620:41)
  2: StorageDead(_76)
    SourceInfo(regex-lite/src/nfa.rs:620:40-620:41)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:620:9-620:42)
      kind: _74 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _75) -> [return: bb55, unwind: bb112]
  }
  preds [bb51]
  succs [bb55, bb112]

bb55
  0: StorageDead(_75)
    SourceInfo(regex-lite/src/nfa.rs:620:41-620:42)
  1: PlaceMention(_74)
    SourceInfo(regex-lite/src/nfa.rs:620:9-620:42)
  2: _79 = discriminant(_74)
    SourceInfo(regex-lite/src/nfa.rs:620:9-620:42)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:620:9-620:42)
      kind: switchInt(move _79) -> [0: bb58, 1: bb57, otherwise: bb56]
  }
  preds [bb54]
  succs [bb56, bb57, bb58]

bb56
  0: FakeRead(ForMatchedPlace(None), _74)
    SourceInfo(regex-lite/src/nfa.rs:620:9-620:42)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:620:9-620:42)
      kind: unreachable
  }
  preds [bb55]
  succs []

bb57
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:620:41-620:42)
      kind: falseEdge -> [real: bb59, imaginary: bb58]
  }
  preds [bb55]
  succs [bb58, bb59]

bb58
  0: StorageLive(_83)
    SourceInfo(regex-lite/src/nfa.rs:620:9-620:42)
  1: _83 = ((_74 as Continue).0: ())
    SourceInfo(regex-lite/src/nfa.rs:620:9-620:42)
  2: _73 = _83
    SourceInfo(regex-lite/src/nfa.rs:620:9-620:42)
  3: StorageDead(_83)
    SourceInfo(regex-lite/src/nfa.rs:620:41-620:42)
  4: StorageDead(_74)
    SourceInfo(regex-lite/src/nfa.rs:620:42-620:43)
  5: StorageDead(_73)
    SourceInfo(regex-lite/src/nfa.rs:620:42-620:43)
  6: StorageLive(_84)
    SourceInfo(regex-lite/src/nfa.rs:621:9-621:37)
  7: StorageLive(_85)
    SourceInfo(regex-lite/src/nfa.rs:621:9-621:37)
  8: StorageLive(_86)
    SourceInfo(regex-lite/src/nfa.rs:621:9-621:36)
  9: StorageLive(_87)
    SourceInfo(regex-lite/src/nfa.rs:621:9-621:13)
  10: _87 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:621:9-621:13)
  11: StorageLive(_88)
    SourceInfo(regex-lite/src/nfa.rs:621:20-621:30)
  12: _88 = (_17.1: u32)
    SourceInfo(regex-lite/src/nfa.rs:621:20-621:30)
  13: StorageLive(_89)
    SourceInfo(regex-lite/src/nfa.rs:621:32-621:35)
  14: _89 = _42
    SourceInfo(regex-lite/src/nfa.rs:621:32-621:35)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:621:9-621:36)
      kind: _86 = nfa::Compiler::patch(move _87, move _88, move _89) -> [return: bb61, unwind: bb112]
  }
  preds [bb55, bb57]
  succs [bb61, bb112]

bb59
  0: StorageLive(_80)
    SourceInfo(regex-lite/src/nfa.rs:620:41-620:42)
  1: _80 = move ((_74 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:620:41-620:42)
  2: StorageLive(_82)
    SourceInfo(regex-lite/src/nfa.rs:620:41-620:42)
  3: _82 = move _80
    SourceInfo(regex-lite/src/nfa.rs:620:41-620:42)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:620:9-620:42)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _82) -> [return: bb60, unwind: bb112]
  }
  preds [bb57]
  succs [bb60, bb112]

bb60
  0: StorageDead(_82)
    SourceInfo(regex-lite/src/nfa.rs:620:41-620:42)
  1: StorageDead(_80)
    SourceInfo(regex-lite/src/nfa.rs:620:41-620:42)
  2: StorageDead(_74)
    SourceInfo(regex-lite/src/nfa.rs:620:42-620:43)
  3: StorageDead(_73)
    SourceInfo(regex-lite/src/nfa.rs:620:42-620:43)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb101
  }
  preds [bb59]
  succs [bb101]

bb61
  0: StorageDead(_89)
    SourceInfo(regex-lite/src/nfa.rs:621:35-621:36)
  1: StorageDead(_88)
    SourceInfo(regex-lite/src/nfa.rs:621:35-621:36)
  2: StorageDead(_87)
    SourceInfo(regex-lite/src/nfa.rs:621:35-621:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:621:9-621:37)
      kind: _85 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _86) -> [return: bb62, unwind: bb112]
  }
  preds [bb58]
  succs [bb62, bb112]

bb62
  0: StorageDead(_86)
    SourceInfo(regex-lite/src/nfa.rs:621:36-621:37)
  1: PlaceMention(_85)
    SourceInfo(regex-lite/src/nfa.rs:621:9-621:37)
  2: _90 = discriminant(_85)
    SourceInfo(regex-lite/src/nfa.rs:621:9-621:37)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:621:9-621:37)
      kind: switchInt(move _90) -> [0: bb65, 1: bb64, otherwise: bb63]
  }
  preds [bb61]
  succs [bb63, bb64, bb65]

bb63
  0: FakeRead(ForMatchedPlace(None), _85)
    SourceInfo(regex-lite/src/nfa.rs:621:9-621:37)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:621:9-621:37)
      kind: unreachable
  }
  preds [bb62]
  succs []

bb64
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:621:36-621:37)
      kind: falseEdge -> [real: bb66, imaginary: bb65]
  }
  preds [bb62]
  succs [bb65, bb66]

bb65
  0: StorageLive(_94)
    SourceInfo(regex-lite/src/nfa.rs:621:9-621:37)
  1: _94 = ((_85 as Continue).0: ())
    SourceInfo(regex-lite/src/nfa.rs:621:9-621:37)
  2: _84 = _94
    SourceInfo(regex-lite/src/nfa.rs:621:9-621:37)
  3: StorageDead(_94)
    SourceInfo(regex-lite/src/nfa.rs:621:36-621:37)
  4: StorageDead(_85)
    SourceInfo(regex-lite/src/nfa.rs:621:37-621:38)
  5: StorageDead(_84)
    SourceInfo(regex-lite/src/nfa.rs:621:37-621:38)
  6: StorageLive(_95)
    SourceInfo(regex-lite/src/nfa.rs:622:9-626:10)
  7: StorageLive(_96)
    SourceInfo(regex-lite/src/nfa.rs:622:23-622:25)
  8: StorageLive(_97)
    SourceInfo(regex-lite/src/nfa.rs:622:23-622:25)
  9: _97 = move _2
    SourceInfo(regex-lite/src/nfa.rs:622:23-622:25)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:622:23-622:25)
      kind: _96 = <I as core::iter::IntoIterator>::into_iter(move _97) -> [return: bb68, unwind: bb110]
  }
  preds [bb62, bb64]
  succs [bb68, bb110]

bb66
  0: StorageLive(_91)
    SourceInfo(regex-lite/src/nfa.rs:621:36-621:37)
  1: _91 = move ((_85 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:621:36-621:37)
  2: StorageLive(_93)
    SourceInfo(regex-lite/src/nfa.rs:621:36-621:37)
  3: _93 = move _91
    SourceInfo(regex-lite/src/nfa.rs:621:36-621:37)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:621:9-621:37)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _93) -> [return: bb67, unwind: bb112]
  }
  preds [bb64]
  succs [bb67, bb112]

bb67
  0: StorageDead(_93)
    SourceInfo(regex-lite/src/nfa.rs:621:36-621:37)
  1: StorageDead(_91)
    SourceInfo(regex-lite/src/nfa.rs:621:36-621:37)
  2: StorageDead(_85)
    SourceInfo(regex-lite/src/nfa.rs:621:37-621:38)
  3: StorageDead(_84)
    SourceInfo(regex-lite/src/nfa.rs:621:37-621:38)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb101
  }
  preds [bb66]
  succs [bb101]

bb68
  0: StorageDead(_97)
    SourceInfo(regex-lite/src/nfa.rs:622:24-622:25)
  1: PlaceMention(_96)
    SourceInfo(regex-lite/src/nfa.rs:622:23-622:25)
  2: StorageLive(_98)
    SourceInfo(regex-lite/src/nfa.rs:622:23-622:25)
  3: _98 = move _96
    SourceInfo(regex-lite/src/nfa.rs:622:23-622:25)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:622:9-626:10)
      kind: goto -> bb69
  }
  preds [bb65]
  succs [bb69]

bb69
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:622:9-626:10)
      kind: falseUnwind -> [real: bb70, unwind: bb108]
  }
  preds [bb68, bb93]
  succs [bb70, bb108]

bb70
  0: StorageLive(_100)
    SourceInfo(regex-lite/src/nfa.rs:622:23-622:25)
  1: StorageLive(_101)
    SourceInfo(regex-lite/src/nfa.rs:622:23-622:25)
  2: StorageLive(_102)
    SourceInfo(regex-lite/src/nfa.rs:622:23-622:25)
  3: StorageLive(_103)
    SourceInfo(regex-lite/src/nfa.rs:622:23-622:25)
  4: _103 = &mut _98
    SourceInfo(regex-lite/src/nfa.rs:622:23-622:25)
  5: _102 = &mut (*_103)
    SourceInfo(regex-lite/src/nfa.rs:622:23-622:25)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:622:23-622:25)
      kind: _101 = <I as core::iter::Iterator>::next(move _102) -> [return: bb71, unwind: bb108]
  }
  preds [bb69]
  succs [bb71, bb108]

bb71
  0: StorageDead(_102)
    SourceInfo(regex-lite/src/nfa.rs:622:24-622:25)
  1: PlaceMention(_101)
    SourceInfo(regex-lite/src/nfa.rs:622:23-622:25)
  2: _104 = discriminant(_101)
    SourceInfo(regex-lite/src/nfa.rs:622:23-622:25)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:622:23-622:25)
      kind: switchInt(move _104) -> [0: bb73, 1: bb74, otherwise: bb72]
  }
  preds [bb70]
  succs [bb72, bb73, bb74]

bb72
  0: FakeRead(ForMatchedPlace(None), _101)
    SourceInfo(regex-lite/src/nfa.rs:622:23-622:25)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:622:23-622:25)
      kind: unreachable
  }
  preds [bb71]
  succs []

bb73
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:622:9-626:10)
      kind: falseEdge -> [real: bb75, imaginary: bb74]
  }
  preds [bb71]
  succs [bb74, bb75]

bb74
  0: StorageLive(_106)
    SourceInfo(regex-lite/src/nfa.rs:622:13-622:19)
  1: _106 = move ((_101 as Some).0: core::result::Result<nfa::ThompsonRef, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:622:13-622:19)
  2: StorageLive(_107)
    SourceInfo(regex-lite/src/nfa.rs:623:17-623:25)
  3: StorageLive(_108)
    SourceInfo(regex-lite/src/nfa.rs:623:28-623:35)
  4: StorageLive(_109)
    SourceInfo(regex-lite/src/nfa.rs:623:28-623:34)
  5: _109 = move _106
    SourceInfo(regex-lite/src/nfa.rs:623:28-623:34)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:623:28-623:35)
      kind: _108 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::Try>::branch(move _109) -> [return: bb76, unwind: bb108]
  }
  preds [bb71, bb73]
  succs [bb76, bb108]

bb75
  0: _95 = const ()
    SourceInfo(regex-lite/src/nfa.rs:622:9-626:10)
  1: StorageDead(_103)
    SourceInfo(regex-lite/src/nfa.rs:626:9-626:10)
  2: StorageDead(_101)
    SourceInfo(regex-lite/src/nfa.rs:626:9-626:10)
  3: StorageDead(_100)
    SourceInfo(regex-lite/src/nfa.rs:626:9-626:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:626:9-626:10)
      kind: drop(_98) -> [return: bb96, unwind: bb109]
  }
  preds [bb73]
  succs [bb96, bb109]

bb76
  0: StorageDead(_109)
    SourceInfo(regex-lite/src/nfa.rs:623:34-623:35)
  1: PlaceMention(_108)
    SourceInfo(regex-lite/src/nfa.rs:623:28-623:35)
  2: _110 = discriminant(_108)
    SourceInfo(regex-lite/src/nfa.rs:623:28-623:35)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:623:28-623:35)
      kind: switchInt(move _110) -> [0: bb79, 1: bb78, otherwise: bb77]
  }
  preds [bb74]
  succs [bb77, bb78, bb79]

bb77
  0: FakeRead(ForMatchedPlace(None), _108)
    SourceInfo(regex-lite/src/nfa.rs:623:28-623:35)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:623:28-623:35)
      kind: unreachable
  }
  preds [bb76]
  succs []

bb78
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:623:34-623:35)
      kind: falseEdge -> [real: bb80, imaginary: bb79]
  }
  preds [bb76]
  succs [bb79, bb80]

bb79
  0: StorageLive(_114)
    SourceInfo(regex-lite/src/nfa.rs:623:28-623:35)
  1: _114 = ((_108 as Continue).0: nfa::ThompsonRef)
    SourceInfo(regex-lite/src/nfa.rs:623:28-623:35)
  2: _107 = _114
    SourceInfo(regex-lite/src/nfa.rs:623:28-623:35)
  3: StorageDead(_114)
    SourceInfo(regex-lite/src/nfa.rs:623:34-623:35)
  4: FakeRead(ForLet(None), _107)
    SourceInfo(regex-lite/src/nfa.rs:623:17-623:25)
  5: StorageDead(_108)
    SourceInfo(regex-lite/src/nfa.rs:623:35-623:36)
  6: StorageLive(_115)
    SourceInfo(regex-lite/src/nfa.rs:624:13-624:48)
  7: StorageLive(_116)
    SourceInfo(regex-lite/src/nfa.rs:624:13-624:48)
  8: StorageLive(_117)
    SourceInfo(regex-lite/src/nfa.rs:624:13-624:47)
  9: StorageLive(_118)
    SourceInfo(regex-lite/src/nfa.rs:624:13-624:17)
  10: _118 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:624:13-624:17)
  11: StorageLive(_119)
    SourceInfo(regex-lite/src/nfa.rs:624:24-624:30)
  12: _119 = _31
    SourceInfo(regex-lite/src/nfa.rs:624:24-624:30)
  13: StorageLive(_120)
    SourceInfo(regex-lite/src/nfa.rs:624:32-624:46)
  14: _120 = (_107.0: u32)
    SourceInfo(regex-lite/src/nfa.rs:624:32-624:46)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:624:13-624:47)
      kind: _117 = nfa::Compiler::patch(move _118, move _119, move _120) -> [return: bb82, unwind: bb108]
  }
  preds [bb76, bb78]
  succs [bb82, bb108]

bb80
  0: StorageLive(_111)
    SourceInfo(regex-lite/src/nfa.rs:623:34-623:35)
  1: _111 = move ((_108 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:623:34-623:35)
  2: StorageLive(_113)
    SourceInfo(regex-lite/src/nfa.rs:623:34-623:35)
  3: _113 = move _111
    SourceInfo(regex-lite/src/nfa.rs:623:34-623:35)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:623:28-623:35)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _113) -> [return: bb81, unwind: bb108]
  }
  preds [bb78]
  succs [bb81, bb108]

bb81
  0: StorageDead(_113)
    SourceInfo(regex-lite/src/nfa.rs:623:34-623:35)
  1: StorageDead(_111)
    SourceInfo(regex-lite/src/nfa.rs:623:34-623:35)
  2: StorageDead(_108)
    SourceInfo(regex-lite/src/nfa.rs:623:35-623:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb98
  }
  preds [bb80]
  succs [bb98]

bb82
  0: StorageDead(_120)
    SourceInfo(regex-lite/src/nfa.rs:624:46-624:47)
  1: StorageDead(_119)
    SourceInfo(regex-lite/src/nfa.rs:624:46-624:47)
  2: StorageDead(_118)
    SourceInfo(regex-lite/src/nfa.rs:624:46-624:47)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:624:13-624:48)
      kind: _116 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _117) -> [return: bb83, unwind: bb108]
  }
  preds [bb79]
  succs [bb83, bb108]

bb83
  0: StorageDead(_117)
    SourceInfo(regex-lite/src/nfa.rs:624:47-624:48)
  1: PlaceMention(_116)
    SourceInfo(regex-lite/src/nfa.rs:624:13-624:48)
  2: _121 = discriminant(_116)
    SourceInfo(regex-lite/src/nfa.rs:624:13-624:48)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:624:13-624:48)
      kind: switchInt(move _121) -> [0: bb86, 1: bb85, otherwise: bb84]
  }
  preds [bb82]
  succs [bb84, bb85, bb86]

bb84
  0: FakeRead(ForMatchedPlace(None), _116)
    SourceInfo(regex-lite/src/nfa.rs:624:13-624:48)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:624:13-624:48)
      kind: unreachable
  }
  preds [bb83]
  succs []

bb85
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:624:47-624:48)
      kind: falseEdge -> [real: bb87, imaginary: bb86]
  }
  preds [bb83]
  succs [bb86, bb87]

bb86
  0: StorageLive(_125)
    SourceInfo(regex-lite/src/nfa.rs:624:13-624:48)
  1: _125 = ((_116 as Continue).0: ())
    SourceInfo(regex-lite/src/nfa.rs:624:13-624:48)
  2: _115 = _125
    SourceInfo(regex-lite/src/nfa.rs:624:13-624:48)
  3: StorageDead(_125)
    SourceInfo(regex-lite/src/nfa.rs:624:47-624:48)
  4: StorageDead(_116)
    SourceInfo(regex-lite/src/nfa.rs:624:48-624:49)
  5: StorageDead(_115)
    SourceInfo(regex-lite/src/nfa.rs:624:48-624:49)
  6: StorageLive(_126)
    SourceInfo(regex-lite/src/nfa.rs:625:13-625:43)
  7: StorageLive(_127)
    SourceInfo(regex-lite/src/nfa.rs:625:13-625:43)
  8: StorageLive(_128)
    SourceInfo(regex-lite/src/nfa.rs:625:13-625:42)
  9: StorageLive(_129)
    SourceInfo(regex-lite/src/nfa.rs:625:13-625:17)
  10: _129 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:625:13-625:17)
  11: StorageLive(_130)
    SourceInfo(regex-lite/src/nfa.rs:625:24-625:36)
  12: _130 = (_107.1: u32)
    SourceInfo(regex-lite/src/nfa.rs:625:24-625:36)
  13: StorageLive(_131)
    SourceInfo(regex-lite/src/nfa.rs:625:38-625:41)
  14: _131 = _42
    SourceInfo(regex-lite/src/nfa.rs:625:38-625:41)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:625:13-625:42)
      kind: _128 = nfa::Compiler::patch(move _129, move _130, move _131) -> [return: bb89, unwind: bb108]
  }
  preds [bb83, bb85]
  succs [bb89, bb108]

bb87
  0: StorageLive(_122)
    SourceInfo(regex-lite/src/nfa.rs:624:47-624:48)
  1: _122 = move ((_116 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:624:47-624:48)
  2: StorageLive(_124)
    SourceInfo(regex-lite/src/nfa.rs:624:47-624:48)
  3: _124 = move _122
    SourceInfo(regex-lite/src/nfa.rs:624:47-624:48)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:624:13-624:48)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _124) -> [return: bb88, unwind: bb108]
  }
  preds [bb85]
  succs [bb88, bb108]

bb88
  0: StorageDead(_124)
    SourceInfo(regex-lite/src/nfa.rs:624:47-624:48)
  1: StorageDead(_122)
    SourceInfo(regex-lite/src/nfa.rs:624:47-624:48)
  2: StorageDead(_116)
    SourceInfo(regex-lite/src/nfa.rs:624:48-624:49)
  3: StorageDead(_115)
    SourceInfo(regex-lite/src/nfa.rs:624:48-624:49)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb98
  }
  preds [bb87]
  succs [bb98]

bb89
  0: StorageDead(_131)
    SourceInfo(regex-lite/src/nfa.rs:625:41-625:42)
  1: StorageDead(_130)
    SourceInfo(regex-lite/src/nfa.rs:625:41-625:42)
  2: StorageDead(_129)
    SourceInfo(regex-lite/src/nfa.rs:625:41-625:42)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:625:13-625:43)
      kind: _127 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _128) -> [return: bb90, unwind: bb108]
  }
  preds [bb86]
  succs [bb90, bb108]

bb90
  0: StorageDead(_128)
    SourceInfo(regex-lite/src/nfa.rs:625:42-625:43)
  1: PlaceMention(_127)
    SourceInfo(regex-lite/src/nfa.rs:625:13-625:43)
  2: _132 = discriminant(_127)
    SourceInfo(regex-lite/src/nfa.rs:625:13-625:43)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:625:13-625:43)
      kind: switchInt(move _132) -> [0: bb93, 1: bb92, otherwise: bb91]
  }
  preds [bb89]
  succs [bb91, bb92, bb93]

bb91
  0: FakeRead(ForMatchedPlace(None), _127)
    SourceInfo(regex-lite/src/nfa.rs:625:13-625:43)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:625:13-625:43)
      kind: unreachable
  }
  preds [bb90]
  succs []

bb92
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:625:42-625:43)
      kind: falseEdge -> [real: bb94, imaginary: bb93]
  }
  preds [bb90]
  succs [bb93, bb94]

bb93
  0: StorageLive(_136)
    SourceInfo(regex-lite/src/nfa.rs:625:13-625:43)
  1: _136 = ((_127 as Continue).0: ())
    SourceInfo(regex-lite/src/nfa.rs:625:13-625:43)
  2: _126 = _136
    SourceInfo(regex-lite/src/nfa.rs:625:13-625:43)
  3: StorageDead(_136)
    SourceInfo(regex-lite/src/nfa.rs:625:42-625:43)
  4: StorageDead(_127)
    SourceInfo(regex-lite/src/nfa.rs:625:43-625:44)
  5: StorageDead(_126)
    SourceInfo(regex-lite/src/nfa.rs:625:43-625:44)
  6: _100 = const ()
    SourceInfo(regex-lite/src/nfa.rs:622:26-626:10)
  7: StorageDead(_107)
    SourceInfo(regex-lite/src/nfa.rs:626:9-626:10)
  8: StorageDead(_106)
    SourceInfo(regex-lite/src/nfa.rs:626:9-626:10)
  9: StorageDead(_103)
    SourceInfo(regex-lite/src/nfa.rs:626:9-626:10)
  10: StorageDead(_101)
    SourceInfo(regex-lite/src/nfa.rs:626:9-626:10)
  11: StorageDead(_100)
    SourceInfo(regex-lite/src/nfa.rs:626:9-626:10)
  12: _99 = const ()
    SourceInfo(regex-lite/src/nfa.rs:622:9-626:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:622:9-626:10)
      kind: goto -> bb69
  }
  preds [bb90, bb92]
  succs [bb69]

bb94
  0: StorageLive(_133)
    SourceInfo(regex-lite/src/nfa.rs:625:42-625:43)
  1: _133 = move ((_127 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:625:42-625:43)
  2: StorageLive(_135)
    SourceInfo(regex-lite/src/nfa.rs:625:42-625:43)
  3: _135 = move _133
    SourceInfo(regex-lite/src/nfa.rs:625:42-625:43)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:625:13-625:43)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _135) -> [return: bb95, unwind: bb108]
  }
  preds [bb92]
  succs [bb95, bb108]

bb95
  0: StorageDead(_135)
    SourceInfo(regex-lite/src/nfa.rs:625:42-625:43)
  1: StorageDead(_133)
    SourceInfo(regex-lite/src/nfa.rs:625:42-625:43)
  2: StorageDead(_127)
    SourceInfo(regex-lite/src/nfa.rs:625:43-625:44)
  3: StorageDead(_126)
    SourceInfo(regex-lite/src/nfa.rs:625:43-625:44)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb98
  }
  preds [bb94]
  succs [bb98]

bb96
  0: StorageDead(_98)
    SourceInfo(regex-lite/src/nfa.rs:626:9-626:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:626:9-626:10)
      kind: drop(_96) -> [return: bb97, unwind: bb112]
  }
  preds [bb75]
  succs [bb97, bb112]

bb97
  0: StorageDead(_96)
    SourceInfo(regex-lite/src/nfa.rs:626:9-626:10)
  1: StorageDead(_95)
    SourceInfo(regex-lite/src/nfa.rs:626:9-626:10)
  2: StorageLive(_137)
    SourceInfo(regex-lite/src/nfa.rs:627:12-627:46)
  3: StorageLive(_138)
    SourceInfo(regex-lite/src/nfa.rs:627:33-627:39)
  4: _138 = _31
    SourceInfo(regex-lite/src/nfa.rs:627:33-627:39)
  5: StorageLive(_139)
    SourceInfo(regex-lite/src/nfa.rs:627:41-627:44)
  6: _139 = _42
    SourceInfo(regex-lite/src/nfa.rs:627:41-627:44)
  7: _137 = nfa::ThompsonRef { start: move _138, end: move _139 }
    SourceInfo(regex-lite/src/nfa.rs:627:12-627:46)
  8: StorageDead(_139)
    SourceInfo(regex-lite/src/nfa.rs:627:45-627:46)
  9: StorageDead(_138)
    SourceInfo(regex-lite/src/nfa.rs:627:45-627:46)
  10: _0 = core::result::Result::<nfa::ThompsonRef, error::Error>::Ok(move _137)
    SourceInfo(regex-lite/src/nfa.rs:627:9-627:47)
  11: StorageDead(_137)
    SourceInfo(regex-lite/src/nfa.rs:627:46-627:47)
  12: StorageDead(_42)
    SourceInfo(regex-lite/src/nfa.rs:628:5-628:6)
  13: StorageDead(_31)
    SourceInfo(regex-lite/src/nfa.rs:628:5-628:6)
  14: StorageDead(_17)
    SourceInfo(regex-lite/src/nfa.rs:628:5-628:6)
  15: StorageDead(_3)
    SourceInfo(regex-lite/src/nfa.rs:628:5-628:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:628:5-628:6)
      kind: drop(_2) -> [return: bb107, unwind: bb113]
  }
  preds [bb96]
  succs [bb107, bb113]

bb98
  0: StorageDead(_107)
    SourceInfo(regex-lite/src/nfa.rs:626:9-626:10)
  1: StorageDead(_106)
    SourceInfo(regex-lite/src/nfa.rs:626:9-626:10)
  2: StorageDead(_103)
    SourceInfo(regex-lite/src/nfa.rs:626:9-626:10)
  3: StorageDead(_101)
    SourceInfo(regex-lite/src/nfa.rs:626:9-626:10)
  4: StorageDead(_100)
    SourceInfo(regex-lite/src/nfa.rs:626:9-626:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:626:9-626:10)
      kind: drop(_98) -> [return: bb99, unwind: bb109]
  }
  preds [bb81, bb88, bb95]
  succs [bb99, bb109]

bb99
  0: StorageDead(_98)
    SourceInfo(regex-lite/src/nfa.rs:626:9-626:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:626:9-626:10)
      kind: drop(_96) -> [return: bb100, unwind: bb112]
  }
  preds [bb98]
  succs [bb100, bb112]

bb100
  0: StorageDead(_96)
    SourceInfo(regex-lite/src/nfa.rs:626:9-626:10)
  1: StorageDead(_95)
    SourceInfo(regex-lite/src/nfa.rs:626:9-626:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb101
  }
  preds [bb99]
  succs [bb101]

bb101
  0: StorageDead(_42)
    SourceInfo(regex-lite/src/nfa.rs:628:5-628:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb102
  }
  preds [bb39, bb46, bb53, bb60, bb67, bb100]
  succs [bb102]

bb102
  0: StorageDead(_31)
    SourceInfo(regex-lite/src/nfa.rs:628:5-628:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb104
  }
  preds [bb32, bb101]
  succs [bb104]

bb103
  0: StorageDead(_18)
    SourceInfo(regex-lite/src/nfa.rs:613:10-613:11)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb104
  }
  preds [bb17, bb23]
  succs [bb104]

bb104
  0: StorageDead(_17)
    SourceInfo(regex-lite/src/nfa.rs:628:5-628:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb106
  }
  preds [bb102, bb103]
  succs [bb106]

bb105
  0: StorageDead(_4)
    SourceInfo(regex-lite/src/nfa.rs:609:10-609:11)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb106
  }
  preds [bb6, bb12]
  succs [bb106]

bb106
  0: StorageDead(_3)
    SourceInfo(regex-lite/src/nfa.rs:628:5-628:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:628:5-628:6)
      kind: drop(_2) -> [return: bb107, unwind: bb113]
  }
  preds [bb104, bb105]
  succs [bb107, bb113]

bb107
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:628:6-628:6)
      kind: return
  }
  preds [bb97, bb106]
  succs []

bb108
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:626:9-626:10)
      kind: drop(_98) -> [return: bb109, unwind terminate(cleanup)]
  }
  preds [bb69, bb70, bb74, bb79, bb80, bb82, bb86, bb87, bb89, bb94]
  succs [bb109]

bb109
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:626:9-626:10)
      kind: drop(_96) -> [return: bb112, unwind terminate(cleanup)]
  }
  preds [bb75, bb98, bb108]
  succs [bb112]

bb110
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:622:24-622:25)
      kind: drop(_97) -> [return: bb112, unwind terminate(cleanup)]
  }
  preds [bb65]
  succs [bb112]

bb111
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:616:71-616:72)
      kind: drop(_35) -> [return: bb112, unwind terminate(cleanup)]
  }
  preds [bb24, bb25]
  succs [bb112]

bb112
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:628:5-628:6)
      kind: drop(_2) -> [return: bb113, unwind terminate(cleanup)]
  }
  preds [bb0, bb4, bb5, bb10, bb11, bb16, bb21, bb22, bb26, bb30, bb31, bb33, bb37, bb38, bb40, bb44, bb45, bb47, bb51, bb52, bb54, bb58, bb59, bb61, bb66, bb96, bb99, bb109, bb110, bb111]
  succs [bb113]

bb113
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:602:5-628:6)
      kind: resume
  }
  preds [bb97, bb106, bb112]
  succs []

