bb0
  0: StorageLive(_3)
    SourceInfo(regex-lite/src/nfa.rs:366:15-366:33)
  1: StorageLive(_4)
    SourceInfo(regex-lite/src/nfa.rs:366:16-366:23)
  2: _4 = ((*_2).0: u32)
    SourceInfo(regex-lite/src/nfa.rs:366:16-366:23)
  3: StorageLive(_5)
    SourceInfo(regex-lite/src/nfa.rs:366:25-366:32)
  4: _5 = ((*_2).1: core::option::Option<u32>)
    SourceInfo(regex-lite/src/nfa.rs:366:25-366:32)
  5: _3 = (move _4, move _5)
    SourceInfo(regex-lite/src/nfa.rs:366:15-366:33)
  6: StorageDead(_5)
    SourceInfo(regex-lite/src/nfa.rs:366:32-366:33)
  7: StorageDead(_4)
    SourceInfo(regex-lite/src/nfa.rs:366:32-366:33)
  8: PlaceMention(_3)
    SourceInfo(regex-lite/src/nfa.rs:366:15-366:33)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:366:9-366:33)
      kind: switchInt((_3.0: u32)) -> [0: bb2, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: _10 = discriminant((_3.1: core::option::Option<u32>))
    SourceInfo(regex-lite/src/nfa.rs:366:15-366:33)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:366:9-366:33)
      kind: switchInt(move _10) -> [0: bb6, 1: bb7, otherwise: bb5]
  }
  preds [bb0, bb2, bb3, bb4]
  succs [bb5, bb6, bb7]

bb2
  0: _9 = discriminant((_3.1: core::option::Option<u32>))
    SourceInfo(regex-lite/src/nfa.rs:366:15-366:33)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:366:9-366:33)
      kind: switchInt(move _9) -> [1: bb3, otherwise: bb1]
  }
  preds [bb0]
  succs [bb1, bb3]

bb3
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:366:9-366:33)
      kind: switchInt((((_3.1: core::option::Option<u32>) as Some).0: u32)) -> [1: bb4, otherwise: bb1]
  }
  preds [bb2]
  succs [bb1, bb4]

bb4
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:367:13-367:25)
      kind: falseEdge -> [real: bb9, imaginary: bb1]
  }
  preds [bb3]
  succs [bb1, bb9]

bb5
  0: FakeRead(ForMatchedPlace(None), _3)
    SourceInfo(regex-lite/src/nfa.rs:366:15-366:33)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:366:15-366:33)
      kind: unreachable
  }
  preds [bb1]
  succs []

bb6
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:368:13-368:24)
      kind: falseEdge -> [real: bb11, imaginary: bb7]
  }
  preds [bb1]
  succs [bb7, bb11]

bb7
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:369:13-369:29)
      kind: falseEdge -> [real: bb13, imaginary: bb8]
  }
  preds [bb1, bb6]
  succs [bb8, bb13]

bb8
  0: StorageLive(_32)
    SourceInfo(regex-lite/src/nfa.rs:370:14-370:17)
  1: _32 = (_3.0: u32)
    SourceInfo(regex-lite/src/nfa.rs:370:14-370:17)
  2: StorageLive(_33)
    SourceInfo(regex-lite/src/nfa.rs:370:24-370:27)
  3: _33 = (((_3.1: core::option::Option<u32>) as Some).0: u32)
    SourceInfo(regex-lite/src/nfa.rs:370:24-370:27)
  4: StorageLive(_34)
    SourceInfo(regex-lite/src/nfa.rs:370:33-370:37)
  5: _34 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:370:33-370:37)
  6: StorageLive(_35)
    SourceInfo(regex-lite/src/nfa.rs:370:48-370:56)
  7: StorageLive(_36)
    SourceInfo(regex-lite/src/nfa.rs:370:48-370:56)
  8: _36 = &((*_2).3: alloc::boxed::Box<hir::Hir>)
    SourceInfo(regex-lite/src/nfa.rs:370:48-370:56)
  9: _35 = &(*(*_36))
    SourceInfo(regex-lite/src/nfa.rs:370:48-370:56)
  10: StorageLive(_37)
    SourceInfo(regex-lite/src/nfa.rs:370:58-370:68)
  11: _37 = ((*_2).2: bool)
    SourceInfo(regex-lite/src/nfa.rs:370:58-370:68)
  12: StorageLive(_38)
    SourceInfo(regex-lite/src/nfa.rs:370:70-370:73)
  13: _38 = _32
    SourceInfo(regex-lite/src/nfa.rs:370:70-370:73)
  14: StorageLive(_39)
    SourceInfo(regex-lite/src/nfa.rs:370:75-370:78)
  15: _39 = _33
    SourceInfo(regex-lite/src/nfa.rs:370:75-370:78)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:370:33-370:79)
      kind: _0 = nfa::Compiler::c_bounded(move _34, move _35, move _37, move _38, move _39) -> [return: bb17, unwind: bb19]
  }
  preds [bb7, bb15]
  succs [bb17, bb19]

bb9
  0: StorageLive(_11)
    SourceInfo(regex-lite/src/nfa.rs:367:29-367:33)
  1: _11 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:367:29-367:33)
  2: StorageLive(_12)
    SourceInfo(regex-lite/src/nfa.rs:367:48-367:56)
  3: StorageLive(_13)
    SourceInfo(regex-lite/src/nfa.rs:367:48-367:56)
  4: _13 = &((*_2).3: alloc::boxed::Box<hir::Hir>)
    SourceInfo(regex-lite/src/nfa.rs:367:48-367:56)
  5: _12 = &(*(*_13))
    SourceInfo(regex-lite/src/nfa.rs:367:48-367:56)
  6: StorageLive(_14)
    SourceInfo(regex-lite/src/nfa.rs:367:58-367:68)
  7: _14 = ((*_2).2: bool)
    SourceInfo(regex-lite/src/nfa.rs:367:58-367:68)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:367:29-367:69)
      kind: _0 = nfa::Compiler::c_zero_or_one(move _11, move _12, move _14) -> [return: bb10, unwind: bb19]
  }
  preds [bb4]
  succs [bb10, bb19]

bb10
  0: StorageDead(_14)
    SourceInfo(regex-lite/src/nfa.rs:367:68-367:69)
  1: StorageDead(_12)
    SourceInfo(regex-lite/src/nfa.rs:367:68-367:69)
  2: StorageDead(_11)
    SourceInfo(regex-lite/src/nfa.rs:367:68-367:69)
  3: StorageDead(_13)
    SourceInfo(regex-lite/src/nfa.rs:367:68-367:69)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:367:68-367:69)
      kind: goto -> bb18
  }
  preds [bb9]
  succs [bb18]

bb11
  0: StorageLive(_15)
    SourceInfo(regex-lite/src/nfa.rs:368:14-368:17)
  1: _15 = (_3.0: u32)
    SourceInfo(regex-lite/src/nfa.rs:368:14-368:17)
  2: StorageLive(_16)
    SourceInfo(regex-lite/src/nfa.rs:368:28-368:32)
  3: _16 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:368:28-368:32)
  4: StorageLive(_17)
    SourceInfo(regex-lite/src/nfa.rs:368:44-368:52)
  5: StorageLive(_18)
    SourceInfo(regex-lite/src/nfa.rs:368:44-368:52)
  6: _18 = &((*_2).3: alloc::boxed::Box<hir::Hir>)
    SourceInfo(regex-lite/src/nfa.rs:368:44-368:52)
  7: _17 = &(*(*_18))
    SourceInfo(regex-lite/src/nfa.rs:368:44-368:52)
  8: StorageLive(_19)
    SourceInfo(regex-lite/src/nfa.rs:368:54-368:64)
  9: _19 = ((*_2).2: bool)
    SourceInfo(regex-lite/src/nfa.rs:368:54-368:64)
  10: StorageLive(_20)
    SourceInfo(regex-lite/src/nfa.rs:368:66-368:69)
  11: _20 = _15
    SourceInfo(regex-lite/src/nfa.rs:368:66-368:69)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:368:28-368:70)
      kind: _0 = nfa::Compiler::c_at_least(move _16, move _17, move _19, move _20) -> [return: bb12, unwind: bb19]
  }
  preds [bb6]
  succs [bb12, bb19]

bb12
  0: StorageDead(_20)
    SourceInfo(regex-lite/src/nfa.rs:368:69-368:70)
  1: StorageDead(_19)
    SourceInfo(regex-lite/src/nfa.rs:368:69-368:70)
  2: StorageDead(_17)
    SourceInfo(regex-lite/src/nfa.rs:368:69-368:70)
  3: StorageDead(_16)
    SourceInfo(regex-lite/src/nfa.rs:368:69-368:70)
  4: StorageDead(_18)
    SourceInfo(regex-lite/src/nfa.rs:368:69-368:70)
  5: StorageDead(_15)
    SourceInfo(regex-lite/src/nfa.rs:368:69-368:70)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:368:69-368:70)
      kind: goto -> bb18
  }
  preds [bb11]
  succs [bb18]

bb13
  0: StorageLive(_22)
    SourceInfo(regex-lite/src/nfa.rs:369:14-369:17)
  1: _22 = &(_3.0: u32)
    SourceInfo(regex-lite/src/nfa.rs:369:14-369:17)
  2: StorageLive(_24)
    SourceInfo(regex-lite/src/nfa.rs:369:24-369:27)
  3: _24 = &(((_3.1: core::option::Option<u32>) as Some).0: u32)
    SourceInfo(regex-lite/src/nfa.rs:369:24-369:27)
  4: _6 = &fake shallow (_3.0: u32)
    SourceInfo(regex-lite/src/nfa.rs:366:15-366:33)
  5: _7 = &fake shallow (_3.1: core::option::Option<u32>)
    SourceInfo(regex-lite/src/nfa.rs:366:15-366:33)
  6: _8 = &fake shallow (((_3.1: core::option::Option<u32>) as Some).0: u32)
    SourceInfo(regex-lite/src/nfa.rs:366:15-366:33)
  7: StorageLive(_25)
    SourceInfo(regex-lite/src/nfa.rs:369:33-369:43)
  8: StorageLive(_26)
    SourceInfo(regex-lite/src/nfa.rs:369:33-369:36)
  9: _26 = (*_22)
    SourceInfo(regex-lite/src/nfa.rs:369:33-369:36)
  10: StorageLive(_27)
    SourceInfo(regex-lite/src/nfa.rs:369:40-369:43)
  11: _27 = (*_24)
    SourceInfo(regex-lite/src/nfa.rs:369:40-369:43)
  12: _25 = Eq(move _26, move _27)
    SourceInfo(regex-lite/src/nfa.rs:369:33-369:43)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:369:33-369:43)
      kind: switchInt(move _25) -> [0: bb15, otherwise: bb14]
  }
  preds [bb7]
  succs [bb14, bb15]

bb14
  0: StorageDead(_27)
    SourceInfo(regex-lite/src/nfa.rs:369:42-369:43)
  1: StorageDead(_26)
    SourceInfo(regex-lite/src/nfa.rs:369:42-369:43)
  2: StorageDead(_25)
    SourceInfo(regex-lite/src/nfa.rs:369:42-369:43)
  3: FakeRead(ForMatchGuard, _6)
    SourceInfo(regex-lite/src/nfa.rs:369:42-369:43)
  4: FakeRead(ForMatchGuard, _7)
    SourceInfo(regex-lite/src/nfa.rs:369:42-369:43)
  5: FakeRead(ForMatchGuard, _8)
    SourceInfo(regex-lite/src/nfa.rs:369:42-369:43)
  6: FakeRead(ForGuardBinding, _22)
    SourceInfo(regex-lite/src/nfa.rs:369:42-369:43)
  7: FakeRead(ForGuardBinding, _24)
    SourceInfo(regex-lite/src/nfa.rs:369:42-369:43)
  8: StorageLive(_21)
    SourceInfo(regex-lite/src/nfa.rs:369:14-369:17)
  9: _21 = (_3.0: u32)
    SourceInfo(regex-lite/src/nfa.rs:369:14-369:17)
  10: StorageLive(_23)
    SourceInfo(regex-lite/src/nfa.rs:369:24-369:27)
  11: _23 = (((_3.1: core::option::Option<u32>) as Some).0: u32)
    SourceInfo(regex-lite/src/nfa.rs:369:24-369:27)
  12: StorageLive(_28)
    SourceInfo(regex-lite/src/nfa.rs:369:47-369:51)
  13: _28 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:369:47-369:51)
  14: StorageLive(_29)
    SourceInfo(regex-lite/src/nfa.rs:369:62-369:70)
  15: StorageLive(_30)
    SourceInfo(regex-lite/src/nfa.rs:369:62-369:70)
  16: _30 = &((*_2).3: alloc::boxed::Box<hir::Hir>)
    SourceInfo(regex-lite/src/nfa.rs:369:62-369:70)
  17: _29 = &(*(*_30))
    SourceInfo(regex-lite/src/nfa.rs:369:62-369:70)
  18: StorageLive(_31)
    SourceInfo(regex-lite/src/nfa.rs:369:72-369:75)
  19: _31 = _21
    SourceInfo(regex-lite/src/nfa.rs:369:72-369:75)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:369:47-369:76)
      kind: _0 = nfa::Compiler::c_exactly(move _28, move _29, move _31) -> [return: bb16, unwind: bb19]
  }
  preds [bb13]
  succs [bb16, bb19]

bb15
  0: StorageDead(_27)
    SourceInfo(regex-lite/src/nfa.rs:369:42-369:43)
  1: StorageDead(_26)
    SourceInfo(regex-lite/src/nfa.rs:369:42-369:43)
  2: StorageDead(_25)
    SourceInfo(regex-lite/src/nfa.rs:369:42-369:43)
  3: StorageDead(_24)
    SourceInfo(regex-lite/src/nfa.rs:369:75-369:76)
  4: StorageDead(_22)
    SourceInfo(regex-lite/src/nfa.rs:369:75-369:76)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:369:33-369:43)
      kind: goto -> bb8
  }
  preds [bb13]
  succs [bb8]

bb16
  0: StorageDead(_31)
    SourceInfo(regex-lite/src/nfa.rs:369:75-369:76)
  1: StorageDead(_29)
    SourceInfo(regex-lite/src/nfa.rs:369:75-369:76)
  2: StorageDead(_28)
    SourceInfo(regex-lite/src/nfa.rs:369:75-369:76)
  3: StorageDead(_30)
    SourceInfo(regex-lite/src/nfa.rs:369:75-369:76)
  4: StorageDead(_23)
    SourceInfo(regex-lite/src/nfa.rs:369:75-369:76)
  5: StorageDead(_21)
    SourceInfo(regex-lite/src/nfa.rs:369:75-369:76)
  6: StorageDead(_24)
    SourceInfo(regex-lite/src/nfa.rs:369:75-369:76)
  7: StorageDead(_22)
    SourceInfo(regex-lite/src/nfa.rs:369:75-369:76)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:369:75-369:76)
      kind: goto -> bb18
  }
  preds [bb14]
  succs [bb18]

bb17
  0: StorageDead(_39)
    SourceInfo(regex-lite/src/nfa.rs:370:78-370:79)
  1: StorageDead(_38)
    SourceInfo(regex-lite/src/nfa.rs:370:78-370:79)
  2: StorageDead(_37)
    SourceInfo(regex-lite/src/nfa.rs:370:78-370:79)
  3: StorageDead(_35)
    SourceInfo(regex-lite/src/nfa.rs:370:78-370:79)
  4: StorageDead(_34)
    SourceInfo(regex-lite/src/nfa.rs:370:78-370:79)
  5: StorageDead(_36)
    SourceInfo(regex-lite/src/nfa.rs:370:78-370:79)
  6: StorageDead(_33)
    SourceInfo(regex-lite/src/nfa.rs:370:78-370:79)
  7: StorageDead(_32)
    SourceInfo(regex-lite/src/nfa.rs:370:78-370:79)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:370:78-370:79)
      kind: goto -> bb18
  }
  preds [bb8]
  succs [bb18]

bb18
  0: StorageDead(_3)
    SourceInfo(regex-lite/src/nfa.rs:372:5-372:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:372:6-372:6)
      kind: return
  }
  preds [bb10, bb12, bb16, bb17]
  succs []

bb19
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:362:5-372:6)
      kind: resume
  }
  preds [bb8, bb9, bb11, bb14]
  succs []

