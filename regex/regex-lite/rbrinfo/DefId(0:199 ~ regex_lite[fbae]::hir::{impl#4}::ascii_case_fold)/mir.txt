bb0
  0: StorageLive(_2)
    SourceInfo(regex-lite/src/hir/mod.rs:529:9-536:10)
  1: StorageLive(_3)
    SourceInfo(regex-lite/src/hir/mod.rs:529:13-529:78)
  2: StorageLive(_4)
    SourceInfo(regex-lite/src/hir/mod.rs:529:13-529:50)
  3: StorageLive(_5)
    SourceInfo(regex-lite/src/hir/mod.rs:529:13-529:50)
  4: _5 = hir::ClassRange { start: const 'a', end: const 'z' }
    SourceInfo(regex-lite/src/hir/mod.rs:529:13-529:50)
  5: _4 = &_5
    SourceInfo(regex-lite/src/hir/mod.rs:529:13-529:50)
  6: StorageLive(_6)
    SourceInfo(regex-lite/src/hir/mod.rs:529:73-529:77)
  7: _6 = &(*_1)
    SourceInfo(regex-lite/src/hir/mod.rs:529:73-529:77)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:529:13-529:78)
      kind: _3 = hir::ClassRange::is_intersection_empty(move _4, move _6) -> [return: bb1, unwind: bb28]
  }
  preds []
  succs [bb1, bb28]

bb1
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:529:13-529:78)
      kind: switchInt(move _3) -> [0: bb3, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_6)
    SourceInfo(regex-lite/src/hir/mod.rs:529:77-529:78)
  1: StorageDead(_4)
    SourceInfo(regex-lite/src/hir/mod.rs:529:77-529:78)
  2: StorageDead(_5)
    SourceInfo(regex-lite/src/hir/mod.rs:529:77-529:78)
  3: _2 = const ()
    SourceInfo(regex-lite/src/hir/mod.rs:536:10-536:10)
  4: StorageDead(_3)
    SourceInfo(regex-lite/src/hir/mod.rs:536:9-536:10)
  5: StorageDead(_2)
    SourceInfo(regex-lite/src/hir/mod.rs:536:9-536:10)
  6: StorageLive(_25)
    SourceInfo(regex-lite/src/hir/mod.rs:537:9-544:10)
  7: StorageLive(_26)
    SourceInfo(regex-lite/src/hir/mod.rs:537:13-537:78)
  8: StorageLive(_27)
    SourceInfo(regex-lite/src/hir/mod.rs:537:13-537:50)
  9: StorageLive(_28)
    SourceInfo(regex-lite/src/hir/mod.rs:537:13-537:50)
  10: _28 = hir::ClassRange { start: const 'A', end: const 'Z' }
    SourceInfo(regex-lite/src/hir/mod.rs:537:13-537:50)
  11: _27 = &_28
    SourceInfo(regex-lite/src/hir/mod.rs:537:13-537:50)
  12: StorageLive(_29)
    SourceInfo(regex-lite/src/hir/mod.rs:537:73-537:77)
  13: _29 = &(*_1)
    SourceInfo(regex-lite/src/hir/mod.rs:537:73-537:77)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:537:13-537:78)
      kind: _26 = hir::ClassRange::is_intersection_empty(move _27, move _29) -> [return: bb14, unwind: bb28]
  }
  preds [bb1]
  succs [bb14, bb28]

bb3
  0: StorageDead(_6)
    SourceInfo(regex-lite/src/hir/mod.rs:529:77-529:78)
  1: StorageDead(_4)
    SourceInfo(regex-lite/src/hir/mod.rs:529:77-529:78)
  2: StorageDead(_5)
    SourceInfo(regex-lite/src/hir/mod.rs:529:77-529:78)
  3: StorageLive(_8)
    SourceInfo(regex-lite/src/hir/mod.rs:530:17-530:22)
  4: StorageLive(_9)
    SourceInfo(regex-lite/src/hir/mod.rs:530:40-530:50)
  5: _9 = ((*_1).0: char)
    SourceInfo(regex-lite/src/hir/mod.rs:530:40-530:50)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:530:25-530:56)
      kind: _8 = core::cmp::max::<char>(move _9, const 'a') -> [return: bb4, unwind: bb28]
  }
  preds [bb1]
  succs [bb4, bb28]

bb4
  0: StorageDead(_9)
    SourceInfo(regex-lite/src/hir/mod.rs:530:55-530:56)
  1: FakeRead(ForLet(None), _8)
    SourceInfo(regex-lite/src/hir/mod.rs:530:17-530:22)
  2: StorageLive(_10)
    SourceInfo(regex-lite/src/hir/mod.rs:531:17-531:20)
  3: StorageLive(_11)
    SourceInfo(regex-lite/src/hir/mod.rs:531:38-531:46)
  4: _11 = ((*_1).1: char)
    SourceInfo(regex-lite/src/hir/mod.rs:531:38-531:46)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:531:23-531:52)
      kind: _10 = core::cmp::min::<char>(move _11, const 'z') -> [return: bb5, unwind: bb28]
  }
  preds [bb3]
  succs [bb5, bb28]

bb5
  0: StorageDead(_11)
    SourceInfo(regex-lite/src/hir/mod.rs:531:51-531:52)
  1: FakeRead(ForLet(None), _10)
    SourceInfo(regex-lite/src/hir/mod.rs:531:17-531:20)
  2: StorageLive(_12)
    SourceInfo(regex-lite/src/hir/mod.rs:532:25-535:14)
  3: StorageLive(_13)
    SourceInfo(regex-lite/src/hir/mod.rs:533:24-533:70)
  4: StorageLive(_14)
    SourceInfo(regex-lite/src/hir/mod.rs:533:24-533:61)
  5: StorageLive(_15)
    SourceInfo(regex-lite/src/hir/mod.rs:533:39-533:60)
  6: StorageLive(_16)
    SourceInfo(regex-lite/src/hir/mod.rs:533:39-533:55)
  7: StorageLive(_17)
    SourceInfo(regex-lite/src/hir/mod.rs:533:49-533:54)
  8: _17 = _8
    SourceInfo(regex-lite/src/hir/mod.rs:533:49-533:54)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:533:39-533:55)
      kind: _16 = <u32 as core::convert::From<char>>::from(move _17) -> [return: bb6, unwind: bb28]
  }
  preds [bb4]
  succs [bb6, bb28]

bb6
  0: StorageDead(_17)
    SourceInfo(regex-lite/src/hir/mod.rs:533:54-533:55)
  1: _18 = SubWithOverflow(_16, const 32_u32)
    SourceInfo(regex-lite/src/hir/mod.rs:533:39-533:60)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:533:39-533:60)
      kind: assert(!move (_18.1: bool), "attempt to compute `{} - {}`, which would overflow", move _16, const 32_u32) -> [success: bb7, unwind: bb28]
  }
  preds [bb5]
  succs [bb7, bb28]

bb7
  0: _15 = move (_18.0: u32)
    SourceInfo(regex-lite/src/hir/mod.rs:533:39-533:60)
  1: StorageDead(_16)
    SourceInfo(regex-lite/src/hir/mod.rs:533:59-533:60)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:533:24-533:61)
      kind: _14 = <char as core::convert::TryFrom<u32>>::try_from(move _15) -> [return: bb8, unwind: bb28]
  }
  preds [bb6]
  succs [bb8, bb28]

bb8
  0: StorageDead(_15)
    SourceInfo(regex-lite/src/hir/mod.rs:533:60-533:61)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:533:24-533:70)
      kind: _13 = core::result::Result::<char, core::char::CharTryFromError>::unwrap(move _14) -> [return: bb9, unwind: bb28]
  }
  preds [bb7]
  succs [bb9, bb28]

bb9
  0: StorageDead(_14)
    SourceInfo(regex-lite/src/hir/mod.rs:533:69-533:70)
  1: StorageLive(_19)
    SourceInfo(regex-lite/src/hir/mod.rs:534:22-534:66)
  2: StorageLive(_20)
    SourceInfo(regex-lite/src/hir/mod.rs:534:22-534:57)
  3: StorageLive(_21)
    SourceInfo(regex-lite/src/hir/mod.rs:534:37-534:56)
  4: StorageLive(_22)
    SourceInfo(regex-lite/src/hir/mod.rs:534:37-534:51)
  5: StorageLive(_23)
    SourceInfo(regex-lite/src/hir/mod.rs:534:47-534:50)
  6: _23 = _10
    SourceInfo(regex-lite/src/hir/mod.rs:534:47-534:50)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:534:37-534:51)
      kind: _22 = <u32 as core::convert::From<char>>::from(move _23) -> [return: bb10, unwind: bb28]
  }
  preds [bb8]
  succs [bb10, bb28]

bb10
  0: StorageDead(_23)
    SourceInfo(regex-lite/src/hir/mod.rs:534:50-534:51)
  1: _24 = SubWithOverflow(_22, const 32_u32)
    SourceInfo(regex-lite/src/hir/mod.rs:534:37-534:56)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:534:37-534:56)
      kind: assert(!move (_24.1: bool), "attempt to compute `{} - {}`, which would overflow", move _22, const 32_u32) -> [success: bb11, unwind: bb28]
  }
  preds [bb9]
  succs [bb11, bb28]

bb11
  0: _21 = move (_24.0: u32)
    SourceInfo(regex-lite/src/hir/mod.rs:534:37-534:56)
  1: StorageDead(_22)
    SourceInfo(regex-lite/src/hir/mod.rs:534:55-534:56)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:534:22-534:57)
      kind: _20 = <char as core::convert::TryFrom<u32>>::try_from(move _21) -> [return: bb12, unwind: bb28]
  }
  preds [bb10]
  succs [bb12, bb28]

bb12
  0: StorageDead(_21)
    SourceInfo(regex-lite/src/hir/mod.rs:534:56-534:57)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:534:22-534:66)
      kind: _19 = core::result::Result::<char, core::char::CharTryFromError>::unwrap(move _20) -> [return: bb13, unwind: bb28]
  }
  preds [bb11]
  succs [bb13, bb28]

bb13
  0: StorageDead(_20)
    SourceInfo(regex-lite/src/hir/mod.rs:534:65-534:66)
  1: _12 = hir::ClassRange { start: move _13, end: move _19 }
    SourceInfo(regex-lite/src/hir/mod.rs:532:25-535:14)
  2: StorageDead(_19)
    SourceInfo(regex-lite/src/hir/mod.rs:535:13-535:14)
  3: StorageDead(_13)
    SourceInfo(regex-lite/src/hir/mod.rs:535:13-535:14)
  4: _0 = core::option::Option::<hir::ClassRange>::Some(move _12)
    SourceInfo(regex-lite/src/hir/mod.rs:532:20-535:15)
  5: StorageDead(_12)
    SourceInfo(regex-lite/src/hir/mod.rs:535:14-535:15)
  6: StorageDead(_10)
    SourceInfo(regex-lite/src/hir/mod.rs:536:9-536:10)
  7: StorageDead(_8)
    SourceInfo(regex-lite/src/hir/mod.rs:536:9-536:10)
  8: StorageDead(_3)
    SourceInfo(regex-lite/src/hir/mod.rs:536:9-536:10)
  9: StorageDead(_2)
    SourceInfo(regex-lite/src/hir/mod.rs:536:9-536:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb27
  }
  preds [bb12]
  succs [bb27]

bb14
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:537:13-537:78)
      kind: switchInt(move _26) -> [0: bb16, otherwise: bb15]
  }
  preds [bb2]
  succs [bb15, bb16]

bb15
  0: StorageDead(_29)
    SourceInfo(regex-lite/src/hir/mod.rs:537:77-537:78)
  1: StorageDead(_27)
    SourceInfo(regex-lite/src/hir/mod.rs:537:77-537:78)
  2: StorageDead(_28)
    SourceInfo(regex-lite/src/hir/mod.rs:537:77-537:78)
  3: _25 = const ()
    SourceInfo(regex-lite/src/hir/mod.rs:544:10-544:10)
  4: StorageDead(_26)
    SourceInfo(regex-lite/src/hir/mod.rs:544:9-544:10)
  5: StorageDead(_25)
    SourceInfo(regex-lite/src/hir/mod.rs:544:9-544:10)
  6: _0 = core::option::Option::<hir::ClassRange>::None
    SourceInfo(regex-lite/src/hir/mod.rs:545:9-545:13)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:546:6-546:6)
      kind: goto -> bb27
  }
  preds [bb14]
  succs [bb27]

bb16
  0: StorageDead(_29)
    SourceInfo(regex-lite/src/hir/mod.rs:537:77-537:78)
  1: StorageDead(_27)
    SourceInfo(regex-lite/src/hir/mod.rs:537:77-537:78)
  2: StorageDead(_28)
    SourceInfo(regex-lite/src/hir/mod.rs:537:77-537:78)
  3: StorageLive(_31)
    SourceInfo(regex-lite/src/hir/mod.rs:538:17-538:22)
  4: StorageLive(_32)
    SourceInfo(regex-lite/src/hir/mod.rs:538:40-538:50)
  5: _32 = ((*_1).0: char)
    SourceInfo(regex-lite/src/hir/mod.rs:538:40-538:50)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:538:25-538:56)
      kind: _31 = core::cmp::max::<char>(move _32, const 'A') -> [return: bb17, unwind: bb28]
  }
  preds [bb14]
  succs [bb17, bb28]

bb17
  0: StorageDead(_32)
    SourceInfo(regex-lite/src/hir/mod.rs:538:55-538:56)
  1: FakeRead(ForLet(None), _31)
    SourceInfo(regex-lite/src/hir/mod.rs:538:17-538:22)
  2: StorageLive(_33)
    SourceInfo(regex-lite/src/hir/mod.rs:539:17-539:20)
  3: StorageLive(_34)
    SourceInfo(regex-lite/src/hir/mod.rs:539:38-539:46)
  4: _34 = ((*_1).1: char)
    SourceInfo(regex-lite/src/hir/mod.rs:539:38-539:46)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:539:23-539:52)
      kind: _33 = core::cmp::min::<char>(move _34, const 'Z') -> [return: bb18, unwind: bb28]
  }
  preds [bb16]
  succs [bb18, bb28]

bb18
  0: StorageDead(_34)
    SourceInfo(regex-lite/src/hir/mod.rs:539:51-539:52)
  1: FakeRead(ForLet(None), _33)
    SourceInfo(regex-lite/src/hir/mod.rs:539:17-539:20)
  2: StorageLive(_35)
    SourceInfo(regex-lite/src/hir/mod.rs:540:25-543:14)
  3: StorageLive(_36)
    SourceInfo(regex-lite/src/hir/mod.rs:541:24-541:70)
  4: StorageLive(_37)
    SourceInfo(regex-lite/src/hir/mod.rs:541:24-541:61)
  5: StorageLive(_38)
    SourceInfo(regex-lite/src/hir/mod.rs:541:39-541:60)
  6: StorageLive(_39)
    SourceInfo(regex-lite/src/hir/mod.rs:541:39-541:55)
  7: StorageLive(_40)
    SourceInfo(regex-lite/src/hir/mod.rs:541:49-541:54)
  8: _40 = _31
    SourceInfo(regex-lite/src/hir/mod.rs:541:49-541:54)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:541:39-541:55)
      kind: _39 = <u32 as core::convert::From<char>>::from(move _40) -> [return: bb19, unwind: bb28]
  }
  preds [bb17]
  succs [bb19, bb28]

bb19
  0: StorageDead(_40)
    SourceInfo(regex-lite/src/hir/mod.rs:541:54-541:55)
  1: _41 = AddWithOverflow(_39, const 32_u32)
    SourceInfo(regex-lite/src/hir/mod.rs:541:39-541:60)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:541:39-541:60)
      kind: assert(!move (_41.1: bool), "attempt to compute `{} + {}`, which would overflow", move _39, const 32_u32) -> [success: bb20, unwind: bb28]
  }
  preds [bb18]
  succs [bb20, bb28]

bb20
  0: _38 = move (_41.0: u32)
    SourceInfo(regex-lite/src/hir/mod.rs:541:39-541:60)
  1: StorageDead(_39)
    SourceInfo(regex-lite/src/hir/mod.rs:541:59-541:60)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:541:24-541:61)
      kind: _37 = <char as core::convert::TryFrom<u32>>::try_from(move _38) -> [return: bb21, unwind: bb28]
  }
  preds [bb19]
  succs [bb21, bb28]

bb21
  0: StorageDead(_38)
    SourceInfo(regex-lite/src/hir/mod.rs:541:60-541:61)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:541:24-541:70)
      kind: _36 = core::result::Result::<char, core::char::CharTryFromError>::unwrap(move _37) -> [return: bb22, unwind: bb28]
  }
  preds [bb20]
  succs [bb22, bb28]

bb22
  0: StorageDead(_37)
    SourceInfo(regex-lite/src/hir/mod.rs:541:69-541:70)
  1: StorageLive(_42)
    SourceInfo(regex-lite/src/hir/mod.rs:542:22-542:66)
  2: StorageLive(_43)
    SourceInfo(regex-lite/src/hir/mod.rs:542:22-542:57)
  3: StorageLive(_44)
    SourceInfo(regex-lite/src/hir/mod.rs:542:37-542:56)
  4: StorageLive(_45)
    SourceInfo(regex-lite/src/hir/mod.rs:542:37-542:51)
  5: StorageLive(_46)
    SourceInfo(regex-lite/src/hir/mod.rs:542:47-542:50)
  6: _46 = _33
    SourceInfo(regex-lite/src/hir/mod.rs:542:47-542:50)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:542:37-542:51)
      kind: _45 = <u32 as core::convert::From<char>>::from(move _46) -> [return: bb23, unwind: bb28]
  }
  preds [bb21]
  succs [bb23, bb28]

bb23
  0: StorageDead(_46)
    SourceInfo(regex-lite/src/hir/mod.rs:542:50-542:51)
  1: _47 = AddWithOverflow(_45, const 32_u32)
    SourceInfo(regex-lite/src/hir/mod.rs:542:37-542:56)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:542:37-542:56)
      kind: assert(!move (_47.1: bool), "attempt to compute `{} + {}`, which would overflow", move _45, const 32_u32) -> [success: bb24, unwind: bb28]
  }
  preds [bb22]
  succs [bb24, bb28]

bb24
  0: _44 = move (_47.0: u32)
    SourceInfo(regex-lite/src/hir/mod.rs:542:37-542:56)
  1: StorageDead(_45)
    SourceInfo(regex-lite/src/hir/mod.rs:542:55-542:56)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:542:22-542:57)
      kind: _43 = <char as core::convert::TryFrom<u32>>::try_from(move _44) -> [return: bb25, unwind: bb28]
  }
  preds [bb23]
  succs [bb25, bb28]

bb25
  0: StorageDead(_44)
    SourceInfo(regex-lite/src/hir/mod.rs:542:56-542:57)
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:542:22-542:66)
      kind: _42 = core::result::Result::<char, core::char::CharTryFromError>::unwrap(move _43) -> [return: bb26, unwind: bb28]
  }
  preds [bb24]
  succs [bb26, bb28]

bb26
  0: StorageDead(_43)
    SourceInfo(regex-lite/src/hir/mod.rs:542:65-542:66)
  1: _35 = hir::ClassRange { start: move _36, end: move _42 }
    SourceInfo(regex-lite/src/hir/mod.rs:540:25-543:14)
  2: StorageDead(_42)
    SourceInfo(regex-lite/src/hir/mod.rs:543:13-543:14)
  3: StorageDead(_36)
    SourceInfo(regex-lite/src/hir/mod.rs:543:13-543:14)
  4: _0 = core::option::Option::<hir::ClassRange>::Some(move _35)
    SourceInfo(regex-lite/src/hir/mod.rs:540:20-543:15)
  5: StorageDead(_35)
    SourceInfo(regex-lite/src/hir/mod.rs:543:14-543:15)
  6: StorageDead(_33)
    SourceInfo(regex-lite/src/hir/mod.rs:544:9-544:10)
  7: StorageDead(_31)
    SourceInfo(regex-lite/src/hir/mod.rs:544:9-544:10)
  8: StorageDead(_26)
    SourceInfo(regex-lite/src/hir/mod.rs:544:9-544:10)
  9: StorageDead(_25)
    SourceInfo(regex-lite/src/hir/mod.rs:544:9-544:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb27
  }
  preds [bb25]
  succs [bb27]

bb27
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:546:6-546:6)
      kind: return
  }
  preds [bb13, bb15, bb26]
  succs []

bb28
  Terminator {
      source_info: SourceInfo(regex-lite/src/hir/mod.rs:528:5-546:6)
      kind: resume
  }
  preds [bb0, bb2, bb3, bb4, bb5, bb6, bb7, bb8, bb9, bb10, bb11, bb12, bb16, bb17, bb18, bb19, bb20, bb21, bb22, bb23, bb24, bb25]
  succs []

