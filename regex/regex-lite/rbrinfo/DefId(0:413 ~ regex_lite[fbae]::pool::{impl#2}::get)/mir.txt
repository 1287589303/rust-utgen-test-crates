bb0
  0: StorageLive(_2)
    SourceInfo(regex-lite/src/pool.rs:57:13-57:22)
  1: StorageLive(_3)
    SourceInfo(regex-lite/src/pool.rs:57:25-57:42)
  2: StorageLive(_4)
    SourceInfo(regex-lite/src/pool.rs:57:25-57:35)
  3: _4 = &((*_1).0: std::sync::Mutex<alloc::vec::Vec<alloc::boxed::Box<T>>>)
    SourceInfo(regex-lite/src/pool.rs:57:25-57:35)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:57:25-57:42)
      kind: _3 = std::sync::Mutex::<alloc::vec::Vec<alloc::boxed::Box<T>>>::lock(move _4) -> [return: bb1, unwind: bb24]
  }
  preds []
  succs [bb1, bb24]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-lite/src/pool.rs:57:41-57:42)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:57:25-57:51)
      kind: _2 = core::result::Result::<std::sync::MutexGuard<'_, alloc::vec::Vec<alloc::boxed::Box<T>>>, std::sync::PoisonError<std::sync::MutexGuard<'_, alloc::vec::Vec<alloc::boxed::Box<T>>>>>::unwrap(move _3) -> [return: bb2, unwind: bb23]
  }
  preds [bb0]
  succs [bb2, bb23]

bb2
  0: StorageDead(_3)
    SourceInfo(regex-lite/src/pool.rs:57:50-57:51)
  1: FakeRead(ForLet(None), _2)
    SourceInfo(regex-lite/src/pool.rs:57:13-57:22)
  2: StorageLive(_5)
    SourceInfo(regex-lite/src/pool.rs:58:13-58:18)
  3: StorageLive(_6)
    SourceInfo(regex-lite/src/pool.rs:58:27-58:38)
  4: StorageLive(_7)
    SourceInfo(regex-lite/src/pool.rs:58:27-58:32)
  5: StorageLive(_8)
    SourceInfo(regex-lite/src/pool.rs:58:27-58:38)
  6: StorageLive(_9)
    SourceInfo(regex-lite/src/pool.rs:58:27-58:32)
  7: _9 = &mut _2
    SourceInfo(regex-lite/src/pool.rs:58:27-58:32)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:58:27-58:38)
      kind: _8 = <std::sync::MutexGuard<'_, alloc::vec::Vec<alloc::boxed::Box<T>>> as core::ops::DerefMut>::deref_mut(move _9) -> [return: bb3, unwind: bb22]
  }
  preds [bb1]
  succs [bb3, bb22]

bb3
  0: _7 = &mut (*_8)
    SourceInfo(regex-lite/src/pool.rs:58:27-58:32)
  1: StorageDead(_9)
    SourceInfo(regex-lite/src/pool.rs:58:31-58:32)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:58:27-58:38)
      kind: _6 = alloc::vec::Vec::<alloc::boxed::Box<T>>::pop(move _7) -> [return: bb4, unwind: bb22]
  }
  preds [bb2]
  succs [bb4, bb22]

bb4
  0: StorageDead(_7)
    SourceInfo(regex-lite/src/pool.rs:58:37-58:38)
  1: PlaceMention(_6)
    SourceInfo(regex-lite/src/pool.rs:58:27-58:38)
  2: _10 = discriminant(_6)
    SourceInfo(regex-lite/src/pool.rs:58:27-58:38)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:58:21-58:38)
      kind: switchInt(move _10) -> [0: bb6, 1: bb7, otherwise: bb5]
  }
  preds [bb3]
  succs [bb5, bb6, bb7]

bb5
  0: FakeRead(ForMatchedPlace(None), _6)
    SourceInfo(regex-lite/src/pool.rs:58:27-58:38)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:58:27-58:38)
      kind: unreachable
  }
  preds [bb4]
  succs []

bb6
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:59:13-59:17)
      kind: falseEdge -> [real: bb8, imaginary: bb7]
  }
  preds [bb4]
  succs [bb7, bb8]

bb7
  0: StorageLive(_14)
    SourceInfo(regex-lite/src/pool.rs:60:18-60:23)
  1: _14 = move ((_6 as Some).0: alloc::boxed::Box<T>)
    SourceInfo(regex-lite/src/pool.rs:60:18-60:23)
  2: _5 = move _14
    SourceInfo(regex-lite/src/pool.rs:60:28-60:33)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:60:32-60:33)
      kind: drop(_14) -> [return: bb11, unwind: bb21]
  }
  preds [bb4, bb6]
  succs [bb11, bb21]

bb8
  0: StorageLive(_11)
    SourceInfo(regex-lite/src/pool.rs:59:30-59:45)
  1: StorageLive(_12)
    SourceInfo(regex-lite/src/pool.rs:59:30-59:43)
  2: _12 = &((*_1).1: F)
    SourceInfo(regex-lite/src/pool.rs:59:30-59:43)
  3: StorageLive(_13)
    SourceInfo(regex-lite/src/pool.rs:59:30-59:45)
  4: _13 = ()
    SourceInfo(regex-lite/src/pool.rs:59:30-59:45)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:59:30-59:45)
      kind: _11 = <F as core::ops::Fn<()>>::call(move _12, move _13) -> [return: bb9, unwind: bb21]
  }
  preds [bb6]
  succs [bb9, bb21]

bb9
  0: StorageDead(_13)
    SourceInfo(regex-lite/src/pool.rs:59:44-59:45)
  1: StorageDead(_12)
    SourceInfo(regex-lite/src/pool.rs:59:44-59:45)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:59:21-59:46)
      kind: _5 = alloc::boxed::Box::<T>::new(move _11) -> [return: bb10, unwind: bb20]
  }
  preds [bb8]
  succs [bb10, bb20]

bb10
  0: StorageDead(_11)
    SourceInfo(regex-lite/src/pool.rs:59:45-59:46)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:59:45-59:46)
      kind: goto -> bb12
  }
  preds [bb9]
  succs [bb12]

bb11
  0: StorageDead(_14)
    SourceInfo(regex-lite/src/pool.rs:60:32-60:33)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:60:32-60:33)
      kind: goto -> bb12
  }
  preds [bb7]
  succs [bb12]

bb12
  0: FakeRead(ForLet(None), _5)
    SourceInfo(regex-lite/src/pool.rs:58:13-58:18)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:61:10-61:11)
      kind: drop(_6) -> [return: bb13, unwind: bb19]
  }
  preds [bb10, bb11]
  succs [bb13, bb19]

bb13
  0: StorageDead(_8)
    SourceInfo(regex-lite/src/pool.rs:61:10-61:11)
  1: StorageDead(_6)
    SourceInfo(regex-lite/src/pool.rs:61:10-61:11)
  2: StorageLive(_15)
    SourceInfo(regex-lite/src/pool.rs:62:27-62:31)
  3: _15 = &(*_1)
    SourceInfo(regex-lite/src/pool.rs:62:27-62:31)
  4: StorageLive(_16)
    SourceInfo(regex-lite/src/pool.rs:62:40-62:51)
  5: StorageLive(_17)
    SourceInfo(regex-lite/src/pool.rs:62:45-62:50)
  6: _17 = move _5
    SourceInfo(regex-lite/src/pool.rs:62:45-62:50)
  7: _16 = core::option::Option::<alloc::boxed::Box<T>>::Some(move _17)
    SourceInfo(regex-lite/src/pool.rs:62:40-62:51)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:62:50-62:51)
      kind: drop(_17) -> [return: bb14, unwind: bb18]
  }
  preds [bb12]
  succs [bb14, bb18]

bb14
  0: StorageDead(_17)
    SourceInfo(regex-lite/src/pool.rs:62:50-62:51)
  1: _0 = pool::PoolGuard::<'_, T, F> { pool: move _15, value: move _16 }
    SourceInfo(regex-lite/src/pool.rs:62:9-62:53)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:62:52-62:53)
      kind: drop(_16) -> [return: bb15, unwind: bb19]
  }
  preds [bb13]
  succs [bb15, bb19]

bb15
  0: StorageDead(_16)
    SourceInfo(regex-lite/src/pool.rs:62:52-62:53)
  1: StorageDead(_15)
    SourceInfo(regex-lite/src/pool.rs:62:52-62:53)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:63:5-63:6)
      kind: drop(_5) -> [return: bb16, unwind: bb22]
  }
  preds [bb14]
  succs [bb16, bb22]

bb16
  0: StorageDead(_5)
    SourceInfo(regex-lite/src/pool.rs:63:5-63:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:63:5-63:6)
      kind: drop(_2) -> [return: bb17, unwind: bb24]
  }
  preds [bb15]
  succs [bb17, bb24]

bb17
  0: StorageDead(_2)
    SourceInfo(regex-lite/src/pool.rs:63:5-63:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:63:6-63:6)
      kind: return
  }
  preds [bb16]
  succs []

bb18
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:62:52-62:53)
      kind: drop(_16) -> [return: bb19, unwind terminate(cleanup)]
  }
  preds [bb13]
  succs [bb19]

bb19
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:63:5-63:6)
      kind: drop(_5) -> [return: bb22, unwind terminate(cleanup)]
  }
  preds [bb12, bb14, bb18]
  succs [bb22]

bb20
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:59:45-59:46)
      kind: drop(_11) -> [return: bb21, unwind terminate(cleanup)]
  }
  preds [bb9]
  succs [bb21]

bb21
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:61:10-61:11)
      kind: drop(_6) -> [return: bb22, unwind terminate(cleanup)]
  }
  preds [bb7, bb8, bb20]
  succs [bb22]

bb22
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:63:5-63:6)
      kind: drop(_2) -> [return: bb24, unwind terminate(cleanup)]
  }
  preds [bb2, bb3, bb15, bb19, bb21]
  succs [bb24]

bb23
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:57:50-57:51)
      kind: drop(_3) -> [return: bb24, unwind terminate(cleanup)]
  }
  preds [bb1]
  succs [bb24]

bb24
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:56:5-63:6)
      kind: resume
  }
  preds [bb0, bb16, bb22, bb23]
  succs []

