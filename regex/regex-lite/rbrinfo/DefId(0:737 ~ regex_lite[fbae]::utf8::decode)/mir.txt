bb0
  0: StorageLive(_2)
    SourceInfo(regex-lite/src/utf8.rs:57:9-57:14)
  1: StorageLive(_3)
    SourceInfo(regex-lite/src/utf8.rs:57:17-57:22)
  2: _3 = &_1
    SourceInfo(regex-lite/src/utf8.rs:57:17-57:22)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:57:17-57:31)
      kind: _2 = <B as core::convert::AsRef<[u8]>>::as_ref(move _3) -> [return: bb1, unwind: bb30]
  }
  preds []
  succs [bb1, bb30]

bb1
  0: StorageDead(_3)
    SourceInfo(regex-lite/src/utf8.rs:57:30-57:31)
  1: FakeRead(ForLet(None), _2)
    SourceInfo(regex-lite/src/utf8.rs:57:9-57:14)
  2: StorageLive(_4)
    SourceInfo(regex-lite/src/utf8.rs:58:5-62:6)
  3: StorageLive(_5)
    SourceInfo(regex-lite/src/utf8.rs:58:11-58:23)
  4: StorageLive(_6)
    SourceInfo(regex-lite/src/utf8.rs:58:11-58:16)
  5: _6 = &(*_2)
    SourceInfo(regex-lite/src/utf8.rs:58:11-58:16)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:58:11-58:23)
      kind: _5 = core::slice::<impl [u8]>::get::<usize>(move _6, const 0_usize) -> [return: bb2, unwind: bb30]
  }
  preds [bb0]
  succs [bb2, bb30]

bb2
  0: StorageDead(_6)
    SourceInfo(regex-lite/src/utf8.rs:58:22-58:23)
  1: PlaceMention(_5)
    SourceInfo(regex-lite/src/utf8.rs:58:11-58:23)
  2: _9 = discriminant(_5)
    SourceInfo(regex-lite/src/utf8.rs:58:11-58:23)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:58:5-58:23)
      kind: switchInt(move _9) -> [0: bb4, 1: bb5, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb4, bb5]

bb3
  0: _4 = const ()
    SourceInfo(regex-lite/src/utf8.rs:61:14-61:16)
  1: StorageDead(_5)
    SourceInfo(regex-lite/src/utf8.rs:62:5-62:6)
  2: StorageDead(_4)
    SourceInfo(regex-lite/src/utf8.rs:62:5-62:6)
  3: StorageLive(_23)
    SourceInfo(regex-lite/src/utf8.rs:64:38-64:52)
  4: _23 = (const utf8::ACCEPT, const 0_u32, const 0_usize)
    SourceInfo(regex-lite/src/utf8.rs:64:38-64:52)
  5: PlaceMention(_23)
    SourceInfo(regex-lite/src/utf8.rs:64:38-64:52)
  6: StorageLive(_20)
    SourceInfo(regex-lite/src/utf8.rs:64:10-64:19)
  7: _20 = (_23.0: usize)
    SourceInfo(regex-lite/src/utf8.rs:64:10-64:19)
  8: StorageLive(_21)
    SourceInfo(regex-lite/src/utf8.rs:64:21-64:27)
  9: _21 = (_23.1: u32)
    SourceInfo(regex-lite/src/utf8.rs:64:21-64:27)
  10: StorageLive(_22)
    SourceInfo(regex-lite/src/utf8.rs:64:29-64:34)
  11: _22 = (_23.2: usize)
    SourceInfo(regex-lite/src/utf8.rs:64:29-64:34)
  12: StorageDead(_23)
    SourceInfo(regex-lite/src/utf8.rs:64:52-64:53)
  13: StorageLive(_24)
    SourceInfo(regex-lite/src/utf8.rs:65:5-81:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:65:5-81:6)
      kind: goto -> bb10
  }
  preds [bb2, bb5, bb9, bb9]
  succs [bb10]

bb4
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:59:9-59:13)
      kind: falseEdge -> [real: bb6, imaginary: bb5]
  }
  preds [bb2]
  succs [bb5, bb6]

bb5
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:60:9-60:17)
      kind: falseEdge -> [real: bb7, imaginary: bb3]
  }
  preds [bb2, bb4]
  succs [bb3, bb7]

bb6
  0: StorageLive(_11)
    SourceInfo(regex-lite/src/utf8.rs:59:25-59:29)
  1: _11 = core::option::Option::<char>::None
    SourceInfo(regex-lite/src/utf8.rs:59:25-59:29)
  2: _0 = (move _11, const 0_usize)
    SourceInfo(regex-lite/src/utf8.rs:59:24-59:33)
  3: StorageDead(_11)
    SourceInfo(regex-lite/src/utf8.rs:59:32-59:33)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:59:17-59:33)
      kind: goto -> bb27
  }
  preds [bb4]
  succs [bb27]

bb7
  0: StorageLive(_13)
    SourceInfo(regex-lite/src/utf8.rs:60:15-60:16)
  1: _13 = &(*((_5 as Some).0: &u8))
    SourceInfo(regex-lite/src/utf8.rs:60:15-60:16)
  2: _7 = &fake shallow _5
    SourceInfo(regex-lite/src/utf8.rs:58:11-58:23)
  3: _8 = &fake shallow ((_5 as Some).0: &u8)
    SourceInfo(regex-lite/src/utf8.rs:58:11-58:23)
  4: StorageLive(_14)
    SourceInfo(regex-lite/src/utf8.rs:60:21-60:30)
  5: StorageLive(_15)
    SourceInfo(regex-lite/src/utf8.rs:60:21-60:22)
  6: _15 = (*_13)
    SourceInfo(regex-lite/src/utf8.rs:60:21-60:22)
  7: _14 = Le(move _15, const 127_u8)
    SourceInfo(regex-lite/src/utf8.rs:60:21-60:30)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:60:21-60:30)
      kind: switchInt(move _14) -> [0: bb9, otherwise: bb8]
  }
  preds [bb5]
  succs [bb8, bb9]

bb8
  0: StorageDead(_15)
    SourceInfo(regex-lite/src/utf8.rs:60:29-60:30)
  1: StorageDead(_14)
    SourceInfo(regex-lite/src/utf8.rs:60:29-60:30)
  2: FakeRead(ForMatchGuard, _7)
    SourceInfo(regex-lite/src/utf8.rs:60:29-60:30)
  3: FakeRead(ForMatchGuard, _8)
    SourceInfo(regex-lite/src/utf8.rs:60:29-60:30)
  4: FakeRead(ForGuardBinding, _13)
    SourceInfo(regex-lite/src/utf8.rs:60:29-60:30)
  5: StorageLive(_12)
    SourceInfo(regex-lite/src/utf8.rs:60:15-60:16)
  6: _12 = (*((_5 as Some).0: &u8))
    SourceInfo(regex-lite/src/utf8.rs:60:15-60:16)
  7: StorageLive(_17)
    SourceInfo(regex-lite/src/utf8.rs:60:42-60:57)
  8: StorageLive(_18)
    SourceInfo(regex-lite/src/utf8.rs:60:47-60:56)
  9: StorageLive(_19)
    SourceInfo(regex-lite/src/utf8.rs:60:47-60:48)
  10: _19 = _12
    SourceInfo(regex-lite/src/utf8.rs:60:47-60:48)
  11: _18 = move _19 as char (IntToInt)
    SourceInfo(regex-lite/src/utf8.rs:60:47-60:56)
  12: StorageDead(_19)
    SourceInfo(regex-lite/src/utf8.rs:60:55-60:56)
  13: _17 = core::option::Option::<char>::Some(move _18)
    SourceInfo(regex-lite/src/utf8.rs:60:42-60:57)
  14: StorageDead(_18)
    SourceInfo(regex-lite/src/utf8.rs:60:56-60:57)
  15: _0 = (move _17, const 1_usize)
    SourceInfo(regex-lite/src/utf8.rs:60:41-60:61)
  16: StorageDead(_17)
    SourceInfo(regex-lite/src/utf8.rs:60:60-60:61)
  17: StorageDead(_12)
    SourceInfo(regex-lite/src/utf8.rs:60:60-60:61)
  18: StorageDead(_13)
    SourceInfo(regex-lite/src/utf8.rs:60:60-60:61)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb27
  }
  preds [bb7]
  succs [bb27]

bb9
  0: StorageDead(_15)
    SourceInfo(regex-lite/src/utf8.rs:60:29-60:30)
  1: StorageDead(_14)
    SourceInfo(regex-lite/src/utf8.rs:60:29-60:30)
  2: StorageDead(_13)
    SourceInfo(regex-lite/src/utf8.rs:60:60-60:61)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:60:21-60:30)
      kind: falseEdge -> [real: bb3, imaginary: bb3]
  }
  preds [bb7]
  succs [bb3, bb3]

bb10
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:65:5-81:6)
      kind: falseUnwind -> [real: bb11, unwind: bb30]
  }
  preds [bb3, bb24]
  succs [bb11, bb30]

bb11
  0: StorageLive(_26)
    SourceInfo(regex-lite/src/utf8.rs:65:11-65:26)
  1: StorageLive(_27)
    SourceInfo(regex-lite/src/utf8.rs:65:11-65:12)
  2: _27 = _22
    SourceInfo(regex-lite/src/utf8.rs:65:11-65:12)
  3: StorageLive(_28)
    SourceInfo(regex-lite/src/utf8.rs:65:15-65:26)
  4: StorageLive(_29)
    SourceInfo(regex-lite/src/utf8.rs:65:15-65:20)
  5: _29 = &(*_2)
    SourceInfo(regex-lite/src/utf8.rs:65:15-65:20)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:65:15-65:26)
      kind: _28 = core::slice::<impl [u8]>::len(move _29) -> [return: bb12, unwind: bb30]
  }
  preds [bb10]
  succs [bb12, bb30]

bb12
  0: StorageDead(_29)
    SourceInfo(regex-lite/src/utf8.rs:65:25-65:26)
  1: _26 = Lt(move _27, move _28)
    SourceInfo(regex-lite/src/utf8.rs:65:11-65:26)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:65:11-65:26)
      kind: switchInt(move _26) -> [0: bb25, otherwise: bb13]
  }
  preds [bb11]
  succs [bb13, bb25]

bb13
  0: StorageDead(_28)
    SourceInfo(regex-lite/src/utf8.rs:65:25-65:26)
  1: StorageDead(_27)
    SourceInfo(regex-lite/src/utf8.rs:65:25-65:26)
  2: StorageLive(_30)
    SourceInfo(regex-lite/src/utf8.rs:66:9-66:51)
  3: StorageLive(_31)
    SourceInfo(regex-lite/src/utf8.rs:66:21-66:31)
  4: StorageLive(_32)
    SourceInfo(regex-lite/src/utf8.rs:66:21-66:31)
  5: _32 = &mut _20
    SourceInfo(regex-lite/src/utf8.rs:66:21-66:31)
  6: _31 = &mut (*_32)
    SourceInfo(regex-lite/src/utf8.rs:66:21-66:31)
  7: StorageLive(_33)
    SourceInfo(regex-lite/src/utf8.rs:66:33-66:40)
  8: StorageLive(_34)
    SourceInfo(regex-lite/src/utf8.rs:66:33-66:40)
  9: _34 = &mut _21
    SourceInfo(regex-lite/src/utf8.rs:66:33-66:40)
  10: _33 = &mut (*_34)
    SourceInfo(regex-lite/src/utf8.rs:66:33-66:40)
  11: StorageLive(_35)
    SourceInfo(regex-lite/src/utf8.rs:66:42-66:50)
  12: StorageLive(_36)
    SourceInfo(regex-lite/src/utf8.rs:66:48-66:49)
  13: _36 = _22
    SourceInfo(regex-lite/src/utf8.rs:66:48-66:49)
  14: _37 = Len((*_2))
    SourceInfo(regex-lite/src/utf8.rs:66:42-66:50)
  15: _38 = Lt(_36, _37)
    SourceInfo(regex-lite/src/utf8.rs:66:42-66:50)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:66:42-66:50)
      kind: assert(move _38, "index out of bounds: the length is {} but the index is {}", move _37, _36) -> [success: bb14, unwind: bb30]
  }
  preds [bb12]
  succs [bb14, bb30]

bb14
  0: _35 = (*_2)[_36]
    SourceInfo(regex-lite/src/utf8.rs:66:42-66:50)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:66:9-66:51)
      kind: _30 = utf8::decode_step(move _31, move _33, move _35) -> [return: bb15, unwind: bb30]
  }
  preds [bb13]
  succs [bb15, bb30]

bb15
  0: StorageDead(_35)
    SourceInfo(regex-lite/src/utf8.rs:66:50-66:51)
  1: StorageDead(_33)
    SourceInfo(regex-lite/src/utf8.rs:66:50-66:51)
  2: StorageDead(_31)
    SourceInfo(regex-lite/src/utf8.rs:66:50-66:51)
  3: StorageDead(_36)
    SourceInfo(regex-lite/src/utf8.rs:66:51-66:52)
  4: StorageDead(_34)
    SourceInfo(regex-lite/src/utf8.rs:66:51-66:52)
  5: StorageDead(_32)
    SourceInfo(regex-lite/src/utf8.rs:66:51-66:52)
  6: StorageDead(_30)
    SourceInfo(regex-lite/src/utf8.rs:66:51-66:52)
  7: _39 = AddWithOverflow(_22, const 1_usize)
    SourceInfo(regex-lite/src/utf8.rs:67:9-67:15)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:67:9-67:15)
      kind: assert(!move (_39.1: bool), "attempt to compute `{} + {}`, which would overflow", _22, const 1_usize) -> [success: bb16, unwind: bb30]
  }
  preds [bb14]
  succs [bb16, bb30]

bb16
  0: _22 = move (_39.0: usize)
    SourceInfo(regex-lite/src/utf8.rs:67:9-67:15)
  1: StorageLive(_40)
    SourceInfo(regex-lite/src/utf8.rs:69:12-69:27)
  2: StorageLive(_41)
    SourceInfo(regex-lite/src/utf8.rs:69:12-69:17)
  3: _41 = _20
    SourceInfo(regex-lite/src/utf8.rs:69:12-69:17)
  4: _40 = Eq(move _41, const utf8::ACCEPT)
    SourceInfo(regex-lite/src/utf8.rs:69:12-69:27)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:69:12-69:27)
      kind: switchInt(move _40) -> [0: bb20, otherwise: bb17]
  }
  preds [bb15]
  succs [bb17, bb20]

bb17
  0: StorageDead(_41)
    SourceInfo(regex-lite/src/utf8.rs:69:26-69:27)
  1: StorageLive(_43)
    SourceInfo(regex-lite/src/utf8.rs:75:17-75:19)
  2: StorageLive(_44)
    SourceInfo(regex-lite/src/utf8.rs:75:22-75:40)
  3: StorageLive(_45)
    SourceInfo(regex-lite/src/utf8.rs:75:37-75:39)
  4: _45 = _21
    SourceInfo(regex-lite/src/utf8.rs:75:37-75:39)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:75:22-75:40)
      kind: _44 = core::char::methods::<impl char>::from_u32(move _45) -> [return: bb18, unwind: bb30]
  }
  preds [bb16]
  succs [bb18, bb30]

bb18
  0: StorageDead(_45)
    SourceInfo(regex-lite/src/utf8.rs:75:39-75:40)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:75:22-75:49)
      kind: _43 = core::option::Option::<char>::unwrap(move _44) -> [return: bb19, unwind: bb30]
  }
  preds [bb17]
  succs [bb19, bb30]

bb19
  0: StorageDead(_44)
    SourceInfo(regex-lite/src/utf8.rs:75:48-75:49)
  1: FakeRead(ForLet(None), _43)
    SourceInfo(regex-lite/src/utf8.rs:75:17-75:19)
  2: StorageLive(_46)
    SourceInfo(regex-lite/src/utf8.rs:76:21-76:29)
  3: StorageLive(_47)
    SourceInfo(regex-lite/src/utf8.rs:76:26-76:28)
  4: _47 = _43
    SourceInfo(regex-lite/src/utf8.rs:76:26-76:28)
  5: _46 = core::option::Option::<char>::Some(move _47)
    SourceInfo(regex-lite/src/utf8.rs:76:21-76:29)
  6: StorageDead(_47)
    SourceInfo(regex-lite/src/utf8.rs:76:28-76:29)
  7: StorageLive(_48)
    SourceInfo(regex-lite/src/utf8.rs:76:31-76:32)
  8: _48 = _22
    SourceInfo(regex-lite/src/utf8.rs:76:31-76:32)
  9: _0 = (move _46, move _48)
    SourceInfo(regex-lite/src/utf8.rs:76:20-76:33)
  10: StorageDead(_48)
    SourceInfo(regex-lite/src/utf8.rs:76:32-76:33)
  11: StorageDead(_46)
    SourceInfo(regex-lite/src/utf8.rs:76:32-76:33)
  12: StorageDead(_43)
    SourceInfo(regex-lite/src/utf8.rs:77:9-77:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb26
  }
  preds [bb18]
  succs [bb26]

bb20
  0: StorageDead(_41)
    SourceInfo(regex-lite/src/utf8.rs:69:26-69:27)
  1: StorageLive(_49)
    SourceInfo(regex-lite/src/utf8.rs:77:19-77:34)
  2: StorageLive(_50)
    SourceInfo(regex-lite/src/utf8.rs:77:19-77:24)
  3: _50 = _20
    SourceInfo(regex-lite/src/utf8.rs:77:19-77:24)
  4: _49 = Eq(move _50, const utf8::REJECT)
    SourceInfo(regex-lite/src/utf8.rs:77:19-77:34)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:77:19-77:34)
      kind: switchInt(move _49) -> [0: bb24, otherwise: bb21]
  }
  preds [bb16]
  succs [bb21, bb24]

bb21
  0: StorageDead(_50)
    SourceInfo(regex-lite/src/utf8.rs:77:33-77:34)
  1: StorageLive(_52)
    SourceInfo(regex-lite/src/utf8.rs:79:21-79:25)
  2: _52 = core::option::Option::<char>::None
    SourceInfo(regex-lite/src/utf8.rs:79:21-79:25)
  3: StorageLive(_53)
    SourceInfo(regex-lite/src/utf8.rs:79:27-79:65)
  4: StorageLive(_54)
    SourceInfo(regex-lite/src/utf8.rs:79:45-79:64)
  5: StorageLive(_55)
    SourceInfo(regex-lite/src/utf8.rs:79:45-79:46)
  6: _55 = _22
    SourceInfo(regex-lite/src/utf8.rs:79:45-79:46)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:79:45-79:64)
      kind: _54 = core::num::<impl usize>::saturating_sub(move _55, const 1_usize) -> [return: bb22, unwind: bb30]
  }
  preds [bb20]
  succs [bb22, bb30]

bb22
  0: StorageDead(_55)
    SourceInfo(regex-lite/src/utf8.rs:79:63-79:64)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:79:27-79:65)
      kind: _53 = core::cmp::max::<usize>(const 1_usize, move _54) -> [return: bb23, unwind: bb30]
  }
  preds [bb21]
  succs [bb23, bb30]

bb23
  0: StorageDead(_54)
    SourceInfo(regex-lite/src/utf8.rs:79:64-79:65)
  1: _0 = (move _52, move _53)
    SourceInfo(regex-lite/src/utf8.rs:79:20-79:66)
  2: StorageDead(_53)
    SourceInfo(regex-lite/src/utf8.rs:79:65-79:66)
  3: StorageDead(_52)
    SourceInfo(regex-lite/src/utf8.rs:79:65-79:66)
  4: StorageDead(_49)
    SourceInfo(regex-lite/src/utf8.rs:80:9-80:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb26
  }
  preds [bb22]
  succs [bb26]

bb24
  0: StorageDead(_50)
    SourceInfo(regex-lite/src/utf8.rs:77:33-77:34)
  1: _25 = const ()
    SourceInfo(regex-lite/src/utf8.rs:80:10-80:10)
  2: StorageDead(_49)
    SourceInfo(regex-lite/src/utf8.rs:80:9-80:10)
  3: StorageDead(_40)
    SourceInfo(regex-lite/src/utf8.rs:80:9-80:10)
  4: StorageDead(_26)
    SourceInfo(regex-lite/src/utf8.rs:81:5-81:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:65:5-81:6)
      kind: goto -> bb10
  }
  preds [bb20]
  succs [bb10]

bb25
  0: StorageDead(_28)
    SourceInfo(regex-lite/src/utf8.rs:65:25-65:26)
  1: StorageDead(_27)
    SourceInfo(regex-lite/src/utf8.rs:65:25-65:26)
  2: StorageLive(_57)
    SourceInfo(regex-lite/src/utf8.rs:65:5-81:6)
  3: _24 = const ()
    SourceInfo(regex-lite/src/utf8.rs:65:5-81:6)
  4: StorageDead(_57)
    SourceInfo(regex-lite/src/utf8.rs:81:5-81:6)
  5: StorageDead(_26)
    SourceInfo(regex-lite/src/utf8.rs:81:5-81:6)
  6: StorageDead(_24)
    SourceInfo(regex-lite/src/utf8.rs:81:5-81:6)
  7: StorageLive(_59)
    SourceInfo(regex-lite/src/utf8.rs:82:6-82:10)
  8: _59 = core::option::Option::<char>::None
    SourceInfo(regex-lite/src/utf8.rs:82:6-82:10)
  9: StorageLive(_60)
    SourceInfo(regex-lite/src/utf8.rs:82:12-82:13)
  10: _60 = _22
    SourceInfo(regex-lite/src/utf8.rs:82:12-82:13)
  11: _0 = (move _59, move _60)
    SourceInfo(regex-lite/src/utf8.rs:82:5-82:14)
  12: StorageDead(_60)
    SourceInfo(regex-lite/src/utf8.rs:82:13-82:14)
  13: StorageDead(_59)
    SourceInfo(regex-lite/src/utf8.rs:82:13-82:14)
  14: StorageDead(_22)
    SourceInfo(regex-lite/src/utf8.rs:83:1-83:2)
  15: StorageDead(_21)
    SourceInfo(regex-lite/src/utf8.rs:83:1-83:2)
  16: StorageDead(_20)
    SourceInfo(regex-lite/src/utf8.rs:83:1-83:2)
  17: StorageDead(_2)
    SourceInfo(regex-lite/src/utf8.rs:83:1-83:2)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:83:1-83:2)
      kind: drop(_1) -> [return: bb29, unwind: bb31]
  }
  preds [bb12]
  succs [bb29, bb31]

bb26
  0: StorageDead(_40)
    SourceInfo(regex-lite/src/utf8.rs:80:9-80:10)
  1: StorageDead(_26)
    SourceInfo(regex-lite/src/utf8.rs:81:5-81:6)
  2: StorageDead(_24)
    SourceInfo(regex-lite/src/utf8.rs:81:5-81:6)
  3: StorageDead(_22)
    SourceInfo(regex-lite/src/utf8.rs:83:1-83:2)
  4: StorageDead(_21)
    SourceInfo(regex-lite/src/utf8.rs:83:1-83:2)
  5: StorageDead(_20)
    SourceInfo(regex-lite/src/utf8.rs:83:1-83:2)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb28
  }
  preds [bb19, bb23]
  succs [bb28]

bb27
  0: StorageDead(_5)
    SourceInfo(regex-lite/src/utf8.rs:62:5-62:6)
  1: StorageDead(_4)
    SourceInfo(regex-lite/src/utf8.rs:62:5-62:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb28
  }
  preds [bb6, bb8]
  succs [bb28]

bb28
  0: StorageDead(_2)
    SourceInfo(regex-lite/src/utf8.rs:83:1-83:2)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:83:1-83:2)
      kind: drop(_1) -> [return: bb29, unwind: bb31]
  }
  preds [bb26, bb27]
  succs [bb29, bb31]

bb29
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:83:2-83:2)
      kind: return
  }
  preds [bb25, bb28]
  succs []

bb30
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:83:1-83:2)
      kind: drop(_1) -> [return: bb31, unwind terminate(cleanup)]
  }
  preds [bb0, bb1, bb10, bb11, bb13, bb14, bb15, bb17, bb18, bb21, bb22]
  succs [bb31]

bb31
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:56:1-83:2)
      kind: resume
  }
  preds [bb25, bb28, bb30]
  succs []

