bb0
  0: StorageLive(_5)
    SourceInfo(regex-lite/src/nfa.rs:583:46-586:10)
  1: StorageLive(_6)
    SourceInfo(regex-lite/src/nfa.rs:583:52-583:61)
  2: StorageLive(_7)
    SourceInfo(regex-lite/src/nfa.rs:583:52-583:54)
  3: _7 = &mut _2
    SourceInfo(regex-lite/src/nfa.rs:583:52-583:54)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:583:52-583:61)
      kind: _6 = <I as core::iter::Iterator>::next(move _7) -> [return: bb1, unwind: bb45]
  }
  preds []
  succs [bb1, bb45]

bb1
  0: StorageDead(_7)
    SourceInfo(regex-lite/src/nfa.rs:583:60-583:61)
  1: PlaceMention(_6)
    SourceInfo(regex-lite/src/nfa.rs:583:52-583:61)
  2: _8 = discriminant(_6)
    SourceInfo(regex-lite/src/nfa.rs:583:52-583:61)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:583:46-583:61)
      kind: switchInt(move _8) -> [0: bb4, 1: bb3, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3, bb4]

bb2
  0: FakeRead(ForMatchedPlace(None), _6)
    SourceInfo(regex-lite/src/nfa.rs:583:52-583:61)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:583:52-583:61)
      kind: unreachable
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:584:13-584:25)
      kind: falseEdge -> [real: bb5, imaginary: bb4]
  }
  preds [bb1]
  succs [bb4, bb5]

bb4
  0: StorageLive(_18)
    SourceInfo(regex-lite/src/nfa.rs:585:28-585:32)
  1: _18 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:585:28-585:32)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:585:28-585:42)
      kind: _0 = nfa::Compiler::c_empty(move _18) -> [return: bb12, unwind: bb45]
  }
  preds [bb1, bb3]
  succs [bb12, bb45]

bb5
  0: StorageLive(_9)
    SourceInfo(regex-lite/src/nfa.rs:584:18-584:24)
  1: _9 = move ((_6 as Some).0: core::result::Result<nfa::ThompsonRef, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:584:18-584:24)
  2: StorageLive(_10)
    SourceInfo(regex-lite/src/nfa.rs:584:29-584:36)
  3: StorageLive(_11)
    SourceInfo(regex-lite/src/nfa.rs:584:29-584:35)
  4: _11 = move _9
    SourceInfo(regex-lite/src/nfa.rs:584:29-584:35)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:584:29-584:36)
      kind: _10 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::Try>::branch(move _11) -> [return: bb6, unwind: bb45]
  }
  preds [bb3]
  succs [bb6, bb45]

bb6
  0: StorageDead(_11)
    SourceInfo(regex-lite/src/nfa.rs:584:35-584:36)
  1: PlaceMention(_10)
    SourceInfo(regex-lite/src/nfa.rs:584:29-584:36)
  2: _12 = discriminant(_10)
    SourceInfo(regex-lite/src/nfa.rs:584:29-584:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:584:29-584:36)
      kind: switchInt(move _12) -> [0: bb9, 1: bb8, otherwise: bb7]
  }
  preds [bb5]
  succs [bb7, bb8, bb9]

bb7
  0: FakeRead(ForMatchedPlace(None), _10)
    SourceInfo(regex-lite/src/nfa.rs:584:29-584:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:584:29-584:36)
      kind: unreachable
  }
  preds [bb6]
  succs []

bb8
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:584:35-584:36)
      kind: falseEdge -> [real: bb10, imaginary: bb9]
  }
  preds [bb6]
  succs [bb9, bb10]

bb9
  0: StorageLive(_16)
    SourceInfo(regex-lite/src/nfa.rs:584:29-584:36)
  1: _16 = ((_10 as Continue).0: nfa::ThompsonRef)
    SourceInfo(regex-lite/src/nfa.rs:584:29-584:36)
  2: _5 = _16
    SourceInfo(regex-lite/src/nfa.rs:584:29-584:36)
  3: StorageDead(_16)
    SourceInfo(regex-lite/src/nfa.rs:584:35-584:36)
  4: StorageDead(_10)
    SourceInfo(regex-lite/src/nfa.rs:584:35-584:36)
  5: StorageDead(_9)
    SourceInfo(regex-lite/src/nfa.rs:584:35-584:36)
  6: PlaceMention(_5)
    SourceInfo(regex-lite/src/nfa.rs:583:46-586:10)
  7: StorageLive(_3)
    SourceInfo(regex-lite/src/nfa.rs:583:27-583:32)
  8: _3 = (_5.0: u32)
    SourceInfo(regex-lite/src/nfa.rs:583:27-583:32)
  9: StorageLive(_4)
    SourceInfo(regex-lite/src/nfa.rs:583:34-583:41)
  10: _4 = (_5.1: u32)
    SourceInfo(regex-lite/src/nfa.rs:583:34-583:41)
  11: StorageDead(_6)
    SourceInfo(regex-lite/src/nfa.rs:586:10-586:11)
  12: StorageDead(_5)
    SourceInfo(regex-lite/src/nfa.rs:586:10-586:11)
  13: StorageLive(_19)
    SourceInfo(regex-lite/src/nfa.rs:587:9-591:10)
  14: StorageLive(_20)
    SourceInfo(regex-lite/src/nfa.rs:587:23-587:25)
  15: StorageLive(_21)
    SourceInfo(regex-lite/src/nfa.rs:587:23-587:25)
  16: _21 = move _2
    SourceInfo(regex-lite/src/nfa.rs:587:23-587:25)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:587:23-587:25)
      kind: _20 = <I as core::iter::IntoIterator>::into_iter(move _21) -> [return: bb13, unwind: bb44]
  }
  preds [bb6, bb8]
  succs [bb13, bb44]

bb10
  0: StorageLive(_13)
    SourceInfo(regex-lite/src/nfa.rs:584:35-584:36)
  1: _13 = move ((_10 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:584:35-584:36)
  2: StorageLive(_15)
    SourceInfo(regex-lite/src/nfa.rs:584:35-584:36)
  3: _15 = move _13
    SourceInfo(regex-lite/src/nfa.rs:584:35-584:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:584:29-584:36)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _15) -> [return: bb11, unwind: bb45]
  }
  preds [bb8]
  succs [bb11, bb45]

bb11
  0: StorageDead(_15)
    SourceInfo(regex-lite/src/nfa.rs:584:35-584:36)
  1: StorageDead(_13)
    SourceInfo(regex-lite/src/nfa.rs:584:35-584:36)
  2: StorageDead(_10)
    SourceInfo(regex-lite/src/nfa.rs:584:35-584:36)
  3: StorageDead(_9)
    SourceInfo(regex-lite/src/nfa.rs:584:35-584:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb39
  }
  preds [bb10]
  succs [bb39]

bb12
  0: StorageDead(_18)
    SourceInfo(regex-lite/src/nfa.rs:585:41-585:42)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:585:21-585:42)
      kind: goto -> bb39
  }
  preds [bb4]
  succs [bb39]

bb13
  0: StorageDead(_21)
    SourceInfo(regex-lite/src/nfa.rs:587:24-587:25)
  1: PlaceMention(_20)
    SourceInfo(regex-lite/src/nfa.rs:587:23-587:25)
  2: StorageLive(_22)
    SourceInfo(regex-lite/src/nfa.rs:587:23-587:25)
  3: _22 = move _20
    SourceInfo(regex-lite/src/nfa.rs:587:23-587:25)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:587:9-591:10)
      kind: goto -> bb14
  }
  preds [bb9]
  succs [bb14]

bb14
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:587:9-591:10)
      kind: falseUnwind -> [real: bb15, unwind: bb42]
  }
  preds [bb13, bb31]
  succs [bb15, bb42]

bb15
  0: StorageLive(_24)
    SourceInfo(regex-lite/src/nfa.rs:587:23-587:25)
  1: StorageLive(_25)
    SourceInfo(regex-lite/src/nfa.rs:587:23-587:25)
  2: StorageLive(_26)
    SourceInfo(regex-lite/src/nfa.rs:587:23-587:25)
  3: StorageLive(_27)
    SourceInfo(regex-lite/src/nfa.rs:587:23-587:25)
  4: _27 = &mut _22
    SourceInfo(regex-lite/src/nfa.rs:587:23-587:25)
  5: _26 = &mut (*_27)
    SourceInfo(regex-lite/src/nfa.rs:587:23-587:25)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:587:23-587:25)
      kind: _25 = <I as core::iter::Iterator>::next(move _26) -> [return: bb16, unwind: bb42]
  }
  preds [bb14]
  succs [bb16, bb42]

bb16
  0: StorageDead(_26)
    SourceInfo(regex-lite/src/nfa.rs:587:24-587:25)
  1: PlaceMention(_25)
    SourceInfo(regex-lite/src/nfa.rs:587:23-587:25)
  2: _28 = discriminant(_25)
    SourceInfo(regex-lite/src/nfa.rs:587:23-587:25)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:587:23-587:25)
      kind: switchInt(move _28) -> [0: bb18, 1: bb19, otherwise: bb17]
  }
  preds [bb15]
  succs [bb17, bb18, bb19]

bb17
  0: FakeRead(ForMatchedPlace(None), _25)
    SourceInfo(regex-lite/src/nfa.rs:587:23-587:25)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:587:23-587:25)
      kind: unreachable
  }
  preds [bb16]
  succs []

bb18
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:587:9-591:10)
      kind: falseEdge -> [real: bb20, imaginary: bb19]
  }
  preds [bb16]
  succs [bb19, bb20]

bb19
  0: StorageLive(_30)
    SourceInfo(regex-lite/src/nfa.rs:587:13-587:19)
  1: _30 = move ((_25 as Some).0: core::result::Result<nfa::ThompsonRef, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:587:13-587:19)
  2: StorageLive(_31)
    SourceInfo(regex-lite/src/nfa.rs:588:17-588:25)
  3: StorageLive(_32)
    SourceInfo(regex-lite/src/nfa.rs:588:28-588:35)
  4: StorageLive(_33)
    SourceInfo(regex-lite/src/nfa.rs:588:28-588:34)
  5: _33 = move _30
    SourceInfo(regex-lite/src/nfa.rs:588:28-588:34)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:588:28-588:35)
      kind: _32 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::Try>::branch(move _33) -> [return: bb21, unwind: bb42]
  }
  preds [bb16, bb18]
  succs [bb21, bb42]

bb20
  0: _19 = const ()
    SourceInfo(regex-lite/src/nfa.rs:587:9-591:10)
  1: StorageDead(_27)
    SourceInfo(regex-lite/src/nfa.rs:591:9-591:10)
  2: StorageDead(_25)
    SourceInfo(regex-lite/src/nfa.rs:591:9-591:10)
  3: StorageDead(_24)
    SourceInfo(regex-lite/src/nfa.rs:591:9-591:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:591:9-591:10)
      kind: drop(_22) -> [return: bb34, unwind: bb43]
  }
  preds [bb18]
  succs [bb34, bb43]

bb21
  0: StorageDead(_33)
    SourceInfo(regex-lite/src/nfa.rs:588:34-588:35)
  1: PlaceMention(_32)
    SourceInfo(regex-lite/src/nfa.rs:588:28-588:35)
  2: _34 = discriminant(_32)
    SourceInfo(regex-lite/src/nfa.rs:588:28-588:35)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:588:28-588:35)
      kind: switchInt(move _34) -> [0: bb24, 1: bb23, otherwise: bb22]
  }
  preds [bb19]
  succs [bb22, bb23, bb24]

bb22
  0: FakeRead(ForMatchedPlace(None), _32)
    SourceInfo(regex-lite/src/nfa.rs:588:28-588:35)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:588:28-588:35)
      kind: unreachable
  }
  preds [bb21]
  succs []

bb23
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:588:34-588:35)
      kind: falseEdge -> [real: bb25, imaginary: bb24]
  }
  preds [bb21]
  succs [bb24, bb25]

bb24
  0: StorageLive(_38)
    SourceInfo(regex-lite/src/nfa.rs:588:28-588:35)
  1: _38 = ((_32 as Continue).0: nfa::ThompsonRef)
    SourceInfo(regex-lite/src/nfa.rs:588:28-588:35)
  2: _31 = _38
    SourceInfo(regex-lite/src/nfa.rs:588:28-588:35)
  3: StorageDead(_38)
    SourceInfo(regex-lite/src/nfa.rs:588:34-588:35)
  4: FakeRead(ForLet(None), _31)
    SourceInfo(regex-lite/src/nfa.rs:588:17-588:25)
  5: StorageDead(_32)
    SourceInfo(regex-lite/src/nfa.rs:588:35-588:36)
  6: StorageLive(_39)
    SourceInfo(regex-lite/src/nfa.rs:589:13-589:45)
  7: StorageLive(_40)
    SourceInfo(regex-lite/src/nfa.rs:589:13-589:45)
  8: StorageLive(_41)
    SourceInfo(regex-lite/src/nfa.rs:589:13-589:44)
  9: StorageLive(_42)
    SourceInfo(regex-lite/src/nfa.rs:589:13-589:17)
  10: _42 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:589:13-589:17)
  11: StorageLive(_43)
    SourceInfo(regex-lite/src/nfa.rs:589:24-589:27)
  12: _43 = _4
    SourceInfo(regex-lite/src/nfa.rs:589:24-589:27)
  13: StorageLive(_44)
    SourceInfo(regex-lite/src/nfa.rs:589:29-589:43)
  14: _44 = (_31.0: u32)
    SourceInfo(regex-lite/src/nfa.rs:589:29-589:43)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:589:13-589:44)
      kind: _41 = nfa::Compiler::patch(move _42, move _43, move _44) -> [return: bb27, unwind: bb42]
  }
  preds [bb21, bb23]
  succs [bb27, bb42]

bb25
  0: StorageLive(_35)
    SourceInfo(regex-lite/src/nfa.rs:588:34-588:35)
  1: _35 = move ((_32 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:588:34-588:35)
  2: StorageLive(_37)
    SourceInfo(regex-lite/src/nfa.rs:588:34-588:35)
  3: _37 = move _35
    SourceInfo(regex-lite/src/nfa.rs:588:34-588:35)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:588:28-588:35)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _37) -> [return: bb26, unwind: bb42]
  }
  preds [bb23]
  succs [bb26, bb42]

bb26
  0: StorageDead(_37)
    SourceInfo(regex-lite/src/nfa.rs:588:34-588:35)
  1: StorageDead(_35)
    SourceInfo(regex-lite/src/nfa.rs:588:34-588:35)
  2: StorageDead(_32)
    SourceInfo(regex-lite/src/nfa.rs:588:35-588:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb36
  }
  preds [bb25]
  succs [bb36]

bb27
  0: StorageDead(_44)
    SourceInfo(regex-lite/src/nfa.rs:589:43-589:44)
  1: StorageDead(_43)
    SourceInfo(regex-lite/src/nfa.rs:589:43-589:44)
  2: StorageDead(_42)
    SourceInfo(regex-lite/src/nfa.rs:589:43-589:44)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:589:13-589:45)
      kind: _40 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _41) -> [return: bb28, unwind: bb42]
  }
  preds [bb24]
  succs [bb28, bb42]

bb28
  0: StorageDead(_41)
    SourceInfo(regex-lite/src/nfa.rs:589:44-589:45)
  1: PlaceMention(_40)
    SourceInfo(regex-lite/src/nfa.rs:589:13-589:45)
  2: _45 = discriminant(_40)
    SourceInfo(regex-lite/src/nfa.rs:589:13-589:45)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:589:13-589:45)
      kind: switchInt(move _45) -> [0: bb31, 1: bb30, otherwise: bb29]
  }
  preds [bb27]
  succs [bb29, bb30, bb31]

bb29
  0: FakeRead(ForMatchedPlace(None), _40)
    SourceInfo(regex-lite/src/nfa.rs:589:13-589:45)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:589:13-589:45)
      kind: unreachable
  }
  preds [bb28]
  succs []

bb30
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:589:44-589:45)
      kind: falseEdge -> [real: bb32, imaginary: bb31]
  }
  preds [bb28]
  succs [bb31, bb32]

bb31
  0: StorageLive(_49)
    SourceInfo(regex-lite/src/nfa.rs:589:13-589:45)
  1: _49 = ((_40 as Continue).0: ())
    SourceInfo(regex-lite/src/nfa.rs:589:13-589:45)
  2: _39 = _49
    SourceInfo(regex-lite/src/nfa.rs:589:13-589:45)
  3: StorageDead(_49)
    SourceInfo(regex-lite/src/nfa.rs:589:44-589:45)
  4: StorageDead(_40)
    SourceInfo(regex-lite/src/nfa.rs:589:45-589:46)
  5: StorageDead(_39)
    SourceInfo(regex-lite/src/nfa.rs:589:45-589:46)
  6: StorageLive(_50)
    SourceInfo(regex-lite/src/nfa.rs:590:19-590:31)
  7: _50 = (_31.1: u32)
    SourceInfo(regex-lite/src/nfa.rs:590:19-590:31)
  8: _4 = move _50
    SourceInfo(regex-lite/src/nfa.rs:590:13-590:31)
  9: StorageDead(_50)
    SourceInfo(regex-lite/src/nfa.rs:590:30-590:31)
  10: _24 = const ()
    SourceInfo(regex-lite/src/nfa.rs:587:26-591:10)
  11: StorageDead(_31)
    SourceInfo(regex-lite/src/nfa.rs:591:9-591:10)
  12: StorageDead(_30)
    SourceInfo(regex-lite/src/nfa.rs:591:9-591:10)
  13: StorageDead(_27)
    SourceInfo(regex-lite/src/nfa.rs:591:9-591:10)
  14: StorageDead(_25)
    SourceInfo(regex-lite/src/nfa.rs:591:9-591:10)
  15: StorageDead(_24)
    SourceInfo(regex-lite/src/nfa.rs:591:9-591:10)
  16: _23 = const ()
    SourceInfo(regex-lite/src/nfa.rs:587:9-591:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:587:9-591:10)
      kind: goto -> bb14
  }
  preds [bb28, bb30]
  succs [bb14]

bb32
  0: StorageLive(_46)
    SourceInfo(regex-lite/src/nfa.rs:589:44-589:45)
  1: _46 = move ((_40 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:589:44-589:45)
  2: StorageLive(_48)
    SourceInfo(regex-lite/src/nfa.rs:589:44-589:45)
  3: _48 = move _46
    SourceInfo(regex-lite/src/nfa.rs:589:44-589:45)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:589:13-589:45)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _48) -> [return: bb33, unwind: bb42]
  }
  preds [bb30]
  succs [bb33, bb42]

bb33
  0: StorageDead(_48)
    SourceInfo(regex-lite/src/nfa.rs:589:44-589:45)
  1: StorageDead(_46)
    SourceInfo(regex-lite/src/nfa.rs:589:44-589:45)
  2: StorageDead(_40)
    SourceInfo(regex-lite/src/nfa.rs:589:45-589:46)
  3: StorageDead(_39)
    SourceInfo(regex-lite/src/nfa.rs:589:45-589:46)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb36
  }
  preds [bb32]
  succs [bb36]

bb34
  0: StorageDead(_22)
    SourceInfo(regex-lite/src/nfa.rs:591:9-591:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:591:9-591:10)
      kind: drop(_20) -> [return: bb35, unwind: bb45]
  }
  preds [bb20]
  succs [bb35, bb45]

bb35
  0: StorageDead(_20)
    SourceInfo(regex-lite/src/nfa.rs:591:9-591:10)
  1: StorageDead(_19)
    SourceInfo(regex-lite/src/nfa.rs:591:9-591:10)
  2: StorageLive(_51)
    SourceInfo(regex-lite/src/nfa.rs:592:12-592:38)
  3: StorageLive(_52)
    SourceInfo(regex-lite/src/nfa.rs:592:26-592:31)
  4: _52 = _3
    SourceInfo(regex-lite/src/nfa.rs:592:26-592:31)
  5: StorageLive(_53)
    SourceInfo(regex-lite/src/nfa.rs:592:33-592:36)
  6: _53 = _4
    SourceInfo(regex-lite/src/nfa.rs:592:33-592:36)
  7: _51 = nfa::ThompsonRef { start: move _52, end: move _53 }
    SourceInfo(regex-lite/src/nfa.rs:592:12-592:38)
  8: StorageDead(_53)
    SourceInfo(regex-lite/src/nfa.rs:592:37-592:38)
  9: StorageDead(_52)
    SourceInfo(regex-lite/src/nfa.rs:592:37-592:38)
  10: _0 = core::result::Result::<nfa::ThompsonRef, error::Error>::Ok(move _51)
    SourceInfo(regex-lite/src/nfa.rs:592:9-592:39)
  11: StorageDead(_51)
    SourceInfo(regex-lite/src/nfa.rs:592:38-592:39)
  12: StorageDead(_4)
    SourceInfo(regex-lite/src/nfa.rs:593:5-593:6)
  13: StorageDead(_3)
    SourceInfo(regex-lite/src/nfa.rs:593:5-593:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:593:5-593:6)
      kind: drop(_2) -> [return: bb41, unwind: bb46]
  }
  preds [bb34]
  succs [bb41, bb46]

bb36
  0: StorageDead(_31)
    SourceInfo(regex-lite/src/nfa.rs:591:9-591:10)
  1: StorageDead(_30)
    SourceInfo(regex-lite/src/nfa.rs:591:9-591:10)
  2: StorageDead(_27)
    SourceInfo(regex-lite/src/nfa.rs:591:9-591:10)
  3: StorageDead(_25)
    SourceInfo(regex-lite/src/nfa.rs:591:9-591:10)
  4: StorageDead(_24)
    SourceInfo(regex-lite/src/nfa.rs:591:9-591:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:591:9-591:10)
      kind: drop(_22) -> [return: bb37, unwind: bb43]
  }
  preds [bb26, bb33]
  succs [bb37, bb43]

bb37
  0: StorageDead(_22)
    SourceInfo(regex-lite/src/nfa.rs:591:9-591:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:591:9-591:10)
      kind: drop(_20) -> [return: bb38, unwind: bb45]
  }
  preds [bb36]
  succs [bb38, bb45]

bb38
  0: StorageDead(_20)
    SourceInfo(regex-lite/src/nfa.rs:591:9-591:10)
  1: StorageDead(_19)
    SourceInfo(regex-lite/src/nfa.rs:591:9-591:10)
  2: StorageDead(_4)
    SourceInfo(regex-lite/src/nfa.rs:593:5-593:6)
  3: StorageDead(_3)
    SourceInfo(regex-lite/src/nfa.rs:593:5-593:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb40
  }
  preds [bb37]
  succs [bb40]

bb39
  0: StorageDead(_6)
    SourceInfo(regex-lite/src/nfa.rs:586:10-586:11)
  1: StorageDead(_5)
    SourceInfo(regex-lite/src/nfa.rs:586:10-586:11)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb40
  }
  preds [bb11, bb12]
  succs [bb40]

bb40
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:593:5-593:6)
      kind: drop(_2) -> [return: bb41, unwind: bb46]
  }
  preds [bb38, bb39]
  succs [bb41, bb46]

bb41
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:593:6-593:6)
      kind: return
  }
  preds [bb35, bb40]
  succs []

bb42
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:591:9-591:10)
      kind: drop(_22) -> [return: bb43, unwind terminate(cleanup)]
  }
  preds [bb14, bb15, bb19, bb24, bb25, bb27, bb32]
  succs [bb43]

bb43
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:591:9-591:10)
      kind: drop(_20) -> [return: bb45, unwind terminate(cleanup)]
  }
  preds [bb20, bb36, bb42]
  succs [bb45]

bb44
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:587:24-587:25)
      kind: drop(_21) -> [return: bb45, unwind terminate(cleanup)]
  }
  preds [bb9]
  succs [bb45]

bb45
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:593:5-593:6)
      kind: drop(_2) -> [return: bb46, unwind terminate(cleanup)]
  }
  preds [bb0, bb4, bb5, bb10, bb34, bb37, bb43, bb44]
  succs [bb46]

bb46
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:579:5-593:6)
      kind: resume
  }
  preds [bb35, bb40, bb45]
  succs []

