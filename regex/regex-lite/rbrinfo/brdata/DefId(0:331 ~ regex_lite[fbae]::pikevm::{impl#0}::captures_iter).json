{
  "name": "regex_lite::pikevm::{impl#0}::captures_iter",
  "mod_info": {
    "name": "pikevm",
    "loc": "regex-lite/src/lib.rs:881:1:881:12"
  },
  "visible": true,
  "loc": "regex-lite/src/pikevm.rs:48:5:65:6",
  "doc": "/// Returns an iterator of non-overlapping capture matches in the given\n/// haystack.\n",
  "code": [
    "pub(crate) fn captures_iter<'r, 'h>(",
    "    &'r self,",
    "    cache: CachePoolGuard<'r>,",
    "    haystack: &'h [u8],",
    ") -> CapturesMatches<'r, 'h> {",
    "    // OK because the NFA wouldn't have compiled if this could overflow.",
    "    let len = self.nfa().group_len().checked_mul(2).unwrap();",
    "    CapturesMatches {",
    "        it: FindMatches {",
    "            pikevm: self,",
    "            cache,",
    "            haystack,",
    "            at: 0,",
    "            slots: vec![None; len],",
    "            last_match_end: None,",
    "        },",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "CapturesMatches {\n            it: FindMatches {\n                pikevm: self,\n                cache,\n                haystack,\n                at: 0,\n                slots: vec![None; len],\n                last_match_end: None,\n            },\n        }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}