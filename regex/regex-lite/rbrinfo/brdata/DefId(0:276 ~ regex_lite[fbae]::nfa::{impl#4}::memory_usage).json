{
  "name": "regex_lite::nfa::{impl#4}::memory_usage",
  "mod_info": {
    "name": "nfa",
    "loc": "regex-lite/src/lib.rs:880:1:880:9"
  },
  "visible": false,
  "loc": "regex-lite/src/nfa.rs:176:5:190:6",
  "doc": "/// Returns the heap memory usage of this NFA state in bytes.\n",
  "code": [
    "fn memory_usage(&self) -> usize {",
    "    match *self {",
    "        State::Char { .. }",
    "        | State::Goto { .. }",
    "        | State::Capture { .. }",
    "        | State::Fail { .. }",
    "        | State::Match => 0,",
    "        State::Splits { ref targets, .. } => {",
    "            targets.len() * size_of::<StateID>()",
    "        }",
    "        State::Ranges { ref ranges, .. } => {",
    "            ranges.len() * size_of::<(char, char)>()",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 7,
    "contra": 0,
    "min_set": 7
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*self matches State::Match",
          "norm": null,
          "value": "true",
          "line": 177,
          "bound": null
        },
        {
          "cond": "*self matches State::Match or State::Char { .. } or State::Fail { .. } or State::Capture { .. } or State::Goto { .. }",
          "norm": null,
          "value": "true",
          "line": 177,
          "bound": null
        }
      ],
      "ret": "0",
      "path": [
        0,
        4,
        5,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*self matches State::Fail { .. }",
          "norm": null,
          "value": "true",
          "line": 177,
          "bound": null
        },
        {
          "cond": "*self matches State::Match or State::Char { .. } or State::Fail { .. } or State::Capture { .. } or State::Goto { .. }",
          "norm": null,
          "value": "true",
          "line": 177,
          "bound": null
        }
      ],
      "ret": "0",
      "path": [
        0,
        4,
        5,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "*self matches State::Capture { .. }",
          "norm": null,
          "value": "true",
          "line": 177,
          "bound": null
        },
        {
          "cond": "*self matches State::Match or State::Char { .. } or State::Fail { .. } or State::Capture { .. } or State::Goto { .. }",
          "norm": null,
          "value": "true",
          "line": 177,
          "bound": null
        }
      ],
      "ret": "0",
      "path": [
        0,
        4,
        5,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "*self matches State::Goto { .. }",
          "norm": null,
          "value": "true",
          "line": 177,
          "bound": null
        },
        {
          "cond": "*self matches State::Match or State::Char { .. } or State::Fail { .. } or State::Capture { .. } or State::Goto { .. }",
          "norm": null,
          "value": "true",
          "line": 177,
          "bound": null
        }
      ],
      "ret": "0",
      "path": [
        0,
        4,
        5,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "*self matches State::Splits { ref targets, .. }",
          "norm": null,
          "value": "true",
          "line": 177,
          "bound": null
        },
        {
          "cond": "*self matches State::Splits { ref targets, .. }",
          "norm": null,
          "value": "true",
          "line": 177,
          "bound": null
        }
      ],
      "ret": "targets.len() * size_of::<StateID>()",
      "path": [
        0,
        2,
        6,
        7,
        8,
        9,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "*self matches State::Ranges { ref ranges, .. }",
          "norm": null,
          "value": "true",
          "line": 177,
          "bound": null
        }
      ],
      "ret": "ranges.len() * size_of::<(char, char)>()",
      "path": [
        0,
        3,
        10,
        11,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "*self matches State::Char { .. }",
          "norm": null,
          "value": "true",
          "line": 177,
          "bound": null
        },
        {
          "cond": "*self matches State::Match or State::Char { .. } or State::Fail { .. } or State::Capture { .. } or State::Goto { .. }",
          "norm": null,
          "value": "true",
          "line": 177,
          "bound": null
        }
      ],
      "ret": "0",
      "path": [
        0,
        4,
        5,
        13
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}