{
  "name": "regex_lite::nfa::{impl#5}::fmt",
  "mod_info": {
    "name": "nfa",
    "loc": "regex-lite/src/lib.rs:880:1:880:9"
  },
  "visible": true,
  "loc": "regex-lite/src/nfa.rs:206:5:246:6",
  "doc": "",
  "code": [
    "fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {",
    "    match *self {",
    "        State::Char { target, ch } => {",
    "            write!(f, \"{:?} => {:?}\", ch, target)",
    "        }",
    "        State::Ranges { target, ref ranges } => {",
    "            for (i, &(start, end)) in ranges.iter().enumerate() {",
    "                if i > 0 {",
    "                    write!(f, \", \")?;",
    "                }",
    "                write!(f, \"{:?}-{:?} => {:?}\", start, end, target)?;",
    "            }",
    "            Ok(())",
    "        }",
    "        State::Splits { ref targets, reverse } => {",
    "            write!(f, \"splits(\")?;",
    "            for (i, sid) in",
    "                State::iter_splits(targets, reverse).enumerate()",
    "            {",
    "                if i > 0 {",
    "                    write!(f, \", \")?;",
    "                }",
    "                write!(f, \"{:?}\", sid)?;",
    "            }",
    "            write!(f, \")\")",
    "        }",
    "        State::Goto { target, look: None } => {",
    "            write!(f, \"goto({:?})\", target)",
    "        }",
    "        State::Goto { target, look: Some(look) } => {",
    "            write!(f, \"{:?} => {:?}\", look, target)",
    "        }",
    "        State::Capture { target, slot } => {",
    "            write!(f, \"capture(slot={:?}) => {:?}\", slot, target,)",
    "        }",
    "        State::Fail => write!(f, \"FAIL\"),",
    "        State::Match => {",
    "            write!(f, \"MATCH\")",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 19,
    "contra": 4,
    "min_set": 16
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*self matches State::Match",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        10,
        111,
        112,
        118
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*self matches State::Fail",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "*self matches State::Fail",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        9,
        108,
        109,
        110,
        118
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "*self matches State::Capture { target, slot }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "*self matches State::Capture { target, slot }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        8,
        103,
        104,
        105,
        106,
        107,
        118
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "*self matches State::Goto { target, look: Some(look) } or State::Goto { target, look: None }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "*self matches State::Ranges { target, ref ranges }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "*self matches State::Goto { target, look: Some(look) }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        7,
        98,
        99,
        100,
        101,
        102,
        118
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "*self matches State::Goto { target, look: Some(look) } or State::Goto { target, look: None }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "*self matches State::Char { target, ch }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "*self matches State::Goto { target, look: None }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        5,
        6,
        94,
        95,
        96,
        97,
        118
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "*self matches State::Splits { ref targets, reverse }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "*self matches State::Splits { ref targets, reverse }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "write!(f, \"splits(\")?",
          "norm": null,
          "value": "Err/None",
          "line": 221,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        50,
        51,
        52,
        53,
        55,
        57,
        58,
        116,
        118
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "*self matches State::Splits { ref targets, reverse }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "*self matches State::Splits { ref targets, reverse }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "write!(f, \"splits(\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 221,
          "bound": null
        },
        {
          "cond": "(i, sid) in State::iter_splits(targets, reverse).enumerate()",
          "norm": null,
          "value": "true",
          "line": 223,
          "bound": null
        },
        {
          "cond": "i > 0",
          "norm": "0 < i",
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "write!(f, \", \")?",
          "norm": null,
          "value": "Err/None",
          "line": 226,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        50,
        51,
        52,
        53,
        56,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        68,
        70,
        71,
        72,
        73,
        75,
        77,
        78,
        113,
        114,
        115,
        116,
        118
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "*self matches State::Splits { ref targets, reverse }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "*self matches State::Splits { ref targets, reverse }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "write!(f, \"splits(\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 221,
          "bound": null
        },
        {
          "cond": "(i, sid) in State::iter_splits(targets, reverse).enumerate()",
          "norm": null,
          "value": "true",
          "line": 223,
          "bound": null
        },
        {
          "cond": "i > 0",
          "norm": "0 < i",
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "write!(f, \", \")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 226,
          "bound": null
        },
        {
          "cond": "write!(f, \"{:?}\", sid)?",
          "norm": null,
          "value": "Err/None",
          "line": 228,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        50,
        51,
        52,
        53,
        56,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        68,
        70,
        71,
        72,
        73,
        76,
        80,
        81,
        82,
        83,
        84,
        86,
        88,
        89,
        113,
        114,
        115,
        116,
        118
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "*self matches State::Splits { ref targets, reverse }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "*self matches State::Splits { ref targets, reverse }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "write!(f, \"splits(\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 221,
          "bound": null
        },
        {
          "cond": "(i, sid) in State::iter_splits(targets, reverse).enumerate()",
          "norm": null,
          "value": "true",
          "line": 223,
          "bound": null
        },
        {
          "cond": "i > 0",
          "norm": "0 < i",
          "value": "true",
          "line": 225,
          "bound": null
        },
        {
          "cond": "write!(f, \", \")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 226,
          "bound": null
        },
        {
          "cond": "write!(f, \"{:?}\", sid)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 228,
          "bound": null
        },
        {
          "cond": "(i, sid) in State::iter_splits(targets, reverse).enumerate()",
          "norm": null,
          "value": "false",
          "line": 223,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        50,
        51,
        52,
        53,
        56,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        68,
        70,
        71,
        72,
        73,
        76,
        80,
        81,
        82,
        83,
        84,
        87,
        63,
        64,
        65,
        67,
        69,
        90,
        91,
        92,
        93,
        118
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "*self matches State::Splits { ref targets, reverse }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "*self matches State::Splits { ref targets, reverse }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "write!(f, \"splits(\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 221,
          "bound": null
        },
        {
          "cond": "(i, sid) in State::iter_splits(targets, reverse).enumerate()",
          "norm": null,
          "value": "true",
          "line": 223,
          "bound": null
        },
        {
          "cond": "i > 0",
          "norm": "0 < i",
          "value": "false",
          "line": 225,
          "bound": "i == 0"
        },
        {
          "cond": "write!(f, \"{:?}\", sid)?",
          "norm": null,
          "value": "Err/None",
          "line": 228,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        50,
        51,
        52,
        53,
        56,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        68,
        79,
        80,
        81,
        82,
        83,
        84,
        86,
        88,
        89,
        113,
        114,
        115,
        116,
        118
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "*self matches State::Splits { ref targets, reverse }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "*self matches State::Splits { ref targets, reverse }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "write!(f, \"splits(\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 221,
          "bound": null
        },
        {
          "cond": "(i, sid) in State::iter_splits(targets, reverse).enumerate()",
          "norm": null,
          "value": "true",
          "line": 223,
          "bound": null
        },
        {
          "cond": "i > 0",
          "norm": "0 < i",
          "value": "false",
          "line": 225,
          "bound": "i == 0"
        },
        {
          "cond": "write!(f, \"{:?}\", sid)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 228,
          "bound": null
        },
        {
          "cond": "(i, sid) in State::iter_splits(targets, reverse).enumerate()",
          "norm": null,
          "value": "false",
          "line": 223,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        50,
        51,
        52,
        53,
        56,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        68,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        63,
        64,
        65,
        67,
        69,
        90,
        91,
        92,
        93,
        118
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "*self matches State::Splits { ref targets, reverse }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "*self matches State::Splits { ref targets, reverse }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "write!(f, \"splits(\")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 221,
          "bound": null
        },
        {
          "cond": "(i, sid) in State::iter_splits(targets, reverse).enumerate()",
          "norm": null,
          "value": "false",
          "line": 223,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        50,
        51,
        52,
        53,
        56,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        67,
        69,
        90,
        91,
        92,
        93,
        118
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "*self matches State::Ranges { target, ref ranges }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "*self matches State::Ranges { target, ref ranges }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "(i, &(start, end)) in ranges.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "i > 0",
          "norm": "0 < i",
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "write!(f, \", \")?",
          "norm": null,
          "value": "Err/None",
          "line": 214,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        26,
        28,
        29,
        30,
        31,
        33,
        35,
        36,
        117,
        118
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "*self matches State::Ranges { target, ref ranges }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "*self matches State::Ranges { target, ref ranges }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "(i, &(start, end)) in ranges.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "i > 0",
          "norm": "0 < i",
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "write!(f, \", \")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "write!(f, \"{:?}-{:?} => {:?}\", start, end, target)?",
          "norm": null,
          "value": "Err/None",
          "line": 216,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        26,
        28,
        29,
        30,
        31,
        34,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        46,
        48,
        49,
        117,
        118
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "*self matches State::Ranges { target, ref ranges }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "*self matches State::Ranges { target, ref ranges }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "(i, &(start, end)) in ranges.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "i > 0",
          "norm": "0 < i",
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "write!(f, \", \")?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "write!(f, \"{:?}-{:?} => {:?}\", start, end, target)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 216,
          "bound": null
        },
        {
          "cond": "(i, &(start, end)) in ranges.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 212,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        3,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        26,
        28,
        29,
        30,
        31,
        34,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        47,
        21,
        22,
        23,
        25,
        27,
        118
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "*self matches State::Ranges { target, ref ranges }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "*self matches State::Ranges { target, ref ranges }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "(i, &(start, end)) in ranges.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "i > 0",
          "norm": "0 < i",
          "value": "false",
          "line": 213,
          "bound": "i == 0"
        },
        {
          "cond": "write!(f, \"{:?}-{:?} => {:?}\", start, end, target)?",
          "norm": null,
          "value": "Err/None",
          "line": 216,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        26,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        46,
        48,
        49,
        117,
        118
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "*self matches State::Ranges { target, ref ranges }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "*self matches State::Ranges { target, ref ranges }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "(i, &(start, end)) in ranges.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "i > 0",
          "norm": "0 < i",
          "value": "false",
          "line": 213,
          "bound": "i == 0"
        },
        {
          "cond": "write!(f, \"{:?}-{:?} => {:?}\", start, end, target)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 216,
          "bound": null
        },
        {
          "cond": "(i, &(start, end)) in ranges.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 212,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        3,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        26,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        47,
        21,
        22,
        23,
        25,
        27,
        118
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "*self matches State::Ranges { target, ref ranges }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "*self matches State::Ranges { target, ref ranges }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "(i, &(start, end)) in ranges.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 212,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        3,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        25,
        27,
        118
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "*self matches State::Char { target, ch }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "*self matches State::Char { target, ch }",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        11,
        12,
        13,
        14,
        15,
        118
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}