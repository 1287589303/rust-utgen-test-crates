{
  "name": "regex_lite::pikevm::{impl#7}::contains",
  "mod_info": {
    "name": "pikevm",
    "loc": "regex-lite/src/lib.rs:881:1:881:12"
  },
  "visible": false,
  "loc": "regex-lite/src/pikevm.rs:880:5:883:6",
  "doc": "/// Returns true if and only if this set contains the given value.\n",
  "code": [
    "fn contains(&self, id: StateID) -> bool {",
    "    let index = self.sparse[id.as_usize()];",
    "    index.as_usize() < self.len() && self.dense[index.as_usize()] == id",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "index.as_usize() < self.len()",
          "norm": null,
          "value": "true",
          "line": 882,
          "bound": null
        }
      ],
      "ret": "self.dense[index.as_usize()] == id",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "index.as_usize() < self.len()",
          "norm": null,
          "value": "false",
          "line": 882,
          "bound": "index.as_usize() == self.len()"
        }
      ],
      "ret": "index.as_usize() < self.len() && self.dense[index.as_usize()] == id",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        9
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}