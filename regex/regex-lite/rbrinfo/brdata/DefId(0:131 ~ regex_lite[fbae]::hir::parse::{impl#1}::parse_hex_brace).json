{
  "name": "regex_lite::hir::parse::{impl#1}::parse_hex_brace",
  "mod_info": {
    "name": "hir::parse",
    "loc": "regex-lite/src/hir/mod.rs:5:1:5:11"
  },
  "visible": false,
  "loc": "regex-lite/src/hir/parse.rs:640:5:661:6",
  "doc": "/// Parse a hex representation of any Unicode scalar value. This expects\n/// the parser to be positioned at the opening brace `{` and will advance\n/// the parser to the first character following the closing brace `}`.\n",
  "code": [
    "fn parse_hex_brace(&self) -> Result<Hir, Error> {",
    "    let mut scratch = String::new();",
    "    while self.bump_and_bump_space() && self.char() != '}' {",
    "        if !is_hex(self.char()) {",
    "            return Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT));",
    "        }",
    "        scratch.push(self.char());",
    "    }",
    "    if self.is_done() {",
    "        return Err(Error::new(ERR_HEX_BRACE_UNEXPECTED_EOF));",
    "    }",
    "    assert_eq!(self.char(), '}');",
    "    self.bump_and_bump_space();",
    "",
    "    if scratch.is_empty() {",
    "        return Err(Error::new(ERR_HEX_BRACE_EMPTY));",
    "    }",
    "    match u32::from_str_radix(&scratch, 16).ok().and_then(char::from_u32) {",
    "        None => Err(Error::new(ERR_HEX_BRACE_INVALID)),",
    "        Some(ch) => Ok(self.hir_char(ch)),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 16,
    "contra": 5,
    "min_set": 7
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 642,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 642,
          "bound": null
        },
        {
          "cond": "is_hex(self.char())",
          "norm": null,
          "value": "true",
          "line": 643,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 642,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 648,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_HEX_BRACE_UNEXPECTED_EOF))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        14,
        2,
        3,
        4,
        16,
        17,
        18,
        19,
        20,
        43,
        44,
        45
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 642,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 642,
          "bound": null
        },
        {
          "cond": "is_hex(self.char())",
          "norm": null,
          "value": "true",
          "line": 643,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 642,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 648,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "scratch.is_empty()",
          "norm": null,
          "value": "true",
          "line": 654,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_HEX_BRACE_EMPTY))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        14,
        2,
        3,
        4,
        16,
        17,
        18,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        43,
        44,
        45
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 642,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 642,
          "bound": null
        },
        {
          "cond": "is_hex(self.char())",
          "norm": null,
          "value": "true",
          "line": 643,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 642,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 648,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "scratch.is_empty()",
          "norm": null,
          "value": "false",
          "line": 654,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(&scratch, 16).ok().and_then(char::from_u32) matches Some(ch)",
          "norm": null,
          "value": "true",
          "line": 657,
          "bound": null
        }
      ],
      "ret": "Ok(self.hir_char(ch))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        14,
        2,
        3,
        4,
        16,
        17,
        18,
        21,
        22,
        23,
        25,
        26,
        29,
        30,
        31,
        32,
        33,
        36,
        39,
        40,
        41,
        42,
        45
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 642,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 642,
          "bound": null
        },
        {
          "cond": "is_hex(self.char())",
          "norm": null,
          "value": "true",
          "line": 643,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 642,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 648,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "scratch.is_empty()",
          "norm": null,
          "value": "false",
          "line": 654,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(&scratch, 16).ok().and_then(char::from_u32) matches None",
          "norm": null,
          "value": "true",
          "line": 657,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(&scratch, 16).ok().and_then(char::from_u32) matches None",
          "norm": null,
          "value": "true",
          "line": 657,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_HEX_BRACE_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        14,
        2,
        3,
        4,
        16,
        17,
        18,
        21,
        22,
        23,
        25,
        26,
        29,
        30,
        31,
        32,
        33,
        35,
        37,
        38,
        41,
        42,
        45
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 642,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 642,
          "bound": null
        },
        {
          "cond": "is_hex(self.char())",
          "norm": null,
          "value": "true",
          "line": 643,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 642,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 648,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        14,
        2,
        3,
        4,
        16,
        17,
        18,
        21,
        22,
        24,
        46,
        47
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 642,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "true",
          "line": 642,
          "bound": null
        },
        {
          "cond": "is_hex(self.char())",
          "norm": null,
          "value": "false",
          "line": 643,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_HEX_BRACE_INVALID_DIGIT))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        43,
        44,
        45
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 642,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 642,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 648,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_HEX_BRACE_UNEXPECTED_EOF))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        15,
        17,
        18,
        19,
        20,
        43,
        44,
        45
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 642,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 642,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 648,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "scratch.is_empty()",
          "norm": null,
          "value": "true",
          "line": 654,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_HEX_BRACE_EMPTY))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        15,
        17,
        18,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        43,
        44,
        45
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 642,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 642,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 648,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "scratch.is_empty()",
          "norm": null,
          "value": "false",
          "line": 654,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(&scratch, 16).ok().and_then(char::from_u32) matches Some(ch)",
          "norm": null,
          "value": "true",
          "line": 657,
          "bound": null
        }
      ],
      "ret": "Ok(self.hir_char(ch))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        15,
        17,
        18,
        21,
        22,
        23,
        25,
        26,
        29,
        30,
        31,
        32,
        33,
        36,
        39,
        40,
        41,
        42,
        45
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 642,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 642,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 648,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "scratch.is_empty()",
          "norm": null,
          "value": "false",
          "line": 654,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(&scratch, 16).ok().and_then(char::from_u32) matches None",
          "norm": null,
          "value": "true",
          "line": 657,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(&scratch, 16).ok().and_then(char::from_u32) matches None",
          "norm": null,
          "value": "true",
          "line": 657,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_HEX_BRACE_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        15,
        17,
        18,
        21,
        22,
        23,
        25,
        26,
        29,
        30,
        31,
        32,
        33,
        35,
        37,
        38,
        41,
        42,
        45
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 642,
          "bound": null
        },
        {
          "cond": "self.char() != '}'",
          "norm": "'}' != self.char()",
          "value": "false",
          "line": 642,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 648,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        15,
        17,
        18,
        21,
        22,
        24,
        46,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 642,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 648,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_HEX_BRACE_UNEXPECTED_EOF))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        16,
        17,
        18,
        19,
        20,
        43,
        44,
        45
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 642,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 648,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "scratch.is_empty()",
          "norm": null,
          "value": "true",
          "line": 654,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_HEX_BRACE_EMPTY))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        16,
        17,
        18,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        43,
        44,
        45
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 642,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 648,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "scratch.is_empty()",
          "norm": null,
          "value": "false",
          "line": 654,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(&scratch, 16).ok().and_then(char::from_u32) matches Some(ch)",
          "norm": null,
          "value": "true",
          "line": 657,
          "bound": null
        }
      ],
      "ret": "Ok(self.hir_char(ch))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        16,
        17,
        18,
        21,
        22,
        23,
        25,
        26,
        29,
        30,
        31,
        32,
        33,
        36,
        39,
        40,
        41,
        42,
        45
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 642,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 648,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "scratch.is_empty()",
          "norm": null,
          "value": "false",
          "line": 654,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(&scratch, 16).ok().and_then(char::from_u32) matches None",
          "norm": null,
          "value": "true",
          "line": 657,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(&scratch, 16).ok().and_then(char::from_u32) matches None",
          "norm": null,
          "value": "true",
          "line": 657,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_HEX_BRACE_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        16,
        17,
        18,
        21,
        22,
        23,
        25,
        26,
        29,
        30,
        31,
        32,
        33,
        35,
        37,
        38,
        41,
        42,
        45
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 642,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 648,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        16,
        17,
        18,
        21,
        22,
        24,
        46,
        47
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}