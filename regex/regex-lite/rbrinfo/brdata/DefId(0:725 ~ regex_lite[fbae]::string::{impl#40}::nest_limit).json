{
  "name": "regex_lite::string::{impl#40}::nest_limit",
  "mod_info": {
    "name": "string",
    "loc": "regex-lite/src/lib.rs:884:1:884:12"
  },
  "visible": true,
  "loc": "regex-lite/src/string.rs:2972:5:2975:6",
  "doc": "/// Set the nesting limit for this parser.\n///\n/// The nesting limit controls how deep the abstract syntax tree is allowed\n/// to be. If the AST exceeds the given limit (e.g., with too many nested\n/// groups), then an error is returned by the parser.\n///\n/// The purpose of this limit is to act as a heuristic to prevent stack\n/// overflow for consumers that do structural induction on an AST using\n/// explicit recursion. While this crate never does this (instead using\n/// constant stack space and moving the call stack to the heap), other\n/// crates may.\n///\n/// This limit is not checked until the entire AST is parsed. Therefore, if\n/// callers want to put a limit on the amount of heap space used, then they\n/// should impose a limit on the length, in bytes, of the concrete pattern\n/// string. In particular, this is viable since this parser implementation\n/// will limit itself to heap space proportional to the length of the\n/// pattern string. See also the [untrusted inputs](crate#untrusted-input)\n/// section in the top-level crate documentation for more information about\n/// this.\n///\n/// Note that a nest limit of `0` will return a nest limit error for most\n/// patterns but not all. For example, a nest limit of `0` permits `a` but\n/// not `ab`, since `ab` requires an explicit concatenation, which results\n/// in a nest depth of `1`. In general, a nest limit is not something that\n/// manifests in an obvious way in the concrete syntax, therefore, it\n/// should not be used in a granular way.\n///\n/// # Example\n///\n/// ```\n/// use regex_lite::RegexBuilder;\n///\n/// assert!(RegexBuilder::new(r\"\").nest_limit(0).build().is_ok());\n/// assert!(RegexBuilder::new(r\"a\").nest_limit(0).build().is_ok());\n/// assert!(RegexBuilder::new(r\"(a)\").nest_limit(0).build().is_err());\n/// ```\n",
  "code": [
    "pub fn nest_limit(&mut self, limit: u32) -> &mut RegexBuilder {",
    "    self.hir_config.nest_limit = limit;",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}