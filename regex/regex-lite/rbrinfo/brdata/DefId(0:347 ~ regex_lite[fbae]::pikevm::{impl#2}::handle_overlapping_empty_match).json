{
  "name": "regex_lite::pikevm::{impl#2}::handle_overlapping_empty_match",
  "mod_info": {
    "name": "pikevm",
    "loc": "regex-lite/src/lib.rs:881:1:881:12"
  },
  "visible": false,
  "loc": "regex-lite/src/pikevm.rs:488:5:510:6",
  "doc": "/// Handles the special case of an empty match by ensuring that 1) the\n/// iterator always advances and 2) empty matches never overlap with other\n/// matches.\n///\n/// Note that we mark this cold and forcefully prevent inlining because\n/// handling empty matches like this is extremely rare and does require a\n/// bit of code, comparatively. Keeping this code out of the main iterator\n/// function keeps it smaller and more amenable to inlining itself.\n",
  "code": [
    "fn handle_overlapping_empty_match(",
    "    &mut self,",
    "    mut m: (usize, usize),",
    ") -> Option<(usize, usize)> {",
    "    assert!(m.0 >= m.1);",
    "    if Some(m.1) == self.last_match_end {",
    "        let len =",
    "            core::cmp::max(1, utf8::decode(&self.haystack[self.at..]).1);",
    "        self.at = self.at.checked_add(len).unwrap();",
    "        if !self.pikevm.search(",
    "            &mut self.cache,",
    "            self.haystack,",
    "            self.at,",
    "            self.haystack.len(),",
    "            false,",
    "            &mut self.slots,",
    "        ) {",
    "            return None;",
    "        }",
    "        m = (self.slots[0].unwrap().get(), self.slots[1].unwrap().get());",
    "    }",
    "    Some(m)",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "m.0 >= m.1",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": "m.0 == m.1"
        },
        {
          "cond": "Some(m.1) == self.last_match_end",
          "norm": null,
          "value": "true",
          "line": 493,
          "bound": null
        },
        {
          "cond": "self.pikevm.search(\n                &mut self.cache,\n                self.haystack,\n                self.at,\n                self.haystack.len(),\n                false,\n                &mut self.slots,\n            )",
          "norm": null,
          "value": "true",
          "line": 497,
          "bound": null
        }
      ],
      "ret": "Some(m)",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        23,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "m.0 >= m.1",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": "m.0 == m.1"
        },
        {
          "cond": "Some(m.1) == self.last_match_end",
          "norm": null,
          "value": "true",
          "line": 493,
          "bound": null
        },
        {
          "cond": "self.pikevm.search(\n                &mut self.cache,\n                self.haystack,\n                self.at,\n                self.haystack.len(),\n                false,\n                &mut self.slots,\n            )",
          "norm": null,
          "value": "false",
          "line": 497,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "m.0 >= m.1",
          "norm": null,
          "value": "true",
          "line": 492,
          "bound": "m.0 == m.1"
        },
        {
          "cond": "Some(m.1) == self.last_match_end",
          "norm": null,
          "value": "false",
          "line": 493,
          "bound": null
        }
      ],
      "ret": "Some(m)",
      "path": [
        0,
        1,
        3,
        22,
        23,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "m.0 >= m.1",
          "norm": null,
          "value": "false",
          "line": 492,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        25
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}