{
  "name": "regex_lite::string::{impl#40}::dot_matches_new_line",
  "mod_info": {
    "name": "string",
    "loc": "regex-lite/src/lib.rs:884:1:884:12"
  },
  "visible": true,
  "loc": "regex-lite/src/string.rs:2753:5:2756:6",
  "doc": "/// This configures dot-matches-new-line mode for the entire pattern.\n///\n/// Perhaps surprisingly, the default behavior for `.` is not to match\n/// any character, but rather, to match any character except for the line\n/// terminator (which is `\\n` by default). When this mode is enabled, the\n/// behavior changes such that `.` truly matches any character.\n///\n/// This setting can also be configured using the inline flag `s` in the\n/// pattern.\n///\n/// The default for this is `false`.\n///\n/// # Example\n///\n/// ```\n/// use regex_lite::RegexBuilder;\n///\n/// let re = RegexBuilder::new(r\"foo.bar\")\n///     .dot_matches_new_line(true)\n///     .build()\n///     .unwrap();\n/// let hay = \"foo\\nbar\";\n/// assert_eq!(Some(\"foo\\nbar\"), re.find(hay).map(|m| m.as_str()));\n/// ```\n",
  "code": [
    "pub fn dot_matches_new_line(&mut self, yes: bool) -> &mut RegexBuilder {",
    "    self.hir_config.flags.dot_matches_new_line = yes;",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}