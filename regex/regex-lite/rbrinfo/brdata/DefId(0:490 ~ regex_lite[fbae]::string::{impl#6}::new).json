{
  "name": "regex_lite::string::{impl#6}::new",
  "mod_info": {
    "name": "string",
    "loc": "regex-lite/src/lib.rs:884:1:884:12"
  },
  "visible": true,
  "loc": "regex-lite/src/string.rs:168:5:170:6",
  "doc": "/// Compiles a regular expression. Once compiled, it can be used repeatedly\n/// to search, split or replace substrings in a haystack.\n///\n/// Note that regex compilation tends to be a somewhat expensive process,\n/// and unlike higher level environments, compilation is not automatically\n/// cached for you. One should endeavor to compile a regex once and then\n/// reuse it. For example, it's a bad idea to compile the same regex\n/// repeatedly in a loop.\n///\n/// # Errors\n///\n/// If an invalid pattern is given, then an error is returned.\n/// An error is also returned if the pattern is valid, but would\n/// produce a regex that is bigger than the configured size limit via\n/// [`RegexBuilder::size_limit`]. (A reasonable size limit is enabled by\n/// default.)\n///\n/// # Example\n///\n/// ```\n/// use regex_lite::Regex;\n///\n/// // An Invalid pattern because of an unclosed parenthesis\n/// assert!(Regex::new(r\"foo(bar\").is_err());\n/// // An invalid pattern because the regex would be too big\n/// // because Unicode tends to inflate things.\n/// assert!(Regex::new(r\"\\w{1000000}\").is_err());\n/// ```\n",
  "code": [
    "pub fn new(pattern: &str) -> Result<Regex, Error> {",
    "    RegexBuilder::new(pattern).build()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}