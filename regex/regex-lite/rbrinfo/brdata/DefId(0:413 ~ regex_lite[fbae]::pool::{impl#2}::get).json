{
  "name": "regex_lite::pool::{impl#2}::get",
  "mod_info": {
    "name": "pool",
    "loc": "regex-lite/src/lib.rs:882:1:882:10"
  },
  "visible": true,
  "loc": "regex-lite/src/pool.rs:56:5:63:6",
  "doc": "/// Get a value from the pool. This may block if another thread is also\n/// attempting to retrieve a value from the pool.\n",
  "code": [
    "pub(crate) fn get(&self) -> PoolGuard<'_, T, F> {",
    "    let mut stack = self.stack.lock().unwrap();",
    "    let value = match stack.pop() {",
    "        None => Box::new((self.create)()),",
    "        Some(value) => value,",
    "    };",
    "    PoolGuard { pool: self, value: Some(value) }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "stack.pop() matches Some(value)",
          "norm": null,
          "value": "true",
          "line": 58,
          "bound": null
        }
      ],
      "ret": "PoolGuard { pool: self, value: Some(value) }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        11,
        12,
        13,
        14,
        15,
        16,
        17
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 58,
          "bound": null
        },
        {
          "cond": "stack.pop() matches None",
          "norm": null,
          "value": "true",
          "line": 58,
          "bound": null
        }
      ],
      "ret": "PoolGuard { pool: self, value: Some(value) }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        17
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}