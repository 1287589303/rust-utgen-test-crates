{
  "name": "regex_lite::hir::{impl#6}::drop",
  "mod_info": {
    "name": "hir",
    "loc": "regex-lite/src/lib.rs:877:1:877:9"
  },
  "visible": true,
  "loc": "regex-lite/src/hir/mod.rs:770:5:808:6",
  "doc": "",
  "code": [
    "fn drop(&mut self) {",
    "    use core::mem;",
    "",
    "    match *self.kind() {",
    "        HirKind::Empty",
    "        | HirKind::Char(_)",
    "        | HirKind::Class(_)",
    "        | HirKind::Look(_) => return,",
    "        HirKind::Capture(ref x) if x.sub.kind.subs().is_empty() => return,",
    "        HirKind::Repetition(ref x) if x.sub.kind.subs().is_empty() => {",
    "            return",
    "        }",
    "        HirKind::Concat(ref x) if x.is_empty() => return,",
    "        HirKind::Alternation(ref x) if x.is_empty() => return,",
    "        _ => {}",
    "    }",
    "",
    "    let mut stack = vec![mem::replace(self, Hir::empty())];",
    "    while let Some(mut expr) = stack.pop() {",
    "        match expr.kind {",
    "            HirKind::Empty",
    "            | HirKind::Char(_)",
    "            | HirKind::Class(_)",
    "            | HirKind::Look(_) => {}",
    "            HirKind::Capture(ref mut x) => {",
    "                stack.push(mem::replace(&mut x.sub, Hir::empty()));",
    "            }",
    "            HirKind::Repetition(ref mut x) => {",
    "                stack.push(mem::replace(&mut x.sub, Hir::empty()));",
    "            }",
    "            HirKind::Concat(ref mut x) => {",
    "                stack.extend(x.drain(..));",
    "            }",
    "            HirKind::Alternation(ref mut x) => {",
    "                stack.extend(x.drain(..));",
    "            }",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 53,
    "contra": 0,
    "min_set": 16
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Concat(ref x)",
          "norm": null,
          "value": "false",
          "line": 782,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Alternation(ref x)",
          "norm": null,
          "value": "false",
          "line": 783,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Repetition(ref x)",
          "norm": null,
          "value": "false",
          "line": 779,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Char(_)",
          "norm": null,
          "value": "false",
          "line": 775,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Look(_)",
          "norm": null,
          "value": "false",
          "line": 777,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Class(_)",
          "norm": null,
          "value": "false",
          "line": 776,
          "bound": null
        },
        {
          "cond": "*self.kind() matches _",
          "norm": null,
          "value": "true",
          "line": 784,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Empty",
          "norm": null,
          "value": "false",
          "line": 774,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Capture(ref x)",
          "norm": null,
          "value": "false",
          "line": 778,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Concat(ref x)",
          "norm": null,
          "value": "false",
          "line": 782,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Alternation(ref x)",
          "norm": null,
          "value": "false",
          "line": 783,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Repetition(ref x)",
          "norm": null,
          "value": "false",
          "line": 779,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Char(_)",
          "norm": null,
          "value": "false",
          "line": 775,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Look(_)",
          "norm": null,
          "value": "false",
          "line": 777,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Class(_)",
          "norm": null,
          "value": "false",
          "line": 776,
          "bound": null
        },
        {
          "cond": "*self.kind() matches _",
          "norm": null,
          "value": "true",
          "line": 784,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Empty",
          "norm": null,
          "value": "false",
          "line": 774,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Capture(ref x)",
          "norm": null,
          "value": "false",
          "line": 778,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Alternation(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        43,
        57,
        58,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Concat(ref x)",
          "norm": null,
          "value": "false",
          "line": 782,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Alternation(ref x)",
          "norm": null,
          "value": "false",
          "line": 783,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Repetition(ref x)",
          "norm": null,
          "value": "false",
          "line": 779,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Char(_)",
          "norm": null,
          "value": "false",
          "line": 775,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Look(_)",
          "norm": null,
          "value": "false",
          "line": 777,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Class(_)",
          "norm": null,
          "value": "false",
          "line": 776,
          "bound": null
        },
        {
          "cond": "*self.kind() matches _",
          "norm": null,
          "value": "true",
          "line": 784,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Empty",
          "norm": null,
          "value": "false",
          "line": 774,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Capture(ref x)",
          "norm": null,
          "value": "false",
          "line": 778,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Concat(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Concat(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        42,
        54,
        55,
        56,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Concat(ref x)",
          "norm": null,
          "value": "false",
          "line": 782,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Alternation(ref x)",
          "norm": null,
          "value": "false",
          "line": 783,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Repetition(ref x)",
          "norm": null,
          "value": "false",
          "line": 779,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Char(_)",
          "norm": null,
          "value": "false",
          "line": 775,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Look(_)",
          "norm": null,
          "value": "false",
          "line": 777,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Class(_)",
          "norm": null,
          "value": "false",
          "line": 776,
          "bound": null
        },
        {
          "cond": "*self.kind() matches _",
          "norm": null,
          "value": "true",
          "line": 784,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Empty",
          "norm": null,
          "value": "false",
          "line": 774,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Capture(ref x)",
          "norm": null,
          "value": "false",
          "line": 778,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Capture(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Capture(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        40,
        46,
        47,
        48,
        49,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Concat(ref x)",
          "norm": null,
          "value": "false",
          "line": 782,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Alternation(ref x)",
          "norm": null,
          "value": "false",
          "line": 783,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Repetition(ref x)",
          "norm": null,
          "value": "false",
          "line": 779,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Char(_)",
          "norm": null,
          "value": "false",
          "line": 775,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Look(_)",
          "norm": null,
          "value": "false",
          "line": 777,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Class(_)",
          "norm": null,
          "value": "false",
          "line": 776,
          "bound": null
        },
        {
          "cond": "*self.kind() matches _",
          "norm": null,
          "value": "true",
          "line": 784,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Empty",
          "norm": null,
          "value": "false",
          "line": 774,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Capture(ref x)",
          "norm": null,
          "value": "false",
          "line": 778,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Repetition(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Repetition(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        41,
        50,
        51,
        52,
        53,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Concat(ref x)",
          "norm": null,
          "value": "false",
          "line": 782,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Alternation(ref x)",
          "norm": null,
          "value": "false",
          "line": 783,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Repetition(ref x)",
          "norm": null,
          "value": "false",
          "line": 779,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Char(_)",
          "norm": null,
          "value": "false",
          "line": 775,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Look(_)",
          "norm": null,
          "value": "false",
          "line": 777,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Class(_)",
          "norm": null,
          "value": "false",
          "line": 776,
          "bound": null
        },
        {
          "cond": "*self.kind() matches _",
          "norm": null,
          "value": "true",
          "line": 784,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Empty",
          "norm": null,
          "value": "false",
          "line": 774,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Capture(ref x)",
          "norm": null,
          "value": "false",
          "line": 778,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Look(_)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Class(_) or HirKind::Char(_) or HirKind::Empty or HirKind::Look(_)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        44,
        45,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Concat(ref x)",
          "norm": null,
          "value": "false",
          "line": 782,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Alternation(ref x)",
          "norm": null,
          "value": "false",
          "line": 783,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Repetition(ref x)",
          "norm": null,
          "value": "false",
          "line": 779,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Char(_)",
          "norm": null,
          "value": "false",
          "line": 775,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Look(_)",
          "norm": null,
          "value": "false",
          "line": 777,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Class(_)",
          "norm": null,
          "value": "false",
          "line": 776,
          "bound": null
        },
        {
          "cond": "*self.kind() matches _",
          "norm": null,
          "value": "true",
          "line": 784,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Empty",
          "norm": null,
          "value": "false",
          "line": 774,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Capture(ref x)",
          "norm": null,
          "value": "false",
          "line": 778,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Class(_)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Class(_) or HirKind::Char(_) or HirKind::Empty or HirKind::Look(_)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        44,
        45,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Concat(ref x)",
          "norm": null,
          "value": "false",
          "line": 782,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Alternation(ref x)",
          "norm": null,
          "value": "false",
          "line": 783,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Repetition(ref x)",
          "norm": null,
          "value": "false",
          "line": 779,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Char(_)",
          "norm": null,
          "value": "false",
          "line": 775,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Look(_)",
          "norm": null,
          "value": "false",
          "line": 777,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Class(_)",
          "norm": null,
          "value": "false",
          "line": 776,
          "bound": null
        },
        {
          "cond": "*self.kind() matches _",
          "norm": null,
          "value": "true",
          "line": 784,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Empty",
          "norm": null,
          "value": "false",
          "line": 774,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Capture(ref x)",
          "norm": null,
          "value": "false",
          "line": 778,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Char(_)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Class(_) or HirKind::Char(_) or HirKind::Empty or HirKind::Look(_)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        44,
        45,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Concat(ref x)",
          "norm": null,
          "value": "false",
          "line": 782,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Alternation(ref x)",
          "norm": null,
          "value": "false",
          "line": 783,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Repetition(ref x)",
          "norm": null,
          "value": "false",
          "line": 779,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Char(_)",
          "norm": null,
          "value": "false",
          "line": 775,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Look(_)",
          "norm": null,
          "value": "false",
          "line": 777,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Class(_)",
          "norm": null,
          "value": "false",
          "line": 776,
          "bound": null
        },
        {
          "cond": "*self.kind() matches _",
          "norm": null,
          "value": "true",
          "line": 784,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Empty",
          "norm": null,
          "value": "false",
          "line": 774,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Capture(ref x)",
          "norm": null,
          "value": "false",
          "line": 778,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Empty",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Class(_) or HirKind::Char(_) or HirKind::Empty or HirKind::Look(_)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        44,
        45,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.is_empty()",
          "norm": null,
          "value": "true",
          "line": 783,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        23,
        24,
        25,
        65,
        66
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.is_empty()",
          "norm": null,
          "value": "false",
          "line": 783,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        23,
        24,
        26,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.is_empty()",
          "norm": null,
          "value": "false",
          "line": 783,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Alternation(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        23,
        24,
        26,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        43,
        57,
        58,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.is_empty()",
          "norm": null,
          "value": "false",
          "line": 783,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Concat(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Concat(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        23,
        24,
        26,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        42,
        54,
        55,
        56,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.is_empty()",
          "norm": null,
          "value": "false",
          "line": 783,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Capture(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Capture(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        23,
        24,
        26,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        40,
        46,
        47,
        48,
        49,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.is_empty()",
          "norm": null,
          "value": "false",
          "line": 783,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Repetition(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Repetition(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        23,
        24,
        26,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        41,
        50,
        51,
        52,
        53,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.is_empty()",
          "norm": null,
          "value": "false",
          "line": 783,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Look(_)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Class(_) or HirKind::Char(_) or HirKind::Empty or HirKind::Look(_)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        23,
        24,
        26,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        44,
        45,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.is_empty()",
          "norm": null,
          "value": "false",
          "line": 783,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Class(_)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Class(_) or HirKind::Char(_) or HirKind::Empty or HirKind::Look(_)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        23,
        24,
        26,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        44,
        45,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.is_empty()",
          "norm": null,
          "value": "false",
          "line": 783,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Char(_)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Class(_) or HirKind::Char(_) or HirKind::Empty or HirKind::Look(_)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        23,
        24,
        26,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        44,
        45,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Alternation(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.is_empty()",
          "norm": null,
          "value": "false",
          "line": 783,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Empty",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Class(_) or HirKind::Char(_) or HirKind::Empty or HirKind::Look(_)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        23,
        24,
        26,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        44,
        45,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.is_empty()",
          "norm": null,
          "value": "true",
          "line": 782,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        5,
        19,
        20,
        21,
        65,
        66
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.is_empty()",
          "norm": null,
          "value": "false",
          "line": 782,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        5,
        19,
        20,
        22,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.is_empty()",
          "norm": null,
          "value": "false",
          "line": 782,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Alternation(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        5,
        19,
        20,
        22,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        43,
        57,
        58,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.is_empty()",
          "norm": null,
          "value": "false",
          "line": 782,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Concat(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Concat(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        5,
        19,
        20,
        22,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        42,
        54,
        55,
        56,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.is_empty()",
          "norm": null,
          "value": "false",
          "line": 782,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Capture(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Capture(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        5,
        19,
        20,
        22,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        40,
        46,
        47,
        48,
        49,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.is_empty()",
          "norm": null,
          "value": "false",
          "line": 782,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Repetition(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Repetition(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        5,
        19,
        20,
        22,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        41,
        50,
        51,
        52,
        53,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.is_empty()",
          "norm": null,
          "value": "false",
          "line": 782,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Look(_)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Class(_) or HirKind::Char(_) or HirKind::Empty or HirKind::Look(_)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        5,
        19,
        20,
        22,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        44,
        45,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.is_empty()",
          "norm": null,
          "value": "false",
          "line": 782,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Class(_)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Class(_) or HirKind::Char(_) or HirKind::Empty or HirKind::Look(_)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        5,
        19,
        20,
        22,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        44,
        45,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.is_empty()",
          "norm": null,
          "value": "false",
          "line": 782,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Char(_)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Class(_) or HirKind::Char(_) or HirKind::Empty or HirKind::Look(_)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        5,
        19,
        20,
        22,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        44,
        45,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 29,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Concat(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.is_empty()",
          "norm": null,
          "value": "false",
          "line": 782,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Empty",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Class(_) or HirKind::Char(_) or HirKind::Empty or HirKind::Look(_)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        5,
        19,
        20,
        22,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        44,
        45,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 30,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Capture(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Capture(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.sub.kind.subs().is_empty()",
          "norm": null,
          "value": "true",
          "line": 778,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        9,
        10,
        11,
        12,
        65,
        66
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 31,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Capture(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Capture(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.sub.kind.subs().is_empty()",
          "norm": null,
          "value": "false",
          "line": 778,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        9,
        10,
        11,
        13,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 32,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Capture(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Capture(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.sub.kind.subs().is_empty()",
          "norm": null,
          "value": "false",
          "line": 778,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Alternation(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        9,
        10,
        11,
        13,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        43,
        57,
        58,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 33,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Capture(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Capture(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.sub.kind.subs().is_empty()",
          "norm": null,
          "value": "false",
          "line": 778,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Concat(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Concat(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        9,
        10,
        11,
        13,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        42,
        54,
        55,
        56,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 34,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Capture(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Capture(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.sub.kind.subs().is_empty()",
          "norm": null,
          "value": "false",
          "line": 778,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Capture(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Capture(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        9,
        10,
        11,
        13,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        40,
        46,
        47,
        48,
        49,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 35,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Capture(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Capture(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.sub.kind.subs().is_empty()",
          "norm": null,
          "value": "false",
          "line": 778,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Repetition(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Repetition(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        9,
        10,
        11,
        13,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        41,
        50,
        51,
        52,
        53,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 36,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Capture(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Capture(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.sub.kind.subs().is_empty()",
          "norm": null,
          "value": "false",
          "line": 778,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Look(_)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Class(_) or HirKind::Char(_) or HirKind::Empty or HirKind::Look(_)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        9,
        10,
        11,
        13,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        44,
        45,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 37,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Capture(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Capture(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.sub.kind.subs().is_empty()",
          "norm": null,
          "value": "false",
          "line": 778,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Class(_)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Class(_) or HirKind::Char(_) or HirKind::Empty or HirKind::Look(_)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        9,
        10,
        11,
        13,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        44,
        45,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 38,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Capture(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Capture(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.sub.kind.subs().is_empty()",
          "norm": null,
          "value": "false",
          "line": 778,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Char(_)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Class(_) or HirKind::Char(_) or HirKind::Empty or HirKind::Look(_)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        9,
        10,
        11,
        13,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        44,
        45,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 39,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Capture(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Capture(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.sub.kind.subs().is_empty()",
          "norm": null,
          "value": "false",
          "line": 778,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Empty",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Class(_) or HirKind::Char(_) or HirKind::Empty or HirKind::Look(_)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        9,
        10,
        11,
        13,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        44,
        45,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 40,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.sub.kind.subs().is_empty()",
          "norm": null,
          "value": "true",
          "line": 779,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        14,
        15,
        16,
        17,
        65,
        66
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 41,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.sub.kind.subs().is_empty()",
          "norm": null,
          "value": "false",
          "line": 779,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        14,
        15,
        16,
        18,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 42,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.sub.kind.subs().is_empty()",
          "norm": null,
          "value": "false",
          "line": 779,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Alternation(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        14,
        15,
        16,
        18,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        43,
        57,
        58,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 43,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.sub.kind.subs().is_empty()",
          "norm": null,
          "value": "false",
          "line": 779,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Concat(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Concat(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        14,
        15,
        16,
        18,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        42,
        54,
        55,
        56,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 44,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.sub.kind.subs().is_empty()",
          "norm": null,
          "value": "false",
          "line": 779,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Capture(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Capture(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        14,
        15,
        16,
        18,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        40,
        46,
        47,
        48,
        49,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 45,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.sub.kind.subs().is_empty()",
          "norm": null,
          "value": "false",
          "line": 779,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Repetition(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Repetition(ref mut x)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        14,
        15,
        16,
        18,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        41,
        50,
        51,
        52,
        53,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 46,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.sub.kind.subs().is_empty()",
          "norm": null,
          "value": "false",
          "line": 779,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Look(_)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Class(_) or HirKind::Char(_) or HirKind::Empty or HirKind::Look(_)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        14,
        15,
        16,
        18,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        44,
        45,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 47,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.sub.kind.subs().is_empty()",
          "norm": null,
          "value": "false",
          "line": 779,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Class(_)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Class(_) or HirKind::Char(_) or HirKind::Empty or HirKind::Look(_)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        14,
        15,
        16,
        18,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        44,
        45,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 48,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.sub.kind.subs().is_empty()",
          "norm": null,
          "value": "false",
          "line": 779,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Char(_)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Class(_) or HirKind::Char(_) or HirKind::Empty or HirKind::Look(_)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        14,
        15,
        16,
        18,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        44,
        45,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 49,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Repetition(ref x)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "x.sub.kind.subs().is_empty()",
          "norm": null,
          "value": "false",
          "line": 779,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Empty",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "expr.kind matches HirKind::Class(_) or HirKind::Char(_) or HirKind::Empty or HirKind::Look(_)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "let Some(mut expr) = stack.pop()",
          "norm": null,
          "value": "true",
          "line": 788,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        14,
        15,
        16,
        18,
        2,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        44,
        45,
        59,
        61,
        62,
        34,
        35,
        36,
        60,
        63,
        64,
        66
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 50,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Look(_)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Char(_) or HirKind::Look(_) or HirKind::Class(_) or HirKind::Empty",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        7,
        8,
        65,
        66
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 51,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Class(_)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Char(_) or HirKind::Look(_) or HirKind::Class(_) or HirKind::Empty",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        7,
        8,
        65,
        66
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 52,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Char(_)",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Char(_) or HirKind::Look(_) or HirKind::Class(_) or HirKind::Empty",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        7,
        8,
        65,
        66
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 53,
      "conds": [
        {
          "cond": "*self.kind() matches HirKind::Empty",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        },
        {
          "cond": "*self.kind() matches HirKind::Char(_) or HirKind::Look(_) or HirKind::Class(_) or HirKind::Empty",
          "norm": null,
          "value": "true",
          "line": 773,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        7,
        8,
        65,
        66
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}