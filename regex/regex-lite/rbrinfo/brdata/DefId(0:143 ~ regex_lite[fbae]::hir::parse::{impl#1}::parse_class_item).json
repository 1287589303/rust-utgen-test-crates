{
  "name": "regex_lite::hir::parse::{impl#1}::parse_class_item",
  "mod_info": {
    "name": "hir::parse",
    "loc": "regex-lite/src/hir/mod.rs:5:1:5:11"
  },
  "visible": false,
  "loc": "regex-lite/src/hir/parse.rs:1122:5:1130:6",
  "doc": "/// Parse a single item in a character class as a primitive, where the\n/// primitive either consists of a verbatim literal or a single escape\n/// sequence.\n///\n/// This assumes the parser is positioned at the beginning of a primitive,\n/// and advances the parser to the first position after the primitive if\n/// successful.\n///\n/// Note that it is the caller's responsibility to report an error if an\n/// illegal primitive was parsed.\n",
  "code": [
    "fn parse_class_item(&self) -> Result<Hir, Error> {",
    "    let ch = self.char();",
    "    self.bump();",
    "    if ch == '\\\\' {",
    "        self.parse_escape()",
    "    } else {",
    "        Ok(Hir::char(ch))",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "ch == '\\\\'",
          "norm": "'\\\\' == ch",
          "value": "false",
          "line": 1125,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "ch == '\\\\'",
          "norm": "'\\\\' == ch",
          "value": "true",
          "line": 1125,
          "bound": null
        }
      ],
      "ret": "Ok(Hir::char(ch))",
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}