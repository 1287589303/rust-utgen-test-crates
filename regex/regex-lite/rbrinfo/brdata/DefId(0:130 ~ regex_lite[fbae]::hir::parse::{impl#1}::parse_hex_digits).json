{
  "name": "regex_lite::hir::parse::{impl#1}::parse_hex_digits",
  "mod_info": {
    "name": "hir::parse",
    "loc": "regex-lite/src/hir/mod.rs:5:1:5:11"
  },
  "visible": false,
  "loc": "regex-lite/src/hir/parse.rs:617:5:635:6",
  "doc": "/// Parse an N-digit hex representation of a Unicode codepoint. This\n/// expects the parser to be positioned at the first digit and will advance\n/// the parser to the first character immediately following the escape\n/// sequence.\n///\n/// The number of digits given must be 2 (for `\\xNN`), 4 (for `\\uNNNN`)\n/// or 8 (for `\\UNNNNNNNN`).\n",
  "code": [
    "fn parse_hex_digits(&self, digit_len: usize) -> Result<Hir, Error> {",
    "    let mut scratch = String::new();",
    "    for i in 0..digit_len {",
    "        if i > 0 && !self.bump_and_bump_space() {",
    "            return Err(Error::new(ERR_HEX_FIXED_UNEXPECTED_EOF));",
    "        }",
    "        if !is_hex(self.char()) {",
    "            return Err(Error::new(ERR_HEX_FIXED_INVALID_DIGIT));",
    "        }",
    "        scratch.push(self.char());",
    "    }",
    "    // The final bump just moves the parser past the literal, which may",
    "    // be EOF.",
    "    self.bump_and_bump_space();",
    "    match u32::from_str_radix(&scratch, 16).ok().and_then(char::from_u32) {",
    "        None => Err(Error::new(ERR_HEX_FIXED_INVALID)),",
    "        Some(ch) => Ok(self.hir_char(ch)),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 9,
    "contra": 4,
    "min_set": 6
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "i in 0..digit_len",
          "norm": null,
          "value": "true",
          "line": 619,
          "bound": null
        },
        {
          "cond": "i > 0",
          "norm": "0 < i",
          "value": "true",
          "line": 620,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 620,
          "bound": null
        },
        {
          "cond": "is_hex(self.char())",
          "norm": null,
          "value": "true",
          "line": 623,
          "bound": null
        },
        {
          "cond": "i in 0..digit_len",
          "norm": null,
          "value": "false",
          "line": 619,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(&scratch, 16).ok().and_then(char::from_u32) matches Some(ch)",
          "norm": null,
          "value": "true",
          "line": 631,
          "bound": null
        }
      ],
      "ret": "Ok(self.hir_char(ch))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        12,
        16,
        17,
        18,
        19,
        22,
        23,
        3,
        4,
        5,
        7,
        9,
        24,
        25,
        26,
        27,
        28,
        31,
        34,
        35,
        36,
        37,
        40
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "i in 0..digit_len",
          "norm": null,
          "value": "true",
          "line": 619,
          "bound": null
        },
        {
          "cond": "i > 0",
          "norm": "0 < i",
          "value": "true",
          "line": 620,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 620,
          "bound": null
        },
        {
          "cond": "is_hex(self.char())",
          "norm": null,
          "value": "true",
          "line": 623,
          "bound": null
        },
        {
          "cond": "i in 0..digit_len",
          "norm": null,
          "value": "false",
          "line": 619,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(&scratch, 16).ok().and_then(char::from_u32) matches None",
          "norm": null,
          "value": "true",
          "line": 631,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(&scratch, 16).ok().and_then(char::from_u32) matches None",
          "norm": null,
          "value": "true",
          "line": 631,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_HEX_FIXED_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        12,
        16,
        17,
        18,
        19,
        22,
        23,
        3,
        4,
        5,
        7,
        9,
        24,
        25,
        26,
        27,
        28,
        30,
        32,
        33,
        36,
        37,
        40
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "i in 0..digit_len",
          "norm": null,
          "value": "true",
          "line": 619,
          "bound": null
        },
        {
          "cond": "i > 0",
          "norm": "0 < i",
          "value": "true",
          "line": 620,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "true",
          "line": 620,
          "bound": null
        },
        {
          "cond": "is_hex(self.char())",
          "norm": null,
          "value": "false",
          "line": 623,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_HEX_FIXED_INVALID_DIGIT))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        12,
        16,
        17,
        18,
        20,
        21,
        38,
        39,
        40
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "i in 0..digit_len",
          "norm": null,
          "value": "true",
          "line": 619,
          "bound": null
        },
        {
          "cond": "i > 0",
          "norm": "0 < i",
          "value": "true",
          "line": 620,
          "bound": null
        },
        {
          "cond": "self.bump_and_bump_space()",
          "norm": null,
          "value": "false",
          "line": 620,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_HEX_FIXED_UNEXPECTED_EOF))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        13,
        14,
        38,
        39,
        40
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "i in 0..digit_len",
          "norm": null,
          "value": "true",
          "line": 619,
          "bound": null
        },
        {
          "cond": "i > 0",
          "norm": "0 < i",
          "value": "false",
          "line": 620,
          "bound": "i == 0"
        },
        {
          "cond": "is_hex(self.char())",
          "norm": null,
          "value": "true",
          "line": 623,
          "bound": null
        },
        {
          "cond": "i in 0..digit_len",
          "norm": null,
          "value": "false",
          "line": 619,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(&scratch, 16).ok().and_then(char::from_u32) matches Some(ch)",
          "norm": null,
          "value": "true",
          "line": 631,
          "bound": null
        }
      ],
      "ret": "Ok(self.hir_char(ch))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        15,
        16,
        17,
        18,
        19,
        22,
        23,
        3,
        4,
        5,
        7,
        9,
        24,
        25,
        26,
        27,
        28,
        31,
        34,
        35,
        36,
        37,
        40
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "i in 0..digit_len",
          "norm": null,
          "value": "true",
          "line": 619,
          "bound": null
        },
        {
          "cond": "i > 0",
          "norm": "0 < i",
          "value": "false",
          "line": 620,
          "bound": "i == 0"
        },
        {
          "cond": "is_hex(self.char())",
          "norm": null,
          "value": "true",
          "line": 623,
          "bound": null
        },
        {
          "cond": "i in 0..digit_len",
          "norm": null,
          "value": "false",
          "line": 619,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(&scratch, 16).ok().and_then(char::from_u32) matches None",
          "norm": null,
          "value": "true",
          "line": 631,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(&scratch, 16).ok().and_then(char::from_u32) matches None",
          "norm": null,
          "value": "true",
          "line": 631,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_HEX_FIXED_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        15,
        16,
        17,
        18,
        19,
        22,
        23,
        3,
        4,
        5,
        7,
        9,
        24,
        25,
        26,
        27,
        28,
        30,
        32,
        33,
        36,
        37,
        40
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "i in 0..digit_len",
          "norm": null,
          "value": "true",
          "line": 619,
          "bound": null
        },
        {
          "cond": "i > 0",
          "norm": "0 < i",
          "value": "false",
          "line": 620,
          "bound": "i == 0"
        },
        {
          "cond": "is_hex(self.char())",
          "norm": null,
          "value": "false",
          "line": 623,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_HEX_FIXED_INVALID_DIGIT))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        15,
        16,
        17,
        18,
        20,
        21,
        38,
        39,
        40
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "i in 0..digit_len",
          "norm": null,
          "value": "false",
          "line": 619,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(&scratch, 16).ok().and_then(char::from_u32) matches Some(ch)",
          "norm": null,
          "value": "true",
          "line": 631,
          "bound": null
        }
      ],
      "ret": "Ok(self.hir_char(ch))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        24,
        25,
        26,
        27,
        28,
        31,
        34,
        35,
        36,
        37,
        40
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "i in 0..digit_len",
          "norm": null,
          "value": "false",
          "line": 619,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(&scratch, 16).ok().and_then(char::from_u32) matches None",
          "norm": null,
          "value": "true",
          "line": 631,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(&scratch, 16).ok().and_then(char::from_u32) matches None",
          "norm": null,
          "value": "true",
          "line": 631,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_HEX_FIXED_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        24,
        25,
        26,
        27,
        28,
        30,
        32,
        33,
        36,
        37,
        40
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}