{
  "name": "regex_lite::hir::parse::{impl#0}::increment_depth",
  "mod_info": {
    "name": "hir::parse",
    "loc": "regex-lite/src/hir/mod.rs:5:1:5:11"
  },
  "visible": false,
  "loc": "regex-lite/src/hir/parse.rs:189:5:199:6",
  "doc": "/// Increments the call depth of the parser.\n///\n/// If the call depth would exceed the configured nest limit, then this\n/// returns an error.\n///\n/// This returns the old depth.\n",
  "code": [
    "fn increment_depth(&self) -> Result<u32, Error> {",
    "    let old = self.depth.get();",
    "    if old > self.config.nest_limit {",
    "        return Err(Error::new(ERR_TOO_MUCH_NESTING));",
    "    }",
    "    // OK because our depth starts at 0, and we return an error if it",
    "    // ever reaches the limit. So the call depth can never exceed u32::MAX.",
    "    let new = old.checked_add(1).unwrap();",
    "    self.depth.set(new);",
    "    Ok(old)",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "old > self.config.nest_limit",
          "norm": null,
          "value": "true",
          "line": 191,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_TOO_MUCH_NESTING))",
      "path": [
        0,
        1,
        2,
        3,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "old > self.config.nest_limit",
          "norm": null,
          "value": "false",
          "line": 191,
          "bound": "old == self.config.nest_limit"
        }
      ],
      "ret": "Ok(old)",
      "path": [
        0,
        1,
        4,
        5,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}