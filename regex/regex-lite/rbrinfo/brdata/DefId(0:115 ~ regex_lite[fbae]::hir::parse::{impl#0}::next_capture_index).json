{
  "name": "regex_lite::hir::parse::{impl#0}::next_capture_index",
  "mod_info": {
    "name": "hir::parse",
    "loc": "regex-lite/src/hir/mod.rs:5:1:5:11"
  },
  "visible": false,
  "loc": "regex-lite/src/hir/parse.rs:339:5:346:6",
  "doc": "/// Return the next capturing index. Each subsequent call increments the\n/// internal index. Since the way capture indices are computed is a public\n/// API guarantee, use of this routine depends on the parser being depth\n/// first and left-to-right.\n///\n/// If the capture limit is exceeded, then an error is returned.\n",
  "code": [
    "fn next_capture_index(&self) -> Result<u32, Error> {",
    "    let current = self.capture_index.get();",
    "    let next = current",
    "        .checked_add(1)",
    "        .ok_or_else(|| Error::new(ERR_TOO_MANY_CAPTURES))?;",
    "    self.capture_index.set(next);",
    "    Ok(next)",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "current\n            .checked_add(1)\n            .ok_or_else(|| Error::new(ERR_TOO_MANY_CAPTURES))?",
          "norm": null,
          "value": "Err/None",
          "line": 341,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        9,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "current\n            .checked_add(1)\n            .ok_or_else(|| Error::new(ERR_TOO_MANY_CAPTURES))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 341,
          "bound": null
        }
      ],
      "ret": "Ok(next)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}