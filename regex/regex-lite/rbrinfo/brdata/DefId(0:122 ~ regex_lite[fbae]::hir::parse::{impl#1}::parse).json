{
  "name": "regex_lite::hir::parse::{impl#1}::parse",
  "mod_info": {
    "name": "hir::parse",
    "loc": "regex-lite/src/hir/mod.rs:5:1:5:11"
  },
  "visible": false,
  "loc": "regex-lite/src/hir/parse.rs:379:5:395:6",
  "doc": "",
  "code": [
    "pub(super) fn parse(&self) -> Result<Hir, Error> {",
    "    let hir = self.parse_inner()?;",
    "    // While we also check nesting during parsing, that only checks the",
    "    // number of recursive parse calls. It does not necessarily cover",
    "    // all possible recursive nestings of the Hir itself. For example,",
    "    // repetition operators don't require recursive parse calls. So one",
    "    // can stack them arbitrarily without overflowing the stack in the",
    "    // *parser*. But then if one recurses over the resulting Hir, a stack",
    "    // overflow is possible. So here we check the Hir nesting level",
    "    // thoroughly to ensure it isn't nested too deeply.",
    "    //",
    "    // Note that we do still need the nesting limit check in the parser as",
    "    // well, since that will avoid overflowing the stack during parse time",
    "    // before the complete Hir value is constructed.",
    "    check_hir_nesting(&hir, self.config.nest_limit)?;",
    "    Ok(hir)",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.parse_inner()?",
          "norm": null,
          "value": "Err/None",
          "line": 380,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        19,
        20,
        21
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.parse_inner()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 380,
          "bound": null
        },
        {
          "cond": "check_hir_nesting(&hir, self.config.nest_limit)?",
          "norm": null,
          "value": "Err/None",
          "line": 393,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        13,
        15,
        16,
        20,
        21
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.parse_inner()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 380,
          "bound": null
        },
        {
          "cond": "check_hir_nesting(&hir, self.config.nest_limit)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 393,
          "bound": null
        }
      ],
      "ret": "Ok(hir)",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        14,
        17,
        18,
        21
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}