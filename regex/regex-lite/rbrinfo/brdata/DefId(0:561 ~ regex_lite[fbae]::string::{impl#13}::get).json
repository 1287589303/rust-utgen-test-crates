{
  "name": "regex_lite::string::{impl#13}::get",
  "mod_info": {
    "name": "string",
    "loc": "regex-lite/src/lib.rs:884:1:884:12"
  },
  "visible": true,
  "loc": "regex-lite/src/string.rs:1676:5:1678:6",
  "doc": "/// Returns the `Match` associated with the capture group at index `i`. If\n/// `i` does not correspond to a capture group, or if the capture group did\n/// not participate in the match, then `None` is returned.\n///\n/// When `i == 0`, this is guaranteed to return a non-`None` value.\n///\n/// # Examples\n///\n/// Get the substring that matched with a default of an empty string if the\n/// group didn't participate in the match:\n///\n/// ```\n/// use regex_lite::Regex;\n///\n/// let re = Regex::new(r\"[a-z]+(?:([0-9]+)|([A-Z]+))\").unwrap();\n/// let caps = re.captures(\"abc123\").unwrap();\n///\n/// let substr1 = caps.get(1).map_or(\"\", |m| m.as_str());\n/// let substr2 = caps.get(2).map_or(\"\", |m| m.as_str());\n/// assert_eq!(substr1, \"123\");\n/// assert_eq!(substr2, \"\");\n/// ```\n",
  "code": [
    "pub fn get(&self, i: usize) -> Option<Match<'h>> {",
    "    self.slots.get(i).map(|(s, e)| Match::new(self.haystack, s, e))",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}