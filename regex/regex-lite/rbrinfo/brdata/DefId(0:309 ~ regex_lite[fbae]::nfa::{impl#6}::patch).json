{
  "name": "regex_lite::nfa::{impl#6}::patch",
  "mod_info": {
    "name": "nfa",
    "loc": "regex-lite/src/lib.rs:880:1:880:9"
  },
  "visible": false,
  "loc": "regex-lite/src/nfa.rs:665:5:691:6",
  "doc": "/// Add a transition from one state to another.\n///\n/// This routine is called \"patch\" since it is very common to add the\n/// states you want, typically with \"dummy\" state ID transitions, and then\n/// \"patch\" in the real state IDs later. This is because you don't always\n/// know all of the necessary state IDs to add because they might not\n/// exist yet.\n///\n/// # Errors\n///\n/// This may error if patching leads to an increase in heap usage beyond\n/// the configured size limit. Heap usage only grows when patching adds a\n/// new transition (as in the case of a \"splits\" state).\n",
  "code": [
    "fn patch(&self, from: StateID, to: StateID) -> Result<(), Error> {",
    "    let mut new_memory_extra = self.nfa.borrow().memory_extra;",
    "    match self.nfa.borrow_mut().states[from.as_usize()] {",
    "        State::Char { ref mut target, .. } => {",
    "            *target = to;",
    "        }",
    "        State::Ranges { ref mut target, .. } => {",
    "            *target = to;",
    "        }",
    "        State::Splits { ref mut targets, .. } => {",
    "            targets.push(to);",
    "            new_memory_extra += size_of::<StateID>();",
    "        }",
    "        State::Goto { ref mut target, .. } => {",
    "            *target = to;",
    "        }",
    "        State::Capture { ref mut target, .. } => {",
    "            *target = to;",
    "        }",
    "        State::Fail | State::Match => {}",
    "    }",
    "    if new_memory_extra != self.nfa.borrow().memory_extra {",
    "        self.nfa.borrow_mut().memory_extra = new_memory_extra;",
    "        self.check_size_limit()?;",
    "    }",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 21,
    "contra": 0,
    "min_set": 7
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Match",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "new_memory_extra != self.nfa.borrow().memory_extra",
          "norm": null,
          "value": "true",
          "line": 686,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Err/None",
          "line": 688,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        14,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        35,
        37,
        38,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Match",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "new_memory_extra != self.nfa.borrow().memory_extra",
          "norm": null,
          "value": "true",
          "line": 686,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        14,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        36,
        41,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Match",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "new_memory_extra != self.nfa.borrow().memory_extra",
          "norm": null,
          "value": "false",
          "line": 686,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        14,
        23,
        24,
        25,
        26,
        39,
        40,
        41,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Fail",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "new_memory_extra != self.nfa.borrow().memory_extra",
          "norm": null,
          "value": "true",
          "line": 686,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Err/None",
          "line": 688,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        14,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        35,
        37,
        38,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Fail",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "new_memory_extra != self.nfa.borrow().memory_extra",
          "norm": null,
          "value": "true",
          "line": 686,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        14,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        36,
        41,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Fail",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "new_memory_extra != self.nfa.borrow().memory_extra",
          "norm": null,
          "value": "false",
          "line": 686,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        14,
        23,
        24,
        25,
        26,
        39,
        40,
        41,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Capture { ref mut target, .. }",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Capture { ref mut target, .. }",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "new_memory_extra != self.nfa.borrow().memory_extra",
          "norm": null,
          "value": "true",
          "line": 686,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Err/None",
          "line": 688,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        13,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        35,
        37,
        38,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Capture { ref mut target, .. }",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Capture { ref mut target, .. }",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "new_memory_extra != self.nfa.borrow().memory_extra",
          "norm": null,
          "value": "true",
          "line": 686,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        13,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        36,
        41,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Capture { ref mut target, .. }",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Capture { ref mut target, .. }",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "new_memory_extra != self.nfa.borrow().memory_extra",
          "norm": null,
          "value": "false",
          "line": 686,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        13,
        22,
        23,
        24,
        25,
        26,
        39,
        40,
        41,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Goto { ref mut target, .. }",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Goto { ref mut target, .. }",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "new_memory_extra != self.nfa.borrow().memory_extra",
          "norm": null,
          "value": "true",
          "line": 686,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Err/None",
          "line": 688,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        12,
        21,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        35,
        37,
        38,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Goto { ref mut target, .. }",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Goto { ref mut target, .. }",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "new_memory_extra != self.nfa.borrow().memory_extra",
          "norm": null,
          "value": "true",
          "line": 686,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        12,
        21,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        36,
        41,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Goto { ref mut target, .. }",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Goto { ref mut target, .. }",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "new_memory_extra != self.nfa.borrow().memory_extra",
          "norm": null,
          "value": "false",
          "line": 686,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        12,
        21,
        23,
        24,
        25,
        26,
        39,
        40,
        41,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Splits { ref mut targets, .. }",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Splits { ref mut targets, .. }",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "new_memory_extra != self.nfa.borrow().memory_extra",
          "norm": null,
          "value": "true",
          "line": 686,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Err/None",
          "line": 688,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        11,
        17,
        18,
        19,
        20,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        35,
        37,
        38,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Splits { ref mut targets, .. }",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Splits { ref mut targets, .. }",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "new_memory_extra != self.nfa.borrow().memory_extra",
          "norm": null,
          "value": "true",
          "line": 686,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        11,
        17,
        18,
        19,
        20,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        36,
        41,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Splits { ref mut targets, .. }",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Splits { ref mut targets, .. }",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "new_memory_extra != self.nfa.borrow().memory_extra",
          "norm": null,
          "value": "false",
          "line": 686,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        11,
        17,
        18,
        19,
        20,
        23,
        24,
        25,
        26,
        39,
        40,
        41,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Ranges { ref mut target, .. }",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Ranges { ref mut target, .. }",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "new_memory_extra != self.nfa.borrow().memory_extra",
          "norm": null,
          "value": "true",
          "line": 686,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Err/None",
          "line": 688,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        16,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        35,
        37,
        38,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Ranges { ref mut target, .. }",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Ranges { ref mut target, .. }",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "new_memory_extra != self.nfa.borrow().memory_extra",
          "norm": null,
          "value": "true",
          "line": 686,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        16,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        36,
        41,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Ranges { ref mut target, .. }",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Ranges { ref mut target, .. }",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "new_memory_extra != self.nfa.borrow().memory_extra",
          "norm": null,
          "value": "false",
          "line": 686,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        16,
        23,
        24,
        25,
        26,
        39,
        40,
        41,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Char { ref mut target, .. }",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Char { ref mut target, .. }",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "new_memory_extra != self.nfa.borrow().memory_extra",
          "norm": null,
          "value": "true",
          "line": 686,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Err/None",
          "line": 688,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        15,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        35,
        37,
        38,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Char { ref mut target, .. }",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Char { ref mut target, .. }",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "new_memory_extra != self.nfa.borrow().memory_extra",
          "norm": null,
          "value": "true",
          "line": 686,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        15,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        36,
        41,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Char { ref mut target, .. }",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "self.nfa.borrow_mut().states[from.as_usize()] matches State::Char { ref mut target, .. }",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        },
        {
          "cond": "new_memory_extra != self.nfa.borrow().memory_extra",
          "norm": null,
          "value": "false",
          "line": 686,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        15,
        23,
        24,
        25,
        26,
        39,
        40,
        41,
        42
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}