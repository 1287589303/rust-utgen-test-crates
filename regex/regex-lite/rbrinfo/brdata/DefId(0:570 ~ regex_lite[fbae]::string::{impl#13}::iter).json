{
  "name": "regex_lite::string::{impl#13}::iter",
  "mod_info": {
    "name": "string",
    "loc": "regex-lite/src/lib.rs:884:1:884:12"
  },
  "visible": true,
  "loc": "regex-lite/src/string.rs:1904:5:1909:6",
  "doc": "/// Returns an iterator over all capture groups. This includes both\n/// matching and non-matching groups.\n///\n/// The iterator always yields at least one matching group: the first group\n/// (at index `0`) with no name. Subsequent groups are returned in the order\n/// of their opening parenthesis in the regex.\n///\n/// The elements yielded have type `Option<Match<'h>>`, where a non-`None`\n/// value is present if the capture group matches.\n///\n/// # Example\n///\n/// ```\n/// use regex_lite::Regex;\n///\n/// let re = Regex::new(r\"(\\w)(\\d)?(\\w)\").unwrap();\n/// let caps = re.captures(\"AZ\").unwrap();\n///\n/// let mut it = caps.iter();\n/// assert_eq!(it.next().unwrap().map(|m| m.as_str()), Some(\"AZ\"));\n/// assert_eq!(it.next().unwrap().map(|m| m.as_str()), Some(\"A\"));\n/// assert_eq!(it.next().unwrap().map(|m| m.as_str()), None);\n/// assert_eq!(it.next().unwrap().map(|m| m.as_str()), Some(\"Z\"));\n/// assert_eq!(it.next(), None);\n/// ```\n",
  "code": [
    "pub fn iter<'c>(&'c self) -> SubCaptureMatches<'c, 'h> {",
    "    SubCaptureMatches {",
    "        caps: self,",
    "        it: self.pikevm.nfa().capture_names().enumerate(),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "SubCaptureMatches {\n            caps: self,\n            it: self.pikevm.nfa().capture_names().enumerate(),\n        }",
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}