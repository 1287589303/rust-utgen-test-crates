{
  "name": "regex_lite::hir::parse::{impl#1}::parse_primitive",
  "mod_info": {
    "name": "hir::parse",
    "loc": "regex-lite/src/hir/mod.rs:5:1:5:11"
  },
  "visible": false,
  "loc": "regex-lite/src/hir/parse.rs:455:5:465:6",
  "doc": "/// Parses a \"primitive\" pattern. A primitive is any expression that does\n/// not contain any sub-expressions.\n///\n/// This assumes the parser is pointing at the beginning of the primitive.\n",
  "code": [
    "fn parse_primitive(&self) -> Result<Hir, Error> {",
    "    let ch = self.char();",
    "    self.bump();",
    "    match ch {",
    "        '\\\\' => self.parse_escape(),",
    "        '.' => Ok(self.hir_dot()),",
    "        '^' => Ok(self.hir_anchor_start()),",
    "        '$' => Ok(self.hir_anchor_end()),",
    "        ch => Ok(self.hir_char(ch)),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "ch matches '^'",
          "norm": null,
          "value": "true",
          "line": 461,
          "bound": null
        },
        {
          "cond": "ch matches '.'",
          "norm": null,
          "value": "true",
          "line": 460,
          "bound": null
        },
        {
          "cond": "ch matches '$'",
          "norm": null,
          "value": "true",
          "line": 462,
          "bound": null
        },
        {
          "cond": "ch matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 459,
          "bound": null
        },
        {
          "cond": "ch matches ch",
          "norm": null,
          "value": "true",
          "line": 463,
          "bound": null
        }
      ],
      "ret": "Ok(self.hir_char(ch))",
      "path": [
        0,
        1,
        2,
        3,
        19,
        20,
        21
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "ch matches '$'",
          "norm": null,
          "value": "true",
          "line": 462,
          "bound": null
        },
        {
          "cond": "ch matches '$'",
          "norm": null,
          "value": "true",
          "line": 458,
          "bound": null
        }
      ],
      "ret": "Ok(self.hir_anchor_end())",
      "path": [
        0,
        1,
        2,
        7,
        16,
        17,
        18,
        21
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "ch matches '^'",
          "norm": null,
          "value": "true",
          "line": 461,
          "bound": null
        },
        {
          "cond": "ch matches '^'",
          "norm": null,
          "value": "true",
          "line": 458,
          "bound": null
        }
      ],
      "ret": "Ok(self.hir_anchor_start())",
      "path": [
        0,
        1,
        2,
        6,
        13,
        14,
        15,
        21
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "ch matches '.'",
          "norm": null,
          "value": "true",
          "line": 460,
          "bound": null
        },
        {
          "cond": "ch matches '.'",
          "norm": null,
          "value": "true",
          "line": 458,
          "bound": null
        }
      ],
      "ret": "Ok(self.hir_dot())",
      "path": [
        0,
        1,
        2,
        5,
        10,
        11,
        12,
        21
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "ch matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 459,
          "bound": null
        },
        {
          "cond": "ch matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 458,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        8,
        9,
        21
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}