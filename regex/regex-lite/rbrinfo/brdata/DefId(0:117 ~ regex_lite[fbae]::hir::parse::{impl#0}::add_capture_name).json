{
  "name": "regex_lite::hir::parse::{impl#0}::add_capture_name",
  "mod_info": {
    "name": "hir::parse",
    "loc": "regex-lite/src/hir/mod.rs:5:1:5:11"
  },
  "visible": false,
  "loc": "regex-lite/src/hir/parse.rs:350:5:359:6",
  "doc": "/// Adds the given capture name to this parser. If this capture name has\n/// already been used, then an error is returned.\n",
  "code": [
    "fn add_capture_name(&self, name: &str) -> Result<(), Error> {",
    "    let mut names = self.capture_names.borrow_mut();",
    "    match names.binary_search_by(|n| name.cmp(n)) {",
    "        Ok(_) => Err(Error::new(ERR_DUPLICATE_CAPTURE_NAME)),",
    "        Err(i) => {",
    "            names.insert(i, name.to_string());",
    "            Ok(())",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "names.binary_search_by(|n| name.cmp(n)) matches Err(i)",
          "norm": null,
          "value": "true",
          "line": 352,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "names.binary_search_by(|n| name.cmp(n)) matches Ok(_)",
          "norm": null,
          "value": "true",
          "line": 352,
          "bound": null
        },
        {
          "cond": "names.binary_search_by(|n| name.cmp(n)) matches Ok(_)",
          "norm": null,
          "value": "true",
          "line": 352,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DUPLICATE_CAPTURE_NAME))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        9,
        13,
        14
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}