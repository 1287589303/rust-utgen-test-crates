{
  "name": "regex_lite::string::{impl#40}::size_limit",
  "mod_info": {
    "name": "string",
    "loc": "regex-lite/src/lib.rs:884:1:884:12"
  },
  "visible": true,
  "loc": "regex-lite/src/string.rs:2930:5:2933:6",
  "doc": "/// Sets the approximate size limit, in bytes, of the compiled regex.\n///\n/// This roughly corresponds to the number of heap memory, in bytes,\n/// occupied by a single regex. If the regex would otherwise approximately\n/// exceed this limit, then compiling that regex will fail.\n///\n/// The main utility of a method like this is to avoid compiling regexes\n/// that use an unexpected amount of resources, such as time and memory.\n/// Even if the memory usage of a large regex is acceptable, its search\n/// time may not be. Namely, worst case time complexity for search is `O(m\n/// * n)`, where `m ~ len(pattern)` and `n ~ len(haystack)`. That is,\n/// search time depends, in part, on the size of the compiled regex. This\n/// means that putting a limit on the size of the regex limits how much a\n/// regex can impact search time.\n///\n/// The default for this is some reasonable number that permits most\n/// patterns to compile successfully.\n///\n/// # Example\n///\n/// ```\n/// use regex_lite::RegexBuilder;\n///\n/// assert!(RegexBuilder::new(r\"\\w\").size_limit(100).build().is_err());\n/// ```\n",
  "code": [
    "pub fn size_limit(&mut self, limit: usize) -> &mut RegexBuilder {",
    "    self.nfa_config.size_limit = Some(limit);",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}