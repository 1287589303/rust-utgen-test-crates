{
  "name": "regex_lite::hir::parse::{impl#1}::parse_decimal",
  "mod_info": {
    "name": "hir::parse",
    "loc": "regex-lite/src/hir/mod.rs:5:1:5:11"
  },
  "visible": false,
  "loc": "regex-lite/src/hir/parse.rs:672:5:692:6",
  "doc": "/// Parse a decimal number into a u32 while trimming leading and trailing\n/// whitespace.\n///\n/// This expects the parser to be positioned at the first position where\n/// a decimal digit could occur. This will advance the parser to the byte\n/// immediately following the last contiguous decimal digit.\n///\n/// If no decimal digit could be found or if there was a problem parsing\n/// the complete set of digits into a u32, then an error is returned.\n",
  "code": [
    "fn parse_decimal(&self) -> Result<u32, Error> {",
    "    let mut scratch = String::new();",
    "    while !self.is_done() && self.char().is_whitespace() {",
    "        self.bump();",
    "    }",
    "    while !self.is_done() && '0' <= self.char() && self.char() <= '9' {",
    "        scratch.push(self.char());",
    "        self.bump_and_bump_space();",
    "    }",
    "    while !self.is_done() && self.char().is_whitespace() {",
    "        self.bump_and_bump_space();",
    "    }",
    "    let digits = scratch.as_str();",
    "    if digits.is_empty() {",
    "        return Err(Error::new(ERR_DECIMAL_NO_DIGITS));",
    "    }",
    "    match u32::from_str_radix(digits, 10).ok() {",
    "        Some(n) => Ok(n),",
    "        None => Err(Error::new(ERR_DECIMAL_INVALID)),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 108,
    "contra": 72,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "true",
          "line": 677,
          "bound": "self.char() == '9'"
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "true",
          "line": 677,
          "bound": "self.char() == '9'"
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "true",
          "line": 677,
          "bound": "self.char() == '9'"
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "true",
          "line": 677,
          "bound": "self.char() == '9'"
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "true",
          "line": 677,
          "bound": "self.char() == '9'"
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "true",
          "line": 677,
          "bound": "self.char() == '9'"
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "true",
          "line": 677,
          "bound": "self.char() == '9'"
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "true",
          "line": 677,
          "bound": "self.char() == '9'"
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "true",
          "line": 677,
          "bound": "self.char() == '9'"
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        25,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        25,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        25,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        25,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        25,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        25,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        25,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        25,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        25,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        26,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 29,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        26,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 30,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        26,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 31,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        26,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 32,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        26,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 33,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        26,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 34,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        26,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 35,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        26,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 36,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        26,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 37,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 38,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 39,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 40,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 41,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 42,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 43,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 44,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 45,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 46,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "true",
          "line": 677,
          "bound": "self.char() == '9'"
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 47,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "true",
          "line": 677,
          "bound": "self.char() == '9'"
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 48,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "true",
          "line": 677,
          "bound": "self.char() == '9'"
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 49,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "true",
          "line": 677,
          "bound": "self.char() == '9'"
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 50,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "true",
          "line": 677,
          "bound": "self.char() == '9'"
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 51,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "true",
          "line": 677,
          "bound": "self.char() == '9'"
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 52,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "true",
          "line": 677,
          "bound": "self.char() == '9'"
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 53,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "true",
          "line": 677,
          "bound": "self.char() == '9'"
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 54,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "true",
          "line": 677,
          "bound": "self.char() == '9'"
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 55,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        25,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 56,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        25,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 57,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        25,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 58,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        25,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 59,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        25,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 60,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        25,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 61,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        25,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 62,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        25,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 63,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        25,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 64,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        26,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 65,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        26,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 66,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        26,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 67,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        26,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 68,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        26,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 69,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        26,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 70,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        26,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 71,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        26,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 72,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        2,
        3,
        4,
        5,
        12,
        13,
        14,
        15,
        17,
        18,
        26,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 73,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 74,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 75,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 76,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 77,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 78,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 79,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 80,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 81,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 82,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "true",
          "line": 677,
          "bound": "self.char() == '9'"
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 83,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "true",
          "line": 677,
          "bound": "self.char() == '9'"
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 84,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "true",
          "line": 677,
          "bound": "self.char() == '9'"
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 85,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "true",
          "line": 677,
          "bound": "self.char() == '9'"
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 86,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "true",
          "line": 677,
          "bound": "self.char() == '9'"
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 87,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "true",
          "line": 677,
          "bound": "self.char() == '9'"
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 88,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "true",
          "line": 677,
          "bound": "self.char() == '9'"
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 89,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "true",
          "line": 677,
          "bound": "self.char() == '9'"
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 90,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "true",
          "line": 677,
          "bound": "self.char() == '9'"
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        13,
        14,
        15,
        16,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 91,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        25,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 92,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        25,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 93,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        25,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 94,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        25,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 95,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        25,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 96,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        25,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 97,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        25,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 98,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        25,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 99,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "true",
          "line": 677,
          "bound": "'0' == self.char()"
        },
        {
          "cond": "self.char() <= '9'",
          "norm": "'9' >= self.char()",
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        25,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 100,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        26,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 101,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        26,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 102,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        26,
        27,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 103,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        26,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 104,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        26,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 105,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        26,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        28,
        29,
        30,
        31,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 106,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "true",
          "line": 685,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_NO_DIGITS))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        26,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        41,
        42,
        53,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 107,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches Some(n)",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Ok(n)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        26,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        43,
        44,
        45,
        47,
        49,
        51,
        52,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 108,
      "conds": [
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "'0' <= self.char()",
          "norm": null,
          "value": "false",
          "line": 677,
          "bound": null
        },
        {
          "cond": "self.is_done()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "self.char().is_whitespace()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": null
        },
        {
          "cond": "digits.is_empty()",
          "norm": null,
          "value": "false",
          "line": 685,
          "bound": null
        },
        {
          "cond": "u32::from_str_radix(digits, 10).ok() matches None",
          "norm": null,
          "value": "true",
          "line": 688,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_DECIMAL_INVALID))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        26,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        37,
        38,
        39,
        40,
        43,
        44,
        45,
        48,
        50,
        51,
        52,
        54
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}