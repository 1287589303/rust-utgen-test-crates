{
  "name": "regex_lite::nfa::{impl#4}::iter_splits",
  "mod_info": {
    "name": "nfa",
    "loc": "regex-lite/src/lib.rs:880:1:880:9"
  },
  "visible": true,
  "loc": "regex-lite/src/nfa.rs:194:5:202:6",
  "doc": "/// Returns an iterator over the given split targets. The order of the\n/// iterator yields elements in reverse when `reverse` is true.\n",
  "code": [
    "pub(crate) fn iter_splits<'a>(",
    "    splits: &'a [StateID],",
    "    reverse: bool,",
    ") -> impl Iterator<Item = StateID> + 'a {",
    "    let mut it = splits.iter();",
    "    core::iter::from_fn(move || {",
    "        if reverse { it.next_back() } else { it.next() }.copied()",
    "    })",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}