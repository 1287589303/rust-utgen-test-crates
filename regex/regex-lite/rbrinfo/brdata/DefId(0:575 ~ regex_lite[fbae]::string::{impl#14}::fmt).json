{
  "name": "regex_lite::string::{impl#14}::fmt",
  "mod_info": {
    "name": "string",
    "loc": "regex-lite/src/lib.rs:884:1:884:12"
  },
  "visible": true,
  "loc": "regex-lite/src/string.rs:1935:5:1991:6",
  "doc": "",
  "code": [
    "fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {",
    "    /// A little helper type to provide a nice map-like debug",
    "    /// representation for our capturing group spans.",
    "    ///",
    "    /// regex-automata has something similar, but it includes the pattern",
    "    /// ID in its debug output, which is confusing. It also doesn't include",
    "    /// that strings that match because a regex-automata `Captures` doesn't",
    "    /// borrow the haystack.",
    "    struct CapturesDebugMap<'a> {",
    "        caps: &'a Captures<'a>,",
    "    }",
    "",
    "    impl<'a> core::fmt::Debug for CapturesDebugMap<'a> {",
    "        fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {",
    "            let mut map = f.debug_map();",
    "            let names = self.caps.pikevm.nfa().capture_names();",
    "            for (group_index, maybe_name) in names.enumerate() {",
    "                let key = Key(group_index, maybe_name);",
    "                match self.caps.get(group_index) {",
    "                    None => map.entry(&key, &None::<()>),",
    "                    Some(mat) => map.entry(&key, &Value(mat)),",
    "                };",
    "            }",
    "            map.finish()",
    "        }",
    "    }",
    "",
    "    struct Key<'a>(usize, Option<&'a str>);",
    "",
    "    impl<'a> core::fmt::Debug for Key<'a> {",
    "        fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {",
    "            write!(f, \"{}\", self.0)?;",
    "            if let Some(name) = self.1 {",
    "                write!(f, \"/{:?}\", name)?;",
    "            }",
    "            Ok(())",
    "        }",
    "    }",
    "",
    "    struct Value<'a>(Match<'a>);",
    "",
    "    impl<'a> core::fmt::Debug for Value<'a> {",
    "        fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {",
    "            write!(",
    "                f,",
    "                \"{}..{}/{:?}\",",
    "                self.0.start(),",
    "                self.0.end(),",
    "                self.0.as_str()",
    "            )",
    "        }",
    "    }",
    "",
    "    f.debug_tuple(\"Captures\")",
    "        .field(&CapturesDebugMap { caps: self })",
    "        .finish()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}