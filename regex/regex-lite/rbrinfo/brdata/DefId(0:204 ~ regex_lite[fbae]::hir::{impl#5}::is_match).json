{
  "name": "regex_lite::hir::{impl#5}::is_match",
  "mod_info": {
    "name": "hir",
    "loc": "regex-lite/src/lib.rs:877:1:877:9"
  },
  "visible": true,
  "loc": "regex-lite/src/hir/mod.rs:636:5:695:6",
  "doc": "/// Returns true if the given position in the given haystack matches this\n/// look-around assertion.\n",
  "code": [
    "pub(crate) fn is_match(&self, haystack: &[u8], at: usize) -> bool {",
    "    use self::Look::*;",
    "",
    "    match *self {",
    "        Start => at == 0,",
    "        End => at == haystack.len(),",
    "        StartLF => at == 0 || haystack[at - 1] == b'\\n',",
    "        EndLF => at == haystack.len() || haystack[at] == b'\\n',",
    "        StartCRLF => {",
    "            at == 0",
    "                || haystack[at - 1] == b'\\n'",
    "                || (haystack[at - 1] == b'\\r'",
    "                    && (at >= haystack.len() || haystack[at] != b'\\n'))",
    "        }",
    "        EndCRLF => {",
    "            at == haystack.len()",
    "                || haystack[at] == b'\\r'",
    "                || (haystack[at] == b'\\n'",
    "                    && (at == 0 || haystack[at - 1] != b'\\r'))",
    "        }",
    "        Word => {",
    "            let word_before =",
    "                at > 0 && utf8::is_word_byte(haystack[at - 1]);",
    "            let word_after =",
    "                at < haystack.len() && utf8::is_word_byte(haystack[at]);",
    "            word_before != word_after",
    "        }",
    "        WordNegate => {",
    "            let word_before =",
    "                at > 0 && utf8::is_word_byte(haystack[at - 1]);",
    "            let word_after =",
    "                at < haystack.len() && utf8::is_word_byte(haystack[at]);",
    "            word_before == word_after",
    "        }",
    "        WordStart => {",
    "            let word_before =",
    "                at > 0 && utf8::is_word_byte(haystack[at - 1]);",
    "            let word_after =",
    "                at < haystack.len() && utf8::is_word_byte(haystack[at]);",
    "            !word_before && word_after",
    "        }",
    "        WordEnd => {",
    "            let word_before =",
    "                at > 0 && utf8::is_word_byte(haystack[at - 1]);",
    "            let word_after =",
    "                at < haystack.len() && utf8::is_word_byte(haystack[at]);",
    "            word_before && !word_after",
    "        }",
    "        WordStartHalf => {",
    "            let word_before =",
    "                at > 0 && utf8::is_word_byte(haystack[at - 1]);",
    "            !word_before",
    "        }",
    "        WordEndHalf => {",
    "            let word_after =",
    "                at < haystack.len() && utf8::is_word_byte(haystack[at]);",
    "            !word_after",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 44,
    "contra": 0,
    "min_set": 28
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*self matches WordEndHalf",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at < haystack.len()",
          "norm": null,
          "value": "true",
          "line": 691,
          "bound": null
        }
      ],
      "ret": "!word_after",
      "path": [
        0,
        13,
        131,
        132,
        134,
        135,
        136,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*self matches WordEndHalf",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at < haystack.len()",
          "norm": null,
          "value": "false",
          "line": 691,
          "bound": "at == haystack.len()"
        }
      ],
      "ret": "!word_after",
      "path": [
        0,
        13,
        131,
        133,
        136,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "*self matches WordStartHalf",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches WordStartHalf",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at > 0",
          "norm": "0 < at",
          "value": "true",
          "line": 686,
          "bound": null
        }
      ],
      "ret": "!word_before",
      "path": [
        0,
        12,
        124,
        125,
        127,
        128,
        129,
        130,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "*self matches WordStartHalf",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches WordStartHalf",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at > 0",
          "norm": "0 < at",
          "value": "false",
          "line": 686,
          "bound": "at == 0"
        }
      ],
      "ret": "!word_before",
      "path": [
        0,
        12,
        124,
        126,
        130,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "*self matches WordEnd",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches WordEnd",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at > 0",
          "norm": "0 < at",
          "value": "true",
          "line": 679,
          "bound": null
        },
        {
          "cond": "at < haystack.len()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "word_before",
          "norm": null,
          "value": "true",
          "line": 682,
          "bound": null
        }
      ],
      "ret": "!word_after",
      "path": [
        0,
        11,
        108,
        109,
        111,
        112,
        113,
        114,
        115,
        116,
        118,
        119,
        120,
        121,
        123,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "*self matches WordEnd",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches WordEnd",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at > 0",
          "norm": "0 < at",
          "value": "true",
          "line": 679,
          "bound": null
        },
        {
          "cond": "at < haystack.len()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "word_before",
          "norm": null,
          "value": "false",
          "line": 682,
          "bound": null
        }
      ],
      "ret": "word_before && !word_after",
      "path": [
        0,
        11,
        108,
        109,
        111,
        112,
        113,
        114,
        115,
        116,
        118,
        119,
        120,
        122,
        123,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "*self matches WordEnd",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches WordEnd",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at > 0",
          "norm": "0 < at",
          "value": "true",
          "line": 679,
          "bound": null
        },
        {
          "cond": "at < haystack.len()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": "at == haystack.len()"
        },
        {
          "cond": "word_before",
          "norm": null,
          "value": "true",
          "line": 682,
          "bound": null
        }
      ],
      "ret": "!word_after",
      "path": [
        0,
        11,
        108,
        109,
        111,
        112,
        113,
        114,
        115,
        117,
        120,
        121,
        123,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "*self matches WordEnd",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches WordEnd",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at > 0",
          "norm": "0 < at",
          "value": "true",
          "line": 679,
          "bound": null
        },
        {
          "cond": "at < haystack.len()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": "at == haystack.len()"
        },
        {
          "cond": "word_before",
          "norm": null,
          "value": "false",
          "line": 682,
          "bound": null
        }
      ],
      "ret": "word_before && !word_after",
      "path": [
        0,
        11,
        108,
        109,
        111,
        112,
        113,
        114,
        115,
        117,
        120,
        122,
        123,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "*self matches WordEnd",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches WordEnd",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at > 0",
          "norm": "0 < at",
          "value": "false",
          "line": 679,
          "bound": "at == 0"
        },
        {
          "cond": "at < haystack.len()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "word_before",
          "norm": null,
          "value": "true",
          "line": 682,
          "bound": null
        }
      ],
      "ret": "!word_after",
      "path": [
        0,
        11,
        108,
        110,
        114,
        115,
        116,
        118,
        119,
        120,
        121,
        123,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "*self matches WordEnd",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches WordEnd",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at > 0",
          "norm": "0 < at",
          "value": "false",
          "line": 679,
          "bound": "at == 0"
        },
        {
          "cond": "at < haystack.len()",
          "norm": null,
          "value": "true",
          "line": 681,
          "bound": null
        },
        {
          "cond": "word_before",
          "norm": null,
          "value": "false",
          "line": 682,
          "bound": null
        }
      ],
      "ret": "word_before && !word_after",
      "path": [
        0,
        11,
        108,
        110,
        114,
        115,
        116,
        118,
        119,
        120,
        122,
        123,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "*self matches WordEnd",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches WordEnd",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at > 0",
          "norm": "0 < at",
          "value": "false",
          "line": 679,
          "bound": "at == 0"
        },
        {
          "cond": "at < haystack.len()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": "at == haystack.len()"
        },
        {
          "cond": "word_before",
          "norm": null,
          "value": "true",
          "line": 682,
          "bound": null
        }
      ],
      "ret": "!word_after",
      "path": [
        0,
        11,
        108,
        110,
        114,
        115,
        117,
        120,
        121,
        123,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "*self matches WordEnd",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches WordEnd",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at > 0",
          "norm": "0 < at",
          "value": "false",
          "line": 679,
          "bound": "at == 0"
        },
        {
          "cond": "at < haystack.len()",
          "norm": null,
          "value": "false",
          "line": 681,
          "bound": "at == haystack.len()"
        },
        {
          "cond": "word_before",
          "norm": null,
          "value": "false",
          "line": 682,
          "bound": null
        }
      ],
      "ret": "word_before && !word_after",
      "path": [
        0,
        11,
        108,
        110,
        114,
        115,
        117,
        120,
        122,
        123,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "*self matches WordStart",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches WordStart",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at > 0",
          "norm": "0 < at",
          "value": "true",
          "line": 672,
          "bound": null
        },
        {
          "cond": "at < haystack.len()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "word_before",
          "norm": null,
          "value": "true",
          "line": 675,
          "bound": null
        }
      ],
      "ret": "!word_before && word_after",
      "path": [
        0,
        10,
        92,
        93,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        103,
        104,
        106,
        107,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "*self matches WordStart",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches WordStart",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at > 0",
          "norm": "0 < at",
          "value": "true",
          "line": 672,
          "bound": null
        },
        {
          "cond": "at < haystack.len()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "word_before",
          "norm": null,
          "value": "false",
          "line": 675,
          "bound": null
        }
      ],
      "ret": "word_after",
      "path": [
        0,
        10,
        92,
        93,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        103,
        104,
        105,
        107,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "*self matches WordStart",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches WordStart",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at > 0",
          "norm": "0 < at",
          "value": "true",
          "line": 672,
          "bound": null
        },
        {
          "cond": "at < haystack.len()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": "at == haystack.len()"
        },
        {
          "cond": "word_before",
          "norm": null,
          "value": "true",
          "line": 675,
          "bound": null
        }
      ],
      "ret": "!word_before && word_after",
      "path": [
        0,
        10,
        92,
        93,
        95,
        96,
        97,
        98,
        99,
        101,
        104,
        106,
        107,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "*self matches WordStart",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches WordStart",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at > 0",
          "norm": "0 < at",
          "value": "true",
          "line": 672,
          "bound": null
        },
        {
          "cond": "at < haystack.len()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": "at == haystack.len()"
        },
        {
          "cond": "word_before",
          "norm": null,
          "value": "false",
          "line": 675,
          "bound": null
        }
      ],
      "ret": "word_after",
      "path": [
        0,
        10,
        92,
        93,
        95,
        96,
        97,
        98,
        99,
        101,
        104,
        105,
        107,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "*self matches WordStart",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches WordStart",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at > 0",
          "norm": "0 < at",
          "value": "false",
          "line": 672,
          "bound": "at == 0"
        },
        {
          "cond": "at < haystack.len()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "word_before",
          "norm": null,
          "value": "true",
          "line": 675,
          "bound": null
        }
      ],
      "ret": "!word_before && word_after",
      "path": [
        0,
        10,
        92,
        94,
        98,
        99,
        100,
        102,
        103,
        104,
        106,
        107,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "*self matches WordStart",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches WordStart",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at > 0",
          "norm": "0 < at",
          "value": "false",
          "line": 672,
          "bound": "at == 0"
        },
        {
          "cond": "at < haystack.len()",
          "norm": null,
          "value": "true",
          "line": 674,
          "bound": null
        },
        {
          "cond": "word_before",
          "norm": null,
          "value": "false",
          "line": 675,
          "bound": null
        }
      ],
      "ret": "word_after",
      "path": [
        0,
        10,
        92,
        94,
        98,
        99,
        100,
        102,
        103,
        104,
        105,
        107,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "*self matches WordStart",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches WordStart",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at > 0",
          "norm": "0 < at",
          "value": "false",
          "line": 672,
          "bound": "at == 0"
        },
        {
          "cond": "at < haystack.len()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": "at == haystack.len()"
        },
        {
          "cond": "word_before",
          "norm": null,
          "value": "true",
          "line": 675,
          "bound": null
        }
      ],
      "ret": "!word_before && word_after",
      "path": [
        0,
        10,
        92,
        94,
        98,
        99,
        101,
        104,
        106,
        107,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "*self matches WordStart",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches WordStart",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at > 0",
          "norm": "0 < at",
          "value": "false",
          "line": 672,
          "bound": "at == 0"
        },
        {
          "cond": "at < haystack.len()",
          "norm": null,
          "value": "false",
          "line": 674,
          "bound": "at == haystack.len()"
        },
        {
          "cond": "word_before",
          "norm": null,
          "value": "false",
          "line": 675,
          "bound": null
        }
      ],
      "ret": "word_after",
      "path": [
        0,
        10,
        92,
        94,
        98,
        99,
        101,
        104,
        105,
        107,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "*self matches WordNegate",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches WordNegate",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at > 0",
          "norm": "0 < at",
          "value": "true",
          "line": 665,
          "bound": null
        },
        {
          "cond": "at < haystack.len()",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        }
      ],
      "ret": "word_before == word_after",
      "path": [
        0,
        9,
        79,
        80,
        82,
        83,
        84,
        85,
        86,
        87,
        89,
        90,
        91,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "*self matches WordNegate",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches WordNegate",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at > 0",
          "norm": "0 < at",
          "value": "true",
          "line": 665,
          "bound": null
        },
        {
          "cond": "at < haystack.len()",
          "norm": null,
          "value": "false",
          "line": 667,
          "bound": "at == haystack.len()"
        }
      ],
      "ret": "word_before == word_after",
      "path": [
        0,
        9,
        79,
        80,
        82,
        83,
        84,
        85,
        86,
        88,
        91,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "*self matches WordNegate",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches WordNegate",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at > 0",
          "norm": "0 < at",
          "value": "false",
          "line": 665,
          "bound": "at == 0"
        },
        {
          "cond": "at < haystack.len()",
          "norm": null,
          "value": "true",
          "line": 667,
          "bound": null
        }
      ],
      "ret": "word_before == word_after",
      "path": [
        0,
        9,
        79,
        81,
        85,
        86,
        87,
        89,
        90,
        91,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "*self matches WordNegate",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches WordNegate",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at > 0",
          "norm": "0 < at",
          "value": "false",
          "line": 665,
          "bound": "at == 0"
        },
        {
          "cond": "at < haystack.len()",
          "norm": null,
          "value": "false",
          "line": 667,
          "bound": "at == haystack.len()"
        }
      ],
      "ret": "word_before == word_after",
      "path": [
        0,
        9,
        79,
        81,
        85,
        86,
        88,
        91,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "*self matches Word",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches Word",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at > 0",
          "norm": "0 < at",
          "value": "true",
          "line": 658,
          "bound": null
        },
        {
          "cond": "at < haystack.len()",
          "norm": null,
          "value": "true",
          "line": 660,
          "bound": null
        }
      ],
      "ret": "word_before != word_after",
      "path": [
        0,
        8,
        66,
        67,
        69,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        78,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "*self matches Word",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches Word",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at > 0",
          "norm": "0 < at",
          "value": "true",
          "line": 658,
          "bound": null
        },
        {
          "cond": "at < haystack.len()",
          "norm": null,
          "value": "false",
          "line": 660,
          "bound": "at == haystack.len()"
        }
      ],
      "ret": "word_before != word_after",
      "path": [
        0,
        8,
        66,
        67,
        69,
        70,
        71,
        72,
        73,
        75,
        78,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "*self matches Word",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches Word",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at > 0",
          "norm": "0 < at",
          "value": "false",
          "line": 658,
          "bound": "at == 0"
        },
        {
          "cond": "at < haystack.len()",
          "norm": null,
          "value": "true",
          "line": 660,
          "bound": null
        }
      ],
      "ret": "word_before != word_after",
      "path": [
        0,
        8,
        66,
        68,
        72,
        73,
        74,
        76,
        77,
        78,
        137
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "*self matches Word",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches Word",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at > 0",
          "norm": "0 < at",
          "value": "false",
          "line": 658,
          "bound": "at == 0"
        },
        {
          "cond": "at < haystack.len()",
          "norm": null,
          "value": "false",
          "line": 660,
          "bound": "at == haystack.len()"
        }
      ],
      "ret": "word_before != word_after",
      "path": [
        0,
        8,
        66,
        68,
        72,
        73,
        75,
        78,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 29,
      "conds": [
        {
          "cond": "*self matches EndCRLF",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches EndCRLF",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at == haystack.len()",
          "norm": null,
          "value": "true",
          "line": 651,
          "bound": null
        }
      ],
      "ret": "at == haystack.len()\n                    || haystack[at] == b'\\r'\n                    || (haystack[at] == b'\\n'\n                        && (at == 0 || haystack[at - 1] != b'\\r'))",
      "path": [
        0,
        7,
        48,
        49,
        50,
        54,
        65,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 30,
      "conds": [
        {
          "cond": "*self matches EndCRLF",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches EndCRLF",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at == haystack.len()",
          "norm": null,
          "value": "false",
          "line": 651,
          "bound": null
        },
        {
          "cond": "haystack[at] == b'\\r'",
          "norm": "b'\\r' == haystack[at]",
          "value": "false",
          "line": 652,
          "bound": null
        }
      ],
      "ret": "at == haystack.len()\n                    || haystack[at] == b'\\r'\n                    || (haystack[at] == b'\\n'\n                        && (at == 0 || haystack[at - 1] != b'\\r'))",
      "path": [
        0,
        7,
        48,
        49,
        51,
        52,
        53,
        54,
        65,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 31,
      "conds": [
        {
          "cond": "*self matches EndCRLF",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches EndCRLF",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at == haystack.len()",
          "norm": null,
          "value": "false",
          "line": 651,
          "bound": null
        },
        {
          "cond": "haystack[at] == b'\\r'",
          "norm": "b'\\r' == haystack[at]",
          "value": "true",
          "line": 652,
          "bound": null
        },
        {
          "cond": "haystack[at] == b'\\n'",
          "norm": "b'\\n' == haystack[at]",
          "value": "false",
          "line": 653,
          "bound": null
        },
        {
          "cond": "at == 0",
          "norm": "0 == at",
          "value": "false",
          "line": 654,
          "bound": null
        }
      ],
      "ret": "(at == 0 || haystack[at - 1] != b'\\r')",
      "path": [
        0,
        7,
        48,
        49,
        51,
        52,
        55,
        56,
        57,
        59,
        63,
        64,
        65,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 32,
      "conds": [
        {
          "cond": "*self matches EndCRLF",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches EndCRLF",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at == haystack.len()",
          "norm": null,
          "value": "false",
          "line": 651,
          "bound": null
        },
        {
          "cond": "haystack[at] == b'\\r'",
          "norm": "b'\\r' == haystack[at]",
          "value": "true",
          "line": 652,
          "bound": null
        },
        {
          "cond": "haystack[at] == b'\\n'",
          "norm": "b'\\n' == haystack[at]",
          "value": "false",
          "line": 653,
          "bound": null
        },
        {
          "cond": "at == 0",
          "norm": "0 == at",
          "value": "true",
          "line": 654,
          "bound": null
        }
      ],
      "ret": "haystack[at - 1] != b'\\r'",
      "path": [
        0,
        7,
        48,
        49,
        51,
        52,
        55,
        56,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 33,
      "conds": [
        {
          "cond": "*self matches EndCRLF",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches EndCRLF",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at == haystack.len()",
          "norm": null,
          "value": "false",
          "line": 651,
          "bound": null
        },
        {
          "cond": "haystack[at] == b'\\r'",
          "norm": "b'\\r' == haystack[at]",
          "value": "true",
          "line": 652,
          "bound": null
        },
        {
          "cond": "haystack[at] == b'\\n'",
          "norm": "b'\\n' == haystack[at]",
          "value": "true",
          "line": 653,
          "bound": null
        }
      ],
      "ret": "(haystack[at] == b'\\n'\n                        && (at == 0 || haystack[at - 1] != b'\\r'))",
      "path": [
        0,
        7,
        48,
        49,
        51,
        52,
        55,
        56,
        58,
        64,
        65,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 34,
      "conds": [
        {
          "cond": "*self matches StartCRLF",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches StartCRLF",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at == 0",
          "norm": "0 == at",
          "value": "false",
          "line": 645,
          "bound": null
        }
      ],
      "ret": "at == 0\n                    || haystack[at - 1] == b'\\n'\n                    || (haystack[at - 1] == b'\\r'\n                        && (at >= haystack.len() || haystack[at] != b'\\n'))",
      "path": [
        0,
        6,
        29,
        30,
        35,
        47,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 35,
      "conds": [
        {
          "cond": "*self matches StartCRLF",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches StartCRLF",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at == 0",
          "norm": "0 == at",
          "value": "true",
          "line": 645,
          "bound": null
        },
        {
          "cond": "haystack[at - 1] == b'\\n'",
          "norm": "b'\\n' == haystack[at - 1]",
          "value": "false",
          "line": 646,
          "bound": null
        }
      ],
      "ret": "at == 0\n                    || haystack[at - 1] == b'\\n'\n                    || (haystack[at - 1] == b'\\r'\n                        && (at >= haystack.len() || haystack[at] != b'\\n'))",
      "path": [
        0,
        6,
        29,
        31,
        32,
        33,
        34,
        35,
        47,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 36,
      "conds": [
        {
          "cond": "*self matches StartCRLF",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches StartCRLF",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at == 0",
          "norm": "0 == at",
          "value": "true",
          "line": 645,
          "bound": null
        },
        {
          "cond": "haystack[at - 1] == b'\\n'",
          "norm": "b'\\n' == haystack[at - 1]",
          "value": "true",
          "line": 646,
          "bound": null
        },
        {
          "cond": "haystack[at - 1] == b'\\r'",
          "norm": "b'\\r' == haystack[at - 1]",
          "value": "false",
          "line": 647,
          "bound": null
        },
        {
          "cond": "at >= haystack.len()",
          "norm": null,
          "value": "true",
          "line": 648,
          "bound": "at == haystack.len()"
        }
      ],
      "ret": "(at >= haystack.len() || haystack[at] != b'\\n')",
      "path": [
        0,
        6,
        29,
        31,
        32,
        33,
        36,
        37,
        38,
        39,
        41,
        42,
        45,
        46,
        47,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 37,
      "conds": [
        {
          "cond": "*self matches StartCRLF",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches StartCRLF",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at == 0",
          "norm": "0 == at",
          "value": "true",
          "line": 645,
          "bound": null
        },
        {
          "cond": "haystack[at - 1] == b'\\n'",
          "norm": "b'\\n' == haystack[at - 1]",
          "value": "true",
          "line": 646,
          "bound": null
        },
        {
          "cond": "haystack[at - 1] == b'\\r'",
          "norm": "b'\\r' == haystack[at - 1]",
          "value": "false",
          "line": 647,
          "bound": null
        },
        {
          "cond": "at >= haystack.len()",
          "norm": null,
          "value": "false",
          "line": 648,
          "bound": null
        }
      ],
      "ret": "haystack[at] != b'\\n'",
      "path": [
        0,
        6,
        29,
        31,
        32,
        33,
        36,
        37,
        38,
        39,
        41,
        43,
        44,
        45,
        46,
        47,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 38,
      "conds": [
        {
          "cond": "*self matches StartCRLF",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches StartCRLF",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at == 0",
          "norm": "0 == at",
          "value": "true",
          "line": 645,
          "bound": null
        },
        {
          "cond": "haystack[at - 1] == b'\\n'",
          "norm": "b'\\n' == haystack[at - 1]",
          "value": "true",
          "line": 646,
          "bound": null
        },
        {
          "cond": "haystack[at - 1] == b'\\r'",
          "norm": "b'\\r' == haystack[at - 1]",
          "value": "true",
          "line": 647,
          "bound": null
        }
      ],
      "ret": "(haystack[at - 1] == b'\\r'\n                        && (at >= haystack.len() || haystack[at] != b'\\n'))",
      "path": [
        0,
        6,
        29,
        31,
        32,
        33,
        36,
        37,
        38,
        40,
        46,
        47,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 39,
      "conds": [
        {
          "cond": "*self matches EndLF",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches EndLF",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at == haystack.len()",
          "norm": null,
          "value": "true",
          "line": 643,
          "bound": null
        }
      ],
      "ret": "at == haystack.len() || haystack[at] == b'\\n'",
      "path": [
        0,
        5,
        23,
        24,
        25,
        28,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 40,
      "conds": [
        {
          "cond": "*self matches EndLF",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches EndLF",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at == haystack.len()",
          "norm": null,
          "value": "false",
          "line": 643,
          "bound": null
        }
      ],
      "ret": "haystack[at] == b'\\n'",
      "path": [
        0,
        5,
        23,
        24,
        26,
        27,
        28,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 41,
      "conds": [
        {
          "cond": "*self matches StartLF",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches StartLF",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at == 0",
          "norm": "0 == at",
          "value": "false",
          "line": 642,
          "bound": null
        }
      ],
      "ret": "at == 0 || haystack[at - 1] == b'\\n'",
      "path": [
        0,
        4,
        17,
        18,
        22,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 42,
      "conds": [
        {
          "cond": "*self matches StartLF",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches StartLF",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "at == 0",
          "norm": "0 == at",
          "value": "true",
          "line": 642,
          "bound": null
        }
      ],
      "ret": "haystack[at - 1] == b'\\n'",
      "path": [
        0,
        4,
        17,
        19,
        20,
        21,
        22,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 43,
      "conds": [
        {
          "cond": "*self matches End",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches End",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        }
      ],
      "ret": "at == haystack.len()",
      "path": [
        0,
        3,
        15,
        16,
        137
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 44,
      "conds": [
        {
          "cond": "*self matches Start",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        },
        {
          "cond": "*self matches Start",
          "norm": null,
          "value": "true",
          "line": 639,
          "bound": null
        }
      ],
      "ret": "at == 0",
      "path": [
        0,
        2,
        14,
        137
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}