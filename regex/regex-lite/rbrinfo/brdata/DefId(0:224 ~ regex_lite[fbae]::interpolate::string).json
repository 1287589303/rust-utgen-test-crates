{
  "name": "regex_lite::interpolate::string",
  "mod_info": {
    "name": "interpolate",
    "loc": "regex-lite/src/lib.rs:879:1:879:17"
  },
  "visible": true,
  "loc": "regex-lite/src/interpolate.rs:67:1:107:2",
  "doc": "/// Accepts a replacement string and interpolates capture references with their\n/// corresponding values.\n///\n/// `append` should be a function that appends the string value of a capture\n/// group at a particular index to the string given. If the capture group\n/// index is invalid, then nothing should be appended.\n///\n/// `name_to_index` should be a function that maps a capture group name to a\n/// capture group index. If the given name doesn't exist, then `None` should\n/// be returned.\n///\n/// Finally, `dst` is where the final interpolated contents should be written.\n/// If `replacement` contains no capture group references, then `dst` will be\n/// equivalent to `replacement`.\n///\n/// See the [module documentation](self) for details about the format\n/// supported.\n",
  "code": [
    "pub fn string(",
    "    mut replacement: &str,",
    "    mut append: impl FnMut(usize, &mut String),",
    "    mut name_to_index: impl FnMut(&str) -> Option<usize>,",
    "    dst: &mut String,",
    ") {",
    "    while !replacement.is_empty() {",
    "        match replacement.find('$') {",
    "            None => break,",
    "            Some(i) => {",
    "                dst.push_str(&replacement[..i]);",
    "                replacement = &replacement[i..];",
    "            }",
    "        }",
    "        // Handle escaping of '$'.",
    "        if replacement.as_bytes().get(1).map_or(false, |&b| b == b'$') {",
    "            dst.push_str(\"$\");",
    "            replacement = &replacement[2..];",
    "            continue;",
    "        }",
    "        debug_assert!(!replacement.is_empty());",
    "        let cap_ref = match find_cap_ref(replacement.as_bytes()) {",
    "            Some(cap_ref) => cap_ref,",
    "            None => {",
    "                dst.push_str(\"$\");",
    "                replacement = &replacement[1..];",
    "                continue;",
    "            }",
    "        };",
    "        replacement = &replacement[cap_ref.end..];",
    "        match cap_ref.cap {",
    "            Ref::Number(i) => append(i, dst),",
    "            Ref::Named(name) => {",
    "                if let Some(i) = name_to_index(name) {",
    "                    append(i, dst);",
    "                }",
    "            }",
    "        }",
    "    }",
    "    dst.push_str(replacement);",
    "}"
  ],
  "size": {
    "chain": 8,
    "contra": 5,
    "min_set": 7
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "replacement.is_empty()",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        48,
        50,
        51,
        52
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "replacement.is_empty()",
          "norm": null,
          "value": "false",
          "line": 73,
          "bound": null
        },
        {
          "cond": "replacement.find('$') matches Some(i)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "replacement.as_bytes().get(1).map_or(false, |&b| b == b'$')",
          "norm": null,
          "value": "true",
          "line": 82,
          "bound": null
        },
        {
          "cond": "replacement.is_empty()",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        9,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        49,
        1,
        2,
        3,
        4,
        48,
        50,
        51,
        52
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "replacement.is_empty()",
          "norm": null,
          "value": "false",
          "line": 73,
          "bound": null
        },
        {
          "cond": "replacement.find('$') matches Some(i)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "replacement.as_bytes().get(1).map_or(false, |&b| b == b'$')",
          "norm": null,
          "value": "false",
          "line": 82,
          "bound": null
        },
        {
          "cond": "replacement.is_empty()",
          "norm": null,
          "value": "true",
          "line": 87,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        9,
        11,
        12,
        13,
        14,
        15,
        16,
        20,
        21,
        23,
        24,
        53,
        54,
        55
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "replacement.is_empty()",
          "norm": null,
          "value": "false",
          "line": 73,
          "bound": null
        },
        {
          "cond": "replacement.find('$') matches Some(i)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "replacement.as_bytes().get(1).map_or(false, |&b| b == b'$')",
          "norm": null,
          "value": "false",
          "line": 82,
          "bound": null
        },
        {
          "cond": "replacement.is_empty()",
          "norm": null,
          "value": "false",
          "line": 87,
          "bound": null
        },
        {
          "cond": "find_cap_ref(replacement.as_bytes()) matches Some(cap_ref)",
          "norm": null,
          "value": "true",
          "line": 88,
          "bound": null
        },
        {
          "cond": "find_cap_ref(replacement.as_bytes()) matches Some(cap_ref)",
          "norm": null,
          "value": "true",
          "line": 88,
          "bound": null
        },
        {
          "cond": "cap_ref.cap matches Ref::Number(i)",
          "norm": null,
          "value": "true",
          "line": 97,
          "bound": null
        },
        {
          "cond": "cap_ref.cap matches Ref::Number(i)",
          "norm": null,
          "value": "true",
          "line": 97,
          "bound": null
        },
        {
          "cond": "replacement.is_empty()",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        9,
        11,
        12,
        13,
        14,
        15,
        16,
        20,
        21,
        23,
        25,
        26,
        27,
        28,
        30,
        32,
        35,
        37,
        39,
        40,
        47,
        1,
        2,
        3,
        4,
        48,
        50,
        51,
        52
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "replacement.is_empty()",
          "norm": null,
          "value": "false",
          "line": 73,
          "bound": null
        },
        {
          "cond": "replacement.find('$') matches Some(i)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "replacement.as_bytes().get(1).map_or(false, |&b| b == b'$')",
          "norm": null,
          "value": "false",
          "line": 82,
          "bound": null
        },
        {
          "cond": "replacement.is_empty()",
          "norm": null,
          "value": "false",
          "line": 87,
          "bound": null
        },
        {
          "cond": "find_cap_ref(replacement.as_bytes()) matches Some(cap_ref)",
          "norm": null,
          "value": "true",
          "line": 88,
          "bound": null
        },
        {
          "cond": "find_cap_ref(replacement.as_bytes()) matches Some(cap_ref)",
          "norm": null,
          "value": "true",
          "line": 88,
          "bound": null
        },
        {
          "cond": "cap_ref.cap matches Ref::Named(name)",
          "norm": null,
          "value": "true",
          "line": 97,
          "bound": null
        },
        {
          "cond": "let Some(i) = name_to_index(name)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "replacement.is_empty()",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        9,
        11,
        12,
        13,
        14,
        15,
        16,
        20,
        21,
        23,
        25,
        26,
        27,
        28,
        30,
        32,
        35,
        38,
        41,
        45,
        46,
        47,
        1,
        2,
        3,
        4,
        48,
        50,
        51,
        52
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "replacement.is_empty()",
          "norm": null,
          "value": "false",
          "line": 73,
          "bound": null
        },
        {
          "cond": "replacement.find('$') matches Some(i)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "replacement.as_bytes().get(1).map_or(false, |&b| b == b'$')",
          "norm": null,
          "value": "false",
          "line": 82,
          "bound": null
        },
        {
          "cond": "replacement.is_empty()",
          "norm": null,
          "value": "false",
          "line": 87,
          "bound": null
        },
        {
          "cond": "find_cap_ref(replacement.as_bytes()) matches Some(cap_ref)",
          "norm": null,
          "value": "true",
          "line": 88,
          "bound": null
        },
        {
          "cond": "find_cap_ref(replacement.as_bytes()) matches Some(cap_ref)",
          "norm": null,
          "value": "true",
          "line": 88,
          "bound": null
        },
        {
          "cond": "cap_ref.cap matches Ref::Named(name)",
          "norm": null,
          "value": "true",
          "line": 97,
          "bound": null
        },
        {
          "cond": "let Some(i) = name_to_index(name)",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        },
        {
          "cond": "replacement.is_empty()",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        9,
        11,
        12,
        13,
        14,
        15,
        16,
        20,
        21,
        23,
        25,
        26,
        27,
        28,
        30,
        32,
        35,
        38,
        41,
        42,
        43,
        44,
        46,
        47,
        1,
        2,
        3,
        4,
        48,
        50,
        51,
        52
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "replacement.is_empty()",
          "norm": null,
          "value": "false",
          "line": 73,
          "bound": null
        },
        {
          "cond": "replacement.find('$') matches Some(i)",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "replacement.as_bytes().get(1).map_or(false, |&b| b == b'$')",
          "norm": null,
          "value": "false",
          "line": 82,
          "bound": null
        },
        {
          "cond": "replacement.is_empty()",
          "norm": null,
          "value": "false",
          "line": 87,
          "bound": null
        },
        {
          "cond": "find_cap_ref(replacement.as_bytes()) matches None",
          "norm": null,
          "value": "true",
          "line": 88,
          "bound": null
        },
        {
          "cond": "replacement.is_empty()",
          "norm": null,
          "value": "true",
          "line": 73,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        9,
        11,
        12,
        13,
        14,
        15,
        16,
        20,
        21,
        23,
        25,
        26,
        27,
        28,
        31,
        33,
        34,
        49,
        1,
        2,
        3,
        4,
        48,
        50,
        51,
        52
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "replacement.is_empty()",
          "norm": null,
          "value": "false",
          "line": 73,
          "bound": null
        },
        {
          "cond": "replacement.find('$') matches None",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        },
        {
          "cond": "replacement.find('$') matches None",
          "norm": null,
          "value": "true",
          "line": 74,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        8,
        10,
        48,
        50,
        51,
        52
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}