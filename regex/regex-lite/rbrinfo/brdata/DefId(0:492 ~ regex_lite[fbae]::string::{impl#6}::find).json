{
  "name": "regex_lite::string::{impl#6}::find",
  "mod_info": {
    "name": "string",
    "loc": "regex-lite/src/lib.rs:884:1:884:12"
  },
  "visible": true,
  "loc": "regex-lite/src/string.rs:220:5:222:6",
  "doc": "/// This routine searches for the first match of this regex in the\n/// haystack given, and if found, returns a [`Match`]. The `Match`\n/// provides access to both the byte offsets of the match and the actual\n/// substring that matched.\n///\n/// Note that this should only be used if you want to find the entire\n/// match. If instead you just want to test the existence of a match,\n/// it's potentially faster to use `Regex::is_match(hay)` instead of\n/// `Regex::find(hay).is_some()`.\n///\n/// # Example\n///\n/// Find the first word with exactly 13 word characters:\n///\n/// ```\n/// use regex_lite::Regex;\n///\n/// let re = Regex::new(r\"\\b\\w{13}\\b\").unwrap();\n/// let hay = \"I categorically deny having triskaidekaphobia.\";\n/// let mat = re.find(hay).unwrap();\n/// assert_eq!(2..15, mat.range());\n/// assert_eq!(\"categorically\", mat.as_str());\n/// ```\n",
  "code": [
    "pub fn find<'h>(&self, haystack: &'h str) -> Option<Match<'h>> {",
    "    self.find_at(haystack, 0)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}