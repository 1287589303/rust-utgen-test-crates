{
  "name": "regex_lite::nfa::{impl#6}::c_fail",
  "mod_info": {
    "name": "nfa",
    "loc": "regex-lite/src/lib.rs:880:1:880:9"
  },
  "visible": false,
  "loc": "regex-lite/src/nfa.rs:313:5:316:6",
  "doc": "/// Compile a \"fail\" state that can never be transitioned out of.\n",
  "code": [
    "fn c_fail(&self) -> Result<ThompsonRef, Error> {",
    "    let id = self.add(State::Fail)?;",
    "    Ok(ThompsonRef { start: id, end: id })",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.add(State::Fail)?",
          "norm": null,
          "value": "Err/None",
          "line": 314,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.add(State::Fail)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 314,
          "bound": null
        }
      ],
      "ret": "Ok(ThompsonRef { start: id, end: id })",
      "path": [
        0,
        1,
        2,
        5,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}