{
  "name": "regex_lite::string::{impl#6}::replace_all",
  "mod_info": {
    "name": "string",
    "loc": "regex-lite/src/lib.rs:884:1:884:12"
  },
  "visible": true,
  "loc": "regex-lite/src/string.rs:828:5:834:6",
  "doc": "/// Replaces all non-overlapping matches in the haystack with the\n/// replacement provided. This is the same as calling `replacen` with\n/// `limit` set to `0`.\n///\n/// The documentation for [`Regex::replace`] goes into more detail about\n/// what kinds of replacement strings are supported.\n///\n/// # Time complexity\n///\n/// Since iterators over all matches requires running potentially many\n/// searches on the haystack, and since each search has worst case\n/// `O(m * n)` time complexity, the overall worst case time complexity for\n/// this routine is `O(m * n^2)`.\n///\n/// # Fallibility\n///\n/// If you need to write a replacement routine where any individual\n/// replacement might \"fail,\" doing so with this API isn't really feasible\n/// because there's no way to stop the search process if a replacement\n/// fails. Instead, if you need this functionality, you should consider\n/// implementing your own replacement routine:\n///\n/// ```\n/// use regex_lite::{Captures, Regex};\n///\n/// fn replace_all<E>(\n///     re: &Regex,\n///     haystack: &str,\n///     replacement: impl Fn(&Captures) -> Result<String, E>,\n/// ) -> Result<String, E> {\n///     let mut new = String::with_capacity(haystack.len());\n///     let mut last_match = 0;\n///     for caps in re.captures_iter(haystack) {\n///         let m = caps.get(0).unwrap();\n///         new.push_str(&haystack[last_match..m.start()]);\n///         new.push_str(&replacement(&caps)?);\n///         last_match = m.end();\n///     }\n///     new.push_str(&haystack[last_match..]);\n///     Ok(new)\n/// }\n///\n/// // Let's replace each word with the number of bytes in that word.\n/// // But if we see a word that is \"too long,\" we'll give up.\n/// let re = Regex::new(r\"\\w+\").unwrap();\n/// let replacement = |caps: &Captures| -> Result<String, &'static str> {\n///     if caps[0].len() >= 5 {\n///         return Err(\"word too long\");\n///     }\n///     Ok(caps[0].len().to_string())\n/// };\n/// assert_eq!(\n///     Ok(\"2 3 3 3?\".to_string()),\n///     replace_all(&re, \"hi how are you?\", &replacement),\n/// );\n/// assert!(replace_all(&re, \"hi there\", &replacement).is_err());\n/// ```\n///\n/// # Example\n///\n/// This example shows how to flip the order of whitespace delimited\n/// fields, and normalizes the whitespace that delimits the fields:\n///\n/// ```\n/// use regex_lite::Regex;\n///\n/// let re = Regex::new(r\"(?m)^(\\S+)\\s+(\\S+)$\").unwrap();\n/// let hay = \"\n/// Greetings  1973\n/// Wild\\t1973\n/// BornToRun\\t\\t\\t\\t1975\n/// Darkness                    1978\n/// TheRiver 1980\n/// \";\n/// let new = re.replace_all(hay, \"$2 $1\");\n/// assert_eq!(new, \"\n/// 1973 Greetings\n/// 1973 Wild\n/// 1975 BornToRun\n/// 1978 Darkness\n/// 1980 TheRiver\n/// \");\n/// ```\n",
  "code": [
    "pub fn replace_all<'h, R: Replacer>(",
    "    &self,",
    "    haystack: &'h str,",
    "    rep: R,",
    ") -> Cow<'h, str> {",
    "    self.replacen(haystack, 0, rep)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}