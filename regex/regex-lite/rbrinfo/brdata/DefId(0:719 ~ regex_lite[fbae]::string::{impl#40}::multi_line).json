{
  "name": "regex_lite::string::{impl#40}::multi_line",
  "mod_info": {
    "name": "string",
    "loc": "regex-lite/src/lib.rs:884:1:884:12"
  },
  "visible": true,
  "loc": "regex-lite/src/string.rs:2724:5:2727:6",
  "doc": "/// This configures multi-line mode for the entire pattern.\n///\n/// Enabling multi-line mode changes the behavior of the `^` and `$` anchor\n/// assertions. Instead of only matching at the beginning and end of a\n/// haystack, respectively, multi-line mode causes them to match at the\n/// beginning and end of a line *in addition* to the beginning and end of\n/// a haystack. More precisely, `^` will match at the position immediately\n/// following a `\\n` and `$` will match at the position immediately\n/// preceding a `\\n`.\n///\n/// The behavior of this option is impacted by the [`RegexBuilder::crlf`]\n/// setting. Namely, CRLF mode changes the line terminator to be either\n/// `\\r` or `\\n`, but never at the position between a `\\r` and `\\`n.\n///\n/// This setting can also be configured using the inline flag `m` in the\n/// pattern.\n///\n/// The default for this is `false`.\n///\n/// # Example\n///\n/// ```\n/// use regex_lite::RegexBuilder;\n///\n/// let re = RegexBuilder::new(r\"^foo$\")\n///     .multi_line(true)\n///     .build()\n///     .unwrap();\n/// assert_eq!(Some(1..4), re.find(\"\\nfoo\\n\").map(|m| m.range()));\n/// ```\n",
  "code": [
    "pub fn multi_line(&mut self, yes: bool) -> &mut RegexBuilder {",
    "    self.hir_config.flags.multi_line = yes;",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}