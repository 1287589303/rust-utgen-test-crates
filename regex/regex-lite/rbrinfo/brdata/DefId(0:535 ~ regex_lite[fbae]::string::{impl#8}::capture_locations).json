{
  "name": "regex_lite::string::{impl#8}::capture_locations",
  "mod_info": {
    "name": "string",
    "loc": "regex-lite/src/lib.rs:884:1:884:12"
  },
  "visible": true,
  "loc": "regex-lite/src/string.rs:1436:5:1440:6",
  "doc": "/// Returns a fresh allocated set of capture locations that can\n/// be reused in multiple calls to [`Regex::captures_read`] or\n/// [`Regex::captures_read_at`].\n///\n/// The returned locations can be used for any subsequent search for this\n/// particular regex. There is no guarantee that it is correct to use for\n/// other regexes, even if they have the same number of capture groups.\n///\n/// # Example\n///\n/// ```\n/// use regex_lite::Regex;\n///\n/// let re = Regex::new(r\"(.)(.)(\\w+)\").unwrap();\n/// let mut locs = re.capture_locations();\n/// assert!(re.captures_read(&mut locs, \"Padron\").is_some());\n/// assert_eq!(locs.get(0), Some((0, 6)));\n/// assert_eq!(locs.get(1), Some((0, 1)));\n/// assert_eq!(locs.get(2), Some((1, 2)));\n/// assert_eq!(locs.get(3), Some((2, 6)));\n/// ```\n",
  "code": [
    "pub fn capture_locations(&self) -> CaptureLocations {",
    "    // OK because NFA construction would have failed if this overflowed.",
    "    let len = self.pikevm.nfa().group_len().checked_mul(2).unwrap();",
    "    CaptureLocations(vec![None; len])",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "CaptureLocations(vec![None; len])",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}