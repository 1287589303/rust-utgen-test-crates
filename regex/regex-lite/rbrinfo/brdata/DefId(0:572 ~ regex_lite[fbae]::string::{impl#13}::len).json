{
  "name": "regex_lite::string::{impl#13}::len",
  "mod_info": {
    "name": "string",
    "loc": "regex-lite/src/lib.rs:884:1:884:12"
  },
  "visible": true,
  "loc": "regex-lite/src/string.rs:1929:5:1931:6",
  "doc": "/// Returns the total number of capture groups. This includes both\n/// matching and non-matching groups.\n///\n/// The length returned is always equivalent to the number of elements\n/// yielded by [`Captures::iter`]. Consequently, the length is always\n/// greater than zero since every `Captures` value always includes the\n/// match for the entire regex.\n///\n/// # Example\n///\n/// ```\n/// use regex_lite::Regex;\n///\n/// let re = Regex::new(r\"(\\w)(\\d)?(\\w)\").unwrap();\n/// let caps = re.captures(\"AZ\").unwrap();\n/// assert_eq!(caps.len(), 4);\n/// ```\n",
  "code": [
    "pub fn len(&self) -> usize {",
    "    self.pikevm.nfa().group_len()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}