{
  "name": "regex_lite::string::{impl#6}::find_iter",
  "mod_info": {
    "name": "string",
    "loc": "regex-lite/src/lib.rs:884:1:884:12"
  },
  "visible": true,
  "loc": "regex-lite/src/string.rs:252:5:257:6",
  "doc": "/// Returns an iterator that yields successive non-overlapping matches in\n/// the given haystack. The iterator yields values of type [`Match`].\n///\n/// # Time complexity\n///\n/// Note that since `find_iter` runs potentially many searches on the\n/// haystack and since each search has worst case `O(m * n)` time\n/// complexity, the overall worst case time complexity for iteration is\n/// `O(m * n^2)`.\n///\n/// # Example\n///\n/// Find every word with exactly 13 word characters:\n///\n/// ```\n/// use regex_lite::Regex;\n///\n/// let re = Regex::new(r\"\\b\\w{13}\\b\").unwrap();\n/// let hay = \"Retroactively relinquishing remunerations is reprehensible.\";\n/// let matches: Vec<_> = re.find_iter(hay).map(|m| m.as_str()).collect();\n/// assert_eq!(matches, vec![\n///     \"Retroactively\",\n///     \"relinquishing\",\n///     \"remunerations\",\n///     \"reprehensible\",\n/// ]);\n/// ```\n",
  "code": [
    "pub fn find_iter<'r, 'h>(&'r self, haystack: &'h str) -> Matches<'r, 'h> {",
    "    Matches {",
    "        haystack,",
    "        it: self.pikevm.find_iter(self.pool.get(), haystack.as_bytes()),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Matches {\n            haystack,\n            it: self.pikevm.find_iter(self.pool.get(), haystack.as_bytes()),\n        }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}