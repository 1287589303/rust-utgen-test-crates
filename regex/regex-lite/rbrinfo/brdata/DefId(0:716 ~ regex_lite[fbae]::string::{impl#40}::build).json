{
  "name": "regex_lite::string::{impl#40}::build",
  "mod_info": {
    "name": "string",
    "loc": "regex-lite/src/lib.rs:884:1:884:12"
  },
  "visible": true,
  "loc": "regex-lite/src/string.rs:2653:5:2663:6",
  "doc": "/// Compiles the pattern given to `RegexBuilder::new` with the\n/// configuration set on this builder.\n///\n/// If the pattern isn't a valid regex or if a configured size limit was\n/// exceeded, then an error is returned.\n",
  "code": [
    "pub fn build(&self) -> Result<Regex, Error> {",
    "    let hir = Hir::parse(self.hir_config, &self.pattern)?;",
    "    let nfa = NFA::new(self.nfa_config, self.pattern.clone(), &hir)?;",
    "    let pikevm = Arc::new(PikeVM::new(nfa));",
    "    let pool = {",
    "        let pikevm = Arc::clone(&pikevm);",
    "        let create = Box::new(move || Cache::new(&pikevm));",
    "        CachePool::new(create)",
    "    };",
    "    Ok(Regex { pikevm, pool })",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "Hir::parse(self.hir_config, &self.pattern)?",
          "norm": null,
          "value": "Err/None",
          "line": 2654,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        37,
        38,
        39
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "Hir::parse(self.hir_config, &self.pattern)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2654,
          "bound": null
        },
        {
          "cond": "NFA::new(self.nfa_config, self.pattern.clone(), &hir)?",
          "norm": null,
          "value": "Err/None",
          "line": 2655,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        10,
        11,
        12,
        13,
        15,
        17,
        18,
        36,
        38,
        39
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "Hir::parse(self.hir_config, &self.pattern)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2654,
          "bound": null
        },
        {
          "cond": "NFA::new(self.nfa_config, self.pattern.clone(), &hir)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2655,
          "bound": null
        }
      ],
      "ret": "Ok(Regex { pikevm, pool })",
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        10,
        11,
        12,
        13,
        16,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        39
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}