{
  "name": "regex_lite::nfa::{impl#6}::check_size_limit",
  "mod_info": {
    "name": "nfa",
    "loc": "regex-lite/src/lib.rs:880:1:880:9"
  },
  "visible": false,
  "loc": "regex-lite/src/nfa.rs:696:5:703:6",
  "doc": "/// Checks that the current heap memory usage of the NFA being compiled\n/// doesn't exceed the configured size limit. If it does, an error is\n/// returned.\n",
  "code": [
    "fn check_size_limit(&self) -> Result<(), Error> {",
    "    if let Some(limit) = self.config.size_limit {",
    "        if self.nfa.borrow().memory_usage() > limit {",
    "            return Err(Error::new(\"compiled regex exceeded size limit\"));",
    "        }",
    "    }",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(limit) = self.config.size_limit",
          "norm": null,
          "value": "true",
          "line": 697,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        11,
        12,
        13
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(limit) = self.config.size_limit",
          "norm": null,
          "value": "true",
          "line": 697,
          "bound": null
        },
        {
          "cond": "self.nfa.borrow().memory_usage() > limit",
          "norm": "limit < self.nfa.borrow().memory_usage()",
          "value": "true",
          "line": 698,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(\"compiled regex exceeded size limit\"))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some(limit) = self.config.size_limit",
          "norm": null,
          "value": "true",
          "line": 697,
          "bound": null
        },
        {
          "cond": "self.nfa.borrow().memory_usage() > limit",
          "norm": "limit < self.nfa.borrow().memory_usage()",
          "value": "false",
          "line": 698,
          "bound": "self.nfa.borrow().memory_usage() == limit"
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        9,
        10,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}