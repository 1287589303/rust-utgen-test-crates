{
  "name": "regex_lite::hir::parse::into_class_item_range",
  "mod_info": {
    "name": "hir::parse",
    "loc": "regex-lite/src/hir/mod.rs:5:1:5:11"
  },
  "visible": false,
  "loc": "regex-lite/src/hir/parse.rs:1324:1:1329:2",
  "doc": "/// Converts the given Hir to a literal char if the Hir is just a single\n/// character. Otherwise this returns an error.\n///\n/// This is useful in contexts where you can only accept a single character,\n/// but where it is convenient to parse something more general. For example,\n/// parsing a single part of a character class range. It's useful to reuse\n/// the literal parsing code, but that code can itself return entire classes\n/// which can't be used as the start/end of a class range.\n",
  "code": [
    "fn into_class_item_range(hir: Hir) -> Result<char, Error> {",
    "    match hir.kind {",
    "        HirKind::Char(ch) => Ok(ch),",
    "        _ => Err(Error::new(ERR_CLASS_INVALID_RANGE_ITEM)),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "hir.kind matches _",
          "norm": null,
          "value": "true",
          "line": 1327,
          "bound": null
        },
        {
          "cond": "hir.kind matches HirKind::Char(ch)",
          "norm": null,
          "value": "false",
          "line": 1326,
          "bound": null
        }
      ],
      "ret": "Err(Error::new(ERR_CLASS_INVALID_RANGE_ITEM))",
      "path": [
        0,
        1,
        4,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "hir.kind matches HirKind::Char(ch)",
          "norm": null,
          "value": "true",
          "line": 1325,
          "bound": null
        },
        {
          "cond": "hir.kind matches HirKind::Char(ch)",
          "norm": null,
          "value": "true",
          "line": 1325,
          "bound": null
        }
      ],
      "ret": "Ok(ch)",
      "path": [
        0,
        2,
        3,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}