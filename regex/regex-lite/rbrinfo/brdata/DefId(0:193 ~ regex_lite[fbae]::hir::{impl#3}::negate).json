{
  "name": "regex_lite::hir::{impl#3}::negate",
  "mod_info": {
    "name": "hir",
    "loc": "regex-lite/src/lib.rs:877:1:877:9"
  },
  "visible": false,
  "loc": "regex-lite/src/hir/mod.rs:418:5:473:6",
  "doc": "/// Negate this set.\n///\n/// For all `x` where `x` is any element, if `x` was in this set, then it\n/// will not be in this set after negation.\n",
  "code": [
    "fn negate(&mut self) {",
    "    const MIN: char = '\\x00';",
    "    const MAX: char = char::MAX;",
    "",
    "    if self.ranges.is_empty() {",
    "        self.ranges.push(ClassRange { start: MIN, end: MAX });",
    "        return;",
    "    }",
    "",
    "    // There should be a way to do this in-place with constant memory,",
    "    // but I couldn't figure out a simple way to do it. So just append",
    "    // the negation to the end of this range, and then drain it before",
    "    // we're done.",
    "    let drain_end = self.ranges.len();",
    "",
    "    // If our class doesn't start the minimum possible char, then negation",
    "    // needs to include all codepoints up to the minimum in this set.",
    "    if self.ranges[0].start > MIN {",
    "        self.ranges.push(ClassRange {",
    "            start: MIN,",
    "            // OK because we know it's bigger than MIN.",
    "            end: prev_char(self.ranges[0].start).unwrap(),",
    "        });",
    "    }",
    "    for i in 1..drain_end {",
    "        // let lower = self.ranges[i - 1].upper().increment();",
    "        // let upper = self.ranges[i].lower().decrement();",
    "        // self.ranges.push(I::create(lower, upper));",
    "        self.ranges.push(ClassRange {",
    "            // OK because we know i-1 is never the last range and therefore",
    "            // there must be a range greater than it. It therefore follows",
    "            // that 'end' can never be char::MAX, and thus there must be",
    "            // a next char.",
    "            start: next_char(self.ranges[i - 1].end).unwrap(),",
    "            // Since 'i' is guaranteed to never be the first range, it",
    "            // follows that there is always a range before this and thus",
    "            // 'start' can never be '\\x00'. Thus, there must be a previous",
    "            // char.",
    "            end: prev_char(self.ranges[i].start).unwrap(),",
    "        });",
    "    }",
    "    if self.ranges[drain_end - 1].end < MAX {",
    "        // let lower = self.ranges[drain_end - 1].upper().increment();",
    "        // self.ranges.push(I::create(lower, I::Bound::max_value()));",
    "        self.ranges.push(ClassRange {",
    "            // OK because we know 'end' is less than char::MAX, and thus",
    "            // there is a next char.",
    "            start: next_char(self.ranges[drain_end - 1].end).unwrap(),",
    "            end: MAX,",
    "        });",
    "    }",
    "    self.ranges.drain(..drain_end);",
    "    // We don't need to canonicalize because we processed the ranges above",
    "    // in canonical order and the new ranges we added based on those are",
    "    // also necessarily in canonical order.",
    "}"
  ],
  "size": {
    "chain": 9,
    "contra": 4,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "true",
          "line": 422,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 422,
          "bound": null
        },
        {
          "cond": "self.ranges[0].start > MIN",
          "norm": "MIN < self.ranges[0].start",
          "value": "true",
          "line": 435,
          "bound": null
        },
        {
          "cond": "i in 1..drain_end",
          "norm": null,
          "value": "true",
          "line": 442,
          "bound": null
        },
        {
          "cond": "i in 1..drain_end",
          "norm": null,
          "value": "false",
          "line": 442,
          "bound": null
        },
        {
          "cond": "self.ranges[drain_end - 1].end < MAX",
          "norm": "MAX > self.ranges[drain_end - 1].end",
          "value": "true",
          "line": 459,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        15,
        16,
        17,
        19,
        21,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        40,
        41,
        42
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 422,
          "bound": null
        },
        {
          "cond": "self.ranges[0].start > MIN",
          "norm": "MIN < self.ranges[0].start",
          "value": "true",
          "line": 435,
          "bound": null
        },
        {
          "cond": "i in 1..drain_end",
          "norm": null,
          "value": "true",
          "line": 442,
          "bound": null
        },
        {
          "cond": "i in 1..drain_end",
          "norm": null,
          "value": "false",
          "line": 442,
          "bound": null
        },
        {
          "cond": "self.ranges[drain_end - 1].end < MAX",
          "norm": "MAX > self.ranges[drain_end - 1].end",
          "value": "false",
          "line": 459,
          "bound": "self.ranges[drain_end - 1].end == MAX"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        15,
        16,
        17,
        19,
        21,
        30,
        31,
        38,
        39,
        40,
        41,
        42
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 422,
          "bound": null
        },
        {
          "cond": "self.ranges[0].start > MIN",
          "norm": "MIN < self.ranges[0].start",
          "value": "true",
          "line": 435,
          "bound": null
        },
        {
          "cond": "i in 1..drain_end",
          "norm": null,
          "value": "false",
          "line": 442,
          "bound": null
        },
        {
          "cond": "self.ranges[drain_end - 1].end < MAX",
          "norm": "MAX > self.ranges[drain_end - 1].end",
          "value": "true",
          "line": 459,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        13,
        14,
        15,
        16,
        17,
        19,
        21,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        40,
        41,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 422,
          "bound": null
        },
        {
          "cond": "self.ranges[0].start > MIN",
          "norm": "MIN < self.ranges[0].start",
          "value": "true",
          "line": 435,
          "bound": null
        },
        {
          "cond": "i in 1..drain_end",
          "norm": null,
          "value": "false",
          "line": 442,
          "bound": null
        },
        {
          "cond": "self.ranges[drain_end - 1].end < MAX",
          "norm": "MAX > self.ranges[drain_end - 1].end",
          "value": "false",
          "line": 459,
          "bound": "self.ranges[drain_end - 1].end == MAX"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        13,
        14,
        15,
        16,
        17,
        19,
        21,
        30,
        31,
        38,
        39,
        40,
        41,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 422,
          "bound": null
        },
        {
          "cond": "self.ranges[0].start > MIN",
          "norm": "MIN < self.ranges[0].start",
          "value": "false",
          "line": 435,
          "bound": "self.ranges[0].start == MIN"
        },
        {
          "cond": "i in 1..drain_end",
          "norm": null,
          "value": "true",
          "line": 442,
          "bound": null
        },
        {
          "cond": "i in 1..drain_end",
          "norm": null,
          "value": "false",
          "line": 442,
          "bound": null
        },
        {
          "cond": "self.ranges[drain_end - 1].end < MAX",
          "norm": "MAX > self.ranges[drain_end - 1].end",
          "value": "true",
          "line": 459,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        5,
        6,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        15,
        16,
        17,
        19,
        21,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        40,
        41,
        42
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 422,
          "bound": null
        },
        {
          "cond": "self.ranges[0].start > MIN",
          "norm": "MIN < self.ranges[0].start",
          "value": "false",
          "line": 435,
          "bound": "self.ranges[0].start == MIN"
        },
        {
          "cond": "i in 1..drain_end",
          "norm": null,
          "value": "true",
          "line": 442,
          "bound": null
        },
        {
          "cond": "i in 1..drain_end",
          "norm": null,
          "value": "false",
          "line": 442,
          "bound": null
        },
        {
          "cond": "self.ranges[drain_end - 1].end < MAX",
          "norm": "MAX > self.ranges[drain_end - 1].end",
          "value": "false",
          "line": 459,
          "bound": "self.ranges[drain_end - 1].end == MAX"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        5,
        6,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        15,
        16,
        17,
        19,
        21,
        30,
        31,
        38,
        39,
        40,
        41,
        42
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 422,
          "bound": null
        },
        {
          "cond": "self.ranges[0].start > MIN",
          "norm": "MIN < self.ranges[0].start",
          "value": "false",
          "line": 435,
          "bound": "self.ranges[0].start == MIN"
        },
        {
          "cond": "i in 1..drain_end",
          "norm": null,
          "value": "false",
          "line": 442,
          "bound": null
        },
        {
          "cond": "self.ranges[drain_end - 1].end < MAX",
          "norm": "MAX > self.ranges[drain_end - 1].end",
          "value": "true",
          "line": 459,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        5,
        6,
        12,
        13,
        14,
        15,
        16,
        17,
        19,
        21,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        40,
        41,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 422,
          "bound": null
        },
        {
          "cond": "self.ranges[0].start > MIN",
          "norm": "MIN < self.ranges[0].start",
          "value": "false",
          "line": 435,
          "bound": "self.ranges[0].start == MIN"
        },
        {
          "cond": "i in 1..drain_end",
          "norm": null,
          "value": "false",
          "line": 442,
          "bound": null
        },
        {
          "cond": "self.ranges[drain_end - 1].end < MAX",
          "norm": "MAX > self.ranges[drain_end - 1].end",
          "value": "false",
          "line": 459,
          "bound": "self.ranges[drain_end - 1].end == MAX"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        5,
        6,
        12,
        13,
        14,
        15,
        16,
        17,
        19,
        21,
        30,
        31,
        38,
        39,
        40,
        41,
        42
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}