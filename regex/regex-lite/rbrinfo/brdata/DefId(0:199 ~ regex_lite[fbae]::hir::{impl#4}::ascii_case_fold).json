{
  "name": "regex_lite::hir::{impl#4}::ascii_case_fold",
  "mod_info": {
    "name": "hir",
    "loc": "regex-lite/src/lib.rs:877:1:877:9"
  },
  "visible": false,
  "loc": "regex-lite/src/hir/mod.rs:528:5:546:6",
  "doc": "/// Apply simple case folding to this byte range. Only ASCII case mappings\n/// (for A-Za-z) are applied.\n///\n/// Additional ranges are appended to the given vector. Canonical ordering\n/// is *not* maintained in the given vector.\n",
  "code": [
    "fn ascii_case_fold(&self) -> Option<ClassRange> {",
    "    if !(ClassRange { start: 'a', end: 'z' }).is_intersection_empty(self) {",
    "        let start = core::cmp::max(self.start, 'a');",
    "        let end = core::cmp::min(self.end, 'z');",
    "        return Some(ClassRange {",
    "            start: char::try_from(u32::from(start) - 32).unwrap(),",
    "            end: char::try_from(u32::from(end) - 32).unwrap(),",
    "        });",
    "    }",
    "    if !(ClassRange { start: 'A', end: 'Z' }).is_intersection_empty(self) {",
    "        let start = core::cmp::max(self.start, 'A');",
    "        let end = core::cmp::min(self.end, 'Z');",
    "        return Some(ClassRange {",
    "            start: char::try_from(u32::from(start) + 32).unwrap(),",
    "            end: char::try_from(u32::from(end) + 32).unwrap(),",
    "        });",
    "    }",
    "    None",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(ClassRange { start: 'a', end: 'z' }).is_intersection_empty(self)",
          "norm": null,
          "value": "true",
          "line": 529,
          "bound": null
        },
        {
          "cond": "(ClassRange { start: 'A', end: 'Z' }).is_intersection_empty(self)",
          "norm": null,
          "value": "true",
          "line": 537,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        14,
        15,
        27
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(ClassRange { start: 'a', end: 'z' }).is_intersection_empty(self)",
          "norm": null,
          "value": "true",
          "line": 529,
          "bound": null
        },
        {
          "cond": "(ClassRange { start: 'A', end: 'Z' }).is_intersection_empty(self)",
          "norm": null,
          "value": "false",
          "line": 537,
          "bound": null
        }
      ],
      "ret": "Some(ClassRange {\n                start: char::try_from(u32::from(start) + 32).unwrap(),\n                end: char::try_from(u32::from(end) + 32).unwrap(),\n            })",
      "path": [
        0,
        1,
        2,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(ClassRange { start: 'a', end: 'z' }).is_intersection_empty(self)",
          "norm": null,
          "value": "false",
          "line": 529,
          "bound": null
        }
      ],
      "ret": "Some(ClassRange {\n                start: char::try_from(u32::from(start) - 32).unwrap(),\n                end: char::try_from(u32::from(end) - 32).unwrap(),\n            })",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        27
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}