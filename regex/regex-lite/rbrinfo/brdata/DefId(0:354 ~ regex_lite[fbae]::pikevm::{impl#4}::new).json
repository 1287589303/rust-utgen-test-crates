{
  "name": "regex_lite::pikevm::{impl#4}::new",
  "mod_info": {
    "name": "pikevm",
    "loc": "regex-lite/src/lib.rs:881:1:881:12"
  },
  "visible": true,
  "loc": "regex-lite/src/pikevm.rs:563:5:569:6",
  "doc": "/// Create a new `PikeVM` cache.\n///\n/// A potentially more convenient routine to create a cache is\n/// `PikeVM::create_cache`, as it does not require also importing the\n/// `Cache` type.\n///\n/// If you want to reuse the returned `Cache` with some other `PikeVM`,\n/// then you must call `Cache::reset` with the desired `PikeVM`.\n",
  "code": [
    "pub(crate) fn new(re: &PikeVM) -> Cache {",
    "    Cache {",
    "        stack: vec![],",
    "        curr: ActiveStates::new(re),",
    "        next: ActiveStates::new(re),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Cache {\n            stack: vec![],\n            curr: ActiveStates::new(re),\n            next: ActiveStates::new(re),\n        }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}