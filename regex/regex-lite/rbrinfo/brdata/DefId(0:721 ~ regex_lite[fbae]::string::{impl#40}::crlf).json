{
  "name": "regex_lite::string::{impl#40}::crlf",
  "mod_info": {
    "name": "string",
    "loc": "regex-lite/src/lib.rs:884:1:884:12"
  },
  "visible": true,
  "loc": "regex-lite/src/string.rs:2808:5:2811:6",
  "doc": "/// This configures CRLF mode for the entire pattern.\n///\n/// When CRLF mode is enabled, both `\\r` (\"carriage return\" or CR for\n/// short) and `\\n` (\"line feed\" or LF for short) are treated as line\n/// terminators. This results in the following:\n///\n/// * Unless dot-matches-new-line mode is enabled, `.` will now match any\n/// character except for `\\n` and `\\r`.\n/// * When multi-line mode is enabled, `^` will match immediately\n/// following a `\\n` or a `\\r`. Similarly, `$` will match immediately\n/// preceding a `\\n` or a `\\r`. Neither `^` nor `$` will ever match between\n/// `\\r` and `\\n`.\n///\n/// This setting can also be configured using the inline flag `R` in\n/// the pattern.\n///\n/// The default for this is `false`.\n///\n/// # Example\n///\n/// ```\n/// use regex_lite::RegexBuilder;\n///\n/// let re = RegexBuilder::new(r\"^foo$\")\n///     .multi_line(true)\n///     .crlf(true)\n///     .build()\n///     .unwrap();\n/// let hay = \"\\r\\nfoo\\r\\n\";\n/// // If CRLF mode weren't enabled here, then '$' wouldn't match\n/// // immediately after 'foo', and thus no match would be found.\n/// assert_eq!(Some(\"foo\"), re.find(hay).map(|m| m.as_str()));\n/// ```\n///\n/// This example demonstrates that `^` will never match at a position\n/// between `\\r` and `\\n`. (`$` will similarly not match between a `\\r`\n/// and a `\\n`.)\n///\n/// ```\n/// use regex_lite::RegexBuilder;\n///\n/// let re = RegexBuilder::new(r\"^\")\n///     .multi_line(true)\n///     .crlf(true)\n///     .build()\n///     .unwrap();\n/// let hay = \"\\r\\n\\r\\n\";\n/// let ranges: Vec<_> = re.find_iter(hay).map(|m| m.range()).collect();\n/// assert_eq!(ranges, vec![0..0, 2..2, 4..4]);\n/// ```\n",
  "code": [
    "pub fn crlf(&mut self, yes: bool) -> &mut RegexBuilder {",
    "    self.hir_config.flags.crlf = yes;",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}