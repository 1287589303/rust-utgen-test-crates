{
  "name": "regex_lite::string::{impl#22}::next",
  "mod_info": {
    "name": "string",
    "loc": "regex-lite/src/lib.rs:884:1:884:12"
  },
  "visible": true,
  "loc": "regex-lite/src/string.rs:2254:5:2272:6",
  "doc": "",
  "code": [
    "fn next(&mut self) -> Option<&'h str> {",
    "    match self.finder.next() {",
    "        None => {",
    "            let len = self.haystack.len();",
    "            if self.last > len {",
    "                None",
    "            } else {",
    "                let range = self.last..len;",
    "                self.last = len + 1; // Next call will return None",
    "                Some(&self.haystack[range])",
    "            }",
    "        }",
    "        Some(m) => {",
    "            let range = self.last..m.start();",
    "            self.last = m.end();",
    "            Some(&self.haystack[range])",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.finder.next() matches Some(m)",
          "norm": null,
          "value": "true",
          "line": 2255,
          "bound": null
        }
      ],
      "ret": "Some(&self.haystack[range])",
      "path": [
        0,
        1,
        4,
        12,
        13,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.finder.next() matches None",
          "norm": null,
          "value": "true",
          "line": 2255,
          "bound": null
        },
        {
          "cond": "self.finder.next() matches None",
          "norm": null,
          "value": "true",
          "line": 2255,
          "bound": null
        },
        {
          "cond": "self.last > len",
          "norm": "len < self.last",
          "value": "true",
          "line": 2258,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        3,
        5,
        6,
        7,
        11,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.finder.next() matches None",
          "norm": null,
          "value": "true",
          "line": 2255,
          "bound": null
        },
        {
          "cond": "self.finder.next() matches None",
          "norm": null,
          "value": "true",
          "line": 2255,
          "bound": null
        },
        {
          "cond": "self.last > len",
          "norm": "len < self.last",
          "value": "false",
          "line": 2258,
          "bound": "self.last == len"
        }
      ],
      "ret": "Some(&self.haystack[range])",
      "path": [
        0,
        1,
        3,
        5,
        6,
        8,
        9,
        10,
        11,
        15
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}