{
  "name": "regex_lite::pikevm::{impl#7}::insert",
  "mod_info": {
    "name": "pikevm",
    "loc": "regex-lite/src/lib.rs:881:1:881:12"
  },
  "visible": false,
  "loc": "regex-lite/src/pikevm.rs:858:5:877:6",
  "doc": "/// Insert the state ID value into this set and return true if the given\n/// state ID was not previously in this set.\n///\n/// This operation is idempotent. If the given value is already in this\n/// set, then this is a no-op.\n///\n/// If more than `capacity` ids are inserted, then this panics.\n",
  "code": [
    "fn insert(&mut self, id: StateID) -> bool {",
    "    if self.contains(id) {",
    "        return false;",
    "    }",
    "",
    "    let index = self.len();",
    "    assert!(",
    "        index < self.capacity(),",
    "        \"{:?} exceeds capacity of {:?} when inserting {:?}\",",
    "        index,",
    "        self.capacity(),",
    "        id,",
    "    );",
    "    self.dense[index] = id;",
    "    // OK because we don't permit the capacity to be set higher than",
    "    // u32::MAX.",
    "    self.sparse[id.as_usize()] = u32::try_from(index).unwrap();",
    "    self.len += 1;",
    "    true",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.contains(id)",
          "norm": null,
          "value": "true",
          "line": 859,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        2,
        19
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.contains(id)",
          "norm": null,
          "value": "false",
          "line": 859,
          "bound": null
        },
        {
          "cond": "index < self.capacity()",
          "norm": null,
          "value": "true",
          "line": 865,
          "bound": null
        }
      ],
      "ret": "true",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        16,
        17,
        18,
        19
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.contains(id)",
          "norm": null,
          "value": "false",
          "line": 859,
          "bound": null
        },
        {
          "cond": "index < self.capacity()",
          "norm": null,
          "value": "false",
          "line": 865,
          "bound": "index == self.capacity()"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        20
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}