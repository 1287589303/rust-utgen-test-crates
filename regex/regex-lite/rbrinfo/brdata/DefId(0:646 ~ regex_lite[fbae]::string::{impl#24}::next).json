{
  "name": "regex_lite::string::{impl#24}::next",
  "mod_info": {
    "name": "string",
    "loc": "regex-lite/src/lib.rs:884:1:884:12"
  },
  "visible": true,
  "loc": "regex-lite/src/string.rs:2305:5:2323:6",
  "doc": "",
  "code": [
    "fn next(&mut self) -> Option<&'h str> {",
    "    if self.limit == 0 {",
    "        return None;",
    "    }",
    "",
    "    self.limit -= 1;",
    "    if self.limit > 0 {",
    "        return self.splits.next();",
    "    }",
    "",
    "    let len = self.splits.haystack.len();",
    "    if self.splits.last > len {",
    "        // We've already returned all substrings.",
    "        None",
    "    } else {",
    "        // self.n == 0, so future calls will return None immediately",
    "        Some(&self.splits.haystack[self.splits.last..len])",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.limit == 0",
          "norm": "0 == self.limit",
          "value": "false",
          "line": 2306,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        12
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.limit == 0",
          "norm": "0 == self.limit",
          "value": "true",
          "line": 2306,
          "bound": null
        },
        {
          "cond": "self.limit > 0",
          "norm": "0 < self.limit",
          "value": "true",
          "line": 2311,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        3,
        4,
        5,
        12
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.limit == 0",
          "norm": "0 == self.limit",
          "value": "true",
          "line": 2306,
          "bound": null
        },
        {
          "cond": "self.limit > 0",
          "norm": "0 < self.limit",
          "value": "false",
          "line": 2311,
          "bound": "self.limit == 0"
        },
        {
          "cond": "self.splits.last > len",
          "norm": "len < self.splits.last",
          "value": "true",
          "line": 2316,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        2,
        3,
        6,
        7,
        8,
        11,
        12
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.limit == 0",
          "norm": "0 == self.limit",
          "value": "true",
          "line": 2306,
          "bound": null
        },
        {
          "cond": "self.limit > 0",
          "norm": "0 < self.limit",
          "value": "false",
          "line": 2311,
          "bound": "self.limit == 0"
        },
        {
          "cond": "self.splits.last > len",
          "norm": "len < self.splits.last",
          "value": "false",
          "line": 2316,
          "bound": "self.splits.last == len"
        }
      ],
      "ret": "Some(&self.splits.haystack[self.splits.last..len])",
      "path": [
        0,
        2,
        3,
        6,
        7,
        9,
        10,
        11,
        12
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}