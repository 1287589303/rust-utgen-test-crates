{
  "name": "regex_lite::utf8::decode_step",
  "mod_info": {
    "name": "utf8",
    "loc": "regex-lite/src/lib.rs:885:1:885:10"
  },
  "visible": false,
  "loc": "regex-lite/src/utf8.rs:86:1:124:2",
  "doc": "/// Transitions to the next state and updates `cp` while it does.\n",
  "code": [
    "fn decode_step(state: &mut usize, cp: &mut u32, b: u8) {",
    "    // Splits the space of all bytes into equivalence classes, such that",
    "    // any byte in the same class can never discriminate between whether a",
    "    // particular sequence is valid UTF-8 or not.",
    "    #[rustfmt::skip]",
    "    const CLASSES: [u8; 256] = [",
    "       0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,",
    "       0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,",
    "       0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,",
    "       0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,",
    "       1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,",
    "       7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,",
    "       8,8,2,2,2,2,2,2,2,2,2,2,2,2,2,2,  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,",
    "      10,3,3,3,3,3,3,3,3,3,3,3,3,4,3,3, 11,6,6,6,5,8,8,8,8,8,8,8,8,8,8,8,",
    "    ];",
    "",
    "    // A state machine taken from `bstr` which was in turn adapted from:",
    "    // https://bjoern.hoehrmann.de/utf-8/decoder/dfa/",
    "    #[rustfmt::skip]",
    "    const STATES_FORWARD: &'static [u8] = &[",
    "      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",
    "      12, 0, 24, 36, 60, 96, 84, 0, 0, 0, 48, 72,",
    "      0, 12, 0, 0, 0, 0, 0, 12, 0, 12, 0, 0,",
    "      0, 24, 0, 0, 0, 0, 0, 24, 0, 24, 0, 0,",
    "      0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0,",
    "      0, 24, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0,",
    "      0, 0, 0, 0, 0, 0, 0, 36, 0, 36, 0, 0,",
    "      0, 36, 0, 0, 0, 0, 0, 36, 0, 36, 0, 0,",
    "      0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",
    "    ];",
    "",
    "    let class = CLASSES[usize::from(b)];",
    "    if *state == ACCEPT {",
    "        *cp = (0xFF >> class) & (b as u32);",
    "    } else {",
    "        *cp = (b as u32 & 0b111111) | (*cp << 6);",
    "    }",
    "    *state = usize::from(STATES_FORWARD[*state + usize::from(class)]);",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*state == ACCEPT",
          "norm": null,
          "value": "true",
          "line": 118,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*state == ACCEPT",
          "norm": null,
          "value": "false",
          "line": 118,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}