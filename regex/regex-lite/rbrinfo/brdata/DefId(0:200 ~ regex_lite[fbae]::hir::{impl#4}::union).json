{
  "name": "regex_lite::hir::{impl#4}::union",
  "mod_info": {
    "name": "hir",
    "loc": "regex-lite/src/lib.rs:877:1:877:9"
  },
  "visible": false,
  "loc": "regex-lite/src/hir/mod.rs:551:5:558:6",
  "doc": "/// Union the given overlapping range into this range.\n///\n/// If the two ranges aren't contiguous, then this returns `None`.\n",
  "code": [
    "fn union(&self, other: &ClassRange) -> Option<ClassRange> {",
    "    if !self.is_contiguous(other) {",
    "        return None;",
    "    }",
    "    let start = core::cmp::min(self.start, other.start);",
    "    let end = core::cmp::max(self.end, other.end);",
    "    Some(ClassRange { start, end })",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.is_contiguous(other)",
          "norm": null,
          "value": "true",
          "line": 552,
          "bound": null
        }
      ],
      "ret": "Some(ClassRange { start, end })",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.is_contiguous(other)",
          "norm": null,
          "value": "false",
          "line": 552,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        3,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}