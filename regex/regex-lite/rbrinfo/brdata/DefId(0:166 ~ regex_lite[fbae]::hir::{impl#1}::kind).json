{
  "name": "regex_lite::hir::{impl#1}::kind",
  "mod_info": {
    "name": "hir",
    "loc": "regex-lite/src/lib.rs:877:1:877:9"
  },
  "visible": true,
  "loc": "regex-lite/src/hir/mod.rs:187:5:189:6",
  "doc": "/// Returns the underlying kind of this high-level intermediate\n/// representation.\n///\n/// Note that there is explicitly no way to build an `Hir` directly from\n/// an `HirKind`. If you need to do that, then you must do case analysis\n/// on the `HirKind` and call the appropriate smart constructor on `Hir`.\n",
  "code": [
    "pub(crate) fn kind(&self) -> &HirKind {",
    "    &self.kind",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "&self.kind",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}