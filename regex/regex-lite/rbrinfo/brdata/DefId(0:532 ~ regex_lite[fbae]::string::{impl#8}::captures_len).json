{
  "name": "regex_lite::string::{impl#8}::captures_len",
  "mod_info": {
    "name": "string",
    "loc": "regex-lite/src/lib.rs:884:1:884:12"
  },
  "visible": true,
  "loc": "regex-lite/src/string.rs:1367:5:1369:6",
  "doc": "/// Returns the number of captures groups in this regex.\n///\n/// This includes all named and unnamed groups, including the implicit\n/// unnamed group that is always present and corresponds to the entire\n/// match.\n///\n/// Since the implicit unnamed group is always included in this length, the\n/// length returned is guaranteed to be greater than zero.\n///\n/// # Example\n///\n/// ```\n/// use regex_lite::Regex;\n///\n/// let re = Regex::new(r\"foo\").unwrap();\n/// assert_eq!(1, re.captures_len());\n///\n/// let re = Regex::new(r\"(foo)\").unwrap();\n/// assert_eq!(2, re.captures_len());\n///\n/// let re = Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap();\n/// assert_eq!(5, re.captures_len());\n///\n/// let re = Regex::new(r\"[^\\s\\S]\").unwrap();\n/// assert_eq!(1, re.captures_len());\n/// ```\n",
  "code": [
    "pub fn captures_len(&self) -> usize {",
    "    self.pikevm.nfa().group_len()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}