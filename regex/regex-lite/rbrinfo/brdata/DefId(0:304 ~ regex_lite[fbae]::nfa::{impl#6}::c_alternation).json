{
  "name": "regex_lite::nfa::{impl#6}::c_alternation",
  "mod_info": {
    "name": "nfa",
    "loc": "regex-lite/src/lib.rs:880:1:880:9"
  },
  "visible": false,
  "loc": "regex-lite/src/nfa.rs:602:5:628:6",
  "doc": "/// Compile an alternation, where each element yielded by the given\n/// iterator represents an item in the alternation. If the iterator yields\n/// no elements, then this compiles down to a \"fail\" state.\n///\n/// In an alternation, expressions appearing earlier are \"preferred\" at\n/// match time over expressions appearing later. (This is currently always\n/// true, as this crate only supports leftmost-first semantics.)\n",
  "code": [
    "fn c_alternation<I>(&self, mut it: I) -> Result<ThompsonRef, Error>",
    "where",
    "    I: Iterator<Item = Result<ThompsonRef, Error>>,",
    "{",
    "    let first = match it.next() {",
    "        None => return self.c_fail(),",
    "        Some(result) => result?,",
    "    };",
    "    let second = match it.next() {",
    "        None => return Ok(first),",
    "        Some(result) => result?,",
    "    };",
    "",
    "    let splits =",
    "        self.add(State::Splits { targets: vec![], reverse: false })?;",
    "    let end = self.add_empty()?;",
    "    self.patch(splits, first.start)?;",
    "    self.patch(first.end, end)?;",
    "    self.patch(splits, second.start)?;",
    "    self.patch(second.end, end)?;",
    "    for result in it {",
    "        let compiled = result?;",
    "        self.patch(splits, compiled.start)?;",
    "        self.patch(compiled.end, end)?;",
    "    }",
    "    Ok(ThompsonRef { start: splits, end })",
    "}"
  ],
  "size": {
    "chain": 15,
    "contra": 1,
    "min_set": 15
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "it.next() matches Some(result)",
          "norm": null,
          "value": "true",
          "line": 606,
          "bound": null
        },
        {
          "cond": "result?",
          "norm": null,
          "value": "Err/None",
          "line": 608,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        7,
        9,
        11,
        12,
        105,
        106,
        107
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "it.next() matches Some(result)",
          "norm": null,
          "value": "true",
          "line": 606,
          "bound": null
        },
        {
          "cond": "result?",
          "norm": null,
          "value": "Ok/Some",
          "line": 608,
          "bound": null
        },
        {
          "cond": "it.next() matches Some(result)",
          "norm": null,
          "value": "true",
          "line": 610,
          "bound": null
        },
        {
          "cond": "result?",
          "norm": null,
          "value": "Err/None",
          "line": 612,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        7,
        10,
        13,
        16,
        18,
        20,
        22,
        23,
        103,
        104,
        106,
        107
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "it.next() matches Some(result)",
          "norm": null,
          "value": "true",
          "line": 606,
          "bound": null
        },
        {
          "cond": "result?",
          "norm": null,
          "value": "Ok/Some",
          "line": 608,
          "bound": null
        },
        {
          "cond": "it.next() matches Some(result)",
          "norm": null,
          "value": "true",
          "line": 610,
          "bound": null
        },
        {
          "cond": "result?",
          "norm": null,
          "value": "Ok/Some",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add(State::Splits { targets: vec![], reverse: false })?",
          "norm": null,
          "value": "Err/None",
          "line": 616,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        7,
        10,
        13,
        16,
        18,
        21,
        24,
        25,
        26,
        27,
        29,
        31,
        32,
        102,
        104,
        106,
        107
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "it.next() matches Some(result)",
          "norm": null,
          "value": "true",
          "line": 606,
          "bound": null
        },
        {
          "cond": "result?",
          "norm": null,
          "value": "Ok/Some",
          "line": 608,
          "bound": null
        },
        {
          "cond": "it.next() matches Some(result)",
          "norm": null,
          "value": "true",
          "line": 610,
          "bound": null
        },
        {
          "cond": "result?",
          "norm": null,
          "value": "Ok/Some",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add(State::Splits { targets: vec![], reverse: false })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 616,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Err/None",
          "line": 617,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        7,
        10,
        13,
        16,
        18,
        21,
        24,
        25,
        26,
        27,
        30,
        33,
        34,
        36,
        38,
        39,
        101,
        102,
        104,
        106,
        107
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "it.next() matches Some(result)",
          "norm": null,
          "value": "true",
          "line": 606,
          "bound": null
        },
        {
          "cond": "result?",
          "norm": null,
          "value": "Ok/Some",
          "line": 608,
          "bound": null
        },
        {
          "cond": "it.next() matches Some(result)",
          "norm": null,
          "value": "true",
          "line": 610,
          "bound": null
        },
        {
          "cond": "result?",
          "norm": null,
          "value": "Ok/Some",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add(State::Splits { targets: vec![], reverse: false })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 616,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 617,
          "bound": null
        },
        {
          "cond": "self.patch(splits, first.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 618,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        7,
        10,
        13,
        16,
        18,
        21,
        24,
        25,
        26,
        27,
        30,
        33,
        34,
        37,
        40,
        41,
        43,
        45,
        46,
        101,
        102,
        104,
        106,
        107
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "it.next() matches Some(result)",
          "norm": null,
          "value": "true",
          "line": 606,
          "bound": null
        },
        {
          "cond": "result?",
          "norm": null,
          "value": "Ok/Some",
          "line": 608,
          "bound": null
        },
        {
          "cond": "it.next() matches Some(result)",
          "norm": null,
          "value": "true",
          "line": 610,
          "bound": null
        },
        {
          "cond": "result?",
          "norm": null,
          "value": "Ok/Some",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add(State::Splits { targets: vec![], reverse: false })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 616,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 617,
          "bound": null
        },
        {
          "cond": "self.patch(splits, first.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 618,
          "bound": null
        },
        {
          "cond": "self.patch(first.end, end)?",
          "norm": null,
          "value": "Err/None",
          "line": 619,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        7,
        10,
        13,
        16,
        18,
        21,
        24,
        25,
        26,
        27,
        30,
        33,
        34,
        37,
        40,
        41,
        44,
        47,
        48,
        50,
        52,
        53,
        101,
        102,
        104,
        106,
        107
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "it.next() matches Some(result)",
          "norm": null,
          "value": "true",
          "line": 606,
          "bound": null
        },
        {
          "cond": "result?",
          "norm": null,
          "value": "Ok/Some",
          "line": 608,
          "bound": null
        },
        {
          "cond": "it.next() matches Some(result)",
          "norm": null,
          "value": "true",
          "line": 610,
          "bound": null
        },
        {
          "cond": "result?",
          "norm": null,
          "value": "Ok/Some",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add(State::Splits { targets: vec![], reverse: false })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 616,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 617,
          "bound": null
        },
        {
          "cond": "self.patch(splits, first.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 618,
          "bound": null
        },
        {
          "cond": "self.patch(first.end, end)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 619,
          "bound": null
        },
        {
          "cond": "self.patch(splits, second.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 620,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        7,
        10,
        13,
        16,
        18,
        21,
        24,
        25,
        26,
        27,
        30,
        33,
        34,
        37,
        40,
        41,
        44,
        47,
        48,
        51,
        54,
        55,
        57,
        59,
        60,
        101,
        102,
        104,
        106,
        107
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "it.next() matches Some(result)",
          "norm": null,
          "value": "true",
          "line": 606,
          "bound": null
        },
        {
          "cond": "result?",
          "norm": null,
          "value": "Ok/Some",
          "line": 608,
          "bound": null
        },
        {
          "cond": "it.next() matches Some(result)",
          "norm": null,
          "value": "true",
          "line": 610,
          "bound": null
        },
        {
          "cond": "result?",
          "norm": null,
          "value": "Ok/Some",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add(State::Splits { targets: vec![], reverse: false })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 616,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 617,
          "bound": null
        },
        {
          "cond": "self.patch(splits, first.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 618,
          "bound": null
        },
        {
          "cond": "self.patch(first.end, end)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 619,
          "bound": null
        },
        {
          "cond": "self.patch(splits, second.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 620,
          "bound": null
        },
        {
          "cond": "self.patch(second.end, end)?",
          "norm": null,
          "value": "Err/None",
          "line": 621,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        7,
        10,
        13,
        16,
        18,
        21,
        24,
        25,
        26,
        27,
        30,
        33,
        34,
        37,
        40,
        41,
        44,
        47,
        48,
        51,
        54,
        55,
        58,
        61,
        62,
        64,
        66,
        67,
        101,
        102,
        104,
        106,
        107
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "it.next() matches Some(result)",
          "norm": null,
          "value": "true",
          "line": 606,
          "bound": null
        },
        {
          "cond": "result?",
          "norm": null,
          "value": "Ok/Some",
          "line": 608,
          "bound": null
        },
        {
          "cond": "it.next() matches Some(result)",
          "norm": null,
          "value": "true",
          "line": 610,
          "bound": null
        },
        {
          "cond": "result?",
          "norm": null,
          "value": "Ok/Some",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add(State::Splits { targets: vec![], reverse: false })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 616,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 617,
          "bound": null
        },
        {
          "cond": "self.patch(splits, first.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 618,
          "bound": null
        },
        {
          "cond": "self.patch(first.end, end)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 619,
          "bound": null
        },
        {
          "cond": "self.patch(splits, second.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 620,
          "bound": null
        },
        {
          "cond": "self.patch(second.end, end)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 621,
          "bound": null
        },
        {
          "cond": "result in it",
          "norm": null,
          "value": "true",
          "line": 622,
          "bound": null
        },
        {
          "cond": "result?",
          "norm": null,
          "value": "Err/None",
          "line": 623,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        7,
        10,
        13,
        16,
        18,
        21,
        24,
        25,
        26,
        27,
        30,
        33,
        34,
        37,
        40,
        41,
        44,
        47,
        48,
        51,
        54,
        55,
        58,
        61,
        62,
        65,
        68,
        69,
        70,
        71,
        74,
        76,
        78,
        80,
        81,
        98,
        99,
        100,
        101,
        102,
        104,
        106,
        107
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "it.next() matches Some(result)",
          "norm": null,
          "value": "true",
          "line": 606,
          "bound": null
        },
        {
          "cond": "result?",
          "norm": null,
          "value": "Ok/Some",
          "line": 608,
          "bound": null
        },
        {
          "cond": "it.next() matches Some(result)",
          "norm": null,
          "value": "true",
          "line": 610,
          "bound": null
        },
        {
          "cond": "result?",
          "norm": null,
          "value": "Ok/Some",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add(State::Splits { targets: vec![], reverse: false })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 616,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 617,
          "bound": null
        },
        {
          "cond": "self.patch(splits, first.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 618,
          "bound": null
        },
        {
          "cond": "self.patch(first.end, end)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 619,
          "bound": null
        },
        {
          "cond": "self.patch(splits, second.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 620,
          "bound": null
        },
        {
          "cond": "self.patch(second.end, end)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 621,
          "bound": null
        },
        {
          "cond": "result in it",
          "norm": null,
          "value": "true",
          "line": 622,
          "bound": null
        },
        {
          "cond": "result?",
          "norm": null,
          "value": "Ok/Some",
          "line": 623,
          "bound": null
        },
        {
          "cond": "self.patch(splits, compiled.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 624,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        7,
        10,
        13,
        16,
        18,
        21,
        24,
        25,
        26,
        27,
        30,
        33,
        34,
        37,
        40,
        41,
        44,
        47,
        48,
        51,
        54,
        55,
        58,
        61,
        62,
        65,
        68,
        69,
        70,
        71,
        74,
        76,
        79,
        82,
        83,
        85,
        87,
        88,
        98,
        99,
        100,
        101,
        102,
        104,
        106,
        107
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "it.next() matches Some(result)",
          "norm": null,
          "value": "true",
          "line": 606,
          "bound": null
        },
        {
          "cond": "result?",
          "norm": null,
          "value": "Ok/Some",
          "line": 608,
          "bound": null
        },
        {
          "cond": "it.next() matches Some(result)",
          "norm": null,
          "value": "true",
          "line": 610,
          "bound": null
        },
        {
          "cond": "result?",
          "norm": null,
          "value": "Ok/Some",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add(State::Splits { targets: vec![], reverse: false })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 616,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 617,
          "bound": null
        },
        {
          "cond": "self.patch(splits, first.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 618,
          "bound": null
        },
        {
          "cond": "self.patch(first.end, end)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 619,
          "bound": null
        },
        {
          "cond": "self.patch(splits, second.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 620,
          "bound": null
        },
        {
          "cond": "self.patch(second.end, end)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 621,
          "bound": null
        },
        {
          "cond": "result in it",
          "norm": null,
          "value": "true",
          "line": 622,
          "bound": null
        },
        {
          "cond": "result?",
          "norm": null,
          "value": "Ok/Some",
          "line": 623,
          "bound": null
        },
        {
          "cond": "self.patch(splits, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 624,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, end)?",
          "norm": null,
          "value": "Err/None",
          "line": 625,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        7,
        10,
        13,
        16,
        18,
        21,
        24,
        25,
        26,
        27,
        30,
        33,
        34,
        37,
        40,
        41,
        44,
        47,
        48,
        51,
        54,
        55,
        58,
        61,
        62,
        65,
        68,
        69,
        70,
        71,
        74,
        76,
        79,
        82,
        83,
        86,
        89,
        90,
        92,
        94,
        95,
        98,
        99,
        100,
        101,
        102,
        104,
        106,
        107
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "it.next() matches Some(result)",
          "norm": null,
          "value": "true",
          "line": 606,
          "bound": null
        },
        {
          "cond": "result?",
          "norm": null,
          "value": "Ok/Some",
          "line": 608,
          "bound": null
        },
        {
          "cond": "it.next() matches Some(result)",
          "norm": null,
          "value": "true",
          "line": 610,
          "bound": null
        },
        {
          "cond": "result?",
          "norm": null,
          "value": "Ok/Some",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add(State::Splits { targets: vec![], reverse: false })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 616,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 617,
          "bound": null
        },
        {
          "cond": "self.patch(splits, first.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 618,
          "bound": null
        },
        {
          "cond": "self.patch(first.end, end)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 619,
          "bound": null
        },
        {
          "cond": "self.patch(splits, second.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 620,
          "bound": null
        },
        {
          "cond": "self.patch(second.end, end)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 621,
          "bound": null
        },
        {
          "cond": "result in it",
          "norm": null,
          "value": "true",
          "line": 622,
          "bound": null
        },
        {
          "cond": "result?",
          "norm": null,
          "value": "Ok/Some",
          "line": 623,
          "bound": null
        },
        {
          "cond": "self.patch(splits, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 624,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, end)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 625,
          "bound": null
        },
        {
          "cond": "result in it",
          "norm": null,
          "value": "false",
          "line": 622,
          "bound": null
        }
      ],
      "ret": "Ok(ThompsonRef { start: splits, end })",
      "path": [
        0,
        1,
        4,
        7,
        10,
        13,
        16,
        18,
        21,
        24,
        25,
        26,
        27,
        30,
        33,
        34,
        37,
        40,
        41,
        44,
        47,
        48,
        51,
        54,
        55,
        58,
        61,
        62,
        65,
        68,
        69,
        70,
        71,
        74,
        76,
        79,
        82,
        83,
        86,
        89,
        90,
        93,
        69,
        70,
        71,
        73,
        75,
        96,
        97,
        107
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "it.next() matches Some(result)",
          "norm": null,
          "value": "true",
          "line": 606,
          "bound": null
        },
        {
          "cond": "result?",
          "norm": null,
          "value": "Ok/Some",
          "line": 608,
          "bound": null
        },
        {
          "cond": "it.next() matches Some(result)",
          "norm": null,
          "value": "true",
          "line": 610,
          "bound": null
        },
        {
          "cond": "result?",
          "norm": null,
          "value": "Ok/Some",
          "line": 612,
          "bound": null
        },
        {
          "cond": "self.add(State::Splits { targets: vec![], reverse: false })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 616,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 617,
          "bound": null
        },
        {
          "cond": "self.patch(splits, first.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 618,
          "bound": null
        },
        {
          "cond": "self.patch(first.end, end)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 619,
          "bound": null
        },
        {
          "cond": "self.patch(splits, second.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 620,
          "bound": null
        },
        {
          "cond": "self.patch(second.end, end)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 621,
          "bound": null
        },
        {
          "cond": "result in it",
          "norm": null,
          "value": "false",
          "line": 622,
          "bound": null
        }
      ],
      "ret": "Ok(ThompsonRef { start: splits, end })",
      "path": [
        0,
        1,
        4,
        7,
        10,
        13,
        16,
        18,
        21,
        24,
        25,
        26,
        27,
        30,
        33,
        34,
        37,
        40,
        41,
        44,
        47,
        48,
        51,
        54,
        55,
        58,
        61,
        62,
        65,
        68,
        69,
        70,
        71,
        73,
        75,
        96,
        97,
        107
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "it.next() matches Some(result)",
          "norm": null,
          "value": "true",
          "line": 606,
          "bound": null
        },
        {
          "cond": "result?",
          "norm": null,
          "value": "Ok/Some",
          "line": 608,
          "bound": null
        },
        {
          "cond": "it.next() matches None",
          "norm": null,
          "value": "true",
          "line": 610,
          "bound": null
        },
        {
          "cond": "it.next() matches None",
          "norm": null,
          "value": "true",
          "line": 610,
          "bound": null
        }
      ],
      "ret": "Ok(first)",
      "path": [
        0,
        1,
        4,
        7,
        10,
        13,
        15,
        17,
        103,
        104,
        106,
        107
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "it.next() matches None",
          "norm": null,
          "value": "true",
          "line": 606,
          "bound": null
        },
        {
          "cond": "it.next() matches None",
          "norm": null,
          "value": "true",
          "line": 606,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        5,
        6,
        105,
        106,
        107
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}