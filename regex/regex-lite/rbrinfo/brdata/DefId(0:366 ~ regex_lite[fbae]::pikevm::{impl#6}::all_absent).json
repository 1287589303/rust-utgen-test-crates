{
  "name": "regex_lite::pikevm::{impl#6}::all_absent",
  "mod_info": {
    "name": "pikevm",
    "loc": "regex-lite/src/lib.rs:881:1:881:12"
  },
  "visible": false,
  "loc": "regex-lite/src/pikevm.rs:727:5:730:6",
  "doc": "/// Return a slice of slots of appropriate length where every slot offset\n/// is guaranteed to be absent. This is useful in cases where you need to\n/// compute an epsilon closure outside of the user supplied regex, and thus\n/// never want it to have any capturing slots set.\n",
  "code": [
    "fn all_absent(&mut self) -> &mut [Option<NonMaxUsize>] {",
    "    let i = self.table.len() - self.slots_per_state;",
    "    &mut self.table[i..i + self.slots_for_captures]",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "&mut self.table[i..i + self.slots_for_captures]",
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}