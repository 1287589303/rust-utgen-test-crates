{
  "name": "regex_lite::nfa::{impl#6}::c_zero_or_one",
  "mod_info": {
    "name": "nfa",
    "loc": "regex-lite/src/lib.rs:880:1:880:9"
  },
  "visible": false,
  "loc": "regex-lite/src/nfa.rs:511:5:524:6",
  "doc": "/// Compile the given expression such that it may be matched zero or one\n/// times.\n///\n/// When `greedy` is true, then the preference is for the expression to\n/// match as much as possible. Otherwise, it will match as little as\n/// possible.\n",
  "code": [
    "fn c_zero_or_one(",
    "    &self,",
    "    hir: &Hir,",
    "    greedy: bool,",
    ") -> Result<ThompsonRef, Error> {",
    "    let splits =",
    "        self.add(State::Splits { targets: vec![], reverse: !greedy })?;",
    "    let compiled = self.c(hir)?;",
    "    let empty = self.add_empty()?;",
    "    self.patch(splits, compiled.start)?;",
    "    self.patch(splits, empty)?;",
    "    self.patch(compiled.end, empty)?;",
    "    Ok(ThompsonRef { start: splits, end: empty })",
    "}"
  ],
  "size": {
    "chain": 7,
    "contra": 0,
    "min_set": 7
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.add(State::Splits { targets: vec![], reverse: !greedy })?",
          "norm": null,
          "value": "Err/None",
          "line": 517,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        9,
        47,
        48
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.add(State::Splits { targets: vec![], reverse: !greedy })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 517,
          "bound": null
        },
        {
          "cond": "self.c(hir)?",
          "norm": null,
          "value": "Err/None",
          "line": 518,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        13,
        15,
        16,
        46,
        47,
        48
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.add(State::Splits { targets: vec![], reverse: !greedy })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 517,
          "bound": null
        },
        {
          "cond": "self.c(hir)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 518,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Err/None",
          "line": 519,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        14,
        17,
        18,
        20,
        22,
        23,
        45,
        46,
        47,
        48
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.add(State::Splits { targets: vec![], reverse: !greedy })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 517,
          "bound": null
        },
        {
          "cond": "self.c(hir)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 518,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 519,
          "bound": null
        },
        {
          "cond": "self.patch(splits, compiled.start)?",
          "norm": null,
          "value": "Err/None",
          "line": 520,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        25,
        27,
        29,
        30,
        45,
        46,
        47,
        48
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.add(State::Splits { targets: vec![], reverse: !greedy })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 517,
          "bound": null
        },
        {
          "cond": "self.c(hir)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 518,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 519,
          "bound": null
        },
        {
          "cond": "self.patch(splits, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 520,
          "bound": null
        },
        {
          "cond": "self.patch(splits, empty)?",
          "norm": null,
          "value": "Err/None",
          "line": 521,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        25,
        28,
        31,
        32,
        34,
        36,
        37,
        45,
        46,
        47,
        48
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.add(State::Splits { targets: vec![], reverse: !greedy })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 517,
          "bound": null
        },
        {
          "cond": "self.c(hir)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 518,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 519,
          "bound": null
        },
        {
          "cond": "self.patch(splits, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 520,
          "bound": null
        },
        {
          "cond": "self.patch(splits, empty)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 521,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, empty)?",
          "norm": null,
          "value": "Err/None",
          "line": 522,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        25,
        28,
        31,
        32,
        35,
        38,
        39,
        41,
        43,
        44,
        45,
        46,
        47,
        48
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.add(State::Splits { targets: vec![], reverse: !greedy })?",
          "norm": null,
          "value": "Ok/Some",
          "line": 517,
          "bound": null
        },
        {
          "cond": "self.c(hir)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 518,
          "bound": null
        },
        {
          "cond": "self.add_empty()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 519,
          "bound": null
        },
        {
          "cond": "self.patch(splits, compiled.start)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 520,
          "bound": null
        },
        {
          "cond": "self.patch(splits, empty)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 521,
          "bound": null
        },
        {
          "cond": "self.patch(compiled.end, empty)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 522,
          "bound": null
        }
      ],
      "ret": "Ok(ThompsonRef { start: splits, end: empty })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        14,
        17,
        18,
        21,
        24,
        25,
        28,
        31,
        32,
        35,
        38,
        39,
        42,
        48
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}