{
  "name": "regex_lite::hir::{impl#1}::look",
  "mod_info": {
    "name": "hir",
    "loc": "regex-lite/src/lib.rs:877:1:877:9"
  },
  "visible": false,
  "loc": "regex-lite/src/hir/mod.rs:250:5:258:6",
  "doc": "",
  "code": [
    "fn look(look: Look) -> Hir {",
    "    let kind = HirKind::Look(look);",
    "    Hir {",
    "        kind,",
    "        is_start_anchored: matches!(look, Look::Start),",
    "        is_match_empty: true,",
    "        static_explicit_captures_len: Some(0),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "look matches Look::Start",
          "norm": null,
          "value": "false",
          "line": 254,
          "bound": null
        },
        {
          "cond": "look matches _",
          "norm": null,
          "value": "true",
          "line": 459,
          "bound": null
        }
      ],
      "ret": "Hir {\n            kind,\n            is_start_anchored: matches!(look, Look::Start),\n            is_match_empty: true,\n            static_explicit_captures_len: Some(0),\n        }",
      "path": [
        0,
        1,
        4,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "look matches Look::Start",
          "norm": null,
          "value": "true",
          "line": 254,
          "bound": null
        },
        {
          "cond": "look matches Look::Start",
          "norm": null,
          "value": "true",
          "line": 254,
          "bound": null
        }
      ],
      "ret": "Hir {\n            kind,\n            is_start_anchored: matches!(look, Look::Start),\n            is_match_empty: true,\n            static_explicit_captures_len: Some(0),\n        }",
      "path": [
        0,
        2,
        3,
        4,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}