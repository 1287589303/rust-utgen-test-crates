{
  "name": "regex_lite::string::{impl#7}::captures_read_at",
  "mod_info": {
    "name": "string",
    "loc": "regex-lite/src/lib.rs:884:1:884:12"
  },
  "visible": true,
  "loc": "regex-lite/src/string.rs:1250:5:1270:6",
  "doc": "/// Returns the same as [`Regex::captures_read`], but starts the search at\n/// the given offset.\n///\n/// The significance of the starting point is that it takes the surrounding\n/// context into consideration. For example, the `\\A` anchor can only\n/// match when `start == 0`.\n///\n/// # Panics\n///\n/// This panics when `start >= haystack.len() + 1`.\n///\n/// This routine may also panic if the given `CaptureLocations` was not\n/// created by this regex.\n///\n/// # Example\n///\n/// This example shows the significance of `start` by demonstrating how it\n/// can be used to permit look-around assertions in a regex to take the\n/// surrounding context into account.\n///\n/// ```\n/// use regex_lite::Regex;\n///\n/// let re = Regex::new(r\"\\bchew\\b\").unwrap();\n/// let hay = \"eschew\";\n/// let mut locs = re.capture_locations();\n/// // We get a match here, but it's probably not intended.\n/// assert!(re.captures_read(&mut locs, &hay[2..]).is_some());\n/// // No match because the  assertions take the context into account.\n/// assert!(re.captures_read_at(&mut locs, hay, 2).is_none());\n/// ```\n",
  "code": [
    "pub fn captures_read_at<'h>(",
    "    &self,",
    "    locs: &mut CaptureLocations,",
    "    haystack: &'h str,",
    "    start: usize,",
    ") -> Option<Match<'h>> {",
    "    let mut cache = self.pool.get();",
    "    let matched = self.pikevm.search(",
    "        &mut cache,",
    "        haystack.as_bytes(),",
    "        start,",
    "        haystack.len(),",
    "        false,",
    "        &mut locs.0,",
    "    );",
    "    if !matched {",
    "        return None;",
    "    }",
    "    let (start, end) = locs.get(0).unwrap();",
    "    Some(Match::new(haystack, start, end))",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "matched",
          "norm": null,
          "value": "true",
          "line": 1265,
          "bound": null
        }
      ],
      "ret": "Some(Match::new(haystack, start, end))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        10,
        11,
        12,
        13,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "matched",
          "norm": null,
          "value": "false",
          "line": 1265,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}