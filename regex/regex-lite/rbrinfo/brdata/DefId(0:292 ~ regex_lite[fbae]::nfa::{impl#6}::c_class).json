{
  "name": "regex_lite::nfa::{impl#6}::c_class",
  "mod_info": {
    "name": "nfa",
    "loc": "regex-lite/src/lib.rs:880:1:880:9"
  },
  "visible": false,
  "loc": "regex-lite/src/nfa.rs:337:5:351:6",
  "doc": "/// Compile the given character class into an NFA.\n///\n/// If the class is empty, then this compiles to a `Fail` state.\n",
  "code": [
    "fn c_class(&self, class: &hir::Class) -> Result<ThompsonRef, Error> {",
    "    let id = if class.ranges.is_empty() {",
    "        // Technically using an explicit fail state probably isn't",
    "        // necessary. Because if you try to match against an empty Ranges,",
    "        // then it should turn up with nothing regardless of input, and",
    "        // thus \"acts\" like a Fail state. But it's better to be more",
    "        // explicit, and there's no real cost to doing so.",
    "        self.add(State::Fail)",
    "    } else {",
    "        let ranges =",
    "            class.ranges.iter().map(|r| (r.start, r.end)).collect();",
    "        self.add(State::Ranges { target: 0, ranges })",
    "    }?;",
    "    Ok(ThompsonRef { start: id, end: id })",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "class.ranges.is_empty()",
          "norm": null,
          "value": "true",
          "line": 338,
          "bound": null
        },
        {
          "cond": "if class.ranges.is_empty() {\n            // Technically using an explicit fail state probably isn't\n            // necessary. Because if you try to match against an empty Ranges,\n            // then it should turn up with nothing regardless of input, and\n            // thus \"acts\" like a Fail state. But it's better to be more\n            // explicit, and there's no real cost to doing so.\n            self.add(State::Fail)\n        } else {\n            let ranges =\n                class.ranges.iter().map(|r| (r.start, r.end)).collect();\n            self.add(State::Ranges { target: 0, ranges })\n        }?",
          "norm": null,
          "value": "Err/None",
          "line": 338,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        15,
        17,
        18,
        19
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "class.ranges.is_empty()",
          "norm": null,
          "value": "true",
          "line": 338,
          "bound": null
        },
        {
          "cond": "if class.ranges.is_empty() {\n            // Technically using an explicit fail state probably isn't\n            // necessary. Because if you try to match against an empty Ranges,\n            // then it should turn up with nothing regardless of input, and\n            // thus \"acts\" like a Fail state. But it's better to be more\n            // explicit, and there's no real cost to doing so.\n            self.add(State::Fail)\n        } else {\n            let ranges =\n                class.ranges.iter().map(|r| (r.start, r.end)).collect();\n            self.add(State::Ranges { target: 0, ranges })\n        }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 338,
          "bound": null
        }
      ],
      "ret": "Ok(ThompsonRef { start: id, end: id })",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        16,
        19
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "class.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 338,
          "bound": null
        },
        {
          "cond": "if class.ranges.is_empty() {\n            // Technically using an explicit fail state probably isn't\n            // necessary. Because if you try to match against an empty Ranges,\n            // then it should turn up with nothing regardless of input, and\n            // thus \"acts\" like a Fail state. But it's better to be more\n            // explicit, and there's no real cost to doing so.\n            self.add(State::Fail)\n        } else {\n            let ranges =\n                class.ranges.iter().map(|r| (r.start, r.end)).collect();\n            self.add(State::Ranges { target: 0, ranges })\n        }?",
          "norm": null,
          "value": "Err/None",
          "line": 338,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        17,
        18,
        19
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "class.ranges.is_empty()",
          "norm": null,
          "value": "false",
          "line": 338,
          "bound": null
        },
        {
          "cond": "if class.ranges.is_empty() {\n            // Technically using an explicit fail state probably isn't\n            // necessary. Because if you try to match against an empty Ranges,\n            // then it should turn up with nothing regardless of input, and\n            // thus \"acts\" like a Fail state. But it's better to be more\n            // explicit, and there's no real cost to doing so.\n            self.add(State::Fail)\n        } else {\n            let ranges =\n                class.ranges.iter().map(|r| (r.start, r.end)).collect();\n            self.add(State::Ranges { target: 0, ranges })\n        }?",
          "norm": null,
          "value": "Ok/Some",
          "line": 338,
          "bound": null
        }
      ],
      "ret": "Ok(ThompsonRef { start: id, end: id })",
      "path": [
        0,
        1,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        16,
        19
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}