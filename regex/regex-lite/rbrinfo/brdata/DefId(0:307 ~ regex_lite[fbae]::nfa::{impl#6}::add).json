{
  "name": "regex_lite::nfa::{impl#6}::add",
  "mod_info": {
    "name": "nfa",
    "loc": "regex-lite/src/lib.rs:880:1:880:9"
  },
  "visible": false,
  "loc": "regex-lite/src/nfa.rs:643:5:650:6",
  "doc": "/// The common implementation of \"add a state.\" It handles the common\n/// error cases of state ID exhausting (by owning state ID allocation) and\n/// whether the size limit has been exceeded.\n",
  "code": [
    "fn add(&self, state: State) -> Result<StateID, Error> {",
    "    let id = u32::try_from(self.nfa.borrow().states.len())",
    "        .map_err(|_| Error::new(\"exhausted state IDs, too many states\"))?;",
    "    self.nfa.borrow_mut().memory_extra += state.memory_usage();",
    "    self.nfa.borrow_mut().states.push(state);",
    "    self.check_size_limit()?;",
    "    Ok(id)",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "u32::try_from(self.nfa.borrow().states.len())\n            .map_err(|_| Error::new(\"exhausted state IDs, too many states\"))?",
          "norm": null,
          "value": "Err/None",
          "line": 644,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        10,
        11,
        29,
        30,
        31
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "u32::try_from(self.nfa.borrow().states.len())\n            .map_err(|_| Error::new(\"exhausted state IDs, too many states\"))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 644,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Err/None",
          "line": 648,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        25,
        27,
        28,
        30,
        31
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "u32::try_from(self.nfa.borrow().states.len())\n            .map_err(|_| Error::new(\"exhausted state IDs, too many states\"))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 644,
          "bound": null
        },
        {
          "cond": "self.check_size_limit()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 648,
          "bound": null
        }
      ],
      "ret": "Ok(id)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        26,
        31
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}