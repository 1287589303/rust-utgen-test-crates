{
  "name": "regex_lite::pikevm::{impl#1}::next",
  "mod_info": {
    "name": "pikevm",
    "loc": "regex-lite/src/lib.rs:881:1:881:12"
  },
  "visible": true,
  "loc": "regex-lite/src/pikevm.rs:455:5:474:6",
  "doc": "",
  "code": [
    "fn next(&mut self) -> Option<(usize, usize)> {",
    "    if !self.pikevm.search(",
    "        &mut self.cache,",
    "        self.haystack,",
    "        self.at,",
    "        self.haystack.len(),",
    "        false,",
    "        &mut self.slots,",
    "    ) {",
    "        return None;",
    "    }",
    "    let mut m =",
    "        (self.slots[0].unwrap().get(), self.slots[1].unwrap().get());",
    "    if m.0 >= m.1 {",
    "        m = self.handle_overlapping_empty_match(m)?;",
    "    }",
    "    self.at = m.1;",
    "    self.last_match_end = Some(m.1);",
    "    Some(m)",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.pikevm.search(\n            &mut self.cache,\n            self.haystack,\n            self.at,\n            self.haystack.len(),\n            false,\n            &mut self.slots,\n        )",
          "norm": null,
          "value": "true",
          "line": 456,
          "bound": null
        },
        {
          "cond": "m.0 >= m.1",
          "norm": null,
          "value": "true",
          "line": 468,
          "bound": "m.0 == m.1"
        },
        {
          "cond": "self.handle_overlapping_empty_match(m)?",
          "norm": null,
          "value": "Err/None",
          "line": 469,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        17,
        19,
        20,
        23
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.pikevm.search(\n            &mut self.cache,\n            self.haystack,\n            self.at,\n            self.haystack.len(),\n            false,\n            &mut self.slots,\n        )",
          "norm": null,
          "value": "true",
          "line": 456,
          "bound": null
        },
        {
          "cond": "m.0 >= m.1",
          "norm": null,
          "value": "true",
          "line": 468,
          "bound": "m.0 == m.1"
        },
        {
          "cond": "self.handle_overlapping_empty_match(m)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 469,
          "bound": null
        }
      ],
      "ret": "Some(m)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        18,
        22,
        23
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.pikevm.search(\n            &mut self.cache,\n            self.haystack,\n            self.at,\n            self.haystack.len(),\n            false,\n            &mut self.slots,\n        )",
          "norm": null,
          "value": "true",
          "line": 456,
          "bound": null
        },
        {
          "cond": "m.0 >= m.1",
          "norm": null,
          "value": "false",
          "line": 468,
          "bound": null
        }
      ],
      "ret": "Some(m)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        21,
        22,
        23
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.pikevm.search(\n            &mut self.cache,\n            self.haystack,\n            self.at,\n            self.haystack.len(),\n            false,\n            &mut self.slots,\n        )",
          "norm": null,
          "value": "false",
          "line": 456,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        23
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}