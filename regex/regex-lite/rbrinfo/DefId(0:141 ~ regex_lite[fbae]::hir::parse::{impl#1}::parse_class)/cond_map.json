{
  "regex-lite/src/hir/parse.rs:1016:19:1016:30": [
    {
      "Match": {
        "match_source": "regex-lite/src/hir/parse.rs:1016:19:1016:30",
        "match_str": "self.char()",
        "match_kind": "Other",
        "arms": {
          "regex-lite/src/hir/parse.rs:1043:17:1043:20": {
            "pat": {
              "pat_str": "'&'",
              "kind": {
                "Other": 38
              }
            },
            "guard": {
              "regex-lite/src/hir/parse.rs:1043:24:1043:48": [
                {
                  "Bool": {
                    "Binary": {
                      "kind": "Eq",
                      "expr": "self.peek() == Some('&')",
                      "lhs": "self.peek()",
                      "rhs": "Some('&')",
                      "cmp_with_int": false
                    }
                  }
                }
              ]
            },
            "body_source": "regex-lite/src/hir/parse.rs:1043:52:1047:18"
          },
          "regex-lite/src/hir/parse.rs:1017:17:1017:20": {
            "pat": {
              "pat_str": "'['",
              "kind": {
                "Other": 91
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/hir/parse.rs:1017:24:1027:18"
          },
          "regex-lite/src/hir/parse.rs:1048:17:1048:20": {
            "pat": {
              "pat_str": "'-'",
              "kind": {
                "Other": 45
              }
            },
            "guard": {
              "regex-lite/src/hir/parse.rs:1048:24:1048:48": [
                {
                  "Bool": {
                    "Binary": {
                      "kind": "Eq",
                      "expr": "self.peek() == Some('-')",
                      "lhs": "self.peek()",
                      "rhs": "Some('-')",
                      "cmp_with_int": false
                    }
                  }
                }
              ]
            },
            "body_source": "regex-lite/src/hir/parse.rs:1048:52:1050:18"
          },
          "regex-lite/src/hir/parse.rs:1051:17:1051:20": {
            "pat": {
              "pat_str": "'~'",
              "kind": {
                "Other": 126
              }
            },
            "guard": {
              "regex-lite/src/hir/parse.rs:1051:24:1051:48": [
                {
                  "Bool": {
                    "Binary": {
                      "kind": "Eq",
                      "expr": "self.peek() == Some('~')",
                      "lhs": "self.peek()",
                      "rhs": "Some('~')",
                      "cmp_with_int": false
                    }
                  }
                }
              ]
            },
            "body_source": "regex-lite/src/hir/parse.rs:1051:52:1055:18"
          },
          "regex-lite/src/hir/parse.rs:1056:17:1056:18": {
            "pat": {
              "pat_str": "_",
              "kind": "Wild"
            },
            "guard": null,
            "body_source": "regex-lite/src/hir/parse.rs:1056:22:1056:57"
          },
          "regex-lite/src/hir/parse.rs:1028:17:1028:20": {
            "pat": {
              "pat_str": "']'",
              "kind": {
                "Other": 93
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/hir/parse.rs:1028:24:1042:18"
          }
        }
      }
    }
  ],
  "regex-lite/src/hir/parse.rs:1048:24:1048:48": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.peek() == Some('-')",
          "lhs": "self.peek()",
          "rhs": "Some('-')",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-lite/src/hir/parse.rs:1035:24:1035:53": [
    {
      "Bool": {
        "Other": "self.flags().case_insensitive"
      }
    }
  ],
  "regex-lite/src/hir/parse.rs:1005:32:1005:50": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.char() == ']'",
          "lhs": "self.char()",
          "rhs": "']'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/hir/parse.rs:1013:16:1013:30": [
    {
      "Bool": {
        "Other": "self.is_done()"
      }
    }
  ],
  "regex-lite/src/hir/parse.rs:988:25:988:43": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "self.char() != '^'",
          "lhs": "self.char()",
          "rhs": "'^'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/hir/parse.rs:1038:24:1038:30": [
    {
      "Bool": {
        "Other": "negate"
      }
    }
  ],
  "regex-lite/src/hir/parse.rs:991:17:991:43": [
    {
      "Bool": {
        "Other": "self.bump_and_bump_space()"
      }
    }
  ],
  "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21:40:46": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "(*left_val == *right_val)",
          "lhs": "*left_val",
          "rhs": "*right_val",
          "cmp_with_int": false
        }
      }
    }
  ],
  "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:9:48:10": [
    {
      "Match": {
        "match_source": "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15:38:32",
        "match_str": "(&$left, &$right)",
        "match_kind": {
          "StructLike": null
        },
        "arms": {
          "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:13:39:34": {
            "pat": {
              "pat_str": "(left_val, right_val)",
              "kind": {
                "StructLike": {
                  "0": [
                    null,
                    "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14:39:22"
                  ],
                  "1": [
                    null,
                    "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24:39:33"
                  ]
                }
              }
            },
            "guard": null,
            "body_source": null
          }
        }
      }
    }
  ],
  "regex-lite/src/hir/parse.rs:1007:17:1007:43": [
    {
      "Bool": {
        "Other": "self.bump_and_bump_space()"
      }
    }
  ],
  "regex-lite/src/hir/parse.rs:1056:22:1056:57": [
    {
      "Try": "self.parse_class_range(&mut union)?"
    }
  ],
  "regex-lite/src/hir/parse.rs:997:15:997:33": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.char() == '-'",
          "lhs": "self.char()",
          "rhs": "'-'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/hir/parse.rs:1043:24:1043:48": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.peek() == Some('&')",
          "lhs": "self.peek()",
          "rhs": "Some('&')",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-lite/src/hir/parse.rs:999:17:999:43": [
    {
      "Bool": {
        "Other": "self.bump_and_bump_space()"
      }
    }
  ],
  "regex-lite/src/hir/parse.rs:984:13:984:39": [
    {
      "Bool": {
        "Other": "self.bump_and_bump_space()"
      }
    }
  ],
  "regex-lite/src/hir/parse.rs:1021:24:1021:72": [
    {
      "Bool": {
        "Other": "let Some(class) = self.maybe_parse_posix_class()"
      }
    }
  ],
  "regex-lite/src/hir/parse.rs:1005:12:1005:28": [
    {
      "Bool": {
        "Other": "union.is_empty()"
      }
    }
  ],
  "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15:38:32": [
    {
      "Match": {
        "match_source": "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15:38:32",
        "match_str": "(&$left, &$right)",
        "match_kind": {
          "StructLike": null
        },
        "arms": {
          "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:13:39:34": {
            "pat": {
              "pat_str": "(left_val, right_val)",
              "kind": {
                "StructLike": {
                  "0": [
                    null,
                    "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14:39:22"
                  ],
                  "1": [
                    null,
                    "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24:39:33"
                  ]
                }
              }
            },
            "guard": null,
            "body_source": null
          }
        }
      }
    }
  ],
  "regex-lite/src/hir/parse.rs:1051:24:1051:48": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.peek() == Some('~')",
          "lhs": "self.peek()",
          "rhs": "Some('~')",
          "cmp_with_int": false
        }
      }
    }
  ]
}