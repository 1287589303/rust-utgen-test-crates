bb0
  0: PlaceMention((*_1))
    SourceInfo(regex-lite/src/nfa.rs:177:15-177:20)
  1: _2 = discriminant((*_1))
    SourceInfo(regex-lite/src/nfa.rs:177:15-177:20)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:177:9-177:20)
      kind: switchInt(move _2) -> [0: bb4, 1: bb3, 2: bb2, 3: bb4, 4: bb4, 5: bb4, 6: bb4, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2, bb3, bb4, bb4, bb4, bb4, bb4]

bb1
  0: FakeRead(ForMatchedPlace(None), (*_1))
    SourceInfo(regex-lite/src/nfa.rs:177:15-177:20)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:177:15-177:20)
      kind: unreachable
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:183:13-183:46)
      kind: falseEdge -> [real: bb6, imaginary: bb3]
  }
  preds [bb0, bb4]
  succs [bb3, bb6]

bb3
  0: StorageLive(_8)
    SourceInfo(regex-lite/src/nfa.rs:186:29-186:39)
  1: _8 = &(((*_1) as Ranges).1: alloc::vec::Vec<(char, char)>)
    SourceInfo(regex-lite/src/nfa.rs:186:29-186:39)
  2: StorageLive(_9)
    SourceInfo(regex-lite/src/nfa.rs:187:17-187:29)
  3: StorageLive(_10)
    SourceInfo(regex-lite/src/nfa.rs:187:17-187:23)
  4: _10 = &(*_8)
    SourceInfo(regex-lite/src/nfa.rs:187:17-187:23)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:187:17-187:29)
      kind: _9 = alloc::vec::Vec::<(char, char)>::len(move _10) -> [return: bb10, unwind: bb14]
  }
  preds [bb0, bb2]
  succs [bb10, bb14]

bb4
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:178:13-182:27)
      kind: falseEdge -> [real: bb5, imaginary: bb2]
  }
  preds [bb0, bb0, bb0, bb0, bb0]
  succs [bb2, bb5]

bb5
  0: _0 = const 0_usize
    SourceInfo(regex-lite/src/nfa.rs:182:31-182:32)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:182:31-182:32)
      kind: goto -> bb13
  }
  preds [bb4]
  succs [bb13]

bb6
  0: StorageLive(_3)
    SourceInfo(regex-lite/src/nfa.rs:183:29-183:40)
  1: _3 = &(((*_1) as Splits).0: alloc::vec::Vec<u32>)
    SourceInfo(regex-lite/src/nfa.rs:183:29-183:40)
  2: StorageLive(_4)
    SourceInfo(regex-lite/src/nfa.rs:184:17-184:30)
  3: StorageLive(_5)
    SourceInfo(regex-lite/src/nfa.rs:184:17-184:24)
  4: _5 = &(*_3)
    SourceInfo(regex-lite/src/nfa.rs:184:17-184:24)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:184:17-184:30)
      kind: _4 = alloc::vec::Vec::<u32>::len(move _5) -> [return: bb7, unwind: bb14]
  }
  preds [bb2]
  succs [bb7, bb14]

bb7
  0: StorageDead(_5)
    SourceInfo(regex-lite/src/nfa.rs:184:29-184:30)
  1: StorageLive(_6)
    SourceInfo(regex-lite/src/nfa.rs:184:33-184:53)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:184:33-184:53)
      kind: _6 = core::mem::size_of::<u32>() -> [return: bb8, unwind: bb14]
  }
  preds [bb6]
  succs [bb8, bb14]

bb8
  0: _7 = MulWithOverflow(_4, _6)
    SourceInfo(regex-lite/src/nfa.rs:184:17-184:53)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:184:17-184:53)
      kind: assert(!move (_7.1: bool), "attempt to compute `{} * {}`, which would overflow", move _4, move _6) -> [success: bb9, unwind: bb14]
  }
  preds [bb7]
  succs [bb9, bb14]

bb9
  0: _0 = move (_7.0: usize)
    SourceInfo(regex-lite/src/nfa.rs:184:17-184:53)
  1: StorageDead(_6)
    SourceInfo(regex-lite/src/nfa.rs:184:52-184:53)
  2: StorageDead(_4)
    SourceInfo(regex-lite/src/nfa.rs:184:52-184:53)
  3: StorageDead(_3)
    SourceInfo(regex-lite/src/nfa.rs:185:13-185:14)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:185:13-185:14)
      kind: goto -> bb13
  }
  preds [bb8]
  succs [bb13]

bb10
  0: StorageDead(_10)
    SourceInfo(regex-lite/src/nfa.rs:187:28-187:29)
  1: StorageLive(_11)
    SourceInfo(regex-lite/src/nfa.rs:187:32-187:57)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:187:32-187:57)
      kind: _11 = core::mem::size_of::<(char, char)>() -> [return: bb11, unwind: bb14]
  }
  preds [bb3]
  succs [bb11, bb14]

bb11
  0: _12 = MulWithOverflow(_9, _11)
    SourceInfo(regex-lite/src/nfa.rs:187:17-187:57)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:187:17-187:57)
      kind: assert(!move (_12.1: bool), "attempt to compute `{} * {}`, which would overflow", move _9, move _11) -> [success: bb12, unwind: bb14]
  }
  preds [bb10]
  succs [bb12, bb14]

bb12
  0: _0 = move (_12.0: usize)
    SourceInfo(regex-lite/src/nfa.rs:187:17-187:57)
  1: StorageDead(_11)
    SourceInfo(regex-lite/src/nfa.rs:187:56-187:57)
  2: StorageDead(_9)
    SourceInfo(regex-lite/src/nfa.rs:187:56-187:57)
  3: StorageDead(_8)
    SourceInfo(regex-lite/src/nfa.rs:188:13-188:14)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:188:13-188:14)
      kind: goto -> bb13
  }
  preds [bb11]
  succs [bb13]

bb13
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:190:6-190:6)
      kind: return
  }
  preds [bb5, bb9, bb12]
  succs []

bb14
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:176:5-190:6)
      kind: resume
  }
  preds [bb3, bb6, bb7, bb8, bb10, bb11]
  succs []

