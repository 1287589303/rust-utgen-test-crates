bb0
  0: StorageLive(_2)
    SourceInfo(regex-lite/src/string.rs:2306:9-2308:10)
  1: StorageLive(_3)
    SourceInfo(regex-lite/src/string.rs:2306:12-2306:27)
  2: StorageLive(_4)
    SourceInfo(regex-lite/src/string.rs:2306:12-2306:22)
  3: _4 = ((*_1).1: usize)
    SourceInfo(regex-lite/src/string.rs:2306:12-2306:22)
  4: _3 = Eq(move _4, const 0_usize)
    SourceInfo(regex-lite/src/string.rs:2306:12-2306:27)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:2306:12-2306:27)
      kind: switchInt(move _3) -> [0: bb2, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-lite/src/string.rs:2306:26-2306:27)
  1: _0 = core::option::Option::<&str>::None
    SourceInfo(regex-lite/src/string.rs:2307:20-2307:24)
  2: StorageDead(_3)
    SourceInfo(regex-lite/src/string.rs:2308:9-2308:10)
  3: StorageDead(_2)
    SourceInfo(regex-lite/src/string.rs:2308:9-2308:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb12
  }
  preds [bb0]
  succs [bb12]

bb2
  0: StorageDead(_4)
    SourceInfo(regex-lite/src/string.rs:2306:26-2306:27)
  1: _2 = const ()
    SourceInfo(regex-lite/src/string.rs:2308:10-2308:10)
  2: StorageDead(_3)
    SourceInfo(regex-lite/src/string.rs:2308:9-2308:10)
  3: StorageDead(_2)
    SourceInfo(regex-lite/src/string.rs:2308:9-2308:10)
  4: _6 = SubWithOverflow(((*_1).1: usize), const 1_usize)
    SourceInfo(regex-lite/src/string.rs:2310:9-2310:24)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:2310:9-2310:24)
      kind: assert(!move (_6.1: bool), "attempt to compute `{} - {}`, which would overflow", ((*_1).1: usize), const 1_usize) -> [success: bb3, unwind: bb13]
  }
  preds [bb0]
  succs [bb3, bb13]

bb3
  0: ((*_1).1: usize) = move (_6.0: usize)
    SourceInfo(regex-lite/src/string.rs:2310:9-2310:24)
  1: StorageLive(_7)
    SourceInfo(regex-lite/src/string.rs:2311:9-2313:10)
  2: StorageLive(_8)
    SourceInfo(regex-lite/src/string.rs:2311:12-2311:26)
  3: StorageLive(_9)
    SourceInfo(regex-lite/src/string.rs:2311:12-2311:22)
  4: _9 = ((*_1).1: usize)
    SourceInfo(regex-lite/src/string.rs:2311:12-2311:22)
  5: _8 = Gt(move _9, const 0_usize)
    SourceInfo(regex-lite/src/string.rs:2311:12-2311:26)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:2311:12-2311:26)
      kind: switchInt(move _8) -> [0: bb6, otherwise: bb4]
  }
  preds [bb2]
  succs [bb4, bb6]

bb4
  0: StorageDead(_9)
    SourceInfo(regex-lite/src/string.rs:2311:25-2311:26)
  1: StorageLive(_11)
    SourceInfo(regex-lite/src/string.rs:2312:20-2312:31)
  2: _11 = &mut ((*_1).0: string::Split<'_, '_>)
    SourceInfo(regex-lite/src/string.rs:2312:20-2312:31)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:2312:20-2312:38)
      kind: _0 = <string::Split<'_, '_> as core::iter::Iterator>::next(move _11) -> [return: bb5, unwind: bb13]
  }
  preds [bb3]
  succs [bb5, bb13]

bb5
  0: StorageDead(_11)
    SourceInfo(regex-lite/src/string.rs:2312:37-2312:38)
  1: StorageDead(_8)
    SourceInfo(regex-lite/src/string.rs:2313:9-2313:10)
  2: StorageDead(_7)
    SourceInfo(regex-lite/src/string.rs:2313:9-2313:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/lib.rs:1:1-1:1)
      kind: goto -> bb12
  }
  preds [bb4]
  succs [bb12]

bb6
  0: StorageDead(_9)
    SourceInfo(regex-lite/src/string.rs:2311:25-2311:26)
  1: _7 = const ()
    SourceInfo(regex-lite/src/string.rs:2313:10-2313:10)
  2: StorageDead(_8)
    SourceInfo(regex-lite/src/string.rs:2313:9-2313:10)
  3: StorageDead(_7)
    SourceInfo(regex-lite/src/string.rs:2313:9-2313:10)
  4: StorageLive(_12)
    SourceInfo(regex-lite/src/string.rs:2315:13-2315:16)
  5: StorageLive(_13)
    SourceInfo(regex-lite/src/string.rs:2315:19-2315:39)
  6: _13 = &(*(((*_1).0: string::Split<'_, '_>).0: &str))
    SourceInfo(regex-lite/src/string.rs:2315:19-2315:39)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:2315:19-2315:45)
      kind: _12 = core::str::<impl str>::len(move _13) -> [return: bb7, unwind: bb13]
  }
  preds [bb3]
  succs [bb7, bb13]

bb7
  0: StorageDead(_13)
    SourceInfo(regex-lite/src/string.rs:2315:44-2315:45)
  1: FakeRead(ForLet(None), _12)
    SourceInfo(regex-lite/src/string.rs:2315:13-2315:16)
  2: StorageLive(_14)
    SourceInfo(regex-lite/src/string.rs:2316:12-2316:34)
  3: StorageLive(_15)
    SourceInfo(regex-lite/src/string.rs:2316:12-2316:28)
  4: _15 = (((*_1).0: string::Split<'_, '_>).2: usize)
    SourceInfo(regex-lite/src/string.rs:2316:12-2316:28)
  5: StorageLive(_16)
    SourceInfo(regex-lite/src/string.rs:2316:31-2316:34)
  6: _16 = _12
    SourceInfo(regex-lite/src/string.rs:2316:31-2316:34)
  7: _14 = Gt(move _15, move _16)
    SourceInfo(regex-lite/src/string.rs:2316:12-2316:34)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:2316:12-2316:34)
      kind: switchInt(move _14) -> [0: bb9, otherwise: bb8]
  }
  preds [bb6]
  succs [bb8, bb9]

bb8
  0: StorageDead(_16)
    SourceInfo(regex-lite/src/string.rs:2316:33-2316:34)
  1: StorageDead(_15)
    SourceInfo(regex-lite/src/string.rs:2316:33-2316:34)
  2: _0 = core::option::Option::<&str>::None
    SourceInfo(regex-lite/src/string.rs:2318:13-2318:17)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:2316:9-2322:10)
      kind: goto -> bb11
  }
  preds [bb7]
  succs [bb11]

bb9
  0: StorageDead(_16)
    SourceInfo(regex-lite/src/string.rs:2316:33-2316:34)
  1: StorageDead(_15)
    SourceInfo(regex-lite/src/string.rs:2316:33-2316:34)
  2: StorageLive(_17)
    SourceInfo(regex-lite/src/string.rs:2321:18-2321:62)
  3: StorageLive(_18)
    SourceInfo(regex-lite/src/string.rs:2321:18-2321:62)
  4: StorageLive(_19)
    SourceInfo(regex-lite/src/string.rs:2321:39-2321:62)
  5: StorageLive(_20)
    SourceInfo(regex-lite/src/string.rs:2321:19-2321:39)
  6: _20 = &(*(((*_1).0: string::Split<'_, '_>).0: &str))
    SourceInfo(regex-lite/src/string.rs:2321:19-2321:39)
  7: StorageLive(_21)
    SourceInfo(regex-lite/src/string.rs:2321:40-2321:61)
  8: StorageLive(_22)
    SourceInfo(regex-lite/src/string.rs:2321:40-2321:56)
  9: _22 = (((*_1).0: string::Split<'_, '_>).2: usize)
    SourceInfo(regex-lite/src/string.rs:2321:40-2321:56)
  10: StorageLive(_23)
    SourceInfo(regex-lite/src/string.rs:2321:58-2321:61)
  11: _23 = _12
    SourceInfo(regex-lite/src/string.rs:2321:58-2321:61)
  12: _21 = core::ops::Range::<usize> { start: move _22, end: move _23 }
    SourceInfo(regex-lite/src/string.rs:2321:40-2321:61)
  13: StorageDead(_23)
    SourceInfo(regex-lite/src/string.rs:2321:60-2321:61)
  14: StorageDead(_22)
    SourceInfo(regex-lite/src/string.rs:2321:60-2321:61)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:2321:39-2321:62)
      kind: _19 = <str as core::ops::Index<core::ops::Range<usize>>>::index(move _20, move _21) -> [return: bb10, unwind: bb13]
  }
  preds [bb7]
  succs [bb10, bb13]

bb10
  0: StorageDead(_21)
    SourceInfo(regex-lite/src/string.rs:2321:61-2321:62)
  1: StorageDead(_20)
    SourceInfo(regex-lite/src/string.rs:2321:61-2321:62)
  2: _18 = &(*_19)
    SourceInfo(regex-lite/src/string.rs:2321:18-2321:62)
  3: _17 = &(*_18)
    SourceInfo(regex-lite/src/string.rs:2321:18-2321:62)
  4: _0 = core::option::Option::<&str>::Some(move _17)
    SourceInfo(regex-lite/src/string.rs:2321:13-2321:63)
  5: StorageDead(_17)
    SourceInfo(regex-lite/src/string.rs:2321:62-2321:63)
  6: StorageDead(_19)
    SourceInfo(regex-lite/src/string.rs:2322:9-2322:10)
  7: StorageDead(_18)
    SourceInfo(regex-lite/src/string.rs:2322:9-2322:10)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:2316:9-2322:10)
      kind: goto -> bb11
  }
  preds [bb9]
  succs [bb11]

bb11
  0: StorageDead(_14)
    SourceInfo(regex-lite/src/string.rs:2322:9-2322:10)
  1: StorageDead(_12)
    SourceInfo(regex-lite/src/string.rs:2323:5-2323:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:2323:6-2323:6)
      kind: goto -> bb12
  }
  preds [bb8, bb10]
  succs [bb12]

bb12
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:2323:6-2323:6)
      kind: return
  }
  preds [bb1, bb5, bb11]
  succs []

bb13
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:2305:5-2323:6)
      kind: resume
  }
  preds [bb2, bb4, bb6, bb9]
  succs []

