bb0
  0: StorageLive(_3)
    SourceInfo(regex-lite/src/nfa.rs:330:13-330:15)
  1: StorageLive(_4)
    SourceInfo(regex-lite/src/nfa.rs:330:18-330:58)
  2: StorageLive(_5)
    SourceInfo(regex-lite/src/nfa.rs:330:18-330:57)
  3: StorageLive(_6)
    SourceInfo(regex-lite/src/nfa.rs:330:18-330:22)
  4: _6 = &(*_1)
    SourceInfo(regex-lite/src/nfa.rs:330:18-330:22)
  5: StorageLive(_7)
    SourceInfo(regex-lite/src/nfa.rs:330:27-330:56)
  6: StorageLive(_8)
    SourceInfo(regex-lite/src/nfa.rs:330:52-330:54)
  7: _8 = _2
    SourceInfo(regex-lite/src/nfa.rs:330:52-330:54)
  8: _7 = nfa::State::Char { target: const 0_u32, ch: move _8 }
    SourceInfo(regex-lite/src/nfa.rs:330:27-330:56)
  9: StorageDead(_8)
    SourceInfo(regex-lite/src/nfa.rs:330:55-330:56)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:330:18-330:57)
      kind: _5 = nfa::Compiler::add(move _6, move _7) -> [return: bb1, unwind: bb9]
  }
  preds []
  succs [bb1, bb9]

bb1
  0: StorageDead(_7)
    SourceInfo(regex-lite/src/nfa.rs:330:56-330:57)
  1: StorageDead(_6)
    SourceInfo(regex-lite/src/nfa.rs:330:56-330:57)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:330:18-330:58)
      kind: _4 = <core::result::Result<u32, error::Error> as core::ops::Try>::branch(move _5) -> [return: bb2, unwind: bb10]
  }
  preds [bb0]
  succs [bb2, bb10]

bb2
  0: StorageDead(_5)
    SourceInfo(regex-lite/src/nfa.rs:330:57-330:58)
  1: PlaceMention(_4)
    SourceInfo(regex-lite/src/nfa.rs:330:18-330:58)
  2: _9 = discriminant(_4)
    SourceInfo(regex-lite/src/nfa.rs:330:18-330:58)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:330:18-330:58)
      kind: switchInt(move _9) -> [0: bb5, 1: bb4, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb4, bb5]

bb3
  0: FakeRead(ForMatchedPlace(None), _4)
    SourceInfo(regex-lite/src/nfa.rs:330:18-330:58)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:330:18-330:58)
      kind: unreachable
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:330:57-330:58)
      kind: falseEdge -> [real: bb6, imaginary: bb5]
  }
  preds [bb2]
  succs [bb5, bb6]

bb5
  0: StorageLive(_13)
    SourceInfo(regex-lite/src/nfa.rs:330:18-330:58)
  1: _13 = ((_4 as Continue).0: u32)
    SourceInfo(regex-lite/src/nfa.rs:330:18-330:58)
  2: _3 = _13
    SourceInfo(regex-lite/src/nfa.rs:330:18-330:58)
  3: StorageDead(_13)
    SourceInfo(regex-lite/src/nfa.rs:330:57-330:58)
  4: FakeRead(ForLet(None), _3)
    SourceInfo(regex-lite/src/nfa.rs:330:13-330:15)
  5: StorageDead(_4)
    SourceInfo(regex-lite/src/nfa.rs:330:58-330:59)
  6: StorageLive(_14)
    SourceInfo(regex-lite/src/nfa.rs:331:12-331:46)
  7: StorageLive(_15)
    SourceInfo(regex-lite/src/nfa.rs:331:33-331:35)
  8: _15 = _3
    SourceInfo(regex-lite/src/nfa.rs:331:33-331:35)
  9: StorageLive(_16)
    SourceInfo(regex-lite/src/nfa.rs:331:42-331:44)
  10: _16 = _3
    SourceInfo(regex-lite/src/nfa.rs:331:42-331:44)
  11: _14 = nfa::ThompsonRef { start: move _15, end: move _16 }
    SourceInfo(regex-lite/src/nfa.rs:331:12-331:46)
  12: StorageDead(_16)
    SourceInfo(regex-lite/src/nfa.rs:331:45-331:46)
  13: StorageDead(_15)
    SourceInfo(regex-lite/src/nfa.rs:331:45-331:46)
  14: _0 = core::result::Result::<nfa::ThompsonRef, error::Error>::Ok(move _14)
    SourceInfo(regex-lite/src/nfa.rs:331:9-331:47)
  15: StorageDead(_14)
    SourceInfo(regex-lite/src/nfa.rs:331:46-331:47)
  16: StorageDead(_3)
    SourceInfo(regex-lite/src/nfa.rs:332:5-332:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:332:6-332:6)
      kind: goto -> bb8
  }
  preds [bb2, bb4]
  succs [bb8]

bb6
  0: StorageLive(_10)
    SourceInfo(regex-lite/src/nfa.rs:330:57-330:58)
  1: _10 = move ((_4 as Break).0: core::result::Result<core::convert::Infallible, error::Error>)
    SourceInfo(regex-lite/src/nfa.rs:330:57-330:58)
  2: StorageLive(_12)
    SourceInfo(regex-lite/src/nfa.rs:330:57-330:58)
  3: _12 = move _10
    SourceInfo(regex-lite/src/nfa.rs:330:57-330:58)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:330:18-330:58)
      kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _12) -> [return: bb7, unwind: bb10]
  }
  preds [bb4]
  succs [bb7, bb10]

bb7
  0: StorageDead(_12)
    SourceInfo(regex-lite/src/nfa.rs:330:57-330:58)
  1: StorageDead(_10)
    SourceInfo(regex-lite/src/nfa.rs:330:57-330:58)
  2: StorageDead(_4)
    SourceInfo(regex-lite/src/nfa.rs:330:58-330:59)
  3: StorageDead(_3)
    SourceInfo(regex-lite/src/nfa.rs:332:5-332:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:332:6-332:6)
      kind: goto -> bb8
  }
  preds [bb6]
  succs [bb8]

bb8
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:332:6-332:6)
      kind: return
  }
  preds [bb5, bb7]
  succs []

bb9
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:330:56-330:57)
      kind: drop(_7) -> [return: bb10, unwind terminate(cleanup)]
  }
  preds [bb0]
  succs [bb10]

bb10
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:329:5-332:6)
      kind: resume
  }
  preds [bb1, bb6, bb9]
  succs []

