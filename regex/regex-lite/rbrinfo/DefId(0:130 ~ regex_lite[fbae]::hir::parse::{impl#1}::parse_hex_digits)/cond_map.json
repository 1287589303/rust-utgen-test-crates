{
  "regex-lite/src/hir/parse.rs:623:17:623:36": [
    {
      "Bool": {
        "Other": "is_hex(self.char())"
      }
    }
  ],
  "regex-lite/src/hir/parse.rs:620:16:620:21": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "i > 0",
          "lhs": "i",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "regex-lite/src/hir/parse.rs:631:15:631:78": [
    {
      "Match": {
        "match_source": "regex-lite/src/hir/parse.rs:631:15:631:78",
        "match_str": "u32::from_str_radix(&scratch, 16).ok().and_then(char::from_u32)",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "regex-lite/src/hir/parse.rs:632:13:632:17": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/hir/parse.rs:632:21:632:59"
          },
          "regex-lite/src/hir/parse.rs:633:13:633:21": {
            "pat": {
              "pat_str": "Some(ch)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "regex-lite/src/hir/parse.rs:633:25:633:46"
          }
        }
      }
    }
  ],
  "regex-lite/src/hir/parse.rs:619:18:619:30": [
    {
      "For": {
        "iter_var": "i",
        "iter_range": "0..digit_len"
      }
    }
  ],
  "regex-lite/src/hir/parse.rs:620:26:620:52": [
    {
      "Bool": {
        "Other": "self.bump_and_bump_space()"
      }
    }
  ]
}