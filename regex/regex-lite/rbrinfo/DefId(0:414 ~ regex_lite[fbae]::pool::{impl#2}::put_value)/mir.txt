bb0
  0: StorageLive(_3)
    SourceInfo(regex-lite/src/pool.rs:69:13-69:22)
  1: StorageLive(_4)
    SourceInfo(regex-lite/src/pool.rs:69:25-69:42)
  2: StorageLive(_5)
    SourceInfo(regex-lite/src/pool.rs:69:25-69:35)
  3: _5 = &((*_1).0: std::sync::Mutex<alloc::vec::Vec<alloc::boxed::Box<T>>>)
    SourceInfo(regex-lite/src/pool.rs:69:25-69:35)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:69:25-69:42)
      kind: _4 = std::sync::Mutex::<alloc::vec::Vec<alloc::boxed::Box<T>>>::lock(move _5) -> [return: bb1, unwind: bb10]
  }
  preds []
  succs [bb1, bb10]

bb1
  0: StorageDead(_5)
    SourceInfo(regex-lite/src/pool.rs:69:41-69:42)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:69:25-69:51)
      kind: _3 = core::result::Result::<std::sync::MutexGuard<'_, alloc::vec::Vec<alloc::boxed::Box<T>>>, std::sync::PoisonError<std::sync::MutexGuard<'_, alloc::vec::Vec<alloc::boxed::Box<T>>>>>::unwrap(move _4) -> [return: bb2, unwind: bb9]
  }
  preds [bb0]
  succs [bb2, bb9]

bb2
  0: StorageDead(_4)
    SourceInfo(regex-lite/src/pool.rs:69:50-69:51)
  1: FakeRead(ForLet(None), _3)
    SourceInfo(regex-lite/src/pool.rs:69:13-69:22)
  2: StorageLive(_6)
    SourceInfo(regex-lite/src/pool.rs:70:9-70:26)
  3: StorageLive(_7)
    SourceInfo(regex-lite/src/pool.rs:70:9-70:14)
  4: StorageLive(_8)
    SourceInfo(regex-lite/src/pool.rs:70:9-70:26)
  5: StorageLive(_9)
    SourceInfo(regex-lite/src/pool.rs:70:9-70:14)
  6: _9 = &mut _3
    SourceInfo(regex-lite/src/pool.rs:70:9-70:14)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:70:9-70:26)
      kind: _8 = <std::sync::MutexGuard<'_, alloc::vec::Vec<alloc::boxed::Box<T>>> as core::ops::DerefMut>::deref_mut(move _9) -> [return: bb3, unwind: bb8]
  }
  preds [bb1]
  succs [bb3, bb8]

bb3
  0: _7 = &mut (*_8)
    SourceInfo(regex-lite/src/pool.rs:70:9-70:14)
  1: StorageDead(_9)
    SourceInfo(regex-lite/src/pool.rs:70:13-70:14)
  2: StorageLive(_10)
    SourceInfo(regex-lite/src/pool.rs:70:20-70:25)
  3: _10 = move _2
    SourceInfo(regex-lite/src/pool.rs:70:20-70:25)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:70:9-70:26)
      kind: _6 = alloc::vec::Vec::<alloc::boxed::Box<T>>::push(move _7, move _10) -> [return: bb4, unwind: bb7]
  }
  preds [bb2]
  succs [bb4, bb7]

bb4
  0: StorageDead(_10)
    SourceInfo(regex-lite/src/pool.rs:70:25-70:26)
  1: StorageDead(_7)
    SourceInfo(regex-lite/src/pool.rs:70:25-70:26)
  2: StorageDead(_8)
    SourceInfo(regex-lite/src/pool.rs:70:26-70:27)
  3: StorageDead(_6)
    SourceInfo(regex-lite/src/pool.rs:70:26-70:27)
  4: _0 = const ()
    SourceInfo(regex-lite/src/pool.rs:68:40-71:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:71:5-71:6)
      kind: drop(_3) -> [return: bb5, unwind: bb10]
  }
  preds [bb3]
  succs [bb5, bb10]

bb5
  0: StorageDead(_3)
    SourceInfo(regex-lite/src/pool.rs:71:5-71:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:71:5-71:6)
      kind: drop(_2) -> [return: bb6, unwind: bb11]
  }
  preds [bb4]
  succs [bb6, bb11]

bb6
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:71:6-71:6)
      kind: return
  }
  preds [bb5]
  succs []

bb7
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:70:25-70:26)
      kind: drop(_10) -> [return: bb8, unwind terminate(cleanup)]
  }
  preds [bb3]
  succs [bb8]

bb8
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:71:5-71:6)
      kind: drop(_3) -> [return: bb10, unwind terminate(cleanup)]
  }
  preds [bb2, bb7]
  succs [bb10]

bb9
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:69:50-69:51)
      kind: drop(_4) -> [return: bb10, unwind terminate(cleanup)]
  }
  preds [bb1]
  succs [bb10]

bb10
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:71:5-71:6)
      kind: drop(_2) -> [return: bb11, unwind terminate(cleanup)]
  }
  preds [bb0, bb4, bb8, bb9]
  succs [bb11]

bb11
  Terminator {
      source_info: SourceInfo(regex-lite/src/pool.rs:68:5-71:6)
      kind: resume
  }
  preds [bb5, bb10]
  succs []

