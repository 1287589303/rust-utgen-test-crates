bb0
  0: StorageLive(_2)
    SourceInfo(regex-lite/src/string.rs:1554:9-1554:17)
  1: _2 = ((*_1).2: usize)
    SourceInfo(regex-lite/src/string.rs:1554:9-1554:17)
  2: StorageLive(_3)
    SourceInfo(regex-lite/src/string.rs:1554:20-1554:30)
  3: _3 = ((*_1).1: usize)
    SourceInfo(regex-lite/src/string.rs:1554:20-1554:30)
  4: _4 = SubWithOverflow(_2, _3)
    SourceInfo(regex-lite/src/string.rs:1554:9-1554:30)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:1554:9-1554:30)
      kind: assert(!move (_4.1: bool), "attempt to compute `{} - {}`, which would overflow", move _2, move _3) -> [success: bb1, unwind: bb2]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: _0 = move (_4.0: usize)
    SourceInfo(regex-lite/src/string.rs:1554:9-1554:30)
  1: StorageDead(_3)
    SourceInfo(regex-lite/src/string.rs:1554:29-1554:30)
  2: StorageDead(_2)
    SourceInfo(regex-lite/src/string.rs:1554:29-1554:30)
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:1555:6-1555:6)
      kind: return
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(regex-lite/src/string.rs:1553:5-1555:6)
      kind: resume
  }
  preds [bb0]
  succs []

