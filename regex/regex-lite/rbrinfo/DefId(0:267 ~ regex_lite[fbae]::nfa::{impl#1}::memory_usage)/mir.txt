bb0
  0: StorageLive(_2)
    SourceInfo(regex-lite/src/nfa.rs:128:9-129:77)
  1: StorageLive(_3)
    SourceInfo(regex-lite/src/nfa.rs:128:9-128:49)
  2: StorageLive(_4)
    SourceInfo(regex-lite/src/nfa.rs:128:10-128:27)
  3: StorageLive(_5)
    SourceInfo(regex-lite/src/nfa.rs:128:10-128:21)
  4: _5 = &((*_1).1: alloc::vec::Vec<nfa::State>)
    SourceInfo(regex-lite/src/nfa.rs:128:10-128:21)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:128:10-128:27)
      kind: _4 = alloc::vec::Vec::<nfa::State>::len(move _5) -> [return: bb1, unwind: bb9]
  }
  preds []
  succs [bb1, bb9]

bb1
  0: StorageDead(_5)
    SourceInfo(regex-lite/src/nfa.rs:128:26-128:27)
  1: StorageLive(_6)
    SourceInfo(regex-lite/src/nfa.rs:128:30-128:48)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:128:30-128:48)
      kind: _6 = core::mem::size_of::<nfa::State>() -> [return: bb2, unwind: bb9]
  }
  preds [bb0]
  succs [bb2, bb9]

bb2
  0: _7 = MulWithOverflow(_4, _6)
    SourceInfo(regex-lite/src/nfa.rs:128:9-128:49)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:128:9-128:49)
      kind: assert(!move (_7.1: bool), "attempt to compute `{} * {}`, which would overflow", move _4, move _6) -> [success: bb3, unwind: bb9]
  }
  preds [bb1]
  succs [bb3, bb9]

bb3
  0: _3 = move (_7.0: usize)
    SourceInfo(regex-lite/src/nfa.rs:128:9-128:49)
  1: StorageDead(_6)
    SourceInfo(regex-lite/src/nfa.rs:128:48-128:49)
  2: StorageDead(_4)
    SourceInfo(regex-lite/src/nfa.rs:128:48-128:49)
  3: StorageLive(_8)
    SourceInfo(regex-lite/src/nfa.rs:129:15-129:77)
  4: StorageLive(_9)
    SourceInfo(regex-lite/src/nfa.rs:129:16-129:44)
  5: StorageLive(_10)
    SourceInfo(regex-lite/src/nfa.rs:129:16-129:38)
  6: _10 = &((*_1).7: alloc::vec::Vec<core::option::Option<alloc::sync::Arc<str>>>)
    SourceInfo(regex-lite/src/nfa.rs:129:16-129:38)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:129:16-129:44)
      kind: _9 = alloc::vec::Vec::<core::option::Option<alloc::sync::Arc<str>>>::len(move _10) -> [return: bb4, unwind: bb9]
  }
  preds [bb2]
  succs [bb4, bb9]

bb4
  0: StorageDead(_10)
    SourceInfo(regex-lite/src/nfa.rs:129:43-129:44)
  1: StorageLive(_11)
    SourceInfo(regex-lite/src/nfa.rs:129:47-129:76)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:129:47-129:76)
      kind: _11 = core::mem::size_of::<core::option::Option<alloc::sync::Arc<str>>>() -> [return: bb5, unwind: bb9]
  }
  preds [bb3]
  succs [bb5, bb9]

bb5
  0: _12 = MulWithOverflow(_9, _11)
    SourceInfo(regex-lite/src/nfa.rs:129:15-129:77)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:129:15-129:77)
      kind: assert(!move (_12.1: bool), "attempt to compute `{} * {}`, which would overflow", move _9, move _11) -> [success: bb6, unwind: bb9]
  }
  preds [bb4]
  succs [bb6, bb9]

bb6
  0: _8 = move (_12.0: usize)
    SourceInfo(regex-lite/src/nfa.rs:129:15-129:77)
  1: StorageDead(_11)
    SourceInfo(regex-lite/src/nfa.rs:129:76-129:77)
  2: StorageDead(_9)
    SourceInfo(regex-lite/src/nfa.rs:129:76-129:77)
  3: _13 = AddWithOverflow(_3, _8)
    SourceInfo(regex-lite/src/nfa.rs:128:9-129:77)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:128:9-129:77)
      kind: assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, move _8) -> [success: bb7, unwind: bb9]
  }
  preds [bb5]
  succs [bb7, bb9]

bb7
  0: _2 = move (_13.0: usize)
    SourceInfo(regex-lite/src/nfa.rs:128:9-129:77)
  1: StorageDead(_8)
    SourceInfo(regex-lite/src/nfa.rs:129:76-129:77)
  2: StorageDead(_3)
    SourceInfo(regex-lite/src/nfa.rs:129:76-129:77)
  3: StorageLive(_14)
    SourceInfo(regex-lite/src/nfa.rs:130:15-130:32)
  4: _14 = ((*_1).8: usize)
    SourceInfo(regex-lite/src/nfa.rs:130:15-130:32)
  5: _15 = AddWithOverflow(_2, _14)
    SourceInfo(regex-lite/src/nfa.rs:128:9-130:32)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:128:9-130:32)
      kind: assert(!move (_15.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, move _14) -> [success: bb8, unwind: bb9]
  }
  preds [bb6]
  succs [bb8, bb9]

bb8
  0: _0 = move (_15.0: usize)
    SourceInfo(regex-lite/src/nfa.rs:128:9-130:32)
  1: StorageDead(_14)
    SourceInfo(regex-lite/src/nfa.rs:130:31-130:32)
  2: StorageDead(_2)
    SourceInfo(regex-lite/src/nfa.rs:130:31-130:32)
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:131:6-131:6)
      kind: return
  }
  preds [bb7]
  succs []

bb9
  Terminator {
      source_info: SourceInfo(regex-lite/src/nfa.rs:127:5-131:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb6, bb7]
  succs []

