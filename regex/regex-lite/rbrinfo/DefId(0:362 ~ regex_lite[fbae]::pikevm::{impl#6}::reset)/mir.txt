bb0
  0: StorageLive(_3)
    SourceInfo(regex-lite/src/pikevm.rs:678:13-678:16)
  1: StorageLive(_4)
    SourceInfo(regex-lite/src/pikevm.rs:678:19-678:21)
  2: _4 = &(*_2)
    SourceInfo(regex-lite/src/pikevm.rs:678:19-678:21)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pikevm.rs:678:19-678:27)
      kind: _3 = pikevm::PikeVM::nfa(move _4) -> [return: bb1, unwind: bb10]
  }
  preds []
  succs [bb1, bb10]

bb1
  0: StorageDead(_4)
    SourceInfo(regex-lite/src/pikevm.rs:678:26-678:27)
  1: FakeRead(ForLet(None), _3)
    SourceInfo(regex-lite/src/pikevm.rs:678:13-678:16)
  2: StorageLive(_5)
    SourceInfo(regex-lite/src/pikevm.rs:680:32-680:71)
  3: StorageLive(_6)
    SourceInfo(regex-lite/src/pikevm.rs:680:32-680:62)
  4: StorageLive(_7)
    SourceInfo(regex-lite/src/pikevm.rs:680:32-680:47)
  5: StorageLive(_8)
    SourceInfo(regex-lite/src/pikevm.rs:680:32-680:35)
  6: _8 = &(*_3)
    SourceInfo(regex-lite/src/pikevm.rs:680:32-680:35)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pikevm.rs:680:32-680:47)
      kind: _7 = nfa::NFA::group_len(move _8) -> [return: bb2, unwind: bb10]
  }
  preds [bb0]
  succs [bb2, bb10]

bb2
  0: StorageDead(_8)
    SourceInfo(regex-lite/src/pikevm.rs:680:46-680:47)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pikevm.rs:680:32-680:62)
      kind: _6 = core::num::<impl usize>::checked_mul(move _7, const 2_usize) -> [return: bb3, unwind: bb10]
  }
  preds [bb1]
  succs [bb3, bb10]

bb3
  0: StorageDead(_7)
    SourceInfo(regex-lite/src/pikevm.rs:680:61-680:62)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pikevm.rs:680:32-680:71)
      kind: _5 = core::option::Option::<usize>::unwrap(move _6) -> [return: bb4, unwind: bb10]
  }
  preds [bb2]
  succs [bb4, bb10]

bb4
  0: StorageDead(_6)
    SourceInfo(regex-lite/src/pikevm.rs:680:70-680:71)
  1: ((*_1).1: usize) = move _5
    SourceInfo(regex-lite/src/pikevm.rs:680:9-680:71)
  2: StorageDead(_5)
    SourceInfo(regex-lite/src/pikevm.rs:680:70-680:71)
  3: StorageLive(_9)
    SourceInfo(regex-lite/src/pikevm.rs:685:35-685:55)
  4: _9 = ((*_1).1: usize)
    SourceInfo(regex-lite/src/pikevm.rs:685:35-685:55)
  5: ((*_1).2: usize) = move _9
    SourceInfo(regex-lite/src/pikevm.rs:685:9-685:55)
  6: StorageDead(_9)
    SourceInfo(regex-lite/src/pikevm.rs:685:54-685:55)
  7: StorageLive(_10)
    SourceInfo(regex-lite/src/pikevm.rs:686:13-686:16)
  8: StorageLive(_11)
    SourceInfo(regex-lite/src/pikevm.rs:686:19-692:63)
  9: StorageLive(_12)
    SourceInfo(regex-lite/src/pikevm.rs:686:19-691:28)
  10: StorageLive(_13)
    SourceInfo(regex-lite/src/pikevm.rs:686:19-687:19)
  11: StorageLive(_14)
    SourceInfo(regex-lite/src/pikevm.rs:686:19-686:22)
  12: _14 = &(*_3)
    SourceInfo(regex-lite/src/pikevm.rs:686:19-686:22)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pikevm.rs:686:19-687:19)
      kind: _13 = nfa::NFA::len(move _14) -> [return: bb5, unwind: bb10]
  }
  preds [bb3]
  succs [bb5, bb10]

bb5
  0: StorageDead(_14)
    SourceInfo(regex-lite/src/pikevm.rs:687:18-687:19)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pikevm.rs:686:19-691:28)
      kind: _12 = core::num::<impl usize>::checked_add(move _13, const 1_usize) -> [return: bb6, unwind: bb10]
  }
  preds [bb4]
  succs [bb6, bb10]

bb6
  0: StorageDead(_13)
    SourceInfo(regex-lite/src/pikevm.rs:691:27-691:28)
  1: StorageLive(_15)
    SourceInfo(regex-lite/src/pikevm.rs:692:23-692:62)
  2: StorageLive(_16)
    SourceInfo(regex-lite/src/pikevm.rs:692:23-692:62)
  3: _16 = &((*_1).1: usize)
    SourceInfo(regex-lite/src/pikevm.rs:692:23-692:62)
  4: _15 = {closure@regex-lite/src/pikevm.rs:692:23: 692:26} { self: move _16 }
    SourceInfo(regex-lite/src/pikevm.rs:692:23-692:62)
  5: StorageDead(_16)
    SourceInfo(regex-lite/src/pikevm.rs:692:25-692:26)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pikevm.rs:686:19-692:63)
      kind: _11 = core::option::Option::<usize>::and_then::<usize, {closure@regex-lite/src/pikevm.rs:692:23: 692:26}>(move _12, move _15) -> [return: bb7, unwind: bb10]
  }
  preds [bb5]
  succs [bb7, bb10]

bb7
  0: StorageDead(_15)
    SourceInfo(regex-lite/src/pikevm.rs:692:62-692:63)
  1: StorageDead(_12)
    SourceInfo(regex-lite/src/pikevm.rs:692:62-692:63)
  2: StorageLive(_17)
    SourceInfo(regex-lite/src/pikevm.rs:697:21-697:57)
  3: StorageLive(_18)
    SourceInfo(regex-lite/src/pikevm.rs:697:21-697:57)
  4: _18 = const "slot table length doesn't overflow"
    SourceInfo(regex-lite/src/pikevm.rs:697:21-697:57)
  5: _17 = &(*_18)
    SourceInfo(regex-lite/src/pikevm.rs:697:21-697:57)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pikevm.rs:686:19-697:58)
      kind: _10 = core::option::Option::<usize>::expect(move _11, move _17) -> [return: bb8, unwind: bb10]
  }
  preds [bb6]
  succs [bb8, bb10]

bb8
  0: StorageDead(_17)
    SourceInfo(regex-lite/src/pikevm.rs:697:57-697:58)
  1: StorageDead(_11)
    SourceInfo(regex-lite/src/pikevm.rs:697:57-697:58)
  2: FakeRead(ForLet(None), _10)
    SourceInfo(regex-lite/src/pikevm.rs:686:13-686:16)
  3: StorageDead(_18)
    SourceInfo(regex-lite/src/pikevm.rs:697:58-697:59)
  4: StorageLive(_19)
    SourceInfo(regex-lite/src/pikevm.rs:698:9-698:37)
  5: StorageLive(_20)
    SourceInfo(regex-lite/src/pikevm.rs:698:9-698:19)
  6: _20 = &mut ((*_1).0: alloc::vec::Vec<core::option::Option<int::NonMaxUsize>>)
    SourceInfo(regex-lite/src/pikevm.rs:698:9-698:19)
  7: StorageLive(_21)
    SourceInfo(regex-lite/src/pikevm.rs:698:27-698:30)
  8: _21 = _10
    SourceInfo(regex-lite/src/pikevm.rs:698:27-698:30)
  9: StorageLive(_22)
    SourceInfo(regex-lite/src/pikevm.rs:698:32-698:36)
  10: _22 = core::option::Option::<int::NonMaxUsize>::None
    SourceInfo(regex-lite/src/pikevm.rs:698:32-698:36)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pikevm.rs:698:9-698:37)
      kind: _19 = alloc::vec::Vec::<core::option::Option<int::NonMaxUsize>>::resize(move _20, move _21, move _22) -> [return: bb9, unwind: bb10]
  }
  preds [bb7]
  succs [bb9, bb10]

bb9
  0: StorageDead(_22)
    SourceInfo(regex-lite/src/pikevm.rs:698:36-698:37)
  1: StorageDead(_21)
    SourceInfo(regex-lite/src/pikevm.rs:698:36-698:37)
  2: StorageDead(_20)
    SourceInfo(regex-lite/src/pikevm.rs:698:36-698:37)
  3: StorageDead(_19)
    SourceInfo(regex-lite/src/pikevm.rs:698:37-698:38)
  4: _0 = const ()
    SourceInfo(regex-lite/src/pikevm.rs:677:38-699:6)
  5: StorageDead(_10)
    SourceInfo(regex-lite/src/pikevm.rs:699:5-699:6)
  6: StorageDead(_3)
    SourceInfo(regex-lite/src/pikevm.rs:699:5-699:6)
  Terminator {
      source_info: SourceInfo(regex-lite/src/pikevm.rs:699:6-699:6)
      kind: return
  }
  preds [bb8]
  succs []

bb10
  Terminator {
      source_info: SourceInfo(regex-lite/src/pikevm.rs:677:5-699:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb6, bb7, bb8]
  succs []

