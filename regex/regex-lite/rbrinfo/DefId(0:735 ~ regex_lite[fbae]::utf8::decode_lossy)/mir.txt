bb0
  0: StorageLive(_2)
    SourceInfo(regex-lite/src/utf8.rs:40:11-40:24)
  1: StorageLive(_3)
    SourceInfo(regex-lite/src/utf8.rs:40:18-40:23)
  2: _3 = move _1
    SourceInfo(regex-lite/src/utf8.rs:40:18-40:23)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:40:11-40:24)
      kind: _2 = utf8::decode::<B>(move _3) -> [return: bb1, unwind: bb8]
  }
  preds []
  succs [bb1, bb8]

bb1
  0: StorageDead(_3)
    SourceInfo(regex-lite/src/utf8.rs:40:23-40:24)
  1: PlaceMention(_2)
    SourceInfo(regex-lite/src/utf8.rs:40:11-40:24)
  2: _4 = discriminant((_2.0: core::option::Option<char>))
    SourceInfo(regex-lite/src/utf8.rs:40:11-40:24)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:40:5-40:24)
      kind: switchInt(move _4) -> [0: bb4, 1: bb3, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3, bb4]

bb2
  0: FakeRead(ForMatchedPlace(None), _2)
    SourceInfo(regex-lite/src/utf8.rs:40:11-40:24)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:40:11-40:24)
      kind: unreachable
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:41:9-41:25)
      kind: falseEdge -> [real: bb5, imaginary: bb4]
  }
  preds [bb1]
  succs [bb4, bb5]

bb4
  0: StorageLive(_9)
    SourceInfo(regex-lite/src/utf8.rs:42:16-42:20)
  1: _9 = (_2.1: usize)
    SourceInfo(regex-lite/src/utf8.rs:42:16-42:20)
  2: StorageLive(_10)
    SourceInfo(regex-lite/src/utf8.rs:42:38-42:42)
  3: _10 = _9
    SourceInfo(regex-lite/src/utf8.rs:42:38-42:42)
  4: _0 = (const 'ï¿½', move _10)
    SourceInfo(regex-lite/src/utf8.rs:42:25-42:43)
  5: StorageDead(_10)
    SourceInfo(regex-lite/src/utf8.rs:42:42-42:43)
  6: StorageDead(_9)
    SourceInfo(regex-lite/src/utf8.rs:42:42-42:43)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:42:42-42:43)
      kind: goto -> bb6
  }
  preds [bb1, bb3]
  succs [bb6]

bb5
  0: StorageLive(_5)
    SourceInfo(regex-lite/src/utf8.rs:41:15-41:17)
  1: _5 = (((_2.0: core::option::Option<char>) as Some).0: char)
    SourceInfo(regex-lite/src/utf8.rs:41:15-41:17)
  2: StorageLive(_6)
    SourceInfo(regex-lite/src/utf8.rs:41:20-41:24)
  3: _6 = (_2.1: usize)
    SourceInfo(regex-lite/src/utf8.rs:41:20-41:24)
  4: StorageLive(_7)
    SourceInfo(regex-lite/src/utf8.rs:41:30-41:32)
  5: _7 = _5
    SourceInfo(regex-lite/src/utf8.rs:41:30-41:32)
  6: StorageLive(_8)
    SourceInfo(regex-lite/src/utf8.rs:41:34-41:38)
  7: _8 = _6
    SourceInfo(regex-lite/src/utf8.rs:41:34-41:38)
  8: _0 = (move _7, move _8)
    SourceInfo(regex-lite/src/utf8.rs:41:29-41:39)
  9: StorageDead(_8)
    SourceInfo(regex-lite/src/utf8.rs:41:38-41:39)
  10: StorageDead(_7)
    SourceInfo(regex-lite/src/utf8.rs:41:38-41:39)
  11: StorageDead(_6)
    SourceInfo(regex-lite/src/utf8.rs:41:38-41:39)
  12: StorageDead(_5)
    SourceInfo(regex-lite/src/utf8.rs:41:38-41:39)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:41:38-41:39)
      kind: goto -> bb6
  }
  preds [bb3]
  succs [bb6]

bb6
  0: StorageDead(_2)
    SourceInfo(regex-lite/src/utf8.rs:44:1-44:2)
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:44:1-44:2)
      kind: drop(_1) -> [return: bb7, unwind: bb10]
  }
  preds [bb4, bb5]
  succs [bb7, bb10]

bb7
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:44:2-44:2)
      kind: return
  }
  preds [bb6]
  succs []

bb8
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:40:23-40:24)
      kind: drop(_3) -> [return: bb9, unwind terminate(cleanup)]
  }
  preds [bb0]
  succs [bb9]

bb9
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:44:1-44:2)
      kind: drop(_1) -> [return: bb10, unwind terminate(cleanup)]
  }
  preds [bb8]
  succs [bb10]

bb10
  Terminator {
      source_info: SourceInfo(regex-lite/src/utf8.rs:39:1-44:2)
      kind: resume
  }
  preds [bb6, bb9]
  succs []

