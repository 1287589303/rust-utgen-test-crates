{
  "regex-lite/src/nfa.rs:421:21:421:38": [
    {
      "Try": "self.add_empty()?"
    }
  ],
  "regex-lite/src/nfa.rs:428:13:428:48": [
    {
      "Try": "self.patch(splits, compiled.start)?"
    }
  ],
  "regex-lite/src/nfa.rs:426:28:426:40": [
    {
      "Try": "self.c(hir)?"
    }
  ],
  "regex-lite/src/nfa.rs:423:18:423:26": [
    {
      "For": {
        "iter_var": "_",
        "iter_range": "min..max"
      }
    }
  ],
  "regex-lite/src/nfa.rs:425:17:425:79": [
    {
      "Try": "self.add(State::Splits { targets: vec![], reverse: !greedy })?"
    }
  ],
  "regex-lite/src/nfa.rs:432:9:432:37": [
    {
      "Try": "self.patch(prev_end, empty)?"
    }
  ],
  "regex-lite/src/nfa.rs:388:12:388:22": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "min == max",
          "lhs": "min",
          "rhs": "max",
          "cmp_with_int": false
        }
      }
    }
  ],
  "regex-lite/src/nfa.rs:429:13:429:39": [
    {
      "Try": "self.patch(splits, empty)?"
    }
  ],
  "regex-lite/src/nfa.rs:387:22:387:47": [
    {
      "Try": "self.c_exactly(hir, min)?"
    }
  ],
  "regex-lite/src/nfa.rs:427:13:427:42": [
    {
      "Try": "self.patch(prev_end, splits)?"
    }
  ]
}