[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = _1,
            _3 = Eq(move _4, const '\u{e000}'),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:761:8: 761:24 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb2, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            _0 = core::option::Option::<char>::Some(const '\u{d7ff}'),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            _2 = const (),
            StorageDead(_3),
            StorageDead(_2),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:766:25: 766:38 (#0),
                    scope: scope[0],
                },
                kind: _11 = <u32 as core::convert::From<char>>::from(move _12) -> [return: bb3, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:766:25: 766:53 (#0),
                    scope: scope[0],
                },
                kind: _10 = core::num::<impl u32>::checked_sub(move _11, const 1_u32) -> [return: bb4, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:766:25: 766:54 (#499),
                    scope: scope[0],
                },
                kind: _9 = <core::option::Option<u32> as core::ops::Try>::branch(move _10) -> [return: bb5, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            PlaceMention(_9),
            _13 = discriminant(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:766:25: 766:54 (#499),
                    scope: scope[0],
                },
                kind: switchInt(move _13) -> [0: bb8, 1: bb7, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:766:25: 766:54 (#499),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:766:53: 766:54 (#500),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb9, imaginary: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_17),
            _17 = ((_9 as Continue).0: u32),
            _8 = _17,
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:766:10: 766:55 (#0),
                    scope: scope[0],
                },
                kind: _7 = core::char::methods::<impl char>::from_u32(move _8) -> [return: bb11, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            _14 = ((_9 as Break).0: core::option::Option<core::convert::Infallible>),
            StorageLive(_16),
            _16 = _14,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:766:25: 766:54 (#499),
                    scope: scope[2],
                },
                kind: _0 = <core::option::Option<char> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _16) -> [return: bb10, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_14),
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:766:10: 766:64 (#0),
                    scope: scope[0],
                },
                kind: _6 = core::option::Option::<char>::unwrap(move _7) -> [return: bb12, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            _0 = core::option::Option::<char>::Some(move _6),
            StorageDead(_6),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:767:2: 767:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:767:2: 767:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:759:1: 767:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:759:27: 759:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/hir/mod.rs:759:18: 759:22 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/hir/mod.rs:759:14: 759:16 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/mod.rs:759:14: 759:16 (#0),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:759:14: 759:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:761:5: 763:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:761:8: 761:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:761:8: 761:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:761:25: 763:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:766:10: 766:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/mod.rs:766:5: 766:65 (#0),
                },
            ),
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:766:10: 766:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/mod.rs:766:5: 766:65 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:766:25: 766:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/mod.rs:766:5: 766:65 (#0),
                },
            ),
        ),
        ty: core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:766:25: 766:54 (#499),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/mod.rs:766:5: 766:65 (#0),
                },
            ),
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:766:25: 766:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/mod.rs:766:5: 766:65 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:766:25: 766:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/mod.rs:766:5: 766:65 (#0),
                },
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:766:35: 766:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:766:53: 766:54 (#500),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _9,
                                ),
                                regex-lite/src/hir/mod.rs:766:25: 766:54 (#499),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/mod.rs:766:53: 766:54 (#500),
                    },
                ),
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:766:53: 766:54 (#500),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/mod.rs:766:5: 766:65 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:766:53: 766:54 (#500),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/mod.rs:766:5: 766:65 (#0),
                },
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:766:53: 766:54 (#500),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _9,
                                ),
                                regex-lite/src/hir/mod.rs:766:25: 766:54 (#499),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/mod.rs:766:25: 766:54 (#499),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:766:25: 766:54 (#0),
            scope: scope[0],
        },
    },
]