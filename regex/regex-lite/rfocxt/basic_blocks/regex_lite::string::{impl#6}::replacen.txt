[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &mut _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:901:28: 901:46 (#0),
                    scope: scope[1],
                },
                kind: _6 = <R as string::Replacer>::no_expansion(move _7) -> [return: bb1, unwind: bb109],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            PlaceMention(_6),
            _8 = discriminant(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:901:16: 901:25 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _8) -> [1: bb2, otherwise: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:901:16: 901:25 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb3, imaginary: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            _9 = move ((_6 as Some).0: alloc::borrow::Cow<'_, str>),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &(*_1),
            StorageLive(_15),
            _15 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:902:26: 902:50 (#0),
                    scope: scope[1],
                },
                kind: _13 = string::Regex::find_iter(move _14, move _15) -> [return: bb4, unwind: bb107],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:902:26: 902:62 (#0),
                    scope: scope[1],
                },
                kind: _12 = <string::Matches<'_, '_> as core::iter::Iterator>::enumerate(move _13) -> [return: bb5, unwind: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:902:26: 902:73 (#0),
                    scope: scope[1],
                },
                kind: _11 = <core::iter::Enumerate<string::Matches<'_, '_>> as core::iter::Iterator>::peekable(move _12) -> [return: bb6, unwind: bb105],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            FakeRead(ForLet(None), _11),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = &mut _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:903:16: 903:25 (#0),
                    scope: scope[2],
                },
                kind: _19 = core::iter::Peekable::<core::iter::Enumerate<string::Matches<'_, '_>>>::peek(move _20) -> [return: bb7, unwind: bb104],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _18 = &_19,
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:903:16: 903:35 (#0),
                    scope: scope[2],
                },
                kind: _17 = core::option::Option::<&(usize, string::Match<'_>)>::is_none(move _18) -> [return: bb8, unwind: bb104],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:903:16: 903:35 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _17) -> [0: bb10, otherwise: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            StorageLive(_22),
            _22 = &(*_2),
            _0 = alloc::borrow::Cow::<'_, str>::Borrowed(move _22),
            StorageDead(_22),
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb85,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            _16 = const (),
            StorageDead(_17),
            StorageDead(_16),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            _25 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:906:49: 906:63 (#0),
                    scope: scope[2],
                },
                kind: _24 = core::str::<impl str>::len(move _25) -> [return: bb11, unwind: bb104],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:906:27: 906:64 (#0),
                    scope: scope[2],
                },
                kind: _23 = alloc::string::String::with_capacity(move _24) -> [return: bb12, unwind: bb104],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            FakeRead(ForLet(None), _23),
            StorageLive(_26),
            _26 = const 0_usize,
            FakeRead(ForLet(None), _26),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            _29 = move _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:908:27: 908:29 (#744),
                    scope: scope[4],
                },
                kind: _28 = <core::iter::Peekable<core::iter::Enumerate<string::Matches<'_, '_>>> as core::iter::IntoIterator>::into_iter(move _29) -> [return: bb13, unwind: bb102],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            PlaceMention(_28),
            StorageLive(_30),
            _30 = move _28,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:908:13: 915:14 (#743),
                    scope: scope[5],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:908:13: 915:14 (#743),
                    scope: scope[5],
                },
                kind: falseUnwind -> [real: bb15, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_32),
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            _35 = &mut _30,
            _34 = &mut (*_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:908:27: 908:29 (#744),
                    scope: scope[5],
                },
                kind: _33 = <core::iter::Peekable<core::iter::Enumerate<string::Matches<'_, '_>>> as core::iter::Iterator>::next(move _34) -> [return: bb16, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            PlaceMention(_33),
            _36 = discriminant(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:908:27: 908:29 (#744),
                    scope: scope[5],
                },
                kind: switchInt(move _36) -> [0: bb18, 1: bb19, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:908:27: 908:29 (#744),
                    scope: scope[5],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:908:13: 915:14 (#743),
                    scope: scope[5],
                },
                kind: falseEdge -> [real: bb20, imaginary: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_38),
            _38 = (((_33 as Some).0: (usize, string::Match<'_>)).0: usize),
            StorageLive(_39),
            _39 = (((_33 as Some).0: (usize, string::Match<'_>)).1: string::Match<'_>),
            StorageLive(_40),
            StorageLive(_41),
            _41 = &mut _23,
            StorageLive(_42),
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            _45 = &(*_2),
            StorageLive(_46),
            StorageLive(_47),
            _47 = _26,
            StorageLive(_48),
            StorageLive(_49),
            _49 = &_39,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:909:52: 909:61 (#0),
                    scope: scope[6],
                },
                kind: _48 = string::Match::<'_>::start(move _49) -> [return: bb21, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _27 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:908:13: 915:14 (#743),
                    scope: scope[5],
                },
                kind: goto -> bb33,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_49),
            _46 = core::ops::Range::<usize> { start: move _47, end: move _48 },
            StorageDead(_48),
            StorageDead(_47),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:909:39: 909:62 (#0),
                    scope: scope[6],
                },
                kind: _44 = <str as core::ops::Index<core::ops::Range<usize>>>::index(move _45, move _46) -> [return: bb22, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
            StorageDead(_45),
            _43 = &(*_44),
            _42 = &(*_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:909:17: 909:63 (#0),
                    scope: scope[6],
                },
                kind: _40 = alloc::string::String::push_str(move _41, move _42) -> [return: bb23, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
            StorageDead(_41),
            StorageDead(_44),
            StorageDead(_43),
            StorageDead(_40),
            StorageLive(_50),
            StorageLive(_51),
            _51 = &mut _23,
            StorageLive(_52),
            StorageLive(_53),
            StorageLive(_54),
            StorageLive(_55),
            _55 = &_9,
            _54 = &(*_55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:910:30: 910:34 (#0),
                    scope: scope[6],
                },
                kind: _53 = <alloc::borrow::Cow<'_, str> as core::ops::Deref>::deref(move _54) -> [return: bb24, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _52 = &(*_53),
            StorageDead(_54),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:910:17: 910:35 (#0),
                    scope: scope[6],
                },
                kind: _50 = alloc::string::String::push_str(move _51, move _52) -> [return: bb25, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            StorageDead(_51),
            StorageDead(_55),
            StorageDead(_53),
            StorageDead(_50),
            StorageLive(_56),
            StorageLive(_57),
            _57 = &_39,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:911:30: 911:37 (#0),
                    scope: scope[6],
                },
                kind: _56 = string::Match::<'_>::end(move _57) -> [return: bb26, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_57),
            _26 = move _56,
            StorageDead(_56),
            StorageLive(_58),
            StorageLive(_59),
            _59 = _3,
            _58 = Gt(move _59, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:912:20: 912:29 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _58) -> [0: bb31, otherwise: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
            StorageLive(_60),
            StorageLive(_61),
            _61 = _38,
            StorageLive(_62),
            StorageLive(_63),
            _63 = _3,
            _64 = SubWithOverflow(_63, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:912:38: 912:47 (#0),
                    scope: scope[6],
                },
                kind: assert(!move (_64.1: bool), "attempt to compute `{} - {}`, which would overflow", move _63, const 1_usize) -> [success: bb28, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _62 = move (_64.0: usize),
            StorageDead(_63),
            _60 = Ge(move _61, move _62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:912:33: 912:47 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _60) -> [0: bb30, otherwise: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_62),
            StorageDead(_61),
            _27 = const (),
            StorageDead(_60),
            StorageDead(_58),
            StorageDead(_39),
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb33,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_62),
            StorageDead(_61),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb32,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb32,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _32 = const (),
            StorageDead(_60),
            StorageDead(_58),
            StorageDead(_39),
            StorageDead(_38),
            StorageDead(_35),
            StorageDead(_33),
            StorageDead(_32),
            _31 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:908:13: 915:14 (#743),
                    scope: scope[5],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            StorageDead(_33),
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:915:13: 915:14 (#743),
                    scope: scope[4],
                },
                kind: drop(_30) -> [return: bb34, unwind: bb101],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:915:13: 915:14 (#743),
                    scope: scope[4],
                },
                kind: drop(_28) -> [return: bb35, unwind: bb103],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_27),
            StorageLive(_66),
            StorageLive(_67),
            _67 = &mut _23,
            StorageLive(_68),
            StorageLive(_69),
            StorageLive(_70),
            StorageLive(_71),
            _71 = &(*_2),
            StorageLive(_72),
            StorageLive(_73),
            _73 = _26,
            _72 = core::ops::RangeFrom::<usize> { start: move _73 },
            StorageDead(_73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:916:35: 916:49 (#0),
                    scope: scope[4],
                },
                kind: _70 = <str as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _71, move _72) -> [return: bb36, unwind: bb103],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_72),
            StorageDead(_71),
            _69 = &(*_70),
            _68 = &(*_69),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:916:13: 916:50 (#0),
                    scope: scope[4],
                },
                kind: _66 = alloc::string::String::push_str(move _67, move _68) -> [return: bb37, unwind: bb103],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_68),
            StorageDead(_67),
            StorageDead(_70),
            StorageDead(_69),
            StorageDead(_66),
            StorageLive(_74),
            _74 = move _23,
            _0 = alloc::borrow::Cow::<'_, str>::Owned(move _74),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:917:34: 917:35 (#0),
                    scope: scope[4],
                },
                kind: drop(_74) -> [return: bb38, unwind: bb103],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_74),
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:918:9: 918:10 (#0),
                    scope: scope[2],
                },
                kind: drop(_23) -> [return: bb84, unwind: bb104],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:918:9: 918:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb40, unwind: bb109],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_75),
            StorageLive(_76),
            StorageLive(_77),
            StorageLive(_78),
            _78 = &(*_1),
            StorageLive(_79),
            _79 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:922:22: 922:50 (#0),
                    scope: scope[0],
                },
                kind: _77 = string::Regex::captures_iter(move _78, move _79) -> [return: bb41, unwind: bb109],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_79),
            StorageDead(_78),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:922:22: 922:62 (#0),
                    scope: scope[0],
                },
                kind: _76 = <string::CaptureMatches<'_, '_> as core::iter::Iterator>::enumerate(move _77) -> [return: bb42, unwind: bb99],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_77),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:922:22: 922:73 (#0),
                    scope: scope[0],
                },
                kind: _75 = <core::iter::Enumerate<string::CaptureMatches<'_, '_>> as core::iter::Iterator>::peekable(move _76) -> [return: bb43, unwind: bb98],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_76),
            FakeRead(ForLet(None), _75),
            StorageLive(_80),
            StorageLive(_81),
            StorageLive(_82),
            StorageLive(_83),
            StorageLive(_84),
            _84 = &mut _75,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:923:12: 923:21 (#0),
                    scope: scope[7],
                },
                kind: _83 = core::iter::Peekable::<core::iter::Enumerate<string::CaptureMatches<'_, '_>>>::peek(move _84) -> [return: bb44, unwind: bb97],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _82 = &_83,
            StorageDead(_84),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:923:12: 923:31 (#0),
                    scope: scope[7],
                },
                kind: _81 = core::option::Option::<&(usize, string::Captures<'_>)>::is_none(move _82) -> [return: bb45, unwind: bb97],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:923:12: 923:31 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _81) -> [0: bb47, otherwise: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_83),
            StorageDead(_82),
            StorageLive(_86),
            _86 = &(*_2),
            _0 = alloc::borrow::Cow::<'_, str>::Borrowed(move _86),
            StorageDead(_86),
            StorageDead(_81),
            StorageDead(_80),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:940:5: 940:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_75) -> [return: bb83, unwind: bb109],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_83),
            StorageDead(_82),
            _80 = const (),
            StorageDead(_81),
            StorageDead(_80),
            StorageLive(_87),
            StorageLive(_88),
            StorageLive(_89),
            _89 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:926:45: 926:59 (#0),
                    scope: scope[7],
                },
                kind: _88 = core::str::<impl str>::len(move _89) -> [return: bb48, unwind: bb97],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_89),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:926:23: 926:60 (#0),
                    scope: scope[7],
                },
                kind: _87 = alloc::string::String::with_capacity(move _88) -> [return: bb49, unwind: bb97],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_88),
            FakeRead(ForLet(None), _87),
            StorageLive(_90),
            _90 = const 0_usize,
            FakeRead(ForLet(None), _90),
            StorageLive(_91),
            StorageLive(_92),
            StorageLive(_93),
            _93 = move _75,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:928:25: 928:27 (#749),
                    scope: scope[9],
                },
                kind: _92 = <core::iter::Peekable<core::iter::Enumerate<string::CaptureMatches<'_, '_>>> as core::iter::IntoIterator>::into_iter(move _93) -> [return: bb50, unwind: bb95],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_93),
            PlaceMention(_92),
            StorageLive(_94),
            _94 = move _92,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:928:9: 937:10 (#748),
                    scope: scope[10],
                },
                kind: goto -> bb51,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:928:9: 937:10 (#748),
                    scope: scope[10],
                },
                kind: falseUnwind -> [real: bb52, unwind: bb93],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_95),
            StorageLive(_96),
            StorageLive(_97),
            StorageLive(_98),
            _98 = &mut _94,
            _97 = &mut (*_98),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:928:25: 928:27 (#749),
                    scope: scope[10],
                },
                kind: _96 = <core::iter::Peekable<core::iter::Enumerate<string::CaptureMatches<'_, '_>>> as core::iter::Iterator>::next(move _97) -> [return: bb53, unwind: bb93],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_97),
            PlaceMention(_96),
            _99 = discriminant(_96),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:928:25: 928:27 (#749),
                    scope: scope[10],
                },
                kind: switchInt(move _99) -> [0: bb55, 1: bb56, otherwise: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _96),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:928:25: 928:27 (#749),
                    scope: scope[10],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:928:9: 937:10 (#748),
                    scope: scope[10],
                },
                kind: falseEdge -> [real: bb57, imaginary: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_101),
            _101 = (((_96 as Some).0: (usize, string::Captures<'_>)).0: usize),
            StorageLive(_102),
            _102 = move (((_96 as Some).0: (usize, string::Captures<'_>)).1: string::Captures<'_>),
            StorageLive(_103),
            StorageLive(_104),
            StorageLive(_105),
            _105 = &_102,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:930:21: 930:31 (#0),
                    scope: scope[11],
                },
                kind: _104 = string::Captures::<'_>::get(move _105, const 0_usize) -> [return: bb58, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _91 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:928:9: 937:10 (#748),
                    scope: scope[10],
                },
                kind: goto -> bb74,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_105),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:930:21: 930:40 (#0),
                    scope: scope[11],
                },
                kind: _103 = core::option::Option::<string::Match<'_>>::unwrap(move _104) -> [return: bb59, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_104),
            FakeRead(ForLet(None), _103),
            StorageLive(_106),
            StorageLive(_107),
            _107 = &mut _87,
            StorageLive(_108),
            StorageLive(_109),
            StorageLive(_110),
            StorageLive(_111),
            _111 = &(*_2),
            StorageLive(_112),
            StorageLive(_113),
            _113 = _90,
            StorageLive(_114),
            StorageLive(_115),
            _115 = &_103,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:931:48: 931:57 (#0),
                    scope: scope[12],
                },
                kind: _114 = string::Match::<'_>::start(move _115) -> [return: bb60, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_115),
            _112 = core::ops::Range::<usize> { start: move _113, end: move _114 },
            StorageDead(_114),
            StorageDead(_113),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:931:35: 931:58 (#0),
                    scope: scope[12],
                },
                kind: _110 = <str as core::ops::Index<core::ops::Range<usize>>>::index(move _111, move _112) -> [return: bb61, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_112),
            StorageDead(_111),
            _109 = &(*_110),
            _108 = &(*_109),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:931:13: 931:59 (#0),
                    scope: scope[12],
                },
                kind: _106 = alloc::string::String::push_str(move _107, move _108) -> [return: bb62, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_108),
            StorageDead(_107),
            StorageDead(_110),
            StorageDead(_109),
            StorageDead(_106),
            StorageLive(_116),
            StorageLive(_117),
            _117 = &mut _4,
            StorageLive(_118),
            StorageLive(_119),
            _119 = &_102,
            _118 = &(*_119),
            StorageLive(_120),
            StorageLive(_121),
            _121 = &mut _87,
            _120 = &mut (*_121),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:932:13: 932:47 (#0),
                    scope: scope[12],
                },
                kind: _116 = <R as string::Replacer>::replace_append(move _117, move _118, move _120) -> [return: bb63, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_120),
            StorageDead(_118),
            StorageDead(_117),
            StorageDead(_121),
            StorageDead(_119),
            StorageDead(_116),
            StorageLive(_122),
            StorageLive(_123),
            _123 = &_103,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:933:26: 933:33 (#0),
                    scope: scope[12],
                },
                kind: _122 = string::Match::<'_>::end(move _123) -> [return: bb64, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_123),
            _90 = move _122,
            StorageDead(_122),
            StorageLive(_124),
            StorageLive(_125),
            _125 = _3,
            _124 = Gt(move _125, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:934:16: 934:25 (#0),
                    scope: scope[12],
                },
                kind: switchInt(move _124) -> [0: bb69, otherwise: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_125),
            StorageLive(_126),
            StorageLive(_127),
            _127 = _101,
            StorageLive(_128),
            StorageLive(_129),
            _129 = _3,
            _130 = SubWithOverflow(_129, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:934:34: 934:43 (#0),
                    scope: scope[12],
                },
                kind: assert(!move (_130.1: bool), "attempt to compute `{} - {}`, which would overflow", move _129, const 1_usize) -> [success: bb66, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _128 = move (_130.0: usize),
            StorageDead(_129),
            _126 = Ge(move _127, move _128),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:934:29: 934:43 (#0),
                    scope: scope[12],
                },
                kind: switchInt(move _126) -> [0: bb68, otherwise: bb67],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_128),
            StorageDead(_127),
            _91 = const (),
            StorageDead(_126),
            StorageDead(_124),
            StorageDead(_103),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:937:9: 937:10 (#0),
                    scope: scope[10],
                },
                kind: drop(_102) -> [return: bb73, unwind: bb92],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_128),
            StorageDead(_127),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[12],
                },
                kind: goto -> bb70,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_125),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[12],
                },
                kind: goto -> bb70,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _95 = const (),
            StorageDead(_126),
            StorageDead(_124),
            StorageDead(_103),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:937:9: 937:10 (#0),
                    scope: scope[10],
                },
                kind: drop(_102) -> [return: bb71, unwind: bb92],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_102),
            StorageDead(_101),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:937:9: 937:10 (#748),
                    scope: scope[10],
                },
                kind: drop(_96) -> [return: bb72, unwind: bb93],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_98),
            StorageDead(_96),
            StorageDead(_95),
            _31 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:928:9: 937:10 (#748),
                    scope: scope[10],
                },
                kind: goto -> bb51,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_102),
            StorageDead(_101),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[10],
                },
                kind: goto -> bb74,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:937:9: 937:10 (#748),
                    scope: scope[10],
                },
                kind: drop(_96) -> [return: bb75, unwind: bb93],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_98),
            StorageDead(_96),
            StorageDead(_95),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:937:9: 937:10 (#748),
                    scope: scope[9],
                },
                kind: drop(_94) -> [return: bb76, unwind: bb94],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_94),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:937:9: 937:10 (#748),
                    scope: scope[9],
                },
                kind: drop(_92) -> [return: bb77, unwind: bb96],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_92),
            StorageDead(_91),
            StorageLive(_132),
            StorageLive(_133),
            _133 = &mut _87,
            StorageLive(_134),
            StorageLive(_135),
            StorageLive(_136),
            StorageLive(_137),
            _137 = &(*_2),
            StorageLive(_138),
            StorageLive(_139),
            _139 = _90,
            _138 = core::ops::RangeFrom::<usize> { start: move _139 },
            StorageDead(_139),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:938:31: 938:45 (#0),
                    scope: scope[9],
                },
                kind: _136 = <str as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _137, move _138) -> [return: bb78, unwind: bb96],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_138),
            StorageDead(_137),
            _135 = &(*_136),
            _134 = &(*_135),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:938:9: 938:46 (#0),
                    scope: scope[9],
                },
                kind: _132 = alloc::string::String::push_str(move _133, move _134) -> [return: bb79, unwind: bb96],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_134),
            StorageDead(_133),
            StorageDead(_136),
            StorageDead(_135),
            StorageDead(_132),
            StorageLive(_140),
            _140 = move _87,
            _0 = alloc::borrow::Cow::<'_, str>::Owned(move _140),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:939:23: 939:24 (#0),
                    scope: scope[9],
                },
                kind: drop(_140) -> [return: bb80, unwind: bb96],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_140),
            StorageDead(_90),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:940:5: 940:6 (#0),
                    scope: scope[7],
                },
                kind: drop(_87) -> [return: bb81, unwind: bb97],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_87),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:940:5: 940:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_75) -> [return: bb82, unwind: bb109],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_75),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:940:5: 940:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb90, unwind: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_75),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb89,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb85,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:918:9: 918:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb86, unwind: bb107],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:918:9: 918:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb87, unwind: bb108],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:918:9: 918:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb88, unwind: bb109],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb89,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:940:5: 940:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb90, unwind: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:940:6: 940:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:937:9: 937:10 (#0),
                    scope: scope[10],
                },
                kind: drop(_102) -> [return: bb92, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:937:9: 937:10 (#748),
                    scope: scope[10],
                },
                kind: drop(_96) -> [return: bb93, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:937:9: 937:10 (#748),
                    scope: scope[9],
                },
                kind: drop(_94) -> [return: bb94, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:937:9: 937:10 (#748),
                    scope: scope[9],
                },
                kind: drop(_92) -> [return: bb96, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:928:26: 928:27 (#749),
                    scope: scope[9],
                },
                kind: drop(_93) -> [return: bb96, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:940:5: 940:6 (#0),
                    scope: scope[7],
                },
                kind: drop(_87) -> [return: bb97, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:940:5: 940:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_75) -> [return: bb109, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:922:72: 922:73 (#0),
                    scope: scope[0],
                },
                kind: drop(_76) -> [return: bb109, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:922:61: 922:62 (#0),
                    scope: scope[0],
                },
                kind: drop(_77) -> [return: bb109, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:915:13: 915:14 (#743),
                    scope: scope[4],
                },
                kind: drop(_30) -> [return: bb101, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:915:13: 915:14 (#743),
                    scope: scope[4],
                },
                kind: drop(_28) -> [return: bb103, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:908:28: 908:29 (#744),
                    scope: scope[4],
                },
                kind: drop(_29) -> [return: bb103, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:918:9: 918:10 (#0),
                    scope: scope[2],
                },
                kind: drop(_23) -> [return: bb104, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:918:9: 918:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb107, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:902:72: 902:73 (#0),
                    scope: scope[1],
                },
                kind: drop(_12) -> [return: bb107, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:902:61: 902:62 (#0),
                    scope: scope[1],
                },
                kind: drop(_13) -> [return: bb107, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:918:9: 918:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb108, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:918:9: 918:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb109, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:940:5: 940:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb110, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:886:5: 940:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: alloc::borrow::Cow<'{erased}, str>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:891:10: 891:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} string::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:887:9: 887:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/string.rs:888:19: 888:26 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/string.rs:888:9: 888:17 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:888:9: 888:17 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:888:9: 888:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/string.rs:889:16: 889:21 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/string.rs:889:9: 889:14 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:889:9: 889:14 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:889:9: 889:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/string.rs:890:18: 890:19 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/string.rs:890:9: 890:16 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:890:9: 890:16 (#0),
                    },
                ),
            ),
        ),
        ty: R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:890:9: 890:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:901:9: 918:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<alloc::borrow::Cow<'{erased}, str>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:901:28: 901:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:901:28: 901:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:901:16: 901:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                regex-lite/src/string.rs:901:28: 901:46 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:901:16: 901:25 (#0),
                    },
                ),
            ),
        ),
        ty: alloc::borrow::Cow<'{erased}, str>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:901:21: 901:24 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:901:47: 918:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/string.rs:902:26: 902:73 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:902:17: 902:23 (#0),
                    },
                ),
            ),
        ),
        ty: core::iter::Peekable<core::iter::Enumerate<string::Matches<'{erased}, '{erased}>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:902:17: 902:23 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Enumerate<string::Matches<'{erased}, '{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:902:26: 902:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: string::Matches<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:902:26: 902:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} string::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:902:26: 902:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:902:41: 902:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:903:13: 905:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:903:16: 903:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<&'{erased} (usize, string::Match<'{erased}>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:903:16: 903:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} (usize, string::Match<'{erased}>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:903:16: 903:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Peekable<core::iter::Enumerate<string::Matches<'{erased}, '{erased}>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:903:16: 903:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:903:36: 905:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:904:38: 904:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/string.rs:906:27: 906:64 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:906:17: 906:24 (#0),
                    },
                ),
            ),
        ),
        ty: alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:906:17: 906:24 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:906:49: 906:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:906:49: 906:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/string.rs:907:34: 907:35 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:907:17: 907:31 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:907:17: 907:31 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:908:13: 915:14 (#743),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Peekable<core::iter::Enumerate<string::Matches<'{erased}, '{erased}>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:908:27: 908:29 (#744),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Peekable<core::iter::Enumerate<string::Matches<'{erased}, '{erased}>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:908:27: 908:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _28,
                                ),
                                regex-lite/src/string.rs:908:27: 908:29 (#744),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:908:27: 908:29 (#744),
                    },
                ),
            ),
        ),
        ty: core::iter::Peekable<core::iter::Enumerate<string::Matches<'{erased}, '{erased}>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:908:27: 908:29 (#744),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:886:5: 940:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:908:27: 908:29 (#744),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(usize, string::Match<'{erased}>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:908:27: 908:29 (#744),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Peekable<core::iter::Enumerate<string::Matches<'{erased}, '{erased}>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:908:27: 908:29 (#744),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Peekable<core::iter::Enumerate<string::Matches<'{erased}, '{erased}>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:908:27: 908:29 (#744),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:908:13: 915:14 (#743),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:908:13: 915:14 (#743),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _33,
                                ),
                                regex-lite/src/string.rs:908:27: 908:29 (#744),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:908:17: 908:23 (#745),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:908:18: 908:19 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _33,
                                ),
                                regex-lite/src/string.rs:908:27: 908:29 (#744),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:908:17: 908:23 (#745),
                    },
                ),
            ),
        ),
        ty: string::Match<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:908:21: 908:22 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:909:17: 909:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:909:17: 909:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:909:30: 909:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:909:30: 909:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:909:39: 909:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:909:31: 909:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:909:40: 909:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:909:40: 909:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:909:52: 909:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} string::Match<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:909:52: 909:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:910:17: 910:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:910:17: 910:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:910:30: 910:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:910:30: 910:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::borrow::Cow<'{erased}, str>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:910:30: 910:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::borrow::Cow<'{erased}, str>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:910:30: 910:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:911:30: 911:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} string::Match<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:911:30: 911:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/string.rs:912:17: 914:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:912:20: 912:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/string.rs:912:17: 914:18 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:912:20: 912:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/string.rs:912:17: 914:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:912:33: 912:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/string.rs:912:17: 914:18 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:912:33: 912:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/string.rs:912:17: 914:18 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:912:38: 912:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/string.rs:912:17: 914:18 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:912:38: 912:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:912:38: 912:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/string.rs:912:17: 914:18 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:912:48: 914:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:916:13: 916:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:916:13: 916:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:916:26: 916:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:916:26: 916:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:916:35: 916:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:916:27: 916:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:916:36: 916:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:916:36: 916:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:917:31: 917:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/string.rs:922:22: 922:73 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:922:13: 922:19 (#0),
                    },
                ),
            ),
        ),
        ty: core::iter::Peekable<core::iter::Enumerate<string::CaptureMatches<'{erased}, '{erased}>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:922:13: 922:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Enumerate<string::CaptureMatches<'{erased}, '{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:922:22: 922:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: string::CaptureMatches<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:922:22: 922:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} string::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:922:22: 922:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:922:41: 922:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:923:9: 925:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:923:12: 923:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<&'{erased} (usize, string::Captures<'{erased}>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:923:12: 923:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} (usize, string::Captures<'{erased}>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:923:12: 923:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Peekable<core::iter::Enumerate<string::CaptureMatches<'{erased}, '{erased}>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:923:12: 923:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:923:32: 925:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:924:34: 924:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/string.rs:926:23: 926:60 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:926:13: 926:20 (#0),
                    },
                ),
            ),
        ),
        ty: alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:926:13: 926:20 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:926:45: 926:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:926:45: 926:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/string.rs:927:30: 927:31 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:927:13: 927:27 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:927:13: 927:27 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:928:9: 937:10 (#748),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Peekable<core::iter::Enumerate<string::CaptureMatches<'{erased}, '{erased}>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:928:25: 928:27 (#749),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Peekable<core::iter::Enumerate<string::CaptureMatches<'{erased}, '{erased}>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:928:25: 928:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _92,
                                ),
                                regex-lite/src/string.rs:928:25: 928:27 (#749),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:928:25: 928:27 (#749),
                    },
                ),
            ),
        ),
        ty: core::iter::Peekable<core::iter::Enumerate<string::CaptureMatches<'{erased}, '{erased}>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:928:25: 928:27 (#749),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:928:25: 928:27 (#749),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(usize, string::Captures<'{erased}>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:928:25: 928:27 (#749),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Peekable<core::iter::Enumerate<string::CaptureMatches<'{erased}, '{erased}>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:928:25: 928:27 (#749),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Peekable<core::iter::Enumerate<string::CaptureMatches<'{erased}, '{erased}>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:928:25: 928:27 (#749),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:928:9: 937:10 (#748),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:928:9: 937:10 (#748),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _96,
                                ),
                                regex-lite/src/string.rs:928:25: 928:27 (#749),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:928:13: 928:21 (#750),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:928:14: 928:15 (#0),
            scope: scope[10],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _96,
                                ),
                                regex-lite/src/string.rs:928:25: 928:27 (#749),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:928:13: 928:21 (#750),
                    },
                ),
            ),
        ),
        ty: string::Captures<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:928:17: 928:20 (#0),
            scope: scope[10],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/string.rs:930:21: 930:40 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:930:17: 930:18 (#0),
                    },
                ),
            ),
        ),
        ty: string::Match<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:930:17: 930:18 (#0),
            scope: scope[11],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<string::Match<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:930:21: 930:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} string::Captures<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:930:21: 930:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:931:13: 931:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:931:13: 931:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:931:26: 931:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:931:26: 931:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:931:35: 931:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:931:27: 931:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:931:36: 931:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:931:36: 931:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:931:48: 931:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} string::Match<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:931:48: 931:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:932:13: 932:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:932:13: 932:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} string::Captures<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:932:32: 932:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} string::Captures<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:932:32: 932:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:932:38: 932:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:932:38: 932:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:933:26: 933:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} string::Match<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:933:26: 933:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/string.rs:934:13: 936:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:934:16: 934:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/string.rs:934:13: 936:14 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:934:16: 934:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/string.rs:934:13: 936:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:934:29: 934:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/string.rs:934:13: 936:14 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:934:29: 934:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/string.rs:934:13: 936:14 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:934:34: 934:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/string.rs:934:13: 936:14 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:934:34: 934:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:934:34: 934:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/string.rs:934:13: 936:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:934:44: 936:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:938:9: 938:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:938:9: 938:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:938:22: 938:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:938:22: 938:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:938:31: 938:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:938:23: 938:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:938:32: 938:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:938:32: 938:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:939:20: 939:23 (#0),
            scope: scope[0],
        },
    },
]