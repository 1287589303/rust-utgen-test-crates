[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
            StorageLive(_6),
            _6 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:859:12: 859:29 (#0),
                    scope: scope[0],
                },
                kind: _4 = pikevm::SparseSet::contains(move _5, move _6) -> [return: bb1, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:859:12: 859:29 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            _0 = const false,
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:877:6: 877:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            _3 = const (),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:863:21: 863:31 (#0),
                    scope: scope[0],
                },
                kind: _8 = pikevm::SparseSet::len(move _9) -> [return: bb4, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            FakeRead(ForLet(None), _8),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = _8,
            StorageLive(_13),
            StorageLive(_14),
            _14 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:865:21: 865:36 (#0),
                    scope: scope[1],
                },
                kind: _13 = pikevm::SparseSet::capacity(move _14) -> [return: bb5, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            _11 = Lt(move _12, move _13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:865:13: 865:36 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _11) -> [0: bb7, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            _10 = const (),
            StorageDead(_11),
            StorageDead(_10),
            StorageLive(_35),
            _35 = _2,
            StorageLive(_36),
            StorageLive(_37),
            _37 = &mut ((*_1).1: alloc::vec::Vec<u32>),
            StorageLive(_38),
            _38 = _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:871:19: 871:26 (#0),
                    scope: scope[1],
                },
                kind: _36 = <alloc::vec::Vec<u32> as core::ops::IndexMut<usize>>::index_mut(move _37, move _38) -> [return: bb13, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = [const "", const " exceeds capacity of ", const " when inserting "],
            _19 = &_20,
            _18 = &(*_19),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            _26 = &_8,
            _25 = &(*_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:866:14: 866:18 (#207),
                    scope: scope[1],
                },
                kind: _24 = core::fmt::rt::Argument::<'_>::new_debug::<usize>(move _25) -> [return: bb8, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            _31 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:868:13: 868:28 (#0),
                    scope: scope[1],
                },
                kind: _30 = pikevm::SparseSet::capacity(move _31) -> [return: bb9, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            _29 = &_30,
            _28 = &(*_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:866:39: 866:43 (#207),
                    scope: scope[1],
                },
                kind: _27 = core::fmt::rt::Argument::<'_>::new_debug::<usize>(move _28) -> [return: bb10, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageLive(_32),
            StorageLive(_33),
            StorageLive(_34),
            _34 = &_2,
            _33 = &(*_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:866:59: 866:63 (#207),
                    scope: scope[1],
                },
                kind: _32 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _33) -> [return: bb11, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            _23 = [move _24, move _27, move _32],
            StorageDead(_32),
            StorageDead(_27),
            StorageDead(_24),
            _22 = &_23,
            _21 = &(*_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38: 108:72 (#207),
                    scope: scope[1],
                },
                kind: _17 = core::fmt::Arguments::<'_>::new_v1::<3, 3>(move _18, move _21) -> [return: bb12, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9: 108:73 (#206),
                    scope: scope[1],
                },
                kind: _16 = core::panicking::panic_fmt(move _17) -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            StorageDead(_37),
            (*_36) = move _35,
            StorageDead(_35),
            StorageDead(_36),
            StorageLive(_39),
            StorageLive(_40),
            StorageLive(_41),
            _41 = _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:874:38: 874:58 (#0),
                    scope: scope[1],
                },
                kind: _40 = <u32 as core::convert::TryFrom<usize>>::try_from(move _41) -> [return: bb14, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:874:38: 874:67 (#0),
                    scope: scope[1],
                },
                kind: _39 = core::result::Result::<u32, core::num::TryFromIntError>::unwrap(move _40) -> [return: bb15, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageLive(_42),
            StorageLive(_43),
            _43 = &mut ((*_1).2: alloc::vec::Vec<u32>),
            StorageLive(_44),
            StorageLive(_45),
            _45 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:874:21: 874:34 (#0),
                    scope: scope[1],
                },
                kind: _44 = <u32 as int::U32>::as_usize(move _45) -> [return: bb16, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:874:20: 874:35 (#0),
                    scope: scope[1],
                },
                kind: _42 = <alloc::vec::Vec<u32> as core::ops::IndexMut<usize>>::index_mut(move _43, move _44) -> [return: bb17, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            StorageDead(_43),
            (*_42) = move _39,
            StorageDead(_39),
            StorageDead(_42),
            _46 = AddWithOverflow(((*_1).0: usize), const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:875:9: 875:22 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_46.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).0: usize), const 1_usize) -> [success: bb18, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).0: usize) = move (_46.0: usize),
            _0 = const true,
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:877:6: 877:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:877:6: 877:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:858:5: 877:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:858:42: 858:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut pikevm::SparseSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:858:15: 858:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/pikevm.rs:858:30: 858:37 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/pikevm.rs:858:26: 858:28 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/pikevm.rs:858:26: 858:28 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:858:26: 858:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:859:9: 861:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:859:12: 859:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} pikevm::SparseSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:859:12: 859:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:859:26: 859:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:859:30: 861:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/pikevm.rs:863:21: 863:31 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/pikevm.rs:863:13: 863:18 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:863:13: 863:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} pikevm::SparseSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:863:21: 863:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:864:9: 870:10 (#204),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:865:13: 865:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:865:13: 865:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:865:21: 865:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} pikevm::SparseSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:865:21: 865:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:105:21: 109:6 (#206),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:105:21: 109:6 (#206),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9: 108:73 (#206),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::fmt::Arguments<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38: 108:72 (#207),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 3_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:866:13: 866:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 3_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:866:13: 866:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [&'{erased} str; 3_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:866:13: 866:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::fmt::rt::Argument<'{erased}>; 3_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38: 108:72 (#207),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::fmt::rt::Argument<'{erased}>; 3_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38: 108:72 (#207),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [core::fmt::rt::Argument<'{erased}>; 3_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38: 108:72 (#207),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::fmt::rt::Argument<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:866:14: 866:18 (#207),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:867:13: 867:18 (#207),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:867:13: 867:18 (#207),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::fmt::rt::Argument<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:866:39: 866:43 (#207),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:868:13: 868:28 (#207),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:868:13: 868:28 (#207),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:868:13: 868:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} pikevm::SparseSet,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:868:13: 868:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::fmt::rt::Argument<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:866:59: 866:63 (#207),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:869:13: 869:15 (#207),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:869:13: 869:15 (#207),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:871:29: 871:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:871:19: 871:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::vec::Vec<u32, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:871:9: 871:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:871:20: 871:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:874:38: 874:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<u32, core::num::TryFromIntError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:874:38: 874:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:874:52: 874:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:874:20: 874:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::vec::Vec<u32, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:874:9: 874:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:874:21: 874:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:874:21: 874:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:875:9: 875:22 (#0),
            scope: scope[0],
        },
    },
]