[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &((*_1).0: alloc::sync::Arc<pikevm::PikeVM>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1438:19: 1438:36 (#0),
                    scope: scope[0],
                },
                kind: _8 = <alloc::sync::Arc<pikevm::PikeVM> as core::ops::Deref>::deref(move _9) -> [return: bb1, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = &(*_8),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1438:19: 1438:36 (#0),
                    scope: scope[0],
                },
                kind: _6 = pikevm::PikeVM::nfa(move _7) -> [return: bb2, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = &(*_6),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1438:19: 1438:48 (#0),
                    scope: scope[0],
                },
                kind: _4 = nfa::NFA::group_len(move _5) -> [return: bb3, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1438:19: 1438:63 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::num::<impl usize>::checked_mul(move _4, const 2_usize) -> [return: bb4, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1438:19: 1438:72 (#0),
                    scope: scope[0],
                },
                kind: _2 = core::option::Option::<usize>::unwrap(move _3) -> [return: bb5, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageDead(_8),
            StorageDead(_6),
            StorageLive(_10),
            StorageLive(_11),
            _11 = core::option::Option::<int::NonMaxUsize>::None,
            StorageLive(_12),
            _12 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:47:9: 47:42 (#212),
                    scope: scope[1],
                },
                kind: _10 = alloc::vec::from_elem::<core::option::Option<int::NonMaxUsize>>(move _11, move _12) -> [return: bb6, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            _0 = string::CaptureLocations(move _10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1439:41: 1439:42 (#0),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb7, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1440:6: 1440:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1436:5: 1440:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: string::CaptureLocations,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1436:40: 1436:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} string::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1436:30: 1436:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/string.rs:1438:19: 1438:72 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:1438:13: 1438:16 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1438:13: 1438:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1438:19: 1438:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1438:19: 1438:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1438:19: 1438:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1438:19: 1438:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} pikevm::PikeVM,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1438:19: 1438:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} pikevm::PikeVM,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1438:19: 1438:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::sync::Arc<pikevm::PikeVM, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1438:19: 1438:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: alloc::vec::Vec<core::option::Option<int::NonMaxUsize>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:47:9: 47:42 (#212),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:1439:9: 1439:42 (#0),
                },
            ),
        ),
        ty: core::option::Option<int::NonMaxUsize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1439:31: 1439:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:1439:9: 1439:42 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1439:37: 1439:40 (#0),
            scope: scope[0],
        },
    },
]