[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = &((*_1).1: pool::Pool<pikevm::Cache, alloc::boxed::Box<dyn core::ops::Fn() -> pikevm::Cache + core::marker::Send + core::marker::Sync + core::panic::RefUnwindSafe + core::panic::UnwindSafe>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1106:25: 1106:40 (#0),
                    scope: scope[0],
                },
                kind: _4 = pool::Pool::<pikevm::Cache, alloc::boxed::Box<dyn core::ops::Fn() -> pikevm::Cache + core::marker::Send + core::marker::Sync + core::panic::RefUnwindSafe + core::panic::UnwindSafe>>::get(move _5) -> [return: bb1, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageLive(_6),
            StorageLive(_7),
            _7 = core::option::Option::<int::NonMaxUsize>::None,
            StorageLive(_8),
            _8 = core::option::Option::<int::NonMaxUsize>::None,
            _6 = [move _7, move _8],
            StorageDead(_8),
            StorageDead(_7),
            FakeRead(ForLet(None), _6),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &((*_1).0: alloc::sync::Arc<pikevm::PikeVM>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1108:23: 1115:10 (#0),
                    scope: scope[2],
                },
                kind: _11 = <alloc::sync::Arc<pikevm::PikeVM> as core::ops::Deref>::deref(move _12) -> [return: bb2, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = &(*_11),
            StorageDead(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &mut _4,
            _15 = &mut (*_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1109:13: 1109:23 (#0),
                    scope: scope[2],
                },
                kind: _14 = <pool::PoolGuard<'_, pikevm::Cache, alloc::boxed::Box<dyn core::ops::Fn() -> pikevm::Cache + core::marker::Send + core::marker::Sync + core::panic::RefUnwindSafe + core::panic::UnwindSafe>> as core::ops::DerefMut>::deref_mut(move _15) -> [return: bb3, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _13 = &mut (*_14),
            StorageDead(_15),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1110:13: 1110:32 (#0),
                    scope: scope[2],
                },
                kind: _18 = core::str::<impl str>::as_bytes(move _19) -> [return: bb4, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _17 = &(*_18),
            StorageDead(_19),
            StorageLive(_20),
            _20 = _3,
            StorageLive(_21),
            StorageLive(_22),
            _22 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1112:13: 1112:27 (#0),
                    scope: scope[2],
                },
                kind: _21 = core::str::<impl str>::len(move _22) -> [return: bb5, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            _25 = &mut _6,
            _24 = &mut (*_25),
            _23 = move _24 as &mut [core::option::Option<int::NonMaxUsize>] (PointerCoercion(Unsize)),
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1108:23: 1115:10 (#0),
                    scope: scope[2],
                },
                kind: _9 = pikevm::PikeVM::search(move _10, move _13, move _17, move _20, move _21, const false, move _23) -> [return: bb6, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_21),
            StorageDead(_20),
            StorageDead(_17),
            StorageDead(_13),
            StorageDead(_10),
            FakeRead(ForLet(None), _9),
            StorageDead(_25),
            StorageDead(_18),
            StorageDead(_16),
            StorageDead(_14),
            StorageDead(_11),
            StorageLive(_26),
            StorageLive(_27),
            _27 = _9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1116:13: 1116:20 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _27) -> [0: bb7, otherwise: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::option::Option::<string::Match<'_>>::None,
            StorageDead(_27),
            StorageDead(_26),
            StorageDead(_9),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1121:5: 1121:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb17, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _26 = const (),
            StorageDead(_27),
            StorageDead(_26),
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            _35 = const 0_usize,
            _36 = Len(_6),
            _37 = Lt(_35, _36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1119:29: 1119:37 (#0),
                    scope: scope[3],
                },
                kind: assert(move _37, "index out of bounds: the length is {} but the index is {}", move _36, _35) -> [success: bb9, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _34 = _6[_35],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1119:29: 1119:46 (#0),
                    scope: scope[3],
                },
                kind: _33 = core::option::Option::<int::NonMaxUsize>::unwrap(move _34) -> [return: bb10, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1119:29: 1119:52 (#0),
                    scope: scope[3],
                },
                kind: _32 = int::NonMaxUsize::get(move _33) -> [return: bb11, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageLive(_38),
            StorageLive(_39),
            StorageLive(_40),
            StorageLive(_41),
            _41 = const 1_usize,
            _42 = Len(_6),
            _43 = Lt(_41, _42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1119:54: 1119:62 (#0),
                    scope: scope[3],
                },
                kind: assert(move _43, "index out of bounds: the length is {} but the index is {}", move _42, _41) -> [success: bb12, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _40 = _6[_41],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1119:54: 1119:71 (#0),
                    scope: scope[3],
                },
                kind: _39 = core::option::Option::<int::NonMaxUsize>::unwrap(move _40) -> [return: bb13, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1119:54: 1119:77 (#0),
                    scope: scope[3],
                },
                kind: _38 = int::NonMaxUsize::get(move _39) -> [return: bb14, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            _31 = (move _32, move _38),
            StorageDead(_38),
            StorageDead(_32),
            PlaceMention(_31),
            StorageLive(_29),
            _29 = (_31.0: usize),
            StorageLive(_30),
            _30 = (_31.1: usize),
            StorageDead(_41),
            StorageDead(_35),
            StorageDead(_31),
            StorageLive(_44),
            StorageLive(_45),
            _45 = &(*_2),
            StorageLive(_46),
            _46 = _29,
            StorageLive(_47),
            _47 = _30,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1120:14: 1120:46 (#0),
                    scope: scope[4],
                },
                kind: _44 = string::Match::<'_>::new(move _45, move _46, move _47) -> [return: bb15, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            StorageDead(_46),
            StorageDead(_45),
            _0 = core::option::Option::<string::Match<'_>>::Some(move _44),
            StorageDead(_44),
            StorageDead(_30),
            StorageDead(_29),
            StorageDead(_9),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1121:5: 1121:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb16, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1121:6: 1121:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1121:6: 1121:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1121:6: 1121:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1121:5: 1121:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb20, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1101:5: 1121:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<string::Match<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1105:10: 1105:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} string::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1102:9: 1102:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/string.rs:1103:19: 1103:26 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/string.rs:1103:9: 1103:17 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:1103:9: 1103:17 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1103:9: 1103:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/string.rs:1104:16: 1104:21 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/string.rs:1104:9: 1104:14 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:1104:9: 1104:14 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1104:9: 1104:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/string.rs:1106:25: 1106:40 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:1106:13: 1106:22 (#0),
                    },
                ),
            ),
        ),
        ty: pool::PoolGuard<'{erased}, pikevm::Cache, alloc::boxed::Box<dyn [Binder { value: Trait(core::ops::Fn<()>), bound_vars: [] }, Binder { value: Projection(Output = pikevm::Cache), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:3316 ~ core[a245]::marker::Sync)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:32818 ~ core[a245]::marker::Send)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42674 ~ core[a245]::panic::unwind_safe::RefUnwindSafe)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42673 ~ core[a245]::panic::unwind_safe::UnwindSafe)), bound_vars: [] }] + '{erased}, alloc::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1106:13: 1106:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} pool::Pool<pikevm::Cache, alloc::boxed::Box<dyn [Binder { value: Trait(core::ops::Fn<()>), bound_vars: [] }, Binder { value: Projection(Output = pikevm::Cache), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:3316 ~ core[a245]::marker::Sync)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:32818 ~ core[a245]::marker::Send)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42674 ~ core[a245]::panic::unwind_safe::RefUnwindSafe)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42673 ~ core[a245]::panic::unwind_safe::UnwindSafe)), bound_vars: [] }] + '{erased}, alloc::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1106:25: 1106:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/string.rs:1107:25: 1107:37 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:1107:13: 1107:22 (#0),
                    },
                ),
            ),
        ),
        ty: [core::option::Option<int::NonMaxUsize>; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1107:13: 1107:22 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<int::NonMaxUsize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1107:26: 1107:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<int::NonMaxUsize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1107:32: 1107:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/string.rs:1108:23: 1115:10 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:1108:13: 1108:20 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1108:13: 1108:20 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} pikevm::PikeVM,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1108:23: 1108:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} pikevm::PikeVM,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1108:23: 1115:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::sync::Arc<pikevm::PikeVM, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1108:23: 1108:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut pikevm::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1109:13: 1109:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut pikevm::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1109:13: 1109:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut pool::PoolGuard<'{erased}, pikevm::Cache, alloc::boxed::Box<dyn [Binder { value: Trait(core::ops::Fn<()>), bound_vars: [] }, Binder { value: Projection(Output = pikevm::Cache), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:3316 ~ core[a245]::marker::Sync)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:32818 ~ core[a245]::marker::Send)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42674 ~ core[a245]::panic::unwind_safe::RefUnwindSafe)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42673 ~ core[a245]::panic::unwind_safe::UnwindSafe)), bound_vars: [] }] + '{erased}, alloc::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1109:13: 1109:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut pool::PoolGuard<'{erased}, pikevm::Cache, alloc::boxed::Box<dyn [Binder { value: Trait(core::ops::Fn<()>), bound_vars: [] }, Binder { value: Projection(Output = pikevm::Cache), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:3316 ~ core[a245]::marker::Sync)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:32818 ~ core[a245]::marker::Send)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42674 ~ core[a245]::panic::unwind_safe::RefUnwindSafe)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42673 ~ core[a245]::panic::unwind_safe::UnwindSafe)), bound_vars: [] }] + '{erased}, alloc::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1109:13: 1109:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1110:13: 1110:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1110:13: 1110:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1110:13: 1110:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1111:13: 1111:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1112:13: 1112:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1112:13: 1112:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [core::option::Option<int::NonMaxUsize>],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1114:13: 1114:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [core::option::Option<int::NonMaxUsize>; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1114:13: 1114:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [core::option::Option<int::NonMaxUsize>; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1114:13: 1114:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1116:9: 1118:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1116:13: 1116:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1116:21: 1118:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _31,
                                ),
                                regex-lite/src/string.rs:1119:28: 1119:78 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:1119:13: 1119:25 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1119:14: 1119:19 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _31,
                                ),
                                regex-lite/src/string.rs:1119:28: 1119:78 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:1119:13: 1119:25 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1119:21: 1119:24 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, usize),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1119:28: 1119:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1119:29: 1119:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: int::NonMaxUsize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1119:29: 1119:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<int::NonMaxUsize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1119:29: 1119:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1119:35: 1119:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1119:29: 1119:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1119:29: 1119:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1119:54: 1119:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: int::NonMaxUsize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1119:54: 1119:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<int::NonMaxUsize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1119:54: 1119:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1119:60: 1119:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1119:54: 1119:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1119:54: 1119:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: string::Match<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1120:14: 1120:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:1120:9: 1120:47 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1120:25: 1120:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:1120:9: 1120:47 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1120:35: 1120:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:1120:9: 1120:47 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1120:42: 1120:45 (#0),
            scope: scope[0],
        },
    },
]