[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            PlaceMention((*_1)),
            _3 = discriminant((*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:374:9: 374:20 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb6, 1: bb6, 2: bb6, 3: bb6, 4: bb2, 5: bb3, 6: bb4, 7: bb5, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), (*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:374:15: 374:20 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:379:13: 379:60 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb8, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:380:13: 380:54 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:381:13: 381:38 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb12, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = &(((*_1) as Alternation).0: alloc::vec::Vec<hir::Hir>),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &(*_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:374:9: 383:10 (#0),
                    scope: scope[4],
                },
                kind: _17 = <alloc::vec::Vec<hir::Hir> as core::ops::Deref>::deref(move _18) -> [return: bb14, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:375:13: 378:31 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb7, imaginary: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = [],
            _5 = &_6,
            _4 = &(*_5),
            _2 = move _4 as &[hir::Hir] (PointerCoercion(Unsize)),
            StorageDead(_4),
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:378:37: 378:38 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            _7 = &((((*_1) as Repetition).0: hir::Repetition).3: alloc::boxed::Box<hir::Hir>),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(*(*_7)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:379:64: 379:77 (#0),
                    scope: scope[1],
                },
                kind: _8 = core::slice::from_ref::<hir::Hir>(move _9) -> [return: bb9, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = &(*_8),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:379:76: 379:77 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = &((((*_1) as Capture).0: hir::Capture).2: alloc::boxed::Box<hir::Hir>),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &(*(*_10)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:380:58: 380:71 (#0),
                    scope: scope[2],
                },
                kind: _11 = core::slice::from_ref::<hir::Hir>(move _12) -> [return: bb11, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = &(*_11),
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:380:70: 380:71 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            _13 = &(((*_1) as Concat).0: alloc::vec::Vec<hir::Hir>),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &(*_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:374:9: 383:10 (#0),
                    scope: scope[3],
                },
                kind: _14 = <alloc::vec::Vec<hir::Hir> as core::ops::Deref>::deref(move _15) -> [return: bb13, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = &(*_14),
            StorageDead(_15),
            StorageDead(_14),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:381:45: 381:46 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = &(*_17),
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:382:50: 382:51 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = &(*_2),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:384:6: 384:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:371:5: 384:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:371:23: 371:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} hir::HirKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:371:13: 371:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/mod.rs:374:9: 383:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:374:9: 383:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:375:13: 375:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/mod.rs:374:9: 383:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [hir::Hir; 0_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:378:35: 378:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/mod.rs:374:9: 383:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [hir::Hir; 0_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:378:35: 378:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/mod.rs:374:9: 383:10 (#0),
                },
            ),
        ),
        ty: [hir::Hir; 0_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:378:36: 378:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-lite/src/hir/mod.rs:374:15: 374:20 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/mod.rs:379:13: 379:60 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} alloc::boxed::Box<hir::Hir, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:379:46: 379:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/mod.rs:374:9: 383:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:379:64: 379:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/mod.rs:374:9: 383:10 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:379:73: 379:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-lite/src/hir/mod.rs:374:15: 374:20 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/mod.rs:380:13: 380:54 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} alloc::boxed::Box<hir::Hir, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:380:40: 380:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/mod.rs:374:9: 383:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:380:58: 380:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/mod.rs:374:9: 383:10 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:380:67: 380:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-lite/src/hir/mod.rs:374:15: 374:20 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/mod.rs:381:13: 381:38 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} alloc::vec::Vec<hir::Hir, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:381:29: 381:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/mod.rs:374:9: 383:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:374:9: 383:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/mod.rs:374:9: 383:10 (#0),
                },
            ),
        ),
        ty: &'{erased} alloc::vec::Vec<hir::Hir, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:381:42: 381:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                regex-lite/src/hir/mod.rs:374:15: 374:20 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/mod.rs:382:13: 382:43 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} alloc::vec::Vec<hir::Hir, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:382:34: 382:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/mod.rs:374:9: 383:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:374:9: 383:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/mod.rs:374:9: 383:10 (#0),
                },
            ),
        ),
        ty: &'{erased} alloc::vec::Vec<hir::Hir, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:382:47: 382:51 (#0),
            scope: scope[0],
        },
    },
]