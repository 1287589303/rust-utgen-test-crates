[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:819:20: 819:31 (#0),
                    scope: scope[0],
                },
                kind: _5 = hir::parse::Parser::<'_>::char(move _6) -> [return: bb1, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            _4 = &_5,
            StorageLive(_7),
            StorageLive(_8),
            _8 = const '(',
            _7 = &_8,
            _3 = (move _4, move _7),
            StorageDead(_7),
            StorageDead(_4),
            PlaceMention(_3),
            StorageLive(_9),
            _9 = (_3.0: &char),
            StorageLive(_10),
            _10 = (_3.1: &char),
            StorageLive(_11),
            StorageLive(_12),
            _12 = (*_9),
            StorageLive(_13),
            _13 = (*_10),
            _11 = Eq(move _12, move _13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46 (#37),
                    scope: scope[1],
                },
                kind: switchInt(move _11) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            _2 = const (),
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_5),
            StorageDead(_3),
            StorageDead(_2),
            StorageLive(_23),
            StorageLive(_24),
            _24 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:820:9: 820:35 (#0),
                    scope: scope[0],
                },
                kind: _23 = hir::parse::Parser::<'_>::bump_and_bump_space(move _24) -> [return: bb4, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            StorageLive(_15),
            _15 = core::panicking::AssertKind::Eq,
            FakeRead(ForLet(None), _15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = move _15,
            StorageLive(_18),
            StorageLive(_19),
            _19 = &(*_9),
            _18 = &(*_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &(*_10),
            _20 = &(*_21),
            StorageLive(_22),
            _22 = core::option::Option::<core::fmt::Arguments<'_>>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114 (#37),
                    scope: scope[2],
                },
                kind: _16 = core::panicking::assert_failed::<char, char>(move _17, move _18, move _20, move _22) -> bb138,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageDead(_23),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            _27 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:821:12: 821:39 (#0),
                    scope: scope[0],
                },
                kind: _26 = hir::parse::Parser::<'_>::is_lookaround_prefix(move _27) -> [return: bb5, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:821:12: 821:39 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _26) -> [0: bb8, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageLive(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:822:24: 822:56 (#0),
                    scope: scope[0],
                },
                kind: _29 = error::Error::new(const hir::parse::ERR_LOOK_UNSUPPORTED) -> [return: bb7, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::result::Result::<core::option::Option<hir::Hir>, error::Error>::Err(move _29),
            StorageDead(_29),
            StorageDead(_26),
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb118,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            _25 = const (),
            StorageDead(_26),
            StorageDead(_25),
            StorageLive(_30),
            StorageLive(_31),
            _31 = &(*_1),
            StorageLive(_32),
            StorageLive(_33),
            _33 = const "?P<",
            _32 = &(*_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:824:12: 824:31 (#0),
                    scope: scope[0],
                },
                kind: _30 = hir::parse::Parser::<'_>::bump_if(move _31, move _32) -> [return: bb9, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:824:12: 824:31 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _30) -> [0: bb11, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_32),
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:824:54: 830:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_32),
            StorageDead(_31),
            StorageLive(_34),
            StorageLive(_35),
            _35 = &(*_1),
            StorageLive(_36),
            StorageLive(_37),
            _37 = const "?<",
            _36 = &(*_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:824:35: 824:53 (#0),
                    scope: scope[0],
                },
                kind: _34 = hir::parse::Parser::<'_>::bump_if(move _35, move _36) -> [return: bb12, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:824:35: 824:53 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _34) -> [0: bb49, otherwise: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageDead(_36),
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:824:54: 830:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_38),
            StorageLive(_39),
            StorageLive(_40),
            StorageLive(_41),
            _41 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:825:25: 825:50 (#0),
                    scope: scope[0],
                },
                kind: _40 = hir::parse::Parser::<'_>::next_capture_index(move _41) -> [return: bb15, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:825:25: 825:51 (#357),
                    scope: scope[0],
                },
                kind: _39 = <core::result::Result<u32, error::Error> as core::ops::Try>::branch(move _40) -> [return: bb16, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            PlaceMention(_39),
            _42 = discriminant(_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:825:25: 825:51 (#357),
                    scope: scope[0],
                },
                kind: switchInt(move _42) -> [0: bb19, 1: bb18, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:825:25: 825:51 (#357),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:825:50: 825:51 (#358),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb20, imaginary: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_46),
            _46 = ((_39 as Continue).0: u32),
            _38 = _46,
            StorageDead(_46),
            FakeRead(ForLet(None), _38),
            StorageDead(_39),
            StorageLive(_47),
            StorageLive(_48),
            StorageLive(_49),
            StorageLive(_50),
            StorageLive(_51),
            StorageLive(_52),
            _52 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:826:39: 826:64 (#0),
                    scope: scope[3],
                },
                kind: _51 = hir::parse::Parser::<'_>::parse_capture_name(move _52) -> [return: bb22, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_43),
            _43 = move ((_39 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_45),
            _45 = move _43,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:825:25: 825:51 (#357),
                    scope: scope[5],
                },
                kind: _0 = <core::result::Result<core::option::Option<hir::Hir>, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _45) -> [return: bb21, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            StorageDead(_43),
            StorageDead(_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb116,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:826:39: 826:65 (#359),
                    scope: scope[3],
                },
                kind: _50 = <core::result::Result<&str, error::Error> as core::ops::Try>::branch(move _51) -> [return: bb23, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
            PlaceMention(_50),
            _53 = discriminant(_50),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:826:39: 826:65 (#359),
                    scope: scope[3],
                },
                kind: switchInt(move _53) -> [0: bb26, 1: bb25, otherwise: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _50),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:826:39: 826:65 (#359),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:826:64: 826:65 (#360),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb27, imaginary: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_57),
            _57 = ((_50 as Continue).0: &str),
            _49 = _57,
            StorageDead(_57),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:826:29: 826:66 (#0),
                    scope: scope[3],
                },
                kind: _48 = <alloc::boxed::Box<str> as core::convert::From<&str>>::from(move _49) -> [return: bb29, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_54),
            _54 = move ((_50 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_56),
            _56 = move _54,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:826:39: 826:65 (#359),
                    scope: scope[10],
                },
                kind: _0 = <core::result::Result<core::option::Option<hir::Hir>, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _56) -> [return: bb28, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
            StorageDead(_54),
            StorageDead(_49),
            StorageDead(_48),
            StorageDead(_50),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb115,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_49),
            _47 = core::option::Option::<alloc::boxed::Box<str>>::Some(move _48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:826:66: 826:67 (#0),
                    scope: scope[3],
                },
                kind: drop(_48) -> [return: bb30, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
            FakeRead(ForLet(None), _47),
            StorageDead(_50),
            StorageLive(_58),
            StorageLive(_59),
            StorageLive(_60),
            StorageLive(_61),
            StorageLive(_62),
            _62 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:827:32: 827:50 (#0),
                    scope: scope[8],
                },
                kind: _61 = hir::parse::Parser::<'_>::parse_inner(move _62) -> [return: bb31, unwind: bb137],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:827:32: 827:51 (#361),
                    scope: scope[8],
                },
                kind: _60 = <core::result::Result<hir::Hir, error::Error> as core::ops::Try>::branch(move _61) -> [return: bb32, unwind: bb136],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_61),
            PlaceMention(_60),
            _63 = discriminant(_60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:827:32: 827:51 (#361),
                    scope: scope[8],
                },
                kind: switchInt(move _63) -> [0: bb35, 1: bb34, otherwise: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:827:32: 827:51 (#361),
                    scope: scope[8],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:827:50: 827:51 (#362),
                    scope: scope[8],
                },
                kind: falseEdge -> [real: bb36, imaginary: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_67),
            _67 = move ((_60 as Continue).0: hir::Hir),
            _59 = move _67,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:827:50: 827:51 (#0),
                    scope: scope[8],
                },
                kind: drop(_67) -> [return: bb38, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_64),
            _64 = move ((_60 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_66),
            _66 = move _64,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:827:32: 827:51 (#361),
                    scope: scope[15],
                },
                kind: _0 = <core::result::Result<core::option::Option<hir::Hir>, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _66) -> [return: bb37, unwind: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_66),
            StorageDead(_64),
            StorageDead(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:827:52: 827:53 (#0),
                    scope: scope[8],
                },
                kind: drop(_60) -> [return: bb114, unwind: bb137],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_67),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:827:23: 827:52 (#0),
                    scope: scope[8],
                },
                kind: _58 = alloc::boxed::Box::<hir::Hir>::new(move _59) -> [return: bb39, unwind: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
            FakeRead(ForLet(None), _58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:827:52: 827:53 (#0),
                    scope: scope[8],
                },
                kind: drop(_60) -> [return: bb40, unwind: bb133],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
            StorageLive(_68),
            StorageLive(_69),
            _69 = _38,
            StorageLive(_70),
            _70 = move _47,
            StorageLive(_71),
            _71 = move _58,
            _68 = hir::Capture { index: move _69, name: move _70, sub: move _71 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:828:55: 828:56 (#0),
                    scope: scope[13],
                },
                kind: drop(_71) -> [return: bb41, unwind: bb132],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:828:55: 828:56 (#0),
                    scope: scope[13],
                },
                kind: drop(_70) -> [return: bb42, unwind: bb133],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_70),
            StorageDead(_69),
            FakeRead(ForLet(None), _68),
            StorageLive(_72),
            StorageLive(_73),
            StorageLive(_74),
            _74 = move _68,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:829:21: 829:38 (#0),
                    scope: scope[18],
                },
                kind: _73 = hir::Hir::capture(move _74) -> [return: bb43, unwind: bb130],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_74),
            _72 = core::option::Option::<hir::Hir>::Some(move _73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:829:38: 829:39 (#0),
                    scope: scope[18],
                },
                kind: drop(_73) -> [return: bb44, unwind: bb129],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_73),
            _0 = core::result::Result::<core::option::Option<hir::Hir>, error::Error>::Ok(move _72),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:829:39: 829:40 (#0),
                    scope: scope[18],
                },
                kind: drop(_72) -> [return: bb45, unwind: bb131],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_72),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:830:9: 830:10 (#0),
                    scope: scope[13],
                },
                kind: drop(_68) -> [return: bb46, unwind: bb133],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_68),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:830:9: 830:10 (#0),
                    scope: scope[8],
                },
                kind: drop(_58) -> [return: bb47, unwind: bb137],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:830:9: 830:10 (#0),
                    scope: scope[3],
                },
                kind: drop(_47) -> [return: bb48, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:824:9: 854:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb109,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageDead(_36),
            StorageDead(_35),
            StorageLive(_75),
            StorageLive(_76),
            _76 = &(*_1),
            StorageLive(_77),
            StorageLive(_78),
            _78 = const "?",
            _77 = &(*_78),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:830:19: 830:36 (#0),
                    scope: scope[0],
                },
                kind: _75 = hir::parse::Parser::<'_>::bump_if(move _76, move _77) -> [return: bb50, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:830:19: 830:36 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _75) -> [0: bb83, otherwise: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_78),
            StorageDead(_77),
            StorageDead(_76),
            StorageLive(_79),
            StorageLive(_80),
            StorageLive(_81),
            _81 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:831:16: 831:30 (#0),
                    scope: scope[0],
                },
                kind: _80 = hir::parse::Parser::<'_>::is_done(move _81) -> [return: bb52, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:831:16: 831:30 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _80) -> [0: bb55, otherwise: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_81),
            StorageLive(_83),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:832:28: 832:67 (#0),
                    scope: scope[0],
                },
                kind: _83 = error::Error::new(const hir::parse::ERR_UNCLOSED_GROUP_QUESTION) -> [return: bb54, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::result::Result::<core::option::Option<hir::Hir>, error::Error>::Err(move _83),
            StorageDead(_83),
            StorageDead(_80),
            StorageDead(_79),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb113,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_81),
            _79 = const (),
            StorageDead(_80),
            StorageDead(_79),
            StorageLive(_84),
            StorageLive(_85),
            _85 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:834:25: 834:35 (#0),
                    scope: scope[0],
                },
                kind: _84 = hir::parse::Parser::<'_>::pos(move _85) -> [return: bb56, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_85),
            FakeRead(ForLet(None), _84),
            StorageLive(_86),
            StorageLive(_87),
            StorageLive(_88),
            StorageLive(_89),
            _89 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:836:40: 836:58 (#0),
                    scope: scope[19],
                },
                kind: _88 = hir::parse::Parser::<'_>::parse_flags(move _89) -> [return: bb57, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_89),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:836:40: 836:59 (#365),
                    scope: scope[19],
                },
                kind: _87 = <core::result::Result<hir::Flags, error::Error> as core::ops::Try>::branch(move _88) -> [return: bb58, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_88),
            PlaceMention(_87),
            _90 = discriminant(_87),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:836:40: 836:59 (#365),
                    scope: scope[19],
                },
                kind: switchInt(move _90) -> [0: bb61, 1: bb60, otherwise: bb59],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _87),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:836:40: 836:59 (#365),
                    scope: scope[19],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:836:58: 836:59 (#366),
                    scope: scope[19],
                },
                kind: falseEdge -> [real: bb62, imaginary: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_94),
            _94 = ((_87 as Continue).0: hir::Flags),
            _86 = _94,
            StorageDead(_94),
            StorageLive(_95),
            StorageLive(_96),
            StorageLive(_97),
            StorageLive(_98),
            _98 = &((*_1).6: core::cell::RefCell<hir::Flags>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:836:14: 836:37 (#0),
                    scope: scope[19],
                },
                kind: _97 = core::cell::RefCell::<hir::Flags>::borrow_mut(move _98) -> [return: bb64, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_91),
            _91 = move ((_87 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_93),
            _93 = move _91,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:836:40: 836:59 (#365),
                    scope: scope[21],
                },
                kind: _0 = <core::result::Result<core::option::Option<hir::Hir>, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _93) -> [return: bb63, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_93),
            StorageDead(_91),
            StorageDead(_86),
            StorageDead(_87),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[19],
                },
                kind: goto -> bb112,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _96 = &mut _97,
            StorageDead(_98),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:836:13: 836:37 (#0),
                    scope: scope[19],
                },
                kind: _95 = <core::cell::RefMut<'_, hir::Flags> as core::ops::DerefMut>::deref_mut(move _96) -> [return: bb65, unwind: bb128],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_96),
            (*_95) = move _86,
            StorageDead(_86),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:836:59: 836:60 (#0),
                    scope: scope[19],
                },
                kind: drop(_97) -> [return: bb66, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_97),
            StorageDead(_95),
            StorageDead(_87),
            StorageLive(_99),
            StorageLive(_100),
            StorageLive(_101),
            _101 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:837:28: 837:38 (#0),
                    scope: scope[19],
                },
                kind: _100 = hir::parse::Parser::<'_>::pos(move _101) -> [return: bb67, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_101),
            StorageLive(_102),
            _102 = _84,
            _103 = SubWithOverflow(_100, _102),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:837:28: 837:46 (#0),
                    scope: scope[19],
                },
                kind: assert(!move (_103.1: bool), "attempt to compute `{} - {}`, which would overflow", move _100, move _102) -> [success: bb68, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _99 = move (_103.0: usize),
            StorageDead(_102),
            StorageDead(_100),
            FakeRead(ForLet(None), _99),
            StorageLive(_104),
            StorageLive(_105),
            StorageLive(_106),
            _106 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:838:16: 838:27 (#0),
                    scope: scope[24],
                },
                kind: _105 = hir::parse::Parser::<'_>::char(move _106) -> [return: bb69, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_106),
            _104 = Eq(move _105, const ')'),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:838:16: 838:34 (#0),
                    scope: scope[24],
                },
                kind: switchInt(move _104) -> [0: bb75, otherwise: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_105),
            StorageLive(_107),
            StorageLive(_108),
            StorageLive(_109),
            _109 = _99,
            _108 = Eq(move _109, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:840:20: 840:33 (#0),
                    scope: scope[24],
                },
                kind: switchInt(move _108) -> [0: bb73, otherwise: bb71],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_109),
            StorageLive(_111),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:841:32: 841:59 (#0),
                    scope: scope[24],
                },
                kind: _111 = error::Error::new(const hir::parse::ERR_EMPTY_FLAGS) -> [return: bb72, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::result::Result::<core::option::Option<hir::Hir>, error::Error>::Err(move _111),
            StorageDead(_111),
            StorageDead(_108),
            StorageDead(_107),
            StorageDead(_104),
            StorageDead(_99),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[19],
                },
                kind: goto -> bb112,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_109),
            _107 = const (),
            StorageDead(_108),
            StorageDead(_107),
            StorageLive(_112),
            _112 = core::option::Option::<hir::Hir>::None,
            _0 = core::result::Result::<core::option::Option<hir::Hir>, error::Error>::Ok(move _112),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:843:24: 843:25 (#0),
                    scope: scope[24],
                },
                kind: drop(_112) -> [return: bb74, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_112),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:838:13: 848:14 (#0),
                    scope: scope[24],
                },
                kind: goto -> bb82,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_105),
            StorageLive(_113),
            StorageLive(_114),
            StorageLive(_115),
            StorageLive(_116),
            _116 = const ':',
            _115 = &_116,
            StorageLive(_117),
            StorageLive(_118),
            StorageLive(_119),
            _119 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:845:33: 845:44 (#0),
                    scope: scope[24],
                },
                kind: _118 = hir::parse::Parser::<'_>::char(move _119) -> [return: bb76, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_119),
            _117 = &_118,
            _114 = (move _115, move _117),
            StorageDead(_117),
            StorageDead(_115),
            PlaceMention(_114),
            StorageLive(_120),
            _120 = (_114.0: &char),
            StorageLive(_121),
            _121 = (_114.1: &char),
            StorageLive(_122),
            StorageLive(_123),
            _123 = (*_120),
            StorageLive(_124),
            _124 = (*_121),
            _122 = Eq(move _123, move _124),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46 (#38),
                    scope: scope[25],
                },
                kind: switchInt(move _122) -> [0: bb78, otherwise: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_124),
            StorageDead(_123),
            _113 = const (),
            StorageDead(_122),
            StorageDead(_121),
            StorageDead(_120),
            StorageDead(_118),
            StorageDead(_116),
            StorageDead(_114),
            StorageDead(_113),
            StorageLive(_134),
            StorageLive(_135),
            _135 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:846:17: 846:28 (#0),
                    scope: scope[24],
                },
                kind: _134 = hir::parse::Parser::<'_>::bump(move _135) -> [return: bb79, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_124),
            StorageDead(_123),
            StorageLive(_126),
            _126 = core::panicking::AssertKind::Eq,
            FakeRead(ForLet(None), _126),
            StorageLive(_127),
            StorageLive(_128),
            _128 = move _126,
            StorageLive(_129),
            StorageLive(_130),
            _130 = &(*_120),
            _129 = &(*_130),
            StorageLive(_131),
            StorageLive(_132),
            _132 = &(*_121),
            _131 = &(*_132),
            StorageLive(_133),
            _133 = core::option::Option::<core::fmt::Arguments<'_>>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114 (#38),
                    scope: scope[26],
                },
                kind: _127 = core::panicking::assert_failed::<char, char>(move _128, move _129, move _131, move _133) -> bb138,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_135),
            StorageDead(_134),
            StorageLive(_136),
            StorageLive(_137),
            _137 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:847:17: 847:35 (#0),
                    scope: scope[24],
                },
                kind: _136 = hir::parse::Parser::<'_>::parse_inner(move _137) -> [return: bb80, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_137),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:847:17: 847:45 (#0),
                    scope: scope[24],
                },
                kind: _0 = core::result::Result::<hir::Hir, error::Error>::map::<core::option::Option<hir::Hir>, fn(hir::Hir) -> core::option::Option<hir::Hir> {core::option::Option::<hir::Hir>::Some}>(move _136, core::option::Option::<hir::Hir>::Some) -> [return: bb81, unwind: bb127],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_136),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:838:13: 848:14 (#0),
                    scope: scope[24],
                },
                kind: goto -> bb82,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_104),
            StorageDead(_99),
            StorageDead(_84),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:830:16: 854:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb108,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_78),
            StorageDead(_77),
            StorageDead(_76),
            StorageLive(_138),
            StorageLive(_139),
            StorageLive(_140),
            StorageLive(_141),
            _141 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:850:25: 850:50 (#0),
                    scope: scope[0],
                },
                kind: _140 = hir::parse::Parser::<'_>::next_capture_index(move _141) -> [return: bb84, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_141),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:850:25: 850:51 (#371),
                    scope: scope[0],
                },
                kind: _139 = <core::result::Result<u32, error::Error> as core::ops::Try>::branch(move _140) -> [return: bb85, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_140),
            PlaceMention(_139),
            _142 = discriminant(_139),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:850:25: 850:51 (#371),
                    scope: scope[0],
                },
                kind: switchInt(move _142) -> [0: bb88, 1: bb87, otherwise: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _139),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:850:25: 850:51 (#371),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:850:50: 850:51 (#372),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb89, imaginary: bb88],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_146),
            _146 = ((_139 as Continue).0: u32),
            _138 = _146,
            StorageDead(_146),
            FakeRead(ForLet(None), _138),
            StorageDead(_139),
            StorageLive(_147),
            StorageLive(_148),
            StorageLive(_149),
            StorageLive(_150),
            StorageLive(_151),
            _151 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:851:32: 851:50 (#0),
                    scope: scope[27],
                },
                kind: _150 = hir::parse::Parser::<'_>::parse_inner(move _151) -> [return: bb91, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_143),
            _143 = move ((_139 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_145),
            _145 = move _143,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:850:25: 850:51 (#371),
                    scope: scope[29],
                },
                kind: _0 = <core::result::Result<core::option::Option<hir::Hir>, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _145) -> [return: bb90, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_145),
            StorageDead(_143),
            StorageDead(_139),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb111,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_151),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:851:32: 851:51 (#373),
                    scope: scope[27],
                },
                kind: _149 = <core::result::Result<hir::Hir, error::Error> as core::ops::Try>::branch(move _150) -> [return: bb92, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_150),
            PlaceMention(_149),
            _152 = discriminant(_149),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:851:32: 851:51 (#373),
                    scope: scope[27],
                },
                kind: switchInt(move _152) -> [0: bb95, 1: bb94, otherwise: bb93],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _149),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:851:32: 851:51 (#373),
                    scope: scope[27],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:851:50: 851:51 (#374),
                    scope: scope[27],
                },
                kind: falseEdge -> [real: bb96, imaginary: bb95],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_156),
            _156 = move ((_149 as Continue).0: hir::Hir),
            _148 = move _156,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:851:50: 851:51 (#0),
                    scope: scope[27],
                },
                kind: drop(_156) -> [return: bb98, unwind: bb125],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_153),
            _153 = move ((_149 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_155),
            _155 = move _153,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:851:32: 851:51 (#373),
                    scope: scope[34],
                },
                kind: _0 = <core::result::Result<core::option::Option<hir::Hir>, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _155) -> [return: bb97, unwind: bb125],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_155),
            StorageDead(_153),
            StorageDead(_148),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:851:52: 851:53 (#0),
                    scope: scope[27],
                },
                kind: drop(_149) -> [return: bb110, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_156),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:851:23: 851:52 (#0),
                    scope: scope[27],
                },
                kind: _147 = alloc::boxed::Box::<hir::Hir>::new(move _148) -> [return: bb99, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_148),
            FakeRead(ForLet(None), _147),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:851:52: 851:53 (#0),
                    scope: scope[27],
                },
                kind: drop(_149) -> [return: bb100, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_149),
            StorageLive(_157),
            StorageLive(_158),
            _158 = _138,
            StorageLive(_159),
            _159 = core::option::Option::<alloc::boxed::Box<str>>::None,
            StorageLive(_160),
            _160 = move _147,
            _157 = hir::Capture { index: move _158, name: move _159, sub: move _160 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:852:61: 852:62 (#0),
                    scope: scope[32],
                },
                kind: drop(_160) -> [return: bb101, unwind: bb122],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_160),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:852:61: 852:62 (#0),
                    scope: scope[32],
                },
                kind: drop(_159) -> [return: bb102, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_159),
            StorageDead(_158),
            FakeRead(ForLet(None), _157),
            StorageLive(_161),
            StorageLive(_162),
            StorageLive(_163),
            _163 = move _157,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:853:21: 853:38 (#0),
                    scope: scope[37],
                },
                kind: _162 = hir::Hir::capture(move _163) -> [return: bb103, unwind: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_163),
            _161 = core::option::Option::<hir::Hir>::Some(move _162),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:853:38: 853:39 (#0),
                    scope: scope[37],
                },
                kind: drop(_162) -> [return: bb104, unwind: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_162),
            _0 = core::result::Result::<core::option::Option<hir::Hir>, error::Error>::Ok(move _161),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:853:39: 853:40 (#0),
                    scope: scope[37],
                },
                kind: drop(_161) -> [return: bb105, unwind: bb121],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_161),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:854:9: 854:10 (#0),
                    scope: scope[32],
                },
                kind: drop(_157) -> [return: bb106, unwind: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_157),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:854:9: 854:10 (#0),
                    scope: scope[27],
                },
                kind: drop(_147) -> [return: bb107, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_147),
            StorageDead(_138),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:830:16: 854:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb108,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_75),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:824:9: 854:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb109,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:855:6: 855:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb118,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_149),
            StorageDead(_147),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[27],
                },
                kind: goto -> bb111,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_138),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb113,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_84),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb113,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_75),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb117,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
            StorageDead(_58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:830:9: 830:10 (#0),
                    scope: scope[3],
                },
                kind: drop(_47) -> [return: bb115, unwind: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb116,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb117,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb118,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:855:6: 855:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:853:39: 853:40 (#0),
                    scope: scope[37],
                },
                kind: drop(_161) -> [return: bb121, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:853:37: 853:38 (#0),
                    scope: scope[37],
                },
                kind: drop(_163) -> [return: bb121, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:854:9: 854:10 (#0),
                    scope: scope[32],
                },
                kind: drop(_157) -> [return: bb123, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:852:61: 852:62 (#0),
                    scope: scope[32],
                },
                kind: drop(_159) -> [return: bb123, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:854:9: 854:10 (#0),
                    scope: scope[27],
                },
                kind: drop(_147) -> [return: bb138, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:851:51: 851:52 (#0),
                    scope: scope[27],
                },
                kind: drop(_148) -> [return: bb125, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:851:52: 851:53 (#0),
                    scope: scope[27],
                },
                kind: drop(_149) -> [return: bb138, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:851:50: 851:51 (#373),
                    scope: scope[27],
                },
                kind: drop(_150) -> [return: bb138, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:847:44: 847:45 (#0),
                    scope: scope[24],
                },
                kind: drop(_136) -> [return: bb138, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:836:59: 836:60 (#0),
                    scope: scope[19],
                },
                kind: drop(_97) -> [return: bb138, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:829:39: 829:40 (#0),
                    scope: scope[18],
                },
                kind: drop(_72) -> [return: bb131, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:829:37: 829:38 (#0),
                    scope: scope[18],
                },
                kind: drop(_74) -> [return: bb131, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:830:9: 830:10 (#0),
                    scope: scope[13],
                },
                kind: drop(_68) -> [return: bb133, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:828:55: 828:56 (#0),
                    scope: scope[13],
                },
                kind: drop(_70) -> [return: bb133, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:830:9: 830:10 (#0),
                    scope: scope[8],
                },
                kind: drop(_58) -> [return: bb137, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:827:51: 827:52 (#0),
                    scope: scope[8],
                },
                kind: drop(_59) -> [return: bb135, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:827:52: 827:53 (#0),
                    scope: scope[8],
                },
                kind: drop(_60) -> [return: bb137, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:827:50: 827:51 (#361),
                    scope: scope[8],
                },
                kind: drop(_61) -> [return: bb137, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:830:9: 830:10 (#0),
                    scope: scope[3],
                },
                kind: drop(_47) -> [return: bb138, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:818:5: 855:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::option::Option<hir::Hir>, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:818:30: 818:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:818:20: 818:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:9: 48:10 (#37),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} char, &'{erased} char),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32 (#37),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} char,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:16: 38:22 (#37),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:819:20: 819:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:819:20: 819:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} char,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31 (#37),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:819:33: 819:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32 (#37),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:13: 39:34 (#37),
                    },
                ),
            ),
        ),
        ty: &'{erased} char,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14: 39:22 (#37),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32 (#37),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:13: 39:34 (#37),
                    },
                ),
            ),
        ),
        ty: &'{erased} char,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24: 39:33 (#37),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#37),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46 (#37),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#37),
                },
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:22: 40:31 (#37),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#37),
                },
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:35: 40:45 (#37),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#37),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:47: 46:18 (#37),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:32: 41:65 (#37),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29 (#37),
                    },
                ),
            ),
        ),
        ty: core::panicking::AssertKind,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29 (#37),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114 (#37),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::panicking::AssertKind,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:54: 45:58 (#37),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} char,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:60: 45:70 (#37),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} char,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:60: 45:70 (#37),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} char,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:72: 45:83 (#37),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} char,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:72: 45:83 (#37),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::fmt::Arguments<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:85: 45:113 (#37),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:820:9: 820:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:820:9: 820:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:821:9: 823:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:821:12: 821:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:821:12: 821:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:821:40: 823:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:822:24: 822:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:824:9: 854:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:824:12: 824:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:824:9: 854:10 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:824:12: 824:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:824:9: 854:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:824:25: 824:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:824:9: 854:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:824:25: 824:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:824:9: 854:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:824:35: 824:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:824:9: 854:10 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:824:35: 824:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:824:9: 854:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:824:48: 824:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:824:9: 854:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:824:48: 824:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/hir/parse.rs:825:25: 825:51 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:825:17: 825:22 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:825:17: 825:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:825:25: 825:51 (#357),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<u32, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:825:25: 825:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:825:25: 825:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:825:50: 825:51 (#358),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _39,
                                ),
                                regex-lite/src/hir/parse.rs:825:25: 825:51 (#357),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:825:50: 825:51 (#358),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:825:50: 825:51 (#358),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:825:50: 825:51 (#358),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:825:50: 825:51 (#358),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _39,
                                ),
                                regex-lite/src/hir/parse.rs:825:25: 825:51 (#357),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:825:25: 825:51 (#357),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:825:25: 825:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/hir/parse.rs:826:24: 826:67 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:826:17: 826:21 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<alloc::boxed::Box<str, alloc::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:826:17: 826:21 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: alloc::boxed::Box<str, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:826:29: 826:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:826:39: 826:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, &'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:826:39: 826:65 (#359),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<&'{erased} str, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:826:39: 826:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:826:39: 826:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:826:64: 826:65 (#360),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _50,
                                ),
                                regex-lite/src/hir/parse.rs:826:39: 826:65 (#359),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:826:64: 826:65 (#360),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:826:64: 826:65 (#360),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:826:64: 826:65 (#360),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:826:64: 826:65 (#360),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _50,
                                ),
                                regex-lite/src/hir/parse.rs:826:39: 826:65 (#359),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:826:39: 826:65 (#359),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:826:39: 826:65 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/hir/parse.rs:827:23: 827:52 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:827:17: 827:20 (#0),
                    },
                ),
            ),
        ),
        ty: alloc::boxed::Box<hir::Hir, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:827:17: 827:20 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:827:32: 827:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, hir::Hir>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:827:32: 827:51 (#361),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<hir::Hir, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:827:32: 827:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:827:32: 827:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:827:50: 827:51 (#362),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _60,
                                ),
                                regex-lite/src/hir/parse.rs:827:32: 827:51 (#361),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:827:50: 827:51 (#362),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:827:50: 827:51 (#362),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:827:50: 827:51 (#362),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:827:50: 827:51 (#362),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _60,
                                ),
                                regex-lite/src/hir/parse.rs:827:32: 827:51 (#361),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:827:32: 827:51 (#361),
                    },
                ),
            ),
        ),
        ty: hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:827:32: 827:51 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/hir/parse.rs:828:23: 828:56 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:828:17: 828:20 (#0),
                    },
                ),
            ),
        ),
        ty: hir::Capture,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:828:17: 828:20 (#0),
            scope: scope[13],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:828:38: 828:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<alloc::boxed::Box<str, alloc::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:828:45: 828:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: alloc::boxed::Box<hir::Hir, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:828:51: 828:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<hir::Hir>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:829:16: 829:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:829:21: 829:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:829:13: 829:40 (#0),
                },
            ),
        ),
        ty: hir::Capture,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:829:34: 829:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:824:9: 854:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:830:19: 830:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:824:9: 854:10 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:830:19: 830:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:824:9: 854:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:830:32: 830:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:824:9: 854:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:830:32: 830:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:831:13: 833:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:831:16: 831:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:831:16: 831:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:831:31: 833:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:832:28: 832:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/hir/parse.rs:834:25: 834:35 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:834:17: 834:22 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:834:17: 834:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:834:25: 834:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::Flags,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:836:40: 836:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, hir::Flags>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:836:40: 836:59 (#365),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<hir::Flags, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:836:40: 836:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:836:40: 836:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:836:58: 836:59 (#366),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _87,
                                ),
                                regex-lite/src/hir/parse.rs:836:40: 836:59 (#365),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:836:58: 836:59 (#366),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:836:58: 836:59 (#366),
            scope: scope[19],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:836:58: 836:59 (#366),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:836:58: 836:59 (#366),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _87,
                                ),
                                regex-lite/src/hir/parse.rs:836:40: 836:59 (#365),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:836:40: 836:59 (#365),
                    },
                ),
            ),
        ),
        ty: hir::Flags,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:836:40: 836:59 (#0),
            scope: scope[19],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut hir::Flags,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:836:13: 836:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::cell::RefMut<'{erased}, hir::Flags>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:836:14: 836:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::cell::RefMut<'{erased}, hir::Flags>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:836:14: 836:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::cell::RefCell<hir::Flags>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:836:14: 836:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/hir/parse.rs:837:28: 837:46 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:837:17: 837:25 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:837:17: 837:25 (#0),
            scope: scope[19],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:837:28: 837:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:837:28: 837:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:837:41: 837:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:837:28: 837:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:838:13: 848:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:838:16: 838:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:838:13: 848:14 (#0),
                },
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:838:16: 838:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:838:13: 848:14 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:838:16: 838:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:840:17: 842:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:840:20: 840:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:840:20: 840:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:840:34: 842:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:841:32: 841:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<hir::Hir>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:843:20: 843:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:9: 48:10 (#38),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} char, &'{erased} char),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32 (#38),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} char,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:16: 38:22 (#38),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:845:28: 845:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} char,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31 (#38),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:845:33: 845:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:845:33: 845:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _114,
                                ),
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32 (#38),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:13: 39:34 (#38),
                    },
                ),
            ),
        ),
        ty: &'{erased} char,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14: 39:22 (#38),
            scope: scope[24],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _114,
                                ),
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32 (#38),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:13: 39:34 (#38),
                    },
                ),
            ),
        ),
        ty: &'{erased} char,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24: 39:33 (#38),
            scope: scope[24],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#38),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46 (#38),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#38),
                },
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:22: 40:31 (#38),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#38),
                },
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:35: 40:45 (#38),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#38),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:47: 46:18 (#38),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:32: 41:65 (#38),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29 (#38),
                    },
                ),
            ),
        ),
        ty: core::panicking::AssertKind,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29 (#38),
            scope: scope[25],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114 (#38),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::panicking::AssertKind,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:54: 45:58 (#38),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} char,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:60: 45:70 (#38),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} char,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:60: 45:70 (#38),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} char,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:72: 45:83 (#38),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} char,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:72: 45:83 (#38),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::fmt::Arguments<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:85: 45:113 (#38),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:846:17: 846:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:846:17: 846:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:847:17: 847:45 (#0),
                },
            ),
        ),
        ty: core::result::Result<hir::Hir, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:847:17: 847:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:847:17: 847:45 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:847:17: 847:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/hir/parse.rs:850:25: 850:51 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:850:17: 850:22 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:850:17: 850:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:850:25: 850:51 (#371),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<u32, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:850:25: 850:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:850:25: 850:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:850:50: 850:51 (#372),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _139,
                                ),
                                regex-lite/src/hir/parse.rs:850:25: 850:51 (#371),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:850:50: 850:51 (#372),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:850:50: 850:51 (#372),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:850:50: 850:51 (#372),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:850:50: 850:51 (#372),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _139,
                                ),
                                regex-lite/src/hir/parse.rs:850:25: 850:51 (#371),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:850:25: 850:51 (#371),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:850:25: 850:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/hir/parse.rs:851:23: 851:52 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:851:17: 851:20 (#0),
                    },
                ),
            ),
        ),
        ty: alloc::boxed::Box<hir::Hir, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:851:17: 851:20 (#0),
            scope: scope[27],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:851:32: 851:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, hir::Hir>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:851:32: 851:51 (#373),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<hir::Hir, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:851:32: 851:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:851:32: 851:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:851:50: 851:51 (#374),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _149,
                                ),
                                regex-lite/src/hir/parse.rs:851:32: 851:51 (#373),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:851:50: 851:51 (#374),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:851:50: 851:51 (#374),
            scope: scope[27],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:851:50: 851:51 (#374),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:851:50: 851:51 (#374),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _149,
                                ),
                                regex-lite/src/hir/parse.rs:851:32: 851:51 (#373),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:851:32: 851:51 (#373),
                    },
                ),
            ),
        ),
        ty: hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:851:32: 851:51 (#0),
            scope: scope[27],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/hir/parse.rs:852:23: 852:62 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:852:17: 852:20 (#0),
                    },
                ),
            ),
        ),
        ty: hir::Capture,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:852:17: 852:20 (#0),
            scope: scope[32],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:852:38: 852:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<alloc::boxed::Box<str, alloc::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:852:51: 852:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: alloc::boxed::Box<hir::Hir, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:852:57: 852:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<hir::Hir>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:853:16: 853:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:853:21: 853:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:853:13: 853:40 (#0),
                },
            ),
        ),
        ty: hir::Capture,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:853:34: 853:37 (#0),
            scope: scope[0],
        },
    },
]