[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &mut _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:583:52: 583:61 (#0),
                    scope: scope[0],
                },
                kind: _6 = <I as core::iter::Iterator>::next(move _7) -> [return: bb1, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            PlaceMention(_6),
            _8 = discriminant(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:583:46: 583:61 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _8) -> [0: bb4, 1: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:583:52: 583:61 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:584:13: 584:25 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_18),
            _18 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:585:28: 585:42 (#0),
                    scope: scope[0],
                },
                kind: _0 = nfa::Compiler::c_empty(move _18) -> [return: bb12, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            _9 = move ((_6 as Some).0: core::result::Result<nfa::ThompsonRef, error::Error>),
            StorageLive(_10),
            StorageLive(_11),
            _11 = move _9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:584:29: 584:36 (#663),
                    scope: scope[2],
                },
                kind: _10 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::Try>::branch(move _11) -> [return: bb6, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            PlaceMention(_10),
            _12 = discriminant(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:584:29: 584:36 (#663),
                    scope: scope[2],
                },
                kind: switchInt(move _12) -> [0: bb9, 1: bb8, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:584:29: 584:36 (#663),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:584:35: 584:36 (#664),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = ((_10 as Continue).0: nfa::ThompsonRef),
            _5 = _16,
            StorageDead(_16),
            StorageDead(_10),
            StorageDead(_9),
            PlaceMention(_5),
            StorageLive(_3),
            _3 = (_5.0: u32),
            StorageLive(_4),
            _4 = (_5.1: u32),
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:587:23: 587:25 (#666),
                    scope: scope[1],
                },
                kind: _20 = <I as core::iter::IntoIterator>::into_iter(move _21) -> [return: bb13, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            _13 = move ((_10 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_15),
            _15 = move _13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:584:29: 584:36 (#663),
                    scope: scope[4],
                },
                kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _15) -> [return: bb11, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_10),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb39,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:585:21: 585:42 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb39,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            PlaceMention(_20),
            StorageLive(_22),
            _22 = move _20,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:587:9: 591:10 (#665),
                    scope: scope[7],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:587:9: 591:10 (#665),
                    scope: scope[7],
                },
                kind: falseUnwind -> [real: bb15, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            _27 = &mut _22,
            _26 = &mut (*_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:587:23: 587:25 (#666),
                    scope: scope[7],
                },
                kind: _25 = <I as core::iter::Iterator>::next(move _26) -> [return: bb16, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            PlaceMention(_25),
            _28 = discriminant(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:587:23: 587:25 (#666),
                    scope: scope[7],
                },
                kind: switchInt(move _28) -> [0: bb18, 1: bb19, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:587:23: 587:25 (#666),
                    scope: scope[7],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:587:9: 591:10 (#665),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb20, imaginary: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_30),
            _30 = move ((_25 as Some).0: core::result::Result<nfa::ThompsonRef, error::Error>),
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            _33 = move _30,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:588:28: 588:35 (#668),
                    scope: scope[8],
                },
                kind: _32 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::Try>::branch(move _33) -> [return: bb21, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _19 = const (),
            StorageDead(_27),
            StorageDead(_25),
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:591:9: 591:10 (#665),
                    scope: scope[1],
                },
                kind: drop(_22) -> [return: bb34, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            PlaceMention(_32),
            _34 = discriminant(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:588:28: 588:35 (#668),
                    scope: scope[8],
                },
                kind: switchInt(move _34) -> [0: bb24, 1: bb23, otherwise: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:588:28: 588:35 (#668),
                    scope: scope[8],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:588:34: 588:35 (#669),
                    scope: scope[8],
                },
                kind: falseEdge -> [real: bb25, imaginary: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_38),
            _38 = ((_32 as Continue).0: nfa::ThompsonRef),
            _31 = _38,
            StorageDead(_38),
            FakeRead(ForLet(None), _31),
            StorageDead(_32),
            StorageLive(_39),
            StorageLive(_40),
            StorageLive(_41),
            StorageLive(_42),
            _42 = &(*_1),
            StorageLive(_43),
            _43 = _4,
            StorageLive(_44),
            _44 = (_31.0: u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:589:13: 589:44 (#0),
                    scope: scope[9],
                },
                kind: _41 = nfa::Compiler::patch(move _42, move _43, move _44) -> [return: bb27, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_35),
            _35 = move ((_32 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_37),
            _37 = move _35,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:588:28: 588:35 (#668),
                    scope: scope[11],
                },
                kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _37) -> [return: bb26, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageDead(_35),
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[8],
                },
                kind: goto -> bb36,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            StorageDead(_43),
            StorageDead(_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:589:13: 589:45 (#670),
                    scope: scope[9],
                },
                kind: _40 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _41) -> [return: bb28, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            PlaceMention(_40),
            _45 = discriminant(_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:589:13: 589:45 (#670),
                    scope: scope[9],
                },
                kind: switchInt(move _45) -> [0: bb31, 1: bb30, otherwise: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:589:13: 589:45 (#670),
                    scope: scope[9],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:589:44: 589:45 (#671),
                    scope: scope[9],
                },
                kind: falseEdge -> [real: bb32, imaginary: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_49),
            _49 = ((_40 as Continue).0: ()),
            _39 = _49,
            StorageDead(_49),
            StorageDead(_40),
            StorageDead(_39),
            StorageLive(_50),
            _50 = (_31.1: u32),
            _4 = move _50,
            StorageDead(_50),
            _24 = const (),
            StorageDead(_31),
            StorageDead(_30),
            StorageDead(_27),
            StorageDead(_25),
            StorageDead(_24),
            _23 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:587:9: 591:10 (#665),
                    scope: scope[7],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_46),
            _46 = move ((_40 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_48),
            _48 = move _46,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:589:13: 589:45 (#670),
                    scope: scope[15],
                },
                kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _48) -> [return: bb33, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
            StorageDead(_46),
            StorageDead(_40),
            StorageDead(_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[9],
                },
                kind: goto -> bb36,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:591:9: 591:10 (#665),
                    scope: scope[1],
                },
                kind: drop(_20) -> [return: bb35, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
            StorageLive(_51),
            StorageLive(_52),
            _52 = _3,
            StorageLive(_53),
            _53 = _4,
            _51 = nfa::ThompsonRef { start: move _52, end: move _53 },
            StorageDead(_53),
            StorageDead(_52),
            _0 = core::result::Result::<nfa::ThompsonRef, error::Error>::Ok(move _51),
            StorageDead(_51),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:593:5: 593:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb41, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_30),
            StorageDead(_27),
            StorageDead(_25),
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:591:9: 591:10 (#665),
                    scope: scope[1],
                },
                kind: drop(_22) -> [return: bb37, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:591:9: 591:10 (#665),
                    scope: scope[1],
                },
                kind: drop(_20) -> [return: bb38, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb40,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb40,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:593:5: 593:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb41, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:593:6: 593:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:591:9: 591:10 (#665),
                    scope: scope[1],
                },
                kind: drop(_22) -> [return: bb43, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:591:9: 591:10 (#665),
                    scope: scope[1],
                },
                kind: drop(_20) -> [return: bb45, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:587:24: 587:25 (#666),
                    scope: scope[1],
                },
                kind: drop(_21) -> [return: bb45, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:593:5: 593:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb46, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:579:5: 593:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<nfa::ThompsonRef, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:579:41: 579:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} nfa::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:579:20: 579:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/nfa.rs:579:35: 579:36 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/nfa.rs:579:27: 579:33 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:579:27: 579:33 (#0),
                    },
                ),
            ),
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:579:27: 579:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                regex-lite/src/nfa.rs:583:46: 586:10 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:583:13: 583:43 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:583:27: 583:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                regex-lite/src/nfa.rs:583:46: 586:10 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:583:13: 583:43 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:583:34: 583:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::ThompsonRef,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:583:46: 586:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::result::Result<nfa::ThompsonRef, error::Error>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:583:52: 583:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:583:52: 583:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:584:13: 584:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                regex-lite/src/nfa.rs:583:52: 583:61 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:584:13: 584:25 (#0),
                    },
                ),
            ),
        ),
        ty: core::result::Result<nfa::ThompsonRef, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:584:18: 584:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, nfa::ThompsonRef>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:584:29: 584:36 (#663),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<nfa::ThompsonRef, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:584:29: 584:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:584:35: 584:36 (#664),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _10,
                                ),
                                regex-lite/src/nfa.rs:584:29: 584:36 (#663),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:584:35: 584:36 (#664),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:584:35: 584:36 (#664),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:584:35: 584:36 (#664),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:584:35: 584:36 (#664),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _10,
                                ),
                                regex-lite/src/nfa.rs:584:29: 584:36 (#663),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:584:29: 584:36 (#663),
                    },
                ),
            ),
        ),
        ty: nfa::ThompsonRef,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:584:29: 584:36 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:585:21: 585:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:585:28: 585:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:587:9: 591:10 (#665),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:587:23: 587:25 (#666),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:587:23: 587:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _20,
                                ),
                                regex-lite/src/nfa.rs:587:23: 587:25 (#666),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:587:23: 587:25 (#666),
                    },
                ),
            ),
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:587:23: 587:25 (#666),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:579:5: 593:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:587:23: 587:25 (#666),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::result::Result<nfa::ThompsonRef, error::Error>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:587:23: 587:25 (#666),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:587:23: 587:25 (#666),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:587:23: 587:25 (#666),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:587:9: 591:10 (#665),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:587:9: 591:10 (#665),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _25,
                                ),
                                regex-lite/src/nfa.rs:587:23: 587:25 (#666),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:587:13: 587:19 (#667),
                    },
                ),
            ),
        ),
        ty: core::result::Result<nfa::ThompsonRef, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:587:13: 587:19 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/nfa.rs:588:28: 588:35 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:588:17: 588:25 (#0),
                    },
                ),
            ),
        ),
        ty: nfa::ThompsonRef,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:588:17: 588:25 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, nfa::ThompsonRef>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:588:28: 588:35 (#668),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<nfa::ThompsonRef, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:588:28: 588:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:588:34: 588:35 (#669),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _32,
                                ),
                                regex-lite/src/nfa.rs:588:28: 588:35 (#668),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:588:34: 588:35 (#669),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:588:34: 588:35 (#669),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:588:34: 588:35 (#669),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:588:34: 588:35 (#669),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _32,
                                ),
                                regex-lite/src/nfa.rs:588:28: 588:35 (#668),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:588:28: 588:35 (#668),
                    },
                ),
            ),
        ),
        ty: nfa::ThompsonRef,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:588:28: 588:35 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:589:13: 589:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:589:13: 589:45 (#670),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:589:13: 589:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:589:13: 589:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:589:24: 589:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:589:29: 589:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:589:44: 589:45 (#671),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _40,
                                ),
                                regex-lite/src/nfa.rs:589:13: 589:45 (#670),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:589:44: 589:45 (#671),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:589:44: 589:45 (#671),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:589:44: 589:45 (#671),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:589:44: 589:45 (#671),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _40,
                                ),
                                regex-lite/src/nfa.rs:589:13: 589:45 (#670),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:589:13: 589:45 (#670),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:589:13: 589:45 (#0),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:590:19: 590:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: nfa::ThompsonRef,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:592:12: 592:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:592:26: 592:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:592:33: 592:36 (#0),
            scope: scope[0],
        },
    },
]