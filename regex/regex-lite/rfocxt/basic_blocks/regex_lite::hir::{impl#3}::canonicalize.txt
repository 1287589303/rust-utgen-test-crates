[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:477:12: 477:31 (#0),
                    scope: scope[0],
                },
                kind: _3 = hir::Class::is_canonical(move _4) -> [return: bb1, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:477:12: 477:31 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            _0 = const (),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:500:6: 500:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb34,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            _2 = const (),
            StorageDead(_3),
            StorageDead(_2),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &mut ((*_1).0: alloc::vec::Vec<hir::ClassRange>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:480:9: 480:27 (#0),
                    scope: scope[0],
                },
                kind: _8 = <alloc::vec::Vec<hir::ClassRange> as core::ops::DerefMut>::deref_mut(move _9) -> [return: bb4, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = &mut (*_8),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:480:9: 480:27 (#0),
                    scope: scope[0],
                },
                kind: _6 = alloc::slice::<impl [hir::ClassRange]>::sort(move _7) -> [return: bb5, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_8),
            StorageDead(_6),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &((*_1).0: alloc::vec::Vec<hir::ClassRange>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:481:18: 481:40 (#0),
                    scope: scope[0],
                },
                kind: _11 = alloc::vec::Vec::<hir::ClassRange>::is_empty(move _12) -> [return: bb6, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:481:18: 481:40 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _11) -> [0: bb8, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageLive(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:481:9: 481:41 (#73),
                    scope: scope[0],
                },
                kind: _13 = core::panicking::panic(const "assertion failed: !self.ranges.is_empty()") -> bb35,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            _10 = const (),
            StorageDead(_11),
            StorageDead(_10),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &((*_1).0: alloc::vec::Vec<hir::ClassRange>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:486:25: 486:42 (#0),
                    scope: scope[0],
                },
                kind: _14 = alloc::vec::Vec::<hir::ClassRange>::len(move _15) -> [return: bb9, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            FakeRead(ForLet(None), _14),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = _14,
            _18 = core::ops::Range::<usize> { start: const 0_usize, end: move _19 },
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:487:21: 487:33 (#486),
                    scope: scope[1],
                },
                kind: _17 = <core::ops::Range<usize> as core::iter::IntoIterator>::into_iter(move _18) -> [return: bb10, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            PlaceMention(_17),
            StorageLive(_20),
            _20 = move _17,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:487:9: 498:10 (#485),
                    scope: scope[2],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:487:9: 498:10 (#485),
                    scope: scope[2],
                },
                kind: falseUnwind -> [real: bb12, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            _25 = &mut _20,
            _24 = &mut (*_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:487:21: 487:33 (#486),
                    scope: scope[2],
                },
                kind: _23 = <core::ops::Range<usize> as core::iter::Iterator>::next(move _24) -> [return: bb13, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            PlaceMention(_23),
            _26 = discriminant(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:487:21: 487:33 (#486),
                    scope: scope[2],
                },
                kind: switchInt(move _26) -> [0: bb15, 1: bb16, otherwise: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:487:21: 487:33 (#486),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:487:9: 498:10 (#485),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb17, imaginary: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_28),
            _28 = ((_23 as Some).0: usize),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            _32 = &((*_1).0: alloc::vec::Vec<hir::ClassRange>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:490:16: 490:33 (#0),
                    scope: scope[3],
                },
                kind: _31 = alloc::vec::Vec::<hir::ClassRange>::len(move _32) -> [return: bb18, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _16 = const (),
            StorageDead(_25),
            StorageDead(_23),
            StorageDead(_22),
            StorageDead(_20),
            StorageDead(_17),
            StorageDead(_16),
            StorageLive(_58),
            StorageLive(_59),
            _59 = &mut ((*_1).0: alloc::vec::Vec<hir::ClassRange>),
            StorageLive(_60),
            StorageLive(_61),
            _61 = _14,
            _60 = core::ops::RangeTo::<usize> { end: move _61 },
            StorageDead(_61),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:499:9: 499:39 (#0),
                    scope: scope[1],
                },
                kind: _58 = alloc::vec::Vec::<hir::ClassRange>::drain::<core::ops::RangeTo<usize>>(move _59, move _60) -> [return: bb32, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            StorageLive(_33),
            _33 = _14,
            _30 = Gt(move _31, move _33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:490:16: 490:45 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _30) -> [0: bb28, otherwise: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_31),
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            StorageLive(_39),
            StorageLive(_40),
            _40 = &mut ((*_1).0: alloc::vec::Vec<hir::ClassRange>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:491:36: 491:64 (#0),
                    scope: scope[3],
                },
                kind: _39 = <alloc::vec::Vec<hir::ClassRange> as core::ops::DerefMut>::deref_mut(move _40) -> [return: bb20, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _38 = &mut (*_39),
            StorageDead(_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:491:36: 491:64 (#0),
                    scope: scope[3],
                },
                kind: _37 = core::slice::<impl [hir::ClassRange]>::split_last_mut(move _38) -> [return: bb21, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:491:36: 491:73 (#0),
                    scope: scope[3],
                },
                kind: _36 = core::option::Option::<(&mut hir::ClassRange, &mut [hir::ClassRange])>::unwrap(move _37) -> [return: bb22, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            PlaceMention(_36),
            StorageLive(_34),
            _34 = move (_36.0: &mut hir::ClassRange),
            StorageLive(_35),
            _35 = move (_36.1: &mut [hir::ClassRange]),
            StorageDead(_39),
            StorageDead(_36),
            StorageLive(_41),
            StorageLive(_42),
            _42 = &(*_34),
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            _45 = _28,
            _46 = Len((*_35)),
            _47 = Lt(_45, _46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:492:50: 492:60 (#0),
                    scope: scope[5],
                },
                kind: assert(move _47, "index out of bounds: the length is {} but the index is {}", move _46, _45) -> [success: bb23, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _44 = &(*_35)[_45],
            _43 = &(*_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:492:38: 492:61 (#0),
                    scope: scope[5],
                },
                kind: _41 = hir::ClassRange::union(move _42, move _43) -> [return: bb24, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            StorageDead(_42),
            PlaceMention(_41),
            _48 = discriminant(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:492:24: 492:35 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _48) -> [1: bb25, otherwise: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:492:24: 492:35 (#0),
                    scope: scope[5],
                },
                kind: falseEdge -> [real: bb26, imaginary: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_49),
            _49 = ((_41 as Some).0: hir::ClassRange),
            StorageLive(_51),
            _51 = _49,
            (*_34) = move _51,
            StorageDead(_51),
            StorageDead(_49),
            StorageDead(_35),
            StorageDead(_34),
            StorageDead(_45),
            StorageDead(_44),
            StorageDead(_41),
            StorageDead(_30),
            StorageDead(_29),
            StorageDead(_28),
            StorageDead(_25),
            StorageDead(_23),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _29 = const (),
            StorageDead(_35),
            StorageDead(_34),
            StorageDead(_45),
            StorageDead(_44),
            StorageDead(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:490:13: 496:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_31),
            _29 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:490:13: 496:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_29),
            StorageLive(_52),
            StorageLive(_53),
            _53 = &mut ((*_1).0: alloc::vec::Vec<hir::ClassRange>),
            StorageLive(_54),
            StorageLive(_55),
            StorageLive(_56),
            _56 = &((*_1).0: alloc::vec::Vec<hir::ClassRange>),
            StorageLive(_57),
            _57 = _28,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:497:41: 497:47 (#0),
                    scope: scope[3],
                },
                kind: _55 = <alloc::vec::Vec<hir::ClassRange> as core::ops::Index<usize>>::index(move _56, move _57) -> [return: bb30, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _54 = (*_55),
            StorageDead(_57),
            StorageDead(_56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:497:13: 497:48 (#0),
                    scope: scope[3],
                },
                kind: _52 = alloc::vec::Vec::<hir::ClassRange>::push(move _53, move _54) -> [return: bb31, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            StorageDead(_53),
            StorageDead(_55),
            StorageDead(_52),
            _22 = const (),
            StorageDead(_28),
            StorageDead(_25),
            StorageDead(_23),
            StorageDead(_22),
            _21 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:487:9: 498:10 (#485),
                    scope: scope[2],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
            StorageDead(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:499:39: 499:40 (#0),
                    scope: scope[1],
                },
                kind: drop(_58) -> [return: bb33, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
            _0 = const (),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:500:6: 500:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb34,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:500:6: 500:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:476:5: 500:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:476:31: 476:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut hir::Class,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:476:21: 476:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:477:9: 479:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:477:12: 477:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::Class,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:477:12: 477:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:477:32: 479:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:480:9: 480:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [hir::ClassRange],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:480:9: 480:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [hir::ClassRange],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:480:9: 480:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::vec::Vec<hir::ClassRange, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:480:9: 480:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:481:9: 481:41 (#73),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:481:18: 481:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::vec::Vec<hir::ClassRange, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:481:18: 481:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/hir/mod.rs:481:9: 481:41 (#73),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:481:9: 481:41 (#73),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/hir/mod.rs:486:25: 486:42 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/mod.rs:486:13: 486:22 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:486:13: 486:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::vec::Vec<hir::ClassRange, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:486:25: 486:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:487:9: 498:10 (#485),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:487:21: 487:33 (#486),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:487:21: 487:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:487:24: 487:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _17,
                                ),
                                regex-lite/src/hir/mod.rs:487:21: 487:33 (#486),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/mod.rs:487:21: 487:33 (#486),
                    },
                ),
            ),
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:487:21: 487:33 (#486),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:476:5: 500:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:487:21: 487:33 (#486),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:487:21: 487:33 (#486),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:487:21: 487:33 (#486),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:487:21: 487:33 (#486),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:487:9: 498:10 (#485),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:487:9: 498:10 (#485),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _23,
                                ),
                                regex-lite/src/hir/mod.rs:487:21: 487:33 (#486),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/mod.rs:487:13: 487:17 (#487),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:487:13: 487:17 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:490:13: 496:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:490:16: 490:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:490:16: 490:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::vec::Vec<hir::ClassRange, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:490:16: 490:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:490:36: 490:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _36,
                                ),
                                regex-lite/src/hir/mod.rs:491:36: 491:73 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/mod.rs:491:21: 491:33 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut hir::ClassRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:491:22: 491:26 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _36,
                                ),
                                regex-lite/src/hir/mod.rs:491:36: 491:73 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/mod.rs:491:21: 491:33 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [hir::ClassRange],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:491:28: 491:32 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} mut hir::ClassRange, &'{erased} mut [hir::ClassRange]),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:491:36: 491:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(&'{erased} mut hir::ClassRange, &'{erased} mut [hir::ClassRange])>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:491:36: 491:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [hir::ClassRange],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:491:36: 491:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [hir::ClassRange],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:491:36: 491:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::vec::Vec<hir::ClassRange, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:491:36: 491:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/hir/mod.rs:492:17: 495:18 (#0),
                },
            ),
        ),
        ty: core::option::Option<hir::ClassRange>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:492:38: 492:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/hir/mod.rs:492:17: 495:18 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::ClassRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:492:38: 492:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/hir/mod.rs:492:17: 495:18 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::ClassRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:492:49: 492:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/hir/mod.rs:492:17: 495:18 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::ClassRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:492:49: 492:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/hir/mod.rs:492:17: 495:18 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:492:55: 492:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:492:50: 492:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:492:50: 492:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:492:24: 492:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _41,
                                ),
                                regex-lite/src/hir/mod.rs:492:38: 492:61 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/mod.rs:492:24: 492:35 (#0),
                    },
                ),
            ),
        ),
        ty: hir::ClassRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:492:29: 492:34 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/hir/mod.rs:492:17: 495:18 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:492:62: 495:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::ClassRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:493:29: 493:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:497:13: 497:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::vec::Vec<hir::ClassRange, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:497:13: 497:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::ClassRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:497:30: 497:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::ClassRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:497:41: 497:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::vec::Vec<hir::ClassRange, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:497:30: 497:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:497:42: 497:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: alloc::vec::Drain<'{erased}, hir::ClassRange, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:499:9: 499:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::vec::Vec<hir::ClassRange, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:499:9: 499:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeTo<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:499:27: 499:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:499:29: 499:38 (#0),
            scope: scope[0],
        },
    },
]