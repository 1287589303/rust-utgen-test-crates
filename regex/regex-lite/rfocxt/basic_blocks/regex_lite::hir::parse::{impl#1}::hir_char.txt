[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1274:12: 1274:24 (#0),
                    scope: scope[0],
                },
                kind: _5 = hir::parse::Parser::<'_>::flags(move _6) -> [return: bb1, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            _4 = (_5.0: bool),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1274:12: 1274:41 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb9, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_7),
            StorageLive(_8),
            _8 = _2,
            StorageLive(_9),
            _9 = _2,
            _7 = hir::ClassRange { start: move _8, end: move _9 },
            StorageDead(_9),
            StorageDead(_8),
            FakeRead(ForLet(None), _7),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &_7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1276:35: 1276:57 (#0),
                    scope: scope[2],
                },
                kind: _10 = hir::ClassRange::ascii_case_fold(move _11) -> [return: bb3, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            PlaceMention(_10),
            _12 = discriminant(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1276:20: 1276:32 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _12) -> [1: bb4, otherwise: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1276:20: 1276:32 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            _13 = ((_10 as Some).0: hir::ClassRange),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = _7,
            StorageLive(_18),
            _18 = _13,
            _16 = [move _17, move _18],
            StorageDead(_18),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1277:35: 1277:66 (#0),
                    scope: scope[2],
                },
                kind: _15 = hir::Class::new::<[hir::ClassRange; 2]>(move _16) -> [return: bb6, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1277:24: 1277:67 (#0),
                    scope: scope[2],
                },
                kind: _0 = hir::Hir::class(move _15) -> [return: bb7, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_7),
            StorageDead(_10),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1281:6: 1281:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = const (),
            StorageDead(_7),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1274:9: 1279:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            _3 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1274:9: 1279:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_19),
            _19 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1280:9: 1280:22 (#0),
                    scope: scope[0],
                },
                kind: _0 = hir::Hir::char(move _19) -> [return: bb11, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1281:6: 1281:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1281:6: 1281:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1277:66: 1277:67 (#0),
                    scope: scope[2],
                },
                kind: drop(_15) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1273:5: 1281:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1273:37: 1273:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1273:17: 1273:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/hir/parse.rs:1273:28: 1273:32 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/hir/parse.rs:1273:24: 1273:26 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:1273:24: 1273:26 (#0),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1273:24: 1273:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1274:9: 1279:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1274:12: 1274:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::Flags,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1274:12: 1274:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1274:12: 1274:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/hir/parse.rs:1275:24: 1275:62 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:1275:17: 1275:21 (#0),
                    },
                ),
            ),
        ),
        ty: hir::ClassRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1275:17: 1275:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1275:49: 1275:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1275:58: 1275:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/hir/parse.rs:1276:13: 1278:14 (#0),
                },
            ),
        ),
        ty: core::option::Option<hir::ClassRange>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1276:35: 1276:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/hir/parse.rs:1276:13: 1278:14 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::ClassRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1276:35: 1276:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1276:20: 1276:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _10,
                                ),
                                regex-lite/src/hir/parse.rs:1276:35: 1276:57 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:1276:20: 1276:32 (#0),
                    },
                ),
            ),
        ),
        ty: hir::ClassRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1276:25: 1276:31 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/hir/parse.rs:1276:13: 1278:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1276:58: 1278:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::Class,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1277:35: 1277:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: [hir::ClassRange; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1277:51: 1277:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::ClassRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1277:52: 1277:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::ClassRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1277:58: 1277:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:1280:9: 1280:22 (#0),
                },
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1280:19: 1280:21 (#0),
            scope: scope[0],
        },
    },
]