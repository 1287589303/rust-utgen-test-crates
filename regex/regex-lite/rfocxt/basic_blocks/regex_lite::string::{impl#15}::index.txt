[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_1),
            StorageLive(_7),
            _7 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:2014:9: 2014:20 (#0),
                    scope: scope[0],
                },
                kind: _5 = string::Captures::<'_>::get(move _6, move _7) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageLive(_8),
            _8 = {closure@regex-lite/src/string.rs:2015:18: 2015:21},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:2014:9: 2015:33 (#0),
                    scope: scope[0],
                },
                kind: _4 = core::option::Option::<string::Match<'_>>::map::<&str, {closure@regex-lite/src/string.rs:2015:18: 2015:21}>(move _5, move _8) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_5),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &_2,
            _9 = {closure@regex-lite/src/string.rs:2016:29: 2016:31} { i: move _10 },
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:2014:9: 2016:68 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::option::Option::<&str>::unwrap_or_else::<{closure@regex-lite/src/string.rs:2016:29: 2016:31}>(move _4, move _9) -> [return: bb3, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = &(*_3),
            StorageDead(_9),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:2017:6: 2017:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:2013:5: 2017:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2013:34: 2013:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} string::Captures<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2013:14: 2013:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/string.rs:2013:24: 2013:29 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/string.rs:2013:21: 2013:22 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:2013:21: 2013:22 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2013:21: 2013:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:2014:9: 2016:68 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2014:9: 2016:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:2014:9: 2016:68 (#0),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2014:9: 2015:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:2014:9: 2016:68 (#0),
                },
            ),
        ),
        ty: core::option::Option<string::Match<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2014:9: 2014:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:2014:9: 2016:68 (#0),
                },
            ),
        ),
        ty: &'{erased} string::Captures<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2014:9: 2014:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:2014:9: 2016:68 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2014:18: 2014:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:2014:9: 2016:68 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:601 ~ regex_lite[fbae]::string::{impl#15}::index::{closure#0}),
            [
                '{erased},
                i32,
                Binder { value: extern "RustCall" fn((string::Match<'{erased}>,)) -> &'{erased} str, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2015:18: 2015:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:2014:9: 2016:68 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:602 ~ regex_lite[fbae]::string::{impl#15}::index::{closure#1}),
            [
                '{erased},
                i32,
                Binder { value: extern "RustCall" fn(()) -> &'{erased} str, bound_vars: [] },
                (&'{erased} usize,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2016:29: 2016:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:2014:9: 2016:68 (#0),
                },
            ),
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2016:29: 2016:67 (#0),
            scope: scope[0],
        },
    },
]