[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = _1,
            StorageLive(_4),
            _4 = &(*_2),
            StorageLive(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:161:20: 161:32 (#0),
                    scope: scope[0],
                },
                kind: _5 = core::cell::Cell::<u32>::new(const 0_u32) -> [return: bb1, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:162:18: 162:30 (#0),
                    scope: scope[0],
                },
                kind: _6 = core::cell::Cell::<usize>::new(const 0_usize) -> [return: bb2, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:163:29: 163:44 (#0),
                    scope: scope[0],
                },
                kind: _10 = core::str::<impl str>::chars(move _11) -> [return: bb3, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _9 = &mut _10,
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:163:29: 163:51 (#0),
                    scope: scope[0],
                },
                kind: _8 = <core::str::Chars<'_> as core::iter::Iterator>::next(move _9) -> [return: bb4, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:163:19: 163:52 (#0),
                    scope: scope[0],
                },
                kind: _7 = core::cell::Cell::<core::option::Option<char>>::new(move _8) -> [return: bb5, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageLive(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:164:28: 164:40 (#0),
                    scope: scope[0],
                },
                kind: _12 = core::cell::Cell::<u32>::new(const 0_u32) -> [return: bb6, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            StorageLive(_14),
            _14 = (_1.1: hir::Flags),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:165:20: 165:46 (#0),
                    scope: scope[0],
                },
                kind: _13 = core::cell::RefCell::<hir::Flags>::new(move _14) -> [return: bb7, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageLive(_15),
            StorageLive(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9: 44:32 (#13),
                    scope: scope[0],
                },
                kind: _16 = alloc::vec::Vec::<alloc::string::String>::new() -> [return: bb8, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:166:28: 166:48 (#0),
                    scope: scope[0],
                },
                kind: _15 = core::cell::RefCell::<alloc::vec::Vec<alloc::string::String>>::new(move _16) -> [return: bb9, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            _0 = hir::parse::Parser::<'_> { config: move _3, pattern: move _4, depth: move _5, pos: move _6, char: move _7, capture_index: move _12, flags: move _13, capture_names: move _15 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:167:9: 167:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_15) -> [return: bb10, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
            StorageDead(_3),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:168:6: 168:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:166:47: 166:48 (#0),
                    scope: scope[0],
                },
                kind: drop(_16) -> [return: bb12, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:157:5: 168:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:157:60: 157:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/hir/parse.rs:157:31: 157:37 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/hir/parse.rs:157:23: 157:29 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:157:23: 157:29 (#0),
                    },
                ),
            ),
        ),
        ty: hir::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:157:23: 157:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/hir/parse.rs:157:48: 157:55 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/hir/parse.rs:157:39: 157:46 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:157:39: 157:46 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:157:39: 157:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: hir::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:159:13: 159:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:160:13: 160:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::cell::Cell<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:161:20: 161:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::cell::Cell<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:162:18: 162:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::cell::Cell<core::option::Option<char>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:163:19: 163:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:158:9: 167:10 (#0),
                },
            ),
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:163:29: 163:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:158:9: 167:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:163:29: 163:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:158:9: 167:10 (#0),
                },
            ),
        ),
        ty: core::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:163:29: 163:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:158:9: 167:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:163:29: 163:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::cell::Cell<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:164:28: 164:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::cell::RefCell<hir::Flags>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:165:20: 165:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:158:9: 167:10 (#0),
                },
            ),
        ),
        ty: hir::Flags,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:165:33: 165:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::cell::RefCell<alloc::vec::Vec<alloc::string::String, alloc::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:166:28: 166:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:158:9: 167:10 (#0),
                },
            ),
        ),
        ty: alloc::vec::Vec<alloc::string::String, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9: 44:32 (#13),
            scope: scope[0],
        },
    },
]