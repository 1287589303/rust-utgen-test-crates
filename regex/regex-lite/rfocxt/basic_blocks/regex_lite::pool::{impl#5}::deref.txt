[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &((*_1).1: core::option::Option<alloc::boxed::Box<T>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pool.rs:100:9: 100:30 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::option::Option::<alloc::boxed::Box<T>>::as_deref(move _4) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pool.rs:100:9: 100:39 (#0),
                    scope: scope[0],
                },
                kind: _2 = core::option::Option::<&T>::unwrap(move _3) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = &(*_2),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pool.rs:101:6: 101:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pool.rs:99:5: 101:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pool.rs:99:24: 99:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} pool::PoolGuard<'{erased}, T/#1, F/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pool.rs:99:14: 99:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/pool.rs:100:9: 100:39 (#0),
                },
            ),
        ),
        ty: &'{erased} T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pool.rs:100:9: 100:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/pool.rs:100:9: 100:39 (#0),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pool.rs:100:9: 100:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/pool.rs:100:9: 100:39 (#0),
                },
            ),
        ),
        ty: &'{erased} core::option::Option<alloc::boxed::Box<T/#1, alloc::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pool.rs:100:9: 100:19 (#0),
            scope: scope[0],
        },
    },
]