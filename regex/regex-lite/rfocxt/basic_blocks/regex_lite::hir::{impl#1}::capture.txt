[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = ((*(_1.2: alloc::boxed::Box<hir::Hir>)).1: bool),
            FakeRead(ForLet(None), _2),
            StorageLive(_3),
            _3 = ((*(_1.2: alloc::boxed::Box<hir::Hir>)).2: bool),
            FakeRead(ForLet(None), _3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = ((*(_1.2: alloc::boxed::Box<hir::Hir>)).3: core::option::Option<usize>),
            StorageLive(_6),
            _6 = {closure@regex-lite/src/hir/mod.rs:301:18: 301:23},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:298:44: 301:46 (#0),
                    scope: scope[2],
                },
                kind: _4 = core::option::Option::<usize>::map::<usize, {closure@regex-lite/src/hir/mod.rs:301:18: 301:23}>(move _5, move _6) -> [return: bb1, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageLive(_7),
            StorageLive(_8),
            _8 = move _1,
            _7 = hir::HirKind::Capture(move _8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:302:40: 302:41 (#0),
                    scope: scope[3],
                },
                kind: drop(_8) -> [return: bb2, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            FakeRead(ForLet(None), _7),
            StorageLive(_9),
            _9 = move _7,
            StorageLive(_10),
            _10 = _2,
            StorageLive(_11),
            _11 = _3,
            StorageLive(_12),
            _12 = _4,
            _0 = hir::Hir { kind: move _9, is_start_anchored: move _10, is_match_empty: move _11, static_explicit_captures_len: move _12 },
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:308:9: 308:10 (#0),
                    scope: scope[4],
                },
                kind: drop(_9) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:309:5: 309:6 (#0),
                    scope: scope[3],
                },
                kind: drop(_7) -> [return: bb4, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_4),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:309:5: 309:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb5, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:309:6: 309:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:309:5: 309:6 (#0),
                    scope: scope[3],
                },
                kind: drop(_7) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:309:5: 309:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:295:5: 309:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:295:33: 295:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/hir/mod.rs:295:21: 295:28 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/hir/mod.rs:295:16: 295:19 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/mod.rs:295:16: 295:19 (#0),
                    },
                ),
            ),
        ),
        ty: hir::Capture,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:295:16: 295:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/hir/mod.rs:296:33: 296:58 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/mod.rs:296:13: 296:30 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:296:13: 296:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/hir/mod.rs:297:30: 297:52 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/mod.rs:297:13: 297:27 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:297:13: 297:27 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/hir/mod.rs:298:44: 301:46 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/mod.rs:298:13: 298:41 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:298:13: 298:41 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:298:44: 300:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:178 ~ regex_lite[fbae]::hir::{impl#1}::capture::{closure#0}),
            [
                i32,
                Binder { value: extern "RustCall" fn((usize,)) -> usize, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:301:18: 301:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/hir/mod.rs:302:20: 302:41 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/mod.rs:302:13: 302:17 (#0),
                    },
                ),
            ),
        ),
        ty: hir::HirKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:302:13: 302:17 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: hir::Capture,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:302:37: 302:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: hir::HirKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:304:13: 304:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:305:13: 305:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:306:13: 306:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:307:13: 307:41 (#0),
            scope: scope[0],
        },
    },
]