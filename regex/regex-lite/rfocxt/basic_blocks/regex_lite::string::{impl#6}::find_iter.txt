[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = &(*_2),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &((*_1).0: alloc::sync::Arc<pikevm::PikeVM>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:255:17: 255:76 (#0),
                    scope: scope[0],
                },
                kind: _6 = <alloc::sync::Arc<pikevm::PikeVM> as core::ops::Deref>::deref(move _7) -> [return: bb1, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = &(*_6),
            StorageDead(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &((*_1).1: pool::Pool<pikevm::Cache, alloc::boxed::Box<dyn core::ops::Fn() -> pikevm::Cache + core::marker::Send + core::marker::Sync + core::panic::RefUnwindSafe + core::panic::UnwindSafe>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:255:39: 255:54 (#0),
                    scope: scope[0],
                },
                kind: _8 = pool::Pool::<pikevm::Cache, alloc::boxed::Box<dyn core::ops::Fn() -> pikevm::Cache + core::marker::Send + core::marker::Sync + core::panic::RefUnwindSafe + core::panic::UnwindSafe>>::get(move _9) -> [return: bb2, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:255:56: 255:75 (#0),
                    scope: scope[0],
                },
                kind: _11 = core::str::<impl str>::as_bytes(move _12) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = &(*_11),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:255:17: 255:76 (#0),
                    scope: scope[0],
                },
                kind: _4 = pikevm::PikeVM::find_iter(move _5, move _8, move _10) -> [return: bb4, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_5),
            _0 = string::Matches::<'_, '_> { haystack: move _3, it: move _4 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:256:9: 256:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb5, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
            StorageDead(_11),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:257:6: 257:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:255:75: 255:76 (#0),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:252:5: 257:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: string::Matches<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:252:62: 252:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} string::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:252:30: 252:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/string.rs:252:50: 252:57 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/string.rs:252:40: 252:48 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:252:40: 252:48 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:252:40: 252:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:254:13: 254:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: pikevm::FindMatches<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:255:17: 255:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:253:9: 256:10 (#0),
                },
            ),
        ),
        ty: &'{erased} pikevm::PikeVM,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:255:17: 255:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:253:9: 256:10 (#0),
                },
            ),
        ),
        ty: &'{erased} pikevm::PikeVM,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:255:17: 255:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:253:9: 256:10 (#0),
                },
            ),
        ),
        ty: &'{erased} alloc::sync::Arc<pikevm::PikeVM, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:255:17: 255:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:253:9: 256:10 (#0),
                },
            ),
        ),
        ty: pool::PoolGuard<'{erased}, pikevm::Cache, alloc::boxed::Box<dyn [Binder { value: Trait(core::ops::Fn<()>), bound_vars: [] }, Binder { value: Projection(Output = pikevm::Cache), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:3316 ~ core[a245]::marker::Sync)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:32818 ~ core[a245]::marker::Send)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42674 ~ core[a245]::panic::unwind_safe::RefUnwindSafe)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42673 ~ core[a245]::panic::unwind_safe::UnwindSafe)), bound_vars: [] }] + '{erased}, alloc::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:255:39: 255:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:253:9: 256:10 (#0),
                },
            ),
        ),
        ty: &'{erased} pool::Pool<pikevm::Cache, alloc::boxed::Box<dyn [Binder { value: Trait(core::ops::Fn<()>), bound_vars: [] }, Binder { value: Projection(Output = pikevm::Cache), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:3316 ~ core[a245]::marker::Sync)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:32818 ~ core[a245]::marker::Send)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42674 ~ core[a245]::panic::unwind_safe::RefUnwindSafe)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42673 ~ core[a245]::panic::unwind_safe::UnwindSafe)), bound_vars: [] }] + '{erased}, alloc::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:255:39: 255:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:253:9: 256:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:255:56: 255:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:253:9: 256:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:255:56: 255:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:253:9: 256:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:255:56: 255:64 (#0),
            scope: scope[0],
        },
    },
]