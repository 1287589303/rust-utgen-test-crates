[
    BasicBlockData {
        statements: [
            StorageLive(_8),
            StorageLive(_9),
            _9 = &mut (*_2),
            StorageLive(_10),
            StorageLive(_11),
            _11 = _7,
            _10 = pikevm::FollowEpsilon::Explore(move _11),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:316:9: 316:48 (#0),
                    scope: scope[0],
                },
                kind: _8 = alloc::vec::Vec::<pikevm::FollowEpsilon>::push(move _9, move _10) -> [return: bb1, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:317:9: 328:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:317:9: 328:10 (#0),
                    scope: scope[0],
                },
                kind: falseUnwind -> [real: bb3, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            StorageLive(_14),
            _14 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:317:33: 317:44 (#0),
                    scope: scope[1],
                },
                kind: _13 = alloc::vec::Vec::<pikevm::FollowEpsilon>::pop(move _14) -> [return: bb4, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            PlaceMention(_13),
            _15 = discriminant(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:317:19: 317:30 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _15) -> [1: bb5, otherwise: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:317:19: 317:30 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = move ((_13 as Some).0: pikevm::FollowEpsilon),
            PlaceMention(_16),
            _17 = discriminant(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:318:13: 318:24 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _17) -> [0: bb9, 1: bb8, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:318:19: 318:24 (#0),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:319:17: 319:63 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_25),
            _25 = ((_16 as Explore).0: u32),
            StorageLive(_26),
            StorageLive(_27),
            _27 = &(*_1),
            StorageLive(_28),
            _28 = &mut (*_2),
            StorageLive(_29),
            _29 = &mut (*_3),
            StorageLive(_30),
            _30 = &mut (*_4),
            StorageLive(_31),
            _31 = &(*_5),
            StorageLive(_32),
            _32 = _6,
            StorageLive(_33),
            _33 = _25,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:323:21: 325:22 (#0),
                    scope: scope[3],
                },
                kind: _26 = pikevm::PikeVM::epsilon_closure_explore(move _27, move _28, move _29, move _30, move _31, move _32, move _33) -> [return: bb13, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_18),
            _18 = ((_16 as RestoreCapture).0: u32),
            StorageLive(_19),
            _19 = ((_16 as RestoreCapture).1: core::option::Option<int::NonMaxUsize>),
            StorageLive(_20),
            _20 = _19,
            StorageLive(_21),
            StorageLive(_22),
            _22 = _18,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:320:32: 320:47 (#0),
                    scope: scope[2],
                },
                kind: _21 = <u32 as int::U32>::as_usize(move _22) -> [return: bb11, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            _23 = Len((*_3)),
            _24 = Lt(_21, _23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:320:21: 320:48 (#0),
                    scope: scope[2],
                },
                kind: assert(move _24, "index out of bounds: the length is {} but the index is {}", move _23, _21) -> [success: bb12, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_3)[_21] = move _20,
            StorageDead(_20),
            StorageDead(_21),
            _12 = const (),
            StorageDead(_19),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:321:17: 321:18 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_32),
            StorageDead(_31),
            StorageDead(_30),
            StorageDead(_29),
            StorageDead(_28),
            StorageDead(_27),
            StorageDead(_26),
            _12 = const (),
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:326:17: 326:18 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:317:9: 328:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_35),
            _0 = const (),
            StorageDead(_35),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:329:6: 329:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:307:5: 329:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:315:6: 315:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} pikevm::PikeVM,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:308:9: 308:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/pikevm.rs:309:16: 309:39 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/pikevm.rs:309:9: 309:14 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/pikevm.rs:309:9: 309:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut alloc::vec::Vec<pikevm::FollowEpsilon, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:309:9: 309:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/pikevm.rs:310:21: 310:47 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/pikevm.rs:310:9: 310:19 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/pikevm.rs:310:9: 310:19 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [core::option::Option<int::NonMaxUsize>],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:310:9: 310:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/pikevm.rs:311:15: 311:32 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/pikevm.rs:311:9: 311:13 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/pikevm.rs:311:9: 311:13 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut pikevm::ActiveStates,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:311:9: 311:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/pikevm.rs:312:19: 312:24 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/pikevm.rs:312:9: 312:17 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/pikevm.rs:312:9: 312:17 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:312:9: 312:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/pikevm.rs:313:13: 313:18 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/pikevm.rs:313:9: 313:11 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/pikevm.rs:313:9: 313:11 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:313:9: 313:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/pikevm.rs:314:14: 314:21 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/pikevm.rs:314:9: 314:12 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/pikevm.rs:314:9: 314:12 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:314:9: 314:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:316:9: 316:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::vec::Vec<pikevm::FollowEpsilon, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:316:9: 316:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: pikevm::FollowEpsilon,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:316:20: 316:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:316:43: 316:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:307:5: 329:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/pikevm.rs:317:9: 328:10 (#726),
                },
            ),
        ),
        ty: core::option::Option<pikevm::FollowEpsilon>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:317:33: 317:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/pikevm.rs:317:9: 328:10 (#726),
                },
            ),
        ),
        ty: &'{erased} mut alloc::vec::Vec<pikevm::FollowEpsilon, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:317:33: 317:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:317:19: 317:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _13,
                                ),
                                regex-lite/src/pikevm.rs:317:33: 317:44 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/pikevm.rs:317:19: 317:30 (#0),
                    },
                ),
            ),
        ),
        ty: pikevm::FollowEpsilon,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:317:24: 317:29 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:319:17: 319:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _16,
                                ),
                                regex-lite/src/pikevm.rs:318:19: 318:24 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/pikevm.rs:319:17: 319:63 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:319:49: 319:53 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _16,
                                ),
                                regex-lite/src/pikevm.rs:318:19: 318:24 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/pikevm.rs:319:17: 319:63 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<int::NonMaxUsize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:319:55: 319:61 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<int::NonMaxUsize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:320:51: 320:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:320:32: 320:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:320:32: 320:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:320:21: 320:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:320:21: 320:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _16,
                                ),
                                regex-lite/src/pikevm.rs:318:19: 318:24 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/pikevm.rs:322:17: 322:44 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:322:40: 322:43 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:323:21: 325:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} pikevm::PikeVM,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:323:21: 323:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::vec::Vec<pikevm::FollowEpsilon, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:324:25: 324:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [core::option::Option<int::NonMaxUsize>],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:324:32: 324:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut pikevm::ActiveStates,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:324:44: 324:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:324:50: 324:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:324:60: 324:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:324:64: 324:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/pikevm.rs:317:9: 328:10 (#726),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:317:9: 328:10 (#726),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:317:9: 328:10 (#726),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:317:9: 328:10 (#726),
            scope: scope[0],
        },
    },
]