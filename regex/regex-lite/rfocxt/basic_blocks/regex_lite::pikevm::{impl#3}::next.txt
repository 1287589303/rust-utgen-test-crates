[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &mut ((*_1).0: pikevm::FindMatches<'_, '_>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:525:9: 525:23 (#0),
                    scope: scope[0],
                },
                kind: _4 = <pikevm::FindMatches<'_, '_> as core::iter::Iterator>::next(move _5) -> [return: bb1, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:525:9: 525:24 (#737),
                    scope: scope[0],
                },
                kind: _3 = <core::option::Option<(usize, usize)> as core::ops::Try>::branch(move _4) -> [return: bb2, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            PlaceMention(_3),
            _6 = discriminant(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:525:9: 525:24 (#737),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [0: bb5, 1: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:525:9: 525:24 (#737),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:525:23: 525:24 (#738),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = ((_3 as Continue).0: (usize, usize)),
            _2 = _10,
            StorageDead(_10),
            StorageDead(_3),
            StorageDead(_2),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &(((*_1).0: pikevm::FindMatches<'_, '_>).4: alloc::vec::Vec<core::option::Option<int::NonMaxUsize>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:526:14: 526:35 (#0),
                    scope: scope[0],
                },
                kind: _11 = <alloc::vec::Vec<core::option::Option<int::NonMaxUsize>> as core::clone::Clone>::clone(move _12) -> [return: bb8, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            _7 = ((_3 as Break).0: core::option::Option<core::convert::Infallible>),
            StorageLive(_9),
            _9 = _7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:525:9: 525:24 (#737),
                    scope: scope[2],
                },
                kind: _0 = <core::option::Option<alloc::vec::Vec<core::option::Option<int::NonMaxUsize>>> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _9) -> [return: bb7, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_7),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:527:6: 527:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            _0 = core::option::Option::<alloc::vec::Vec<core::option::Option<int::NonMaxUsize>>>::Some(move _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:526:35: 526:36 (#0),
                    scope: scope[0],
                },
                kind: drop(_11) -> [return: bb9, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:527:6: 527:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:527:6: 527:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:524:5: 527:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<alloc::vec::Vec<core::option::Option<int::NonMaxUsize>, alloc::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:524:27: 524:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut pikevm::CapturesMatches<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:524:13: 524:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (usize, usize),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:525:9: 525:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, (usize, usize)>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:525:9: 525:24 (#737),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(usize, usize)>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:525:9: 525:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut pikevm::FindMatches<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:525:9: 525:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:525:23: 525:24 (#738),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                regex-lite/src/pikevm.rs:525:9: 525:24 (#737),
                            ),
                        ),
                        pat_span: regex-lite/src/pikevm.rs:525:23: 525:24 (#738),
                    },
                ),
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:525:23: 525:24 (#738),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:525:23: 525:24 (#738),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:525:23: 525:24 (#738),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                regex-lite/src/pikevm.rs:525:9: 525:24 (#737),
                            ),
                        ),
                        pat_span: regex-lite/src/pikevm.rs:525:9: 525:24 (#737),
                    },
                ),
            ),
        ),
        ty: (usize, usize),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:525:9: 525:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: alloc::vec::Vec<core::option::Option<int::NonMaxUsize>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:526:14: 526:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/pikevm.rs:526:9: 526:36 (#0),
                },
            ),
        ),
        ty: &'{erased} alloc::vec::Vec<core::option::Option<int::NonMaxUsize>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:526:14: 526:27 (#0),
            scope: scope[0],
        },
    },
]