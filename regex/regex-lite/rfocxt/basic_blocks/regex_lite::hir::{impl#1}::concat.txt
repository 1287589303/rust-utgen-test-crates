[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:312:12: 312:27 (#0),
                    scope: scope[0],
                },
                kind: _2 = alloc::vec::Vec::<hir::Hir>::is_empty(move _3) -> [return: bb1, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:312:12: 312:27 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _2) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:313:13: 313:25 (#0),
                    scope: scope[0],
                },
                kind: _0 = hir::Hir::empty() -> [return: bb28, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:314:19: 314:29 (#0),
                    scope: scope[0],
                },
                kind: _5 = alloc::vec::Vec::<hir::Hir>::len(move _6) -> [return: bb4, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            _4 = Eq(move _5, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:314:19: 314:34 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb8, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &mut _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:315:13: 315:23 (#0),
                    scope: scope[0],
                },
                kind: _7 = alloc::vec::Vec::<hir::Hir>::pop(move _8) -> [return: bb6, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:315:13: 315:32 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::option::Option::<hir::Hir>::unwrap(move _7) -> [return: bb7, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:314:16: 334:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:317:41: 317:44 (#0),
                    scope: scope[0],
                },
                kind: _10 = <alloc::vec::Vec<hir::Hir> as core::ops::Index<usize>>::index(move _11, const 0_usize) -> [return: bb9, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            _9 = ((*_10).1: bool),
            FakeRead(ForLet(None), _9),
            StorageDead(_10),
            StorageLive(_12),
            _12 = const true,
            FakeRead(ForLet(None), _12),
            StorageLive(_13),
            _13 = core::option::Option::<usize>::Some(const 0_usize),
            FakeRead(ForLet(None), _13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:320:24: 320:35 (#0),
                    scope: scope[3],
                },
                kind: _18 = <alloc::vec::Vec<hir::Hir> as core::ops::Deref>::deref(move _19) -> [return: bb10, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _17 = &(*_18),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:320:24: 320:35 (#0),
                    scope: scope[3],
                },
                kind: _16 = core::slice::<impl [hir::Hir]>::iter(move _17) -> [return: bb11, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:320:24: 320:35 (#464),
                    scope: scope[3],
                },
                kind: _15 = <core::slice::Iter<'_, hir::Hir> as core::iter::IntoIterator>::into_iter(move _16) -> [return: bb12, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            PlaceMention(_15),
            StorageLive(_20),
            _20 = move _15,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:320:13: 327:14 (#463),
                    scope: scope[4],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:320:13: 327:14 (#463),
                    scope: scope[4],
                },
                kind: falseUnwind -> [real: bb14, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            _25 = &mut _20,
            _24 = &mut (*_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:320:24: 320:35 (#464),
                    scope: scope[4],
                },
                kind: _23 = <core::slice::Iter<'_, hir::Hir> as core::iter::Iterator>::next(move _24) -> [return: bb15, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            PlaceMention(_23),
            _26 = discriminant(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:320:24: 320:35 (#464),
                    scope: scope[4],
                },
                kind: switchInt(move _26) -> [0: bb17, 1: bb18, otherwise: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:320:24: 320:35 (#464),
                    scope: scope[4],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:320:13: 327:14 (#463),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb19, imaginary: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_28),
            _28 = ((_23 as Some).0: &hir::Hir),
            StorageLive(_29),
            StorageLive(_30),
            _30 = _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:321:34: 321:48 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _30) -> [0: bb21, otherwise: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _14 = const (),
            StorageDead(_25),
            StorageDead(_23),
            StorageDead(_22),
            StorageDead(_20),
            StorageDead(_18),
            StorageDead(_15),
            StorageDead(_14),
            StorageLive(_37),
            StorageLive(_38),
            _38 = move _1,
            _37 = hir::HirKind::Concat(move _38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:329:43: 329:44 (#0),
                    scope: scope[3],
                },
                kind: drop(_38) -> [return: bb25, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _29 = ((*_28).2: bool),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:321:34: 321:70 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb22,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _29 = const false,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:321:34: 321:70 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb22,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            _12 = move _29,
            StorageDead(_29),
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            _33 = _13,
            StorageLive(_34),
            StorageLive(_35),
            _35 = &(*_28),
            _34 = {closure@regex-lite/src/hir/mod.rs:323:31: 323:37} { sub: move _35 },
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:322:48: 325:23 (#0),
                    scope: scope[5],
                },
                kind: _32 = core::option::Option::<usize>::and_then::<(usize, usize), {closure@regex-lite/src/hir/mod.rs:323:31: 323:37}>(move _33, move _34) -> [return: bb23, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_33),
            StorageLive(_36),
            _36 = {closure@regex-lite/src/hir/mod.rs:326:31: 326:45},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:322:48: 326:78 (#0),
                    scope: scope[5],
                },
                kind: _31 = core::option::Option::<(usize, usize)>::and_then::<usize, {closure@regex-lite/src/hir/mod.rs:326:31: 326:45}>(move _32, move _36) -> [return: bb24, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_32),
            _13 = move _31,
            StorageDead(_31),
            _22 = const (),
            StorageDead(_28),
            StorageDead(_25),
            StorageDead(_23),
            StorageDead(_22),
            _21 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:320:13: 327:14 (#463),
                    scope: scope[4],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            StorageLive(_39),
            _39 = _9,
            StorageLive(_40),
            _40 = _12,
            StorageLive(_41),
            _41 = _13,
            _0 = hir::Hir { kind: move _37, is_start_anchored: move _39, is_match_empty: move _40, static_explicit_captures_len: move _41 },
            StorageDead(_41),
            StorageDead(_40),
            StorageDead(_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:333:13: 333:14 (#0),
                    scope: scope[3],
                },
                kind: drop(_37) -> [return: bb26, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:314:16: 334:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:312:9: 334:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb28,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:335:5: 335:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb29, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:335:6: 335:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:333:13: 333:14 (#0),
                    scope: scope[3],
                },
                kind: drop(_37) -> [return: bb32, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:315:31: 315:32 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb32, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:335:5: 335:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb33, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:311:5: 335:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:311:38: 311:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/hir/mod.rs:311:25: 311:33 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/hir/mod.rs:311:15: 311:23 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/mod.rs:311:15: 311:23 (#0),
                    },
                ),
            ),
        ),
        ty: alloc::vec::Vec<hir::Hir, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:311:15: 311:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/mod.rs:312:9: 334:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:312:12: 312:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/mod.rs:312:9: 334:10 (#0),
                },
            ),
        ),
        ty: &'{erased} alloc::vec::Vec<hir::Hir, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:312:12: 312:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/mod.rs:312:9: 334:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:314:19: 314:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/mod.rs:312:9: 334:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:314:19: 314:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/mod.rs:312:9: 334:10 (#0),
                },
            ),
        ),
        ty: &'{erased} alloc::vec::Vec<hir::Hir, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:314:19: 314:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/mod.rs:315:13: 315:32 (#0),
                },
            ),
        ),
        ty: core::option::Option<hir::Hir>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:315:13: 315:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/mod.rs:315:13: 315:32 (#0),
                },
            ),
        ),
        ty: &'{erased} mut alloc::vec::Vec<hir::Hir, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:315:13: 315:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/hir/mod.rs:317:37: 317:62 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/mod.rs:317:17: 317:34 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:317:17: 317:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:317:41: 317:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::vec::Vec<hir::Hir, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:317:37: 317:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/hir/mod.rs:318:38: 318:42 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/mod.rs:318:17: 318:35 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:318:17: 318:35 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/hir/mod.rs:319:52: 319:64 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/mod.rs:319:17: 319:49 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:319:17: 319:49 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:320:13: 327:14 (#463),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::Iter<'{erased}, hir::Hir>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:320:24: 320:35 (#464),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::Iter<'{erased}, hir::Hir>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:320:24: 320:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:320:24: 320:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [hir::Hir],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:320:24: 320:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::vec::Vec<hir::Hir, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:320:24: 320:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _15,
                                ),
                                regex-lite/src/hir/mod.rs:320:24: 320:35 (#464),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/mod.rs:320:24: 320:35 (#464),
                    },
                ),
            ),
        ),
        ty: core::slice::Iter<'{erased}, hir::Hir>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:320:24: 320:35 (#464),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:311:5: 335:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:320:24: 320:35 (#464),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} hir::Hir>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:320:24: 320:35 (#464),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, hir::Hir>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:320:24: 320:35 (#464),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, hir::Hir>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:320:24: 320:35 (#464),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:320:13: 327:14 (#463),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:320:13: 327:14 (#463),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _23,
                                ),
                                regex-lite/src/hir/mod.rs:320:24: 320:35 (#464),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/mod.rs:320:17: 320:20 (#465),
                    },
                ),
            ),
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:320:17: 320:20 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:321:34: 321:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:321:34: 321:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:322:48: 326:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(usize, usize)>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:322:48: 325:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:322:48: 322:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:180 ~ regex_lite[fbae]::hir::{impl#1}::concat::{closure#0}),
            [
                i32,
                Binder { value: extern "RustCall" fn((usize,)) -> core::option::Option<(usize, usize)>, bound_vars: [] },
                (&'{erased} hir::Hir,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:323:31: 325:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:323:31: 325:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:181 ~ regex_lite[fbae]::hir::{impl#1}::concat::{closure#1}),
            [
                i32,
                Binder { value: extern "RustCall" fn(((usize, usize),)) -> core::option::Option<usize>, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:326:31: 326:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: hir::HirKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:329:23: 329:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: alloc::vec::Vec<hir::Hir, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:329:39: 329:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:330:17: 330:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:331:17: 331:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:332:17: 332:45 (#0),
            scope: scope[0],
        },
    },
]