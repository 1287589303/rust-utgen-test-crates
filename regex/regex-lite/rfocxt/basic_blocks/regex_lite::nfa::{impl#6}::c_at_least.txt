[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            _6 = _4,
            _5 = Eq(move _6, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:449:12: 449:18 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _5) -> [0: bb102, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:454:17: 454:37 (#0),
                    scope: scope[0],
                },
                kind: _8 = hir::Hir::is_match_empty(move _9) -> [return: bb2, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:454:17: 454:37 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _8) -> [0: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            _7 = const (),
            StorageDead(_8),
            StorageDead(_7),
            StorageLive(_59),
            StorageLive(_60),
            StorageLive(_61),
            StorageLive(_62),
            _62 = &(*_1),
            StorageLive(_63),
            _63 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:473:28: 473:39 (#0),
                    scope: scope[0],
                },
                kind: _61 = nfa::Compiler::c(move _62, move _63) -> [return: bb35, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &(*_1),
            StorageLive(_15),
            StorageLive(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9: 44:32 (#165),
                    scope: scope[0],
                },
                kind: _16 = alloc::vec::Vec::<u32>::new() -> [return: bb5, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_17),
            StorageLive(_18),
            _18 = _3,
            _17 = Not(move _18),
            StorageDead(_18),
            _15 = nfa::State::Splits { targets: move _16, reverse: move _17 },
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:458:17: 458:18 (#0),
                    scope: scope[0],
                },
                kind: drop(_16) -> [return: bb6, unwind: bb200],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:455:30: 458:19 (#0),
                    scope: scope[0],
                },
                kind: _13 = nfa::Compiler::add(move _14, move _15) -> [return: bb7, unwind: bb200],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:455:30: 458:20 (#590),
                    scope: scope[0],
                },
                kind: _12 = <core::result::Result<u32, error::Error> as core::ops::Try>::branch(move _13) -> [return: bb8, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            PlaceMention(_12),
            _19 = discriminant(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:455:30: 458:20 (#590),
                    scope: scope[0],
                },
                kind: switchInt(move _19) -> [0: bb11, 1: bb10, otherwise: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:455:30: 458:20 (#590),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:458:19: 458:20 (#591),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb12, imaginary: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_23),
            _23 = ((_12 as Continue).0: u32),
            _11 = _23,
            StorageDead(_23),
            FakeRead(ForLet(None), _11),
            StorageDead(_12),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            _27 = &(*_1),
            StorageLive(_28),
            _28 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:459:32: 459:43 (#0),
                    scope: scope[1],
                },
                kind: _26 = nfa::Compiler::c(move _27, move _28) -> [return: bb14, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_20),
            _20 = move ((_12 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_22),
            _22 = move _20,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:455:30: 458:20 (#590),
                    scope: scope[3],
                },
                kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _22) -> [return: bb13, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_20),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb193,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:459:32: 459:44 (#592),
                    scope: scope[1],
                },
                kind: _25 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::Try>::branch(move _26) -> [return: bb15, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            PlaceMention(_25),
            _29 = discriminant(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:459:32: 459:44 (#592),
                    scope: scope[1],
                },
                kind: switchInt(move _29) -> [0: bb18, 1: bb17, otherwise: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:459:32: 459:44 (#592),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:459:43: 459:44 (#593),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb19, imaginary: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_33),
            _33 = ((_25 as Continue).0: nfa::ThompsonRef),
            _24 = _33,
            StorageDead(_33),
            FakeRead(ForLet(None), _24),
            StorageDead(_25),
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            StorageLive(_37),
            _37 = &(*_1),
            StorageLive(_38),
            _38 = _11,
            StorageLive(_39),
            _39 = (_24.0: u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:460:17: 460:51 (#0),
                    scope: scope[6],
                },
                kind: _36 = nfa::Compiler::patch(move _37, move _38, move _39) -> [return: bb21, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_30),
            _30 = move ((_25 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_32),
            _32 = move _30,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:459:32: 459:44 (#592),
                    scope: scope[8],
                },
                kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _32) -> [return: bb20, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            StorageDead(_30),
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb192,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            StorageDead(_38),
            StorageDead(_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:460:17: 460:52 (#594),
                    scope: scope[6],
                },
                kind: _35 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _36) -> [return: bb22, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            PlaceMention(_35),
            _40 = discriminant(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:460:17: 460:52 (#594),
                    scope: scope[6],
                },
                kind: switchInt(move _40) -> [0: bb25, 1: bb24, otherwise: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:460:17: 460:52 (#594),
                    scope: scope[6],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:460:51: 460:52 (#595),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb26, imaginary: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_44),
            _44 = ((_35 as Continue).0: ()),
            _34 = _44,
            StorageDead(_44),
            StorageDead(_35),
            StorageDead(_34),
            StorageLive(_45),
            StorageLive(_46),
            StorageLive(_47),
            StorageLive(_48),
            _48 = &(*_1),
            StorageLive(_49),
            _49 = (_24.1: u32),
            StorageLive(_50),
            _50 = _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:461:17: 461:49 (#0),
                    scope: scope[6],
                },
                kind: _47 = nfa::Compiler::patch(move _48, move _49, move _50) -> [return: bb28, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_41),
            _41 = move ((_35 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_43),
            _43 = move _41,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:460:17: 460:52 (#594),
                    scope: scope[12],
                },
                kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _43) -> [return: bb27, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            StorageDead(_41),
            StorageDead(_35),
            StorageDead(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb192,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            StorageDead(_49),
            StorageDead(_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:461:17: 461:50 (#596),
                    scope: scope[6],
                },
                kind: _46 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _47) -> [return: bb29, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            PlaceMention(_46),
            _51 = discriminant(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:461:17: 461:50 (#596),
                    scope: scope[6],
                },
                kind: switchInt(move _51) -> [0: bb32, 1: bb31, otherwise: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:461:17: 461:50 (#596),
                    scope: scope[6],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:461:49: 461:50 (#597),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb33, imaginary: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_55),
            _55 = ((_46 as Continue).0: ()),
            _45 = _55,
            StorageDead(_55),
            StorageDead(_46),
            StorageDead(_45),
            StorageLive(_56),
            StorageLive(_57),
            _57 = _11,
            StorageLive(_58),
            _58 = _11,
            _56 = nfa::ThompsonRef { start: move _57, end: move _58 },
            StorageDead(_58),
            StorageDead(_57),
            _0 = core::result::Result::<nfa::ThompsonRef, error::Error>::Ok(move _56),
            StorageDead(_56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:462:17: 462:70 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb192,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_52),
            _52 = move ((_46 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_54),
            _54 = move _52,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:461:17: 461:50 (#596),
                    scope: scope[16],
                },
                kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _54) -> [return: bb34, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            StorageDead(_52),
            StorageDead(_46),
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb192,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
            StorageDead(_62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:473:28: 473:40 (#598),
                    scope: scope[0],
                },
                kind: _60 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::Try>::branch(move _61) -> [return: bb36, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_61),
            PlaceMention(_60),
            _64 = discriminant(_60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:473:28: 473:40 (#598),
                    scope: scope[0],
                },
                kind: switchInt(move _64) -> [0: bb39, 1: bb38, otherwise: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:473:28: 473:40 (#598),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:473:39: 473:40 (#599),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb40, imaginary: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_68),
            _68 = ((_60 as Continue).0: nfa::ThompsonRef),
            _59 = _68,
            StorageDead(_68),
            FakeRead(ForLet(None), _59),
            StorageDead(_60),
            StorageLive(_69),
            StorageLive(_70),
            StorageLive(_71),
            StorageLive(_72),
            _72 = &(*_1),
            StorageLive(_73),
            StorageLive(_74),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9: 44:32 (#166),
                    scope: scope[19],
                },
                kind: _74 = alloc::vec::Vec::<u32>::new() -> [return: bb42, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_65),
            _65 = move ((_60 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_67),
            _67 = move _65,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:473:28: 473:40 (#598),
                    scope: scope[21],
                },
                kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _67) -> [return: bb41, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_67),
            StorageDead(_65),
            StorageDead(_60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb191,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_75),
            StorageLive(_76),
            _76 = _3,
            _75 = Not(move _76),
            StorageDead(_76),
            _73 = nfa::State::Splits { targets: move _74, reverse: move _75 },
            StorageDead(_75),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:475:76: 475:77 (#0),
                    scope: scope[19],
                },
                kind: drop(_74) -> [return: bb43, unwind: bb199],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_74),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:475:17: 475:78 (#0),
                    scope: scope[19],
                },
                kind: _71 = nfa::Compiler::add(move _72, move _73) -> [return: bb44, unwind: bb199],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_73),
            StorageDead(_72),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:475:17: 475:79 (#600),
                    scope: scope[19],
                },
                kind: _70 = <core::result::Result<u32, error::Error> as core::ops::Try>::branch(move _71) -> [return: bb45, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
            PlaceMention(_70),
            _77 = discriminant(_70),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:475:17: 475:79 (#600),
                    scope: scope[19],
                },
                kind: switchInt(move _77) -> [0: bb48, 1: bb47, otherwise: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _70),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:475:17: 475:79 (#600),
                    scope: scope[19],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:475:78: 475:79 (#601),
                    scope: scope[19],
                },
                kind: falseEdge -> [real: bb49, imaginary: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_81),
            _81 = ((_70 as Continue).0: u32),
            _69 = _81,
            StorageDead(_81),
            FakeRead(ForLet(None), _69),
            StorageDead(_70),
            StorageLive(_82),
            StorageLive(_83),
            StorageLive(_84),
            StorageLive(_85),
            _85 = &(*_1),
            StorageLive(_86),
            _86 = (_59.1: u32),
            StorageLive(_87),
            _87 = _69,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:476:13: 476:43 (#0),
                    scope: scope[24],
                },
                kind: _84 = nfa::Compiler::patch(move _85, move _86, move _87) -> [return: bb51, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_78),
            _78 = move ((_70 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_80),
            _80 = move _78,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:475:17: 475:79 (#600),
                    scope: scope[26],
                },
                kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _80) -> [return: bb50, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_80),
            StorageDead(_78),
            StorageDead(_70),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[19],
                },
                kind: goto -> bb190,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_87),
            StorageDead(_86),
            StorageDead(_85),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:476:13: 476:44 (#602),
                    scope: scope[24],
                },
                kind: _83 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _84) -> [return: bb52, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_84),
            PlaceMention(_83),
            _88 = discriminant(_83),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:476:13: 476:44 (#602),
                    scope: scope[24],
                },
                kind: switchInt(move _88) -> [0: bb55, 1: bb54, otherwise: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _83),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:476:13: 476:44 (#602),
                    scope: scope[24],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:476:43: 476:44 (#603),
                    scope: scope[24],
                },
                kind: falseEdge -> [real: bb56, imaginary: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_92),
            _92 = ((_83 as Continue).0: ()),
            _82 = _92,
            StorageDead(_92),
            StorageDead(_83),
            StorageDead(_82),
            StorageLive(_93),
            StorageLive(_94),
            StorageLive(_95),
            StorageLive(_96),
            _96 = &(*_1),
            StorageLive(_97),
            _97 = _69,
            StorageLive(_98),
            _98 = (_59.0: u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:477:13: 477:45 (#0),
                    scope: scope[24],
                },
                kind: _95 = nfa::Compiler::patch(move _96, move _97, move _98) -> [return: bb58, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_89),
            _89 = move ((_83 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_91),
            _91 = move _89,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:476:13: 476:44 (#602),
                    scope: scope[30],
                },
                kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _91) -> [return: bb57, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_91),
            StorageDead(_89),
            StorageDead(_83),
            StorageDead(_82),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[24],
                },
                kind: goto -> bb190,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_98),
            StorageDead(_97),
            StorageDead(_96),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:477:13: 477:46 (#604),
                    scope: scope[24],
                },
                kind: _94 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _95) -> [return: bb59, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_95),
            PlaceMention(_94),
            _99 = discriminant(_94),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:477:13: 477:46 (#604),
                    scope: scope[24],
                },
                kind: switchInt(move _99) -> [0: bb62, 1: bb61, otherwise: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _94),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:477:13: 477:46 (#604),
                    scope: scope[24],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:477:45: 477:46 (#605),
                    scope: scope[24],
                },
                kind: falseEdge -> [real: bb63, imaginary: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_103),
            _103 = ((_94 as Continue).0: ()),
            _93 = _103,
            StorageDead(_103),
            StorageDead(_94),
            StorageDead(_93),
            StorageLive(_104),
            StorageLive(_105),
            StorageLive(_106),
            StorageLive(_107),
            _107 = &(*_1),
            StorageLive(_108),
            StorageLive(_109),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9: 44:32 (#167),
                    scope: scope[24],
                },
                kind: _109 = alloc::vec::Vec::<u32>::new() -> [return: bb65, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_100),
            _100 = move ((_94 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_102),
            _102 = move _100,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:477:13: 477:46 (#604),
                    scope: scope[34],
                },
                kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _102) -> [return: bb64, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_102),
            StorageDead(_100),
            StorageDead(_94),
            StorageDead(_93),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[24],
                },
                kind: goto -> bb190,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_110),
            StorageLive(_111),
            _111 = _3,
            _110 = Not(move _111),
            StorageDead(_111),
            _108 = nfa::State::Splits { targets: move _109, reverse: move _110 },
            StorageDead(_110),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:480:76: 480:77 (#0),
                    scope: scope[24],
                },
                kind: drop(_109) -> [return: bb66, unwind: bb198],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_109),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:480:17: 480:78 (#0),
                    scope: scope[24],
                },
                kind: _106 = nfa::Compiler::add(move _107, move _108) -> [return: bb67, unwind: bb198],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_108),
            StorageDead(_107),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:480:17: 480:79 (#606),
                    scope: scope[24],
                },
                kind: _105 = <core::result::Result<u32, error::Error> as core::ops::Try>::branch(move _106) -> [return: bb68, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_106),
            PlaceMention(_105),
            _112 = discriminant(_105),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:480:17: 480:79 (#606),
                    scope: scope[24],
                },
                kind: switchInt(move _112) -> [0: bb71, 1: bb70, otherwise: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _105),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:480:17: 480:79 (#606),
                    scope: scope[24],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:480:78: 480:79 (#607),
                    scope: scope[24],
                },
                kind: falseEdge -> [real: bb72, imaginary: bb71],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_116),
            _116 = ((_105 as Continue).0: u32),
            _104 = _116,
            StorageDead(_116),
            FakeRead(ForLet(None), _104),
            StorageDead(_105),
            StorageLive(_117),
            StorageLive(_118),
            StorageLive(_119),
            StorageLive(_120),
            _120 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:481:25: 481:41 (#0),
                    scope: scope[37],
                },
                kind: _119 = nfa::Compiler::add_empty(move _120) -> [return: bb74, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_113),
            _113 = move ((_105 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_115),
            _115 = move _113,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:480:17: 480:79 (#606),
                    scope: scope[39],
                },
                kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _115) -> [return: bb73, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_115),
            StorageDead(_113),
            StorageDead(_105),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[24],
                },
                kind: goto -> bb189,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_120),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:481:25: 481:42 (#608),
                    scope: scope[37],
                },
                kind: _118 = <core::result::Result<u32, error::Error> as core::ops::Try>::branch(move _119) -> [return: bb75, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_119),
            PlaceMention(_118),
            _121 = discriminant(_118),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:481:25: 481:42 (#608),
                    scope: scope[37],
                },
                kind: switchInt(move _121) -> [0: bb78, 1: bb77, otherwise: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _118),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:481:25: 481:42 (#608),
                    scope: scope[37],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:481:41: 481:42 (#609),
                    scope: scope[37],
                },
                kind: falseEdge -> [real: bb79, imaginary: bb78],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_125),
            _125 = ((_118 as Continue).0: u32),
            _117 = _125,
            StorageDead(_125),
            FakeRead(ForLet(None), _117),
            StorageDead(_118),
            StorageLive(_126),
            StorageLive(_127),
            StorageLive(_128),
            StorageLive(_129),
            _129 = &(*_1),
            StorageLive(_130),
            _130 = _104,
            StorageLive(_131),
            _131 = (_59.0: u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:482:13: 482:49 (#0),
                    scope: scope[42],
                },
                kind: _128 = nfa::Compiler::patch(move _129, move _130, move _131) -> [return: bb81, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_122),
            _122 = move ((_118 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_124),
            _124 = move _122,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:481:25: 481:42 (#608),
                    scope: scope[44],
                },
                kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _124) -> [return: bb80, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_124),
            StorageDead(_122),
            StorageDead(_118),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[37],
                },
                kind: goto -> bb188,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_131),
            StorageDead(_130),
            StorageDead(_129),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:482:13: 482:50 (#610),
                    scope: scope[42],
                },
                kind: _127 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _128) -> [return: bb82, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_128),
            PlaceMention(_127),
            _132 = discriminant(_127),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:482:13: 482:50 (#610),
                    scope: scope[42],
                },
                kind: switchInt(move _132) -> [0: bb85, 1: bb84, otherwise: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _127),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:482:13: 482:50 (#610),
                    scope: scope[42],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:482:49: 482:50 (#611),
                    scope: scope[42],
                },
                kind: falseEdge -> [real: bb86, imaginary: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_136),
            _136 = ((_127 as Continue).0: ()),
            _126 = _136,
            StorageDead(_136),
            StorageDead(_127),
            StorageDead(_126),
            StorageLive(_137),
            StorageLive(_138),
            StorageLive(_139),
            StorageLive(_140),
            _140 = &(*_1),
            StorageLive(_141),
            _141 = _104,
            StorageLive(_142),
            _142 = _117,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:483:13: 483:40 (#0),
                    scope: scope[42],
                },
                kind: _139 = nfa::Compiler::patch(move _140, move _141, move _142) -> [return: bb88, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_133),
            _133 = move ((_127 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_135),
            _135 = move _133,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:482:13: 482:50 (#610),
                    scope: scope[48],
                },
                kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _135) -> [return: bb87, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_135),
            StorageDead(_133),
            StorageDead(_127),
            StorageDead(_126),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[42],
                },
                kind: goto -> bb188,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_142),
            StorageDead(_141),
            StorageDead(_140),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:483:13: 483:41 (#612),
                    scope: scope[42],
                },
                kind: _138 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _139) -> [return: bb89, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_139),
            PlaceMention(_138),
            _143 = discriminant(_138),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:483:13: 483:41 (#612),
                    scope: scope[42],
                },
                kind: switchInt(move _143) -> [0: bb92, 1: bb91, otherwise: bb90],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _138),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:483:13: 483:41 (#612),
                    scope: scope[42],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:483:40: 483:41 (#613),
                    scope: scope[42],
                },
                kind: falseEdge -> [real: bb93, imaginary: bb92],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_147),
            _147 = ((_138 as Continue).0: ()),
            _137 = _147,
            StorageDead(_147),
            StorageDead(_138),
            StorageDead(_137),
            StorageLive(_148),
            StorageLive(_149),
            StorageLive(_150),
            StorageLive(_151),
            _151 = &(*_1),
            StorageLive(_152),
            _152 = _69,
            StorageLive(_153),
            _153 = _117,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:484:13: 484:36 (#0),
                    scope: scope[42],
                },
                kind: _150 = nfa::Compiler::patch(move _151, move _152, move _153) -> [return: bb95, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_144),
            _144 = move ((_138 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_146),
            _146 = move _144,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:483:13: 483:41 (#612),
                    scope: scope[52],
                },
                kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _146) -> [return: bb94, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_146),
            StorageDead(_144),
            StorageDead(_138),
            StorageDead(_137),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[42],
                },
                kind: goto -> bb188,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_153),
            StorageDead(_152),
            StorageDead(_151),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:484:13: 484:37 (#614),
                    scope: scope[42],
                },
                kind: _149 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _150) -> [return: bb96, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_150),
            PlaceMention(_149),
            _154 = discriminant(_149),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:484:13: 484:37 (#614),
                    scope: scope[42],
                },
                kind: switchInt(move _154) -> [0: bb99, 1: bb98, otherwise: bb97],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _149),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:484:13: 484:37 (#614),
                    scope: scope[42],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:484:36: 484:37 (#615),
                    scope: scope[42],
                },
                kind: falseEdge -> [real: bb100, imaginary: bb99],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_158),
            _158 = ((_149 as Continue).0: ()),
            _148 = _158,
            StorageDead(_158),
            StorageDead(_149),
            StorageDead(_148),
            StorageLive(_159),
            StorageLive(_160),
            _160 = _104,
            StorageLive(_161),
            _161 = _117,
            _159 = nfa::ThompsonRef { start: move _160, end: move _161 },
            StorageDead(_161),
            StorageDead(_160),
            _0 = core::result::Result::<nfa::ThompsonRef, error::Error>::Ok(move _159),
            StorageDead(_159),
            StorageDead(_117),
            StorageDead(_104),
            StorageDead(_69),
            StorageDead(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:449:9: 502:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb181,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_155),
            _155 = move ((_149 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_157),
            _157 = move _155,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:484:13: 484:37 (#614),
                    scope: scope[56],
                },
                kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _157) -> [return: bb101, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_157),
            StorageDead(_155),
            StorageDead(_149),
            StorageDead(_148),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[42],
                },
                kind: goto -> bb188,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageLive(_162),
            StorageLive(_163),
            _163 = _4,
            _162 = Eq(move _163, const 1_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:486:19: 486:25 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _162) -> [0: bb134, otherwise: bb103],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_163),
            StorageLive(_164),
            StorageLive(_165),
            StorageLive(_166),
            StorageLive(_167),
            _167 = &(*_1),
            StorageLive(_168),
            _168 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:487:28: 487:39 (#0),
                    scope: scope[0],
                },
                kind: _166 = nfa::Compiler::c(move _167, move _168) -> [return: bb104, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_168),
            StorageDead(_167),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:487:28: 487:40 (#617),
                    scope: scope[0],
                },
                kind: _165 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::Try>::branch(move _166) -> [return: bb105, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_166),
            PlaceMention(_165),
            _169 = discriminant(_165),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:487:28: 487:40 (#617),
                    scope: scope[0],
                },
                kind: switchInt(move _169) -> [0: bb108, 1: bb107, otherwise: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _165),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:487:28: 487:40 (#617),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:487:39: 487:40 (#618),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb109, imaginary: bb108],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_173),
            _173 = ((_165 as Continue).0: nfa::ThompsonRef),
            _164 = _173,
            StorageDead(_173),
            FakeRead(ForLet(None), _164),
            StorageDead(_165),
            StorageLive(_174),
            StorageLive(_175),
            StorageLive(_176),
            StorageLive(_177),
            _177 = &(*_1),
            StorageLive(_178),
            StorageLive(_179),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9: 44:32 (#168),
                    scope: scope[59],
                },
                kind: _179 = alloc::vec::Vec::<u32>::new() -> [return: bb111, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_170),
            _170 = move ((_165 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_172),
            _172 = move _170,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:487:28: 487:40 (#617),
                    scope: scope[61],
                },
                kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _172) -> [return: bb110, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_172),
            StorageDead(_170),
            StorageDead(_165),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb186,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_180),
            StorageLive(_181),
            _181 = _3,
            _180 = Not(move _181),
            StorageDead(_181),
            _178 = nfa::State::Splits { targets: move _179, reverse: move _180 },
            StorageDead(_180),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:489:76: 489:77 (#0),
                    scope: scope[59],
                },
                kind: drop(_179) -> [return: bb112, unwind: bb197],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_179),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:489:17: 489:78 (#0),
                    scope: scope[59],
                },
                kind: _176 = nfa::Compiler::add(move _177, move _178) -> [return: bb113, unwind: bb197],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_178),
            StorageDead(_177),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:489:17: 489:79 (#619),
                    scope: scope[59],
                },
                kind: _175 = <core::result::Result<u32, error::Error> as core::ops::Try>::branch(move _176) -> [return: bb114, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_176),
            PlaceMention(_175),
            _182 = discriminant(_175),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:489:17: 489:79 (#619),
                    scope: scope[59],
                },
                kind: switchInt(move _182) -> [0: bb117, 1: bb116, otherwise: bb115],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _175),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:489:17: 489:79 (#619),
                    scope: scope[59],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:489:78: 489:79 (#620),
                    scope: scope[59],
                },
                kind: falseEdge -> [real: bb118, imaginary: bb117],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_186),
            _186 = ((_175 as Continue).0: u32),
            _174 = _186,
            StorageDead(_186),
            FakeRead(ForLet(None), _174),
            StorageDead(_175),
            StorageLive(_187),
            StorageLive(_188),
            StorageLive(_189),
            StorageLive(_190),
            _190 = &(*_1),
            StorageLive(_191),
            _191 = (_164.1: u32),
            StorageLive(_192),
            _192 = _174,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:490:13: 490:45 (#0),
                    scope: scope[64],
                },
                kind: _189 = nfa::Compiler::patch(move _190, move _191, move _192) -> [return: bb120, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_183),
            _183 = move ((_175 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_185),
            _185 = move _183,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:489:17: 489:79 (#619),
                    scope: scope[66],
                },
                kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _185) -> [return: bb119, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_185),
            StorageDead(_183),
            StorageDead(_175),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[59],
                },
                kind: goto -> bb185,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_192),
            StorageDead(_191),
            StorageDead(_190),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:490:13: 490:46 (#621),
                    scope: scope[64],
                },
                kind: _188 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _189) -> [return: bb121, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_189),
            PlaceMention(_188),
            _193 = discriminant(_188),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:490:13: 490:46 (#621),
                    scope: scope[64],
                },
                kind: switchInt(move _193) -> [0: bb124, 1: bb123, otherwise: bb122],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _188),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:490:13: 490:46 (#621),
                    scope: scope[64],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:490:45: 490:46 (#622),
                    scope: scope[64],
                },
                kind: falseEdge -> [real: bb125, imaginary: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_197),
            _197 = ((_188 as Continue).0: ()),
            _187 = _197,
            StorageDead(_197),
            StorageDead(_188),
            StorageDead(_187),
            StorageLive(_198),
            StorageLive(_199),
            StorageLive(_200),
            StorageLive(_201),
            _201 = &(*_1),
            StorageLive(_202),
            _202 = _174,
            StorageLive(_203),
            _203 = (_164.0: u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:491:13: 491:47 (#0),
                    scope: scope[64],
                },
                kind: _200 = nfa::Compiler::patch(move _201, move _202, move _203) -> [return: bb127, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_194),
            _194 = move ((_188 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_196),
            _196 = move _194,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:490:13: 490:46 (#621),
                    scope: scope[70],
                },
                kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _196) -> [return: bb126, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_196),
            StorageDead(_194),
            StorageDead(_188),
            StorageDead(_187),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[64],
                },
                kind: goto -> bb185,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_203),
            StorageDead(_202),
            StorageDead(_201),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:491:13: 491:48 (#623),
                    scope: scope[64],
                },
                kind: _199 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _200) -> [return: bb128, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_200),
            PlaceMention(_199),
            _204 = discriminant(_199),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:491:13: 491:48 (#623),
                    scope: scope[64],
                },
                kind: switchInt(move _204) -> [0: bb131, 1: bb130, otherwise: bb129],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _199),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:491:13: 491:48 (#623),
                    scope: scope[64],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:491:47: 491:48 (#624),
                    scope: scope[64],
                },
                kind: falseEdge -> [real: bb132, imaginary: bb131],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_208),
            _208 = ((_199 as Continue).0: ()),
            _198 = _208,
            StorageDead(_208),
            StorageDead(_199),
            StorageDead(_198),
            StorageLive(_209),
            StorageLive(_210),
            _210 = (_164.0: u32),
            StorageLive(_211),
            _211 = _174,
            _209 = nfa::ThompsonRef { start: move _210, end: move _211 },
            StorageDead(_211),
            StorageDead(_210),
            _0 = core::result::Result::<nfa::ThompsonRef, error::Error>::Ok(move _209),
            StorageDead(_209),
            StorageDead(_174),
            StorageDead(_164),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:486:16: 502:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb180,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_205),
            _205 = move ((_199 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_207),
            _207 = move _205,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:491:13: 491:48 (#623),
                    scope: scope[74],
                },
                kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _207) -> [return: bb133, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_207),
            StorageDead(_205),
            StorageDead(_199),
            StorageDead(_198),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[64],
                },
                kind: goto -> bb185,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_163),
            StorageLive(_212),
            StorageLive(_213),
            StorageLive(_214),
            StorageLive(_215),
            _215 = &(*_1),
            StorageLive(_216),
            _216 = &(*_2),
            StorageLive(_217),
            StorageLive(_218),
            _218 = _4,
            _219 = SubWithOverflow(_218, const 1_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:494:46: 494:51 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_219.1: bool), "attempt to compute `{} - {}`, which would overflow", move _218, const 1_u32) -> [success: bb135, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _217 = move (_219.0: u32),
            StorageDead(_218),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:494:26: 494:52 (#0),
                    scope: scope[0],
                },
                kind: _214 = nfa::Compiler::c_exactly(move _215, move _216, move _217) -> [return: bb136, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_217),
            StorageDead(_216),
            StorageDead(_215),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:494:26: 494:53 (#625),
                    scope: scope[0],
                },
                kind: _213 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::Try>::branch(move _214) -> [return: bb137, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_214),
            PlaceMention(_213),
            _220 = discriminant(_213),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:494:26: 494:53 (#625),
                    scope: scope[0],
                },
                kind: switchInt(move _220) -> [0: bb140, 1: bb139, otherwise: bb138],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _213),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:494:26: 494:53 (#625),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:494:52: 494:53 (#626),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb141, imaginary: bb140],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_224),
            _224 = ((_213 as Continue).0: nfa::ThompsonRef),
            _212 = _224,
            StorageDead(_224),
            FakeRead(ForLet(None), _212),
            StorageDead(_213),
            StorageLive(_225),
            StorageLive(_226),
            StorageLive(_227),
            StorageLive(_228),
            _228 = &(*_1),
            StorageLive(_229),
            _229 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:495:24: 495:35 (#0),
                    scope: scope[77],
                },
                kind: _227 = nfa::Compiler::c(move _228, move _229) -> [return: bb143, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_221),
            _221 = move ((_213 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_223),
            _223 = move _221,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:494:26: 494:53 (#625),
                    scope: scope[79],
                },
                kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _223) -> [return: bb142, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_223),
            StorageDead(_221),
            StorageDead(_213),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb184,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_229),
            StorageDead(_228),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:495:24: 495:36 (#627),
                    scope: scope[77],
                },
                kind: _226 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::Try>::branch(move _227) -> [return: bb144, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_227),
            PlaceMention(_226),
            _230 = discriminant(_226),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:495:24: 495:36 (#627),
                    scope: scope[77],
                },
                kind: switchInt(move _230) -> [0: bb147, 1: bb146, otherwise: bb145],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _226),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:495:24: 495:36 (#627),
                    scope: scope[77],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:495:35: 495:36 (#628),
                    scope: scope[77],
                },
                kind: falseEdge -> [real: bb148, imaginary: bb147],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_234),
            _234 = ((_226 as Continue).0: nfa::ThompsonRef),
            _225 = _234,
            StorageDead(_234),
            FakeRead(ForLet(None), _225),
            StorageDead(_226),
            StorageLive(_235),
            StorageLive(_236),
            StorageLive(_237),
            StorageLive(_238),
            _238 = &(*_1),
            StorageLive(_239),
            StorageLive(_240),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9: 44:32 (#169),
                    scope: scope[82],
                },
                kind: _240 = alloc::vec::Vec::<u32>::new() -> [return: bb150, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_231),
            _231 = move ((_226 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_233),
            _233 = move _231,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:495:24: 495:36 (#627),
                    scope: scope[84],
                },
                kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _233) -> [return: bb149, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_233),
            StorageDead(_231),
            StorageDead(_226),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[77],
                },
                kind: goto -> bb183,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_241),
            StorageLive(_242),
            _242 = _3,
            _241 = Not(move _242),
            StorageDead(_242),
            _239 = nfa::State::Splits { targets: move _240, reverse: move _241 },
            StorageDead(_241),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:497:76: 497:77 (#0),
                    scope: scope[82],
                },
                kind: drop(_240) -> [return: bb151, unwind: bb196],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_240),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:497:17: 497:78 (#0),
                    scope: scope[82],
                },
                kind: _237 = nfa::Compiler::add(move _238, move _239) -> [return: bb152, unwind: bb196],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_239),
            StorageDead(_238),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:497:17: 497:79 (#629),
                    scope: scope[82],
                },
                kind: _236 = <core::result::Result<u32, error::Error> as core::ops::Try>::branch(move _237) -> [return: bb153, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_237),
            PlaceMention(_236),
            _243 = discriminant(_236),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:497:17: 497:79 (#629),
                    scope: scope[82],
                },
                kind: switchInt(move _243) -> [0: bb156, 1: bb155, otherwise: bb154],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _236),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:497:17: 497:79 (#629),
                    scope: scope[82],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:497:78: 497:79 (#630),
                    scope: scope[82],
                },
                kind: falseEdge -> [real: bb157, imaginary: bb156],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_247),
            _247 = ((_236 as Continue).0: u32),
            _235 = _247,
            StorageDead(_247),
            FakeRead(ForLet(None), _235),
            StorageDead(_236),
            StorageLive(_248),
            StorageLive(_249),
            StorageLive(_250),
            StorageLive(_251),
            _251 = &(*_1),
            StorageLive(_252),
            _252 = (_212.1: u32),
            StorageLive(_253),
            _253 = (_225.0: u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:498:13: 498:47 (#0),
                    scope: scope[87],
                },
                kind: _250 = nfa::Compiler::patch(move _251, move _252, move _253) -> [return: bb159, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_244),
            _244 = move ((_236 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_246),
            _246 = move _244,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:497:17: 497:79 (#629),
                    scope: scope[89],
                },
                kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _246) -> [return: bb158, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_246),
            StorageDead(_244),
            StorageDead(_236),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[82],
                },
                kind: goto -> bb182,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_253),
            StorageDead(_252),
            StorageDead(_251),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:498:13: 498:48 (#631),
                    scope: scope[87],
                },
                kind: _249 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _250) -> [return: bb160, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_250),
            PlaceMention(_249),
            _254 = discriminant(_249),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:498:13: 498:48 (#631),
                    scope: scope[87],
                },
                kind: switchInt(move _254) -> [0: bb163, 1: bb162, otherwise: bb161],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _249),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:498:13: 498:48 (#631),
                    scope: scope[87],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:498:47: 498:48 (#632),
                    scope: scope[87],
                },
                kind: falseEdge -> [real: bb164, imaginary: bb163],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_258),
            _258 = ((_249 as Continue).0: ()),
            _248 = _258,
            StorageDead(_258),
            StorageDead(_249),
            StorageDead(_248),
            StorageLive(_259),
            StorageLive(_260),
            StorageLive(_261),
            StorageLive(_262),
            _262 = &(*_1),
            StorageLive(_263),
            _263 = (_225.1: u32),
            StorageLive(_264),
            _264 = _235,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:499:13: 499:41 (#0),
                    scope: scope[87],
                },
                kind: _261 = nfa::Compiler::patch(move _262, move _263, move _264) -> [return: bb166, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_255),
            _255 = move ((_249 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_257),
            _257 = move _255,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:498:13: 498:48 (#631),
                    scope: scope[93],
                },
                kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _257) -> [return: bb165, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_257),
            StorageDead(_255),
            StorageDead(_249),
            StorageDead(_248),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[87],
                },
                kind: goto -> bb182,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_264),
            StorageDead(_263),
            StorageDead(_262),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:499:13: 499:42 (#633),
                    scope: scope[87],
                },
                kind: _260 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _261) -> [return: bb167, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_261),
            PlaceMention(_260),
            _265 = discriminant(_260),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:499:13: 499:42 (#633),
                    scope: scope[87],
                },
                kind: switchInt(move _265) -> [0: bb170, 1: bb169, otherwise: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _260),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:499:13: 499:42 (#633),
                    scope: scope[87],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:499:41: 499:42 (#634),
                    scope: scope[87],
                },
                kind: falseEdge -> [real: bb171, imaginary: bb170],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_269),
            _269 = ((_260 as Continue).0: ()),
            _259 = _269,
            StorageDead(_269),
            StorageDead(_260),
            StorageDead(_259),
            StorageLive(_270),
            StorageLive(_271),
            StorageLive(_272),
            StorageLive(_273),
            _273 = &(*_1),
            StorageLive(_274),
            _274 = _235,
            StorageLive(_275),
            _275 = (_225.0: u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:500:13: 500:43 (#0),
                    scope: scope[87],
                },
                kind: _272 = nfa::Compiler::patch(move _273, move _274, move _275) -> [return: bb173, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_266),
            _266 = move ((_260 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_268),
            _268 = move _266,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:499:13: 499:42 (#633),
                    scope: scope[97],
                },
                kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _268) -> [return: bb172, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_268),
            StorageDead(_266),
            StorageDead(_260),
            StorageDead(_259),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[87],
                },
                kind: goto -> bb182,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_275),
            StorageDead(_274),
            StorageDead(_273),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:500:13: 500:44 (#635),
                    scope: scope[87],
                },
                kind: _271 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _272) -> [return: bb174, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_272),
            PlaceMention(_271),
            _276 = discriminant(_271),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:500:13: 500:44 (#635),
                    scope: scope[87],
                },
                kind: switchInt(move _276) -> [0: bb177, 1: bb176, otherwise: bb175],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _271),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:500:13: 500:44 (#635),
                    scope: scope[87],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:500:43: 500:44 (#636),
                    scope: scope[87],
                },
                kind: falseEdge -> [real: bb178, imaginary: bb177],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_280),
            _280 = ((_271 as Continue).0: ()),
            _270 = _280,
            StorageDead(_280),
            StorageDead(_271),
            StorageDead(_270),
            StorageLive(_281),
            StorageLive(_282),
            _282 = (_212.0: u32),
            StorageLive(_283),
            _283 = _235,
            _281 = nfa::ThompsonRef { start: move _282, end: move _283 },
            StorageDead(_283),
            StorageDead(_282),
            _0 = core::result::Result::<nfa::ThompsonRef, error::Error>::Ok(move _281),
            StorageDead(_281),
            StorageDead(_235),
            StorageDead(_225),
            StorageDead(_212),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:486:16: 502:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb180,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_277),
            _277 = move ((_271 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_279),
            _279 = move _277,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:500:13: 500:44 (#635),
                    scope: scope[101],
                },
                kind: _0 = <core::result::Result<nfa::ThompsonRef, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _279) -> [return: bb179, unwind: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_279),
            StorageDead(_277),
            StorageDead(_271),
            StorageDead(_270),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[87],
                },
                kind: goto -> bb182,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_162),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:449:9: 502:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb181,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:503:6: 503:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb195,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_235),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[82],
                },
                kind: goto -> bb183,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_225),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[77],
                },
                kind: goto -> bb184,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_212),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb187,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_174),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[59],
                },
                kind: goto -> bb186,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_164),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb187,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_162),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb194,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_117),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[37],
                },
                kind: goto -> bb189,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_104),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[24],
                },
                kind: goto -> bb190,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_69),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[19],
                },
                kind: goto -> bb191,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb194,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb193,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb194,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:503:6: 503:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb195,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:503:6: 503:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:497:77: 497:78 (#0),
                    scope: scope[82],
                },
                kind: drop(_239) -> [return: bb201, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:489:77: 489:78 (#0),
                    scope: scope[59],
                },
                kind: drop(_178) -> [return: bb201, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:480:77: 480:78 (#0),
                    scope: scope[24],
                },
                kind: drop(_108) -> [return: bb201, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:475:77: 475:78 (#0),
                    scope: scope[19],
                },
                kind: drop(_73) -> [return: bb201, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:458:18: 458:19 (#0),
                    scope: scope[0],
                },
                kind: drop(_15) -> [return: bb201, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:443:5: 503:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<nfa::ThompsonRef, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:448:10: 448:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} nfa::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:444:9: 444:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/nfa.rs:445:14: 445:18 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/nfa.rs:445:9: 445:12 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:445:9: 445:12 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:445:9: 445:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/nfa.rs:446:17: 446:21 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/nfa.rs:446:9: 446:15 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:446:9: 446:15 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:446:9: 446:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/nfa.rs:447:12: 447:15 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/nfa.rs:447:9: 447:10 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:447:9: 447:10 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:447:9: 447:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:449:9: 502:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:449:12: 449:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:449:9: 502:10 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:449:12: 449:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:454:13: 463:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:454:17: 454:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:454:17: 454:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:454:38: 463:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/nfa.rs:455:30: 458:20 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:455:21: 455:27 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:455:21: 455:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:455:30: 458:20 (#590),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<u32, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:455:30: 458:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:455:30: 455:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:455:39: 458:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: alloc::vec::Vec<u32, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9: 44:32 (#165),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:457:30: 457:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:457:31: 457:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:458:19: 458:20 (#591),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _12,
                                ),
                                regex-lite/src/nfa.rs:455:30: 458:20 (#590),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:458:19: 458:20 (#591),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:458:19: 458:20 (#591),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:458:19: 458:20 (#591),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:458:19: 458:20 (#591),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _12,
                                ),
                                regex-lite/src/nfa.rs:455:30: 458:20 (#590),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:455:30: 458:20 (#590),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:455:30: 458:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/nfa.rs:459:32: 459:44 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:459:21: 459:29 (#0),
                    },
                ),
            ),
        ),
        ty: nfa::ThompsonRef,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:459:21: 459:29 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, nfa::ThompsonRef>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:459:32: 459:44 (#592),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<nfa::ThompsonRef, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:459:32: 459:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:459:32: 459:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:459:39: 459:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:459:43: 459:44 (#593),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _25,
                                ),
                                regex-lite/src/nfa.rs:459:32: 459:44 (#592),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:459:43: 459:44 (#593),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:459:43: 459:44 (#593),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:459:43: 459:44 (#593),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:459:43: 459:44 (#593),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _25,
                                ),
                                regex-lite/src/nfa.rs:459:32: 459:44 (#592),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:459:32: 459:44 (#592),
                    },
                ),
            ),
        ),
        ty: nfa::ThompsonRef,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:459:32: 459:44 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:460:17: 460:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:460:17: 460:52 (#594),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:460:17: 460:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:460:17: 460:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:460:28: 460:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:460:36: 460:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:460:51: 460:52 (#595),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _35,
                                ),
                                regex-lite/src/nfa.rs:460:17: 460:52 (#594),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:460:51: 460:52 (#595),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:460:51: 460:52 (#595),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:460:51: 460:52 (#595),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:460:51: 460:52 (#595),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _35,
                                ),
                                regex-lite/src/nfa.rs:460:17: 460:52 (#594),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:460:17: 460:52 (#594),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:460:17: 460:52 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:461:17: 461:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:461:17: 461:50 (#596),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:461:17: 461:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:461:17: 461:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:461:28: 461:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:461:42: 461:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:461:49: 461:50 (#597),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _46,
                                ),
                                regex-lite/src/nfa.rs:461:17: 461:50 (#596),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:461:49: 461:50 (#597),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:461:49: 461:50 (#597),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:461:49: 461:50 (#597),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:461:49: 461:50 (#597),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _46,
                                ),
                                regex-lite/src/nfa.rs:461:17: 461:50 (#596),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:461:17: 461:50 (#596),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:461:17: 461:50 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: nfa::ThompsonRef,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:462:27: 462:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:462:48: 462:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:462:61: 462:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/nfa.rs:473:28: 473:40 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:473:17: 473:25 (#0),
                    },
                ),
            ),
        ),
        ty: nfa::ThompsonRef,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:473:17: 473:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, nfa::ThompsonRef>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:473:28: 473:40 (#598),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<nfa::ThompsonRef, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:473:28: 473:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:473:28: 473:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:473:35: 473:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:473:39: 473:40 (#599),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _60,
                                ),
                                regex-lite/src/nfa.rs:473:28: 473:40 (#598),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:473:39: 473:40 (#599),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:473:39: 473:40 (#599),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:473:39: 473:40 (#599),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:473:39: 473:40 (#599),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _60,
                                ),
                                regex-lite/src/nfa.rs:473:28: 473:40 (#598),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:473:28: 473:40 (#598),
                    },
                ),
            ),
        ),
        ty: nfa::ThompsonRef,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:473:28: 473:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/nfa.rs:475:17: 475:79 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:474:17: 474:21 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:474:17: 474:21 (#0),
            scope: scope[19],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:475:17: 475:79 (#600),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<u32, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:475:17: 475:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:475:17: 475:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:475:26: 475:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: alloc::vec::Vec<u32, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9: 44:32 (#166),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:475:68: 475:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:475:69: 475:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:475:78: 475:79 (#601),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _70,
                                ),
                                regex-lite/src/nfa.rs:475:17: 475:79 (#600),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:475:78: 475:79 (#601),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:475:78: 475:79 (#601),
            scope: scope[19],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:475:78: 475:79 (#601),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:475:78: 475:79 (#601),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _70,
                                ),
                                regex-lite/src/nfa.rs:475:17: 475:79 (#600),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:475:17: 475:79 (#600),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:475:17: 475:79 (#0),
            scope: scope[19],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:476:13: 476:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:476:13: 476:44 (#602),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:476:13: 476:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:476:13: 476:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:476:24: 476:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:476:38: 476:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:476:43: 476:44 (#603),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _83,
                                ),
                                regex-lite/src/nfa.rs:476:13: 476:44 (#602),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:476:43: 476:44 (#603),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:476:43: 476:44 (#603),
            scope: scope[24],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:476:43: 476:44 (#603),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:476:43: 476:44 (#603),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _83,
                                ),
                                regex-lite/src/nfa.rs:476:13: 476:44 (#602),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:476:13: 476:44 (#602),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:476:13: 476:44 (#0),
            scope: scope[24],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:477:13: 477:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:477:13: 477:46 (#604),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:477:13: 477:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:477:13: 477:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:477:24: 477:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:477:30: 477:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:477:45: 477:46 (#605),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _94,
                                ),
                                regex-lite/src/nfa.rs:477:13: 477:46 (#604),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:477:45: 477:46 (#605),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:477:45: 477:46 (#605),
            scope: scope[24],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:477:45: 477:46 (#605),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:477:45: 477:46 (#605),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _94,
                                ),
                                regex-lite/src/nfa.rs:477:13: 477:46 (#604),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:477:13: 477:46 (#604),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:477:13: 477:46 (#0),
            scope: scope[24],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/nfa.rs:480:17: 480:79 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:479:17: 479:25 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:479:17: 479:25 (#0),
            scope: scope[24],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:480:17: 480:79 (#606),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<u32, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:480:17: 480:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:480:17: 480:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:480:26: 480:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: alloc::vec::Vec<u32, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9: 44:32 (#167),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:480:68: 480:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:480:69: 480:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:480:78: 480:79 (#607),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _105,
                                ),
                                regex-lite/src/nfa.rs:480:17: 480:79 (#606),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:480:78: 480:79 (#607),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:480:78: 480:79 (#607),
            scope: scope[24],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:480:78: 480:79 (#607),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:480:78: 480:79 (#607),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _105,
                                ),
                                regex-lite/src/nfa.rs:480:17: 480:79 (#606),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:480:17: 480:79 (#606),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:480:17: 480:79 (#0),
            scope: scope[24],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/nfa.rs:481:25: 481:42 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:481:17: 481:22 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:481:17: 481:22 (#0),
            scope: scope[37],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:481:25: 481:42 (#608),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<u32, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:481:25: 481:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:481:25: 481:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:481:41: 481:42 (#609),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _118,
                                ),
                                regex-lite/src/nfa.rs:481:25: 481:42 (#608),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:481:41: 481:42 (#609),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:481:41: 481:42 (#609),
            scope: scope[37],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:481:41: 481:42 (#609),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:481:41: 481:42 (#609),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _118,
                                ),
                                regex-lite/src/nfa.rs:481:25: 481:42 (#608),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:481:25: 481:42 (#608),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:481:25: 481:42 (#0),
            scope: scope[37],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:482:13: 482:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:482:13: 482:50 (#610),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:482:13: 482:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:482:13: 482:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:482:24: 482:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:482:34: 482:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:482:49: 482:50 (#611),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _127,
                                ),
                                regex-lite/src/nfa.rs:482:13: 482:50 (#610),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:482:49: 482:50 (#611),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:482:49: 482:50 (#611),
            scope: scope[42],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:482:49: 482:50 (#611),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:482:49: 482:50 (#611),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _127,
                                ),
                                regex-lite/src/nfa.rs:482:13: 482:50 (#610),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:482:13: 482:50 (#610),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:482:13: 482:50 (#0),
            scope: scope[42],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:483:13: 483:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:483:13: 483:41 (#612),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:483:13: 483:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:483:13: 483:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:483:24: 483:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:483:34: 483:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:483:40: 483:41 (#613),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _138,
                                ),
                                regex-lite/src/nfa.rs:483:13: 483:41 (#612),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:483:40: 483:41 (#613),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:483:40: 483:41 (#613),
            scope: scope[42],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:483:40: 483:41 (#613),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:483:40: 483:41 (#613),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _138,
                                ),
                                regex-lite/src/nfa.rs:483:13: 483:41 (#612),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:483:13: 483:41 (#612),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:483:13: 483:41 (#0),
            scope: scope[42],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:484:13: 484:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:484:13: 484:37 (#614),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:484:13: 484:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:484:13: 484:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:484:24: 484:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:484:30: 484:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:484:36: 484:37 (#615),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _149,
                                ),
                                regex-lite/src/nfa.rs:484:13: 484:37 (#614),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:484:36: 484:37 (#615),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:484:36: 484:37 (#615),
            scope: scope[42],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:484:36: 484:37 (#615),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:484:36: 484:37 (#615),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _149,
                                ),
                                regex-lite/src/nfa.rs:484:13: 484:37 (#614),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:484:13: 484:37 (#614),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:484:13: 484:37 (#0),
            scope: scope[42],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: nfa::ThompsonRef,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:485:16: 485:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:485:37: 485:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:485:52: 485:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:449:9: 502:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:486:19: 486:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:449:9: 502:10 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:486:19: 486:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/nfa.rs:487:28: 487:40 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:487:17: 487:25 (#0),
                    },
                ),
            ),
        ),
        ty: nfa::ThompsonRef,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:487:17: 487:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, nfa::ThompsonRef>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:487:28: 487:40 (#617),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<nfa::ThompsonRef, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:487:28: 487:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:487:28: 487:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:487:35: 487:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:487:39: 487:40 (#618),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _165,
                                ),
                                regex-lite/src/nfa.rs:487:28: 487:40 (#617),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:487:39: 487:40 (#618),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:487:39: 487:40 (#618),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:487:39: 487:40 (#618),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:487:39: 487:40 (#618),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _165,
                                ),
                                regex-lite/src/nfa.rs:487:28: 487:40 (#617),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:487:28: 487:40 (#617),
                    },
                ),
            ),
        ),
        ty: nfa::ThompsonRef,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:487:28: 487:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/nfa.rs:489:17: 489:79 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:488:17: 488:23 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:488:17: 488:23 (#0),
            scope: scope[59],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:489:17: 489:79 (#619),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<u32, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:489:17: 489:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:489:17: 489:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:489:26: 489:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: alloc::vec::Vec<u32, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9: 44:32 (#168),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:489:68: 489:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:489:69: 489:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:489:78: 489:79 (#620),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _175,
                                ),
                                regex-lite/src/nfa.rs:489:17: 489:79 (#619),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:489:78: 489:79 (#620),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:489:78: 489:79 (#620),
            scope: scope[59],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:489:78: 489:79 (#620),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:489:78: 489:79 (#620),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _175,
                                ),
                                regex-lite/src/nfa.rs:489:17: 489:79 (#619),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:489:17: 489:79 (#619),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:489:17: 489:79 (#0),
            scope: scope[59],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:490:13: 490:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:490:13: 490:46 (#621),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:490:13: 490:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:490:13: 490:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:490:24: 490:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:490:38: 490:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:490:45: 490:46 (#622),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _188,
                                ),
                                regex-lite/src/nfa.rs:490:13: 490:46 (#621),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:490:45: 490:46 (#622),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:490:45: 490:46 (#622),
            scope: scope[64],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:490:45: 490:46 (#622),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:490:45: 490:46 (#622),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _188,
                                ),
                                regex-lite/src/nfa.rs:490:13: 490:46 (#621),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:490:13: 490:46 (#621),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:490:13: 490:46 (#0),
            scope: scope[64],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:491:13: 491:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:491:13: 491:48 (#623),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:491:13: 491:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:491:13: 491:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:491:24: 491:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:491:32: 491:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:491:47: 491:48 (#624),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _199,
                                ),
                                regex-lite/src/nfa.rs:491:13: 491:48 (#623),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:491:47: 491:48 (#624),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:491:47: 491:48 (#624),
            scope: scope[64],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:491:47: 491:48 (#624),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:491:47: 491:48 (#624),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _199,
                                ),
                                regex-lite/src/nfa.rs:491:13: 491:48 (#623),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:491:13: 491:48 (#623),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:491:13: 491:48 (#0),
            scope: scope[64],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: nfa::ThompsonRef,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:492:16: 492:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:492:37: 492:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:492:58: 492:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/nfa.rs:494:26: 494:53 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:494:17: 494:23 (#0),
                    },
                ),
            ),
        ),
        ty: nfa::ThompsonRef,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:494:17: 494:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, nfa::ThompsonRef>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:494:26: 494:53 (#625),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<nfa::ThompsonRef, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:494:26: 494:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:494:26: 494:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:494:41: 494:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:494:46: 494:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:494:46: 494:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:494:46: 494:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:494:52: 494:53 (#626),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _213,
                                ),
                                regex-lite/src/nfa.rs:494:26: 494:53 (#625),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:494:52: 494:53 (#626),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:494:52: 494:53 (#626),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:494:52: 494:53 (#626),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:494:52: 494:53 (#626),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _213,
                                ),
                                regex-lite/src/nfa.rs:494:26: 494:53 (#625),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:494:26: 494:53 (#625),
                    },
                ),
            ),
        ),
        ty: nfa::ThompsonRef,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:494:26: 494:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/nfa.rs:495:24: 495:36 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:495:17: 495:21 (#0),
                    },
                ),
            ),
        ),
        ty: nfa::ThompsonRef,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:495:17: 495:21 (#0),
            scope: scope[77],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, nfa::ThompsonRef>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:495:24: 495:36 (#627),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<nfa::ThompsonRef, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:495:24: 495:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:495:24: 495:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:495:31: 495:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:495:35: 495:36 (#628),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _226,
                                ),
                                regex-lite/src/nfa.rs:495:24: 495:36 (#627),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:495:35: 495:36 (#628),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:495:35: 495:36 (#628),
            scope: scope[77],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:495:35: 495:36 (#628),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:495:35: 495:36 (#628),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _226,
                                ),
                                regex-lite/src/nfa.rs:495:24: 495:36 (#627),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:495:24: 495:36 (#627),
                    },
                ),
            ),
        ),
        ty: nfa::ThompsonRef,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:495:24: 495:36 (#0),
            scope: scope[77],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/nfa.rs:497:17: 497:79 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:496:17: 496:23 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:496:17: 496:23 (#0),
            scope: scope[82],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:497:17: 497:79 (#629),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<u32, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:497:17: 497:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:497:17: 497:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:497:26: 497:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: alloc::vec::Vec<u32, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9: 44:32 (#169),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:497:68: 497:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:497:69: 497:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:497:78: 497:79 (#630),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _236,
                                ),
                                regex-lite/src/nfa.rs:497:17: 497:79 (#629),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:497:78: 497:79 (#630),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:497:78: 497:79 (#630),
            scope: scope[82],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:497:78: 497:79 (#630),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:497:78: 497:79 (#630),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _236,
                                ),
                                regex-lite/src/nfa.rs:497:17: 497:79 (#629),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:497:17: 497:79 (#629),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:497:17: 497:79 (#0),
            scope: scope[82],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:498:13: 498:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:498:13: 498:48 (#631),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:498:13: 498:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:498:13: 498:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:498:24: 498:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:498:36: 498:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:498:47: 498:48 (#632),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _249,
                                ),
                                regex-lite/src/nfa.rs:498:13: 498:48 (#631),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:498:47: 498:48 (#632),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:498:47: 498:48 (#632),
            scope: scope[87],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:498:47: 498:48 (#632),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:498:47: 498:48 (#632),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _249,
                                ),
                                regex-lite/src/nfa.rs:498:13: 498:48 (#631),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:498:13: 498:48 (#631),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:498:13: 498:48 (#0),
            scope: scope[87],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:499:13: 499:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:499:13: 499:42 (#633),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:499:13: 499:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:499:13: 499:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:499:24: 499:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:499:34: 499:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:499:41: 499:42 (#634),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _260,
                                ),
                                regex-lite/src/nfa.rs:499:13: 499:42 (#633),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:499:41: 499:42 (#634),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:499:41: 499:42 (#634),
            scope: scope[87],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:499:41: 499:42 (#634),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:499:41: 499:42 (#634),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _260,
                                ),
                                regex-lite/src/nfa.rs:499:13: 499:42 (#633),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:499:13: 499:42 (#633),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:499:13: 499:42 (#0),
            scope: scope[87],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:500:13: 500:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:500:13: 500:44 (#635),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:500:13: 500:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:500:13: 500:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:500:24: 500:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:500:32: 500:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:500:43: 500:44 (#636),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _271,
                                ),
                                regex-lite/src/nfa.rs:500:13: 500:44 (#635),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:500:43: 500:44 (#636),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:500:43: 500:44 (#636),
            scope: scope[87],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:500:43: 500:44 (#636),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:500:43: 500:44 (#636),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _271,
                                ),
                                regex-lite/src/nfa.rs:500:13: 500:44 (#635),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:500:13: 500:44 (#635),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:500:13: 500:44 (#0),
            scope: scope[87],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: nfa::ThompsonRef,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:501:16: 501:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:501:37: 501:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:501:56: 501:62 (#0),
            scope: scope[0],
        },
    },
]