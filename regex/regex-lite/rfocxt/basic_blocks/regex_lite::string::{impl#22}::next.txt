[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &mut ((*_1).1: string::Matches<'_, '_>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:2255:15: 2255:33 (#0),
                    scope: scope[0],
                },
                kind: _2 = <string::Matches<'_, '_> as core::iter::Iterator>::next(move _3) -> [return: bb1, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            PlaceMention(_2),
            _4 = discriminant(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:2255:9: 2255:33 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb3, 1: bb4, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:2255:15: 2255:33 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:2256:13: 2256:17 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_20),
            _20 = ((_2 as Some).0: string::Match<'_>),
            StorageLive(_21),
            StorageLive(_22),
            _22 = ((*_1).2: usize),
            StorageLive(_23),
            StorageLive(_24),
            _24 = &_20,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:2267:40: 2267:49 (#0),
                    scope: scope[3],
                },
                kind: _23 = string::Match::<'_>::start(move _24) -> [return: bb12, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*((*_1).0: &str)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:2257:27: 2257:46 (#0),
                    scope: scope[0],
                },
                kind: _5 = core::str::<impl str>::len(move _6) -> [return: bb6, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            FakeRead(ForLet(None), _5),
            StorageLive(_7),
            StorageLive(_8),
            _8 = ((*_1).2: usize),
            StorageLive(_9),
            _9 = _5,
            _7 = Gt(move _8, move _9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:2258:20: 2258:35 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _7) -> [0: bb8, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            _0 = core::option::Option::<&str>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:2258:17: 2264:18 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            StorageLive(_10),
            StorageLive(_11),
            _11 = ((*_1).2: usize),
            StorageLive(_12),
            _12 = _5,
            _10 = core::ops::Range::<usize> { start: move _11, end: move _12 },
            StorageDead(_12),
            StorageDead(_11),
            FakeRead(ForLet(None), _10),
            StorageLive(_13),
            _13 = _5,
            _14 = AddWithOverflow(_13, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:2262:33: 2262:40 (#0),
                    scope: scope[2],
                },
                kind: assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", move _13, const 1_usize) -> [success: bb9, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).2: usize) = move (_14.0: usize),
            StorageDead(_13),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &(*((*_1).0: &str)),
            StorageLive(_19),
            _19 = move _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:2263:40: 2263:47 (#0),
                    scope: scope[2],
                },
                kind: _17 = <str as core::ops::Index<core::ops::Range<usize>>>::index(move _18, move _19) -> [return: bb10, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            _16 = &(*_17),
            _15 = &(*_16),
            _0 = core::option::Option::<&str>::Some(move _15),
            StorageDead(_15),
            StorageDead(_10),
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:2258:17: 2264:18 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:2265:13: 2265:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            _21 = core::ops::Range::<usize> { start: move _22, end: move _23 },
            StorageDead(_23),
            StorageDead(_22),
            FakeRead(ForLet(None), _21),
            StorageLive(_25),
            StorageLive(_26),
            _26 = &_20,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:2268:29: 2268:36 (#0),
                    scope: scope[4],
                },
                kind: _25 = string::Match::<'_>::end(move _26) -> [return: bb13, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            ((*_1).2: usize) = move _25,
            StorageDead(_25),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            _30 = &(*((*_1).0: &str)),
            StorageLive(_31),
            _31 = move _21,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:2269:36: 2269:43 (#0),
                    scope: scope[4],
                },
                kind: _29 = <str as core::ops::Index<core::ops::Range<usize>>>::index(move _30, move _31) -> [return: bb14, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_30),
            _28 = &(*_29),
            _27 = &(*_28),
            _0 = core::option::Option::<&str>::Some(move _27),
            StorageDead(_27),
            StorageDead(_21),
            StorageDead(_29),
            StorageDead(_28),
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:2270:13: 2270:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:2272:6: 2272:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:2254:5: 2272:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2254:27: 2254:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut string::Split<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2254:13: 2254:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:2255:9: 2271:10 (#0),
                },
            ),
        ),
        ty: core::option::Option<string::Match<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2255:15: 2255:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:2255:9: 2271:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut string::Matches<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2255:15: 2255:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2256:13: 2256:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/string.rs:2257:27: 2257:46 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:2257:21: 2257:24 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2257:21: 2257:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2257:27: 2257:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:2258:17: 2264:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2258:20: 2258:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:2258:17: 2264:18 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2258:20: 2258:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:2258:17: 2264:18 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2258:32: 2258:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/string.rs:2261:33: 2261:47 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:2261:25: 2261:30 (#0),
                    },
                ),
            ),
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2261:25: 2261:30 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2261:33: 2261:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2261:44: 2261:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2262:33: 2262:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2262:33: 2262:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2263:26: 2263:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:2263:21: 2263:48 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2263:26: 2263:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:2263:21: 2263:48 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2263:40: 2263:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:2263:21: 2263:48 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2263:27: 2263:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:2263:21: 2263:48 (#0),
                },
            ),
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2263:41: 2263:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                regex-lite/src/string.rs:2255:15: 2255:33 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:2266:13: 2266:20 (#0),
                    },
                ),
            ),
        ),
        ty: string::Match<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2266:18: 2266:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/string.rs:2267:29: 2267:49 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:2267:21: 2267:26 (#0),
                    },
                ),
            ),
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2267:21: 2267:26 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2267:29: 2267:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2267:40: 2267:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} string::Match<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2267:40: 2267:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2268:29: 2268:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} string::Match<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2268:29: 2268:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2269:22: 2269:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:2269:17: 2269:44 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2269:22: 2269:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:2269:17: 2269:44 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2269:36: 2269:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:2269:17: 2269:44 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2269:23: 2269:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:2269:17: 2269:44 (#0),
                },
            ),
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:2269:37: 2269:42 (#0),
            scope: scope[0],
        },
    },
]