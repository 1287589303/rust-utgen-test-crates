[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_2),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_1),
            _6 = {closure@regex-lite/src/string.rs:1866:13: 1866:25} { self: move _7 },
            StorageDead(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(*_1),
            _8 = {closure@regex-lite/src/string.rs:1873:13: 1873:19} { self: move _9 },
            StorageDead(_9),
            StorageLive(_10),
            _10 = &mut (*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1864:9: 1875:10 (#0),
                    scope: scope[0],
                },
                kind: _4 = interpolate::string::<{closure@regex-lite/src/string.rs:1866:13: 1866:25}, {closure@regex-lite/src/string.rs:1873:13: 1873:19}>(move _5, move _6, move _8, move _10) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1876:6: 1876:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1863:5: 1876:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1863:62: 1863:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} string::Captures<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1863:19: 1863:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/string.rs:1863:39: 1863:43 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/string.rs:1863:26: 1863:37 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:1863:26: 1863:37 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1863:26: 1863:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/string.rs:1863:50: 1863:61 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/string.rs:1863:45: 1863:48 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:1863:45: 1863:48 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1863:45: 1863:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1864:9: 1875:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1865:13: 1865:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:568 ~ regex_lite[fbae]::string::{impl#13}::expand::{closure#0}),
            [
                '{erased},
                i16,
                Binder { value: extern "RustCall" fn((usize, &'^0 mut alloc::string::String)), bound_vars: [Region(BrAnon)] },
                (&'{erased} string::Captures<'{erased}>,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1866:13: 1872:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} string::Captures<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1866:13: 1872:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:569 ~ regex_lite[fbae]::string::{impl#13}::expand::{closure#1}),
            [
                '{erased},
                i16,
                Binder { value: extern "RustCall" fn((&'^0 str,)) -> core::option::Option<usize>, bound_vars: [Region(BrAnon)] },
                (&'{erased} string::Captures<'{erased}>,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1873:13: 1873:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} string::Captures<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1873:13: 1873:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1874:13: 1874:16 (#0),
            scope: scope[0],
        },
    },
]