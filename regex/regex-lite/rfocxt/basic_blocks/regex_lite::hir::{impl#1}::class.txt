[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = move _1,
            _2 = hir::HirKind::Class(move _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:241:40: 241:41 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb1, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageLive(_4),
            _4 = move _2,
            StorageLive(_5),
            _5 = core::option::Option::<usize>::Some(const 0_usize),
            _0 = hir::Hir { kind: move _4, is_start_anchored: const false, is_match_empty: const false, static_explicit_captures_len: move _5 },
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:247:9: 247:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_4) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:248:5: 248:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:248:5: 248:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb4, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:248:6: 248:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:248:5: 248:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:248:5: 248:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/mod.rs:240:5: 248:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:240:31: 240:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/hir/mod.rs:240:21: 240:26 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/hir/mod.rs:240:14: 240:19 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/mod.rs:240:14: 240:19 (#0),
                    },
                ),
            ),
        ),
        ty: hir::Class,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:240:14: 240:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/hir/mod.rs:241:20: 241:41 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/mod.rs:241:13: 241:17 (#0),
                    },
                ),
            ),
        ),
        ty: hir::HirKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:241:13: 241:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: hir::Class,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:241:35: 241:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: hir::HirKind,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:243:13: 243:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/mod.rs:246:43: 246:50 (#0),
            scope: scope[0],
        },
    },
]