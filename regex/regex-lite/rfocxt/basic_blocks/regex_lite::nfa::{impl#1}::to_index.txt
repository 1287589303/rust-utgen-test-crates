[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &((*_1).6: std::collections::HashMap<alloc::sync::Arc<str>, u32>),
            StorageLive(_6),
            _6 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:90:9: 90:41 (#0),
                    scope: scope[0],
                },
                kind: _4 = std::collections::HashMap::<alloc::sync::Arc<str>, u32>::get::<str>(move _5, move _6) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:90:9: 90:50 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::option::Option::<&u32>::cloned(move _4) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageLive(_7),
            _7 = {closure@regex-lite/src/nfa.rs:90:55: 90:58},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:90:9: 90:72 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::option::Option::<u32>::map::<usize, {closure@regex-lite/src/nfa.rs:90:55: 90:58}>(move _3, move _7) -> [return: bb3, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:91:6: 91:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:89:5: 91:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:89:50: 89:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:89:28: 89:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/nfa.rs:89:41: 89:45 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/nfa.rs:89:35: 89:39 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:89:35: 89:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:89:35: 89:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:90:9: 90:72 (#0),
                },
            ),
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:90:9: 90:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:90:9: 90:72 (#0),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:90:9: 90:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:90:9: 90:72 (#0),
                },
            ),
        ),
        ty: &'{erased} std::collections::HashMap<alloc::sync::Arc<str, alloc::alloc::Global>, u32, std::hash::RandomState>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:90:9: 90:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:90:9: 90:72 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:90:36: 90:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:90:9: 90:72 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:262 ~ regex_lite[fbae]::nfa::{impl#1}::to_index::{closure#0}),
            [
                i32,
                Binder { value: extern "RustCall" fn((u32,)) -> usize, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:90:55: 90:71 (#0),
            scope: scope[0],
        },
    },
]