[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:310:13: 310:25 (#0),
                    scope: scope[0],
                },
                kind: _4 = hir::parse::Parser::<'_>::flags(move _5) -> [return: bb1, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            _3 = (_4.5: bool),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:310:13: 310:43 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb2, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageLive(_7),
            _7 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:311:20: 311:31 (#0),
                    scope: scope[0],
                },
                kind: _0 = hir::parse::Parser::<'_>::peek(move _7) -> [return: bb3, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb41,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            _2 = const (),
            StorageDead(_3),
            StorageDead(_2),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:313:12: 313:26 (#0),
                    scope: scope[0],
                },
                kind: _9 = hir::parse::Parser::<'_>::is_done(move _10) -> [return: bb5, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:313:12: 313:26 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _9) -> [0: bb7, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            _0 = core::option::Option::<char>::None,
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb41,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            _8 = const (),
            StorageDead(_9),
            StorageDead(_8),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:316:25: 316:35 (#0),
                    scope: scope[0],
                },
                kind: _13 = hir::parse::Parser::<'_>::pos(move _14) -> [return: bb8, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:316:38: 316:49 (#0),
                    scope: scope[0],
                },
                kind: _16 = hir::parse::Parser::<'_>::char(move _17) -> [return: bb9, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:316:38: 316:60 (#0),
                    scope: scope[0],
                },
                kind: _15 = core::char::methods::<impl char>::len_utf8(move _16) -> [return: bb10, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            _18 = AddWithOverflow(_13, _15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:316:25: 316:60 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_18.1: bool), "attempt to compute `{} + {}`, which would overflow", move _13, move _15) -> [success: bb11, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _12 = move (_18.0: usize),
            StorageDead(_15),
            StorageDead(_13),
            FakeRead(ForLet(None), _12),
            StorageLive(_19),
            _19 = const false,
            FakeRead(ForLet(None), _19),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            _27 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:318:24: 318:38 (#0),
                    scope: scope[2],
                },
                kind: _26 = hir::parse::Parser::<'_>::pattern(move _27) -> [return: bb12, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _25 = &(*_26),
            StorageDead(_27),
            StorageLive(_28),
            StorageLive(_29),
            _29 = _12,
            _28 = core::ops::RangeFrom::<usize> { start: move _29 },
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:318:38: 318:47 (#0),
                    scope: scope[2],
                },
                kind: _24 = <str as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _25, move _28) -> [return: bb13, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _23 = &(*_24),
            StorageDead(_28),
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:318:24: 318:62 (#0),
                    scope: scope[2],
                },
                kind: _22 = core::str::<impl str>::char_indices(move _23) -> [return: bb14, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:318:24: 318:62 (#276),
                    scope: scope[2],
                },
                kind: _21 = <core::str::CharIndices<'_> as core::iter::IntoIterator>::into_iter(move _22) -> [return: bb15, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            PlaceMention(_21),
            StorageLive(_30),
            _30 = move _21,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:318:9: 329:10 (#275),
                    scope: scope[3],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:318:9: 329:10 (#275),
                    scope: scope[3],
                },
                kind: falseUnwind -> [real: bb17, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_32),
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            _35 = &mut _30,
            _34 = &mut (*_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:318:24: 318:62 (#276),
                    scope: scope[3],
                },
                kind: _33 = <core::str::CharIndices<'_> as core::iter::Iterator>::next(move _34) -> [return: bb18, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            PlaceMention(_33),
            _36 = discriminant(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:318:24: 318:62 (#276),
                    scope: scope[3],
                },
                kind: switchInt(move _36) -> [0: bb20, 1: bb21, otherwise: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:318:24: 318:62 (#276),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:318:9: 329:10 (#275),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb22, imaginary: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_38),
            _38 = (((_33 as Some).0: (usize, char)).0: usize),
            StorageLive(_39),
            _39 = (((_33 as Some).0: (usize, char)).1: char),
            StorageLive(_40),
            StorageLive(_41),
            _41 = _39,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:319:16: 319:34 (#0),
                    scope: scope[4],
                },
                kind: _40 = core::char::methods::<impl char>::is_whitespace(move _41) -> [return: bb23, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _20 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:318:9: 329:10 (#275),
                    scope: scope[3],
                },
                kind: goto -> bb36,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:319:16: 319:34 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _40) -> [0: bb25, otherwise: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            StorageDead(_40),
            StorageDead(_39),
            StorageDead(_38),
            StorageDead(_35),
            StorageDead(_33),
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            StorageLive(_43),
            _43 = _19,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:321:24: 321:34 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _43) -> [0: bb26, otherwise: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_44),
            StorageLive(_45),
            _45 = _39,
            _44 = Eq(move _45, const '#'),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:321:38: 321:47 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _44) -> [0: bb28, otherwise: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            _19 = const true,
            _32 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:321:20: 328:14 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb35,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[4],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_46),
            _46 = _19,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:323:23: 323:33 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _46) -> [0: bb33, otherwise: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_47),
            StorageLive(_48),
            _48 = _39,
            _47 = Eq(move _48, const '\n'),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:323:37: 323:47 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _47) -> [0: bb32, otherwise: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
            _19 = const false,
            _32 = const (),
            StorageDead(_47),
            StorageDead(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:321:20: 328:14 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb35,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[4],
                },
                kind: goto -> bb33,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_50),
            _50 = _38,
            _51 = AddWithOverflow(_12, _50),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:326:17: 326:27 (#0),
                    scope: scope[4],
                },
                kind: assert(!move (_51.1: bool), "attempt to compute `{} + {}`, which would overflow", _12, move _50) -> [success: bb34, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _12 = move (_51.0: usize),
            StorageDead(_50),
            _20 = const (),
            StorageDead(_47),
            StorageDead(_46),
            StorageDead(_44),
            StorageDead(_43),
            StorageDead(_40),
            StorageDead(_39),
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb36,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            StorageDead(_43),
            StorageDead(_40),
            StorageDead(_39),
            StorageDead(_38),
            StorageDead(_35),
            StorageDead(_33),
            StorageDead(_32),
            _31 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:318:9: 329:10 (#275),
                    scope: scope[3],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            StorageDead(_33),
            StorageDead(_32),
            StorageDead(_30),
            StorageDead(_26),
            StorageDead(_24),
            StorageDead(_21),
            StorageDead(_20),
            StorageLive(_52),
            StorageLive(_53),
            StorageLive(_54),
            StorageLive(_55),
            StorageLive(_56),
            StorageLive(_57),
            StorageLive(_58),
            _58 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:330:9: 330:23 (#0),
                    scope: scope[2],
                },
                kind: _57 = hir::parse::Parser::<'_>::pattern(move _58) -> [return: bb37, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _56 = &(*_57),
            StorageDead(_58),
            StorageLive(_59),
            StorageLive(_60),
            _60 = _12,
            _59 = core::ops::RangeFrom::<usize> { start: move _60 },
            StorageDead(_60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:330:23: 330:32 (#0),
                    scope: scope[2],
                },
                kind: _55 = <str as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _56, move _59) -> [return: bb38, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _54 = &(*_55),
            StorageDead(_59),
            StorageDead(_56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:330:9: 330:40 (#0),
                    scope: scope[2],
                },
                kind: _53 = core::str::<impl str>::chars(move _54) -> [return: bb39, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _52 = &mut _53,
            StorageDead(_54),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:330:9: 330:47 (#0),
                    scope: scope[2],
                },
                kind: _0 = <core::str::Chars<'_> as core::iter::Iterator>::next(move _52) -> [return: bb40, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            StorageDead(_19),
            StorageDead(_12),
            StorageDead(_57),
            StorageDead(_55),
            StorageDead(_53),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:331:6: 331:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb41,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:331:6: 331:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:309:5: 331:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:309:29: 309:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:309:19: 309:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:310:9: 312:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:310:13: 310:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::Flags,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:310:13: 310:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:310:13: 310:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:310:44: 312:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:311:20: 311:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:313:9: 315:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:313:12: 313:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:313:12: 313:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:313:27: 315:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/hir/parse.rs:316:25: 316:60 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:316:13: 316:22 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:316:13: 316:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:316:25: 316:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:316:25: 316:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:316:38: 316:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:316:38: 316:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:316:38: 316:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:316:25: 316:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/hir/parse.rs:317:30: 317:35 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:317:13: 317:27 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:317:13: 317:27 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:318:9: 329:10 (#275),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::str::CharIndices<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:318:24: 318:62 (#276),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::str::CharIndices<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:318:24: 318:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:318:24: 318:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:318:38: 318:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:318:24: 318:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:318:24: 318:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:318:24: 318:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:318:39: 318:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:318:39: 318:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _21,
                                ),
                                regex-lite/src/hir/parse.rs:318:24: 318:62 (#276),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:318:24: 318:62 (#276),
                    },
                ),
            ),
        ),
        ty: core::str::CharIndices<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:318:24: 318:62 (#276),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:309:5: 331:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:318:24: 318:62 (#276),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(usize, char)>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:318:24: 318:62 (#276),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::str::CharIndices<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:318:24: 318:62 (#276),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::str::CharIndices<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:318:24: 318:62 (#276),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:318:9: 329:10 (#275),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:318:9: 329:10 (#275),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _33,
                                ),
                                regex-lite/src/hir/parse.rs:318:24: 318:62 (#276),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:318:13: 318:20 (#277),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:318:14: 318:15 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _33,
                                ),
                                regex-lite/src/hir/parse.rs:318:24: 318:62 (#276),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:318:13: 318:20 (#277),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:318:17: 318:19 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/hir/parse.rs:319:13: 328:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:319:16: 319:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/hir/parse.rs:319:13: 328:14 (#0),
                },
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:319:16: 319:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/hir/parse.rs:319:13: 328:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:319:35: 321:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/hir/parse.rs:319:13: 328:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:321:24: 321:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/hir/parse.rs:319:13: 328:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:321:38: 321:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/hir/parse.rs:319:13: 328:14 (#0),
                },
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:321:38: 321:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/hir/parse.rs:319:13: 328:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:323:23: 323:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/hir/parse.rs:319:13: 328:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:323:37: 323:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/hir/parse.rs:319:13: 328:14 (#0),
                },
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:323:37: 323:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: regex-lite/src/hir/parse.rs:319:13: 328:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:325:20: 328:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:326:26: 326:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:326:17: 326:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:330:9: 330:47 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:330:9: 330:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:330:9: 330:47 (#0),
                },
            ),
        ),
        ty: core::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:330:9: 330:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:330:9: 330:47 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:330:9: 330:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:330:9: 330:47 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:330:23: 330:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:330:9: 330:47 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:330:9: 330:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:330:9: 330:47 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:330:9: 330:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:330:9: 330:47 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:330:9: 330:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:330:9: 330:47 (#0),
                },
            ),
        ),
        ty: core::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:330:24: 330:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:330:24: 330:29 (#0),
            scope: scope[0],
        },
    },
]