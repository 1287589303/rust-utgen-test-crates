[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = &((*_1).1: pool::Pool<pikevm::Cache, alloc::boxed::Box<dyn core::ops::Fn() -> pikevm::Cache + core::marker::Send + core::marker::Sync + core::panic::RefUnwindSafe + core::panic::UnwindSafe>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1017:25: 1017:40 (#0),
                    scope: scope[0],
                },
                kind: _4 = pool::Pool::<pikevm::Cache, alloc::boxed::Box<dyn core::ops::Fn() -> pikevm::Cache + core::marker::Send + core::marker::Sync + core::panic::RefUnwindSafe + core::panic::UnwindSafe>>::get(move _5) -> [return: bb1, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageLive(_6),
            StorageLive(_7),
            _7 = core::option::Option::<int::NonMaxUsize>::None,
            StorageLive(_8),
            _8 = core::option::Option::<int::NonMaxUsize>::None,
            _6 = [move _7, move _8],
            StorageDead(_8),
            StorageDead(_7),
            FakeRead(ForLet(None), _6),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &((*_1).0: alloc::sync::Arc<pikevm::PikeVM>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1019:23: 1026:10 (#0),
                    scope: scope[2],
                },
                kind: _11 = <alloc::sync::Arc<pikevm::PikeVM> as core::ops::Deref>::deref(move _12) -> [return: bb2, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = &(*_11),
            StorageDead(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &mut _4,
            _15 = &mut (*_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1020:13: 1020:23 (#0),
                    scope: scope[2],
                },
                kind: _14 = <pool::PoolGuard<'_, pikevm::Cache, alloc::boxed::Box<dyn core::ops::Fn() -> pikevm::Cache + core::marker::Send + core::marker::Sync + core::panic::RefUnwindSafe + core::panic::UnwindSafe>> as core::ops::DerefMut>::deref_mut(move _15) -> [return: bb3, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _13 = &mut (*_14),
            StorageDead(_15),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1021:13: 1021:32 (#0),
                    scope: scope[2],
                },
                kind: _18 = core::str::<impl str>::as_bytes(move _19) -> [return: bb4, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _17 = &(*_18),
            StorageDead(_19),
            StorageLive(_20),
            _20 = _3,
            StorageLive(_21),
            StorageLive(_22),
            _22 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1023:13: 1023:27 (#0),
                    scope: scope[2],
                },
                kind: _21 = core::str::<impl str>::len(move _22) -> [return: bb5, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            _25 = &mut _6,
            _24 = &mut (*_25),
            _23 = move _24 as &mut [core::option::Option<int::NonMaxUsize>] (PointerCoercion(Unsize)),
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1019:23: 1026:10 (#0),
                    scope: scope[2],
                },
                kind: _9 = pikevm::PikeVM::search(move _10, move _13, move _17, move _20, move _21, const true, move _23) -> [return: bb6, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_21),
            StorageDead(_20),
            StorageDead(_17),
            StorageDead(_13),
            StorageDead(_10),
            FakeRead(ForLet(None), _9),
            StorageDead(_25),
            StorageDead(_18),
            StorageDead(_16),
            StorageDead(_14),
            StorageDead(_11),
            StorageLive(_26),
            StorageLive(_27),
            _27 = _9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1027:13: 1027:20 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _27) -> [0: bb7, otherwise: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::option::Option::<usize>::None,
            StorageDead(_27),
            StorageDead(_26),
            StorageDead(_9),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1031:5: 1031:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb13, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _26 = const (),
            StorageDead(_27),
            StorageDead(_26),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            _32 = const 1_usize,
            _33 = Len(_6),
            _34 = Lt(_32, _33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1030:14: 1030:22 (#0),
                    scope: scope[3],
                },
                kind: assert(move _34, "index out of bounds: the length is {} but the index is {}", move _33, _32) -> [success: bb9, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _31 = _6[_32],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1030:14: 1030:31 (#0),
                    scope: scope[3],
                },
                kind: _30 = core::option::Option::<int::NonMaxUsize>::unwrap(move _31) -> [return: bb10, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1030:14: 1030:37 (#0),
                    scope: scope[3],
                },
                kind: _29 = int::NonMaxUsize::get(move _30) -> [return: bb11, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            _0 = core::option::Option::<usize>::Some(move _29),
            StorageDead(_29),
            StorageDead(_9),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1031:5: 1031:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb12, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1031:6: 1031:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1031:6: 1031:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1031:6: 1031:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1031:5: 1031:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb16, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/string.rs:1012:5: 1031:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1016:10: 1016:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} string::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1013:9: 1013:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/string.rs:1014:19: 1014:23 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/string.rs:1014:9: 1014:17 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:1014:9: 1014:17 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1014:9: 1014:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/string.rs:1015:16: 1015:21 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/string.rs:1015:9: 1015:14 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:1015:9: 1015:14 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1015:9: 1015:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/string.rs:1017:25: 1017:40 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:1017:13: 1017:22 (#0),
                    },
                ),
            ),
        ),
        ty: pool::PoolGuard<'{erased}, pikevm::Cache, alloc::boxed::Box<dyn [Binder { value: Trait(core::ops::Fn<()>), bound_vars: [] }, Binder { value: Projection(Output = pikevm::Cache), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:3316 ~ core[a245]::marker::Sync)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:32818 ~ core[a245]::marker::Send)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42674 ~ core[a245]::panic::unwind_safe::RefUnwindSafe)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42673 ~ core[a245]::panic::unwind_safe::UnwindSafe)), bound_vars: [] }] + '{erased}, alloc::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1017:13: 1017:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} pool::Pool<pikevm::Cache, alloc::boxed::Box<dyn [Binder { value: Trait(core::ops::Fn<()>), bound_vars: [] }, Binder { value: Projection(Output = pikevm::Cache), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:3316 ~ core[a245]::marker::Sync)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:32818 ~ core[a245]::marker::Send)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42674 ~ core[a245]::panic::unwind_safe::RefUnwindSafe)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42673 ~ core[a245]::panic::unwind_safe::UnwindSafe)), bound_vars: [] }] + '{erased}, alloc::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1017:25: 1017:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/string.rs:1018:25: 1018:37 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:1018:13: 1018:22 (#0),
                    },
                ),
            ),
        ),
        ty: [core::option::Option<int::NonMaxUsize>; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1018:13: 1018:22 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<int::NonMaxUsize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1018:26: 1018:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<int::NonMaxUsize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1018:32: 1018:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/string.rs:1019:23: 1026:10 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/string.rs:1019:13: 1019:20 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1019:13: 1019:20 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} pikevm::PikeVM,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1019:23: 1019:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} pikevm::PikeVM,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1019:23: 1026:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::sync::Arc<pikevm::PikeVM, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1019:23: 1019:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut pikevm::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1020:13: 1020:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut pikevm::Cache,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1020:13: 1020:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut pool::PoolGuard<'{erased}, pikevm::Cache, alloc::boxed::Box<dyn [Binder { value: Trait(core::ops::Fn<()>), bound_vars: [] }, Binder { value: Projection(Output = pikevm::Cache), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:3316 ~ core[a245]::marker::Sync)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:32818 ~ core[a245]::marker::Send)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42674 ~ core[a245]::panic::unwind_safe::RefUnwindSafe)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42673 ~ core[a245]::panic::unwind_safe::UnwindSafe)), bound_vars: [] }] + '{erased}, alloc::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1020:13: 1020:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut pool::PoolGuard<'{erased}, pikevm::Cache, alloc::boxed::Box<dyn [Binder { value: Trait(core::ops::Fn<()>), bound_vars: [] }, Binder { value: Projection(Output = pikevm::Cache), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:3316 ~ core[a245]::marker::Sync)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:32818 ~ core[a245]::marker::Send)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42674 ~ core[a245]::panic::unwind_safe::RefUnwindSafe)), bound_vars: [] }, Binder { value: AutoTrait(DefId(1:42673 ~ core[a245]::panic::unwind_safe::UnwindSafe)), bound_vars: [] }] + '{erased}, alloc::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1020:13: 1020:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1021:13: 1021:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1021:13: 1021:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1021:13: 1021:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1022:13: 1022:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1023:13: 1023:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1023:13: 1023:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [core::option::Option<int::NonMaxUsize>],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1025:13: 1025:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [core::option::Option<int::NonMaxUsize>; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1025:13: 1025:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [core::option::Option<int::NonMaxUsize>; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1025:13: 1025:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1027:9: 1029:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1027:13: 1027:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1027:21: 1029:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1030:14: 1030:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:1030:9: 1030:38 (#0),
                },
            ),
        ),
        ty: int::NonMaxUsize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1030:14: 1030:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:1030:9: 1030:38 (#0),
                },
            ),
        ),
        ty: core::option::Option<int::NonMaxUsize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1030:14: 1030:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/string.rs:1030:9: 1030:38 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1030:20: 1030:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1030:14: 1030:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/string.rs:1030:14: 1030:22 (#0),
            scope: scope[0],
        },
    },
]