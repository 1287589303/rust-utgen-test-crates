[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = ((*_2).0: u32),
            StorageLive(_5),
            _5 = ((*_2).1: core::option::Option<u32>),
            _3 = (move _4, move _5),
            StorageDead(_5),
            StorageDead(_4),
            PlaceMention(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:366:9: 366:33 (#0),
                    scope: scope[0],
                },
                kind: switchInt((_3.0: u32)) -> [0: bb2, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = discriminant((_3.1: core::option::Option<u32>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:366:9: 366:33 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _10) -> [0: bb6, 1: bb7, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _9 = discriminant((_3.1: core::option::Option<u32>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:366:9: 366:33 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _9) -> [1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:366:9: 366:33 (#0),
                    scope: scope[0],
                },
                kind: switchInt((((_3.1: core::option::Option<u32>) as Some).0: u32)) -> [1: bb4, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:367:13: 367:25 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb9, imaginary: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:366:15: 366:33 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:368:13: 368:24 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb11, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:369:13: 369:29 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb13, imaginary: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_32),
            _32 = (_3.0: u32),
            StorageLive(_33),
            _33 = (((_3.1: core::option::Option<u32>) as Some).0: u32),
            StorageLive(_34),
            _34 = &(*_1),
            StorageLive(_35),
            StorageLive(_36),
            _36 = &((*_2).3: alloc::boxed::Box<hir::Hir>),
            _35 = &(*(*_36)),
            StorageLive(_37),
            _37 = ((*_2).2: bool),
            StorageLive(_38),
            _38 = _32,
            StorageLive(_39),
            _39 = _33,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:370:33: 370:79 (#0),
                    scope: scope[3],
                },
                kind: _0 = nfa::Compiler::c_bounded(move _34, move _35, move _37, move _38, move _39) -> [return: bb17, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            _11 = &(*_1),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &((*_2).3: alloc::boxed::Box<hir::Hir>),
            _12 = &(*(*_13)),
            StorageLive(_14),
            _14 = ((*_2).2: bool),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:367:29: 367:69 (#0),
                    scope: scope[0],
                },
                kind: _0 = nfa::Compiler::c_zero_or_one(move _11, move _12, move _14) -> [return: bb10, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:367:68: 367:69 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_15),
            _15 = (_3.0: u32),
            StorageLive(_16),
            _16 = &(*_1),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &((*_2).3: alloc::boxed::Box<hir::Hir>),
            _17 = &(*(*_18)),
            StorageLive(_19),
            _19 = ((*_2).2: bool),
            StorageLive(_20),
            _20 = _15,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:368:28: 368:70 (#0),
                    scope: scope[1],
                },
                kind: _0 = nfa::Compiler::c_at_least(move _16, move _17, move _19, move _20) -> [return: bb12, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_18),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:368:69: 368:70 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            _22 = &(_3.0: u32),
            StorageLive(_24),
            _24 = &(((_3.1: core::option::Option<u32>) as Some).0: u32),
            _6 = &fake shallow (_3.0: u32),
            _7 = &fake shallow (_3.1: core::option::Option<u32>),
            _8 = &fake shallow (((_3.1: core::option::Option<u32>) as Some).0: u32),
            StorageLive(_25),
            StorageLive(_26),
            _26 = (*_22),
            StorageLive(_27),
            _27 = (*_24),
            _25 = Eq(move _26, move _27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:369:33: 369:43 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _25) -> [0: bb15, otherwise: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_26),
            StorageDead(_25),
            FakeRead(ForMatchGuard, _6),
            FakeRead(ForMatchGuard, _7),
            FakeRead(ForMatchGuard, _8),
            FakeRead(ForGuardBinding, _22),
            FakeRead(ForGuardBinding, _24),
            StorageLive(_21),
            _21 = (_3.0: u32),
            StorageLive(_23),
            _23 = (((_3.1: core::option::Option<u32>) as Some).0: u32),
            StorageLive(_28),
            _28 = &(*_1),
            StorageLive(_29),
            StorageLive(_30),
            _30 = &((*_2).3: alloc::boxed::Box<hir::Hir>),
            _29 = &(*(*_30)),
            StorageLive(_31),
            _31 = _21,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:369:47: 369:76 (#0),
                    scope: scope[2],
                },
                kind: _0 = nfa::Compiler::c_exactly(move _28, move _29, move _31) -> [return: bb16, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_26),
            StorageDead(_25),
            StorageDead(_24),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:369:33: 369:43 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_29),
            StorageDead(_28),
            StorageDead(_30),
            StorageDead(_23),
            StorageDead(_21),
            StorageDead(_24),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:369:75: 369:76 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            StorageDead(_38),
            StorageDead(_37),
            StorageDead(_35),
            StorageDead(_34),
            StorageDead(_36),
            StorageDead(_33),
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:370:78: 370:79 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:372:6: 372:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:362:5: 372:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<nfa::ThompsonRef, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:365:10: 365:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} nfa::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:363:9: 363:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/nfa.rs:364:14: 364:30 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/nfa.rs:364:9: 364:12 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:364:9: 364:12 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} hir::Repetition,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:364:9: 364:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:366:9: 371:10 (#0),
                },
            ),
        ),
        ty: (u32, core::option::Option<u32>),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:366:15: 366:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:366:9: 371:10 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:366:16: 366:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:366:9: 371:10 (#0),
                },
            ),
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:366:25: 366:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:366:15: 366:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:366:15: 366:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:366:15: 366:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:367:17: 367:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:368:19: 368:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:366:9: 371:10 (#0),
                },
            ),
        ),
        ty: &'{erased} nfa::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:367:29: 367:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:366:9: 371:10 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:367:48: 367:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:366:9: 371:10 (#0),
                },
            ),
        ),
        ty: &'{erased} alloc::boxed::Box<hir::Hir, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:367:48: 367:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:366:9: 371:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:367:58: 367:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                regex-lite/src/nfa.rs:366:15: 366:33 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:368:13: 368:24 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:368:14: 368:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:366:9: 371:10 (#0),
                },
            ),
        ),
        ty: &'{erased} nfa::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:368:28: 368:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:366:9: 371:10 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:368:44: 368:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:366:9: 371:10 (#0),
                },
            ),
        ),
        ty: &'{erased} alloc::boxed::Box<hir::Hir, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:368:44: 368:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:366:9: 371:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:368:54: 368:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:366:9: 371:10 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:368:66: 368:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                regex-lite/src/nfa.rs:366:15: 366:33 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:369:13: 369:29 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:369:14: 369:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                RefForGuard,
            ),
        ),
        ty: &'{erased} u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:369:14: 369:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                regex-lite/src/nfa.rs:366:15: 366:33 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:369:13: 369:29 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:369:24: 369:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                RefForGuard,
            ),
        ),
        ty: &'{erased} u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:369:24: 369:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:366:9: 371:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:369:33: 369:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:366:9: 371:10 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:369:33: 369:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:366:9: 371:10 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:369:40: 369:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:366:9: 371:10 (#0),
                },
            ),
        ),
        ty: &'{erased} nfa::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:369:47: 369:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:366:9: 371:10 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:369:62: 369:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:366:9: 371:10 (#0),
                },
            ),
        ),
        ty: &'{erased} alloc::boxed::Box<hir::Hir, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:369:62: 369:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:366:9: 371:10 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:369:72: 369:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                regex-lite/src/nfa.rs:366:15: 366:33 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:370:13: 370:29 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:370:14: 370:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                regex-lite/src/nfa.rs:366:15: 366:33 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:370:13: 370:29 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:370:24: 370:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:366:9: 371:10 (#0),
                },
            ),
        ),
        ty: &'{erased} nfa::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:370:33: 370:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:366:9: 371:10 (#0),
                },
            ),
        ),
        ty: &'{erased} hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:370:48: 370:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:366:9: 371:10 (#0),
                },
            ),
        ),
        ty: &'{erased} alloc::boxed::Box<hir::Hir, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:370:48: 370:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:366:9: 371:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:370:58: 370:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:366:9: 371:10 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:370:70: 370:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:366:9: 371:10 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:370:75: 370:78 (#0),
            scope: scope[0],
        },
    },
]