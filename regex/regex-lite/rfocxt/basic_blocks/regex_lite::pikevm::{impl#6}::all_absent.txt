[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &((*_1).0: alloc::vec::Vec<core::option::Option<int::NonMaxUsize>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:728:17: 728:33 (#0),
                    scope: scope[0],
                },
                kind: _4 = alloc::vec::Vec::<core::option::Option<int::NonMaxUsize>>::len(move _5) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_6),
            _6 = ((*_1).1: usize),
            _7 = SubWithOverflow(_4, _6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:728:17: 728:56 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_7.1: bool), "attempt to compute `{} - {}`, which would overflow", move _4, move _6) -> [success: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = move (_7.0: usize),
            StorageDead(_6),
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &mut ((*_1).0: alloc::vec::Vec<core::option::Option<int::NonMaxUsize>>),
            StorageLive(_11),
            StorageLive(_12),
            _12 = _3,
            StorageLive(_13),
            StorageLive(_14),
            _14 = _3,
            StorageLive(_15),
            _15 = ((*_1).2: usize),
            _16 = AddWithOverflow(_14, _15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:729:28: 729:55 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_16.1: bool), "attempt to compute `{} + {}`, which would overflow", move _14, move _15) -> [success: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _13 = move (_16.0: usize),
            StorageDead(_15),
            StorageDead(_14),
            _11 = core::ops::Range::<usize> { start: move _12, end: move _13 },
            StorageDead(_13),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:729:24: 729:56 (#0),
                    scope: scope[1],
                },
                kind: _9 = <alloc::vec::Vec<core::option::Option<int::NonMaxUsize>> as core::ops::IndexMut<core::ops::Range<usize>>>::index_mut(move _10, move _11) -> [return: bb4, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            _8 = &mut (*_9),
            _2 = &mut (*_8),
            StorageDead(_3),
            _0 = &mut (*_2),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:730:6: 730:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pikevm.rs:727:5: 730:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [core::option::Option<int::NonMaxUsize>],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:727:33: 727:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut pikevm::SlotTable,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:727:19: 727:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [core::option::Option<int::NonMaxUsize>],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:729:9: 729:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/pikevm.rs:728:17: 728:56 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/pikevm.rs:728:13: 728:14 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:728:13: 728:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:728:17: 728:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::vec::Vec<core::option::Option<int::NonMaxUsize>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:728:17: 728:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:728:36: 728:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:728:17: 728:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/pikevm.rs:729:9: 729:56 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [core::option::Option<int::NonMaxUsize>],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:729:9: 729:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/pikevm.rs:729:9: 729:56 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [core::option::Option<int::NonMaxUsize>],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:729:24: 729:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/pikevm.rs:729:9: 729:56 (#0),
                },
            ),
        ),
        ty: &'{erased} mut alloc::vec::Vec<core::option::Option<int::NonMaxUsize>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:729:14: 729:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/pikevm.rs:729:9: 729:56 (#0),
                },
            ),
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:729:25: 729:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:729:25: 729:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:729:28: 729:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/pikevm.rs:729:9: 729:56 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:729:28: 729:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/pikevm.rs:729:9: 729:56 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:729:32: 729:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pikevm.rs:729:28: 729:55 (#0),
            scope: scope[0],
        },
    },
]