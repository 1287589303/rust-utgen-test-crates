[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            PlaceMention(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1348:9: 1348:16 (#0),
                    scope: scope[0],
                },
                kind: _17 = <str as core::cmp::PartialEq>::eq(_1, const "alnum") -> [return: bb42, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_93),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1369:25: 1369:65 (#0),
                    scope: scope[0],
                },
                kind: _93 = error::Error::new(const hir::parse::ERR_POSIX_CLASS_UNRECOGNIZED) -> [return: bb57, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1348:9: 1348:16 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb43, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1349:9: 1349:16 (#0),
                    scope: scope[0],
                },
                kind: _16 = <str as core::cmp::PartialEq>::eq(_1, const "alpha") -> [return: bb41, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1349:9: 1349:16 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb44, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1350:9: 1350:16 (#0),
                    scope: scope[0],
                },
                kind: _15 = <str as core::cmp::PartialEq>::eq(_1, const "ascii") -> [return: bb40, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1350:9: 1350:16 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb45, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1351:9: 1351:16 (#0),
                    scope: scope[0],
                },
                kind: _14 = <str as core::cmp::PartialEq>::eq(_1, const "blank") -> [return: bb39, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1351:9: 1351:16 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb46, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1352:9: 1352:16 (#0),
                    scope: scope[0],
                },
                kind: _13 = <str as core::cmp::PartialEq>::eq(_1, const "cntrl") -> [return: bb38, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1352:9: 1352:16 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb47, imaginary: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1353:9: 1353:16 (#0),
                    scope: scope[0],
                },
                kind: _12 = <str as core::cmp::PartialEq>::eq(_1, const "digit") -> [return: bb37, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1353:9: 1353:16 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb48, imaginary: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1354:9: 1354:16 (#0),
                    scope: scope[0],
                },
                kind: _11 = <str as core::cmp::PartialEq>::eq(_1, const "graph") -> [return: bb36, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1354:9: 1354:16 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb49, imaginary: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1355:9: 1355:16 (#0),
                    scope: scope[0],
                },
                kind: _10 = <str as core::cmp::PartialEq>::eq(_1, const "lower") -> [return: bb35, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1355:9: 1355:16 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb50, imaginary: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1356:9: 1356:16 (#0),
                    scope: scope[0],
                },
                kind: _9 = <str as core::cmp::PartialEq>::eq(_1, const "print") -> [return: bb34, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1356:9: 1356:16 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb51, imaginary: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1357:9: 1357:16 (#0),
                    scope: scope[0],
                },
                kind: _8 = <str as core::cmp::PartialEq>::eq(_1, const "punct") -> [return: bb33, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1357:9: 1357:16 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb52, imaginary: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1358:9: 1358:16 (#0),
                    scope: scope[0],
                },
                kind: _7 = <str as core::cmp::PartialEq>::eq(_1, const "space") -> [return: bb32, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1358:9: 1358:16 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb53, imaginary: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1366:9: 1366:16 (#0),
                    scope: scope[0],
                },
                kind: _6 = <str as core::cmp::PartialEq>::eq(_1, const "upper") -> [return: bb31, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1366:9: 1366:16 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb54, imaginary: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1367:9: 1367:15 (#0),
                    scope: scope[0],
                },
                kind: _5 = <str as core::cmp::PartialEq>::eq(_1, const "word") -> [return: bb30, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1367:9: 1367:15 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb55, imaginary: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1368:9: 1368:17 (#0),
                    scope: scope[0],
                },
                kind: _4 = <str as core::cmp::PartialEq>::eq(_1, const "xdigit") -> [return: bb29, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1368:9: 1368:17 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb56, imaginary: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1368:9: 1368:17 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb1, otherwise: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1367:9: 1367:15 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _5) -> [0: bb27, otherwise: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1366:9: 1366:16 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [0: bb25, otherwise: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1358:9: 1358:16 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _7) -> [0: bb23, otherwise: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1357:9: 1357:16 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _8) -> [0: bb21, otherwise: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1356:9: 1356:16 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _9) -> [0: bb19, otherwise: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1355:9: 1355:16 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _10) -> [0: bb17, otherwise: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1354:9: 1354:16 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _11) -> [0: bb15, otherwise: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1353:9: 1353:16 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _12) -> [0: bb13, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1352:9: 1352:16 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _13) -> [0: bb11, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1351:9: 1351:16 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _14) -> [0: bb9, otherwise: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1350:9: 1350:16 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _15) -> [0: bb7, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1349:9: 1349:16 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _16) -> [0: bb5, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1348:9: 1348:16 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _17) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = (const 48_u8, const 57_u8),
            StorageLive(_22),
            _22 = (const 65_u8, const 90_u8),
            StorageLive(_23),
            _23 = (const 97_u8, const 122_u8),
            _20 = [move _21, move _22, move _23],
            StorageDead(_23),
            StorageDead(_22),
            StorageDead(_21),
            _19 = &_20,
            _18 = &(*_19),
            _3 = move _18 as &[(u8, u8)] (PointerCoercion(Unsize)),
            StorageDead(_18),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1348:62: 1348:63 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb58,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            _27 = (const 65_u8, const 90_u8),
            StorageLive(_28),
            _28 = (const 97_u8, const 122_u8),
            _26 = [move _27, move _28],
            StorageDead(_28),
            StorageDead(_27),
            _25 = &_26,
            _24 = &(*_25),
            _3 = move _24 as &[(u8, u8)] (PointerCoercion(Unsize)),
            StorageDead(_24),
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1349:48: 1349:49 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb58,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            _32 = (const 0_u8, const 127_u8),
            _31 = [move _32],
            StorageDead(_32),
            _30 = &_31,
            _29 = &(*_30),
            _3 = move _29 as &[(u8, u8)] (PointerCoercion(Unsize)),
            StorageDead(_29),
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1350:40: 1350:41 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb58,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            _36 = (const 9_u8, const 9_u8),
            StorageLive(_37),
            _37 = (const 32_u8, const 32_u8),
            _35 = [move _36, move _37],
            StorageDead(_37),
            StorageDead(_36),
            _34 = &_35,
            _33 = &(*_34),
            _3 = move _33 as &[(u8, u8)] (PointerCoercion(Unsize)),
            StorageDead(_33),
            StorageDead(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1351:50: 1351:51 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb58,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_38),
            StorageLive(_39),
            StorageLive(_40),
            StorageLive(_41),
            _41 = (const 0_u8, const 31_u8),
            StorageLive(_42),
            _42 = (const 127_u8, const 127_u8),
            _40 = [move _41, move _42],
            StorageDead(_42),
            StorageDead(_41),
            _39 = &_40,
            _38 = &(*_39),
            _3 = move _38 as &[(u8, u8)] (PointerCoercion(Unsize)),
            StorageDead(_38),
            StorageDead(_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1352:60: 1352:61 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb58,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            StorageLive(_46),
            _46 = (const 48_u8, const 57_u8),
            _45 = [move _46],
            StorageDead(_46),
            _44 = &_45,
            _43 = &(*_44),
            _3 = move _43 as &[(u8, u8)] (PointerCoercion(Unsize)),
            StorageDead(_43),
            StorageDead(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1353:34: 1353:35 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb58,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_47),
            StorageLive(_48),
            StorageLive(_49),
            StorageLive(_50),
            _50 = (const 33_u8, const 126_u8),
            _49 = [move _50],
            StorageDead(_50),
            _48 = &_49,
            _47 = &(*_48),
            _3 = move _47 as &[(u8, u8)] (PointerCoercion(Unsize)),
            StorageDead(_47),
            StorageDead(_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1354:34: 1354:35 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb58,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_51),
            StorageLive(_52),
            StorageLive(_53),
            StorageLive(_54),
            _54 = (const 97_u8, const 122_u8),
            _53 = [move _54],
            StorageDead(_54),
            _52 = &_53,
            _51 = &(*_52),
            _3 = move _51 as &[(u8, u8)] (PointerCoercion(Unsize)),
            StorageDead(_51),
            StorageDead(_52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1355:34: 1355:35 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb58,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_55),
            StorageLive(_56),
            StorageLive(_57),
            StorageLive(_58),
            _58 = (const 32_u8, const 126_u8),
            _57 = [move _58],
            StorageDead(_58),
            _56 = &_57,
            _55 = &(*_56),
            _3 = move _55 as &[(u8, u8)] (PointerCoercion(Unsize)),
            StorageDead(_55),
            StorageDead(_56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1356:34: 1356:35 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb58,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_59),
            StorageLive(_60),
            StorageLive(_61),
            StorageLive(_62),
            _62 = (const 33_u8, const 47_u8),
            StorageLive(_63),
            _63 = (const 58_u8, const 64_u8),
            StorageLive(_64),
            _64 = (const 91_u8, const 96_u8),
            StorageLive(_65),
            _65 = (const 123_u8, const 126_u8),
            _61 = [move _62, move _63, move _64, move _65],
            StorageDead(_65),
            StorageDead(_64),
            StorageDead(_63),
            StorageDead(_62),
            _60 = &_61,
            _59 = &(*_60),
            _3 = move _59 as &[(u8, u8)] (PointerCoercion(Unsize)),
            StorageDead(_59),
            StorageDead(_60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1357:76: 1357:77 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb58,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_66),
            StorageLive(_67),
            StorageLive(_68),
            StorageLive(_69),
            _69 = (const 9_u8, const 9_u8),
            StorageLive(_70),
            _70 = (const 10_u8, const 10_u8),
            StorageLive(_71),
            _71 = (const 11_u8, const 11_u8),
            StorageLive(_72),
            _72 = (const 12_u8, const 12_u8),
            StorageLive(_73),
            _73 = (const 13_u8, const 13_u8),
            StorageLive(_74),
            _74 = (const 32_u8, const 32_u8),
            _68 = [move _69, move _70, move _71, move _72, move _73, move _74],
            StorageDead(_74),
            StorageDead(_73),
            StorageDead(_72),
            StorageDead(_71),
            StorageDead(_70),
            StorageDead(_69),
            _67 = &_68,
            _66 = &(*_67),
            _3 = move _66 as &[(u8, u8)] (PointerCoercion(Unsize)),
            StorageDead(_66),
            StorageDead(_67),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1365:9: 1365:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb58,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_75),
            StorageLive(_76),
            StorageLive(_77),
            StorageLive(_78),
            _78 = (const 65_u8, const 90_u8),
            _77 = [move _78],
            StorageDead(_78),
            _76 = &_77,
            _75 = &(*_76),
            _3 = move _75 as &[(u8, u8)] (PointerCoercion(Unsize)),
            StorageDead(_75),
            StorageDead(_76),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1366:34: 1366:35 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb58,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_79),
            StorageLive(_80),
            StorageLive(_81),
            StorageLive(_82),
            _82 = (const 48_u8, const 57_u8),
            StorageLive(_83),
            _83 = (const 65_u8, const 90_u8),
            StorageLive(_84),
            _84 = (const 95_u8, const 95_u8),
            StorageLive(_85),
            _85 = (const 97_u8, const 122_u8),
            _81 = [move _82, move _83, move _84, move _85],
            StorageDead(_85),
            StorageDead(_84),
            StorageDead(_83),
            StorageDead(_82),
            _80 = &_81,
            _79 = &(*_80),
            _3 = move _79 as &[(u8, u8)] (PointerCoercion(Unsize)),
            StorageDead(_79),
            StorageDead(_80),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1367:75: 1367:76 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb58,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_86),
            StorageLive(_87),
            StorageLive(_88),
            StorageLive(_89),
            _89 = (const 48_u8, const 57_u8),
            StorageLive(_90),
            _90 = (const 65_u8, const 70_u8),
            StorageLive(_91),
            _91 = (const 97_u8, const 102_u8),
            _88 = [move _89, move _90, move _91],
            StorageDead(_91),
            StorageDead(_90),
            StorageDead(_89),
            _87 = &_88,
            _86 = &(*_87),
            _3 = move _86 as &[(u8, u8)] (PointerCoercion(Unsize)),
            StorageDead(_86),
            StorageDead(_87),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1368:63: 1368:64 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb58,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::result::Result::<core::iter::Map<core::slice::Iter<'_, (u8, u8)>, {closure@regex-lite/src/hir/parse.rs:1371:25: 1371:40}>, error::Error>::Err(move _93),
            StorageDead(_93),
            StorageDead(_3),
            StorageDead(_88),
            StorageDead(_81),
            StorageDead(_77),
            StorageDead(_68),
            StorageDead(_61),
            StorageDead(_57),
            StorageDead(_53),
            StorageDead(_49),
            StorageDead(_45),
            StorageDead(_40),
            StorageDead(_35),
            StorageDead(_31),
            StorageDead(_26),
            StorageDead(_20),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1375:2: 1375:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb61,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = &(*_3),
            FakeRead(ForLet(None), _2),
            AscribeUserType(_2, o, UserTypeProjection { base: UserType(1), projs: [] }),
            StorageDead(_3),
            StorageLive(_94),
            StorageLive(_95),
            StorageLive(_96),
            _96 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1371:8: 1371:20 (#0),
                    scope: scope[1],
                },
                kind: _95 = core::slice::<impl [(u8, u8)]>::iter(move _96) -> [return: bb59, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_96),
            StorageLive(_97),
            _97 = {closure@regex-lite/src/hir/parse.rs:1371:25: 1371:40},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1371:8: 1374:7 (#0),
                    scope: scope[1],
                },
                kind: _94 = <core::slice::Iter<'_, (u8, u8)> as core::iter::Iterator>::map::<hir::ClassRange, {closure@regex-lite/src/hir/parse.rs:1371:25: 1371:40}>(move _95, move _97) -> [return: bb60, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_97),
            StorageDead(_95),
            _0 = core::result::Result::<core::iter::Map<core::slice::Iter<'_, (u8, u8)>, {closure@regex-lite/src/hir/parse.rs:1371:25: 1371:40}>, error::Error>::Ok(move _94),
            StorageDead(_94),
            StorageDead(_88),
            StorageDead(_81),
            StorageDead(_77),
            StorageDead(_68),
            StorageDead(_61),
            StorageDead(_57),
            StorageDead(_53),
            StorageDead(_49),
            StorageDead(_45),
            StorageDead(_40),
            StorageDead(_35),
            StorageDead(_31),
            StorageDead(_26),
            StorageDead(_20),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1375:2: 1375:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb61,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1375:2: 1375:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1344:1: 1375:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<Alias(Opaque, AliasTy { args: [], def_id: DefId(0:1306 ~ regex_lite[fbae]::hir::parse::posix_class::{opaque#0}) }), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1346:6: 1346:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/hir/parse.rs:1345:11: 1345:15 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/hir/parse.rs:1345:5: 1345:9 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:1345:5: 1345:9 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1345:5: 1345:9 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/hir/parse.rs:1347:38: 1370:6 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:1347:9: 1347:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [(u8, u8)],
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(0),
                            projs: [],
                        },
                        regex-lite/src/hir/parse.rs:1347:16: 1347:35 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1347:9: 1347:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(u8, u8)],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1347:38: 1370:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1368:9: 1368:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1367:9: 1367:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1366:9: 1366:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1358:9: 1358:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1357:9: 1357:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1356:9: 1356:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1355:9: 1355:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1354:9: 1354:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1353:9: 1353:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1352:9: 1352:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1351:9: 1351:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1350:9: 1350:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1349:9: 1349:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1348:9: 1348:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(u8, u8); 3_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1348:20: 1348:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(u8, u8); 3_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1348:20: 1348:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [(u8, u8); 3_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1348:21: 1348:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, u8),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1348:22: 1348:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, u8),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1348:36: 1348:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, u8),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1348:50: 1348:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(u8, u8); 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1349:20: 1349:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(u8, u8); 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1349:20: 1349:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [(u8, u8); 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1349:21: 1349:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, u8),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1349:22: 1349:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, u8),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1349:36: 1349:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(u8, u8); 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1350:20: 1350:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(u8, u8); 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1350:20: 1350:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [(u8, u8); 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1350:21: 1350:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, u8),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1350:22: 1350:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(u8, u8); 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1351:20: 1351:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(u8, u8); 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1351:20: 1351:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [(u8, u8); 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1351:21: 1351:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, u8),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1351:22: 1351:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, u8),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1351:38: 1351:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(u8, u8); 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1352:20: 1352:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(u8, u8); 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1352:20: 1352:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [(u8, u8); 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1352:21: 1352:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, u8),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1352:22: 1352:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, u8),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1352:42: 1352:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(u8, u8); 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1353:20: 1353:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(u8, u8); 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1353:20: 1353:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [(u8, u8); 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1353:21: 1353:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, u8),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1353:22: 1353:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(u8, u8); 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1354:20: 1354:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(u8, u8); 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1354:20: 1354:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [(u8, u8); 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1354:21: 1354:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, u8),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1354:22: 1354:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(u8, u8); 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1355:20: 1355:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(u8, u8); 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1355:20: 1355:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [(u8, u8); 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1355:21: 1355:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, u8),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1355:22: 1355:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(u8, u8); 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1356:20: 1356:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(u8, u8); 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1356:20: 1356:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [(u8, u8); 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1356:21: 1356:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, u8),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1356:22: 1356:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(u8, u8); 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1357:20: 1357:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(u8, u8); 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1357:20: 1357:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [(u8, u8); 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1357:21: 1357:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, u8),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1357:22: 1357:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, u8),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1357:36: 1357:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, u8),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1357:50: 1357:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, u8),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1357:64: 1357:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(u8, u8); 6_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1358:20: 1365:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(u8, u8); 6_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1358:20: 1365:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [(u8, u8); 6_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1358:21: 1365:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, u8),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1359:13: 1359:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, u8),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1360:13: 1360:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, u8),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1361:13: 1361:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, u8),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1362:13: 1362:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, u8),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1363:13: 1363:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, u8),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1364:13: 1364:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(u8, u8); 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1366:20: 1366:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(u8, u8); 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1366:20: 1366:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [(u8, u8); 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1366:21: 1366:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, u8),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1366:22: 1366:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(u8, u8); 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1367:19: 1367:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(u8, u8); 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1367:19: 1367:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [(u8, u8); 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1367:20: 1367:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, u8),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1367:21: 1367:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, u8),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1367:35: 1367:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, u8),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1367:49: 1367:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, u8),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1367:63: 1367:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(u8, u8); 3_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1368:21: 1368:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(u8, u8); 3_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1368:21: 1368:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [(u8, u8); 3_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1368:22: 1368:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, u8),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1368:23: 1368:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, u8),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1368:37: 1368:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, u8),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1368:51: 1368:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1369:14: 1369:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1369:25: 1369:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::iter::Map<core::slice::Iter<'{erased}, (u8, u8)>, Closure(DefId(0:156 ~ regex_lite[fbae]::hir::parse::posix_class::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'{erased} (u8, u8),)) -> hir::ClassRange, bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1371:8: 1374:7 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:1371:5: 1374:8 (#0),
                },
            ),
        ),
        ty: core::slice::Iter<'{erased}, (u8, u8)>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1371:8: 1371:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:1371:5: 1374:8 (#0),
                },
            ),
        ),
        ty: &'{erased} [(u8, u8)],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1371:8: 1371:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/hir/parse.rs:1371:5: 1374:8 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:156 ~ regex_lite[fbae]::hir::parse::posix_class::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'{erased} (u8, u8),)) -> hir::ClassRange, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1371:25: 1374:6 (#0),
            scope: scope[0],
        },
    },
]