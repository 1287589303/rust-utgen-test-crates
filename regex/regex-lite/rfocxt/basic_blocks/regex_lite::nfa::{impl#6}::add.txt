[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &((*_1).1: core::cell::RefCell<nfa::NFA>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:644:32: 644:49 (#0),
                    scope: scope[0],
                },
                kind: _11 = core::cell::RefCell::<nfa::NFA>::borrow(move _12) -> [return: bb1, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = &_11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:644:32: 644:56 (#0),
                    scope: scope[0],
                },
                kind: _9 = <core::cell::Ref<'_, nfa::NFA> as core::ops::Deref>::deref(move _10) -> [return: bb2, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_10),
            _8 = &((*_9).1: alloc::vec::Vec<nfa::State>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:644:32: 644:62 (#0),
                    scope: scope[0],
                },
                kind: _7 = alloc::vec::Vec::<nfa::State>::len(move _8) -> [return: bb3, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:644:18: 644:63 (#0),
                    scope: scope[0],
                },
                kind: _6 = <u32 as core::convert::TryFrom<usize>>::try_from(move _7) -> [return: bb4, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageLive(_13),
            _13 = {closure@regex-lite/src/nfa.rs:645:22: 645:25},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:644:18: 645:77 (#0),
                    scope: scope[0],
                },
                kind: _5 = core::result::Result::<u32, core::num::TryFromIntError>::map_err::<error::Error, {closure@regex-lite/src/nfa.rs:645:22: 645:25}>(move _6, move _13) -> [return: bb5, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:644:18: 645:78 (#697),
                    scope: scope[0],
                },
                kind: _4 = <core::result::Result<u32, error::Error> as core::ops::Try>::branch(move _5) -> [return: bb6, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            PlaceMention(_4),
            _14 = discriminant(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:644:18: 645:78 (#697),
                    scope: scope[0],
                },
                kind: switchInt(move _14) -> [0: bb9, 1: bb8, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:644:18: 645:78 (#697),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:645:77: 645:78 (#698),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_18),
            _18 = ((_4 as Continue).0: u32),
            _3 = _18,
            StorageDead(_18),
            FakeRead(ForLet(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:645:78: 645:79 (#0),
                    scope: scope[0],
                },
                kind: drop(_11) -> [return: bb12, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_15),
            _15 = move ((_4 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_17),
            _17 = move _15,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:644:18: 645:78 (#697),
                    scope: scope[3],
                },
                kind: _0 = <core::result::Result<u32, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _17) -> [return: bb11, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:645:78: 645:79 (#0),
                    scope: scope[0],
                },
                kind: drop(_11) -> [return: bb29, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_4),
            StorageLive(_19),
            StorageLive(_20),
            _20 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:646:47: 646:67 (#0),
                    scope: scope[1],
                },
                kind: _19 = nfa::State::memory_usage(move _20) -> [return: bb13, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            _24 = &((*_1).1: core::cell::RefCell<nfa::NFA>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:646:9: 646:30 (#0),
                    scope: scope[1],
                },
                kind: _23 = core::cell::RefCell::<nfa::NFA>::borrow_mut(move _24) -> [return: bb14, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _22 = &mut _23,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:646:9: 646:43 (#0),
                    scope: scope[1],
                },
                kind: _21 = <core::cell::RefMut<'_, nfa::NFA> as core::ops::DerefMut>::deref_mut(move _22) -> [return: bb15, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageDead(_22),
            _25 = AddWithOverflow(((*_21).8: usize), _19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:646:9: 646:67 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_25.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_21).8: usize), move _19) -> [success: bb16, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_21).8: usize) = move (_25.0: usize),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:646:67: 646:68 (#0),
                    scope: scope[1],
                },
                kind: drop(_23) -> [return: bb17, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_21),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            _31 = &((*_1).1: core::cell::RefCell<nfa::NFA>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:647:9: 647:30 (#0),
                    scope: scope[1],
                },
                kind: _30 = core::cell::RefCell::<nfa::NFA>::borrow_mut(move _31) -> [return: bb18, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _29 = &mut _30,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:647:9: 647:37 (#0),
                    scope: scope[1],
                },
                kind: _28 = <core::cell::RefMut<'_, nfa::NFA> as core::ops::DerefMut>::deref_mut(move _29) -> [return: bb19, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_29),
            _27 = &mut ((*_28).1: alloc::vec::Vec<nfa::State>),
            StorageLive(_32),
            _32 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:647:9: 647:49 (#0),
                    scope: scope[1],
                },
                kind: _26 = alloc::vec::Vec::<nfa::State>::push(move _27, move _32) -> [return: bb20, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:647:49: 647:50 (#0),
                    scope: scope[1],
                },
                kind: drop(_30) -> [return: bb21, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_28),
            StorageDead(_26),
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            _36 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:648:9: 648:32 (#0),
                    scope: scope[1],
                },
                kind: _35 = nfa::Compiler::check_size_limit(move _36) -> [return: bb22, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:648:9: 648:33 (#699),
                    scope: scope[1],
                },
                kind: _34 = <core::result::Result<(), error::Error> as core::ops::Try>::branch(move _35) -> [return: bb23, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            PlaceMention(_34),
            _37 = discriminant(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:648:9: 648:33 (#699),
                    scope: scope[1],
                },
                kind: switchInt(move _37) -> [0: bb26, 1: bb25, otherwise: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:648:9: 648:33 (#699),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:648:32: 648:33 (#700),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb27, imaginary: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_41),
            _41 = ((_34 as Continue).0: ()),
            _33 = _41,
            StorageDead(_41),
            StorageDead(_34),
            StorageDead(_33),
            StorageLive(_42),
            _42 = _3,
            _0 = core::result::Result::<u32, error::Error>::Ok(move _42),
            StorageDead(_42),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:650:5: 650:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb31, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_38),
            _38 = move ((_34 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_40),
            _40 = move _38,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:648:9: 648:33 (#699),
                    scope: scope[7],
                },
                kind: _0 = <core::result::Result<u32, error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _40) -> [return: bb28, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageDead(_38),
            StorageDead(_34),
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb30,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb30,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:650:5: 650:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb31, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:650:6: 650:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:647:48: 647:49 (#0),
                    scope: scope[1],
                },
                kind: drop(_32) -> [return: bb33, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:647:49: 647:50 (#0),
                    scope: scope[1],
                },
                kind: drop(_30) -> [return: bb36, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:646:67: 646:68 (#0),
                    scope: scope[1],
                },
                kind: drop(_23) -> [return: bb36, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:645:78: 645:79 (#0),
                    scope: scope[0],
                },
                kind: drop(_11) -> [return: bb36, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:650:5: 650:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb37, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:643:5: 650:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<u32, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:643:36: 643:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} nfa::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:643:12: 643:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/nfa.rs:643:26: 643:31 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/nfa.rs:643:19: 643:24 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:643:19: 643:24 (#0),
                    },
                ),
            ),
        ),
        ty: nfa::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:643:19: 643:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/nfa.rs:644:18: 645:78 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:644:13: 644:15 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:644:13: 644:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:644:18: 645:78 (#697),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<u32, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:644:18: 645:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<u32, core::num::TryFromIntError>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:644:18: 644:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:644:32: 644:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::vec::Vec<nfa::State, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:644:32: 644:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:644:32: 644:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::cell::Ref<'{erased}, nfa::NFA>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:644:32: 644:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: core::cell::Ref<'{erased}, nfa::NFA>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:644:32: 644:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::cell::RefCell<nfa::NFA>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:644:32: 644:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:308 ~ regex_lite[fbae]::nfa::{impl#6}::add::{closure#0}),
            [
                i32,
                Binder { value: extern "RustCall" fn((core::num::TryFromIntError,)) -> error::Error, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:645:22: 645:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:645:77: 645:78 (#698),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                regex-lite/src/nfa.rs:644:18: 645:78 (#697),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:645:77: 645:78 (#698),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:645:77: 645:78 (#698),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:645:77: 645:78 (#698),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:645:77: 645:78 (#698),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                regex-lite/src/nfa.rs:644:18: 645:78 (#697),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:644:18: 645:78 (#697),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:644:18: 645:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:646:47: 646:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:646:47: 646:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:646:9: 646:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::cell::RefMut<'{erased}, nfa::NFA>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:646:9: 646:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::cell::RefMut<'{erased}, nfa::NFA>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:646:9: 646:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::cell::RefCell<nfa::NFA>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:646:9: 646:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:646:9: 646:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:647:9: 647:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::vec::Vec<nfa::State, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:647:9: 647:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:647:9: 647:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::cell::RefMut<'{erased}, nfa::NFA>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:647:9: 647:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::cell::RefMut<'{erased}, nfa::NFA>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:647:9: 647:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::cell::RefCell<nfa::NFA>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:647:9: 647:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::State,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:647:43: 647:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:648:9: 648:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:648:9: 648:33 (#699),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:648:9: 648:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} nfa::Compiler,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:648:9: 648:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:648:32: 648:33 (#700),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _34,
                                ),
                                regex-lite/src/nfa.rs:648:9: 648:33 (#699),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:648:32: 648:33 (#700),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:648:32: 648:33 (#700),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:648:32: 648:33 (#700),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:648:32: 648:33 (#700),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _34,
                                ),
                                regex-lite/src/nfa.rs:648:9: 648:33 (#699),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:648:9: 648:33 (#699),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:648:9: 648:33 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:649:12: 649:14 (#0),
            scope: scope[0],
        },
    },
]