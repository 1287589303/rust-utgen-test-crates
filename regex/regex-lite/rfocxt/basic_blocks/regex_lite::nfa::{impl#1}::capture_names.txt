[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &((*_1).7: alloc::vec::Vec<core::option::Option<alloc::sync::Arc<str>>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:104:28: 104:57 (#0),
                    scope: scope[0],
                },
                kind: _4 = <alloc::vec::Vec<core::option::Option<alloc::sync::Arc<str>>> as core::ops::Deref>::deref(move _5) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &(*_4),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:104:28: 104:57 (#0),
                    scope: scope[0],
                },
                kind: _2 = core::slice::<impl [core::option::Option<alloc::sync::Arc<str>>]>::iter(move _3) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            _0 = nfa::CaptureNames::<'_> { it: move _2 },
            StorageDead(_2),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:105:6: 105:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:103:5: 105:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: nfa::CaptureNames<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:103:43: 103:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} nfa::NFA,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:103:33: 103:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::slice::Iter<'{erased}, core::option::Option<alloc::sync::Arc<str, alloc::alloc::Global>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:104:28: 104:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:104:9: 104:59 (#0),
                },
            ),
        ),
        ty: &'{erased} [core::option::Option<alloc::sync::Arc<str, alloc::alloc::Global>>],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:104:28: 104:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:104:9: 104:59 (#0),
                },
            ),
        ),
        ty: &'{erased} [core::option::Option<alloc::sync::Arc<str, alloc::alloc::Global>>],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:104:28: 104:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:104:9: 104:59 (#0),
                },
            ),
        ),
        ty: &'{erased} alloc::vec::Vec<core::option::Option<alloc::sync::Arc<str, alloc::alloc::Global>>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:104:28: 104:50 (#0),
            scope: scope[0],
        },
    },
]