[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1076:21: 1076:44 (#0),
                    scope: scope[0],
                },
                kind: _5 = hir::parse::Parser::<'_>::parse_class_item(move _6) -> [return: bb1, unwind: bb94],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1076:21: 1076:45 (#409),
                    scope: scope[0],
                },
                kind: _4 = <core::result::Result<hir::Hir, error::Error> as core::ops::Try>::branch(move _5) -> [return: bb2, unwind: bb93],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            PlaceMention(_4),
            _7 = discriminant(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1076:21: 1076:45 (#409),
                    scope: scope[0],
                },
                kind: switchInt(move _7) -> [0: bb5, 1: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1076:21: 1076:45 (#409),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1076:44: 1076:45 (#410),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            _11 = move ((_4 as Continue).0: hir::Hir),
            _3 = move _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1076:44: 1076:45 (#0),
                    scope: scope[0],
                },
                kind: drop(_11) -> [return: bb8, unwind: bb92],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            _8 = move ((_4 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_10),
            _10 = move _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1076:21: 1076:45 (#409),
                    scope: scope[3],
                },
                kind: _0 = <core::result::Result<(), error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _10) -> [return: bb7, unwind: bb92],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1076:45: 1076:46 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb79, unwind: bb94],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            FakeRead(ForLet(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1076:45: 1076:46 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb9, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1077:9: 1077:26 (#0),
                    scope: scope[1],
                },
                kind: _12 = hir::parse::Parser::<'_>::bump_space(move _13) -> [return: bb10, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1078:12: 1078:26 (#0),
                    scope: scope[1],
                },
                kind: _15 = hir::parse::Parser::<'_>::is_done(move _16) -> [return: bb11, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1078:12: 1078:26 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _15) -> [0: bb14, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageLive(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1079:24: 1079:65 (#0),
                    scope: scope[1],
                },
                kind: _18 = error::Error::new(const hir::parse::ERR_CLASS_UNCLOSED_AFTER_ITEM) -> [return: bb13, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::result::Result::<(), error::Error>::Err(move _18),
            StorageDead(_18),
            StorageDead(_15),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb78,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            _14 = const (),
            StorageDead(_15),
            StorageDead(_14),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            _22 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1088:12: 1088:23 (#0),
                    scope: scope[1],
                },
                kind: _21 = hir::parse::Parser::<'_>::char(move _22) -> [return: bb15, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            _20 = Ne(move _21, const '-'),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1088:12: 1088:30 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _20) -> [0: bb17, otherwise: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1091:9: 1094:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            _26 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1089:16: 1089:33 (#0),
                    scope: scope[1],
                },
                kind: _25 = hir::parse::Parser::<'_>::peek_space(move _26) -> [return: bb18, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _24 = &_25,
            StorageDead(_26),
            StorageLive(_27),
            StorageLive(_28),
            _28 = core::option::Option::<char>::Some(const ']'),
            _27 = &_28,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1089:16: 1089:46 (#0),
                    scope: scope[1],
                },
                kind: _23 = <core::option::Option<char> as core::cmp::PartialEq>::eq(move _24, move _27) -> [return: bb19, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1089:16: 1089:46 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _23) -> [0: bb21, otherwise: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_27),
            StorageDead(_25),
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1091:9: 1094:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_27),
            StorageDead(_25),
            StorageDead(_24),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            _32 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1090:16: 1090:33 (#0),
                    scope: scope[1],
                },
                kind: _31 = hir::parse::Parser::<'_>::peek_space(move _32) -> [return: bb22, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _30 = &_31,
            StorageDead(_32),
            StorageLive(_33),
            StorageLive(_34),
            _34 = core::option::Option::<char>::Some(const '-'),
            _33 = &_34,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1090:16: 1090:46 (#0),
                    scope: scope[1],
                },
                kind: _29 = <core::option::Option<char> as core::cmp::PartialEq>::eq(move _30, move _33) -> [return: bb23, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1090:16: 1090:46 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _29) -> [0: bb38, otherwise: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_33),
            StorageDead(_31),
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1091:9: 1094:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_36),
            StorageLive(_37),
            _37 = &mut (*_2),
            StorageLive(_38),
            StorageLive(_39),
            StorageLive(_40),
            StorageLive(_41),
            StorageLive(_42),
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            _45 = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1092:38: 1092:67 (#0),
                    scope: scope[1],
                },
                kind: _44 = hir::parse::into_class_item_ranges(move _45) -> [return: bb26, unwind: bb90],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1092:38: 1092:68 (#413),
                    scope: scope[1],
                },
                kind: _43 = <core::result::Result<alloc::vec::Vec<hir::ClassRange>, error::Error> as core::ops::Try>::branch(move _44) -> [return: bb27, unwind: bb89],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            PlaceMention(_43),
            _46 = discriminant(_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1092:38: 1092:68 (#413),
                    scope: scope[1],
                },
                kind: switchInt(move _46) -> [0: bb30, 1: bb29, otherwise: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1092:38: 1092:68 (#413),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1092:67: 1092:68 (#414),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb31, imaginary: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_50),
            _50 = move ((_43 as Continue).0: alloc::vec::Vec<hir::ClassRange>),
            _42 = move _50,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1092:67: 1092:68 (#0),
                    scope: scope[1],
                },
                kind: drop(_50) -> [return: bb33, unwind: bb88],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_47),
            _47 = move ((_43 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_49),
            _49 = move _47,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1092:38: 1092:68 (#413),
                    scope: scope[7],
                },
                kind: _0 = <core::result::Result<(), error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _49) -> [return: bb32, unwind: bb88],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_49),
            StorageDead(_47),
            StorageDead(_40),
            StorageDead(_38),
            StorageDead(_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1092:69: 1092:70 (#0),
                    scope: scope[1],
                },
                kind: drop(_43) -> [return: bb76, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            _41 = &_42,
            _40 = &(*_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1092:37: 1092:68 (#0),
                    scope: scope[1],
                },
                kind: _39 = <alloc::vec::Vec<hir::ClassRange> as core::ops::Deref>::deref(move _40) -> [return: bb34, unwind: bb87],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _38 = &(*_39),
            StorageDead(_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1092:13: 1092:69 (#0),
                    scope: scope[1],
                },
                kind: _36 = alloc::vec::Vec::<hir::ClassRange>::extend_from_slice(move _37, move _38) -> [return: bb35, unwind: bb87],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            StorageDead(_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1092:69: 1092:70 (#0),
                    scope: scope[1],
                },
                kind: drop(_42) -> [return: bb36, unwind: bb88],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1092:69: 1092:70 (#0),
                    scope: scope[1],
                },
                kind: drop(_43) -> [return: bb37, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            StorageDead(_42),
            StorageDead(_41),
            StorageDead(_39),
            StorageDead(_36),
            StorageLive(_51),
            _51 = (),
            _0 = core::result::Result::<(), error::Error>::Ok(move _51),
            StorageDead(_51),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1093:13: 1093:26 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb77,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_33),
            StorageDead(_31),
            StorageDead(_30),
            _19 = const (),
            StorageDead(_29),
            StorageDead(_23),
            StorageDead(_20),
            StorageDead(_19),
            StorageLive(_52),
            StorageLive(_53),
            StorageLive(_54),
            _54 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1097:13: 1097:39 (#0),
                    scope: scope[1],
                },
                kind: _53 = hir::parse::Parser::<'_>::bump_and_bump_space(move _54) -> [return: bb39, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1097:13: 1097:39 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _53) -> [0: bb41, otherwise: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            _52 = const (),
            StorageDead(_53),
            StorageDead(_52),
            StorageLive(_57),
            StorageLive(_58),
            StorageLive(_59),
            StorageLive(_60),
            _60 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1100:21: 1100:44 (#0),
                    scope: scope[1],
                },
                kind: _59 = hir::parse::Parser::<'_>::parse_class_item(move _60) -> [return: bb43, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            StorageLive(_56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1098:24: 1098:65 (#0),
                    scope: scope[1],
                },
                kind: _56 = error::Error::new(const hir::parse::ERR_CLASS_UNCLOSED_AFTER_DASH) -> [return: bb42, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::result::Result::<(), error::Error>::Err(move _56),
            StorageDead(_56),
            StorageDead(_53),
            StorageDead(_52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb78,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1100:21: 1100:45 (#416),
                    scope: scope[1],
                },
                kind: _58 = <core::result::Result<hir::Hir, error::Error> as core::ops::Try>::branch(move _59) -> [return: bb44, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
            PlaceMention(_58),
            _61 = discriminant(_58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1100:21: 1100:45 (#416),
                    scope: scope[1],
                },
                kind: switchInt(move _61) -> [0: bb47, 1: bb46, otherwise: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1100:21: 1100:45 (#416),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1100:44: 1100:45 (#417),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb48, imaginary: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_65),
            _65 = move ((_58 as Continue).0: hir::Hir),
            _57 = move _65,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1100:44: 1100:45 (#0),
                    scope: scope[1],
                },
                kind: drop(_65) -> [return: bb50, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_62),
            _62 = move ((_58 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_64),
            _64 = move _62,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1100:21: 1100:45 (#416),
                    scope: scope[12],
                },
                kind: _0 = <core::result::Result<(), error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _64) -> [return: bb49, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
            StorageDead(_62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1100:45: 1100:46 (#0),
                    scope: scope[1],
                },
                kind: drop(_58) -> [return: bb74, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_65),
            FakeRead(ForLet(None), _57),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1100:45: 1100:46 (#0),
                    scope: scope[1],
                },
                kind: drop(_58) -> [return: bb51, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
            StorageLive(_66),
            StorageLive(_67),
            StorageLive(_68),
            StorageLive(_69),
            StorageLive(_70),
            _70 = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1102:20: 1102:48 (#0),
                    scope: scope[10],
                },
                kind: _69 = hir::parse::into_class_item_range(move _70) -> [return: bb52, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_70),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1102:20: 1102:49 (#418),
                    scope: scope[10],
                },
                kind: _68 = <core::result::Result<char, error::Error> as core::ops::Try>::branch(move _69) -> [return: bb53, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_69),
            PlaceMention(_68),
            _71 = discriminant(_68),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1102:20: 1102:49 (#418),
                    scope: scope[10],
                },
                kind: switchInt(move _71) -> [0: bb56, 1: bb55, otherwise: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _68),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1102:20: 1102:49 (#418),
                    scope: scope[10],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1102:48: 1102:49 (#419),
                    scope: scope[10],
                },
                kind: falseEdge -> [real: bb57, imaginary: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_75),
            _75 = ((_68 as Continue).0: char),
            _67 = _75,
            StorageDead(_75),
            StorageLive(_76),
            StorageLive(_77),
            StorageLive(_78),
            StorageLive(_79),
            _79 = move _57,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1103:18: 1103:46 (#0),
                    scope: scope[10],
                },
                kind: _78 = hir::parse::into_class_item_range(move _79) -> [return: bb59, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_72),
            _72 = move ((_68 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_74),
            _74 = move _72,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1102:20: 1102:49 (#418),
                    scope: scope[17],
                },
                kind: _0 = <core::result::Result<(), error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _74) -> [return: bb58, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_74),
            StorageDead(_72),
            StorageDead(_67),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[10],
                },
                kind: goto -> bb72,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_79),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1103:18: 1103:47 (#420),
                    scope: scope[10],
                },
                kind: _77 = <core::result::Result<char, error::Error> as core::ops::Try>::branch(move _78) -> [return: bb60, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_78),
            PlaceMention(_77),
            _80 = discriminant(_77),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1103:18: 1103:47 (#420),
                    scope: scope[10],
                },
                kind: switchInt(move _80) -> [0: bb63, 1: bb62, otherwise: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _77),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1103:18: 1103:47 (#420),
                    scope: scope[10],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1103:46: 1103:47 (#421),
                    scope: scope[10],
                },
                kind: falseEdge -> [real: bb64, imaginary: bb63],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_84),
            _84 = ((_77 as Continue).0: char),
            _76 = _84,
            StorageDead(_84),
            _66 = hir::ClassRange { start: move _67, end: move _76 },
            StorageDead(_76),
            StorageDead(_67),
            FakeRead(ForLet(None), _66),
            StorageDead(_77),
            StorageDead(_68),
            StorageLive(_85),
            StorageLive(_86),
            StorageLive(_87),
            _87 = (_66.0: char),
            StorageLive(_88),
            _88 = (_66.1: char),
            _86 = Gt(move _87, move _88),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1105:12: 1105:35 (#0),
                    scope: scope[15],
                },
                kind: switchInt(move _86) -> [0: bb67, otherwise: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_81),
            _81 = move ((_77 as Break).0: core::result::Result<core::convert::Infallible, error::Error>),
            StorageLive(_83),
            _83 = move _81,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1103:18: 1103:47 (#420),
                    scope: scope[21],
                },
                kind: _0 = <core::result::Result<(), error::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, error::Error>>>::from_residual(move _83) -> [return: bb65, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_83),
            StorageDead(_81),
            StorageDead(_76),
            StorageDead(_67),
            StorageDead(_77),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[10],
                },
                kind: goto -> bb72,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_88),
            StorageDead(_87),
            StorageLive(_90),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1106:24: 1106:59 (#0),
                    scope: scope[15],
                },
                kind: _90 = error::Error::new(const hir::parse::ERR_CLASS_INVALID_RANGE) -> [return: bb68, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_88),
            StorageDead(_87),
            _85 = const (),
            StorageDead(_86),
            StorageDead(_85),
            StorageLive(_91),
            StorageLive(_92),
            _92 = &mut (*_2),
            StorageLive(_93),
            _93 = _66,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1108:9: 1108:26 (#0),
                    scope: scope[15],
                },
                kind: _91 = alloc::vec::Vec::<hir::ClassRange>::push(move _92, move _93) -> [return: bb69, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::result::Result::<(), error::Error>::Err(move _90),
            StorageDead(_90),
            StorageDead(_86),
            StorageDead(_85),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[15],
                },
                kind: goto -> bb73,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_93),
            StorageDead(_92),
            StorageDead(_91),
            StorageLive(_94),
            _94 = (),
            _0 = core::result::Result::<(), error::Error>::Ok(move _94),
            StorageDead(_94),
            StorageDead(_66),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1110:5: 1110:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_57) -> [return: bb70, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_57),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1110:5: 1110:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb71, unwind: bb94],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1110:6: 1110:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb81,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_68),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[10],
                },
                kind: goto -> bb73,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_66),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1110:5: 1110:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_57) -> [return: bb75, unwind: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb75,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_57),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb78,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            StorageDead(_42),
            StorageDead(_41),
            StorageDead(_39),
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb77,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_23),
            StorageDead(_20),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb78,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1110:5: 1110:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb80, unwind: bb94],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb80,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1110:6: 1110:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb81,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1110:6: 1110:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1103:45: 1103:46 (#0),
                    scope: scope[10],
                },
                kind: drop(_79) -> [return: bb84, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1102:47: 1102:48 (#0),
                    scope: scope[10],
                },
                kind: drop(_70) -> [return: bb84, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1110:5: 1110:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_57) -> [return: bb91, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1100:45: 1100:46 (#0),
                    scope: scope[1],
                },
                kind: drop(_58) -> [return: bb91, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1100:44: 1100:45 (#416),
                    scope: scope[1],
                },
                kind: drop(_59) -> [return: bb91, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1092:69: 1092:70 (#0),
                    scope: scope[1],
                },
                kind: drop(_42) -> [return: bb88, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1092:69: 1092:70 (#0),
                    scope: scope[1],
                },
                kind: drop(_43) -> [return: bb91, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1092:67: 1092:68 (#413),
                    scope: scope[1],
                },
                kind: drop(_44) -> [return: bb91, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1092:66: 1092:67 (#0),
                    scope: scope[1],
                },
                kind: drop(_45) -> [return: bb91, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1110:5: 1110:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb94, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1076:45: 1076:46 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb94, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1076:44: 1076:45 (#409),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb94, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/hir/parse.rs:1072:5: 1110:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1075:10: 1075:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1073:9: 1073:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/hir/parse.rs:1074:16: 1074:41 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/hir/parse.rs:1074:9: 1074:14 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:1074:9: 1074:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut alloc::vec::Vec<hir::ClassRange, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1074:9: 1074:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/hir/parse.rs:1076:21: 1076:45 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:1076:13: 1076:18 (#0),
                    },
                ),
            ),
        ),
        ty: hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1076:13: 1076:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, hir::Hir>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1076:21: 1076:45 (#409),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<hir::Hir, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1076:21: 1076:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1076:21: 1076:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1076:44: 1076:45 (#410),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                regex-lite/src/hir/parse.rs:1076:21: 1076:45 (#409),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:1076:44: 1076:45 (#410),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1076:44: 1076:45 (#410),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1076:44: 1076:45 (#410),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1076:44: 1076:45 (#410),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                regex-lite/src/hir/parse.rs:1076:21: 1076:45 (#409),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:1076:21: 1076:45 (#409),
                    },
                ),
            ),
        ),
        ty: hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1076:21: 1076:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1077:9: 1077:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1077:9: 1077:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1078:9: 1080:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1078:12: 1078:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1078:12: 1078:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1078:27: 1080:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1079:24: 1079:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1088:9: 1094:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1088:12: 1088:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1088:12: 1088:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1088:12: 1088:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1089:16: 1089:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1089:16: 1089:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1089:16: 1089:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1089:16: 1089:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1089:37: 1089:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1089:37: 1089:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1090:16: 1090:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1090:16: 1090:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1090:16: 1090:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1090:16: 1090:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1090:37: 1090:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1090:37: 1090:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1091:9: 1094:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1092:13: 1092:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::vec::Vec<hir::ClassRange, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1092:13: 1092:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [hir::ClassRange],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1092:37: 1092:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [hir::ClassRange],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1092:37: 1092:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::vec::Vec<hir::ClassRange, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1092:37: 1092:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::vec::Vec<hir::ClassRange, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1092:37: 1092:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: alloc::vec::Vec<hir::ClassRange, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1092:38: 1092:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, alloc::vec::Vec<hir::ClassRange, alloc::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1092:38: 1092:68 (#413),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<alloc::vec::Vec<hir::ClassRange, alloc::alloc::Global>, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1092:38: 1092:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1092:61: 1092:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1092:67: 1092:68 (#414),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _43,
                                ),
                                regex-lite/src/hir/parse.rs:1092:38: 1092:68 (#413),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:1092:67: 1092:68 (#414),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1092:67: 1092:68 (#414),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1092:67: 1092:68 (#414),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1092:67: 1092:68 (#414),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _43,
                                ),
                                regex-lite/src/hir/parse.rs:1092:38: 1092:68 (#413),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:1092:38: 1092:68 (#413),
                    },
                ),
            ),
        ),
        ty: alloc::vec::Vec<hir::ClassRange, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1092:38: 1092:68 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1093:23: 1093:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1097:9: 1099:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1097:13: 1097:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1097:13: 1097:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1097:40: 1099:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1098:24: 1098:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/hir/parse.rs:1100:21: 1100:45 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:1100:13: 1100:18 (#0),
                    },
                ),
            ),
        ),
        ty: hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1100:13: 1100:18 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, hir::Hir>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1100:21: 1100:45 (#416),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<hir::Hir, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1100:21: 1100:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} hir::parse::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1100:21: 1100:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1100:44: 1100:45 (#417),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _58,
                                ),
                                regex-lite/src/hir/parse.rs:1100:21: 1100:45 (#416),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:1100:44: 1100:45 (#417),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1100:44: 1100:45 (#417),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1100:44: 1100:45 (#417),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1100:44: 1100:45 (#417),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _58,
                                ),
                                regex-lite/src/hir/parse.rs:1100:21: 1100:45 (#416),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:1100:21: 1100:45 (#416),
                    },
                ),
            ),
        ),
        ty: hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1100:21: 1100:45 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/hir/parse.rs:1101:21: 1104:10 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:1101:13: 1101:18 (#0),
                    },
                ),
            ),
        ),
        ty: hir::ClassRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1101:13: 1101:18 (#0),
            scope: scope[10],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1102:20: 1102:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1102:20: 1102:49 (#418),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<char, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1102:20: 1102:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1102:42: 1102:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1102:48: 1102:49 (#419),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _68,
                                ),
                                regex-lite/src/hir/parse.rs:1102:20: 1102:49 (#418),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:1102:48: 1102:49 (#419),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1102:48: 1102:49 (#419),
            scope: scope[10],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1102:48: 1102:49 (#419),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1102:48: 1102:49 (#419),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _68,
                                ),
                                regex-lite/src/hir/parse.rs:1102:20: 1102:49 (#418),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:1102:20: 1102:49 (#418),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1102:20: 1102:49 (#0),
            scope: scope[10],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1103:18: 1103:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, error::Error>, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1103:18: 1103:47 (#420),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<char, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1103:18: 1103:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::Hir,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1103:40: 1103:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1103:46: 1103:47 (#421),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _77,
                                ),
                                regex-lite/src/hir/parse.rs:1103:18: 1103:47 (#420),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:1103:46: 1103:47 (#421),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1103:46: 1103:47 (#421),
            scope: scope[10],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1103:46: 1103:47 (#421),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1103:46: 1103:47 (#421),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _77,
                                ),
                                regex-lite/src/hir/parse.rs:1103:18: 1103:47 (#420),
                            ),
                        ),
                        pat_span: regex-lite/src/hir/parse.rs:1103:18: 1103:47 (#420),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1103:18: 1103:47 (#0),
            scope: scope[10],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1105:9: 1107:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1105:12: 1105:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1105:12: 1105:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1105:26: 1105:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1105:36: 1107:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1106:24: 1106:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1108:9: 1108:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::vec::Vec<hir::ClassRange, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1108:9: 1108:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: hir::ClassRange,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1108:20: 1108:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/hir/parse.rs:1109:12: 1109:14 (#0),
            scope: scope[0],
        },
    },
]