[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:198:22: 198:35 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::slice::<impl [u32]>::iter(move _4) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_5),
            _5 = {closure@regex-lite/src/nfa.rs:199:29: 199:36} { reverse: _2, it: move _3 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:199:9: 201:11 (#0),
                    scope: scope[1],
                },
                kind: _0 = core::iter::from_fn::<u32, {closure@regex-lite/src/nfa.rs:199:29: 199:36}>(move _5) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:202:6: 202:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/nfa.rs:194:5: 202:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Opaque,
            AliasTy {
                args: [
                    '{erased},
                ],
                def_id: DefId(0:1356 ~ regex_lite[fbae]::nfa::{impl#4}::iter_splits::{opaque#0}),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:197:10: 197:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/nfa.rs:195:17: 195:30 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/nfa.rs:195:9: 195:15 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:195:9: 195:15 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u32],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:195:9: 195:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/nfa.rs:196:18: 196:22 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/nfa.rs:196:9: 196:16 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:196:9: 196:16 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:196:9: 196:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/nfa.rs:198:22: 198:35 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/nfa.rs:198:13: 198:19 (#0),
                    },
                ),
            ),
        ),
        ty: core::slice::Iter<'{erased}, u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:198:13: 198:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u32],
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:198:22: 198:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/nfa.rs:199:9: 201:11 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:279 ~ regex_lite[fbae]::nfa::{impl#4}::iter_splits::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn(()) -> core::option::Option<u32>, bound_vars: [] },
                (bool, core::slice::Iter<'{erased}, u32>),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/nfa.rs:199:29: 201:10 (#0),
            scope: scope[0],
        },
    },
]