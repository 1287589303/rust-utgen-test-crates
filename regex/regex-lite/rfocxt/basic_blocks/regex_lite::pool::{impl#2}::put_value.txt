[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &((*_1).0: std::sync::Mutex<alloc::vec::Vec<alloc::boxed::Box<T>>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pool.rs:69:25: 69:42 (#0),
                    scope: scope[0],
                },
                kind: _4 = std::sync::Mutex::<alloc::vec::Vec<alloc::boxed::Box<T>>>::lock(move _5) -> [return: bb1, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pool.rs:69:25: 69:51 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::result::Result::<std::sync::MutexGuard<'_, alloc::vec::Vec<alloc::boxed::Box<T>>>, std::sync::PoisonError<std::sync::MutexGuard<'_, alloc::vec::Vec<alloc::boxed::Box<T>>>>>::unwrap(move _4) -> [return: bb2, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &mut _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pool.rs:70:9: 70:26 (#0),
                    scope: scope[1],
                },
                kind: _8 = <std::sync::MutexGuard<'_, alloc::vec::Vec<alloc::boxed::Box<T>>> as core::ops::DerefMut>::deref_mut(move _9) -> [return: bb3, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = &mut (*_8),
            StorageDead(_9),
            StorageLive(_10),
            _10 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pool.rs:70:9: 70:26 (#0),
                    scope: scope[1],
                },
                kind: _6 = alloc::vec::Vec::<alloc::boxed::Box<T>>::push(move _7, move _10) -> [return: bb4, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_7),
            StorageDead(_8),
            StorageDead(_6),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pool.rs:71:5: 71:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb5, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pool.rs:71:5: 71:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb6, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pool.rs:71:6: 71:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pool.rs:70:25: 70:26 (#0),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pool.rs:71:5: 71:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pool.rs:69:50: 69:51 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pool.rs:71:5: 71:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb11, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pool.rs:68:5: 71:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pool.rs:68:39: 68:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} pool::Pool<T/#0, F/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pool.rs:68:18: 68:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            regex-lite/src/pool.rs:68:32: 68:38 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/pool.rs:68:25: 68:30 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/pool.rs:68:25: 68:30 (#0),
                    },
                ),
            ),
        ),
        ty: alloc::boxed::Box<T/#0, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pool.rs:68:25: 68:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                regex-lite/src/pool.rs:69:25: 69:51 (#0),
                            ),
                        ),
                        pat_span: regex-lite/src/pool.rs:69:13: 69:22 (#0),
                    },
                ),
            ),
        ),
        ty: std::sync::MutexGuard<'{erased}, alloc::vec::Vec<alloc::boxed::Box<T/#0, alloc::alloc::Global>, alloc::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pool.rs:69:13: 69:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<std::sync::MutexGuard<'{erased}, alloc::vec::Vec<alloc::boxed::Box<T/#0, alloc::alloc::Global>, alloc::alloc::Global>>, std::sync::PoisonError<std::sync::MutexGuard<'{erased}, alloc::vec::Vec<alloc::boxed::Box<T/#0, alloc::alloc::Global>, alloc::alloc::Global>>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pool.rs:69:25: 69:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::sync::Mutex<alloc::vec::Vec<alloc::boxed::Box<T/#0, alloc::alloc::Global>, alloc::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pool.rs:69:25: 69:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pool.rs:70:9: 70:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::vec::Vec<alloc::boxed::Box<T/#0, alloc::alloc::Global>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pool.rs:70:9: 70:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::vec::Vec<alloc::boxed::Box<T/#0, alloc::alloc::Global>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pool.rs:70:9: 70:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::sync::MutexGuard<'{erased}, alloc::vec::Vec<alloc::boxed::Box<T/#0, alloc::alloc::Global>, alloc::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pool.rs:70:9: 70:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: alloc::boxed::Box<T/#0, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pool.rs:70:20: 70:25 (#0),
            scope: scope[0],
        },
    },
]