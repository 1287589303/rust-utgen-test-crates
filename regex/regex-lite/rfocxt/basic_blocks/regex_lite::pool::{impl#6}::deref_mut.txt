[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &mut ((*_1).1: core::option::Option<alloc::boxed::Box<T>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pool.rs:106:9: 106:34 (#0),
                    scope: scope[0],
                },
                kind: _4 = core::option::Option::<alloc::boxed::Box<T>>::as_deref_mut(move _5) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pool.rs:106:9: 106:43 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::option::Option::<&mut T>::unwrap(move _4) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = &mut (*_3),
            StorageDead(_4),
            _0 = &mut (*_2),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pool.rs:107:6: 107:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: regex-lite/src/pool.rs:105:5: 107:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pool.rs:105:32: 105:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut pool::PoolGuard<'{erased}, T/#1, F/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pool.rs:105:18: 105:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pool.rs:106:9: 106:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/pool.rs:106:9: 106:43 (#0),
                },
            ),
        ),
        ty: &'{erased} mut T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pool.rs:106:9: 106:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/pool.rs:106:9: 106:43 (#0),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} mut T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pool.rs:106:9: 106:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: regex-lite/src/pool.rs:106:9: 106:43 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::option::Option<alloc::boxed::Box<T/#1, alloc::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: regex-lite/src/pool.rs:106:9: 106:19 (#0),
            scope: scope[0],
        },
    },
]