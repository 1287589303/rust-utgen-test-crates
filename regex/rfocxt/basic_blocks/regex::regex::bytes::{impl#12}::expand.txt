[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = &((*_1).1: regex_automata::util::captures::Captures),
            StorageLive(_6),
            _6 = &(*((*_1).0: &[u8])),
            StorageLive(_7),
            _7 = &(*_2),
            StorageLive(_8),
            _8 = &mut (*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/bytes.rs:1854:9: 1854:74 (#0),
                    scope: scope[0],
                },
                kind: _4 = regex_automata::util::captures::Captures::interpolate_bytes_into(move _5, move _6, move _7, move _8) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/bytes.rs:1855:6: 1855:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/bytes.rs:1853:5: 1855:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1853:64: 1853:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} regex::bytes::Captures<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1853:19: 1853:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/regex/bytes.rs:1853:39: 1853:44 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/regex/bytes.rs:1853:26: 1853:37 (#0),
                            ),
                        ),
                        pat_span: src/regex/bytes.rs:1853:26: 1853:37 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1853:26: 1853:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/regex/bytes.rs:1853:51: 1853:63 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/regex/bytes.rs:1853:46: 1853:49 (#0),
                            ),
                        ),
                        pat_span: src/regex/bytes.rs:1853:46: 1853:49 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut alloc::vec::Vec<u8, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1853:46: 1853:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1854:9: 1854:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} regex_automata::util::captures::Captures,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1854:9: 1854:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1854:42: 1854:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1854:57: 1854:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::vec::Vec<u8, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1854:70: 1854:73 (#0),
            scope: scope[0],
        },
    },
]