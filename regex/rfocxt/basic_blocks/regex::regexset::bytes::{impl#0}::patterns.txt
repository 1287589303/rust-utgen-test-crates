[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &((*_1).1: alloc::sync::Arc<[alloc::string::String]>),
            _3 = &(*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/bytes.rs:449:9: 449:23 (#0),
                    scope: scope[0],
                },
                kind: _2 = <alloc::sync::Arc<[alloc::string::String]> as core::ops::Deref>::deref(move _3) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = &(*_2),
            StorageDead(_3),
            StorageDead(_4),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/bytes.rs:450:6: 450:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/bytes.rs:448:5: 450:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [alloc::string::String],
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/bytes.rs:448:31: 448:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} regexset::bytes::RegexSet,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/bytes.rs:448:21: 448:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regexset/bytes.rs:449:9: 449:23 (#0),
                },
            ),
        ),
        ty: &'{erased} [alloc::string::String],
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/bytes.rs:449:9: 449:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regexset/bytes.rs:449:9: 449:23 (#0),
                },
            ),
        ),
        ty: &'{erased} alloc::sync::Arc<[alloc::string::String], alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/bytes.rs:449:9: 449:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regexset/bytes.rs:449:9: 449:23 (#0),
                },
            ),
        ),
        ty: &'{erased} alloc::sync::Arc<[alloc::string::String], alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/bytes.rs:449:9: 449:23 (#0),
            scope: scope[0],
        },
    },
]