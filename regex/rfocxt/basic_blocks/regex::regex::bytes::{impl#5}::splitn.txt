[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = &(*_2),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &((*_1).0: regex_automata::meta::Regex),
            StorageLive(_7),
            _7 = _2,
            StorageLive(_8),
            _8 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/bytes.rs:642:32: 642:65 (#0),
                    scope: scope[0],
                },
                kind: _5 = regex_automata::meta::Regex::splitn::<'_, &[u8]>(move _6, move _7, move _8) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_6),
            _0 = regex::bytes::SplitN::<'_, '_> { haystack: move _4, it: move _5 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/bytes.rs:642:66: 642:67 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/bytes.rs:643:6: 643:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/bytes.rs:637:5: 643:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regex::bytes::SplitN<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:641:10: 641:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} regex::bytes::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:638:9: 638:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/regex/bytes.rs:639:19: 639:27 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/regex/bytes.rs:639:9: 639:17 (#0),
                            ),
                        ),
                        pat_span: src/regex/bytes.rs:639:9: 639:17 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:639:9: 639:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/regex/bytes.rs:640:16: 640:21 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/regex/bytes.rs:640:9: 640:14 (#0),
                            ),
                        ),
                        pat_span: src/regex/bytes.rs:640:9: 640:14 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:640:9: 640:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:642:18: 642:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: regex_automata::meta::SplitN<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:642:32: 642:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/bytes.rs:642:9: 642:67 (#0),
                },
            ),
        ),
        ty: &'{erased} regex_automata::meta::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:642:32: 642:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/bytes.rs:642:9: 642:67 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:642:49: 642:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/bytes.rs:642:9: 642:67 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:642:59: 642:64 (#0),
            scope: scope[0],
        },
    },
]