[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &((*_1).1: regex_automata::meta::Config),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:159:22: 159:40 (#0),
                    scope: scope[0],
                },
                kind: _5 = <regex_automata::meta::Config as core::clone::Clone>::clone(move _6) -> [return: bb1, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageLive(_7),
            _7 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:159:22: 159:62 (#0),
                    scope: scope[0],
                },
                kind: _4 = regex_automata::meta::Config::line_terminator(move _5, move _7) -> [return: bb2, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:159:9: 159:19 (#0),
                    scope: scope[0],
                },
                kind: drop(((*_1).1: regex_automata::meta::Config)) -> [return: bb3, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).1: regex_automata::meta::Config) = move _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:159:61: 159:62 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb5, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).1: regex_automata::meta::Config) = move _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:159:61: 159:62 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageLive(_8),
            StorageLive(_9),
            _9 = ((*_1).2: regex_automata::util::syntax::Config),
            StorageLive(_10),
            _10 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:160:24: 160:58 (#0),
                    scope: scope[0],
                },
                kind: _8 = regex_automata::util::syntax::Config::line_terminator(move _9, move _10) -> [return: bb6, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            ((*_1).2: regex_automata::util::syntax::Config) = move _8,
            StorageDead(_8),
            _3 = &mut (*_1),
            _0 = &mut (*_3),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:162:6: 162:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:159:61: 159:62 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:158:5: 162:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut builders::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:158:48: 158:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut builders::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:158:24: 158:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/builders.rs:158:41: 158:43 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/builders.rs:158:35: 158:39 (#0),
                            ),
                        ),
                        pat_span: src/builders.rs:158:35: 158:39 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:158:35: 158:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut builders::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:161:9: 161:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regex_automata::meta::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:159:22: 159:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regex_automata::meta::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:159:22: 159:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} regex_automata::meta::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:159:22: 159:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:159:57: 159:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regex_automata::util::syntax::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:160:24: 160:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regex_automata::util::syntax::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:160:24: 160:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:160:53: 160:57 (#0),
            scope: scope[0],
        },
    },
]