[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &((*_1).1: regex_automata::util::captures::Captures),
            StorageLive(_5),
            _5 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:1709:9: 1710:37 (#0),
                    scope: scope[0],
                },
                kind: _3 = regex_automata::util::captures::Captures::get_group_by_name(move _4, move _5) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*((*_1).0: &str)),
            _6 = {closure@src/regex/string.rs:1711:18: 1711:22} { self: move _7 },
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:1709:9: 1711:67 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::option::Option::<regex_automata::Span>::map::<regex::string::Match<'_>, {closure@src/regex/string.rs:1711:18: 1711:22}>(move _3, move _6) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:1712:6: 1712:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:1708:5: 1712:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<regex::string::Match<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1708:39: 1708:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} regex::string::Captures<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1708:17: 1708:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/regex/string.rs:1708:30: 1708:34 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/regex/string.rs:1708:24: 1708:28 (#0),
                            ),
                        ),
                        pat_span: src/regex/string.rs:1708:24: 1708:28 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1708:24: 1708:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:1709:9: 1711:67 (#0),
                },
            ),
        ),
        ty: core::option::Option<regex_automata::Span>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1709:9: 1710:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:1709:9: 1711:67 (#0),
                },
            ),
        ),
        ty: &'{erased} regex_automata::util::captures::Captures,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1709:9: 1709:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:1709:9: 1711:67 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1710:32: 1710:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:1709:9: 1711:67 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:532 ~ regex[bf8d]::regex::string::{impl#12}::name::{closure#0}),
            [
                '{erased},
                i32,
                Binder { value: extern "RustCall" fn((regex_automata::Span,)) -> regex::string::Match<'{erased}>, bound_vars: [] },
                (&'{erased} str,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1711:18: 1711:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:1709:9: 1711:67 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1711:18: 1711:66 (#0),
            scope: scope[0],
        },
    },
]