[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_1),
            StorageLive(_7),
            _7 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:2001:9: 2001:20 (#0),
                    scope: scope[0],
                },
                kind: _5 = regex::string::Captures::<'_>::get(move _6, move _7) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageLive(_8),
            _8 = {closure@src/regex/string.rs:2002:18: 2002:21},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:2001:9: 2002:33 (#0),
                    scope: scope[0],
                },
                kind: _4 = core::option::Option::<regex::string::Match<'_>>::map::<&str, {closure@src/regex/string.rs:2002:18: 2002:21}>(move _5, move _8) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_5),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &_2,
            _9 = {closure@src/regex/string.rs:2003:29: 2003:31} { i: move _10 },
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:2001:9: 2003:68 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::option::Option::<&str>::unwrap_or_else::<{closure@src/regex/string.rs:2003:29: 2003:31}>(move _4, move _9) -> [return: bb3, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = &(*_3),
            StorageDead(_9),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:2004:6: 2004:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:2000:5: 2004:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:2000:41: 2000:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} regex::string::Captures<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:2000:18: 2000:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/regex/string.rs:2000:31: 2000:36 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/regex/string.rs:2000:28: 2000:29 (#0),
                            ),
                        ),
                        pat_span: src/regex/string.rs:2000:28: 2000:29 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:2000:28: 2000:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:2001:9: 2003:68 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:2001:9: 2003:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:2001:9: 2003:68 (#0),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:2001:9: 2002:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:2001:9: 2003:68 (#0),
                },
            ),
        ),
        ty: core::option::Option<regex::string::Match<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:2001:9: 2001:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:2001:9: 2003:68 (#0),
                },
            ),
        ),
        ty: &'{erased} regex::string::Captures<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:2001:9: 2001:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:2001:9: 2003:68 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:2001:18: 2001:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:2001:9: 2003:68 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:568 ~ regex[bf8d]::regex::string::{impl#14}::index::{closure#0}),
            [
                '{erased},
                i32,
                Binder { value: extern "RustCall" fn((regex::string::Match<'{erased}>,)) -> &'{erased} str, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:2002:18: 2002:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:2001:9: 2003:68 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:569 ~ regex[bf8d]::regex::string::{impl#14}::index::{closure#1}),
            [
                '{erased},
                i32,
                Binder { value: extern "RustCall" fn(()) -> &'{erased} str, bound_vars: [] },
                (&'{erased} usize,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:2003:29: 2003:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:2001:9: 2003:68 (#0),
                },
            ),
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:2003:29: 2003:67 (#0),
            scope: scope[0],
        },
    },
]