[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(_1.0: regex_automata::PatternSet),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:610:21: 610:38 (#0),
                    scope: scope[0],
                },
                kind: _3 = regex_automata::PatternSet::capacity(move _4) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            _2 = core::ops::Range::<usize> { start: const 0_usize, end: move _3 },
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageLive(_5),
            _5 = move (_1.0: regex_automata::PatternSet),
            StorageLive(_6),
            _6 = move _2,
            _0 = regexset::string::SetMatchesIntoIter { patset: move _5, it: move _6 },
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:611:49: 611:50 (#0),
                    scope: scope[1],
                },
                kind: drop(_5) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:612:5: 612:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:612:6: 612:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:612:5: 612:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:609:5: 612:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regexset::string::SetMatchesIntoIter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:609:27: 609:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: regexset::string::SetMatches,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:609:18: 609:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/regexset/string.rs:610:18: 610:38 (#0),
                            ),
                        ),
                        pat_span: src/regexset/string.rs:610:13: 610:15 (#0),
                    },
                ),
            ),
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:610:13: 610:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:610:21: 610:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} regex_automata::PatternSet,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:610:21: 610:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: regex_automata::PatternSet,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:611:38: 611:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:611:46: 611:48 (#0),
            scope: scope[0],
        },
    },
]