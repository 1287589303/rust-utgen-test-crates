[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = const 1_usize,
            _4 = &_5,
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &((*_1).0: alloc::vec::Vec<alloc::string::String>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:71:23: 71:38 (#0),
                    scope: scope[0],
                },
                kind: _7 = alloc::vec::Vec::<alloc::string::String>::len(move _8) -> [return: bb1, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            _6 = &_7,
            _3 = (move _4, move _6),
            StorageDead(_6),
            StorageDead(_4),
            PlaceMention(_3),
            StorageLive(_9),
            _9 = (_3.0: &usize),
            StorageLive(_10),
            _10 = (_3.1: &usize),
            StorageLive(_11),
            StorageLive(_12),
            _12 = (*_9),
            StorageLive(_13),
            _13 = (*_10),
            _11 = Eq(move _12, move _13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46 (#8),
                    scope: scope[1],
                },
                kind: switchInt(move _11) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            _2 = const (),
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_7),
            StorageDead(_5),
            StorageDead(_3),
            StorageDead(_2),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            _26 = &((*_1).1: regex_automata::meta::Config),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:72:21: 74:21 (#0),
                    scope: scope[0],
                },
                kind: _25 = <regex_automata::meta::Config as core::clone::Clone>::clone(move _26) -> [return: bb4, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            StorageLive(_15),
            _15 = core::panicking::AssertKind::Eq,
            FakeRead(ForLet(None), _15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = move _15,
            StorageLive(_18),
            StorageLive(_19),
            _19 = &(*_9),
            _18 = &(*_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &(*_10),
            _20 = &(*_21),
            StorageLive(_22),
            _22 = core::option::Option::<core::fmt::Arguments<'_>>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114 (#8),
                    scope: scope[2],
                },
                kind: _16 = core::panicking::assert_failed::<usize, usize>(move _17, move _18, move _20, move _22) -> bb33,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageLive(_27),
            _27 = regex_automata::MatchKind::LeftmostFirst,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:72:21: 75:50 (#0),
                    scope: scope[0],
                },
                kind: _24 = regex_automata::meta::Config::match_kind(move _25, move _27) -> [return: bb5, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:72:21: 76:30 (#0),
                    scope: scope[0],
                },
                kind: _23 = regex_automata::meta::Config::utf8_empty(move _24, const true) -> [return: bb6, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            FakeRead(ForLet(None), _23),
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            _30 = &((*_1).2: regex_automata::util::syntax::Config),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:77:23: 77:43 (#0),
                    scope: scope[3],
                },
                kind: _29 = <regex_automata::util::syntax::Config as core::clone::Clone>::clone(move _30) -> [return: bb7, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:77:23: 77:54 (#0),
                    scope: scope[3],
                },
                kind: _28 = regex_automata::util::syntax::Config::utf8(move _29, const true) -> [return: bb8, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            FakeRead(ForLet(None), _28),
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            _35 = &((*_1).0: alloc::vec::Vec<alloc::string::String>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:78:42: 78:45 (#0),
                    scope: scope[4],
                },
                kind: _34 = <alloc::vec::Vec<alloc::string::String> as core::ops::Index<usize>>::index(move _35, const 0_usize) -> [return: bb9, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _33 = &(*_34),
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:78:33: 78:54 (#0),
                    scope: scope[4],
                },
                kind: _32 = alloc::string::String::as_str(move _33) -> [return: bb10, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:78:23: 78:55 (#0),
                    scope: scope[4],
                },
                kind: _31 = <alloc::sync::Arc<str> as core::convert::From<&str>>::from(move _32) -> [return: bb11, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            FakeRead(ForLet(None), _31),
            StorageDead(_34),
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            StorageLive(_39),
            StorageLive(_40),
            StorageLive(_41),
            StorageLive(_42),
            StorageLive(_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:79:9: 79:29 (#0),
                    scope: scope[5],
                },
                kind: _43 = regex_automata::meta::Builder::new() -> [return: bb12, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _42 = &mut _43,
            StorageLive(_44),
            _44 = move _23,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:79:9: 80:30 (#0),
                    scope: scope[5],
                },
                kind: _41 = regex_automata::meta::Builder::configure(move _42, move _44) -> [return: bb13, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _40 = &mut (*_41),
            StorageDead(_44),
            StorageDead(_42),
            StorageLive(_45),
            _45 = _28,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:79:9: 81:29 (#0),
                    scope: scope[5],
                },
                kind: _39 = regex_automata::meta::Builder::syntax(move _40, move _45) -> [return: bb14, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _38 = &(*_39),
            StorageDead(_45),
            StorageDead(_40),
            StorageLive(_46),
            StorageLive(_47),
            StorageLive(_48),
            StorageLive(_49),
            _49 = &_31,
            _48 = &(*_49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:82:20: 82:28 (#0),
                    scope: scope[5],
                },
                kind: _47 = <alloc::sync::Arc<str> as core::ops::Deref>::deref(move _48) -> [return: bb15, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _46 = &(*_47),
            StorageDead(_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:79:9: 82:29 (#0),
                    scope: scope[5],
                },
                kind: _37 = regex_automata::meta::Builder::build(move _38, move _46) -> [return: bb16, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
            StorageDead(_38),
            StorageLive(_50),
            _50 = {closure@src/builders.rs:83:18: 83:24} { pattern: move _31 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:79:9: 83:56 (#0),
                    scope: scope[5],
                },
                kind: _36 = core::result::Result::<regex_automata::meta::Regex, regex_automata::meta::BuildError>::map::<regex::string::Regex, {closure@src/builders.rs:83:18: 83:24}>(move _37, move _50) -> [return: bb17, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            StorageDead(_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:79:9: 84:51 (#0),
                    scope: scope[5],
                },
                kind: _0 = core::result::Result::<regex::string::Regex, regex_automata::meta::BuildError>::map_err::<error::Error, fn(regex_automata::meta::BuildError) -> error::Error {error::Error::from_meta_build_error}>(move _36, error::Error::from_meta_build_error) -> [return: bb18, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:85:5: 85:6 (#0),
                    scope: scope[4],
                },
                kind: drop(_31) -> [return: bb19, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:85:5: 85:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_23) -> [return: bb20, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_49),
            StorageDead(_47),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:85:5: 85:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_43) -> [return: bb21, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            StorageDead(_41),
            StorageDead(_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:85:6: 85:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:84:50: 84:51 (#0),
                    scope: scope[5],
                },
                kind: drop(_36) -> [return: bb26, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:83:55: 83:56 (#0),
                    scope: scope[5],
                },
                kind: drop(_50) -> [return: bb24, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:83:55: 83:56 (#0),
                    scope: scope[5],
                },
                kind: drop(_37) -> [return: bb26, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:80:29: 80:30 (#0),
                    scope: scope[5],
                },
                kind: drop(_44) -> [return: bb26, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:85:5: 85:6 (#0),
                    scope: scope[4],
                },
                kind: drop(_31) -> [return: bb27, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:85:5: 85:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_23) -> [return: bb28, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:85:5: 85:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_43) -> [return: bb33, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:85:5: 85:6 (#0),
                    scope: scope[4],
                },
                kind: drop(_31) -> [return: bb30, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:85:5: 85:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_23) -> [return: bb33, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:76:29: 76:30 (#0),
                    scope: scope[0],
                },
                kind: drop(_24) -> [return: bb33, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:75:49: 75:50 (#0),
                    scope: scope[0],
                },
                kind: drop(_25) -> [return: bb33, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:70:5: 85:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<regex::string::Regex, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:70:35: 70:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} builders::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:70:25: 70:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:9: 48:10 (#8),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} usize, &'{erased} usize),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32 (#8),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:16: 38:22 (#8),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:71:20: 71:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31 (#8),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:71:23: 71:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::vec::Vec<alloc::string::String, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:71:23: 71:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32 (#8),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:13: 39:34 (#8),
                    },
                ),
            ),
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14: 39:22 (#8),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32 (#8),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:13: 39:34 (#8),
                    },
                ),
            ),
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24: 39:33 (#8),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#8),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46 (#8),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#8),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:22: 40:31 (#8),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#8),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:35: 40:45 (#8),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#8),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:47: 46:18 (#8),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:32: 41:65 (#8),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29 (#8),
                    },
                ),
            ),
        ),
        ty: core::panicking::AssertKind,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29 (#8),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114 (#8),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::panicking::AssertKind,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:54: 45:58 (#8),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:60: 45:70 (#8),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:60: 45:70 (#8),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:72: 45:83 (#8),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:72: 45:83 (#8),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::fmt::Arguments<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:85: 45:113 (#8),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/builders.rs:72:21: 76:30 (#0),
                            ),
                        ),
                        pat_span: src/builders.rs:72:13: 72:18 (#0),
                    },
                ),
            ),
        ),
        ty: regex_automata::meta::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:72:13: 72:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regex_automata::meta::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:72:21: 75:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regex_automata::meta::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:72:21: 74:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} regex_automata::meta::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:72:21: 73:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regex_automata::MatchKind,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:75:25: 75:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/builders.rs:77:23: 77:54 (#0),
                            ),
                        ),
                        pat_span: src/builders.rs:77:13: 77:20 (#0),
                    },
                ),
            ),
        ),
        ty: regex_automata::util::syntax::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:77:13: 77:20 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regex_automata::util::syntax::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:77:23: 77:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} regex_automata::util::syntax::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:77:23: 77:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/builders.rs:78:23: 78:55 (#0),
                            ),
                        ),
                        pat_span: src/builders.rs:78:13: 78:20 (#0),
                    },
                ),
            ),
        ),
        ty: alloc::sync::Arc<str, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:78:13: 78:20 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:78:33: 78:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:78:33: 78:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:78:42: 78:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::vec::Vec<alloc::string::String, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:78:33: 78:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/builders.rs:79:9: 84:51 (#0),
                },
            ),
        ),
        ty: core::result::Result<regex::string::Regex, regex_automata::meta::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:79:9: 83:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/builders.rs:79:9: 84:51 (#0),
                },
            ),
        ),
        ty: core::result::Result<regex_automata::meta::Regex, regex_automata::meta::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:79:9: 82:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/builders.rs:79:9: 84:51 (#0),
                },
            ),
        ),
        ty: &'{erased} regex_automata::meta::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:79:9: 81:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/builders.rs:79:9: 84:51 (#0),
                },
            ),
        ),
        ty: &'{erased} mut regex_automata::meta::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:79:9: 81:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/builders.rs:79:9: 84:51 (#0),
                },
            ),
        ),
        ty: &'{erased} mut regex_automata::meta::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:79:9: 80:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/builders.rs:79:9: 84:51 (#0),
                },
            ),
        ),
        ty: &'{erased} mut regex_automata::meta::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:79:9: 80:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/builders.rs:79:9: 84:51 (#0),
                },
            ),
        ),
        ty: &'{erased} mut regex_automata::meta::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:79:9: 79:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/builders.rs:79:9: 84:51 (#0),
                },
            ),
        ),
        ty: regex_automata::meta::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:79:9: 79:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/builders.rs:79:9: 84:51 (#0),
                },
            ),
        ),
        ty: regex_automata::meta::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:80:24: 80:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/builders.rs:79:9: 84:51 (#0),
                },
            ),
        ),
        ty: regex_automata::util::syntax::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:81:21: 81:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/builders.rs:79:9: 84:51 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:82:20: 82:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/builders.rs:79:9: 84:51 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:82:20: 82:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/builders.rs:79:9: 84:51 (#0),
                },
            ),
        ),
        ty: &'{erased} alloc::sync::Arc<str, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:82:20: 82:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/builders.rs:79:9: 84:51 (#0),
                },
            ),
        ),
        ty: &'{erased} alloc::sync::Arc<str, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:82:20: 82:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/builders.rs:79:9: 84:51 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:33 ~ regex[bf8d]::builders::{impl#1}::build_one_string::{closure#0}),
            [
                i32,
                Binder { value: extern "RustCall" fn((regex_automata::meta::Regex,)) -> regex::string::Regex, bound_vars: [] },
                (alloc::sync::Arc<str, alloc::alloc::Global>,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:83:18: 83:55 (#0),
            scope: scope[0],
        },
    },
]