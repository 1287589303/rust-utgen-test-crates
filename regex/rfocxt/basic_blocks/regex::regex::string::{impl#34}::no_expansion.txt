[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:2515:9: 2515:27 (#0),
                    scope: scope[0],
                },
                kind: _0 = regex::string::no_expansion::<alloc::borrow::Cow<'_, str>>(move _2) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:2516:6: 2516:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:2514:5: 2516:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<alloc::borrow::Cow<'{erased}, str>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:2514:35: 2514:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut alloc::borrow::Cow<'{erased}, str>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:2514:21: 2514:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:2515:9: 2515:27 (#0),
                },
            ),
        ),
        ty: &'{erased} alloc::borrow::Cow<'{erased}, str>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:2515:22: 2515:26 (#0),
            scope: scope[0],
        },
    },
]