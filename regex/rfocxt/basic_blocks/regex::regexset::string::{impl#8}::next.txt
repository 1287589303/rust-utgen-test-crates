[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &mut ((*_1).0: regex_automata::PatternSetIter<'_>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:704:9: 704:22 (#0),
                    scope: scope[0],
                },
                kind: _2 = <regex_automata::PatternSetIter<'_> as core::iter::Iterator>::next(move _3) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageLive(_4),
            _4 = {closure@src/regexset/string.rs:704:27: 704:32},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:704:9: 704:48 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::option::Option::<regex_automata::PatternID>::map::<usize, {closure@src/regexset/string.rs:704:27: 704:32}>(move _2, move _4) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:705:6: 705:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:703:5: 705:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:703:27: 703:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut regexset::string::SetMatchesIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:703:13: 703:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regexset/string.rs:704:9: 704:48 (#0),
                },
            ),
        ),
        ty: core::option::Option<regex_automata::PatternID>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:704:9: 704:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regexset/string.rs:704:9: 704:48 (#0),
                },
            ),
        ),
        ty: &'{erased} mut regex_automata::PatternSetIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:704:9: 704:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regexset/string.rs:704:9: 704:48 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:807 ~ regex[bf8d]::regexset::string::{impl#8}::next::{closure#0}),
            [
                '{erased},
                i32,
                Binder { value: extern "RustCall" fn((regex_automata::PatternID,)) -> usize, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:704:27: 704:47 (#0),
            scope: scope[0],
        },
    },
]