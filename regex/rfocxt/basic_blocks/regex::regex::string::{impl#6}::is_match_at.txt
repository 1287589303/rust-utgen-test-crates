[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:1073:13: 1073:33 (#0),
                    scope: scope[0],
                },
                kind: _6 = regex_automata::Input::<'_>::new::<str>(move _7) -> [return: bb1, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:1073:13: 1073:48 (#0),
                    scope: scope[0],
                },
                kind: _5 = regex_automata::Input::<'_>::earliest(move _6, const true) -> [return: bb2, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageLive(_8),
            StorageLive(_9),
            _9 = _3,
            StorageLive(_10),
            StorageLive(_11),
            _11 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:1073:61: 1073:75 (#0),
                    scope: scope[0],
                },
                kind: _10 = core::str::<impl str>::len(move _11) -> [return: bb3, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            _8 = core::ops::Range::<usize> { start: move _9, end: move _10 },
            StorageDead(_10),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:1073:13: 1073:76 (#0),
                    scope: scope[0],
                },
                kind: _4 = regex_automata::Input::<'_>::span::<core::ops::Range<usize>>(move _5, move _8) -> [return: bb4, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &((*_1).0: regex_automata::meta::Regex),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &_4,
            _15 = &(*_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:1074:9: 1074:38 (#0),
                    scope: scope[1],
                },
                kind: _13 = regex_automata::meta::Regex::search_half(move _14, move _15) -> [return: bb5, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _12 = &_13,
            StorageDead(_15),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:1074:9: 1074:48 (#0),
                    scope: scope[1],
                },
                kind: _0 = core::option::Option::<regex_automata::HalfMatch>::is_some(move _12) -> [return: bb6, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_4),
            StorageDead(_16),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:1075:6: 1075:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:1071:5: 1075:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1071:64: 1071:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} regex::string::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1071:24: 1071:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/regex/string.rs:1071:41: 1071:45 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/regex/string.rs:1071:31: 1071:39 (#0),
                            ),
                        ),
                        pat_span: src/regex/string.rs:1071:31: 1071:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1071:31: 1071:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/regex/string.rs:1071:54: 1071:59 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/regex/string.rs:1071:47: 1071:52 (#0),
                            ),
                        ),
                        pat_span: src/regex/string.rs:1071:47: 1071:52 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1071:47: 1071:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/regex/string.rs:1073:13: 1073:76 (#0),
                            ),
                        ),
                        pat_span: src/regex/string.rs:1072:13: 1072:18 (#0),
                    },
                ),
            ),
        ),
        ty: regex_automata::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1072:13: 1072:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regex_automata::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1073:13: 1073:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regex_automata::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1073:13: 1073:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1073:24: 1073:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1073:54: 1073:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1073:54: 1073:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1073:61: 1073:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1073:61: 1073:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:1074:9: 1074:48 (#0),
                },
            ),
        ),
        ty: &'{erased} core::option::Option<regex_automata::HalfMatch>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1074:9: 1074:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:1074:9: 1074:48 (#0),
                },
            ),
        ),
        ty: core::option::Option<regex_automata::HalfMatch>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1074:9: 1074:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:1074:9: 1074:48 (#0),
                },
            ),
        ),
        ty: &'{erased} regex_automata::meta::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1074:9: 1074:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:1074:9: 1074:48 (#0),
                },
            ),
        ),
        ty: &'{erased} regex_automata::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1074:31: 1074:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:1074:9: 1074:48 (#0),
                },
            ),
        ),
        ty: &'{erased} regex_automata::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1074:31: 1074:37 (#0),
            scope: scope[0],
        },
    },
]