[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &((*_1).0: regex_automata::PatternSet),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:601:24: 601:37 (#0),
                    scope: scope[0],
                },
                kind: _2 = regex_automata::PatternSet::iter(move _3) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            _0 = regexset::string::SetMatchesIter::<'_>(move _2),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:602:6: 602:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:600:5: 602:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regexset::string::SetMatchesIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:600:27: 600:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} regexset::string::SetMatches,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:600:17: 600:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: regex_automata::PatternSetIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:601:24: 601:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regexset/string.rs:601:9: 601:38 (#0),
                },
            ),
        ),
        ty: &'{erased} regex_automata::PatternSet,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:601:24: 601:30 (#0),
            scope: scope[0],
        },
    },
]