[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &((*_1).0: regex_automata::meta::Regex),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:359:42: 359:65 (#0),
                    scope: scope[0],
                },
                kind: _6 = regex_automata::meta::Regex::pattern_len(move _7) -> [return: bb1, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:359:26: 359:66 (#0),
                    scope: scope[0],
                },
                kind: _5 = regex_automata::PatternSet::new(move _6) -> [return: bb2, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            FakeRead(ForLet(None), _5),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:360:25: 360:45 (#0),
                    scope: scope[1],
                },
                kind: _8 = regex_automata::Input::<'_>::new::<str>(move _9) -> [return: bb3, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            FakeRead(ForLet(None), _8),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &mut _8,
            StorageLive(_12),
            _12 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:361:9: 361:31 (#0),
                    scope: scope[2],
                },
                kind: _10 = regex_automata::Input::<'_>::set_start(move _11, move _12) -> [return: bb4, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_10),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &((*_1).0: regex_automata::meta::Regex),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &_8,
            _15 = &(*_16),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &mut _5,
            _17 = &mut (*_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:362:9: 362:65 (#0),
                    scope: scope[2],
                },
                kind: _13 = regex_automata::meta::Regex::which_overlapping_matches(move _14, move _15, move _17) -> [return: bb5, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_15),
            StorageDead(_14),
            StorageDead(_18),
            StorageDead(_16),
            StorageDead(_13),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            _22 = &_5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:363:20: 363:33 (#0),
                    scope: scope[2],
                },
                kind: _21 = regex_automata::PatternSet::iter(move _22) -> [return: bb6, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:363:20: 363:33 (#190),
                    scope: scope[2],
                },
                kind: _20 = <regex_automata::PatternSetIter<'_> as core::iter::IntoIterator>::into_iter(move _21) -> [return: bb7, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            PlaceMention(_20),
            StorageLive(_23),
            _23 = move _20,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:363:9: 365:10 (#189),
                    scope: scope[3],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:363:9: 365:10 (#189),
                    scope: scope[3],
                },
                kind: falseUnwind -> [real: bb9, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            _28 = &mut _23,
            _27 = &mut (*_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:363:20: 363:33 (#190),
                    scope: scope[3],
                },
                kind: _26 = <regex_automata::PatternSetIter<'_> as core::iter::Iterator>::next(move _27) -> [return: bb10, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            PlaceMention(_26),
            _29 = discriminant(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:363:20: 363:33 (#190),
                    scope: scope[3],
                },
                kind: switchInt(move _29) -> [0: bb12, 1: bb13, otherwise: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:363:20: 363:33 (#190),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:363:9: 365:10 (#189),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb14, imaginary: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_31),
            _31 = ((_26 as Some).0: regex_automata::PatternID),
            StorageLive(_32),
            StorageLive(_33),
            _33 = &mut (*_2),
            StorageLive(_34),
            _34 = _31,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:364:20: 364:25 (#0),
                    scope: scope[4],
                },
                kind: _32 = <[bool] as core::ops::IndexMut<regex_automata::PatternID>>::index_mut(move _33, move _34) -> [return: bb15, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _19 = const (),
            StorageDead(_28),
            StorageDead(_26),
            StorageDead(_25),
            StorageDead(_23),
            StorageDead(_20),
            StorageDead(_19),
            StorageLive(_35),
            StorageLive(_36),
            _36 = &_5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:366:10: 366:27 (#0),
                    scope: scope[2],
                },
                kind: _35 = regex_automata::PatternSet::is_empty(move _36) -> [return: bb16, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_33),
            (*_32) = const true,
            StorageDead(_32),
            _25 = const (),
            StorageDead(_31),
            StorageDead(_28),
            StorageDead(_26),
            StorageDead(_25),
            _24 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:363:9: 365:10 (#189),
                    scope: scope[3],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            _0 = Not(move _35),
            StorageDead(_35),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:367:5: 367:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb17, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:367:6: 367:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:367:5: 367:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb19, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:346:5: 367:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:351:10: 351:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} regexset::string::RegexSet,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:347:9: 347:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/regexset/string.rs:348:18: 348:29 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/regexset/string.rs:348:9: 348:16 (#0),
                            ),
                        ),
                        pat_span: src/regexset/string.rs:348:9: 348:16 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [bool],
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:348:9: 348:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/regexset/string.rs:349:19: 349:23 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/regexset/string.rs:349:9: 349:17 (#0),
                            ),
                        ),
                        pat_span: src/regexset/string.rs:349:9: 349:17 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:349:9: 349:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/regexset/string.rs:350:16: 350:21 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/regexset/string.rs:350:9: 350:14 (#0),
                            ),
                        ),
                        pat_span: src/regexset/string.rs:350:9: 350:14 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:350:9: 350:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/regexset/string.rs:359:26: 359:66 (#0),
                            ),
                        ),
                        pat_span: src/regexset/string.rs:359:13: 359:23 (#0),
                    },
                ),
            ),
        ),
        ty: regex_automata::PatternSet,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:359:13: 359:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:359:42: 359:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} regex_automata::meta::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:359:42: 359:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/regexset/string.rs:360:25: 360:45 (#0),
                            ),
                        ),
                        pat_span: src/regexset/string.rs:360:13: 360:22 (#0),
                    },
                ),
            ),
        ),
        ty: regex_automata::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:360:13: 360:22 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:360:36: 360:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:361:9: 361:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_automata::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:361:9: 361:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:361:25: 361:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:362:9: 362:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} regex_automata::meta::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:362:9: 362:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} regex_automata::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:362:45: 362:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} regex_automata::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:362:45: 362:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_automata::PatternSet,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:362:53: 362:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_automata::PatternSet,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:362:53: 362:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:363:9: 365:10 (#189),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regex_automata::PatternSetIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:363:20: 363:33 (#190),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regex_automata::PatternSetIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:363:20: 363:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} regex_automata::PatternSet,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:363:20: 363:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _20,
                                ),
                                src/regexset/string.rs:363:20: 363:33 (#190),
                            ),
                        ),
                        pat_span: src/regexset/string.rs:363:20: 363:33 (#190),
                    },
                ),
            ),
        ),
        ty: regex_automata::PatternSetIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:363:20: 363:33 (#190),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:346:5: 367:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:363:20: 363:33 (#190),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<regex_automata::PatternID>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:363:20: 363:33 (#190),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_automata::PatternSetIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:363:20: 363:33 (#190),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_automata::PatternSetIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:363:20: 363:33 (#190),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:363:9: 365:10 (#189),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:363:9: 365:10 (#189),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _26,
                                ),
                                src/regexset/string.rs:363:20: 363:33 (#190),
                            ),
                        ),
                        pat_span: src/regexset/string.rs:363:13: 363:16 (#191),
                    },
                ),
            ),
        ),
        ty: regex_automata::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:363:13: 363:16 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:364:20: 364:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [bool],
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:364:13: 364:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regex_automata::PatternID,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:364:21: 364:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regexset/string.rs:366:9: 366:27 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:366:10: 366:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regexset/string.rs:366:9: 366:27 (#0),
                },
            ),
        ),
        ty: &'{erased} regex_automata::PatternSet,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:366:10: 366:16 (#0),
            scope: scope[0],
        },
    },
]