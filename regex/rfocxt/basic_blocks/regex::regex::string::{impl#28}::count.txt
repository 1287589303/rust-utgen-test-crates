[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = move (_1.1: regex_automata::util::captures::CapturesPatternIter<'_>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:2391:9: 2391:24 (#0),
                    scope: scope[0],
                },
                kind: _0 = <regex_automata::util::captures::CapturesPatternIter<'_> as core::iter::Iterator>::count(move _2) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:2392:6: 2392:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:2390:5: 2392:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:2390:23: 2390:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: regex::string::SubCaptureMatches<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:2390:14: 2390:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:2391:9: 2391:24 (#0),
                },
            ),
        ),
        ty: regex_automata::util::captures::CapturesPatternIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:2391:9: 2391:16 (#0),
            scope: scope[0],
        },
    },
]