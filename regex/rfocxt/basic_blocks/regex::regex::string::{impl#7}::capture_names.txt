[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &((*_1).0: regex_automata::meta::Regex),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:1326:22: 1326:44 (#0),
                    scope: scope[0],
                },
                kind: _4 = regex_automata::meta::Regex::group_info(move _5) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &(*_4),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:1326:22: 1326:75 (#0),
                    scope: scope[0],
                },
                kind: _2 = regex_automata::util::captures::GroupInfo::pattern_names(move _3, const regex_automata::PatternID::ZERO) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            _0 = regex::string::CaptureNames::<'_>(move _2),
            StorageDead(_2),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:1327:6: 1327:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:1325:5: 1327:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regex::string::CaptureNames<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1325:36: 1325:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} regex::string::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1325:26: 1325:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: regex_automata::util::captures::GroupInfoPatternNames<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1326:22: 1326:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:1326:9: 1326:76 (#0),
                },
            ),
        ),
        ty: &'{erased} regex_automata::util::captures::GroupInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1326:22: 1326:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:1326:9: 1326:76 (#0),
                },
            ),
        ),
        ty: &'{erased} regex_automata::util::captures::GroupInfo,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1326:22: 1326:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:1326:9: 1326:76 (#0),
                },
            ),
        ),
        ty: &'{erased} regex_automata::meta::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1326:22: 1326:31 (#0),
            scope: scope[0],
        },
    },
]