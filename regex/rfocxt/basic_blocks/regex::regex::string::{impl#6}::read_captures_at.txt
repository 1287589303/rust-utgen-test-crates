[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            _5 = &(*_1),
            StorageLive(_6),
            _6 = &mut (*_2),
            StorageLive(_7),
            _7 = &(*_3),
            StorageLive(_8),
            _8 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:1258:9: 1258:53 (#0),
                    scope: scope[0],
                },
                kind: _0 = regex::string::Regex::captures_read_at(move _5, move _6, move _7, move _8) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:1259:6: 1259:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:1252:5: 1259:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<regex::string::Match<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1257:10: 1257:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} regex::string::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1253:9: 1253:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/regex/string.rs:1254:15: 1254:36 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/regex/string.rs:1254:9: 1254:13 (#0),
                            ),
                        ),
                        pat_span: src/regex/string.rs:1254:9: 1254:13 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut regex::string::CaptureLocations,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1254:9: 1254:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/regex/string.rs:1255:19: 1255:26 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/regex/string.rs:1255:9: 1255:17 (#0),
                            ),
                        ),
                        pat_span: src/regex/string.rs:1255:9: 1255:17 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1255:9: 1255:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/regex/string.rs:1256:16: 1256:21 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/regex/string.rs:1256:9: 1256:14 (#0),
                            ),
                        ),
                        pat_span: src/regex/string.rs:1256:9: 1256:14 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1256:9: 1256:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:1258:9: 1258:53 (#0),
                },
            ),
        ),
        ty: &'{erased} regex::string::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1258:9: 1258:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:1258:9: 1258:53 (#0),
                },
            ),
        ),
        ty: &'{erased} mut regex::string::CaptureLocations,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1258:31: 1258:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:1258:9: 1258:53 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1258:37: 1258:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:1258:9: 1258:53 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1258:47: 1258:52 (#0),
            scope: scope[0],
        },
    },
]