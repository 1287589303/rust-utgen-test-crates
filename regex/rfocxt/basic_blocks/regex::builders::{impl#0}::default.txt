[
    BasicBlockData {
        statements: [
            StorageLive(_1),
            StorageLive(_2),
            StorageLive(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:52:21: 52:40 (#0),
                    scope: scope[0],
                },
                kind: _3 = regex_automata::meta::Config::new() -> [return: bb1, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _7 = const 20_i32 as u32 (IntToInt),
            _8 = Lt(move _7, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:53:39: 53:48 (#0),
                    scope: scope[0],
                },
                kind: assert(move _8, "attempt to shift left by `{}`, which would overflow", const 20_i32) -> [success: bb2, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = Shl(const 1_usize, const 20_i32),
            _9 = MulWithOverflow(const 10_usize, _6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:53:34: 53:48 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_9.1: bool), "attempt to compute `{} * {}`, which would overflow", const 10_usize, move _6) -> [success: bb3, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = move (_9.0: usize),
            StorageDead(_6),
            _4 = core::option::Option::<usize>::Some(move _5),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:52:21: 53:50 (#0),
                    scope: scope[0],
                },
                kind: _2 = regex_automata::meta::Config::nfa_size_limit(move _3, move _4) -> [return: bb4, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_10),
            StorageLive(_11),
            _12 = const 20_i32 as u32 (IntToInt),
            _13 = Lt(move _12, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:54:40: 54:49 (#0),
                    scope: scope[0],
                },
                kind: assert(move _13, "attempt to shift left by `{}`, which would overflow", const 20_i32) -> [success: bb5, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _11 = Shl(const 1_usize, const 20_i32),
            _14 = MulWithOverflow(const 2_usize, _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:54:36: 54:49 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_14.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _11) -> [success: bb6, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = move (_14.0: usize),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:52:21: 54:50 (#0),
                    scope: scope[0],
                },
                kind: _1 = regex_automata::meta::Config::hybrid_cache_capacity(move _2, move _10) -> [return: bb7, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_2),
            FakeRead(ForLet(None), _1),
            StorageLive(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9: 44:32 (#7),
                    scope: scope[1],
                },
                kind: _15 = alloc::vec::Vec::<alloc::string::String>::new() -> [return: bb8, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = move _1,
            StorageLive(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:55:49: 55:74 (#0),
                    scope: scope[1],
                },
                kind: _17 = <regex_automata::util::syntax::Config as core::default::Default>::default() -> [return: bb9, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = builders::Builder { pats: move _15, metac: move _16, syntaxc: move _17 },
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:55:75: 55:76 (#0),
                    scope: scope[1],
                },
                kind: drop(_16) -> [return: bb10, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:55:75: 55:76 (#0),
                    scope: scope[1],
                },
                kind: drop(_15) -> [return: bb11, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:56:5: 56:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb12, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:56:6: 56:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:55:75: 55:76 (#0),
                    scope: scope[1],
                },
                kind: drop(_16) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:55:75: 55:76 (#0),
                    scope: scope[1],
                },
                kind: drop(_15) -> [return: bb15, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:56:5: 56:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb18, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:54:49: 54:50 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb18, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:53:49: 53:50 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb18, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:51:5: 56:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: builders::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:51:21: 51:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/builders.rs:52:21: 54:50 (#0),
                            ),
                        ),
                        pat_span: src/builders.rs:52:13: 52:18 (#0),
                    },
                ),
            ),
        ),
        ty: regex_automata::meta::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:52:13: 52:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regex_automata::meta::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:52:21: 53:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regex_automata::meta::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:52:21: 52:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:53:29: 53:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:53:34: 53:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:53:39: 53:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:53:39: 53:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:53:39: 53:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:53:34: 53:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:54:36: 54:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:54:40: 54:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:54:40: 54:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:54:40: 54:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:54:36: 54:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: alloc::vec::Vec<alloc::string::String, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9: 44:32 (#7),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: regex_automata::meta::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:55:33: 55:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: regex_automata::util::syntax::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:55:49: 55:74 (#0),
            scope: scope[0],
        },
    },
]